//==================================================================================================================================================================
//
//
//
//                      __________________________________________________________________________
					   //                                                                        ||
//                     //  - CREDITOS POR LIBERACION:                                            ||
//                     //                           https://youtube.com/@TheGreenLightYT         ||
//                     //________________________________________________________________________||
//                     //                                                                        ||
//                     //                              UNETE:                                    ||
//                     //  •COMPRAS Y TIENDA PARA SAMP: - https://discord.com/invite/AkURxVcSUQ  ||
//                     //    •COMUNIDAD DEL CANAL: - https://discord.com/invite/zNAqRucQDP       ||
//                     //________________________________________________________________________||
//
//
//                               NEWGAMERS RP - CREDITOS A SUS CREADORES
//
//
//
//
//=================================================================================================================================================================
#pragma disablerecursion

#include <a_samp>
#include <foreach>
#include <streamer>
#include <a_mysql>      // 16-10-2020 - Bernal
#include <sscanf2>
#include <zcmd>
#include <easyDialog>
#include <djson>
#include <selec2>
#include <mSelection>
#include <YSI\y_ini>
#include <yom_buttons>
//chat de voz
//#include <crashdetect>
#include <playerprogress>
#pragma tabsize 0
#pragma warning disable 215 //este warning solo es un indicatorio del cmd:/taller - Bernal

AntiAmx()
{
    new a[][] = {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

//constants
#undef MAX_VEHICLES
#undef MAX_PLAYERS
#undef MAX_ACTORS

const
	MAX_VEHICLES = 2000,
	MAX_PLAYERS = 1000,
	MAX_ACTORS = 500,
	MAX_ROPA = 8,
	MAX_FACCIONES = 6,
	MAX_PLANTAS = 1000,
	MAX_Referidos = 1000,
	MAX_VEHICULOS = 30000,		// el 10 de diciembre habian 6640
	MAX_CASAS = 900,			// el 09 de febrero habian 200
    MAX_EMPRESAS = 100,         //creado el 1 de mayo del 2023 by x1 bernal.
	MAX_MUEBLES = 30000,		// el 11 de febrero habian 25732
	MAX_NEGOCIOS = 500,			// el 09 de febrero habian 450
	MAX_MODIFICACIONES = 200,
	MAX_FAMILIAS = 40,          // el 10 de diciembre habian 34
	MAX_PUERTAS = 200,
	MAX_INCENDIOS = 100,
	MAX_TERRITORIOS = 100,
	MAX_CAJEROS = 50,
	MAX_GASOLINERAS = 50,        //el 06 de enero 2023 habian 30
	MAX_BARRERAS = 100,
    MAX_PINCHOS = 20,
	MAX_GARAJES = 100,
	MAX_FABRICAS = 50,
	TOTAL_MODS = 100,
	MAX_GRAFFITIS = 50,
	MAX_ZONAS = 23,            //el 11 de enero habian 23
	MAX_VEHICULOS_TEMP = 50,
	MAX_REPORTES = 50,
	MAX_MOCHILAS = 500
;

#define MAX_RADIO_STREAM			(500)
#define MAX_RADIO_STREAM_MIN		(350)

//mysql server samp
new MySQL: DBngrp;

/*VPS - FalpaCity RPG*/
#define	samp_host			"192.99.32.172" //direccion_ip
#define	samp_user			"lar_267" //user_mysql
#define	samp_password		"B0!rRW8T6fQH" //password_mysql
#define	samp_database		"lar_narp" //name_database



/*#define	samp_host			"192.99.32.172" //direccion_ip
#define	samp_user			"lar_267" //user_mysql
#define	samp_password		"B0!rRW8T6fQH" //password_mysql
#define	samp_database		"lar_narp" //name_database
*/

#define reg_int			cache_get_value_int
#define reg_float		cache_get_value_float
#define reg_string		cache_get_value_name

guardar_int_mysql(tabla[], columna[], id, monto)
{
	new query[210];
	mysql_format(DBngrp, query, sizeof query, "UPDATE %s SET %s = '%d' WHERE ID = '%d'", tabla, columna, monto, id);
	mysql_tquery(DBngrp, query);
	return 1;
}

guardar_float_mysql(tabla[], columna[], id, Float: monto)
{
	new query[210];
	mysql_format(DBngrp, query, sizeof query, "UPDATE %s SET %s = '%f' WHERE ID = '%d'", tabla, columna, monto, id);
	mysql_tquery(DBngrp, query);
	return 1;
}

guardar_string_mysql(tabla[], columna[], id, monto[])
{
	new query[740];
	mysql_format(DBngrp, query, sizeof query, "UPDATE %s SET %s = '%e' WHERE ID = '%d'", tabla, columna, monto, id);
	mysql_tquery(DBngrp, query);
	return 1;
}

#define DATOS_ESTACION          "Estacionamientos/Estacion_%d.rp"
#define DATOS_MERCADOS          "Mercados/Mercado_%d.rp"
#define DATOS_FABRICAS          "Fabricas/Fabrica_%d.rp"
//territorios
//familias
#define DATOS_VEHICULOS_F		"Vehiculos_F/Veh_%d.rp"
//plantas
//hqs

//- Limites -
#define COLOR_VERDECLARO 0x08E8BBAA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_LIME 0x10F441AA
#define MAX_POBJETOS               (200)
#define MAX_ESTACION               (10)
#define MAX_MERCADOS	 		   (50)
#define	DEBUG_GM         			0
#define MAX_ACTORES                (50)
#define MAX_HQ                     (30)
#define MAX_MUEBLES_C              (80)
#define MAX_MUEBLES_N              (100)
#define	MAX_VEHJUGADOR             (5)
#define MAX_OBJETOS_S              (1000)
#define MAX_VEH_USADO				(100)
#define MAX_VEH_TRABAJOOS          (1000)
#define ARMAS_MERCA	                34562
#define ELECTRO                     12886
#define MAX_ZONE_NAME              (28)
#define MAX_TEXT_CHAT              (150)
#define MAX_TELEFONOS              (30)
#define MAX_CARACTERES_CLAVE       (64)
#define MAX_DINERO 				   (100)
#define VELOCITY_PEAJE_TIME        (30)
#define VELOCITY_PEAJE_PORCENT     (2)
#define MAX_SPLITLENGTH 		   (100)
#define MAX_PEAJES_COUNT           (20)
#define MIN_HAMBRE                 (10)
#define MIN_SED                    (10)
#define MAX_HAMBRE                 (150)
#define MAX_SED                    (120)
#define P_PANTALLA              (1000)

//
#define TIEMPO_RESPAWN 			   (900)
#define	TIPO_TELEPORTTRAFICANTE    (0)
#define	TIPO_TELEPORTCAMIONERO     (1)
#define	TIPO_TELEPORTTRABAJO1      (3)
#define	TIPO_TELEPORTGRANJERO      (4)

#define INVALID_PLAYER_VEHICLE_ID  (0)
#define CHECKPOINT_NONE 		   (0)
#define CHECKPOINT_RETURNTRUCK 	   (600)

//- Estilos
#define WALK_DEFAULT    1
#define WALK_PED        2
#define WALK_GANGSTA    3
#define WALK_GANGSTA2   4
#define WALK_OLD        5
#define WALK_FAT_OLD    6
#define WALK_FAT        7
#define WALK_LADY      	8
#define WALK_LADY2      9
#define WALK_WHORE      10
#define WALK_WHORE2     11
#define WALK_DRUNK     	12
#define WALK_BLIND     	13

//sistema musica random al ingresar by DarkForiom 13-nov-2022
new RandMusic[][] =
{
	"https://audio.jukehost.co.uk/EefMMHQxPKzZ8YORgFHB63J764LWsaOx"
};

//sampvoice
//new SV_GSTREAM:gstream = SV_NULL;
//new SV_LSTREAM:lstream[MAX_PLAYERS] = { SV_NULL, ... };
//
new CurrentDialog[MAX_PLAYERS];
new MuteadoDiscord[MAX_PLAYERS];
new DiscordActivo = 0;
new DudasActivo = 0;
new EstadoRentas = 0;
new EstadoTrabajos = 0;
new validado[MAX_PLAYERS];
new bool:vCreated[MAX_VEHICLES];
//
new rent_vehicle_id[MAX_PLAYERS];
new coche_trabajo_id[MAX_PLAYERS];

//
new EVOfrecidos[MAX_PLAYERS],dineropedido[MAX_PLAYERS],ofertador[MAX_PLAYERS], LeOfreci[MAX_PLAYERS], Deposito[MAX_PLAYERS],
	YaOfrecio[MAX_PLAYERS], idTimerOfertaPerdida[MAX_PLAYERS], idTimerTiempoVenta[MAX_PLAYERS], TiempoVenta[MAX_PLAYERS];

//Sistema de interaccion
new actor_1, actor_2, actor_3, actor_4, actor_5, actor_6, actor_7, actor_8, actor_9, actor_10;

//estacionamientos
new TiempoCar[MAX_VEHICLES];
new ZonaRespawn[MAX_VEHICLES];

//Ladron
new Robando[MAX_PLAYERS] = 0;
new Robo[MAX_PLAYERS];
new LugarRobo[MAX_PLAYERS];
new ID_Negocio_Robo[MAX_PLAYERS];


//
//----mercados negros
new ConquistandoMercado[MAX_PLAYERS];

native IsValidVehicle(vehicleid);
//
//Jardinero
new AmmountWood[MAX_PLAYERS];
//casco
new cascoActivo[MAX_PLAYERS];

// Uber
new EnServicioUber[MAX_PLAYERS];
new PeticionUber[MAX_PLAYERS];
new PeticionUberTransportador[MAX_PLAYERS];
new PeticionUberPrecio[MAX_PLAYERS];
new PeticionDinero[MAX_PLAYERS];
new Float:PeticionCorde[MAX_PLAYERS][3];
new PeticionUsuarioMando[MAX_PLAYERS];

//Sistema Mandar Ubicacion
new bool:Loc[MAX_PLAYERS];

// Minero
new
    Picando[MAX_PLAYERS] = 0,
    ConRoca[MAX_PLAYERS] = 0,
	mineral[MAX_PLAYERS] = 0,
    hands[MAX_PLAYERS];


//Sistema de reinicio nuevo
new Reinicio, TiempoReinicio;

//acento
new walktime[MAX_PLAYERS];
new WalkStyle[MAX_PLAYERS];
//

new PlayerText:InfoText[MAX_PLAYERS],
	InfoTimer[MAX_PLAYERS],
	InfoTextShowing[MAX_PLAYERS];

//- Macros
#define SetPVarInt(%0,%1,0); 		        DeletePVar(%0,%1);
#define funcion%0(%1) 				        forward %0(%1); public %0(%1)
#define Loop(%0,%1,%2)                      for(new %0 = %2; %0 < %1; %0++)
#define GetNameVehicle(%0) 					VehicleName[%0-400]
#define	GetVehicleName(%0)					VehicleName[GetVehicleModel(%0)-400]
#define	_enPos(%2,%1,%3,%4,%5)			  	IsPlayerInRangeOfPoint(%2,%1,%3,%4,%5)
#define function%0(%1)                      forward %0(%1); public %0(%1)

//SONIDOS PARA TRABAJOS Y FUNCIONES
#define AUDIO_ALARMA "sonidos.imgtemporal.club/Alarma.mp3"

#define IsValidComponent(%1)  \
									(1000 <= (%1) <= 1193)
#define IsVehicleValidModel(%1) \
									(400 <= (%1) <= 611)
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

//- Dialog's
#define D_INVALIDO      		   (0)

#define D_CINTURON					(28)

#define D_TELEFONO2					(30)
#define D_TELEFONO3					(31)
#define D_TELEFONO4					(32)
#define D_TELEFONO5					(33)
#define D_TELEFONO6					(34)
#define D_TELEFONO7					(35)
#define D_TELEFONO8					(36)

#define D_Uvehiculo1				(62)
#define D_Uvehiculo2				(63)
#define D_SALDO						(64)
#define	D_FOGATA					(65)

#define D_PUERTO					(68)
#define D_BOOMBOX					(69)
#define D_BOOMBOX1					(70)
#define D_BOOMBOX2					(71)


#define D_Cdnifalso					(77)
#define D_Cdnifalso2				(78)

#define D_Ifaccion					(80)

#define D_COMPRARTOYVIP				(101)
#define D_COMPRARTOYVIP2			(102)


#define D_ESTEREO					(107)
#define	D_PREMIUMS					(109)

#define D_CAMELLO					(115)
#define D_FABRICA					(116)
#define D_DrogaP					(117)
#define D_Praticar					(118)

#define D_MENUMALETEROF				(124)

#define D_AGENDA					(128)
#define D_AGENDA2					(129)
#define D_AGENDA3					(130)
#define D_AGENDA4					(131)
#define D_ELEGIRROPA				(132)
#define D_regalos					(2921)

#define D_RESTAURANTES				(142)

#define D_CLUCKINBELL				(144)
#define D_BURGERSHOT				(145)
#define D_PIZZASTACK				(146)
#define D_SEXSHOP					(147)
#define D_SEXSHOP2					(148)
#define D_SEXSHOP3					(149)
#define D_SEXSHOP4					(150)
#define D_GASOLINERA				(151)

#define D_FERRETERIA				(153)
#define D_FERRETERIA2				(154)


#define	D_Peluqueria1				(157)
#define	D_Peluqueria2				(158)
#define	D_Peluqueria3				(159)
#define D_NEG_CLUBS					(162)


#define	D_PCLSPD1					(164)
#define	D_PCLSPD2					(165)
#define	D_PCLSPD3					(166)

#define D_Cdnifalso3				(168)


#define D_WHATSDIA              (410)
#define D_WHATSDIA0             (411)
#define D_WHATSDIA1             (412)
#define D_WHATSDIA2             (413)
#define D_WHATSDIA3             (414)
#define D_TELEFONOUBER          (415)
#define D_UBER                  (416)
#define D_TRANSPOVEH            (417)

#define D_TOMARCAMION           (420)
#define D_TOMARCAMION2          (421)
#define D_TOMARBOTE             (422)
#define D_TOMARBOTE2            (423)
#define D_TOMARTRACTOR          (424)
#define D_TOMARTRACTOR2         (425)

#define D_COINS             	(427)
#define D_COINS0             	(428)
#define D_REQUIS             	(429)
#define DIALOGO_DONDEV			(430)
#define D_ADMINSTAFF            (431)
#define D_TRABAJOSTP            (432)
#define D_VALIDACION            (434)

//Model's
#define	D_UNIFORMESPD              (500)
#define	D_UNIFORMESSAN             (501)
#define	D_UNIFORMESALC             (502)
#define	D_UNIFORMESES              (503)
#define	D_OBJETOS_TRAFICO          (504)
#define D_OBJETOSADMIN             (505)

#define D_Pesca					   (508)
#define D_referido				   (509)
#define D_referidocrear			   (510)
#define D_referidocrear1		   (511)
#define D_referidoeliminar			(512)

//VIP

//Colores
#define C_VIP 					(0xC93CCEFF)
#define C_YT 					(0xD03C55FF)
#define C_GRIS                  (0xb0b0b0FF)
#define C_ROJO                  (0xFF0000FF)
#define C_LIGHTBLUE 	        (0x33CCFFFF)
#define C_GCRP                  (0xea2c2cFF)
#define C_AZUL 					(0x2641FEFF)
#define C_FADE1 				(0xE6E6E6FF)
#define C_FADE2 				(0xC8C8C8FF)
#define C_FADE3 				(0xAAAAAAFF)
#define C_FADE4 				(0x8C8C8CFF)
#define C_FADE5 				(0x6E6E6EFF)
#define C_GRAD1 				(0xB4B5B7FF)
#define C_GRAD2 				(0xBFC0C2FF)
#define C_GRAD3 				(0xCBCCCEFF)
#define C_GRAD4 				(0xD8D8D8FF)
#define C_GRAD5 				(0xE3E3E3FF)
#define C_GRAD6 				(0xF0F0F0FF)
#define C_VERDE		 			(0x1EB032FF)
#define C_ROJO2 				(0xFF6F6FFF)
#define C_BLANCO 			    (0xFFFFFFFF)
#define C_PLAYERBLANCO 			(0xFFFFFF00)
#define C_AMARILLO 	     	    (0xFFF000FF)
#define C_COLORPOLICIA   		(0x8D8DFFFF)
#define C_COLORRADIO    		(0x9B9BFFFF)
#define C_COLORSHERIFF  		(0x8A653AFF)
#define C_COLORVIPSOCIO    		(0x8A4DBDFF)

//totales sql
new totalplantas = 1;           // plantas de marihuana
new totalvehiculos = 1;         // vehiculos
new totalcasas = 1;				// casas
new totalreferidos = 1;			//referidos
new totalmuebles = 1;			// muebles
new totalnegocios = 1;          // negocios
new totalempresas = 1;          //empresas
new totalfamilias = 1;          // familias
new totalmercados = 1;          // familias
new totalfabricas = 1;          // familias
new totalpuertas = 1;           // puertas
new totalincendios = 1;         // incendios
new totalterritorios = 1;       // territorios
new totalcajeros = 1;			// cajeros
new totalgasolineras = 1;		// gasolineras
new totalgarajes = 1;			// garajes
new totalgraffitis = 1;			// graffitis
new totalpuntosvehtmp = 1;		// puntos de vehiculos temporales
new TotalReportes = 0; 			// reportes
new totalmochilas = 0;			// mochilas

//by x1

// sistema de anuncios en textdraw 27/04/2021 by x1
new PlayerText: TD_Anuncio[MAX_PLAYERS][2];
new TD_Uso[2];

// sistema de zonas seguras 26/04/2021 by x1
enum zonaPos
{
	Float: MinX,
	Float: MinY,
	Float: MaxX,
	Float: MaxY,
};

static const PosZona[][zonaPos] =
{
	{1429.5835, -1775.4901, 1629.5835, -1575.4901},
	{1843.2168, -1926.7267, 1943.2168, -1826.7267},
	{1104.4252, -1802.1528, 1204.4252, -1702.1528},
	{1151.2015, -1374.2225, 1251.2015, -1274.2225},
	{1969.6194, -1478.9656, 2069.6194, -1378.9656},
	{849.8060, -1151.8350, 949.8060, -1051.8350},
	{-466.6563, -1810.3239, -366.6563, -1710.3239},
	{-389.3024, -1448.7780, -369.3024, -1428.7780},
	{499.9512, 98.4652, 699.9512, 298.4652},
	{1453.1462, 612.3029, 1703.1462, 862.3029},
	{1012.2504, 1272.7073, 1112.2504, 1372.7073},
	{1314.1862, -1005.3629, 1354.1862, -965.3629},
	{2083.7515, -1826.3534, 2123.7515, -1786.3534},
	{-1653.0, 831.0, -1553.0, 931.0},
	{-2754.0, 562.0, -2529.0, 711.0},
	{1561.0, 1714.0, 1657.0, 1870.0},
	{2225.0, 2407.0, 2374.0, 2515.0},
	{2431.0, 2334.0, 2525.0, 2418.0},
	{-1538.0, 2499.0, -1489.0, 2550.0},
	{-1424.0, 2609.0, -1383.0, 2671.0},
	{-1709.0, 634.0, -1559.0, 741.0},
	{583.0, -621.0 , 646.0, -532.0},
	{-350.0, 1006.0, -284.0, 1076.0}
};

new ZonaGang[MAX_ZONAS];
new ZonaArea[MAX_ZONAS];
new EnZonaSegura[MAX_PLAYERS];

CargarZonas()
{
	Loop(id, MAX_ZONAS, 0)
	{
		ZonaGang[id] = GangZoneCreate(PosZona[id][MinX], PosZona[id][MinY], PosZona[id][MaxX], PosZona[id][MaxY]);
		ZonaArea[id] = CreateDynamicRectangle(PosZona[id][MinX], PosZona[id][MinY], PosZona[id][MaxX], PosZona[id][MaxY], -1, -1, -1);
	}
}

forward ShowZonas(playerid);
public ShowZonas(playerid)
{
	Loop(id, MAX_ZONAS, 0)
	{
		GangZoneShowForPlayer(playerid, ZonaGang[id], 0x00cc0066);
	}
}

//

new Obj_Banco[30];
new Timer_Banco[5];
new Proceso_Banco[5];
new Text3D: Label_Banco[5];
new ID_Banco_Robando[MAX_PLAYERS];
new playerGraffitiTimer[MAX_PLAYERS];
new Player_Color_Conquista[MAX_PLAYERS];
new Text: Box_Conquista;
new Text: TD_Necesidades[2];
new PlayerText: TD_Conquista[MAX_PLAYERS];

new Tiempo_Loteria = 120;
new actor_venta[2];
new Robando_Objeto[MAX_PLAYERS];
new ID_Robo_Casa[MAX_PLAYERS];
new Tiempo_Robo_Casa[MAX_PLAYERS];

new Explotando[MAX_PLAYERS];
new DinamitaObj[MAX_PLAYERS];
new RecogerDinero[MAX_PLAYERS];

new Act_Inventario[MAX_PLAYERS];
new Text:INV_base, Text:INV_2base, Text:INV_info, Text:INV_2info, Text:INV_IeD, Text:INV_exit;
new Text:LoginTD[16];
new PlayerText:INV_nombre[MAX_PLAYERS];
new PlayerText:INV_obj[MAX_PLAYERS][24];
new PlayerText:INV_skin[MAX_PLAYERS];
new PlayerText:nombrelogin[MAX_PLAYERS];

new cost_fuel = 900;

new SirenObject[MAX_VEHICLES][7]; //objeto
new bool:SirenOn[MAX_VEHICLES]; //bool sirena

new SaliendoServer[MAX_PLAYERS];
new PlayerText:TD_Velocimetro[MAX_PLAYERS][2];
new debugDead[MAX_PLAYERS];

//anticheat (16/02/2020) - 1: activado - 0: desactivado
new
	cheat_VehicleSpawning = 1,
	cheat_Vehicle1teleport = 1,
	cheat_Vehicle2teleport = 1,
	cheat_weapons = 1,
	cheat_balas = 1,
	cheat_PlayerTeleport = 1,
	cheat_TPtrabajos = 1
;

//cheat teleport 03/03/2020
new Float: CurrentPos[MAX_PLAYERS][3];
new Float: pSetPos[MAX_PLAYERS][3];
new WarningTPlayer[MAX_PLAYERS];

static const Float: CheatPositions [][3] =
{
	{-1935.77, 228.79, 34.16}, //Transfender near Wang Cars in Doherty
	{-2707.48, 218.65, 4.93}, //Wheel Archangels in Ocean Flats
	{2645.61, -2029.15, 14.28}, //LowRider Tuning Garage in Willowfield
	{1041.26, -1036.77, 32.48}, //Transfender in Temple
	{2387.55, 1035.70, 11.56}, //Transfender in come-a-lot
	{1836.93, -1856.28, 14.13}, //Eight Ball Autos near El Corona
	{2006.11, 2292.87, 11.57}, //Welding Wedding Bomb-workshop in Emerald Isle
	{-1787.25, 1202.00, 25.84}, //Michelles Pay 'n' Spray in Downtown
	{720.10, -470.93, 17.07}, //Pay 'n' Spray in Dillimore
	{-1420.21, 2599.45, 56.43}, //Pay 'n' Spray in El Quebrados
	{-100.16, 1100.79, 20.34}, //Pay 'n' Spray in Fort Carson
	{2078.44, -1831.44, 14.13}, //Pay 'n' Spray in Idlewood
	{-2426.89, 1036.61, 51.14}, //Pay 'n' Spray in Juniper Hollow
	{1957.96, 2161.96, 11.56}, //Pay 'n' Spray in Redsands East
	{488.29, -1724.85, 12.01}, //Pay 'n' Spray in Santa Maria Beach
	{1025.08, -1037.28, 32.28}, //Pay 'n' Spray in Temple
	{2393.70, 1472.80, 11.42}, //Pay 'n' Spray near Royal Casino
	{-1904.97, 268.51, 41.04}, //Pay 'n' Spray near Wang Cars in Doherty
	{403.58, 2486.33, 17.23}, //Player Garage: Verdant Meadows
	{1578.24, 1245.20, 11.57}, //Player Garage: Las Venturas Airport
	{-2105.79, 905.11, 77.07}, //Player Garage: Calton Heights
	{423.69, 2545.99, 17.07}, //Player Garage: Derdant Meadows
	{785.79, -513.12, 17.44}, //Player Garage: Dillimore
	{-2027.34, 141.02, 29.57}, //Player Garage: Doherty
	{1698.10, -2095.88, 14.29}, //Player Garage: El Corona
	{-361.10, 1185.23, 20.49}, //Player Garage: Fort Carson
	{-2463.27, -124.86, 26.41}, //Player Garage: Hashbury
	{2505.64, -1683.72, 14.25}, //Player Garage: Johnson House
	{1350.76, -615.56, 109.88}, //Player Garage: Mulholland
	{2231.64, 156.93, 27.63}, //Player Garage: Palomino Creek
	{-2695.51, 810.70, 50.57}, //Player Garage: Paradiso
	{1293.61, 2529.54, 11.42}, //Player Garage: Prickle Pine
	{1401.34, 1903.08, 11.99}, //Player Garage: Redland West
	{2436.50, 698.43, 11.60}, //Player Garage: Rockshore West
	{322.65, -1780.30, 5.55}, //Player Garage: Santa Maria Beach
	{917.46, 2012.14, 11.65}, //Player Garage: Whitewood Estates
	{1641.14, -1526.87, 14.30}, //Commerce Region Loading Bay
	{-1617.58, 688.69, -4.50}, //San Fierro Police Garage
	{837.05, -1101.93, 23.98}, //Los Santos Cemetery
	{2338.32, -1180.61, 1027.98}, //Interior: Burning Desire House
	{-975.5766, 1061.1312, 1345.6719}, //Interior: RC Zero's Battlefield
	{-750.80, 491.00, 1371.70}, //Interior: Liberty City
	{-1400.2138, 106.8926, 1032.2779}, //Interior: Unknown Stadium
	{-2015.6638, 147.2069, 29.3127}, //Interior: Secret San Fierro Chunk
	{2220.26, -1148.01, 1025.80}, //Interior: Jefferson Motel
	{-2660.6185, 1426.8320, 907.3626}, //Interior: Jizzy's Pleasure Dome
	{-1394.20, 987.62, 1023.96}, //Stadium: Bloodbowl
	{-1410.72, 1591.16, 1052.53}, //Stadium: Kickstart
	{-1417.8720, -276.4260, 1051.1910}, //Stadium: 8-Track Stadium
	{-25.8844, -185.8689, 1003.5499}, //24/7 Store: Big-L-Shaped
	{6.0911, -29.2718, 1003.5499}, //24/7 Store: Big-Oblong
	{-30.9469, -89.6095, 1003.5499}, //24/7 Store: Med-Square
	{-25.1329, -139.0669, 1003.5499}, //24/7 Store: Med-Square
	{-27.3123, -29.2775, 1003.5499}, //24/7 Store: Sml-Long
	{-26.6915, -55.7148, 1003.5499}, //24/7 Store: Sml-Square
	{-1827.1473, 7.2074, 1061.1435}, //Airport: Ticket Sales
	{-1855.5687, 41.2631, 1061.1435}, //Airport: Baggage Claim
	{2.3848, 33.1033, 1199.8499}, //Airplane: Shamal Cabin
	{315.8561, 1024.4964, 1949.7973}, //Airplane: Andromada Cargo hold
	{2536.08, -1632.98, 13.79}, // Grove Street
	{1992.93, 1047.31, 10.82}, //Four Dragons Casino
	{2033.00, -1416.02, 16.99}, // LS Hospital
	{-2653.11, 634.78, 14.45}, // SF Hospital
	{1580.22, 1768.93, 10.82}, //LV Hospital
	{-1550.73, 99.29, 17.33}, //SF Export
	//Positions given to me by SureShot :O
 	{-2057.8000, 229.9000, 35.6204}, // San Fierro
 	{-2366.0000, -1667.4000, 484.1011}, // Mount Chiliad
 	{2503.7000, -1705.8000, 13.5480}, // Grove Street
 	{1997.9000, 1056.3000, 10.8203}, // Las Venturas
 	{-2872.7000, 2712.6001, 275.2690}, // BaySide
 	{904.1000, 608.0000, -32.3281}, // Unterwasser
 	{-236.9000, 2663.8000, 73.6513} // The big Cock
};

forward IsCheatPosition (playerid);
public IsCheatPosition (playerid)//Teleporting to these locations is always cheating!
{
	for (new i = 0; i < sizeof (CheatPositions); ++i)
		if (IsPlayerInRangeOfPoint (playerid, 5.0, CheatPositions [i][0], CheatPositions [i][1], CheatPositions [i][2]))
			return true;
	return false;
}

//cheat weapons
new advWeapons[MAX_PLAYERS];

//
new LastUpdate[MAX_PLAYERS];

#define MAX_SYNC_TYPES          (5)

#define SYNC_TYPE_POS           (0)
#define SYNC_TYPE_HEALTH        (1)
#define SYNC_TYPE_ARMOUR        (2)
#define SYNC_TYPE_WEAPONS       (3)
#define SYNC_TYPE_VEHICLE       (4)

enum sxdInfo
{
	sTimeSync,
	sLastSyncUpdate,
};
new InfoSync[MAX_PLAYERS][MAX_SYNC_TYPES][sxdInfo];

static stock SetSyncTime(playerid, synctype, base = 3)
{
	if (!IsPlayerConnectedEx(playerid) || synctype < 0 || synctype >= MAX_SYNC_TYPES)
	    return 0;

    InfoSync[playerid][synctype][sTimeSync] = base;
	InfoSync[playerid][synctype][sLastSyncUpdate] = GetTickCount ();
	return 1;
}

//vehicle teleport type 1
new CarTick[MAX_PLAYERS];

//vehicle teleport type 2
new LastVehicle[MAX_PLAYERS];
new Adv2Vehs[MAX_PLAYERS];

SetPlayerPosEx(playerid, Float: x, Float: y, Float: z)
{
	if (IsPlayerConnectedEx(playerid))
	{
		if (SetPlayerPos(playerid, x, y, z))
		{
			CurrentPos[playerid][0] = x;
			CurrentPos[playerid][1] = y;
			CurrentPos[playerid][2] = z;
			pSetPos[playerid][0] = x;
			pSetPos[playerid][1] = y;
			pSetPos[playerid][2] = z;
   			SetSyncTime(playerid, SYNC_TYPE_POS);
   			WarningTPlayer[playerid] = 0;
			return 1;
		}
	}
	return 0;
}

/*
SetPlayerRaceCheckpointEx(playerid, type, Float: x, Float: y, Float: z, Float: nextx, Float: nexty, Float: nextz, Float: size)
{
	if (IsPlayerInRangeOfPoint (playerid, (size + 5.0), x, y, z))//Prevent that spawning a checkpoint near a player counts as checkpoint teleport.
		SetSyncTime (playerid, SYNC_TYPE_POS);
	return SetPlayerRaceCheckpoint(playerid, type, x, y, z, nextx, nexty, nextz, size);
}
*/

PutPlayerInVehicleEx(playerid, vehicleid, seatid)
{
	if (IsPlayerConnectedEx(playerid) && vehicleid != INVALID_VEHICLE_ID)
	{
		if (PutPlayerInVehicle(playerid, vehicleid, seatid))
		{
		    SetSyncTime(playerid, SYNC_TYPE_POS);
			LastVehicle[playerid] = vehicleid;
 			return 1;
		}
	}
	return 0;
}

//vehicle spawning
new AdvVehs[MAX_PLAYERS];

enum e_VEH_POS
{
	Float: vp_x,
	Float: vp_y,
	Float: vp_z,
	Float: vp_z_angle,
	Float: vp_distance,
}
new uwuVehPos[MAX_VEHICLES][e_VEH_POS];

stock MoverVehiclePos(vehicleid, Float:x, Float:y, Float:z)
{
	if (SetVehiclePos(vehicleid, x, y, z))
	{
		uwuVehPos[vehicleid][vp_x] = x;
		uwuVehPos[vehicleid][vp_y] = y;
		uwuVehPos[vehicleid][vp_z] = z;
		foreach(Player, i) if (GetPlayerVehicleID(i) == vehicleid)
		{
			CurrentPos[i][0] = x;
			CurrentPos[i][1] = y;
			CurrentPos[i][2] = z;
			pSetPos[i][0] = x;
			pSetPos[i][1] = y;
			pSetPos[i][2] = z;
			SetSyncTime(i, SYNC_TYPE_POS);
   			WarningTPlayer[i] = 0;
		}
		return 1;
	}
	return 0;
}

new activate_wasted[MAX_PLAYERS];
new PlayerText:TD_Wasted[MAX_PLAYERS];
new Float: PosSpawnBug[MAX_PLAYERS][4], PosVwBug[MAX_PLAYERS], PosIntBug[MAX_PLAYERS];

new FalsoPD[MAX_PLAYERS];
new bool:playerTextdraw[MAX_PLAYERS];
new Text3D:playerVehicleTextdraw[MAX_PLAYERS];

//basurero
new puntos_recorridos_basu[MAX_PLAYERS], con_basura_mano[MAX_PLAYERS], tu_veh_basura[MAX_PLAYERS], idcompanero[MAX_PLAYERS];

static const Float: point_basura[][] =
{
	{1078.93835, 1804.96936, 10.88268},
	{1735.35449, 2224.09351, 10.83999},
	{2309.19312, 2505.88550, 10.78651},
	{2519.78320, 1225.94763, 10.82832},
	{1627.08337, 1140.68884, 10.76763},
	{1139.02625, 1201.08069, 10.81618}
};

new timer_muerte[MAX_PLAYERS];

new PlayerText:draw_money[MAX_PLAYERS];
new GetTextDraw[MAX_PLAYERS];

new VehiculoMEcha[MAX_PLAYERS];
new PrecioMecaOpera[MAX_PLAYERS];
new YaOfrecioMeca[MAX_PLAYERS];
new EsElOfrecedorMeca[MAX_PLAYERS];
new TimerOperacionMeca[MAX_PLAYERS];
new MecanicoDuty[MAX_PLAYERS];
new TimerRepararVip[MAX_PLAYERS];
new TimerCrear[MAX_PLAYERS];
new TimerCombate[MAX_PLAYERS];
new TimerPuertas[MAX_PLAYERS];
new TimerTiempoCarcel[MAX_PLAYERS];
new EnLlamadoMecanico[MAX_PLAYERS];
new TiempoLlamadoMecanico[MAX_PLAYERS];
new Float: PosLlamadoMecanico[MAX_PLAYERS][3];
new ConLlamadoMecanico[MAX_PLAYERS];
new TimerOtherLlamado[MAX_PLAYERS];

new PrecioOral[MAX_PLAYERS];
new ClienteOral[MAX_PLAYERS];
new PutaOral[MAX_PLAYERS];
new TimerProstituta[MAX_PLAYERS];

new NegocioOffer[MAX_PLAYERS];
new NegocioPrice[MAX_PLAYERS];
new NegocioSQL_ID[MAX_PLAYERS];

new EnVentaPropiedad[MAX_PLAYERS];
new CasaOffer[MAX_PLAYERS];
new CasaPrice[MAX_PLAYERS];
new CasaSQL_ID[MAX_PLAYERS];

new edicion_sql_actual[MAX_PLAYERS];

new DiscordTimer[MAX_PLAYERS];
new EnModoTrabajo[MAX_PLAYERS];
new Text3D: LabelBoombox[MAX_PLAYERS];

IsLaborJob(id)
{
	new name[32] = "none";
	switch (id)
	{
	    case 1: alm(name, "Carguero");
		case 6: alm(name, "Carpintero");
		case 7: alm(name, "Aserrador");
		case 10: alm(name, "Granjero");
		case 12: alm(name, "Minero");
		case 13: alm(name, "Jardinero");
	}
	return name;
}

GetNameJob(job)
{
	new is_name[19];
	switch (job)
	{
		case 1: alm(is_name, "Carguero");
		case 2: alm(is_name, "Delincuente");
		case 3: alm(is_name, "Basurero");
		case 4: alm(is_name, "Camionero");
		case 5: alm(is_name, "Ladron de coches");
		case 6: alm(is_name, "Carpintero");
		case 7: alm(is_name, "Aserrador");
		case 8: alm(is_name, "Mecanico");
		case 9: alm(is_name, "Prostituta");
		case 10: alm(is_name, "Granjero");
		case 11: alm(is_name, "Traficante");
		case 12: alm(is_name, "deshabilitado");
		case 13: alm(is_name, "Recolector");
		case 14: alm(is_name, "Minero");
		case 15: alm(is_name, "Medico");
		default: alm(is_name, "Ninguno");
	}
	return is_name;
}

new VehGuanteraPlayer[MAX_PLAYERS];

new Toy_ID[MAX_PLAYERS];
new ToyObject[MAX_PLAYERS];
new Text:BuyToy[5];
new PlayerText:ToyBuy[MAX_PLAYERS];
new TemporalToyParte[MAX_PLAYERS];
new Float: TemporalToyPos[MAX_PLAYERS][3];
new Float: TemporalToyRot[MAX_PLAYERS][3];
new Float: TemporalToyEsc[MAX_PLAYERS][3];
new IDcameraToy[MAX_PLAYERS];
new TypeIDtoy[MAX_PLAYERS];
new TypeIDedit[MAX_PLAYERS];
new Text:TD_MenuToy[21];
new PlayerText:MenuToy_TD[MAX_PLAYERS][2];

enum mainT
{
	tModelo,	// id objeto samp
};

static const InfoToi[][mainT] =
{
	{18976},
	{18979},
	{18978},
	{19064},
	{19065},
	{19066},
	{19330},
	{19904},
	{19067},
	{19068},
	{19069},
	{19623},
	{19627},
	{19137},
	{19330},
	{19331},
	{19317},
	{19318},
	{19319},
	{19421},
	{19422},
	{19423},
	{19424},
	{19558},
	{19624},
	{1210},
	{18645},
	{19801},
	{18926},
	{18927},
	{18928},
	{18929},
	{18930},
	{18931},
	{18932},
	{18933},
	{18934},
	{18935},
	{18939},
	{18940},
	{18941},
	{18942},
	{18955},
	{18956},
	{18957},
	{18958},
	{18959},
	{18960},
	{18953},
	{18954},
	{18961},
	{18966},
	{18967},
	{18968},
	{18969},
	{18936},
	{18937},
	{18938},
	{18944},
	{18945},
	{18946},
	{18947},
	{18948},
	{18949},
	{18950},
	{18951},
	{18962},
	{18971},
	{18972},
	{18973},
	{18970},
	{18639},
	{19160},
	{19093},
	{18638},
	{18632},
	{19942},
	{18891},
	{18892},
	{18893},
	{18894},
	{18895},
	{18896},
	{18897},
	{18898},
	{18899},
	{18900},
	{18901},
	{18902},
	{18903},
	{18904},
	{18905},
	{18906},
	{18907},
	{18908},
	{18909},
	{18910},
	{18911},
	{18912},
	{18913},
	{18914},
	{18915},
	{18916},
	{18917},
	{18918},
	{18919},
	{18920},
	{18921},
	{18922},
	{18923},
	{18924},
	{18925},
	{19006},
	{19007},
	{19008},
	{19009},
	{19010},
	{19011},
	{19012},
	{19013},
	{19014},
	{19015},
	{19016},
	{19017},
	{19018},
	{19019},
	{19020},
	{19021},
	{19022},
	{19023},
	{19024},
	{19025},
	{19026},
	{19027},
	{19028},
	{19029},
	{19030},
	{19031},
	{19032},
	{19033},
	{19034},
	{19035},
	{19095},
	{19097},
	{19098},
	{19101},
	{19102},
	{19103},
	{19104},
	{19105},
	{19106},
	{19107},
	{19108},
	{19109},
	{19110},
	{19111},
	{19112},
	{19039},
	{19040},
	{19041},
	{19042},
	{19043},
	{19044},
	{19045},
	{19046},
	{19047},
	{19048},
	{19049},
	{19050},
	{19051},
	{19052},
	{19053},
	{18641},
	{11712},
	{2045}
};

new PlayerText:InfoZona[MAX_PLAYERS];
new PlayerText:InfoZS[MAX_PLAYERS];
new PlayerBar:BarraSed[MAX_PLAYERS];
new PlayerBar:BarraHambre[MAX_PLAYERS];
new PlayerBar:BarraExp[MAX_PLAYERS];
new PlayerText:InfoInferior[MAX_PLAYERS];
new PlayerText:TD_PantallaHG[MAX_PLAYERS][6];
new PlayerText:PayDayTD[MAX_PLAYERS];

new	countGameTime[MAX_PLAYERS]; //variable update cada 5seg la posicion del jugador

// compra de skin 07/10/2020

new Ropa_ID[MAX_PLAYERS];
new PlayerText:TD_ShopRopa[MAX_PLAYERS][6];
new PlayerText:SkinBuy[MAX_PLAYERS], NegocioSkin[MAX_PLAYERS];
new RopitaAnterior[MAX_PLAYERS];
new NegocioVW[MAX_PLAYERS], NegocioInt[MAX_PLAYERS], Float: NegocioPos[MAX_PLAYERS][4];

//Mapa aadiduras
new camioneros[2];

new state_on[MAX_PLAYERS]; // 0: ningun logeo, 1: en spawn, 2: en login & 3: jugando.

new interior_veh[MAX_VEHICLES];
GetVehicleInterior(vehicleid) return interior_veh[vehicleid];
SetVehicleInterior(vehicleid, interior)
{
	LinkVehicleToInterior(vehicleid, interior);
	interior_veh[vehicleid] = interior;
	return 1;
}

new PressBancaBarraObjeto[4];

//*new's
new
    SanMusic,
	clima = 14,
	Anuncios = 0,
	_sanCall = -1,
	pickupspf[7],
	ActFondos = 0,
	ActRegistro = 1,
	ActTest = 0, // Test de rol desactivado - :3 (pon '1' en vez de 0 para activarlo)
	UsandoGym[6] = 0,
	nivelexp = 5,
	DobleExperiencia = 1, //doble exp desactivada
	RobarBanco = 1, //robo banco desactivado
	DineroLoteria = 1,
	DineroEstado = 1,                             // ((TODO LO QUE TENGA 0 ESTA DESACTIVADO, PARA ACTIVAR PON 1 EN VEZ DE 0))
	ValorImpuestos = 1,
	FiestaParty = 0,
	MapeoFiesta[13],
	Text3D: DJ3DText,
	IDJugadorDJ = INVALID_PLAYER_ID,
	BoxeoActivo = 0,
	MapeoBoxeo[6],
	_Logeo[MAX_PLAYERS],
	_rVeh[MAX_PLAYERS],
	Quitando[MAX_PLAYERS],
 	IdListaDialog[MAX_PLAYERS],
	IdListaDialog1[MAX_PLAYERS],
	IdListaWeapon[MAX_PLAYERS],
	_Piedras[MAX_PLAYERS],
	_Minando[MAX_PLAYERS],
	cocherobo[MAX_PLAYERS],
	checkcoche[MAX_PLAYERS],
	veh_asiento[MAX_PLAYERS],
	r_vehiculo[MAX_PLAYERS],
	compra_Veh[MAX_PLAYERS],
	asesino[MAX_PLAYERS],
	Pedido[MAX_PLAYERS],
	_arma[MAX_PLAYERS],
	PlayerText: ServicioGrua[MAX_PLAYERS][4],
	PlayerText:TextTrabajo[MAX_PLAYERS],
	PlayerText:ConquistaMercado[MAX_PLAYERS],
	PlayerText:CuadroAyuda[MAX_PLAYERS],
    PlayerText:radio2[MAX_PLAYERS],
	NumeroMensaje[MAX_PLAYERS],
	EnLlamada[MAX_PLAYERS],
	ToqueLlamada[MAX_PLAYERS],
	PersonaEnLlamada[MAX_PLAYERS],
	ToqueLlamadaTimer[MAX_PLAYERS],
	Altavoz[MAX_PLAYERS],
	YaAviso[MAX_PLAYERS],
	TestErrores[MAX_PLAYERS],
	VehCallSign[MAX_VEHICLES],
	Text3D:TextCallSign[MAX_VEHICLES],
	estacionp[MAX_PLAYERS],
	escuchandop[MAX_PLAYERS],
	estacionveh[MAX_VEHICLES],
	Esposado[MAX_PLAYERS],
	intentoac[MAX_PLAYERS],
	RecargarTiempo[MAX_PLAYERS],
	VehiculoGasolina[MAX_PLAYERS],
	GasolinaInicialVeh[MAX_VEHICLES] = 200,
	VehicleStatus[MAX_VEHICLES char] = 0,
	arr_Engine[MAX_VEHICLES char],
	Taseado[MAX_PLAYERS],
	_Gomas[MAX_PLAYERS],
	TaserRecarga[MAX_PLAYERS],
	RanuraSeleccionadaA[MAX_PLAYERS],
	RanuraSeleccionada[MAX_PLAYERS],
	RanuraObjCSeleccionada[MAX_PLAYERS],
	RanuraObjNSeleccionada[MAX_PLAYERS],
	OfrecieronCasarse[MAX_PLAYERS],
	OfrecisteCasarse[MAX_PLAYERS],
	MultaPrecio[MAX_PLAYERS],
	MultaOfrecer[MAX_PLAYERS],
	FacturaMulta[MAX_PLAYERS],
	MostrarNombre[MAX_PLAYERS],
	HaciendoPressBanca[MAX_PLAYERS],
	ProgresoPressBanca[MAX_PLAYERS],
	RepeticionesPressBanca[MAX_PLAYERS],
	Spectando[MAX_PLAYERS],
	Spectate[MAX_PLAYERS],
	SpectadorID[MAX_PLAYERS],
	Atado[MAX_PLAYERS],
	Vendado[MAX_PLAYERS],
	VendasYSoga[MAX_PLAYERS],
	Text: EfectoCrack,
	Text: EfectoPorro,
	Text: EfectoCocaina,
	Text: EfectoHeroina,
	Consumiendo[MAX_PLAYERS],
	ReporteA[MAX_PLAYERS],
	ReporteB[MAX_PLAYERS],
	TiempoReporte[MAX_PLAYERS],
	ReporteT[MAX_PLAYERS][128],
	DudaTimer[MAX_PLAYERS],
	DudaB[MAX_PLAYERS] = 0,
	DudaTiempo[MAX_PLAYERS] = 0,
	DudaT[MAX_PLAYERS][128],
	Casco[MAX_PLAYERS],
	VisitaTimer[MAX_PLAYERS],
	VisitaTimer2[MAX_PLAYERS],
	Text3D: LabelTroncos,
	TroncosDis = 1000,
	Record_UsersOn,
	UsersD_0, UsersD_1, UsersD_2,
	UsersT_0, UsersT_1, UsersT_2,
	TiempoParaConquistar,
	ObjetoIDs[] = {1814, 1817, 2083, 1811},
	VehSeguro[MAX_VEHICLES],
	TruckDeliver[MAX_PLAYERS],
	gPlayerCheckpointStatus[MAX_PLAYERS],
	_Contenido[MAX_VEHICLES] = 0,
	_CamVeh[MAX_PLAYERS] = INVALID_VEHICLE_ID,
	Paquetes[MAX_PLAYERS],
	Fac5_ = 0,
	_MedicCall = 999,
	_MedicAcept[MAX_PLAYERS],
	_Medic2Call[MAX_PLAYERS],
	_BombCall = 999,
	_BombAcept[MAX_PLAYERS],
	_Bomb2Call[MAX_PLAYERS],
	Fac2_ = 0,
	SangreLAFD = 1000,
	NumeroFaccion[MAX_PLAYERS],
	NombreFaccion[MAX_PLAYERS][40],
	TomandoTrabajo[MAX_PLAYERS],
	BalasDeGoma[MAX_PLAYERS],
	VehicleWindows[MAX_VEHICLES] = 0,
	PrivadosB[MAX_PLAYERS] = 0,
	B_Musica[MAX_PLAYERS],
	B_Manos[MAX_PLAYERS],
	B_Pecho[MAX_PLAYERS],
	B_OOC[MAX_PLAYERS],
	B_VIP[MAX_PLAYERS],
	B_YT[MAX_PLAYERS],
	B_SAN[MAX_PLAYERS],
	B_Radio[MAX_PLAYERS],
	B_Admin[MAX_PLAYERS],
	B_Faccion[MAX_PLAYERS],
	B_WSP[MAX_PLAYERS],
	B_Privados[MAX_PLAYERS],
	B_Telefono[MAX_PLAYERS],
	B_SANMUSIC[MAX_PLAYERS],
	JugadorSentado[MAX_PLAYERS],
	EnCasaID[MAX_PLAYERS],
	EnEmpresaID[MAX_PLAYERS],
	Saludo_ID[MAX_PLAYERS],
	alcoholemia[MAX_PLAYERS],
	EnServicio[MAX_PLAYERS],
	modotazer[MAX_PLAYERS],
	EnServicioADM[MAX_PLAYERS],
	_VehID[MAX_PLAYERS],
	_Vehprecio[MAX_PLAYERS],
	_Vehdueno[MAX_PLAYERS],
	GiveKeysTo[MAX_PLAYERS],
	QuienManejo[MAX_PLAYERS],
	PagarTiempo[MAX_PLAYERS],
	CederTiempo[MAX_PLAYERS],
	QuienMato[MAX_PLAYERS][24],
	MusicaEsc[MAX_PLAYERS],
	VehMaleteroPlayer[MAX_PLAYERS],
	SolicitaRefuerzos[MAX_PLAYERS],
	BotonPanico[MAX_PLAYERS],
	ReparacionPrecio[MAX_PLAYERS],
	ReparacionOfrecer[MAX_PLAYERS],
	ReparacionVehiculo[MAX_PLAYERS],
	_Entrevista[MAX_PLAYERS],
	_2Entrevista[MAX_PLAYERS],
	DocumentoNombre[MAX_PLAYERS][32],
	JugadorUsandoAnimacion[MAX_PLAYERS],
	JetPack[MAX_PLAYERS],
	BigEar[MAX_PLAYERS],
	Intentar[MAX_PLAYERS],
	Intentar2[MAX_PLAYERS],
	IntentarD[MAX_PLAYERS],
	UsandoOptiwand[MAX_PLAYERS],
	jPt_fabrica[MAX_PLAYERS],
	MostrarVelocimetro[MAX_PLAYERS]
;

//*portones, puertas, vehiculos, 4s
new
	portonSAN,
	portonSAN1,
	portondeposito,
	PuertaLSPDINT,
	BotonPuertaLSPDINT,
	BotonPuertaLSPDINT1,
	PuertaLAPD,
	PortonLAPD,
	PuertaSasd,
	BotonPuertaSasd,
	BotonPuertaSasd1,
	LSPDVehicle[106],
	CamioneroVehicle[12],
	BasureroVehicle[10],
	LAFDVehicle[14],
	GranjeroVehicle[10],
	GNVehicle[17],
	GOBVehicle[4],
	CNNVehicle[5],
	SkinsHombre = mS_INVALID_LISTID,
	SkinsMujer = mS_INVALID_LISTID,
	AccesoriosVIP = mS_INVALID_LISTID,
	MueblesCasa = mS_INVALID_LISTID,
	MueblesNegocios = mS_INVALID_LISTID
;

//<=================================> mensajes
new AccionesColors[20] =
{
	0xACC97F22A, // 0 - /me
	0xC2A2DAAA, // 1 - /ame
	0xFFFF00FF, // 2 - /do
	0xFFFFFFFF, // 3 - /g
	0xFAD98CFF, // 4 - /s
	0xFF9B6AFF // 5 - /m
};

new Float: AccionesRadios[20] =
{
	30.0, // 0 - /me
	30.0, // 1 - /ame
	35.0, // 2 - /do
	50.0, // 3 - /g
	3.0, // 4 - /s
	60.0 // 5 - /m
};

// variables de 'cuentas.sql' desde 16-10-2020
new usuario_registro[MAX_PLAYERS]; // 2: jugando - 1: registrado - 0: no registrado

VerificarID(account)
{
	new query[256];
	mysql_format(DBngrp, query, sizeof query, "SELECT * FROM cuentas WHERE ID = '%d'", account);
	new Cache:result;
	result = mysql_query(DBngrp, query);
	if (cache_num_rows() > 0) return 1;
	cache_delete(result);
	return 0;
}

VerificarCuenta(account[])
{
	new query[256];
	mysql_format(DBngrp, query, sizeof query, "SELECT * FROM cuentas WHERE Nombre_Apellido = '%e'", account);
	new Cache:result;
	result = mysql_query(DBngrp, query);
	if (cache_num_rows() > 0) return 1;
	cache_delete(result);
	return 0;
}

NombreOriginal(playerid)
{
	new nameplayer[128];
	GetPlayerName(playerid, nameplayer, sizeof nameplayer);
	return nameplayer;
}

ipjugador(playerid)
{
	new newip[18];
	GetPlayerIp(playerid, newip, sizeof newip);
	return newip;
}

enum jugadorInfo
{
	jID,								// ID en base de datos
	jNombre_Apellido[MAX_PLAYER_NAME],	// Nombre Apellido de la cuenta
	jClave[65],							// Clave
	jSalt[11],							// Salt
	jEmail[256],						// Email
	jIP[18],							// IP
	jAdmin,                             // Nivel admin
	jEncargado[7],                      // Encargado: 0 (staff) 1 (faccion) 2 (familia) 3 (ban) 4 (rol) 5 (eventos) 6 (ayudantes)
	jFechaRegistro[256],                // Fecha de registro
	jUltimaConexion[256],               // ultima conexion
	Float: jPosicionX,					// Posicion X
	Float: jPosicionY,					// Posicion Y
	Float: jPosicionZ,					// Posicion Z
	Float: jPosicionR,					// Posicion R
	jInterior,							// Interior
	jVirtualWorld,						// VirtualWorld
	Float: jVida,						// Vida
	Float: jChaleco,					// Chaleco
	jSkin,								// Skin actual
	jRopa[MAX_ROPA],					// Ropa armarios
	jNivel,								// Nivel
	jExperiencia, 						// Experiencia
	jHorasConectado,					// Horas conectado
	jSexo,								// Sexo
	jEdad,								// Edad
	jCiudad,							// Ciudad
	jEstilo,							// Estilo de caminar
	jPelea,								// Tipo de pelea
	jSed,								// Sed
	jHambre,							// Hambre
	jAlcohol,							// Alcohol
	jFuerza,							// Fuerza
	jDinero,							// Dinero
	jBanco,								// Dinero Banco
	jFacLider,                          // Lider faccion
	jFacMiembro,                        // Miembro faccion
	jFacRango,                          // Rango faccion
	jFamLider,                          // Lider familia
	jFamMiembro,                        // Miembro familia
	jFamRango,                          // Rango familia
	jBolsillo[9],						// Bolsillo
	jBolsilloCant[9],					// Bolsillo cantidad
	jManoIzquierda,						// Mano izquierda
	jManoIzquierdaCant,					// Mano izquierda cantidad
	jManoDerecha,						// Mano derecha
	jManoDerechaCant,					// Mano derecha cantidad
	jEspalda,							// Espalda
	jEspaldaCant,						// Espalda cantidad
	jCinturon[6],						// Cinturon
	jCinturonCant[6],					// Cinturon cantidad
	jArmas[12],							// armas default GTA SA solucionado por yefferon
	jAlquilerCasa,						// Casa en renta
	jRestriccion[10],					// Variables restricciones
	jEstadoEstatico[128],               // Estado estatico
	jEstadoPersonal[128],               // Estado personal
	pUsaEstado,                         // Usa estado
	pConEstado,                         // Con estado
	jCoins,								// Coins
	jNivelVIP,							// VIP nivel
	jColorVIP,							// VIP color
	jDiaVIP, 							// VIP dia
	jMesVIP, 							// VIP mes
	jMuerto, 							// Muerto
	jMulticuenta,                       // Multicuenta
	jBaneado,							// Baneado
	jSobreAdmin[50],                    // Apodo admin
	jSobreAdminint,                     // Activado apodo admin
	jTelefono,							// Numero de telefono
	jSaldo,								// Saldo de telefono
	jFrecuencia,						// Frecuencia de radio
	jBoombox,							// Equipo de sonido
	jLoteria,							// numero de loteria
	jMascara,							// Mascara
	jEstrellas,							// Busqueda policial
	jMinEstrellas,                      // Minutos para deshacerse de estrellas
	jTrabajo1,					 		// Trabajo 1
	jTrabajo2, 							// Trabajo 2
	jTrabajo3, 							// Trabajo 3
	jQuienPuso[24],                     // Quien puso cargos
	jArrestos,							// Arrestos IC
	jSanciones,							// Arrestos OOC
	jEncarcelado,						// Encarcelado
	jSancionador[24],					// Sancionador ooc
	jTiempoantitp,					// tp
	jTiempoCarcel, 						// Tiempo de arresto
	jCargas, 							// Cargas realizadas
	jMuebles, 							// Muebles creados
	jTroncos, 							// Troncos creados
	jPescados, 							// Pescados
	jCosechas, 							// Cosechas de granjero
	jEscombros, 						// Escombros
	jMateriales, 						// Materiales
	jPinturas, 							// Potes de pintura
	jGanzuas, 							// Ganzuas
	jLineas, 							// Lineas
	jCarnadas, 							// Carnadas
	jCheques, 							// Paga de cheque
	jLicencias[7], 						// Licencias
	jTiempoLicencia1,                   // Tiempo licencia armas
	jHabilidad1[9],						// Habilidades
	jHabilidad2[9],						// Habilidades
	jDocumento,							// Documento legal
	jFakeEdad,							// Edad ilegal
	jFakeDNI,							// Documento ilegal
	jFakeNombre[24],					// Nombre del documento ilegal
	jDelito[10], 						// Delitos
	jRazonDelito1[128], 				// Delito razon 1
	jRazonDelito2[128], 				// Delito razon 2
	jRazonDelito3[128], 				// Delito razon 3
	jRazonDelito4[128], 				// Delito razon 4
	jRazonDelito5[128], 				// Delito razon 5
	jRazonDelito6[128], 				// Delito razon 6
	jRazonDelito7[128], 				// Delito razon 7
	jRazonDelito8[128], 				// Delito razon 8
	jRazonDelito9[128], 				// Delito razon 9
	jRazonDelito10[128], 				// Delito razon 10
	jNumeroContacto[20],				// Contactos de agenda telefonica
	jNombreContacto1[32],				// Contactos de agenda telefonica
	jNombreContacto2[32],				// Contactos de agenda telefonica
	jNombreContacto3[32],				// Contactos de agenda telefonica
	jNombreContacto4[32],				// Contactos de agenda telefonica
	jNombreContacto5[32],				// Contactos de agenda telefonica
	jNombreContacto6[32],				// Contactos de agenda telefonica
	jNombreContacto7[32],				// Contactos de agenda telefonica
	jNombreContacto8[32],				// Contactos de agenda telefonica
	jNombreContacto9[32],				// Contactos de agenda telefonica
	jNombreContacto10[32],				// Contactos de agenda telefonica
	jNombreContacto11[32],				// Contactos de agenda telefonica
	jNombreContacto12[32],				// Contactos de agenda telefonica
	jNombreContacto13[32],				// Contactos de agenda telefonica
	jNombreContacto14[32],				// Contactos de agenda telefonica
	jNombreContacto15[32],				// Contactos de agenda telefonica
	jNombreContacto16[32],				// Contactos de agenda telefonica
	jNombreContacto17[32],				// Contactos de agenda telefonica
	jNombreContacto18[32],				// Contactos de agenda telefonica
	jNombreContacto19[32],				// Contactos de agenda telefonica
	jNombreContacto20[32],				// Contactos de agenda telefonica
	jTiempos[20], 						// Tiempos
	jPayday,							// Tiempo payday
	jT_fabrica,							// Tiempo de fabrica
	jI_fabrica, 						// Intentos de fabrica
	jT_fabrica2,						// tiempo de fabrica cargadores
	jI_fabrica2,						// intento de fabrica cargadores
	jBan_t,                             // Baneo tiempo
	jBan_c[32],                         // Baneo culpable
	jBan_r[128],                        // Baneo razon
	jBan_m[256],                        // Baneo momento fecha
	jPiedras,                           // Piedras
	jTickets,                           // Tickets
	jPuntosRol,                         // Puntos de rol
	jAdiccion[5],                       // Adiccion
	jDiscord,                           //discord
	jDiscordNitro,                      //guardar dc nitro
	jApodoDiscord,                      //apodo del discord
	jYT,                                //creador de contenido (YOUTUBE) (TIKTOK)
	jApodoDiscordNombre[24],            //apodo discord + nombre
	jVerificado,                       //usuario verificado
	pMercado,
	pFabrica,
	pTiempoRobo,                       //tiempo para volver a robar casas o negocios
	jAdminWarn,
	jVerBolsillos,                     //cosas en los bolcillos
	jCanalDudas,
	jReferido,                         //codigo de referido
	jCobroReferido,
	jNombreAmigo[50],                 //nombre amigo
	pGananciaFuneral,
	jVerNecesidades,                   //nesecidades
	aModelo[5],
	aHueso[5],
	jDutyPD,
	Float: aPosicionX[5],
	Float: aPosicionY[5],
	Float: aPosicionZ[5],
	Float: aRotacionX[5],
	Float: aRotacionY[5],
	Float: aRotacionZ[5],
	Float: aEscalaX[5],
	Float: aEscalaY[5],
	Float: aEscalaZ[5],
	aColocado[5],
	jFianza,							// Fianza
	jMaxMuebles,                        // Maximo de muebles
	jMutedAnuncios,                     // Muteo de anuncios
	jTiempoMuteoAD,                     // Tiempo de muteo anuncios
	jPiezas[7],                         // 0(repacion) 1(pinturas) 2(gasolina) 3(nitro) 4(hidraulica) 5(llantas) 6(tuneo)
	jTeclaEspalda,
	jAbatido,                           // Abatido
	Float: jEntradaX,                   // Entrada X
	Float: jEntradaY,                   // Entrada Y
	Float: jEntradaZ,                   // Entrada Z
	Float: jEntradaR,                   // Entrada R
	jEntradaInt,                        // Entrada Int
	jEntradaVW,                         // Entrada VW
	aColor[5],							// color toys
	jSeguroMedico,
	jUsoReferido,
	jCodigoReferido[50],
	jCasado,
	jMatrimonio[120],                 //seguro medico
	// no guardables
    pEditingMode,                       // edicion
	Text3D: jNameTag,
	jPaquetes,							// Paquete encima
	jTiempoCurar,						// Tiempo en curar
	jUsoMascara,						// Mascara usando
	jTiempoServicio, 					// Tiempo en servicio
	Text3D: jLabelAdmin,
	jModoAFK,
	jTogFam,                             //chat familias desactivado
};
new InfoJugador[MAX_PLAYERS][jugadorInfo];

#define	OnDuty		if (EnServicioADM[playerid] == 0 && InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "~r~No estas en servicio administrativo.", 2000);

GetPlayerNameZone(playerid)
{
	new zone[MAX_ZONE_NAME];
	GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
	return zone;
}

// spawn hospital
enum hospitalSpawn
{
	Nombre[32],
	Float: x_spawn,
	Float: y_spawn,
	Float: z_spawn,
	Float: angle_spawn,
};

static const SpawnHospital[][hospitalSpawn] =
{
	{"Jefferson", 2034.197875, -1403.040039, 17.294845, 180.0},
	{"Market", 1172.832763, -1323.269531, 15.400051, 270.0},
	{"Montgomery", 1242.235595, 328.113281, 19.755510, 0.0},
	{"Angel Pine", -2201.566162, -2307.610839, 30.625000, 320.0},
	{"Santa Flora (SF)", -2655.108886, 639.278625, 14.453125, 180.0},
	{"Fort Carson", -318.812774, 1050.359130, 20.340259, 0.0},
	{"El Quebrados", -1514.855590, 2520.366699, 55.909828, 0.0},
	{"Las Vegas Airport (LV)", 1583.311401, 1768.952758, 10.820312, 90.0}
};

GetPlayerHospital(playerid)
{
	new Float:distance = 99999.0, Float:tmp_distance, closest = -1;
	Loop(i, sizeof SpawnHospital, 0)
	{
		tmp_distance = GetPlayerDistanceFromPoint(playerid, SpawnHospital[i][x_spawn], SpawnHospital[i][y_spawn], SpawnHospital[i][z_spawn]);
		if (tmp_distance < distance)
		{
			distance = tmp_distance;
			closest = i;
		}
	}
	return closest;
}

Tiene_Obj_Carga(playerid)
{
	switch (InfoJugador[playerid][jManoDerecha])
	{
		case 143..149: return 1;
	}
	switch (InfoJugador[playerid][jManoIzquierda])
	{
		case 143..149: return 1;
	}
	return 0;
}

Objeto_Carga(objeto)
{
	switch (objeto)
	{
		case 143..149: return 1;
	}
	return 0;
}

//funcion 18/04/2021
SetPlayerObject(playerid, objeto, cantidad)
{
	if (Objeto_Carga(objeto)) { if (Tiene_Obj_Carga(playerid) != 0) {ShowInfoForPlayer(playerid, "Ya posees objetos de carga en una de tus manos.", 2000); return 0; } }
	if (InfoJugador[playerid][jManoDerecha] == 0)
	{
		PonerObjeto(playerid, 1, objeto);
		InfoJugador[playerid][jManoDerecha] = objeto;
		InfoJugador[playerid][jManoDerechaCant] = cantidad;
		if (Objeto_Carga(objeto)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		return 1;
	}
	else if (InfoJugador[playerid][jManoIzquierda] == 0)
	{
		PonerObjeto(playerid, 2, objeto);
		InfoJugador[playerid][jManoIzquierda] = objeto;
		InfoJugador[playerid][jManoIzquierdaCant] = cantidad;
		ActualizarManos(playerid);
		if (Objeto_Carga(objeto)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		return 1;
	}
	ShowInfoForPlayer(playerid, "~r~Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000);
	return 0;
}

IsPlayerJob(playerid, job)
{
	if (InfoJugador[playerid][jTrabajo1] == job) return 1;
	if (InfoJugador[playerid][jTrabajo2] == job) return 1;
	if (InfoJugador[playerid][jTrabajo3] == job) return 1;
	return 0;
}

funcion IsPlayerConnectedEx(const playerid)
{
    if (IsPlayerConnected(playerid) && usuario_registro[playerid] == 2 && state_on[playerid] == 3) return 1;
    return 0;
}

//facciones
GetLogoFaccion(id)
{
	new name[64] = "NONE";
	switch (id)
	{
		case 1: alm(name, "SAPD");
		case 2: alm(name, "SAM");
		case 3: alm(name, "MTV");
		case 4: alm(name, "GOB");
		case 5: alm(name, "SAED");
		case 6: alm(name, "SAEM");
	}
	return name;
}

GetNombreFamilia(id)
{
	new name[64] = "no existe";
	switch (id)
	{
		case 1: alm(name, "San Andreas Police Department");
		case 2: alm(name, "United State Marine Corps");
		case 3: alm(name, "San Andreas County Sheriff Departament");
		case 4: alm(name, "Gobierno De San Andreas");
		case 5: alm(name, "Cable News Network");
	}
	return name;
}

OnFaction(faction)
{
	new count;
	foreach(new playerid: Player) if (IsPlayerConnectedEx(playerid) && IsPlayerFaction(playerid, faction))
	{
		count++;
	}
	return count;
}

IsPlayerFaction(playerid, faccion)
{
	if (!IsPlayerConnectedEx(playerid)) return 0;
	new lider = InfoJugador[playerid][jFamLider], miembro = InfoJugador[playerid][jFamMiembro];
	if (lider == faccion || miembro == faccion) return 1;
	return 0;
}

//actualizar toy
ActualizarPiezas(playerid)
{
	new query[1029], infopiezas[128];
	format(infopiezas, sizeof infopiezas, "%d|%d|%d|%d|%d|%d|%d|",
	InfoJugador[playerid][jPiezas][0], InfoJugador[playerid][jPiezas][1], InfoJugador[playerid][jPiezas][2],
	InfoJugador[playerid][jPiezas][3], InfoJugador[playerid][jPiezas][4], InfoJugador[playerid][jPiezas][5], InfoJugador[playerid][jPiezas][6]);
	mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Piezas = '%e' WHERE ID = '%d'", infopiezas, InfoJugador[playerid][jID]);
	mysql_tquery(DBngrp, query);
}

ActualizarToy(playerid, toy)
{
	new query[1029], infotoy[512];
	format(infotoy, sizeof infotoy, "%d|%d|%f|%f|%f|%f|%f|%f|%f|%f|%f|%d|",
	InfoJugador[playerid][aModelo][toy], InfoJugador[playerid][aHueso][toy],
	InfoJugador[playerid][aPosicionX][toy], InfoJugador[playerid][aPosicionY][toy], InfoJugador[playerid][aPosicionZ][toy],
	InfoJugador[playerid][aRotacionX][toy], InfoJugador[playerid][aRotacionY][toy], InfoJugador[playerid][aRotacionZ][toy],
	InfoJugador[playerid][aEscalaX][toy], InfoJugador[playerid][aEscalaY][toy], InfoJugador[playerid][aEscalaZ][toy],
	InfoJugador[playerid][aColocado][toy]);
  	mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Toy%d = '%e', ColorToy%d = '%d' WHERE ID = '%d'", toy+1, infotoy, toy+1, InfoJugador[playerid][aColor][toy], InfoJugador[playerid][jID]);
    //mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Toy%d = '%e', ColorToy%d = '%d' WHERE ID = '%d'", infotoy, InfoJugador[playerid][aColor][toy], InfoJugador[playerid][jID]);
	mysql_tquery(DBngrp, query);
}

reset_InfoJugador(playerid)
{
	InfoJugador[playerid][jID] = -1;
	alm(InfoJugador[playerid][jNombre_Apellido], NombreOriginal(playerid));
	InfoJugador[playerid][jClave][0] = EOS;
	InfoJugador[playerid][jSalt][0] = EOS;
	alm(InfoJugador[playerid][jEmail], "none");
	alm(InfoJugador[playerid][jIP], "127.0.0.1");
	InfoJugador[playerid][jAdmin] = 0;
	InfoJugador[playerid][jEncargado][0] = 0;
	InfoJugador[playerid][jEncargado][1] = 0;
	InfoJugador[playerid][jEncargado][2] = 0;
	InfoJugador[playerid][jEncargado][3] = 0;
	InfoJugador[playerid][jEncargado][4] = 0;
	InfoJugador[playerid][jEncargado][5] = 0;
	InfoJugador[playerid][jEncargado][6] = 0;
	alm(InfoJugador[playerid][jFechaRegistro], "none");
	alm(InfoJugador[playerid][jUltimaConexion], "none");
	InfoJugador[playerid][jPosicionX] = 0.0;
	InfoJugador[playerid][jPosicionY] = 0.0;
	InfoJugador[playerid][jPosicionZ] = 0.0;
	InfoJugador[playerid][jPosicionR] = 0.0;
	InfoJugador[playerid][jInterior] = 0;
	InfoJugador[playerid][jVirtualWorld] = 0;
	InfoJugador[playerid][jVida] = 100.0;
	InfoJugador[playerid][jChaleco] = 0.0;
	InfoJugador[playerid][jSkin] = 299;
	InfoJugador[playerid][jRopa][0] = 0;
	InfoJugador[playerid][jRopa][1] = 0;
	InfoJugador[playerid][jRopa][2] = 0;
	InfoJugador[playerid][jRopa][3] = 0;
	InfoJugador[playerid][jRopa][4] = 0;
	InfoJugador[playerid][jRopa][5] = 0;
	InfoJugador[playerid][jRopa][6] = 0;
	InfoJugador[playerid][jRopa][7] = 0;
	InfoJugador[playerid][jNivel] = 0;
	InfoJugador[playerid][jExperiencia] = 0;
	InfoJugador[playerid][jHorasConectado] = 0;
	InfoJugador[playerid][jSexo] = 0;
	InfoJugador[playerid][jEdad] = 0;
	InfoJugador[playerid][jCiudad] = 0;
	InfoJugador[playerid][jEstilo] = 1;
	InfoJugador[playerid][jPelea] = 3;
	InfoJugador[playerid][jSed] = 120;
	InfoJugador[playerid][jHambre] = 150;
	InfoJugador[playerid][jAlcohol] = 0;
	InfoJugador[playerid][jFuerza] = 50;
	InfoJugador[playerid][jDinero] = 0;
	InfoJugador[playerid][jBanco] = 0;
	InfoJugador[playerid][jFacLider] = 0;
	InfoJugador[playerid][jFacMiembro] = 0;
	InfoJugador[playerid][jFacRango] = 0;
	InfoJugador[playerid][jFamLider] = 0;
	InfoJugador[playerid][jFamMiembro] = 0;
	InfoJugador[playerid][jFamRango] = 1;
	InfoJugador[playerid][jBolsillo][0] = 0;
	InfoJugador[playerid][jBolsilloCant][0] = 0;
	InfoJugador[playerid][jBolsillo][1] = 0;
	InfoJugador[playerid][jBolsilloCant][1] = 0;
	InfoJugador[playerid][jBolsillo][2] = 0;
	InfoJugador[playerid][jBolsilloCant][2] = 0;
	InfoJugador[playerid][jBolsillo][3] = 0;
	InfoJugador[playerid][jBolsilloCant][3] = 0;
	InfoJugador[playerid][jBolsillo][4] = 0;
	InfoJugador[playerid][jBolsilloCant][4] = 0;
	InfoJugador[playerid][jBolsillo][5] = 0;
	InfoJugador[playerid][jBolsilloCant][5] = 0;
	InfoJugador[playerid][jBolsillo][6] = 0;
	InfoJugador[playerid][jBolsilloCant][6] = 0;
	InfoJugador[playerid][jBolsillo][7] = 0;
	InfoJugador[playerid][jBolsilloCant][7] = 0;
	InfoJugador[playerid][jBolsillo][8] = 0;
	InfoJugador[playerid][jBolsilloCant][8] = 0;
	InfoJugador[playerid][jManoIzquierda] = 0;
	InfoJugador[playerid][jManoIzquierdaCant] = 0;
	InfoJugador[playerid][jManoDerecha] = 0;
	InfoJugador[playerid][jManoDerechaCant] = 0;
	InfoJugador[playerid][jEspalda] = 0;
	InfoJugador[playerid][jEspaldaCant] = 0;
	InfoJugador[playerid][jCinturon][0] = 0;
	InfoJugador[playerid][jCinturonCant][0] = 0;
	InfoJugador[playerid][jCinturon][1] = 0;
	InfoJugador[playerid][jCinturonCant][1] = 0;
	InfoJugador[playerid][jCinturon][2] = 0;
	InfoJugador[playerid][jCinturonCant][2] = 0;
	InfoJugador[playerid][jCinturon][3] = 0;
	InfoJugador[playerid][jCinturonCant][3] = 0;
	InfoJugador[playerid][jCinturon][4] = 0;
	InfoJugador[playerid][jCinturonCant][4] = 0;
	InfoJugador[playerid][jCinturon][5] = 0;
	InfoJugador[playerid][jCinturonCant][5] = 0;
	for (new i = 0; i < 12; i ++) {
	    InfoJugador[playerid][jArmas][i] = 0;
	}
	InfoJugador[playerid][jAlquilerCasa] = -1;
	InfoJugador[playerid][jRestriccion][0] = 0;
	InfoJugador[playerid][jRestriccion][1] = 0;
	InfoJugador[playerid][jRestriccion][2] = 0;
	InfoJugador[playerid][jRestriccion][3] = 0;
	InfoJugador[playerid][jRestriccion][4] = 0;
	InfoJugador[playerid][jRestriccion][5] = 0;
	InfoJugador[playerid][jRestriccion][6] = 0;
	InfoJugador[playerid][jRestriccion][7] = 0;
	InfoJugador[playerid][jRestriccion][8] = 0;
	InfoJugador[playerid][jRestriccion][9] = 0;
    alm(InfoJugador[playerid][jEstadoEstatico], "Ninguno");
    alm(InfoJugador[playerid][jEstadoPersonal], "Ninguno");
    InfoJugador[playerid][pUsaEstado] = 0;
	InfoJugador[playerid][pConEstado] = 0;
	InfoJugador[playerid][jCoins] = 0;
	InfoJugador[playerid][jNivelVIP] = 0;
	InfoJugador[playerid][jColorVIP] = 0;
	InfoJugador[playerid][jDiaVIP] = -1;
	InfoJugador[playerid][jMesVIP] = -1;
	InfoJugador[playerid][jMuerto] = 0;
	InfoJugador[playerid][jMulticuenta] = 0;
	InfoJugador[playerid][jBaneado] = 0;
	alm(InfoJugador[playerid][jSobreAdmin], "Tonto");
	InfoJugador[playerid][jSobreAdminint] = 0;
	InfoJugador[playerid][jTelefono] = 0;
	InfoJugador[playerid][jSaldo] = 0;
	InfoJugador[playerid][jDutyPD] = 0;
	InfoJugador[playerid][jFrecuencia] = -1;
	InfoJugador[playerid][jBoombox] = 0;
	InfoJugador[playerid][jLoteria] = 0;
	InfoJugador[playerid][jMascara] = 0;
	InfoJugador[playerid][jEstrellas] = 0;
	InfoJugador[playerid][jMinEstrellas] = 0;
	InfoJugador[playerid][jTrabajo1] = 0;
	InfoJugador[playerid][jTrabajo2] = 0;
	InfoJugador[playerid][jTrabajo3] = 0;
	alm(InfoJugador[playerid][jQuienPuso], "none");
	InfoJugador[playerid][jArrestos] = 0;
	InfoJugador[playerid][jSanciones] = 0;
	InfoJugador[playerid][jEncarcelado] = 0;
	alm(InfoJugador[playerid][jSancionador], "none");
	InfoJugador[playerid][jTiempoCarcel] = 0;
	InfoJugador[playerid][jCargas] = 0;
	InfoJugador[playerid][jMuebles] = 0;
	InfoJugador[playerid][jTroncos] = 0;
	InfoJugador[playerid][jPescados] = 0;
	InfoJugador[playerid][jCosechas] = 0;
	InfoJugador[playerid][jEscombros] = 0;
	InfoJugador[playerid][jMateriales] = 0;
	InfoJugador[playerid][jPinturas] = 0;
	InfoJugador[playerid][jGanzuas] = 0;
	InfoJugador[playerid][jLineas] = 0;
	InfoJugador[playerid][jCarnadas] = 0;
	InfoJugador[playerid][jCheques] = 0;
	InfoJugador[playerid][jLicencias][0] = 0;
	InfoJugador[playerid][jTiempoLicencia1] = 0;
	InfoJugador[playerid][jLicencias][1] = 0;
	InfoJugador[playerid][jLicencias][2] = 0;
	InfoJugador[playerid][jLicencias][3] = 0;
	InfoJugador[playerid][jLicencias][4] = 0;
	InfoJugador[playerid][jLicencias][5] = 0;
	InfoJugador[playerid][jLicencias][6] = 0;
	InfoJugador[playerid][jHabilidad1][0] = 0;
	InfoJugador[playerid][jHabilidad2][0] = 1;
	InfoJugador[playerid][jHabilidad1][1] = 0;
	InfoJugador[playerid][jHabilidad2][1] = 1;
	InfoJugador[playerid][jHabilidad1][2] = 0;
	InfoJugador[playerid][jHabilidad2][2] = 1;
	InfoJugador[playerid][jHabilidad1][3] = 0;
	InfoJugador[playerid][jHabilidad2][3] = 1;
	InfoJugador[playerid][jHabilidad1][4] = 0;
	InfoJugador[playerid][jHabilidad2][4] = 1;
	InfoJugador[playerid][jHabilidad1][5] = 0;
	InfoJugador[playerid][jHabilidad2][5] = 1;
	InfoJugador[playerid][jHabilidad1][6] = 0;
	InfoJugador[playerid][jHabilidad2][6] = 1;
	InfoJugador[playerid][jHabilidad1][7] = 0;
	InfoJugador[playerid][jHabilidad2][7] = 1;
	InfoJugador[playerid][jHabilidad1][8] = 0;
	InfoJugador[playerid][jHabilidad2][8] = 1;
	InfoJugador[playerid][jDocumento] = 0;
	InfoJugador[playerid][jFakeEdad] = 21;
	InfoJugador[playerid][jFakeDNI] = 0;
	alm(InfoJugador[playerid][jFakeNombre], "Ninguno");
	InfoJugador[playerid][jDelito][0] = 0;
	alm(InfoJugador[playerid][jRazonDelito1], "Ninguno");
	InfoJugador[playerid][jDelito][1] = 0;
	alm(InfoJugador[playerid][jRazonDelito2], "Ninguno");
	InfoJugador[playerid][jDelito][2] = 0;
	alm(InfoJugador[playerid][jRazonDelito3], "Ninguno");
	InfoJugador[playerid][jDelito][3] = 0;
	alm(InfoJugador[playerid][jRazonDelito4], "Ninguno");
	InfoJugador[playerid][jDelito][4] = 0;
	alm(InfoJugador[playerid][jRazonDelito5], "Ninguno");
	InfoJugador[playerid][jDelito][5] = 0;
	alm(InfoJugador[playerid][jRazonDelito6], "Ninguno");
	InfoJugador[playerid][jDelito][6] = 0;
	alm(InfoJugador[playerid][jRazonDelito7], "Ninguno");
	InfoJugador[playerid][jDelito][7] = 0;
	alm(InfoJugador[playerid][jRazonDelito8], "Ninguno");
	InfoJugador[playerid][jDelito][8] = 0;
	alm(InfoJugador[playerid][jRazonDelito9], "Ninguno");
	InfoJugador[playerid][jDelito][9] = 0;
	alm(InfoJugador[playerid][jRazonDelito10], "Ninguno");
	InfoJugador[playerid][jNumeroContacto][0] = 0;
	InfoJugador[playerid][jNumeroContacto][1] = 0;
	InfoJugador[playerid][jNumeroContacto][2] = 0;
	InfoJugador[playerid][jNumeroContacto][3] = 0;
	InfoJugador[playerid][jNumeroContacto][4] = 0;
	InfoJugador[playerid][jNumeroContacto][5] = 0;
	InfoJugador[playerid][jNumeroContacto][6] = 0;
	InfoJugador[playerid][jNumeroContacto][7] = 0;
	InfoJugador[playerid][jNumeroContacto][8] = 0;
	InfoJugador[playerid][jNumeroContacto][9] = 0;
	InfoJugador[playerid][jNumeroContacto][10] = 0;
	InfoJugador[playerid][jNumeroContacto][11] = 0;
	InfoJugador[playerid][jNumeroContacto][12] = 0;
	InfoJugador[playerid][jNumeroContacto][13] = 0;
	InfoJugador[playerid][jNumeroContacto][14] = 0;
	InfoJugador[playerid][jNumeroContacto][15] = 0;
	InfoJugador[playerid][jNumeroContacto][16] = 0;
	InfoJugador[playerid][jNumeroContacto][17] = 0;
	InfoJugador[playerid][jNumeroContacto][18] = 0;
	InfoJugador[playerid][jNumeroContacto][19] = 0;
	alm(InfoJugador[playerid][jNombreContacto1], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto2], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto3], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto4], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto5], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto6], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto7], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto8], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto9], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto10], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto11], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto12], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto13], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto14], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto15], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto16], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto17], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto18], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto19], "Vacio");
	alm(InfoJugador[playerid][jNombreContacto20], "Vacio");
	InfoJugador[playerid][jTiempos][0] = 0;
	InfoJugador[playerid][jTiempos][1] = 0;
	InfoJugador[playerid][jTiempos][2] = 0;
	InfoJugador[playerid][jTiempos][3] = 0;
	InfoJugador[playerid][jTiempos][4] = 0;
	InfoJugador[playerid][jTiempos][5] = 0;
	InfoJugador[playerid][jTiempos][6] = 0;
	InfoJugador[playerid][jTiempos][7] = 0;
	InfoJugador[playerid][jTiempos][8] = 0;
	InfoJugador[playerid][jTiempos][9] = 0;
	InfoJugador[playerid][jTiempos][10] = 0;
	InfoJugador[playerid][jTiempos][11] = 0;
	InfoJugador[playerid][jTiempos][12] = 0; // libre
	InfoJugador[playerid][jTiempos][13] = 0;
	InfoJugador[playerid][jTiempos][14] = 0;
	InfoJugador[playerid][jTiempos][15] = 0;
	InfoJugador[playerid][jTiempos][16] = 0;
	InfoJugador[playerid][jTiempos][17] = 0;
	InfoJugador[playerid][jTiempos][18] = 0;
	InfoJugador[playerid][jTiempos][19] = 0;
    InfoJugador[playerid][jPayday] = 0;
    InfoJugador[playerid][jT_fabrica] = 3;
    InfoJugador[playerid][jI_fabrica] = -1;
    InfoJugador[playerid][jT_fabrica2] = 3;
    InfoJugador[playerid][jI_fabrica2] = -1;
    InfoJugador[playerid][jBan_t] = -1;
	alm(InfoJugador[playerid][jBan_c], "none");
	alm(InfoJugador[playerid][jBan_r], "none");
	alm(InfoJugador[playerid][jBan_m], "none");
    InfoJugador[playerid][jPiedras] = 0;
    InfoJugador[playerid][jTickets] = 0;
    InfoJugador[playerid][jPuntosRol] = 0;
    InfoJugador[playerid][jAdiccion][0] = 0;
    InfoJugador[playerid][jAdiccion][1] = 0;
    InfoJugador[playerid][jAdiccion][2] = 0;
    InfoJugador[playerid][jAdiccion][3] = 0;
    InfoJugador[playerid][jAdiccion][4] = 0;
    InfoJugador[playerid][jDiscord] = 0;
    InfoJugador[playerid][jDiscordNitro] = 0;
    InfoJugador[playerid][jApodoDiscord] = 0;
	alm(InfoJugador[playerid][jApodoDiscordNombre], "none");
    InfoJugador[playerid][jVerificado] = 0;
	InfoJugador[playerid][jYT] = 0;
    InfoJugador[playerid][pMercado] = -1;
    InfoJugador[playerid][pFabrica] = -1;
    InfoJugador[playerid][pTiempoRobo] = 0;
    InfoJugador[playerid][jAdminWarn] = 0;
    InfoJugador[playerid][jVerBolsillos] = 1;
    InfoJugador[playerid][jCanalDudas] = 0;
    InfoJugador[playerid][jReferido] = 0;
    InfoJugador[playerid][jCobroReferido] = 0;
    alm(InfoJugador[playerid][jNombreAmigo], "Spectrum");///no cambiar el referido o se buguea
    InfoJugador[playerid][pGananciaFuneral] = 0;
    InfoJugador[playerid][jVerNecesidades] = 0;
	// accesorios
	Loop(toy, 5, 0)
	{
		InfoJugador[playerid][aModelo][toy] = 0;
		InfoJugador[playerid][aHueso][toy] = 0;
		InfoJugador[playerid][aPosicionX][toy] = 0.0;
		InfoJugador[playerid][aPosicionY][toy] = 0.0;
		InfoJugador[playerid][aPosicionZ][toy] = 0.0;
		InfoJugador[playerid][aRotacionX][toy] = 0.0;
		InfoJugador[playerid][aRotacionY][toy] = 0.0;
		InfoJugador[playerid][aRotacionZ][toy] = 0.0;
		InfoJugador[playerid][aEscalaX][toy] = 1;
		InfoJugador[playerid][aEscalaY][toy] = 1;
		InfoJugador[playerid][aEscalaZ][toy] = 1;
		InfoJugador[playerid][aColocado][toy] = 0;
		InfoJugador[playerid][aColor][toy] = -1;
    }
	InfoJugador[playerid][jFianza] = 0;
	InfoJugador[playerid][jMaxMuebles] = 100;
	InfoJugador[playerid][jMutedAnuncios] = 0;
	InfoJugador[playerid][jTiempoMuteoAD] = 0;
	Loop(e, 7, 0)
	{
		InfoJugador[playerid][jPiezas][e] = 0;
	}
	InfoJugador[playerid][jTeclaEspalda] = 0;
	InfoJugador[playerid][jAbatido] = 0;
	InfoJugador[playerid][jEntradaX] = 0.0;
	InfoJugador[playerid][jEntradaY] = 0.0;
	InfoJugador[playerid][jEntradaZ] = 0.0;
	InfoJugador[playerid][jEntradaR] = 0.0;
	InfoJugador[playerid][jEntradaInt] = 0;
	InfoJugador[playerid][jEntradaVW] = 0;
	InfoJugador[playerid][jSeguroMedico] = 0;
	// no guardables
	InfoJugador[playerid][pEditingMode] = 0;
    InfoJugador[playerid][jPaquetes] = 0;
    InfoJugador[playerid][jTiempoCurar] = -1;
    InfoJugador[playerid][jUsoMascara] = 0;
    InfoJugador[playerid][jTiempoServicio] = 0;
	InfoJugador[playerid][jModoAFK] = 0;
	InfoJugador[playerid][jTogFam] = 0;
	InfoJugador[playerid][jDutyPD] = 0;
}

enum spawn_point2
{
	id_spawn,
	Float: x_spawn,
	Float: y_spawn,
	Float: z_spawn,
	Float: angle_spawn,
	name_spawn[40],
};

enum VehiculoInfoos
{
	idVehiculoReal,
	idTrabajo,
	idTrabajoActivo
}
new VehiculoTrabajo[MAX_VEH_TRABAJOOS][VehiculoInfoos];

new Float:derevo[][3] =
{
 	{-1119.1556,-1169.7953,129.1828},
	{-1119.6431,-1158.0032,129.1828},
	{-1105.8513,-1157.0455,129.1828},
	{-1092.6984,-1156.8755,129.1828},
	{-1092.0658,-1169.9662,129.1828},
	{-1091.8895,-1185.6693,129.1828},
	{-1105.5143,-1185.7869,129.1828},
	{-1105.7897,-1169.5287,129.1828},
	{-1119.4556,-1182.9391,129.1828},
	{-1138.8861,-1182.6405,129.1828},
	{-1152.6144,-1183.1146,129.1828},
	{-1168.6514,-1182.0260,129.1828},
	{-1182.6322,-1181.8938,129.1828},
	{-1183.9866,-1195.5112,129.1828},
	{-1167.8181,-1195.2515,129.1828},
	{-1152.1805,-1194.5146,129.1828},
	{-1138.6150,-1194.1521,129.1828},
	{-1138.7396,-1205.4915,129.1828},
	{-1152.7815,-1206.3702,129.1828},
	{-1168.2172,-1206.7091,129.1828},
	{-1184.5645,-1207.2864,129.1828},
	{-1184.7866,-1219.1851,129.1828},
	{-1168.2162,-1218.8431,129.1828},
	{-1152.4784,-1218.4226,129.1828},
	{-1138.7992,-1218.0612,129.1828}
};

//<=================================> vehiculos de facciones
enum vfcInfo
{
	vMaletero[12],
	vMaleteroCantidad[12],
};
new InfoFacVeh[210][vfcInfo];

stock ActualizarVehFac(vehid)
{
	new vehd[64];
	format(vehd, 64, DATOS_VEHICULOS_F, vehid);
	new INI: File = INI_Open(vehd);
	INI_SetTag(File, "Informacion");
	INI_WriteInt(File, "Maletero_1", InfoFacVeh[vehid][vMaletero][0]);
	INI_WriteInt(File, "Maletero_2", InfoFacVeh[vehid][vMaletero][1]);
	INI_WriteInt(File, "Maletero_3", InfoFacVeh[vehid][vMaletero][2]);
	INI_WriteInt(File, "Maletero_4", InfoFacVeh[vehid][vMaletero][3]);
	INI_WriteInt(File, "Maletero_5", InfoFacVeh[vehid][vMaletero][4]);
	INI_WriteInt(File, "Maletero_6", InfoFacVeh[vehid][vMaletero][5]);
	INI_WriteInt(File, "Maletero_7", InfoFacVeh[vehid][vMaletero][6]);
	INI_WriteInt(File, "Maletero_8", InfoFacVeh[vehid][vMaletero][7]);
	INI_WriteInt(File, "Maletero_9", InfoFacVeh[vehid][vMaletero][8]);
	INI_WriteInt(File, "Maletero_10", InfoFacVeh[vehid][vMaletero][9]);
	INI_WriteInt(File, "Maletero_11", InfoFacVeh[vehid][vMaletero][10]);
	INI_WriteInt(File, "Maletero_12", InfoFacVeh[vehid][vMaletero][11]);
	INI_WriteInt(File, "Maletero_Cantidad_1", InfoFacVeh[vehid][vMaleteroCantidad][0]);
	INI_WriteInt(File, "Maletero_Cantidad_2", InfoFacVeh[vehid][vMaleteroCantidad][1]);
	INI_WriteInt(File, "Maletero_Cantidad_3", InfoFacVeh[vehid][vMaleteroCantidad][2]);
	INI_WriteInt(File, "Maletero_Cantidad_4", InfoFacVeh[vehid][vMaleteroCantidad][3]);
	INI_WriteInt(File, "Maletero_Cantidad_5", InfoFacVeh[vehid][vMaleteroCantidad][4]);
	INI_WriteInt(File, "Maletero_Cantidad_6", InfoFacVeh[vehid][vMaleteroCantidad][5]);
	INI_WriteInt(File, "Maletero_Cantidad_7", InfoFacVeh[vehid][vMaleteroCantidad][6]);
	INI_WriteInt(File, "Maletero_Cantidad_8", InfoFacVeh[vehid][vMaleteroCantidad][7]);
	INI_WriteInt(File, "Maletero_Cantidad_9", InfoFacVeh[vehid][vMaleteroCantidad][8]);
	INI_WriteInt(File, "Maletero_Cantidad_10", InfoFacVeh[vehid][vMaleteroCantidad][9]);
	INI_WriteInt(File, "Maletero_Cantidad_11", InfoFacVeh[vehid][vMaleteroCantidad][10]);
	INI_WriteInt(File, "Maletero_Cantidad_12", InfoFacVeh[vehid][vMaleteroCantidad][11]);
	INI_Close(File);
	return 1;
}
funcion DialogExPlayer(playerid, dialogid, dialogstyle, titulo[], texto[], aceptar[], rechazar[]) // anti dialoghide.
{
    CurrentDialog[playerid] = dialogid;
    ShowPlayerDialog(playerid, dialogid, dialogstyle, titulo, texto, aceptar, rechazar);
    return 1;
}
funcion CargarFacVeh()
{
	new vehd[64];
	for (new vehid = 0; vehid < sizeof(InfoFacVeh); vehid++)
	{
		format(vehd, 64, DATOS_VEHICULOS_F, vehid);
		INI_ParseFile(vehd, "CargarFacVeh_data", .bExtra = true, .extra = vehid);
	}
	printf(" Sistema de maleteros de facciones cargado (150).");
	return 1;
}

funcion CargarFacVeh_data(vehid, name[], value[])
{
	INI_Int("Maletero_1", InfoFacVeh[vehid][vMaletero][0]);
	INI_Int("Maletero_2", InfoFacVeh[vehid][vMaletero][1]);
	INI_Int("Maletero_3", InfoFacVeh[vehid][vMaletero][2]);
	INI_Int("Maletero_4", InfoFacVeh[vehid][vMaletero][3]);
	INI_Int("Maletero_5", InfoFacVeh[vehid][vMaletero][4]);
	INI_Int("Maletero_6", InfoFacVeh[vehid][vMaletero][5]);
	INI_Int("Maletero_7", InfoFacVeh[vehid][vMaletero][6]);
	INI_Int("Maletero_8", InfoFacVeh[vehid][vMaletero][7]);
	INI_Int("Maletero_9", InfoFacVeh[vehid][vMaletero][8]);
	INI_Int("Maletero_10", InfoFacVeh[vehid][vMaletero][9]);
	INI_Int("Maletero_11", InfoFacVeh[vehid][vMaletero][10]);
	INI_Int("Maletero_12", InfoFacVeh[vehid][vMaletero][11]);
	INI_Int("Maletero_Cantidad_1", InfoFacVeh[vehid][vMaleteroCantidad][0]);
	INI_Int("Maletero_Cantidad_2", InfoFacVeh[vehid][vMaleteroCantidad][1]);
	INI_Int("Maletero_Cantidad_3", InfoFacVeh[vehid][vMaleteroCantidad][2]);
	INI_Int("Maletero_Cantidad_4", InfoFacVeh[vehid][vMaleteroCantidad][3]);
	INI_Int("Maletero_Cantidad_5", InfoFacVeh[vehid][vMaleteroCantidad][4]);
	INI_Int("Maletero_Cantidad_6", InfoFacVeh[vehid][vMaleteroCantidad][5]);
	INI_Int("Maletero_Cantidad_7", InfoFacVeh[vehid][vMaleteroCantidad][6]);
	INI_Int("Maletero_Cantidad_8", InfoFacVeh[vehid][vMaleteroCantidad][7]);
	INI_Int("Maletero_Cantidad_9", InfoFacVeh[vehid][vMaleteroCantidad][8]);
	INI_Int("Maletero_Cantidad_10", InfoFacVeh[vehid][vMaleteroCantidad][9]);
	INI_Int("Maletero_Cantidad_11", InfoFacVeh[vehid][vMaleteroCantidad][10]);
	INI_Int("Maletero_Cantidad_12", InfoFacVeh[vehid][vMaleteroCantidad][11]);
	return 1;
}

//___________ vehiculos temporales ____________//
new vehicle_temporal_owner[MAX_VEHICLES] = { INVALID_PLAYER_ID, ... };
new id_coche_temporal_fac[MAX_PLAYERS];
new esfaccion_temvehicle[MAX_VEHICLES] = 0;

//Sistema de vehiculos de renta
new vehicle_rent_owner[MAX_VEHICLES] = { INVALID_PLAYER_ID, ... };

stock ClearVehicleData(vehicleid)
{
    vehicle_rent_owner[vehicleid] = INVALID_PLAYER_ID;
    vehicle_temporal_owner[vehicleid] = INVALID_PLAYER_ID;
    esfaccion_temvehicle[vehicleid] = INVALID_PLAYER_ID;
}

enum _vInfo
{
	vModel,
	vColors1,
	vColors2,
	Float:vFuel,
	vSost,
	Float:vProbeg,
	vInt,
	vWorld,
	vFr,
	vStatus,
	vRentCena,
	vBuyCena,
	vSpawnDelay,
	vEngineTune[5],
	vBrakeTune[5],
	v_type,
	v_vehicle
};
new veh_info[MAX_VEHICLES][_vInfo];

new VehicleName[212][] =
{
	"Landstalker","Bravura","Buffalo","Linerunner","Perennial","Sentinel","Dumper","Firetruck","Trashmaster","Stretch",
	"Manana","Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi",
	"Washington","Bobcat","Mr Whoopee","BF Injection","Hunter","Premier","Enforcer","Securicar","Banshee","Predator",
	"Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie","Stallion","Rumpo","RC Bandit", "Romero",
	"Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder","Reefer","Tropic","Flatbed",
	"Yankee","Caddy","Solair","Berkley's RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
	"Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler",
	"ZR-350","Walton","Regina","Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper",
	"Rancher","FBI Rancher","Virgo","Greenwood","Jetmax","Hotring Racer","Sandking","Blista Compact","Police Maverick",
	"Boxville","Benson","Mesa","RC Goblin","Hotring Racer A","Hotring Racer B","Bloodring Banger","Rancher","Super GT",
	"Elegant","Journey","Bike","Mountain Bike","Beagle","Cropduster","Stuntplane","Tanker","Road Train","Nebula","Majestic",
	"Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV-1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck",
	"Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent",
	"Bullet","Clover","Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility",
	"Nevada","Yosemite","Windsor","Monster A","Monster B","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger",
	"Flash","Tahoma","Savanna","Bandito","Freight","Trailer","Kart","Mower","Duneride","Sweeper","Broadway",
	"Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer","Emperor","Wayfarer",
	"Euros","Hotdog","Club","Trailer","Trailer","Andromada","Dodo","RCCam","Launch","Police Car (LSPD)","Police Car (SFPD)",
	"Police Car (LVPD)","Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Luggage Trailer A",
	"Luggage Trailer B","Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};

// variables de 'vehiculos.sql' desde 24-10-2020
enum vehiculoInfo
{
	vID,								// ID en base de datos
	vNombre[128],                   	// Nombre
	vPropietario[MAX_PLAYER_NAME],  	// Propietario
	vModelo,                        	// Modelo
	Float: vPosicionX,              	// Posicion X
	Float: vPosicionY,              	// Posicion Y
	Float: vPosicionZ,              	// Posicion Z
	Float: vPosicionR,              	// Posicion R
	Float: vVida,                   	// Vida
	vDanioSuperficie,               	// Da?o superficie
	vDanioPuertas,                  	// Da?o puertas
	vDanioLuces,                    	// Da?o luces
	vDanioRuedas,                   	// Da?o ruedas
	vInterior,                      	// Interior
	vVirtualWorld,                  	// VirtualWorld
	vPrecio,                        	// Precio
	vMoneda,                        	// Moneda
	vSeguro,                        	// Seguro
	vColor1,                        	// Color 1
	vColor2,                        	// Color 2
	vPaintJob,                      	// PaintJob
	vStereo,                        	// Stereo music
	vGasolina,                      	// Gasolina
	vEmbargo,                       	// Embargo
	vMulta,                         	// Multa
	vGuantera[3],                   	// Guantera
	vGuanteraCantidad[3],           	// Guantera cantidad
	vMaletero[15],                  	// Maletero
	vMaleteroTipo[15],					// Maletero tipo de unidad
	vMaleteroCantidad[15],          	// Maletero cantidad
	vMaxMaletero,                   	// Maletero slots
	vModificacion[MAX_MODIFICACIONES],	// Modificaciones
	vFamilia,        // Familia
	//neon system
	vModeloNeon,
	vOnNeon,
	vObjetoNeonL,
	vObjetoNeonR,
	// no guardables
	vDL,                            	// ID del /dl
	vSpawned,                       	// Spawneado
	vLockGuantera,                  	// Seguro de la guantera
	vUberService,                   	// Servicio de uber
};
new InfoVehiculo[MAX_VEHICULOS][vehiculoInfo];

verificar_id_vehiculo(vehicleid)
{
	new id = -1;
	Loop(x, totalvehiculos, 1) if (InfoVehiculo[x][vDL] == vehicleid)
	{
		id = x;
		break;
	}
	return id;
}

stock EsteVehEs(playerid, vehicleid)
{
	if (!IsPlayerConnected(playerid)) return -1;
	if (!GetVehicleModel(vehicleid)) return -1;
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vID] == vehicleid)
	{
		return v;
	}
	return -1;
}

forward CargarVehiculos();
public CargarVehiculos()
{
	//MAX_VEHICULOS
	Loop(xd, MAX_VEHICULOS, 0)
	{
		alm(InfoVehiculo[xd][vPropietario], "none");
		InfoVehiculo[xd][vSpawned] = 0;
	}
	//MAX_VEHICLES
	Loop(xd, MAX_VEHICLES, 0)
	{
		GasolinaInicialVeh[xd] = 100;
		SetVehicleMatricula(xd);
		VehSeguro[xd] = 0;
		vehicle_unlock_doors(xd);
	}
	//load
	new cargaditos = 0, family = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoVehiculo[id][vID]);
		reg_string(tabla, "Nombre", InfoVehiculo[id][vNombre], 128);
		reg_string(tabla, "Propietario", InfoVehiculo[id][vPropietario], MAX_PLAYER_NAME);
		reg_int(tabla, "Modelo", InfoVehiculo[id][vModelo]);
		reg_float(tabla, "PosicionX", InfoVehiculo[id][vPosicionX]);
		reg_float(tabla, "PosicionY", InfoVehiculo[id][vPosicionY]);
		reg_float(tabla, "PosicionZ", InfoVehiculo[id][vPosicionZ]);
		reg_float(tabla, "PosicionR", InfoVehiculo[id][vPosicionR]);
		reg_float(tabla, "Vida", InfoVehiculo[id][vVida]);
		reg_int(tabla, "DanioSuperficie", InfoVehiculo[id][vDanioSuperficie]);
		reg_int(tabla, "DanioPuertas", InfoVehiculo[id][vDanioPuertas]);
		reg_int(tabla, "DanioLuces", InfoVehiculo[id][vDanioLuces]);
		reg_int(tabla, "DanioRuedas", InfoVehiculo[id][vDanioRuedas]);
		reg_int(tabla, "Interior", InfoVehiculo[id][vInterior]);
		reg_int(tabla, "VirtualWorld", InfoVehiculo[id][vVirtualWorld]);
		reg_int(tabla, "Precio", InfoVehiculo[id][vPrecio]);
		reg_int(tabla, "Moneda", InfoVehiculo[id][vMoneda]);
		reg_int(tabla, "Seguro", InfoVehiculo[id][vSeguro]);
		reg_int(tabla, "Color1", InfoVehiculo[id][vColor1]);
		reg_int(tabla, "Color2", InfoVehiculo[id][vColor2]);
		reg_int(tabla, "PaintJob", InfoVehiculo[id][vPaintJob]);
		reg_int(tabla, "Stereo", InfoVehiculo[id][vStereo]);
		reg_int(tabla, "Gasolina", InfoVehiculo[id][vGasolina]);
		reg_int(tabla, "Embargo", InfoVehiculo[id][vEmbargo]);
		reg_int(tabla, "Multa", InfoVehiculo[id][vMulta]);
		reg_int(tabla, "Guantera1", InfoVehiculo[id][vGuantera][0]);
		reg_int(tabla, "GuanteraCantidad1", InfoVehiculo[id][vGuanteraCantidad][0]);
		reg_int(tabla, "Guantera2", InfoVehiculo[id][vGuantera][1]);
		reg_int(tabla, "GuanteraCantidad2", InfoVehiculo[id][vGuanteraCantidad][1]);
		reg_int(tabla, "Guantera3", InfoVehiculo[id][vGuantera][2]);
		reg_int(tabla, "GuanteraCantidad3", InfoVehiculo[id][vGuanteraCantidad][2]);
		reg_int(tabla, "Maletero1", InfoVehiculo[id][vMaletero][0]);
		reg_int(tabla, "MaleteroTipo1", InfoVehiculo[id][vMaleteroTipo][0]);
		reg_int(tabla, "MaleteroCantidad1", InfoVehiculo[id][vMaleteroCantidad][0]);
		reg_int(tabla, "Maletero2", InfoVehiculo[id][vMaletero][1]);
		reg_int(tabla, "MaleteroTipo2", InfoVehiculo[id][vMaleteroTipo][1]);
		reg_int(tabla, "MaleteroCantidad2", InfoVehiculo[id][vMaleteroCantidad][1]);
		reg_int(tabla, "Maletero3", InfoVehiculo[id][vMaletero][2]);
		reg_int(tabla, "MaleteroTipo3", InfoVehiculo[id][vMaleteroTipo][2]);
		reg_int(tabla, "MaleteroCantidad3", InfoVehiculo[id][vMaleteroCantidad][2]);
		reg_int(tabla, "Maletero4", InfoVehiculo[id][vMaletero][3]);
		reg_int(tabla, "MaleteroTipo4", InfoVehiculo[id][vMaleteroTipo][3]);
		reg_int(tabla, "MaleteroCantidad4", InfoVehiculo[id][vMaleteroCantidad][3]);
		reg_int(tabla, "Maletero5", InfoVehiculo[id][vMaletero][4]);
		reg_int(tabla, "MaleteroTipo5", InfoVehiculo[id][vMaleteroTipo][4]);
		reg_int(tabla, "MaleteroCantidad5", InfoVehiculo[id][vMaleteroCantidad][4]);
		reg_int(tabla, "Maletero6", InfoVehiculo[id][vMaletero][5]);
		reg_int(tabla, "MaleteroTipo6", InfoVehiculo[id][vMaleteroTipo][5]);
		reg_int(tabla, "MaleteroCantidad6", InfoVehiculo[id][vMaleteroCantidad][5]);
		reg_int(tabla, "Maletero7", InfoVehiculo[id][vMaletero][6]);
		reg_int(tabla, "MaleteroTipo7", InfoVehiculo[id][vMaleteroTipo][6]);
		reg_int(tabla, "MaleteroCantidad7", InfoVehiculo[id][vMaleteroCantidad][6]);
		reg_int(tabla, "Maletero8", InfoVehiculo[id][vMaletero][7]);
		reg_int(tabla, "MaleteroTipo8", InfoVehiculo[id][vMaleteroTipo][7]);
		reg_int(tabla, "MaleteroCantidad8", InfoVehiculo[id][vMaleteroCantidad][7]);
		reg_int(tabla, "Maletero9", InfoVehiculo[id][vMaletero][8]);
		reg_int(tabla, "MaleteroTipo9", InfoVehiculo[id][vMaleteroTipo][8]);
		reg_int(tabla, "MaleteroCantidad9", InfoVehiculo[id][vMaleteroCantidad][8]);
		reg_int(tabla, "Maletero10", InfoVehiculo[id][vMaletero][9]);
		reg_int(tabla, "MaleteroTipo10", InfoVehiculo[id][vMaleteroTipo][9]);
		reg_int(tabla, "MaleteroCantidad10", InfoVehiculo[id][vMaleteroCantidad][9]);
		reg_int(tabla, "Maletero11", InfoVehiculo[id][vMaletero][10]);
		reg_int(tabla, "MaleteroTipo11", InfoVehiculo[id][vMaleteroTipo][10]);
		reg_int(tabla, "MaleteroCantidad11", InfoVehiculo[id][vMaleteroCantidad][10]);
		reg_int(tabla, "Maletero12", InfoVehiculo[id][vMaletero][11]);
		reg_int(tabla, "MaleteroTipo12", InfoVehiculo[id][vMaleteroTipo][11]);
		reg_int(tabla, "MaleteroCantidad12", InfoVehiculo[id][vMaleteroCantidad][11]);
		reg_int(tabla, "Maletero13", InfoVehiculo[id][vMaletero][12]);
		reg_int(tabla, "MaleteroTipo13", InfoVehiculo[id][vMaleteroTipo][12]);
		reg_int(tabla, "MaleteroCantidad13", InfoVehiculo[id][vMaleteroCantidad][12]);
		reg_int(tabla, "Maletero14", InfoVehiculo[id][vMaletero][13]);
		reg_int(tabla, "MaleteroTipo14", InfoVehiculo[id][vMaleteroTipo][13]);
		reg_int(tabla, "MaleteroCantidad14", InfoVehiculo[id][vMaleteroCantidad][13]);
		reg_int(tabla, "Maletero15", InfoVehiculo[id][vMaletero][14]);
		reg_int(tabla, "MaleteroTipo15", InfoVehiculo[id][vMaleteroTipo][14]);
		reg_int(tabla, "MaleteroCantidad15", InfoVehiculo[id][vMaleteroCantidad][14]);
		reg_int(tabla, "MaxMaletero", InfoVehiculo[id][vMaxMaletero]);
		reg_int(tabla, "Modificacion1", InfoVehiculo[id][vModificacion][0]);
		reg_int(tabla, "Modificacion2", InfoVehiculo[id][vModificacion][1]);
		reg_int(tabla, "Modificacion3", InfoVehiculo[id][vModificacion][2]);
		reg_int(tabla, "Modificacion4", InfoVehiculo[id][vModificacion][3]);
		reg_int(tabla, "Modificacion5", InfoVehiculo[id][vModificacion][4]);
		reg_int(tabla, "Modificacion6", InfoVehiculo[id][vModificacion][5]);
		reg_int(tabla, "Modificacion7", InfoVehiculo[id][vModificacion][6]);
		reg_int(tabla, "Modificacion8", InfoVehiculo[id][vModificacion][7]);
		reg_int(tabla, "Modificacion9", InfoVehiculo[id][vModificacion][8]);
		reg_int(tabla, "Modificacion10", InfoVehiculo[id][vModificacion][9]);
		reg_int(tabla, "Modificacion11", InfoVehiculo[id][vModificacion][10]);
		reg_int(tabla, "Modificacion12", InfoVehiculo[id][vModificacion][11]);
		reg_int(tabla, "Modificacion13", InfoVehiculo[id][vModificacion][12]);
		reg_int(tabla, "Modificacion14", InfoVehiculo[id][vModificacion][13]);
		reg_int(tabla, "Modificacion15", InfoVehiculo[id][vModificacion][14]);
		reg_int(tabla, "Familia", InfoVehiculo[id][vFamilia]);
		reg_int(tabla, "ModeloNeon", InfoVehiculo[id][vModeloNeon]);
		reg_int(tabla, "OnNeon", InfoVehiculo[id][vOnNeon]);
		if (InfoVehiculo[id][vID]) totalvehiculos++;
		if (InfoVehiculo[id][vModelo] != 0)
		{
			cargaditos++;
		}
		if (InfoVehiculo[id][vFamilia] != 0)
		{
			VehiculoSacar(id);
			family++;
		}
	}
	printf("%d vehiculos dinamicos [SQL: %d] [Familia: %d] cargados correctamente.", cargaditos, totalvehiculos-1, family);
	return 1;
}

tiene_componente(componente, vehicleid)
{
	new id = verificar_id_vehiculo(vehicleid);
	if (id == -1) return 0;
	Loop(x, MAX_MODIFICACIONES, 0)
	{
		if (InfoVehiculo[id][vModificacion][x] == componente)
			return 1;
	}
	return 0;
}

enum tunningInfo
{
	tComponente,
	tNombre[32],
	tPrecio,
};

static InfoTunning[][tunningInfo] =
{
	{1000, "Pro Spoiler", 3500},
	{1001, "Win Spoiler", 3500},
	{1002, "Drag Spoiler", 3500},
	{1003, "Alpha Spoiler", 3500},
	{1004, "Champ Scoop", 1250},
	{1005, "Fury Scoop", 1250},
	{1006, "Roof Scoop", 1250},
	{1007, "Right Sideskirt", 2500},
	{1008, "Nitrous x5", 12000},
	{1009, "Nitrous x2", 5000},
	{1010, "Nitrous x10", 20000},
	{1011, "Race Scoop", 1250},
	{1012, "Worx Scoop", 1250},
	{1013, "Round Fog Lights", 1500},
	{1014, "Champ Spoiler", 3500},
	{1015, "Race Spoiler", 3500},
	{1016, "Worx Spoiler", 3500},
	{1017, "Left Sideskirt", 2500},
	{1018, "Upswept Exhaust", 1000},
	{1019, "Twin Exhaust", 1000},
	{1020, "Large Exhaust", 1000},
	{1021, "Medium Exhaust", 1000},
	{1022, "Small Exhaust", 1000},
	{1023, "Fury Spoiler", 3500},
	{1024, "Square Fog Lights", 1500},
	{1025, "Offroad Wheels", 3000},
	{1026, "Right Alien Sideskirt", 2500},
	{1027, "Left Alien Sideskirt", 2500},
	{1028, "Alien Exhaust", 1000},
	{1029, "X-Flow Exhaust", 1000},
	{1030, "Right X-Flow Sideskirt", 2500},
	{1031, "Left X-Flow Sideskirt", 2500},
	{1032, "Alien Roof Vent", 2000},
	{1033, "X-Flow Roof Vent", 1500},
	{1034, "Alien Exhaust", 1000},
	{1035, "X-Flow Roof Vent", 1500},
	{1036, "Right Alien Sideskirt", 2500},
	{1037, "X-Flow Exhaust", 1000},
	{1038, "Alien Roof Vent", 2000},
	{1039, "Right X-Flow Sideskirt", 2500},
	{1040, "Left Alien Sideskirt", 2500},
	{1041, "Left X-Flow Sideskirt", 2500},
	{1042, "Right Chrome Sideskirt", 2500},
	{1043, "Slamin Exhaust", 1000},
	{1044, "Chrome Exhaust", 1000},
	{1045, "X-Flow Exhaust", 1000},
	{1046, "Alien Exhaust", 1000},
	{1047, "Right Alien Sideskirt", 2500},
	{1048, "Right X-Flow Sideskirt", 2500},
	{1049, "Alien Spoiler", 7500},
	{1050, "X-Flow Spoiler", 5000},
	{1051, "Left Alien Sideskirt", 2500},
	{1052, "Left X-Flow Sideskirt", 2500},
	{1053, "X-Flow Roof Vent", 1500},
	{1054, "Alien Roof Vent", 2000},
	{1055, "Alien Roof Vent", 2000},
	{1056, "Right Alien Sideskirt", 2500},
	{1057, "Right X-Flow Sideskirt", 2500},
	{1058, "X-Flow Spoiler", 5000},
	{1059, "X-Flow Exhaust", 1000},
	{1060, "Alien Spoiler", 7000},
	{1061, "X-Flow Roof Vent", 1500},
	{1062, "Left Alien Sideskirt", 2500},
	{1063, "Left X-Flow Sideskirt", 2500},
	{1064, "Alien Exhaust", 1000},
	{1065, "Alien Exhaust", 1000},
	{1066, "X-Flow Exhaust", 1000},
	{1067, "Alien Roof Vent", 2000},
	{1068, "X-Flow Roof Vent", 1500},
	{1069, "Right Alien Sideskirt", 2500},
	{1070, "Right X-Flow Sideskirt", 2500},
	{1071, "Left Alien Sideskirt", 2500},
	{1072, "Left X-Flow Sideskirt", 2500},
	{1073, "Shadow Wheels", 2000},
	{1074, "Mega Wheels", 2000},
	{1075, "Rimshine Wheels", 2000},
	{1076, "Wires Wheels", 2000},
	{1077, "Classic Wheels", 2000},
	{1078, "Twist Wheels", 2000},
	{1079, "Cutter Wheels", 2000},
	{1080, "Stitch Wheels", 2000},
	{1081, "Grove Wheels", 2000},
	{1082, "Import Wheels", 2000},
	{1083, "Dollar Wheels", 3500},
	{1084, "Trance Wheels", 2000},
	{1085, "Atomic Wheels", 2000},
	{1086, "Stereo", 2000},
	{1087, "Hydraulics", 6000},
	{1088, "Alien Roof Vent", 2000},
	{1089, "X-Flow Exhaust", 1000},
	{1090, "Right Alien Sideskirt", 2500},
	{1091, "X-Flow Roof Vent", 1500},
	{1092, "Alien Exhaust", 1000},
	{1093, "Left X-Flow Sideskirt", 2500},
	{1094, "Left Alien Sideskirt", 2500},
	{1095, "Right X-Flow Sideskirt", 2500},
	{1096, "Ahab Wheels", 2000},
	{1097, "Virtual Wheels", 2000},
	{1098, "Access Wheels", 2000},
	{1099, "Left Chrome Sideskirt", 2500},
	{1100, "Chrome Grill", 1500},
	{1101, "Left Chrome Flames Sideskirt", 2500},
	{1102, "Left Chrome Strip Sideskirt", 2500},
	{1103, "Convertible Roof", 1500},
	{1104, "Chrome Exhaust", 1000},
	{1105, "Slamin Exhaust", 1000},
	{1106, "Left Chrome Arches Sideskirt", 2500},
	{1107, "Left Chrome Strip Sideskirt", 2500},
	{1108, "Right Chrome Strip Sideskirt", 2500},
	{1109, "Chrome Rear Bullbars", 5000},
	{1110, "Slamin Rear Bullbars", 5000},
	{1111, "Front Sign", 1500},
	{1112, "Front Sign", 1500},
	{1113, "Chrome Exhaust", 1000},
	{1114, "Slamin Exhaust", 1000},
	{1115, "Chrome Front Bullbars", 5000},
	{1116, "Slamin Front Bullbars", 5000},
	{1117, "Chrome Front Bumper", 5000},
	{1118, "Right Chrome Trim Sideskirt", 2500},
	{1119, "Right Wheelcovers Sideskirt", 2500},
	{1120, "Left Chrome Trim Sideskirt", 2500},
	{1121, "Left Wheelcovers Sideskirt", 2500},
	{1122, "Right Chrome Flames Sideskirt", 2500},
	{1123, "Bullbar Chrome Bars", 1500},
	{1124, "Left Chrome Arches Sideskirt", 2500},
	{1125, "Bullbar Chrome Lights", 1500},
	{1126, "Chrome Exhaust", 1000},
	{1127, "Slamin Exhaust", 1000},
	{1128, "Vinyl Hardtop Roof", 1500},
	{1129, "Chrome Exhaust", 1000},
	{1130, "Hardtop Roof", 1500},
	{1131, "Softtop Roof", 1500},
	{1132, "Slamin Exhaust", 1000},
	{1133, "Right Chrome Strip Sideskirt", 2500},
	{1134, "Right Chrome Strip Sideskirt", 2500},
	{1135, "Slamin Exhaust", 1000},
	{1136, "Chrome Exhaust", 1000},
	{1138, "Alien Spoiler", 7000},
	{1139, "X-Flow Spoiler", 5000},
	{1140, "X-Flow Rear Bumper", 5000},
	{1141, "Alien Rear Bumper", 5000},
	{1142, "Left Oval Vents", 1250},
	{1143, "Right Oval Vents", 1250},
	{1144, "Left Square Vents", 1250},
	{1145, "Right Square Vents", 1250},
	{1146, "X-Flow Spoiler", 5000},
	{1147, "Alien Spoiler", 7000},
	{1148, "X-Flow Rear Bumper", 5000},
	{1149, "Alien Rear Bumper", 5000},
	{1150, "Alien Rear Bumper", 5000},
	{1151, "X-Flow Rear Bumper", 5000},
	{1152, "X-Flow Front Bumper", 5000},
	{1153, "Alien Front Bumper", 5000},
	{1154, "Alien Rear Bumper", 5000},
	{1155, "Alien Front Bumper", 5000},
	{1156, "X-Flow Rear Bumper", 5000},
	{1157, "X-Flow Front Bumper", 5000},
	{1158, "X-Flow Spoiler", 5000},
	{1159, "Alien Rear Bumper", 5000},
	{1160, "Alien Front Bumper", 5000},
	{1161, "X-Flow Rear Bumper", 5000},
	{1162, "Alien Spoiler", 7000},
	{1163, "X-Flow Spoiler", 5000},
	{1164, "Alien Spoiler", 7000},
	{1165, "X-Flow Front Bumper", 5000},
	{1166, "Alien Front Bumper", 5000},
	{1167, "X-Flow Rear Bumper", 5000},
	{1168, "Alien Rear Bumper", 5000},
	{1169, "Alien Front Bumper", 5000},
	{1170, "X-Flow Front Bumper", 5000},
	{1171, "Alien Front Bumper", 5000},
	{1172, "X-Flow Front Bumper", 5000},
	{1173, "X-Flow Front Bumper", 5000},
	{1174, "Chrome Front Bumper", 5000},
	{1175, "Slamin Front Bumper", 5000},
	{1176, "Chrome Rear Bumper", 5000},
	{1177, "Slamin Rear Bumper", 5000},
	{1178, "Slamin Rear Bumper", 5000},
	{1179, "Chrome Front Bumper", 5000},
	{1180, "Chrome Rear Bumper", 5000},
	{1181, "Slamin Front Bumper", 5000},
	{1182, "Chrome Front Bumper", 5000},
	{1183, "Slamin Rear Bumper", 5000},
	{1184, "Chrome Rear Bumper", 5000},
	{1185, "Slamin Front Bumper", 5000},
	{1186, "Slamin Rear Bumper", 5000},
	{1187, "Chrome Rear Bumper", 5000},
	{1188, "Slamin Front Bumper", 5000},
	{1189, "Chrome Front Bumper", 5000},
	{1190, "Slamin Front Bumper", 5000},
	{1191, "Chrome Front Bumper", 5000},
	{1192, "Chrome Rear Bumper", 5000},
	{1193, "Slamin Rear Bumper", 5000}
};

static VehiclesMods[][TOTAL_MODS] =
{
	{400, 1008,1009,1010,1013,1018,1019,1020,1021,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000},
	{401, 1001,1003,1004,1005,1006,1007,1008,1009,1010,1013,1017,1019,1020,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,0000},
	{402, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{403, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{404, 1000,1002,1007,1008,1009,1010,1013,1016,1017,1019,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000},
	{405, 1000,1001,1008,1009,1010,1014,1018,1019,1020,1021,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000},
	{406, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{407, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{408, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{409, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{410, 1001,1003,1007,1008,1009,1010,1013,1017,1019,1020,1021,1023,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000},
	{411, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{412, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{413, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{414, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{415, 1001,1003,1007,1008,1009,1010,1017,1018,1019,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000},
	{416, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{417, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{418, 1002,1006,1008,1009,1010,1016,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{419, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{420, 1001,1003,1004,1005,1008,1009,1010,1019,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000},
	{421, 1000,1008,1009,1010,1014,1016,1018,1019,1020,1021,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000},
	{422, 1007,1008,1009,1010,1013,1017,1019,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000},
	{423, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{424, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{425, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{426, 1001,1003,1004,1005,1006,1008,1009,1010,1019,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000},
	{427, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{428, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{429, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{430, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{431, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{432, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{433, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{434, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{435, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{436, 1001,1003,1006,1007,1008,1009,1010,1013,1017,1019,1020,1021,1022,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000},
	{437, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{438, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{439, 1001,1003,1007,1008,1009,1010,1013,1017,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145,0000,0000,0000,0000},
	{440, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{441, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{442, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{443, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{444, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{445, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{446, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{447, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{448, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{449, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{450, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{451, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{452, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{453, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{454, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{455, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{456, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{457, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{458, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{459, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{460, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{461, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{462, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{463, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{464, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{465, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{466, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{467, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{468, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{469, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{470, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{471, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{472, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{473, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{474, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{475, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{476, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{477, 1006,1007,1008,1009,1010,1017,1018,1019,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000},
	{478, 1004,1005,1008,1009,1010,1012,1013,1020,1021,1022,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000},
	{479, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{480, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{481, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{482, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{483, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{484, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{485, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{486, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{487, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{488, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{489, 1000,1002,1004,1005,1006,1008,1009,1010,1013,1016,1018,1019,1020,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000},
	{490, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{491, 1003,1007,1008,1009,1010,1014,1017,1018,1019,1020,1021,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145,0000},
	{492, 1000,1004,1005,1006,1008,1009,1010,1016,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{493, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{494, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{495, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{496, 1001,1002,1003,1006,1007,1008,1009,1010,1011,1017,1019,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,0000,0000},
	//{497, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{498, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{499, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{500, 1008,1009,1010,1013,1019,1020,1021,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{501, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{502, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{503, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{504, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{505, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{506, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{507, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{508, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{509, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{510, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{511, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{512, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{513, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{514, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{515, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{516, 1000,1002,1004,1007,1008,1009,1010,1015,1016,1017,1018,1019,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000},
	{517, 1002,1003,1007,1008,1009,1010,1016,1017,1018,1019,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145,0000},
	{518, 1001,1003,1005,1006,1007,1008,1009,1010,1013,1017,1018,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145},
	//{519, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{520, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{521, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{522, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{523, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{524, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{525, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{526, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{527, 1001,1007,1008,1009,1010,1014,1015,1017,1018,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000},
	{528, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{529, 1001,1003,1006,1007,1008,1009,1010,1011,1012,1017,1018,1019,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000},
	{530, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{531, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{532, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{533, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{534, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1100,1101,1106,1122,1123,1124,1125,1126,1127,1178,1179,1180,1185,0000},
	{535, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1109,1110,1113,1114,1115,1116,1117,1118,1119,1120,1121,0000,0000,0000},
	{536, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1103,1104,1105,1107,1108,1128,1181,1182,1183,1184,0000,0000,0000,0000},
	//{537, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{538, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{539, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{540, 1001,1004,1006,1007,1008,1009,1010,1017,1018,1019,1020,1023,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145},
	{541, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{542, 1008,1009,1010,1014,1015,1018,1019,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1144,1145,0000,0000,0000,0000,0000,0000},
	{543, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{544, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{545, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{546, 1001,1002,1004,1006,1007,1008,1009,1010,1017,1018,1019,1023,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145},
	{547, 1000,1003,1008,1009,1010,1016,1018,1019,1020,1021,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,0000,0000,0000,0000,0000},
	//{548, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{549, 1001,1003,1007,1008,1009,1010,1011,1012,1017,1018,1019,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145},
	{550, 1001,1003,1004,1005,1006,1008,1009,1010,1018,1019,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145,0000},
	{551, 1002,1003,1005,1006,1008,1009,1010,1016,1018,1019,1020,1021,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000},
	{552, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{553, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{554, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{555, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{556, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{557, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{558, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1163,1164,1165,1166,1167,1168},
	{559, 1008,1009,1010,1025,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1158,1159,1160,1161,1162,1173},
	{560, 1008,1009,1010,1025,1026,1027,1028,1029,1030,1031,1032,1033,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1138,1139,1140,1141,1169,1170},
	{561, 1008,1009,1010,1025,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1154,1155,1156,1157},
	{562, 1008,1009,1010,1025,1034,1035,1036,1037,1038,1039,1040,1041,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1146,1147,1148,1149,1171,1172},
	//{563, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{564, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{565, 1008,1009,1010,1025,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1150,1151,1152,1153},
	{566, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{567, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1102,1129,1130,1131,1132,1133,1186,1187,1188,1189,0000,0000,0000,0000},
	{568, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{569, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{570, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{571, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{572, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{573, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{574, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{575, 1008,1009,1010,1025,1042,1043,1044,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1099,1174,1175,1176,1177,0000,0000,0000,0000,0000,0000},
	{576, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1134,1135,1136,1137,1190,1191,1192,1193,0000,0000,0000,0000,0000,0000},
	//{577, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{578, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{579, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{580, 1001,1006,1007,1008,1009,1010,1017,1018,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000},
	//{581, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{582, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{583, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{584, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{585, 1001,1003,1006,1007,1008,1009,1010,1013,1017,1018,1019,1020,1023,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145},
	//{586, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{587, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{588, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{589, 1000,1004,1005,1006,1007,1008,1009,1010,1013,1016,1017,1018,1020,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1144,1145,0000},
	//{590, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{591, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{592, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{593, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{594, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	//{595, 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{596, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{597, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{598, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{599, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{600, 1004,1005,1006,1007,1008,1009,1010,1013,1017,1018,1020,1022,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000},
	{601, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{602, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{603, 1001,1006,1007,1008,1009,1010,1017,1018,1019,1020,1023,1024,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,1142,1143,1144,1145,0000},
	{604, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{605, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{606, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{607, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{608, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{609, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{610, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{611, 1008,1009,1010,1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1087,1096,1097,1098,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000}
};

new TipoTunning[MAX_PLAYERS][TOTAL_MODS];

stock GetComponentName(componentid)
{
	new
		name_component[32] = "Desconocido";

	if(!IsValidComponent(componentid))
	    return name_component;

    for(new i = 0; i < sizeof InfoTunning; i++)
	{
 		if(InfoTunning[i][tComponente] != componentid)
   			continue;

		format(name_component, sizeof(name_component), "%s", InfoTunning[i][tNombre]);
	}
	return name_component;
}

stock GetComponentPrice(componentid)
{
	new
		price_component = 500;

	if(!IsValidComponent(componentid))
	    return price_component;

	for(new i = 0; i < sizeof InfoTunning; i++)
	{
 		if(InfoTunning[i][tComponente] != componentid)
   			continue;

		price_component = InfoTunning[i][tPrecio];
	}
	return price_component;
}

stock IsModelComponentCompatible(model_veh, componentid)
{
	if(!IsVehicleValidModel(model_veh))
	    return 0;

	if(!IsValidComponent(componentid))
	    return 0;

	for(new i = 0; i < sizeof(VehiclesMods); i++)
	{
	    if(VehiclesMods[i][0] != model_veh)
	        continue;

  		for(new x = 1; x < TOTAL_MODS; x++)
		{
		    if(VehiclesMods[i][x] != componentid)
		        continue;

			return 1;
		}
	}
	return 0;
}

stock GetVehicleModIDE(model_veh)
{
	if(!IsVehicleValidModel(model_veh))
	    return -1;

	for(new i = 0; i < sizeof(VehiclesMods); i++)
	{
	    if(VehiclesMods[i][0] != model_veh)
	        continue;

	    return i;
	}
	return -1;
}

stock IsModelComponentCompatibleEx(vehiclemodel, count, &component)
{
	new
		id = GetVehicleModIDE(vehiclemodel);

	if(id == -1)
		return 0;

	if(count == 0)
		count = 1;

	if(count >= TOTAL_MODS){
	    return 0;
	}

	component = VehiclesMods[id][count];
	return 1;
}

#define MAX_VEHICLE_NAME			27

enum vSync_Vehicle_Info
{
	NombreVehicle[MAX_VEHICLE_NAME],
	Seats,
	Windows,
	Float:Mass,
	DriveType,
	EngineType,
	MaxSpeed,
	bool:Nitro,
	Float: NeonOffsetX,
	Float: NeonOffsetY,
    Float: NeonOffsetZ
}

static const vSync_VehicleInfo[212][vSync_Vehicle_Info] =
{
	{"Landstalker", 4, 4, 1700.0, '4', 'D', 159, true, -0.924996, 0.009998, -0.674996},
	{"Bravura", 2, 2, 1300.0, 'F', 'P', 148, true, -0.979999, 0.074997, -0.489998},
	{"Buffalo", 2, 2, 1500.0, 'R', 'P', 188, true, -1.034999, -0.029998, -0.579999},
	{"Linerunner", 2, 2, 3800.0, 'R', 'D', 111, true, -0.884998, 1.834998, -1.099997},
	{"Perennial", 4, 4, 1200.0, 'F', 'P', 134, true, -0.839999, -0.064998, -0.419999},
	{"Sentinel", 4, 4, 1600.0, 'R', 'P', 165, true, -0.914999, 0.000000, -0.534999},
	{"Dumper", 1, 1, 20000.0, 'R', 'D', 111, true, -1.129999, 0.354999, -1.219998},
	{"Firetruck", 2, 2, 6500.0, 'R', 'D', 150, true, -1.214998, 0.125000, -0.759998},
	{"Trashmaster", 2, 2, 5500.0, 'R', 'D', 101, true, -0.664999, 0.709999, -0.889998},
	{"Stretch", 4, 4, 2200.0, 'R', 'P', 159, true, -0.914999, -0.294999, -0.474999},
	{"Manana", 2, 2, 1000.0, 'F', 'P', 131, true, -0.879998, 0.000000, -0.389999},
	{"Infernus", 2, 2, 1400.0, '4', 'P', 223, true, -0.969999, 0.004999, -0.559997},
	{"Voodoo", 2, 2, 1800.0, 'R', 'P', 170, true, -0.994997, -0.154999, -0.569998},
	{"Pony", 4, 4, 2600.0, 'R', 'D', 111, true, -0.919999, -0.069999, -0.719999},
	{"Mule", 2, 2, 3500.0, 'R', 'D', 107, true, -0.759998, -0.469998, -0.524999},
	{"Cheetah", 2, 2, 1200.0, 'R', 'P', 194, true, -0.949998, -0.009998, -0.524999},
	{"Ambulance", 4, 4, 2600.0, '4', 'D', 155, true, -1.259999, -0.604999, -0.664999},
	{"Leviathan", 2, 2, 15000.0, '4', 'P', 143, false, -2.255002, 0.859999, -0.124999},
	{"Moonbeam", 4, 4, 2000.0, 'R', 'D', 116, true, -1.004999, 0.089997, -0.829999},
	{"Esperanto", 2, 2, 1800.0, 'R', 'P', 150, true, -0.934997, -0.009998, -0.584999},
	{"Taxi", 4, 4, 1450.0, 'F', 'P', 146, true, -0.954999, -0.009998, -0.444999},
	{"Washington", 2, 2, 1850.0, 'R', 'P', 155, true, -0.929997, -0.029998, -0.589999},
	{"Bobcat", 2, 2, 1700.0, '4', 'D', 141, true, -0.889998, 0.009998, -0.609999},
	{"Mr. Whoopee", 2, 2, 1700.0, 'R', 'D', 100, true, -0.999997, 0.164995, -0.714999},
	{"BF Injection", 2, 0, 1200.0, 'R', 'P', 137, true, -0.739997, 0.039999, -0.234999},
	{"Hunter", 1, 1, 10000.0, '4', 'P', 214, false, -0.639998, 2.475008, -0.789999},
	{"Premier", 4, 4, 1600.0, 'R', 'P', 175, true, -0.969999, 0.000000, -0.464998},
	{"Enforcer", 4, 4, 4000.0, 'R', 'D', 167, true, -1.124999, -0.714999, -0.734999},
	{"Securicar", 4, 2, 7000.0, 'R', 'D', 158, true, -1.124999, 0.054999, -0.759998},
	{"Banshee", 2, 2, 1400.0, 'R', 'P', 203, true, -0.844999, 0.004999, -0.474999},
	{"Predator", 1, 0, 2200.0, 'R', 'P', 184, false, 0.000000, 0.000000, 0.000000},
	{"Bus", 9, 2, 5500.0, 'R', 'D', 131, true, -1.304998, 2.300004, -0.714999},
	{"Rhino", 1, 0, 25000.0, '4', 'D', 95, true, 0.000000, 0.000000, 0.000000},
	{"Barracks", 2, 2, 10500.0, '4', 'D', 112, true, -0.579999, 0.994997, -0.874997},
	{"Hotknife", 2, 2, 1400.0, 'R', 'P', 169, true, 0.000000, 0.000000, 0.000000},
	{"Article Trailer", 1, 0, 3800.0, 'R', 'D', 0, true, 0.000000, 0.000000, 0.000000},
	{"Previon", 2, 2, 1400.0, 'F', 'P', 150, true, -0.859999, -0.024999, -0.489998},
	{"Coach", 9, 0, 9500.0, 'R', 'D', 159, true, -1.314998, 2.245002, -0.724999},
	{"Cabbie", 4, 4, 1750.0, 'R', 'P', 144, true, -0.969999, -0.034999, -0.674996},
	{"Stallion", 2, 2, 1600.0, 'R', 'P', 170, true, -0.884998, 0.034999, -0.644999},
	{"Rumpo", 4, 4, 2000.0, 'F', 'P', 137, true, -0.914999, -0.045000, -0.899999},
	{"RC Bandit", 1, 0, 100.0, '4', 'E', 76, true, 0.000000, 0.000000, 0.000000},
	{"Romero", 2, 2, 2500.0, 'R', 'P', 140, true, -1.004999, -0.074997, -0.604999},
	{"Packer", 2, 2, 8000.0, 'R', 'D', 127, true, -0.809997, 2.770015, -1.174998},
	{"Monster", 2, 2, 5000.0, '4', 'P', 111, true, -1.064998, 0.000000, 0.135000},
	{"Admiral", 4, 4, 1650.0, 'F', 'P', 165, true, -0.949998, 0.000000, -0.519999},
	{"Squallo", 1, 0, 2200.0, 'R', 'P', 240, false, 0.000000, 0.000000, 0.000000},
	{"Seasparrow", 2, 2, 3000.0, '4', 'P', 145, false, -1.004999, 0.259999, -0.769999},
	{"Pizzaboy", 1, 0, 350.0, 'R', 'P', 190, false, 0.000000, 0.000000, 0.000000},
	{"Tram", 2, 0, 1900.0, 'R', 'P', 185, false, 0.000000, 0.000000, 0.000000},
	{"Article Trailer 2", 1, 0, 3800.0, 'R', 'D', 0, true, 0.000000, 0.000000, 0.000000},
	{"Turismo", 2, 2, 1400.0, '4', 'P', 195, true, -0.984999, -0.194995, -0.519999},
	{"Speeder", 1, 0, 2200.0, 'R', 'P', 183, false, 0.000000, 0.000000, 0.000000},
	{"Reefer", 1, 0, 5000.0, 'R', 'P', 57, false, 0.000000, 0.000000, 0.000000},
	{"Tropic", 1, 0, 2200.0, 'R', 'P', 130, false, 0.000000, 0.000000, 0.000000},
	{"Flatbed", 2, 2, 8500.0, 'R', 'D', 159, true, -0.579999, 0.979999, -0.859999},
	{"Yankee", 2, 2, 4500.0, 'R', 'D', 107, true, -0.764998, -0.179995, -0.464998},
	{"Caddy", 2, 0, 1000.0, '4', 'E', 96, true, 0.000000, 0.000000, 0.000000},
	{"Solair", 4, 4, 2000.0, 'R', 'P', 159, true, -0.959999, -0.039999, -0.594999},
	{"Topfun Van (Berkley's RC)", 4, 4, 1900.0, 'R', 'D', 137, true, -0.919999, -0.069999, -0.719999},
	{"Skimmer", 2, 2, 5000.0, '4', 'P', 135, false, -1.399996, 0.554997, -1.819998},
	{"PCJ-600", 2, 0, 500.0, 'R', 'P', 207, false, 0.000000, 0.000000, 0.000000},
	{"Faggio", 2, 0, 350.0, 'R', 'P', 190, false, 0.000000, 0.000000, 0.000000},
	{"Freeway", 2, 0, 800.0, 'R', 'P', 210, false, 0.000000, 0.000000, 0.000000},
	{"RC Baron", 1, 0, 100.0, 'F', 'P', 45, true, 0.000000, 0.000000, 0.000000},
	{"RC Raider", 1, 0, 100.0, '4', 'P', 50, true, 0.000000, 0.000000, 0.000000},
	{"Glendale", 4, 4, 1600.0, 'R', 'P', 148, true, -0.989997, -0.064998, -0.489998},
	{"Oceanic", 4, 4, 1900.0, 'R', 'P', 142, true, -0.989997, -0.044998, -0.484999},
	{"Sanchez", 2, 0, 500.0, 'R', 'P', 186, false, 0.000000, 0.000000, 0.000000},
	{"Sparrow", 2, 2, 2500.0, '4', 'P', 145, false, 0.000000, 0.000000, 0.000000},
	{"Patriot", 4, 4, 2500.0, '4', 'P', 158, true, -1.119999, -0.149995, -0.359999},
	{"Quad", 2, 0, 400.0, '4', 'P', 111, true, 0.000000, 0.000000, 0.000000},
	{"Coastguard", 1, 0, 1200.0, 'R', 'P', 125, false, 0.000000, 0.000000, 0.000000},
	{"Dinghy", 1, 0, 800.0, 'R', 'P', 107, false, 0.000000, 0.000000, 0.000000},
	{"Hermes", 2, 2, 1950.0, 'F', 'P', 150, true, -0.994997, -0.064998, -0.544999},
	{"Sabre", 2, 2, 1700.0, 'R', 'P', 175, true, -0.904999, -0.054999, -0.549996},
	{"Rustler", 1, 1, 5000.0, '4', 'P', 220, false, 0.000000, 0.000000, 0.000000},
	{"ZR-350", 2, 2, 1400.0, 'R', 'P', 188, true, -0.979999, 0.019997, -0.514998},
	{"Walton", 2, 2, 1850.0, '4', 'D', 119, true, -0.804997, 0.064998, -0.519999},
	{"Regina", 4, 4, 1500.0, 'F', 'P', 141, true, -0.854999, 0.090000, -0.454997},
	{"Comet", 2, 2, 1400.0, '4', 'P', 186, true, -0.879998, 0.000000, -0.489998},
	{"BMX", 1, 0, 100.0, 'R', 'P', 97, false, 0.000000, 0.000000, 0.000000},
	{"Burrito", 2, 4, 1900.0, 'R', 'P', 158, true, -0.989997, 0.000000, -0.759998},
	{"Camper", 3, 3, 1900.0, 'R', 'P', 124, true, -0.834999, -0.149995, -0.744997},
	{"Marquis", 1, 0, 5000.0, 'R', 'P', 64, false, 0.000000, 0.000000, 0.000000},
	{"Baggage", 1, 0, 1000.0, 'R', 'E', 100, true, -0.629998, 0.164995, -0.374998},
	{"Dozer", 1, 0, 10000.0, '4', 'D', 65, true, 0.000000, 0.000000, 0.000000},
	{"Maverick", 4, 4, 5000.0, '4', 'P', 181, false, 0.000000, 0.000000, 0.000000},
	{"News Chopper", 2, 2, 3500.0, '4', 'P', 170, false, 0.000000, 0.000000, 0.000000},
	{"Rancher", 2, 2, 2500.0, '4', 'P', 141, true, -1.019999, 0.109999, -0.679997},
	{"FBI Rancher", 4, 4, 3500.0, '4', 'P', 158, true, -1.054998, 0.125000, -0.604999},
	{"Virgo", 2, 2, 1700.0, 'R', 'P', 150, true, -0.874997, -0.009998, -0.569998},
	{"Greenwood", 4, 4, 1600.0, 'R', 'P', 142, true, -0.909999, 0.000000, -0.459998},
	{"Jetmax", 1, 0, 3000.0, 'R', 'P', 183, false, 0.000000, 0.000000, 0.000000},
	{"Hotring Racer", 2, 2, 1600.0, 'R', 'P', 217, true, -0.909999, -0.199999, -0.639998},
	{"Sandking", 2, 2, 2000.0, '4', 'P', 178, true, -1.024999, 0.184999, -0.809997},
	{"Blista Compact", 2, 2, 1000.0, 'F', 'P', 164, true, -0.854999, 0.029998, -0.469998},
	{"Police Maverick", 4, 4, 4500.0, '4', 'P', 190, false, 0.000000, 0.000000, 0.000000},
	{"Boxville", 4, 2, 5500.0, 'R', 'D', 109, true, -1.149999, 0.269998, -0.654999},
	{"Benson", 2, 2, 3500.0, 'R', 'D', 124, true, -0.969999, -1.404996, -0.199999},
	{"Mesa", 2, 2, 1300.0, '4', 'D', 142, true, -0.969999, 0.189998, -0.574998},
	{"RC Goblin", 1, 0, 100.0, '4', 'P', 30, true, 0.000000, 0.000000, 0.000000},
	{"Hotring Racer A", 2, 2, 1600.0, 'R', 'P', 217, true, -0.909999, 0.029998, -0.639998},
	{"Hotring Racer B", 2, 2, 1600.0, 'R', 'P', 217, true, -0.909999, -0.184999, -0.639998},
	{"Bloodring Banger", 2, 2, 2100.0, 'R', 'P', 175, true, -0.989997, -0.059999, -0.494998},
	{"Rancher (Lure)", 2, 2, 2500.0, '4', 'P', 141, true, -1.019999, 0.109999, -0.679997},
	{"Super GT", 2, 2, 1400.0, 'R', 'P', 181, true, -0.904999, -0.249999, -0.509998},
	{"Elegant", 4, 4, 2200.0, 'R', 'P', 167, true, -1.084998, -0.024999, -0.589999},
	{"Journey", 2, 3, 3500.0, 'R', 'D', 109, true, -1.334998, -0.424997, -0.979999},
	{"Bike", 1, 0, 100.0, 'R', 'P', 105, false, 0.000000, 0.000000, 0.000000},
	{"Mountain Bike", 1, 0, 100.0, 'R', 'P', 130, false, 0.000000, 0.000000, 0.000000},
	{"Beagle", 2, 2, 10000.0, '4', 'P', 133, false, 0.000000, 0.000000, 0.000000},
	{"Cropduster", 1, 1, 5000.0, '4', 'P', 115, false, 0.000000, 0.000000, 0.000000},
	{"Stuntplane", 1, 1, 5000.0, '4', 'P', 151, false, 0.000000, 0.000000, 0.000000},
	{"Tanker", 2, 2, 3800.0, 'R', 'D', 122, true, -0.969999, 1.669998, -1.174998},
	{"Roadtrain", 2, 2, 5000.0, 'R', 'D', 144, true, -1.454998, 0.439999, -1.854997},
	{"Nebula", 4, 4, 1400.0, 'F', 'P', 159, true, -0.989997, 0.024999, -0.584999},
	{"Majestic", 2, 2, 1400.0, 'R', 'P', 159, true, -0.959999, 0.004999, -0.554997},
	{"Buccaneer", 2, 2, 1700.0, 'R', 'P', 166, true, -1.049998, 0.109999, -0.439999},
	{"Shamal", 1, 0, 15000.0, '4', 'P', 272, false, 0.000000, 0.000000, 0.000000},
	{"Hydra", 1, 1, 9000.0, '4', 'P', 272, false, 0.000000, 0.000000, 0.000000},
	{"FCR-900", 2, 0, 500.0, 'R', 'P', 209, false, 0.000000, 0.000000, 0.000000},
	{"NRG-500", 2, 0, 400.0, 'R', 'P', 209, false, 0.000000, 0.000000, 0.000000},
	{"HPV1000", 2, 0, 500.0, 'R', 'P', 197, false, 0.000000, 0.000000, 0.000000},
	{"Cement Truck", 2, 2, 5500.0, 'R', 'D', 131, true, -0.689997, 1.489997, -1.319998},
	{"Towtruck", 2, 2, 3500.0, 'R', 'D', 162, true, -1.054998, 0.499998, -0.329997},
	{"Fortune", 2, 2, 1700.0, 'R', 'P', 159, true, -0.899999, 0.000000, -0.564997},
	{"Cadrona", 2, 2, 1200.0, 'R', 'P', 150, true, -0.944998, 0.154999, -0.419999},
	{"FBI Truck", 2, 2, 4000.0, '4', 'D', 178, true, -0.924996, 0.059999, -0.529999},
	{"Willard", 4, 4, 1800.0, 'R', 'P', 150, true, -0.934997, -0.109999, -0.429998},
	{"Forklift", 1, 0, 1000.0, 'F', 'E', 61, true, 0.000000, 0.000000, 0.000000},
	{"Tractor", 1, 0, 2000.0, 'R', 'D', 71, true, -0.144997, 0.314999, -0.444999},
	{"Combine Harvester", 1, 1, 8500.0, '4', 'D', 111, true, 0.000000, 0.000000, 0.000000},
	{"Feltzer", 2, 2, 1600.0, 'R', 'P', 169, true, -0.924996, -0.034999, -0.479999},
	{"Remington", 2, 2, 1800.0, 'R', 'P', 170, true, -0.984999, 0.164995, -0.564997},
	{"Slamvan", 2, 2, 1950.0, 'R', 'P', 160, true, -1.069998, -0.034999, -0.569998},
	{"Blade", 2, 2, 1500.0, 'R', 'P', 175, true, -0.954999, -0.019997, -0.579999},
	{"Freight", 2, 0, 5500.0, 'R', 'D', 0, false, 0.000000, 0.000000, 0.000000},
	{"Brown Streak", 2, 0, 5500.0, 'R', 'D', 0, false, 0.000000, 0.000000, 0.000000},
	{"Vortex", 1, 0, 1900.0, 'R', 'P', 101, true, -1.004999, -0.049998, -0.019997},
	{"Vincent", 4, 4, 1800.0, 'F', 'P', 150, true, -1.024999, -0.090000, -0.639998},
	{"Bullet", 2, 2, 1200.0, 'R', 'P', 205, true, -0.904999, 0.000000, -0.414999},
	{"Clover", 2, 2, 1600.0, 'R', 'P', 166, true, -0.894999, 0.014999, -0.539999},
	{"Sadler", 2, 2, 1700.0, '4', 'D', 152, true, -0.904999, 0.009998, -0.409999},
	{"Firetruck (ladder variant)", 2, 2, 6500.0, 'R', 'D', 150, true, -1.089998, 0.000000, -0.709999},
	{"Hustler", 2, 2, 1700.0, 'R', 'P', 148, true, -0.939997, -0.029998, -0.564997},
	{"Intruder", 4, 4, 1800.0, 'R', 'P', 150, true, -1.039999, -0.100000, -0.474999},
	{"Primo", 4, 4, 1600.0, 'R', 'P', 144, true, -0.884998, 0.059999, -0.479999},
	{"Cargobob", 2, 2, 20000.0, '4', 'P', 158, false, -1.769997, 1.484997, -1.774996},
	{"Tampa", 2, 2, 1700.0, 'R', 'P', 155, true, -0.949998, 0.104997, -0.439999},
	{"Sunrise", 4, 4, 1600.0, 'F', 'P', 146, true, -1.089998, -0.059999, -0.554997},
	{"Merit", 4, 4, 1800.0, 'R', 'P', 159, true, -0.964999, 0.004999, -0.564997},
	{"Utility Van", 2, 2, 2600.0, 'R', 'D', 122, true, -1.034999, 0.749997, -0.254999},
	{"Nevada", 1, 0, 25000.0, '4', 'P', 193, false, 0.000000, 0.000000, 0.000000},
	{"Yosemite", 2, 2, 3000.0, 'R', 'P', 145, true, -1.109997, 0.009998, -0.534999},
	{"Windsor", 2, 2, 1500.0, 'R', 'P', 160, true, -0.754998, 0.000000, -0.464998},
	{"Monster A", 2, 2, 5000.0, '4', 'P', 111, true, -1.119999, 0.000000, 0.184999},
	{"Monster B", 2, 2, 5000.0, '4', 'P', 111, true, -1.129999, 0.044998, 0.074997},
	{"Uranus", 2, 2, 1400.0, 'R', 'P', 157, true, -0.894999, -0.089997, -0.374998},
	{"Jester", 2, 2, 1500.0, 'F', 'P', 179, true, -0.964999, 0.000000, -0.444999},
	{"Sultan", 4, 4, 1400.0, '4', 'P', 171, true, -1.004999, 0.054999, -0.414999},
	{"Stratum", 4, 4, 1800.0, 'R', 'P', 155, true, -0.919999, 0.129997, -0.574998},
	{"Elegy", 2, 2, 1500.0, 'R', 'P', 179, true, -0.909999, 0.119998, -0.404998},
	{"Raindance", 2, 2, 10000.0, '4', 'P', 160, false, 0.000000, 0.000000, 0.000000},
	{"RC Tiger", 1, 0, 100.0, '4', 'E', 89, true, 0.000000, 0.000000, 0.000000},
	{"Flash", 2, 2, 1400.0, 'F', 'P', 166, true, -0.824998, 0.000000, -0.414999},
	{"Tahoma", 4, 4, 1800.0, 'R', 'P', 161, true, -0.989997, -0.049998, -0.479999},
	{"Savanna", 4, 2, 1500.0, 'R', 'P', 175, true, -1.089998, 0.309998, -0.609999},
	{"Bandito", 1, 0, 1000.0, 'R', 'P', 148, true, -0.334998, 0.100000, -0.374998},
	{"Freight Flat Trailer", 1, 0, 5500.0, 'R', 'D', 0, false, 0.000000, 0.000000, 0.000000},
	{"Brown Streak Trailer", 1, 0, 5500.0, 'R', 'D', 0, false, 0.000000, 0.000000, 0.000000},
	{"Kart", 1, 0, 300.0, 'R', 'P', 94, true, 0.000000, 0.000000, 0.000000},
	{"Mower", 1, 0, 800.0, 'R', 'P', 61, true, 0.000000, 0.000000, 0.000000},
	{"Dune", 2, 2, 10000.0, '4', 'P', 111, true, 0.000000, 0.000000, 0.000000},
	{"Sweeper", 1, 2, 800.0, 'R', 'P', 61, true, 0.000000, 0.000000, 0.000000},
	{"Broadway", 2, 2, 1700.0, 'R', 'P', 159, true, -0.924996, 0.004999, -0.334998},
	{"Tornado", 2, 2, 1700.0, 'R', 'P', 159, true, -1.019999, -0.140000, -0.419999},
	{"AT-400", 2, 0, 60000.0, '4', 'P', 250, false, 0.000000, 0.000000, 0.000000},
	{"DFT-30", 2, 2, 5500.0, 'R', 'D', 131, true, -1.429998, -0.649999, -0.879998},
	{"Huntley", 4, 4, 2500.0, '4', 'P', 159, true, -1.014999, 0.000000, -0.484999},
	{"Stafford", 4, 4, 2200.0, 'R', 'P', 154, true, -1.089998, 0.014999, -0.474999},
	{"BF-400", 2, 0, 500.0, 'R', 'P', 200, false, 0.000000, 0.000000, 0.000000},
	{"Newsvan", 4, 3, 1900.0, 'R', 'D', 137, true, -0.984999, -0.194995, -0.709999},
	{"Tug", 1, 2, 800.0, 'R', 'P', 86, true, -0.674996, 0.259999, 0.129997},
	{"Petrol Trailer", 1, 0, 3800.0, 'R', 'D', 0, true, 0.000000, 0.000000, 0.000000},
	{"Emperor", 4, 4, 1800.0, 'R', 'P', 154, true, -1.019999, -0.009998, -0.354999},
	{"Wayfarer", 2, 0, 800.0, 'R', 'P', 211, false, 0.000000, 0.000000, 0.000000},
	{"Euros", 2, 2, 1400.0, '4', 'P', 166, true, -1.009999, -0.064998, -0.534999},
	{"Hotdog", 2, 2, 5500.0, 'R', 'D', 109, true, -1.374997, 0.000000, -0.664999},
	{"Club", 2, 2, 1400.0, 'F', 'P', 164, true, -0.909999, 0.000000, -0.359999},
	{"Freight Box Trailer", 1, 0, 5500.0, 'R', 'D', 0, false, 0.000000, 0.000000, 0.000000},
	{"Article Trailer 3", 1, 0, 3800.0, 'R', 'D', 0, true, 0.000000, 0.000000, 0.000000},
	{"Andromada", 2, 0, 40000.0, '4', 'P', 266, false, 0.000000, 0.000000, 0.000000},
	{"Dodo", 2, 2, 5000.0, '4', 'P', 135, false, 0.000000, 0.000000, 0.000000},
	{"RC Cam", 1, 0, 100.0, '4', 'E', 62, true, 0.000000, 0.000000, 0.000000},
	{"Launch", 1, 0, 2200.0, 'R', 'P', 118, false, 0.000000, 0.000000, 0.000000},
	{"Police Car (LSPD)", 4, 4, 1600.0, 'R', 'P', 177, true, -0.974999, 0.000000, -0.469998},
	{"Police Car (SFPD)", 4, 4, 1600.0, 'R', 'P', 177, true, -0.969999, 0.000000, -0.464998},
	{"Police Car (LVPD)", 4, 4, 1600.0, 'R', 'P', 177, true, -1.004999, -0.014999, -0.414999},
	{"Ranger", 2, 2, 2500.0, '4', 'D', 159, true, -1.019999, 0.115000, -0.684997},
	{"Picador", 2, 2, 1600.0, 'R', 'D', 152, true, -0.959999, 0.204998, -0.499998},
	{"S.W.A.T.", 2, 0, 5000.0, '4', 'D', 111, true, 0.000000, 0.000000, 0.000000},
	{"Alpha", 2, 2, 1500.0, 'R', 'P', 171, true, -1.024999, 0.000000, -0.549996},
	{"Phoenix", 2, 2, 1500.0, 'R', 'P', 173, true, -0.954999, 0.034999, -0.629998},
	{"Glendale (destroyed)", 4, 4, 1600.0, 'R', 'P', 148, true, -0.989997, -0.064998, -0.489998},
	{"Sadler (destroyed)", 2, 2, 1700.0, '4', 'D', 152, true, -0.904999, 0.009998, -0.409999},
	{"Baggage Trailer A", 1, 0, 1000.0, 'R', 'E', 0, true, 0.000000, 0.000000, 0.000000},
	{"Baggage Trailer B", 1, 0, 1000.0, 'R', 'E', 0, true, 0.000000, 0.000000, 0.000000},
	{"Tug Stairs Trailer", 1, 0, 1000.0, 'R', 'E', 0, true, 0.000000, 0.000000, 0.000000},
	{"Boxville (burglary)", 4, 2, 5500.0, 'R', 'D', 109, true, -1.149999, 0.269998, -0.654999},
	{"Farm Trailer", 1, 0, 400.0, 'R', 'E', 0, true, 0.000000, 0.000000, 0.000000},
	{"Utility Trailer", 1, 0, 1000.0, 'R', 'E', 0, true, 0.000000, 0.000000, 0.000000}
};


Valid_Vehicle_Neon(modelid)
{
    new idx = modelid - 400;
	if(0 <= idx <= 211)
	{
        if(vSync_VehicleInfo[idx][NeonOffsetX] == 0.0 && vSync_VehicleInfo[idx][NeonOffsetY] == 0.0 && vSync_VehicleInfo[idx][NeonOffsetZ] == 0.0)
		{
	    	return 0;
		}
		return 1;
	}
	return 0;
}

Es_Neon(modelo)
{
	new gformat[32];
	switch (modelo)
	{
		case 18647: alm(gformat, "rojo");
		case 18648: alm(gformat, "azul");
		case 18649: alm(gformat, "verde");
		case 18650: alm(gformat, "amarillo");
		case 18651: alm(gformat, "rosado");
		case 18652: alm(gformat, "blanco");
	}
	return gformat;
}

//variables referidos
enum referidosinfo
{
	sID,
	sCodigoRef[MAX_PLAYER_NAME],
	sNombre[MAX_PLAYER_NAME],
	sUsos,
};
new InfoReferido[MAX_Referidos][referidosinfo];
forward CargarReferidos();
public CargarReferidos()
{
	Loop(xd, MAX_Referidos, 0)
	{
		alm(InfoReferido[xd][sNombre], "none");
	}
	new cargaditos = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
		new id = tabla+1;
		reg_int(tabla, "ID", InfoReferido[id][sID]);
		reg_string(tabla, "codigo", InfoReferido[id][sCodigoRef], MAX_PLAYER_NAME);
		reg_string(tabla, "nombre", InfoReferido[id][sNombre], MAX_PLAYER_NAME);
		reg_int(tabla, "usos", InfoReferido[id][sUsos]);
		if (InfoReferido[id][sID]) totalreferidos++;
		//funcion
		cargaditos++;
	}
	printf("%d referidos [SQL: %d] cargados correctamente.", cargaditos, totalreferidos-1);
	return 1;
}

Colocar_Neon(id, vehicleid)
{
	if (InfoVehiculo[id][vModeloNeon] == 0) return 1;
	if (InfoVehiculo[id][vOnNeon] == 0) return 1;
	new idx = GetVehicleModel(vehicleid) - 400;
	if (0 <= idx <= 211)
	{
		Delete_Neon(id);
		InfoVehiculo[id][vObjetoNeonL] = CreateDynamicObject(InfoVehiculo[id][vModeloNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		InfoVehiculo[id][vObjetoNeonR] = CreateDynamicObject(InfoVehiculo[id][vModeloNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachDynamicObjectToVehicle(InfoVehiculo[id][vObjetoNeonL], vehicleid, vSync_VehicleInfo[idx][NeonOffsetX], vSync_VehicleInfo[idx][NeonOffsetY], vSync_VehicleInfo[idx][NeonOffsetZ], 0.0, 0.0, 0.0);
		AttachDynamicObjectToVehicle(InfoVehiculo[id][vObjetoNeonR], vehicleid, -vSync_VehicleInfo[idx][NeonOffsetX], vSync_VehicleInfo[idx][NeonOffsetY], vSync_VehicleInfo[idx][NeonOffsetZ], 0.0, 0.0, 0.0);
		return 1;
	}
	return 0;
}

Delete_Neon(id)
{
	if (InfoVehiculo[id][vObjetoNeonL] != INVALID_STREAMER_ID)
	{
		DestroyDynamicObject(InfoVehiculo[id][vObjetoNeonL]);
		InfoVehiculo[id][vObjetoNeonL] = INVALID_STREAMER_ID;
	}
	if (InfoVehiculo[id][vObjetoNeonR] != INVALID_STREAMER_ID)
	{
		DestroyDynamicObject(InfoVehiculo[id][vObjetoNeonR]);
		InfoVehiculo[id][vObjetoNeonR] = INVALID_STREAMER_ID;
	}
	return 1;
}

//_______________ vehiculos temporales by bernal ________________//
enum tempvehicles
{
	veh_ID,
	veh_Nombre[70],
	Float:veh_PosX,
	Float:veh_PosY,
	Float:veh_PosZ,
	Float:veh_SpawnX,
	Float:veh_SpawnY,
	Float:veh_SpawnZ,
	Float:veh_SpawnR,
	veh_vehicles_models[10],
	veh_vehicles_colors[2],
	veh_faccion,
	veh_familia,
	veh_trabajo,
	// no guardables
	veh_Pickup,         // Pickup
	Text3D: veh_Label,  // Label
}
new InfoVehTemporal[MAX_VEHICULOS_TEMP][tempvehicles];

enum inforeportes
{
	rID,
	rUsuario,
	rReportado,
	rRazon[120],
	rTiempoReporte,
};
new InfoReporte[MAX_REPORTES][inforeportes];

enum infosmochilas                      //sistema de mochila IN the MYSQL
{
	mID,
	mModelo,
	mSlot[9],
	mSlot_Cant[9],
	mSlot_Tipo[9]
};
new InfoMochila[MAX_MOCHILAS][infosmochilas];

//<=================================> objetos dinamicos - jorgito
enum pObjects
{
	pOID,
	pObjeto,
	Float:pPosX,
	Float:pPosY,
	Float:pPosZ,
	Float:pPosRX,
	Float:pPosRY,
	Float:pPosRZ,
	pVw,
	pInt,
};
new cObjeto[MAX_POBJETOS][pObjects];

CargarObjetosAdmin()
{
	new arrCoords[9][32];
	new strFromFile2[256];
	new CONTAR_OBJETOS;
	new File: file = fopen("ObjetosAdmin.rp", io_read);
	if (file)
	{
		new ID_OBJETO;
		while (ID_OBJETO < sizeof(cObjeto))
		{
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			cObjeto[ID_OBJETO][pPosX] = floatstr(arrCoords[3]);
			cObjeto[ID_OBJETO][pPosY] = floatstr(arrCoords[4]);
			cObjeto[ID_OBJETO][pPosZ] = floatstr(arrCoords[5]);
			cObjeto[ID_OBJETO][pPosRX] = floatstr(arrCoords[6]);
			cObjeto[ID_OBJETO][pPosRY] = floatstr(arrCoords[7]);
			cObjeto[ID_OBJETO][pPosRZ] = floatstr(arrCoords[8]);
			cObjeto[ID_OBJETO][pVw] = strval(arrCoords[1]);
			cObjeto[ID_OBJETO][pInt] = strval(arrCoords[2]);
			cObjeto[ID_OBJETO][pOID] = strval(arrCoords[0]);
			if (cObjeto[ID_OBJETO][pOID] > 0)
			{
				CONTAR_OBJETOS++;
				cObjeto[ID_OBJETO][pObjeto]  = CreateDynamicObject(cObjeto[ID_OBJETO][pOID], cObjeto[ID_OBJETO][pPosX], cObjeto[ID_OBJETO][pPosY], cObjeto[ID_OBJETO][pPosZ], cObjeto[ID_OBJETO][pPosRX], cObjeto[ID_OBJETO][pPosRY], cObjeto[ID_OBJETO][pPosRZ], cObjeto[ID_OBJETO][pVw], cObjeto[ID_OBJETO][pInt], -1, MAX_RADIO_STREAM_MIN);
			}
			ID_OBJETO++;
		}
		fclose(file);
	}
	if (CONTAR_OBJETOS != 0)
	{
		printf("» Sistema de objetos dinamicos cargado (%i).", CONTAR_OBJETOS);
	}
	else
	{
		printf("» Sistema de objetos dinamicos cargado (0).", CONTAR_OBJETOS);
	}
}

//<=================================> objetos de trafico
enum binfo
{
	bObjeto,
	bModelo,
	Float:bPosX,
	Float:bPosY,
	Float:bPosZ,
	Float:bPosRX,
	Float:bPosRY,
	Float:bPosRZ,
};
new InfoBar[MAX_BARRERAS][binfo];

enum pinchoInfo
{
	Float: sX,
	Float: sY,
	Float: sZ,
	sObjectID,
	sDeployedAt[MAX_ZONE_NAME],
};
new InfoPincho[MAX_PINCHOS][pinchoInfo];

enum pSpec
{
	Float: Coords[3],
	Float: sPx,
	Float: sPy,
	Float: sPz,
	sPint,
	sLocal,
	sCam,
};
new Unspec[MAX_PLAYERS][pSpec];

//<=================================> sistema de eventos
enum jevento
{
	eVW,
	eInterior,
	Float: eVariable[6]
}
new jEvento[MAX_PLAYERS][jevento];

enum ievento
{
	iEtapa,
	iTipo,
	iMensaje[128],
	iMusica[128],
	Float: iVida,
	Float: iChaleco,
	Float: iPosicionX,
	Float: iPosicionY,
	Float: iPosicionZ,
	iInterior,
	iVirtualWorld,
};
new InfoEvento[ievento];
new iObjeto[3];

// variables de 'plantas.sql' desde 23-10-2020
enum plantaInfo
{
	sID,							// ID en base de datos
	sPropietario[MAX_PLAYER_NAME],  // Propietario
	sTiempo,                        // Tiempo de duracion
	Float: sPosicionX,              // Posicion X
	Float: sPosicionY,              // Posicion Y
	Float: sPosicionZ,              // Posicion Z
	sInterior,                      // Interior
	sVirtualWorld,                  // VirtualWorld
	sGramos,                        // Gramos
	Text3D: sLabel,                 // Label
	sObjeto,                        // Objeto
};
new InfoPlanta[MAX_PLANTAS][plantaInfo];

forward CargarPlantas();
public CargarPlantas()
{
	Loop(xd, MAX_PLANTAS, 0)
	{
		alm(InfoPlanta[xd][sPropietario], "none");
	}
	new cargaditos = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoPlanta[id][sID]);
		reg_string(tabla, "Propietario", InfoPlanta[id][sPropietario], MAX_PLAYER_NAME);
		reg_int(tabla, "Tiempo", InfoPlanta[id][sTiempo]);
		reg_float(tabla, "PosicionX", InfoPlanta[id][sPosicionX]);
		reg_float(tabla, "PosicionY", InfoPlanta[id][sPosicionY]);
		reg_float(tabla, "PosicionZ", InfoPlanta[id][sPosicionZ]);
		reg_int(tabla, "Interior", InfoPlanta[id][sInterior]);
		reg_int(tabla, "VirtualWorld", InfoPlanta[id][sVirtualWorld]);
		reg_int(tabla, "Gramos", InfoPlanta[id][sGramos]);
		if (InfoPlanta[id][sID]) totalplantas++;
		//funcion
		if (InfoPlanta[id][sPosicionX] != 0.0)
		{
			new string[256];
			if (InfoPlanta[id][sGramos] != 0) format(string, sizeof string, "Planta de marihuana {cccccc}(ID: {009F46}%d{cccccc})\n{ffffff}Madurada ({FFFF00}/splanta{ffffff})", id);
			else format(string, sizeof string, "Planta de marihuana {cccccc}(ID: {009F46}%d{cccccc})\n{ffffff}Madura en {FFFF00}%s", id, Minutos_tiempo(InfoPlanta[id][sTiempo]));
			InfoPlanta[id][sLabel] = CreateDynamic3DTextLabel(string, 0x009F46FF, InfoPlanta[id][sPosicionX], InfoPlanta[id][sPosicionY], InfoPlanta[id][sPosicionZ] + 1.5, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, InfoPlanta[id][sVirtualWorld], InfoPlanta[id][sInterior]);
			InfoPlanta[id][sObjeto] = CreateDynamicObject(19473, InfoPlanta[id][sPosicionX], InfoPlanta[id][sPosicionY], InfoPlanta[id][sPosicionZ], 0.0, 0.0, 0.0, InfoPlanta[id][sVirtualWorld], InfoPlanta[id][sInterior]);
			cargaditos++;
		}
	}
	printf("%d plantas de marihuana [SQL: %d] cargadas correctamente.", cargaditos, totalplantas-1);
	return 1;
}

//<=================================> sistema de fogatas - EdinsonWalker
enum fInfo
{
	fObjeto,
	fObjeto2,
	Float:fPosicionX,
	Float:fPosicionY,
	Float:fPosicionZ,
	Float:fPosicionRX,
	Float:fPosicionRY,
	Float:fPosicionRZ,
};
new InfoFogata[MAX_PLAYERS][fInfo];

//<=================================> sistema de fuerza /Entrenar
new	Float:barbell_pos[][] =
{
	{ 774.42907715,1.88309872,1000.48834229,0.00000000,270.00000000,87.99966431 }, // Los Santos Gym's BarBell
	{ 765.85528564,-48.86857224,1000.64093018,0.00000000,89.49993896,0.00000000 }, // San Fierro Gym's BarBell.
	{ 765.34039307,-59.18271637,1000.63793945,0.00000000,89.49993896, 181.25012207 }, // Las Venturas Gym's BarBell
	{ 653.42572, -1863.55444, 5.41780, 0.00000, 90.00000 } // playa LS
};

new Float:PressBancaPlayerPos[][] =
{
    { 773.0491,1.4285,1000.7209, 269.2024 }, // Los Santos Gym's bench.
    { 766.3170,-47.3574,1000.5859, 179.2983 }, // San Fierro Gym's bench.
    { 764.9001,-60.5580,1000.6563, 1.9500 }, // Las Venturas Gym's bench
    { 203.4694, 1896.2308, 17.5833, 0.0000 }, // Pf
    { 203.3845, 1894.1179, 17.5833, 180.0000 }, // Pf
    { 653.9918,-1865.1168,5.4609,5.2957 } // playa LS
};


// variables de 'familias.sql' desde 27-10-2020
enum familiaInfo
{
	fID_sql,                    		// id sql
	fNombre[128],               		// nombre
	fLogo[8],                   		// logo
	fLider[MAX_PLAYER_NAME],    		// lider
	fTipo,                      		// tipo
	fColor,                             // color
	fDinero,                    		// dinero caja
	fMaxRangos,                 		// maximo de rangos
	Float: fSpawnX,						// spawn x
	Float: fSpawnY,						// spawn y
	Float: fSpawnZ,						// spawn z
	Float: fSpawnR,						// spawn r
	fSpawnInt,							// spawn int
	fSpawnVW,							// spawn vw
	Float: fArmarioX,					// armario x
	Float: fArmarioY,					// armario y
	Float: fArmarioZ,					// armario z
	fArmarioInt,						// armario int
	fArmarioVW,                         // armario vw
	fArmarioObjeto[12],					// armario objeto
	fArmarioCantidad[12],				// armario cantidad
    fChat,                              // bloqueo chat
	//no saved
	fArmarioPickup,                     // armario pickup
	Text3D: fArmarioLabel,              // armario label
};
new InfoFamilia[MAX_FAMILIAS][familiaInfo];

new NumeroFamilia[MAX_PLAYERS];
new fam_rango[MAX_FAMILIAS][15][32];

SendFamilyMessage(famid, color, string[])
{
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid) && InfoJugador[playerid][jTogFam] == 0)
	{
		if (InfoJugador[playerid][jFamLider] == famid || InfoJugador[playerid][jFamMiembro] == famid)
		{
			SendSplitMessage(playerid, color, string);
		}
	}
}

GetMiembrosFamilia(id)
{
	new query[160];
	new Cache:result;
	mysql_format(DBngrp, query, sizeof query, "SELECT * FROM cuentas WHERE FamMiembro = '%d'", id);
	result = mysql_query(DBngrp,query);
	new nm = cache_num_rows();
	cache_delete(result);
	return nm;
}

OnFamily(family)
{
	new count;
	foreach(new playerid: Player) if (IsPlayerConnectedEx(playerid) && IsPlayerFamily(playerid, family))
	{
		count++;
	}
	return count;
}

IsPlayerFamily(playerid, familia)
{
	if (!IsPlayerConnectedEx(playerid)) return 0;
	new lider = InfoJugador[playerid][jFamLider], miembro = InfoJugador[playerid][jFamMiembro];
	if (lider == familia) return 1;
	if (miembro == familia) return 1;
	return 0;
}

GetTypeFamily(type)
{
	new ftipo[18];
	switch (type)
	{
		case 1: alm(ftipo, "Pandilla");
		case 2: alm(ftipo, "Mafia");
		case 3: alm(ftipo, "Legal");
		case 4: alm(ftipo, "Motoqueros");
		case 5: alm(ftipo, "Triada");
		case 6: alm(ftipo, "Criminal");
		case 7: alm(ftipo, "Ilegal");
		case 8: alm(ftipo, "Network");
		default: alm(ftipo, "Ninguno");
	}
	return ftipo;
}




forward CargarFamilias();
public CargarFamilias()
{
	new cargaditos = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoFamilia[id][fID_sql]);
		reg_string(tabla, "Nombre", InfoFamilia[id][fNombre], 128);
		reg_string(tabla, "Logo", InfoFamilia[id][fLogo], 8);
		reg_string(tabla, "Lider", InfoFamilia[id][fLider], MAX_PLAYER_NAME);
		reg_int(tabla, "Tipo", InfoFamilia[id][fTipo]);
		reg_int(tabla, "Color", InfoFamilia[id][fColor]);
		reg_int(tabla, "Dinero", InfoFamilia[id][fDinero]);
		reg_string(tabla, "Rango1", fam_rango[id][0], 32);
		reg_string(tabla, "Rango2", fam_rango[id][1], 32);
		reg_string(tabla, "Rango3", fam_rango[id][2], 32);
		reg_string(tabla, "Rango4", fam_rango[id][3], 32);
		reg_string(tabla, "Rango5", fam_rango[id][4], 32);
		reg_string(tabla, "Rango6", fam_rango[id][5], 32);
		reg_string(tabla, "Rango7", fam_rango[id][6], 32);
		reg_string(tabla, "Rango8", fam_rango[id][7], 32);
		reg_string(tabla, "Rango9", fam_rango[id][8], 32);
		reg_string(tabla, "Rango10", fam_rango[id][9], 32);
		reg_string(tabla, "Rango11", fam_rango[id][10], 32);
		reg_string(tabla, "Rango12", fam_rango[id][11], 32);
		reg_string(tabla, "Rango13", fam_rango[id][12], 32);
		reg_string(tabla, "Rango14", fam_rango[id][13], 32);
		reg_string(tabla, "Rango15", fam_rango[id][14], 32);
		reg_int(tabla, "MaxRangos", InfoFamilia[id][fMaxRangos]);
		reg_float(tabla, "SpawnX", InfoFamilia[id][fSpawnX]);
		reg_float(tabla, "SpawnY", InfoFamilia[id][fSpawnY]);
		reg_float(tabla, "SpawnZ", InfoFamilia[id][fSpawnZ]);
		reg_float(tabla, "SpawnR", InfoFamilia[id][fSpawnR]);
		reg_int(tabla, "SpawnInt", InfoFamilia[id][fSpawnInt]);
		reg_int(tabla, "SpawnVW", InfoFamilia[id][fSpawnVW]);
		reg_float(tabla, "ArmarioX", InfoFamilia[id][fArmarioX]);
		reg_float(tabla, "ArmarioY", InfoFamilia[id][fArmarioY]);
		reg_float(tabla, "ArmarioZ", InfoFamilia[id][fArmarioZ]);
		reg_int(tabla, "ArmarioInt", InfoFamilia[id][fArmarioInt]);
		reg_int(tabla, "ArmarioVW", InfoFamilia[id][fArmarioVW]);
		reg_int(tabla, "ArmarioObjeto1", InfoFamilia[id][fArmarioObjeto][0]);
		reg_int(tabla, "ArmarioCantidad1", InfoFamilia[id][fArmarioCantidad][0]);
		reg_int(tabla, "ArmarioObjeto2", InfoFamilia[id][fArmarioObjeto][1]);
		reg_int(tabla, "ArmarioCantidad2", InfoFamilia[id][fArmarioCantidad][1]);
		reg_int(tabla, "ArmarioObjeto3", InfoFamilia[id][fArmarioObjeto][2]);
		reg_int(tabla, "ArmarioCantidad3", InfoFamilia[id][fArmarioCantidad][2]);
		reg_int(tabla, "ArmarioObjeto4", InfoFamilia[id][fArmarioObjeto][3]);
		reg_int(tabla, "ArmarioCantidad4", InfoFamilia[id][fArmarioCantidad][3]);
		reg_int(tabla, "ArmarioObjeto5", InfoFamilia[id][fArmarioObjeto][4]);
		reg_int(tabla, "ArmarioCantidad5", InfoFamilia[id][fArmarioCantidad][4]);
		reg_int(tabla, "ArmarioObjeto6", InfoFamilia[id][fArmarioObjeto][5]);
		reg_int(tabla, "ArmarioCantidad6", InfoFamilia[id][fArmarioCantidad][5]);
		reg_int(tabla, "ArmarioObjeto7", InfoFamilia[id][fArmarioObjeto][6]);
		reg_int(tabla, "ArmarioCantidad7", InfoFamilia[id][fArmarioCantidad][6]);
		reg_int(tabla, "ArmarioObjeto8", InfoFamilia[id][fArmarioObjeto][7]);
		reg_int(tabla, "ArmarioCantidad8", InfoFamilia[id][fArmarioCantidad][7]);
		reg_int(tabla, "ArmarioObjeto9", InfoFamilia[id][fArmarioObjeto][8]);
		reg_int(tabla, "ArmarioCantidad9", InfoFamilia[id][fArmarioCantidad][8]);
		reg_int(tabla, "ArmarioObjeto10", InfoFamilia[id][fArmarioObjeto][9]);
		reg_int(tabla, "ArmarioCantidad10", InfoFamilia[id][fArmarioCantidad][9]);
		reg_int(tabla, "ArmarioObjeto11", InfoFamilia[id][fArmarioObjeto][10]);
		reg_int(tabla, "ArmarioCantidad11", InfoFamilia[id][fArmarioCantidad][10]);
		reg_int(tabla, "ArmarioObjeto12", InfoFamilia[id][fArmarioObjeto][11]);
		reg_int(tabla, "ArmarioCantidad12", InfoFamilia[id][fArmarioCantidad][11]);
		reg_int(tabla, "Chat", InfoFamilia[id][fChat]);
		if (InfoFamilia[id][fTipo]) cargaditos++;
		if (InfoFamilia[id][fID_sql]) totalfamilias++;
		if (InfoFamilia[id][fArmarioX] != 0.0) familia_armario(id, 0);
	}
	printf("%d familias dinamicas [SQL: %d] cargados correctamente.", cargaditos, totalfamilias-1);
	return 1;
}

familia_armario(id, estilo)
{
	new familyLabel[350];
	format(familyLabel, sizeof familyLabel, "Armario: {CCCC00}%s\n{EBEBEB}Use /cajafuerte", InfoFamilia[id][fLogo]);
	if (estilo == 0)
	{
		DestroyDynamicPickup(InfoFamilia[id][fArmarioPickup]);
		if (IsValidDynamic3DTextLabel(InfoFamilia[id][fArmarioLabel]))
		{
			DestroyDynamic3DTextLabel(InfoFamilia[id][fArmarioLabel]);
			InfoFamilia[id][fArmarioLabel] = Text3D:INVALID_3DTEXT_ID;
		}
		InfoFamilia[id][fArmarioLabel] = CreateDynamic3DTextLabel(familyLabel, 0xEBEBEBFF, InfoFamilia[id][fArmarioX], InfoFamilia[id][fArmarioY], InfoFamilia[id][fArmarioZ]+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoFamilia[id][fArmarioVW], InfoFamilia[id][fArmarioInt], -1);
		InfoFamilia[id][fArmarioPickup] = CreateDynamicPickup(1239, 1, InfoFamilia[id][fArmarioX], InfoFamilia[id][fArmarioY], InfoFamilia[id][fArmarioZ], InfoFamilia[id][fArmarioVW], InfoFamilia[id][fArmarioInt]);
	}
	else
	{
		UpdateDynamic3DTextLabelText(InfoFamilia[id][fArmarioLabel], 0xEBEBEBFF, familyLabel);
	}
}

new RandomColors[] =
{
	0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
	0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
	0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
	0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
	0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
	0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
	0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
	0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
	0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
	0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
	0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
	0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
	0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF, 0x177517FF, 0x210606FF,
	0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF, 0xB7B7B7FF, 0x464C8DFF,
	0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF, 0x1E1D13FF, 0x1E1306FF,
	0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF, 0x992E1EFF, 0x2C1E08FF,
	0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF, 0x481A0EFF, 0x7A7399FF,
	0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF, 0x7B3E7EFF, 0x3C1737FF,
	0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF, 0x163012FF, 0x16301BFF,
	0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF, 0x2B3C99FF, 0x3A3A0BFF,
	0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF, 0x2C5089FF, 0x15426CFF,
	0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF, 0x995C52FF, 0x99581EFF,
	0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF, 0x96821DFF, 0x197F19FF,
	0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF, 0x8A653AFF, 0x732617FF,
	0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF, 0x561A28FF, 0x4E0E27FF,
	0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};

enum szInfo
{
	sz_Nombre[28],
	Float:sz_Area[6]
};

static const NombreZona[][szInfo] =
{
	// Barrios y pueblos
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Florida",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Florida",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Florida",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Florida",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Florida",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Florida",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Florida",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Florida",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Florida",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Spectrum",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Spectrum",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Spectrum",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Spectrum",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Spectrum",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Spectrum",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Spectrum",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Vegas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Vegas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Vegas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Vegas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Spectrum Airport",          {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Spectrum Airport",          {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Spectrum Airport",          {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Spectrum Airport",          {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Spectrum Airport",          {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Spectrum Airport",          {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Ciudades y condados
	{"Spectrum",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Vegas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Francisco",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

//-----------------------------------> sistema de mercados negros - 0vi3d0
enum _MercadoData
{
	mID,
	mExists,
	Float:mPos[4],
	Float:mInt[4],
	mInterior,
	mVW,
	mLocalizacion[80],
	mBajoConquista,
	mQuienEstaConquistando,
	mTiempoConquista2,
	mConquistado,
	mQuienConquisto[80],
	mIDFamilia,
	mTiempoConquista,
	Text3D:mText3D,
	Text3D:mText3D2,
	Text3D:mTextC,
	mPickup,
	mPickup2
};
new MercadoData[MAX_MERCADOS][_MercadoData];

enum fabricaInfo
{
	fabricaID,
	fabricaExists,
	Float:fabricaPos[4],
	Float:fabricaInterior[4],
	fabricaInteriorID,
	fabricaVW,
	fabricaLocalizacion[80],
	fabricaConquistada,
	fabricaQuienConquisto[120],
	fabricaIDFaccion,
	fabricaTiempoConquista,
	Text3D:fabricaText3D,
	fabricaPickup,
	fabricaPickup2,
	fabricaMapIcon
};
new InfoFabrica[MAX_FABRICAS][fabricaInfo];

//cajeros fix (01/04/2021) by x1
enum cajeroInfo
{
	atmID,
	atmModelo,
	Float: atmPosX,
	Float: atmPosY,
	Float: atmPosZ,
	Float: atmRotX,
	Float: atmRotY,
	Float: atmRotZ,
	atmInterior,
	atmWorld,
	atmDestroy,
	atmTiempo,
	atmProceso,
	atmObject,
	Text3D: atmText3D,
};
new InfoCajero[MAX_CAJEROS][cajeroInfo];

forward CargarCajeros();
public CargarCajeros()
{
	new cargaditos = 0;
	//clean
	Loop(x, MAX_CAJEROS, 0)
	{
		InfoCajero[x][atmProceso] = 0;
	}
	//load
	Loop(tabla, cache_num_rows(), 0)
	{
		new id = tabla+1;
		reg_int(tabla, "ID", InfoCajero[id][atmID]);
		reg_int(tabla, "Modelo", InfoCajero[id][atmModelo]);
		reg_float(tabla, "Pos_X", InfoCajero[id][atmPosX]);
		reg_float(tabla, "Pos_Y", InfoCajero[id][atmPosY]);
		reg_float(tabla, "Pos_Z", InfoCajero[id][atmPosZ]);
		reg_float(tabla, "Rot_X", InfoCajero[id][atmRotX]);
		reg_float(tabla, "Rot_Y", InfoCajero[id][atmRotY]);
		reg_float(tabla, "Rot_Z", InfoCajero[id][atmRotZ]);
		reg_int(tabla, "Interior", InfoCajero[id][atmInterior]);
		reg_int(tabla, "VirtualWorld", InfoCajero[id][atmWorld]);
		reg_int(tabla, "Destroy", InfoCajero[id][atmDestroy]);
		reg_int(tabla, "Tiempo", InfoCajero[id][atmTiempo]);
		if (InfoCajero[id][atmID]) totalcajeros++;
		if (InfoCajero[id][atmPosX] != 0.0)
		{
			cargaditos++;
			Articulos_Cajero(id);
		}
	}
	printf("%d cajeros [SQL: %d] cargados correctamente.", cargaditos, totalcajeros-1);
	return 1;
}

ID_Cajero(playerid)
{
	Loop(id, totalcajeros, 1) if (InfoCajero[id][atmPosX] != 0.0)
	{
		if (IsPlayerInRangeOfPoint(playerid, 2.5, InfoCajero[id][atmPosX], InfoCajero[id][atmPosY], InfoCajero[id][atmPosZ]) && GetPlayerInterior(playerid) == InfoCajero[id][atmInterior] && GetPlayerVirtualWorld(playerid) == InfoCajero[id][atmWorld])
		{
			return id;
		}
	}
	return -1;
}

Articulos_Cajero(id)
{
	if (InfoCajero[id][atmObject] != INVALID_STREAMER_ID)
	{
		DestroyDynamicObject(InfoCajero[id][atmObject]);
		InfoCajero[id][atmObject] = INVALID_STREAMER_ID;
	}
	if (IsValidDynamic3DTextLabel(InfoCajero[id][atmText3D]))
	{
		DestroyDynamic3DTextLabel(InfoCajero[id][atmText3D]);
		InfoCajero[id][atmText3D] = Text3D:INVALID_3DTEXT_ID;
	}
	new string[550], name_zone2[50], id_zone;
	id_zone = GetZoneNameAtCoord(InfoCajero[id][atmPosX], InfoCajero[id][atmPosY], name_zone2);
	Loop(i, sizeof (NombreZona), 0)
	{
		if (id_zone == 1) continue;
		new str[50];
		strunpack(str, NombreZona[i][sz_Nombre]);
		if (!strcmp(str, name_zone2))
		{
			id_zone = i;
			break;
		}
	}
	format(string, sizeof string, "ATM (%d)\n{FFFFFF}Direccion: {1EB032}%s\n{FFFFFF}Presiona {FFFF00}'N'", id, name_zone2);
	InfoCajero[id][atmObject] = CreateDynamicObject(InfoCajero[id][atmModelo], InfoCajero[id][atmPosX], InfoCajero[id][atmPosY], InfoCajero[id][atmPosZ], InfoCajero[id][atmRotX], InfoCajero[id][atmRotY], InfoCajero[id][atmRotZ], InfoCajero[id][atmWorld], InfoCajero[id][atmInterior]);
	InfoCajero[id][atmText3D] = CreateDynamic3DTextLabel(string, 0x3F84B7FF, InfoCajero[id][atmPosX], InfoCajero[id][atmPosY], InfoCajero[id][atmPosZ] + 0.4, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, InfoCajero[id][atmWorld], InfoCajero[id][atmInterior]);
	return 1;
}

RecobrarCajero(id)
{
	InfoCajero[id][atmModelo] = 19324;
	InfoCajero[id][atmDestroy] = 0;
	InfoCajero[id][atmTiempo] = 0;
	Articulos_Cajero(id);
	guardar_int_mysql("cajeros", "Modelo", InfoCajero[id][atmID], InfoCajero[id][atmModelo]);
	guardar_int_mysql("cajeros", "Destroy", InfoCajero[id][atmID], InfoCajero[id][atmDestroy]);
	guardar_int_mysql("cajeros", "Tiempo", InfoCajero[id][atmID], InfoCajero[id][atmTiempo]);
	return 1;
}

//territorios fix (01/04/2021) by x1
enum territorioInfo
{
	tID,
	tConquistado,
	tDominador[128],
	tBandaID,
	Float: tLugarX,
	Float: tLugarY,
	Float: tLugarZ,
	Float: tLugarR,
	tTiempoConquista,
	//no saved
	tBajoConquista,
	tBajoDominador,
	tTiempoAtaque,
	Text3D: tLabel,
	Territorio_Area,
	tPickup,
	tGang,
};
new InfoTerritorio[MAX_TERRITORIOS][territorioInfo];

new BitArray: ValidGZ <MAX_TERRITORIOS>;

forward CargarTerritorios();
public CargarTerritorios()
{
	new cargaditos = 0;
	//clean
	Loop(e, MAX_TERRITORIOS, 0)
	{
		alm(InfoTerritorio[e][tDominador], "Nadie");
		InfoTerritorio[e][tBandaID] = -1;
		//no saved
		InfoTerritorio[e][tBajoDominador] = -1;
	}
	//load
	Loop(tabla, cache_num_rows(), 0)
	{
		new id = tabla+1;
		reg_int(tabla, "ID", InfoTerritorio[id][tID]);
		reg_int(tabla, "Conquistado", InfoTerritorio[id][tConquistado]);
		reg_string(tabla, "Dominador", InfoTerritorio[id][tDominador], 128);
		reg_int(tabla, "BandaID", InfoTerritorio[id][tBandaID]);
		reg_float(tabla, "LugarX", InfoTerritorio[id][tLugarX]);
		reg_float(tabla, "LugarY", InfoTerritorio[id][tLugarY]);
		reg_float(tabla, "LugarZ", InfoTerritorio[id][tLugarZ]);
		reg_float(tabla, "LugarR", InfoTerritorio[id][tLugarR]);
		if (InfoTerritorio[id][tID]) totalterritorios++;
		if (InfoTerritorio[id][tLugarX] != 0.0)
		{
			cargaditos++;
			Articulos_Territorio(id);
		}
	}
	printf("%d territorios [SQL: %d] cargados correctamente.", cargaditos, totalterritorios-1);
	return 1;
}

Articulos_Territorio(id)
{
	if (InfoTerritorio[id][tLugarX] == 0.0) return 1;
	if (IsValidDynamic3DTextLabel(InfoTerritorio[id][tLabel]))
	{
		DestroyDynamic3DTextLabel(InfoTerritorio[id][tLabel]);
		InfoTerritorio[id][tLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	if (IsValidGangZone(InfoTerritorio[id][tGang])) { GangZoneDestroy(InfoTerritorio[id][tGang]); }
	new gformat[1028];
	if (InfoTerritorio[id][tBajoConquista] == 1)

	{
		InfoTerritorio[id][tLabel] = CreateDynamic3DTextLabel(gformat, 0x1EB032FF, InfoTerritorio[id][tLugarX], InfoTerritorio[id][tLugarY], InfoTerritorio[id][tLugarZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	}
	else if (InfoTerritorio[id][tBajoConquista] == 0)
	{
		if (!InfoTerritorio[id][tConquistado])
		{
			InfoTerritorio[id][tGang] = GangZoneCreate(InfoTerritorio[id][tLugarX] - 60, InfoTerritorio[id][tLugarY] - 60, InfoTerritorio[id][tLugarX] + 60, InfoTerritorio[id][tLugarY] + 60);
			new r, g, b, a,		new_territory_color;
			HexToRGBA(1, r, g, b, a);
			new_territory_color = RGBAToHex(r, g, b, 135);
			GangZoneShowForAll(InfoTerritorio[id][tGang], new_territory_color);
		}
		else
		{
            InfoTerritorio[id][tGang] = GangZoneCreate(InfoTerritorio[id][tLugarX] - 60, InfoTerritorio[id][tLugarY] - 60, InfoTerritorio[id][tLugarX] + 60, InfoTerritorio[id][tLugarY] + 60);
			new r, g, b, a,		new_territory_color;
			HexToRGBA(RandomColors[InfoFamilia[InfoTerritorio[id][tBandaID]][fColor]], r, g, b, a);
			new_territory_color = RGBAToHex(r, g, b, 135);
			GangZoneShowForAll(InfoTerritorio[id][tGang], new_territory_color);
		}
	}
	InfoTerritorio[id][Territorio_Area] = CreateDynamicCube(InfoTerritorio[id][tLugarX] - 60, InfoTerritorio[id][tLugarY] - 60, InfoTerritorio[id][tLugarZ] - 60, InfoTerritorio[id][tLugarX] + 60, InfoTerritorio[id][tLugarY] + 60, InfoTerritorio[id][tLugarZ] + 60, 0, 0);
	return 1;
}

Territorio_ID(playerid)
{
	Loop(id, totalterritorios, 1) if (InfoTerritorio[id][tLugarX] != 0.0)
	{
		if (IsPlayerInRangeOfPoint(playerid, 60.0, InfoTerritorio[id][tLugarX], InfoTerritorio[id][tLugarY], InfoTerritorio[id][tLugarZ]) && GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
		{
			return id;
		}
	}
	return -1;
}

SetPlayerGangZones(index)
{
    for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	if(IsPlayerConnected(i))
	{
	    if (InfoTerritorio[index][tLugarX] != 0.0)
	    {
			if(InfoTerritorio[index][tBajoConquista] == 1)
			{
				new flash_color, r, g, b, a;
				HexToRGBA(InfoFamilia[ InfoTerritorio[index][tBandaID] ][fColor], r, g, b, a);
				flash_color = RGBAToHex(r, g, b, 135);
				GangZoneFlashForPlayer(i, InfoTerritorio[index][tGang], flash_color);
   	        }
			else GangZoneShowForPlayer(i, InfoTerritorio[index][tGang], InfoFamilia[InfoTerritorio[index][tBandaID]][fColor]);
			print("cargo esto");
		}
	}
	return 1;
}
stock IsPlayerInArea (playerid, Float: min_x, Float: min_y, Float: max_x, Float: max_y)
{
	new Float: x, Float: y, Float: z,
	Float: minx = (min_x < max_x) ? min_x : max_x,
	Float: maxx = (max_x > min_x) ? max_x : min_x,
	Float: miny = (min_y < max_y) ? min_y : max_y,
	Float: maxy = (max_y > min_y) ? max_y : min_y;
	GetPlayerPos(playerid, x, y, z);
	return ((minx <= x <= maxx) && (miny <= y <= maxy));
}

CountCrewPlayersInTerritory(crew_index, territory_index)
{
	new count;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnectedEx(i))
		{
			if(InfoJugador[i][jFamMiembro] == crew_index)
			{
				if (GetPVarInt(i, "EnCrack") == 0 && InfoJugador[i][jEncarcelado] == 0)
				{
					if(IsPlayerInDynamicArea(i, InfoTerritorio[territory_index][Territorio_Area]))
					{
						count ++;
					}
				}
			}
		}
	}
	return count;
}

stock GetPlayerTerritorio(playerid)
{
	Loop(i, totalterritorios, 1) if (IsValidGangZone(i))
	{
		if (IsPlayerInArea(playerid, InfoTerritorio[i][tLugarX] - 60, InfoTerritorio[i][tLugarY] - 60, InfoTerritorio[i][tLugarX] + 60, InfoTerritorio[i][tLugarY] + 60))
		{
			return i;
		}
	}
	return (-1);
}

stock PandillerosEnTerritorio(pandilla, id)
{
	new territorio, Cantidad;
	foreach(Player, i) if (IsPlayerConnectedEx(i)) if (InfoJugador[i][jFamMiembro] == pandilla)
	{
		territorio = GetPlayerTerritorio(i);
		if (territorio == id) Cantidad++;
		territorio = 0;
	}
	return Cantidad;
}


enum infoEstacion
{
    eID,
	eExists,
	Float:ePos[4],
	Float:eInterior[3],
	Text3D:eText3D,
	Text3D:eText3D2,
	ePickup,
	ePickup2,
	eMapIcon,
};
new InfoEstacion[MAX_ESTACION][infoEstacion];

new Float:EstacionamientoSpawn[16][4] =
{
	{2068.6687,2413.7263,10.5499,269.0573},
	{2086.2156,2401.8306,10.5495,270.5142},
	{2096.6482,2419.5535,10.5488,90.4650},
	{2103.8748,2401.8582,10.5501,269.5597},
	{2104.0391,2390.1528,10.5499,91.6201},
	{2068.5684,2390.0120,10.5571,88.4416},
	{2086.3447,2422.4956,10.5501,270.0795},
	{2103.6978,2393.0010,10.5533,91.0081},
	{2110.5449,2374.0159,10.5505,178.3064},
	{2104.0955,2390.1663,14.8303,270.4660},
	{2103.8762,2401.8201,14.8312,89.8246},
	{2086.2625,2407.7424,14.8308,89.4209},
	{2068.3401,2393.0366,14.8405,88.5177},
	{2068.4414,2413.7026,14.8316,90.3665},
	{2096.6553,2422.4407,14.8299,269.5536},
	{2103.7769,2410.7615,14.8291,270.2604}
};

Dar_Vida(playerid, Float: hp) // Fijar
{
    if (!IsPlayerConnectedEx(playerid)) return 1;
    if (GetPVarInt(playerid, "EnEvento") == 1) return 1;
	if (hp >= 99.0) { InfoJugador[playerid][jVida] = 100.0; }
	else InfoJugador[playerid][jVida] = hp;
	SetPlayerHealth(playerid, InfoJugador[playerid][jVida]);
	guardar_float_mysql("cuentas", "Vida", InfoJugador[playerid][jID], InfoJugador[playerid][jVida]);
	return 1;
}

Quitar_Vida(playerid, Float: sg1) // Quitar
{
    if (!IsPlayerConnectedEx(playerid)) return 1;
	if (GetPVarInt(playerid, "EnEvento") == 1) return 1;
	new Float: sg0 = InfoJugador[playerid][jVida];
	InfoJugador[playerid][jVida] = sg0+sg1;
	SetPlayerHealth(playerid, sg0+sg1);
	guardar_float_mysql("cuentas", "Vida", InfoJugador[playerid][jID], InfoJugador[playerid][jVida]);
	if (InfoJugador[playerid][jVida] <= 15.0)
	{
		SetPlayerHealth(playerid, 15.0);
		if (InfoJugador[playerid][jEncarcelado] != 0) return _CARCEL(playerid);
		if (GetPVarInt(playerid, "EnCrack") == 0)
		{
			if (ConquistandoMercado[playerid] >= 0)
			{
				MercadoData[ConquistandoMercado[playerid]][mTiempoConquista2] = 0;
				ConquistandoMercado[playerid] = INVALID_PLAYER_ID;
				new string[210];
				format(string, sizeof string, "(( [Familia] %s(%d) ha muerto, el mercado no pudo ser conquistado ))", NombreJugador(playerid), playerid);
				SendFamilyMessage(InfoJugador[playerid][jFamLider], 0x6BBFA0FF, string);
				foreach(new i: Player) if (IsPlayerConnectedEx(i))
				{
					PlayerTextDrawHide(i, ConquistaMercado[i]);
				}
			}
			SetPlayerDead(playerid);
		}
		return 1;
	}
	return 1;
}

Set_Player_Wasted(playerid, estrellas)
{
	new gWasted[32];
	switch (estrellas)
	{
		case 0:
		{
			format(gWasted, sizeof gWasted, "_");
			PlayerTextDrawHide(playerid, TD_Wasted[playerid]);
			activate_wasted[playerid] = 0;
		}
		case 1: format(gWasted, sizeof gWasted, "~w~+++++~y~+");
		case 2: format(gWasted, sizeof gWasted, "~w~++++~y~++");
		case 3: format(gWasted, sizeof gWasted, "~w~+++~y~+++");
		case 4: format(gWasted, sizeof gWasted, "~w~++~y~++++");
		case 5: format(gWasted, sizeof gWasted, "~w~+~y~+++++");
		case 6: format(gWasted, sizeof gWasted, "~y~++++++");
	}
	//muestra
	PlayerTextDrawSetString(playerid, TD_Wasted[playerid], gWasted);
	if (estrellas != 0 && activate_wasted[playerid] == 0)
	{
		PlayerTextDrawShow(playerid, TD_Wasted[playerid]);
		activate_wasted[playerid] = 1;
	}
}

SetPlayerDead(playerid)
{
	if (!IsPlayerConnectedEx(playerid)) return 1;
	if (GetPVarInt(playerid, "EnEvento") == 1) return 1;
	new killerid = asesino[playerid], string[256];
	if (killerid != -1)
	{
		if (IsPlayerConnectedEx(killerid))
		{
			// retoma nombre del que mato
			alm(QuienMato[playerid], NombreRJugador(killerid));
			// muerte en zona segura
			if (EnZonaMuelteQsyo(killerid) != 0 && !Es_Banda(killerid, 1, 2, 3))
			{
				if (!IsPlayerInAnyVehicle(killerid) && GetPlayerState(killerid) != PLAYER_STATE_DRIVER)
				if (InfoJugador[killerid][jEstrellas] < 3)
				{
					InfoJugador[killerid][jEstrellas] = 3;
					guardar_int_mysql("cuentas", "Estrellas", InfoJugador[killerid][jID], InfoJugador[killerid][jEstrellas]);
					InfoJugador[killerid][jMinEstrellas] = 120;
					guardar_int_mysql("cuentas", "MinEstrellas", InfoJugador[killerid][jID], InfoJugador[killerid][jMinEstrellas]);
					Set_Player_Wasted(killerid, InfoJugador[killerid][jEstrellas]);
					format(string, sizeof string, "CENTRAL: Un guardia vio a %s asesinar a otra persona, se necesitan refuerzos en %s.", NombreRJugador(killerid), GetPlayerNameZone(playerid));
					SendMessageFaction(C_COLORRADIO, string, 1, 2, 3);
					SendClientMessageEx(killerid, 0xccccccFF, "Info: {FFFFFF}Acabas de asesinar a una persona, un guardia te vio y alerto a la policia.");
					SendClientMessage(killerid, 0xccccccFF, "Info: {FFFFFF}Ya no tienes forma de escapar, estas siendo buscado por toda la policia.");
				}
			}
		}
		if (debugDead[playerid] == 0)
		{
			foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jAdmin] != 0)
			{
				SendDeathMessageToPlayer(playerid2, killerid, playerid, _arma[playerid]);
			}
			debugDead[playerid] = 1;
		}
		else { debugDead[playerid] = 0; }
	}
	if (IsPlayerInAnyVehicle(playerid))
	{
		RemovePlayerFromVehicle(playerid);
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, Z+2);
	}
	if ( _sanCall == playerid )
	{
		_MensajeSAN(0x00DC3AFF, "[SAN] Conexion telefonica finalizada.");
		_sanCall = -1;
	}
	HaciendoPressBanca[playerid] = 0; RepeticionesPressBanca[playerid] = 0;
	EnLlamada[playerid] = 0; ToqueLlamada[playerid] = 0;
	KillTimer(ToqueLlamadaTimer[playerid]);
	if (PersonaEnLlamada[playerid] != -1)KillTimer(ToqueLlamadaTimer[PersonaEnLlamada[playerid]]);
	if (EnLlamada[playerid] == 3)
	{
		_Mensaje(playerid, 2, "0", "Coste de la llamada: 1$");
		InfoJugador[playerid][jSaldo] -= 1;
		guardar_int_mysql("cuentas", "Saldo", InfoJugador[playerid][jID], InfoJugador[playerid][jSaldo]);
	}
	if (PersonaEnLlamada[playerid] != -1)
	{
		if (EnLlamada[PersonaEnLlamada[playerid]] == 3)
		{
			_Mensaje(PersonaEnLlamada[playerid], 2, "0", "Coste de la llamada: 1$");
			InfoJugador[PersonaEnLlamada[playerid]][jSaldo] -= 1;
			guardar_int_mysql("cuentas", "Saldo", InfoJugador[PersonaEnLlamada[playerid]][jID], InfoJugador[PersonaEnLlamada[playerid]][jSaldo]);
		}
	}
	if (PersonaEnLlamada[playerid] != -1)_Mensaje(playerid, 2, "0", "Se ha cortado la linea...");
	for(new i=0; i<MAX_PLAYERS; i++) { if(PersonaEnLlamada[i] == playerid){_Mensaje(i, 2, "0","Se ha cortado la linea..."); EnLlamada[i] = 0; PersonaEnLlamada[i] = -1; break;} }
	PersonaEnLlamada[playerid] = -1;
	if (JugadorUsandoAnimacion[playerid] == 1) { JugadorUsandoAnimacion[playerid] = 0; JugadorSentado[playerid] = 0; }
	SetPVarInt(playerid, "EnCrack", 1);
	InfoJugador[playerid][jVida] = 50.0; guardar_float_mysql("cuentas", "Vida", InfoJugador[playerid][jID], InfoJugador[playerid][jVida]);
	InfoJugador[playerid][jMuerto] = 1; guardar_int_mysql("cuentas", "Muerto", InfoJugador[playerid][jID], InfoJugador[playerid][jMuerto]);
	new Float: X, Float: Y, Float: Z;
	GetPlayerPos(playerid, X, Y, Z);
	if (GetPVarInt(playerid, "desbug_muerte") == 1)
	{
		X = PosSpawnBug[playerid][0];
		Y = PosSpawnBug[playerid][1];
		Z = PosSpawnBug[playerid][2];
 }
	DeletePVar(playerid, "desbug_muerte");
	if (IsValidDynamic3DTextLabel(InfoJugador[playerid][jNameTag]))
	{
		DestroyDynamic3DTextLabel(InfoJugador[playerid][jNameTag]);
		InfoJugador[playerid][jNameTag] = Text3D:INVALID_3DTEXT_ID;
	}
	InfoJugador[playerid][pConEstado] = 0, guardar_int_mysql("cuentas", "ConEstado", InfoJugador[playerid][jID], 0);
	if (InfoJugador[playerid][jEstrellas] != 0 && OnFaction(1) != 0)
	{
		InfoJugador[playerid][jAbatido] = 1;
		guardar_int_mysql("cuentas", "Abatido", InfoJugador[playerid][jID], InfoJugador[playerid][jAbatido]);
		ApplyAnimation(playerid, "SWEET", "sweet_injuredloop", 4.0, 1, 0, 0, 1, 0, 1);
		SendClientMessage(playerid, 0x00FF00FF, "* Estas siendo buscado por la policia, por lo tanto no puedes ir al hospital.");
		MensajeFaccion(1, 0x00CC00FF, "*** Ha caido un sospechoso, revisa /heridos en el computador.");
	}
	else
	{
		ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
		timer_muerte[playerid] = 200;
		SendClientMessage(playerid, 0x00FF00FF, "* Espera un paramedico o adelanta tu muerte usando /aceptarmuerte por $15.000.");
	}
	return 1;
}

Dar_Chaleco(playerid, Float: armour) // Fijar
{
	if (armour >= 99.0) InfoJugador[playerid][jChaleco] = 100.0;
	else InfoJugador[playerid][jChaleco] = armour;
	SetPlayerArmour(playerid, InfoJugador[playerid][jChaleco]);
	guardar_float_mysql("cuentas", "Chaleco", InfoJugador[playerid][jID], InfoJugador[playerid][jChaleco]);
	return 1;
}

stock ShowInfoForPlayer(playerid, text[], time)
{
    KillTimer(InfoTimer[playerid]);
    PlayerTextDrawHide(playerid, InfoText[playerid]);
    PlayerTextDrawSetString(playerid, InfoText[playerid], text);
	PlayerTextDrawShow(playerid, InfoText[playerid]);
    InfoTextShowing[playerid] = 1;
	InfoTimer[playerid] = SetTimerEx("HideInfoForPlayer", time, false, "i", playerid);
	return 1;
}
funcion HideInfoForPlayer(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;
    PlayerTextDrawHide(playerid, InfoText[playerid]);
    InfoTextShowing[playerid] = 1;
    return 1;
}

// variables de 'empresas.sql' desde 01-05-2023 por x1.
enum empresaInfo
{
	eID,                                // ID en base de datos
	ePropietario[MAX_PLAYER_NAME],      // Propietario
	eTipo,                              // Tipo o ID interior
	eVenta,                             // Venta
	eSeguro,                            // Seguro
	Float: eEntradaX,                   // Entrada X
	Float: eEntradaY,                   // Entrada Y
	Float: eEntradaZ,                   // Entrada Z
	Float: eEntradaR,                   // Entrada R
	eEntradaInt,                        // Entrada Int
	eEntradaVW,                         // Entrada VW
	Float: eSalidaX,                    // Salida X
	Float: eSalidaY,                    // Salida Y
	Float: eSalidaZ,                    // Salida Z
	Float: eSalidaR,                    // Salida R
	eSalidaInt,                         // Salida Int
	eSalidaVW,                          // Salida VW
	ePrecio,                            // Precio
	eMoneda,                            // Tipo de compra / moneda
	eEmpresaDinero,                        // Dinero empresa
	eArmario[15],                       // Armario
	eArmarioCantidad[15],               // Armario cantidad
	eCompartida1[MAX_PLAYER_NAME],      // Llave compartida 1
	eCompartida2[MAX_PLAYER_NAME],      // Llave compartida 2
	eCompartida3[MAX_PLAYER_NAME],      // Llave compartida 3
	eTiempoDisponible,                  // Tiempo en liberarse
	eDestroy,
	// no guardables
	Text3D: eEntradaLabel,              // Entrada label
	eEntradaPickup,                     // Entrada pickup
	Text3D: eSalidaLabel,               // Salida label
	eSalidaPickup,                      // Salida pickup                      // Salida pickup
	// muebles por convertir
	cObjModel[MAX_MUEBLES_C],
	Float: cObjPosX[MAX_MUEBLES_C],
	Float: cObjPosY[MAX_MUEBLES_C],
	Float: cObjPosZ[MAX_MUEBLES_C],
	Float: cObjRotX[MAX_MUEBLES_C],
	Float: cObjRotY[MAX_MUEBLES_C],
	Float: cObjRotZ[MAX_MUEBLES_C],
	//
	eProceso,
};
new InfoEmpresa[MAX_EMPRESAS][empresaInfo];

/*EnEmpresa(playerid)
{
	Loop(id, totalempresas, 1) if (InfoEmpresa[id][eTipo] != 0)
	{
		if (InfoEmpresa[id][eSalidaInt] == InfoJugador[playerid][jInterior] && InfoEmpresa[id][eSalidaVW] == InfoJugador[playerid][jVirtualWorld])
		{
			return id;
		}
	}
	return -1;
}*/

CountEmpresas(playerid)
{
	new count = 0;
	Loop(id, totalempresas, 1) if (InfoEmpresa[id][eVenta] != 0 && InfoEmpresa[id][eTipo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoEmpresa[id][ePropietario], true) == 0)
	{
		count++;
	}
	return count;
}

/*EnEntradaEmpresa(playerid, id)
{
	if (_enPos(playerid, 2.0, InfoEmpresa[id][eEntradaX], InfoEmpresa[id][eEntradaY], InfoEmpresa[id][eEntradaZ]) && InfoEmpresa[id][eEntradaInt] == GetPlayerInterior(playerid) && InfoEmpresa[id][eEntradaVW] == GetPlayerVirtualWorld(playerid)) { return 1; }
	return 0;
}

PermisosEmpresa(playerid, id)
{
	if (InfoEmpresa[id][eVenta] != 0 && InfoEmpresa[id][eTipo] != 0)
	{
		if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoEmpresa[id][ePropietario], true) == 0)
		{
			return 1;
		}
		if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoEmpresa[id][eCompartida1], true) == 0)
		{
			return 1;
		}
		if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoEmpresa[id][eCompartida2], true) == 0)
		{
			return 1;
		}
		if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoEmpresa[id][eCompartida3], true) == 0)
		{
			return 1;
		}
	}
	return 0;
}
*/
LlavesEmpresa(playerid, id)
{
	if (InfoEmpresa[id][eVenta] != 0 && InfoEmpresa[id][eTipo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoEmpresa[id][ePropietario], true) == 0)
	{
		return 1;
	}
	return 0;
}

forward CargarEmpresas();
public CargarEmpresas()
{
	new cargaditos = 0;
	Loop(e, MAX_EMPRESAS, 0)
	{
		alm(InfoEmpresa[e][ePropietario], "none");
		alm(InfoEmpresa[e][eCompartida1], "none");
		alm(InfoEmpresa[e][eCompartida2], "none");
		alm(InfoEmpresa[e][eCompartida3], "none");
		InfoEmpresa[e][eTiempoDisponible] = -1;
	}
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoEmpresa[id][eID]);
		reg_string(tabla, "Propietario", InfoEmpresa[id][ePropietario], MAX_PLAYER_NAME);
		reg_int(tabla, "Tipo", InfoEmpresa[id][eTipo]);
		reg_int(tabla, "Venta", InfoEmpresa[id][eVenta]);
		reg_int(tabla, "Seguro", InfoEmpresa[id][eSeguro]);
		reg_float(tabla, "EntradaX", InfoEmpresa[id][eEntradaX]);
		reg_float(tabla, "EntradaY", InfoEmpresa[id][eEntradaY]);
		reg_float(tabla, "EntradaZ", InfoEmpresa[id][eEntradaZ]);
		reg_float(tabla, "EntradaR", InfoEmpresa[id][eEntradaR]);
		reg_int(tabla, "EntradaInt", InfoEmpresa[id][eEntradaInt]);
		reg_int(tabla, "EntradaVW", InfoEmpresa[id][eEntradaVW]);
		reg_float(tabla, "SalidaX", InfoEmpresa[id][eSalidaX]);
		reg_float(tabla, "SalidaY", InfoEmpresa[id][eSalidaY]);
		reg_float(tabla, "SalidaZ", InfoEmpresa[id][eSalidaZ]);
		reg_float(tabla, "SalidaR", InfoEmpresa[id][eSalidaR]);
		reg_int(tabla, "SalidaInt", InfoEmpresa[id][eSalidaInt]);
		reg_int(tabla, "SalidaVW", InfoEmpresa[id][eSalidaVW]);
		reg_int(tabla, "Precio", InfoEmpresa[id][ePrecio]);
		reg_int(tabla, "Moneda", InfoEmpresa[id][eMoneda]);
		reg_int(tabla, "EmpresaDinero", InfoEmpresa[id][eEmpresaDinero]);
		reg_int(tabla, "Armario1", InfoEmpresa[id][eArmario][0]);
		reg_int(tabla, "ArmarioCantidad1", InfoEmpresa[id][eArmarioCantidad][0]);
		reg_int(tabla, "Armario2", InfoEmpresa[id][eArmario][1]);
		reg_int(tabla, "ArmarioCantidad2", InfoEmpresa[id][eArmarioCantidad][1]);
		reg_int(tabla, "Armario3", InfoEmpresa[id][eArmario][2]);
		reg_int(tabla, "ArmarioCantidad3", InfoEmpresa[id][eArmarioCantidad][2]);
		reg_int(tabla, "Armario4", InfoEmpresa[id][eArmario][3]);
		reg_int(tabla, "ArmarioCantidad4", InfoEmpresa[id][eArmarioCantidad][3]);
		reg_int(tabla, "Armario5", InfoEmpresa[id][eArmario][4]);
		reg_int(tabla, "ArmarioCantidad5", InfoEmpresa[id][eArmarioCantidad][4]);
		reg_int(tabla, "Armario6", InfoEmpresa[id][eArmario][5]);
		reg_int(tabla, "ArmarioCantidad6", InfoEmpresa[id][eArmarioCantidad][5]);
		reg_int(tabla, "Armario7", InfoEmpresa[id][eArmario][6]);
		reg_int(tabla, "ArmarioCantidad7", InfoEmpresa[id][eArmarioCantidad][6]);
		reg_int(tabla, "Armario8", InfoEmpresa[id][eArmario][7]);
		reg_int(tabla, "ArmarioCantidad8", InfoEmpresa[id][eArmarioCantidad][7]);
		reg_int(tabla, "Armario9", InfoEmpresa[id][eArmario][8]);
		reg_int(tabla, "ArmarioCantidad9", InfoEmpresa[id][eArmarioCantidad][8]);
		reg_int(tabla, "Armario10", InfoEmpresa[id][eArmario][9]);
		reg_int(tabla, "ArmarioCantidad10", InfoEmpresa[id][eArmarioCantidad][9]);
		reg_int(tabla, "Armario11", InfoEmpresa[id][eArmario][10]);
		reg_int(tabla, "ArmarioCantidad11", InfoEmpresa[id][eArmarioCantidad][10]);
		reg_int(tabla, "Armario12", InfoEmpresa[id][eArmario][11]);
		reg_int(tabla, "ArmarioCantidad12", InfoEmpresa[id][eArmarioCantidad][11]);
		reg_int(tabla, "Armario13", InfoEmpresa[id][eArmario][12]);
		reg_int(tabla, "ArmarioCantidad13", InfoEmpresa[id][eArmarioCantidad][12]);
		reg_int(tabla, "Armario14", InfoEmpresa[id][eArmario][13]);
		reg_int(tabla, "ArmarioCantidad14", InfoEmpresa[id][eArmarioCantidad][13]);
		reg_int(tabla, "Armario15", InfoEmpresa[id][eArmario][14]);
		reg_int(tabla, "ArmarioCantidad15", InfoEmpresa[id][eArmarioCantidad][14]);
		reg_string(tabla, "Compartida1", InfoEmpresa[id][eCompartida1], MAX_PLAYER_NAME);
		reg_string(tabla, "Compartida2", InfoEmpresa[id][eCompartida2], MAX_PLAYER_NAME);
		reg_string(tabla, "Compartida3", InfoEmpresa[id][eCompartida3], MAX_PLAYER_NAME);
		reg_int(tabla, "TiempoDisponible", InfoEmpresa[id][eTiempoDisponible]);
		reg_int(tabla, "Destroy", InfoEmpresa[id][eDestroy]);
		if (InfoEmpresa[id][eID]) totalempresas++;
		//funcion
		if (InfoEmpresa[id][eTipo] != 0)
		{
			LabelPickup_empresa(id, 1);
			cargaditos++;
		}
		else noexitempresa(id);
	}
	printf("%d empresas dinamicas [SQL: %d] cargadas correctamente.", cargaditos, totalempresas-1);
	return 1;
}

noexitempresa(id)
{
	if (IsValidDynamic3DTextLabel(InfoEmpresa[id][eEntradaLabel]))
	{
		DestroyDynamic3DTextLabel(InfoEmpresa[id][eEntradaLabel]);
		InfoEmpresa[id][eEntradaLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	if (IsValidDynamic3DTextLabel(InfoEmpresa[id][eSalidaLabel]))
	{
		DestroyDynamic3DTextLabel(InfoEmpresa[id][eSalidaLabel]);
		InfoEmpresa[id][eSalidaLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	InfoEmpresa[id][eEntradaLabel] = CreateDynamic3DTextLabel("Empresa", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
	InfoEmpresa[id][eSalidaLabel] = CreateDynamic3DTextLabel("Empresa", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
}

LabelPickup_empresa(id, type)
{
	//info
	new location[MAX_ZONE_NAME], info_entrada[470], info_salida[470], exdireccion[215] = "", precio_ex[128], model_pickup = 19524;
	//precio
	if (InfoEmpresa[id][eMoneda] != 0) format(precio_ex, sizeof precio_ex, "{F1D659}%d coins", InfoEmpresa[id][ePrecio]);
	else format(precio_ex, sizeof precio_ex, "{00cc00}$%s", diner_coma(InfoEmpresa[id][ePrecio]));
	//localizacion
	Get2DZone(location, MAX_ZONE_NAME, InfoEmpresa[id][eEntradaX], InfoEmpresa[id][eEntradaY], InfoEmpresa[id][eEntradaZ]);
	if (InfoEmpresa[id][eEntradaVW] == 0 && InfoEmpresa[id][eEntradaInt] == 0) format(exdireccion, sizeof exdireccion, "Localizacion: %s", location);
	//entrada label
	if (InfoEmpresa[id][eVenta] != 0) format(info_entrada, sizeof info_entrada, "(Empresa %d)\nPropietario: %s\nUbicacion: {FFFFFF}%s", id, InfoEmpresa[id][ePropietario], exdireccion), model_pickup = 19524;
	else format(info_entrada, sizeof info_entrada, "(Empresa %d) ¡En Venta!\nPrecio: %s\n{82BCEC}Ubicacion: {FFFFFF}%s", id, precio_ex, exdireccion);
	//salida label
	format(info_salida, sizeof info_salida, "Salida\n(Empresa %d)", id);
	//
	if (type == 1) // create
	{
		//delete error
		if (IsValidDynamicPickup(InfoEmpresa[id][eEntradaPickup])) { DestroyDynamicPickup(InfoEmpresa[id][eEntradaPickup]); }
		if (IsValidDynamicPickup(InfoEmpresa[id][eSalidaPickup])) { DestroyDynamicPickup(InfoEmpresa[id][eSalidaPickup]); }
		if (IsValidDynamic3DTextLabel(InfoEmpresa[id][eEntradaLabel]))
		{
			DestroyDynamic3DTextLabel(InfoEmpresa[id][eEntradaLabel]);
			InfoEmpresa[id][eEntradaLabel] = Text3D:INVALID_3DTEXT_ID;
		}
		if (IsValidDynamic3DTextLabel(InfoEmpresa[id][eSalidaLabel]))
		{
			DestroyDynamic3DTextLabel(InfoEmpresa[id][eSalidaLabel]);
			InfoEmpresa[id][eSalidaLabel] = Text3D:INVALID_3DTEXT_ID;
		}
		InfoEmpresa[id][eEntradaLabel] = CreateDynamic3DTextLabel(info_entrada, 0x82BCECFF, InfoEmpresa[id][eEntradaX], InfoEmpresa[id][eEntradaY], InfoEmpresa[id][eEntradaZ]+0.35, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoEmpresa[id][eEntradaVW], InfoEmpresa[id][eEntradaInt], -1);
		InfoEmpresa[id][eSalidaLabel] = CreateDynamic3DTextLabel(info_salida, 0xccccccFF, InfoEmpresa[id][eSalidaX], InfoEmpresa[id][eSalidaY], InfoEmpresa[id][eSalidaZ]+0.35, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoEmpresa[id][eSalidaVW], InfoEmpresa[id][eSalidaInt], -1);
		InfoEmpresa[id][eEntradaPickup] = CreateDynamicPickup(model_pickup, 1, InfoEmpresa[id][eEntradaX], InfoEmpresa[id][eEntradaY], InfoEmpresa[id][eEntradaZ], InfoEmpresa[id][eEntradaVW], InfoEmpresa[id][eEntradaInt]);
		InfoEmpresa[id][eSalidaPickup] = CreateDynamicPickup(model_pickup, 1, InfoEmpresa[id][eEntradaX], InfoEmpresa[id][eEntradaY], InfoEmpresa[id][eEntradaZ], InfoEmpresa[id][eSalidaVW], InfoEmpresa[id][eSalidaInt]);
	}
	else if (type == 2) // update
	{
		//3d label
		UpdateDynamic3DTextLabelText(InfoEmpresa[id][eEntradaLabel], -1, info_entrada);
		UpdateDynamic3DTextLabelText(InfoEmpresa[id][eSalidaLabel], -1, info_salida);
	}
}


//<=================================> sistema de peajes
enum ppInfo
{
	objectid_peaje,
	objectmodel,
	Float:PosXTrue,
	Float:PosYTrue,
	Float:PosZTrue,
	Float:PosRotXTrue,
	Float:PosRotYTrue,
	Float:PosRotZTrue,
	Float:PosXFalse,
	Float:PosYFalse,
	Float:PosZFalse,
	Float:PosRotXFalse,
	Float:PosRotYFalse,
	Float:PosRotZFalse,
	Float:PosCommandX,
	Float:PosCommandY,
	Float:PosCommandZ,
	typePeajeOrParqueo,
	AnimObject,
};
new MAX_PEAJE, Peajes[MAX_PEAJES_COUNT][ppInfo];

// variables de 'puertas.sql' desde 04-12-2020
enum puertaInfo
{
	pID,					// ID en base de datos
	pNombre[128],           // Nombre
	Float: pEntradaX,       // Entrada X
	Float: pEntradaY,       // Entrada Y
	Float: pEntradaZ,       // Entrada Z
	Float: pEntradaR,       // Entrada R
	pEntradaInt,            // Entrada Int
	pEntradaVW,             // Entrada VW
	Float: pSalidaX,        // Salida X
	Float: pSalidaY,        // Salida Y
	Float: pSalidaZ,        // Salida Z
	Float: pSalidaR,        // Salida R
	pSalidaInt,             // Salida Int
	pSalidaVW,              // Salida VW
	pVIP,                   // Nivel VIP
	pYT,					// Permisos YouTuber
	pFaccion,               // ID Faccion
	pFamilia,               // ID Familia
	pTrabajo,               // ID Trabajo
	// no guardables
	pEntradaPickup,         // Entrada Pickup
	Text3D: pEntradaLabel,  // Entrada Label
	pSalidaPickup,          // Salida Pickup
	Text3D: pSalidaLabel,   // Salida Label
};
new	InfoPuerta[MAX_PUERTAS][puertaInfo];

forward CargarPuertas();
public CargarPuertas()
{
	new cargaditos = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoPuerta[id][pID]);
		reg_string(tabla, "Nombre", InfoPuerta[id][pNombre], 128);
		reg_float(tabla, "EntradaX", InfoPuerta[id][pEntradaX]);
		reg_float(tabla, "EntradaY", InfoPuerta[id][pEntradaY]);
		reg_float(tabla, "EntradaZ", InfoPuerta[id][pEntradaZ]);
		reg_float(tabla, "EntradaR", InfoPuerta[id][pEntradaR]);
		reg_int(tabla, "EntradaInt", InfoPuerta[id][pEntradaInt]);
		reg_int(tabla, "EntradaVW", InfoPuerta[id][pEntradaVW]);
		reg_float(tabla, "SalidaX", InfoPuerta[id][pSalidaX]);
		reg_float(tabla, "SalidaY", InfoPuerta[id][pSalidaY]);
		reg_float(tabla, "SalidaZ", InfoPuerta[id][pSalidaZ]);
		reg_float(tabla, "SalidaR", InfoPuerta[id][pSalidaR]);
		reg_int(tabla, "SalidaInt", InfoPuerta[id][pSalidaInt]);
		reg_int(tabla, "SalidaVW", InfoPuerta[id][pSalidaVW]);
		reg_int(tabla, "VIP", InfoPuerta[id][pVIP]);
		reg_int(tabla, "YT", InfoPuerta[id][pYT]);
		reg_int(tabla, "Faccion", InfoPuerta[id][pFaccion]);
		reg_int(tabla, "Familia", InfoPuerta[id][pFamilia]);
		reg_int(tabla, "Trabajo", InfoPuerta[id][pTrabajo]);
		if (InfoPuerta[id][pID]) totalpuertas++;
		//funcion
		if (InfoPuerta[id][pEntradaX] != 0.0)
		{
			cargaditos++;
			CreateDynamicDoor(id);
		} else noexitDoor(id);
	}
	printf("%d puertas dinamicas [SQL: %d] cargadas correctamente.", cargaditos, totalpuertas-1);
	return 1;
}

CreateDynamicDoor(id)
{
	if (IsValidDynamic3DTextLabel(InfoPuerta[id][pEntradaLabel]))
	{
		DestroyDynamic3DTextLabel(InfoPuerta[id][pEntradaLabel]);
		InfoPuerta[id][pEntradaLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	if (IsValidDynamic3DTextLabel(InfoPuerta[id][pSalidaLabel]))
	{
		DestroyDynamic3DTextLabel(InfoPuerta[id][pSalidaLabel]);
		InfoPuerta[id][pSalidaLabel] = Text3D:INVALID_3DTEXT_ID;
	}
    DestroyDynamicPickup(InfoPuerta[id][pEntradaPickup]);
    DestroyDynamicPickup(InfoPuerta[id][pSalidaPickup]);
    new string[256];
    format(string, sizeof string, "%s (ID: %d)\n\n{CC9933}Acercate para entrar", InfoPuerta[id][pNombre], id);
    InfoPuerta[id][pEntradaLabel] = CreateDynamic3DTextLabel(string, 0x94BBD4FF, InfoPuerta[id][pEntradaX], InfoPuerta[id][pEntradaY], InfoPuerta[id][pEntradaZ] + 0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoPuerta[id][pEntradaVW], InfoPuerta[id][pEntradaInt], -1);
    format(string, sizeof string, "%s (ID: %d)\n\n{CC9933}Acercate Para Salir", InfoPuerta[id][pNombre], id);
    InfoPuerta[id][pSalidaLabel] = CreateDynamic3DTextLabel(string, 0x94BBD4FF, InfoPuerta[id][pSalidaX], InfoPuerta[id][pSalidaY], InfoPuerta[id][pSalidaZ] + 0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoPuerta[id][pSalidaVW], InfoPuerta[id][pSalidaInt], -1);
    InfoPuerta[id][pEntradaPickup] = CreateDynamicPickup(19197, 1, InfoPuerta[id][pEntradaX], InfoPuerta[id][pEntradaY], InfoPuerta[id][pEntradaZ], InfoPuerta[id][pEntradaVW]);
    InfoPuerta[id][pSalidaPickup] = CreateDynamicPickup(19197, 1, InfoPuerta[id][pSalidaX], InfoPuerta[id][pSalidaY], InfoPuerta[id][pSalidaZ], InfoPuerta[id][pSalidaVW]);
}

noexitDoor(id)
{
	DestroyDynamicPickup(InfoPuerta[id][pEntradaPickup]);
	DestroyDynamicPickup(InfoPuerta[id][pSalidaPickup]);
	if (IsValidDynamic3DTextLabel(InfoPuerta[id][pEntradaLabel]))
	{
		DestroyDynamic3DTextLabel(InfoPuerta[id][pEntradaLabel]);
		InfoPuerta[id][pEntradaLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	if (IsValidDynamic3DTextLabel(InfoPuerta[id][pSalidaLabel]))
	{
		DestroyDynamic3DTextLabel(InfoPuerta[id][pSalidaLabel]);
		InfoPuerta[id][pSalidaLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	InfoPuerta[id][pEntradaLabel] = CreateDynamic3DTextLabel("puelta", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
	InfoPuerta[id][pSalidaLabel] = CreateDynamic3DTextLabel("puelta", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
	InfoPuerta[id][pEntradaPickup] = CreateDynamicPickup(1239, 1, -2190.7974, 165.9186, 58.2604, id, id);
	InfoPuerta[id][pSalidaPickup] = CreateDynamicPickup(1239, 1, -2190.7974, 165.9186, 58.2604, id, id);
}

// variables de 'casas.sql' desde 02-11-2020
enum casaInfo
{
	cID,                                // ID en base de datos
	cPropietario[MAX_PLAYER_NAME],      // Propietario
	cTipo,                              // Tipo o ID interior
	cVenta,                             // Venta
	cSeguro,                            // Seguro
	Float: cEntradaX,                   // Entrada X
	Float: cEntradaY,                   // Entrada Y
	Float: cEntradaZ,                   // Entrada Z
	Float: cEntradaR,                   // Entrada R
	cEntradaInt,                        // Entrada Int
	cEntradaVW,                         // Entrada VW
	Float: cSalidaX,                    // Salida X
	Float: cSalidaY,                    // Salida Y
	Float: cSalidaZ,                    // Salida Z
	Float: cSalidaR,                    // Salida R
	cSalidaInt,                         // Salida Int
	cSalidaVW,                          // Salida VW
	cPrecio,                            // Precio
	cMoneda,                            // Tipo de compra / moneda
	cCasaDinero,                        // Dinero casa
	cRentable,                          // Rentable
	cRentaPrecio,                       // Precio renta
	cArmario[15],                       // Armario
	cArmarioCantidad[15],               // Armario cantidad
	cCompartida1[MAX_PLAYER_NAME],      // Llave compartida 1
	cCompartida2[MAX_PLAYER_NAME],      // Llave compartida 2
	cCompartida3[MAX_PLAYER_NAME],      // Llave compartida 3
	cTiempoDisponible,                  // Tiempo en liberarse
	cDestroy,
	// no guardables
	Text3D: cEntradaLabel,              // Entrada label
	cEntradaPickup,                     // Entrada pickup
	Text3D: cSalidaLabel,               // Salida label
	cSalidaPickup,                      // Salida pickup                      // Salida pickup
	// muebles por convertir
	cObjModel[MAX_MUEBLES_C],
	Float: cObjPosX[MAX_MUEBLES_C],
	Float: cObjPosY[MAX_MUEBLES_C],
	Float: cObjPosZ[MAX_MUEBLES_C],
	Float: cObjRotX[MAX_MUEBLES_C],
	Float: cObjRotY[MAX_MUEBLES_C],
	Float: cObjRotZ[MAX_MUEBLES_C],
	//
	cProceso,
};
new InfoCasa[MAX_CASAS][casaInfo];

EnCasa(playerid)
{
	Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0)
	{
		if (InfoCasa[id][cSalidaInt] == InfoJugador[playerid][jInterior] && InfoCasa[id][cSalidaVW] == InfoJugador[playerid][jVirtualWorld])
		{
			return id;
		}
	}
	return -1;
}

CountCasas(playerid)
{
	new count = 0;
	Loop(id, totalcasas, 1) if (InfoCasa[id][cVenta] != 0 && InfoCasa[id][cTipo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoCasa[id][cPropietario], true) == 0)
	{
		count++;
	}
	return count;
}

CountReferidos()
{
	new count = 0;
	Loop(id, totalreferidos, 1)
	{
		count++;
	}
	return count;
}

EnEntradaCasa(playerid, id)
{
	if (_enPos(playerid, 2.0, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ]) && InfoCasa[id][cEntradaInt] == GetPlayerInterior(playerid) && InfoCasa[id][cEntradaVW] == GetPlayerVirtualWorld(playerid)) { return 1; }
	return 0;
}

PermisosCasa(playerid, id)
{
	if (InfoCasa[id][cVenta] != 0 && InfoCasa[id][cTipo] != 0)
	{
		if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoCasa[id][cPropietario], true) == 0)
		{
			return 1;
		}
		if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoCasa[id][cCompartida1], true) == 0)
		{
			return 1;
		}
		if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoCasa[id][cCompartida2], true) == 0)
		{
			return 1;
		}
		if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoCasa[id][cCompartida3], true) == 0)
		{
			return 1;
		}
	}
	return 0;
}

LlavesCasa(playerid, id)
{
	if (InfoCasa[id][cVenta] != 0 && InfoCasa[id][cTipo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoCasa[id][cPropietario], true) == 0)
	{
		return 1;
	}
	return 0;
}

forward CargarCasas();
public CargarCasas()
{
	new cargaditos = 0;
	Loop(e, MAX_CASAS, 0)
	{
		alm(InfoCasa[e][cPropietario], "none");
		alm(InfoCasa[e][cCompartida1], "none");
		alm(InfoCasa[e][cCompartida2], "none");
		alm(InfoCasa[e][cCompartida3], "none");
		InfoCasa[e][cTiempoDisponible] = -1;
	}
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoCasa[id][cID]);
		reg_string(tabla, "Propietario", InfoCasa[id][cPropietario], MAX_PLAYER_NAME);
		reg_int(tabla, "Tipo", InfoCasa[id][cTipo]);
		reg_int(tabla, "Venta", InfoCasa[id][cVenta]);
		reg_int(tabla, "Seguro", InfoCasa[id][cSeguro]);
		reg_float(tabla, "EntradaX", InfoCasa[id][cEntradaX]);
		reg_float(tabla, "EntradaY", InfoCasa[id][cEntradaY]);
		reg_float(tabla, "EntradaZ", InfoCasa[id][cEntradaZ]);
		reg_float(tabla, "EntradaR", InfoCasa[id][cEntradaR]);
		reg_int(tabla, "EntradaInt", InfoCasa[id][cEntradaInt]);
		reg_int(tabla, "EntradaVW", InfoCasa[id][cEntradaVW]);
		reg_float(tabla, "SalidaX", InfoCasa[id][cSalidaX]);
		reg_float(tabla, "SalidaY", InfoCasa[id][cSalidaY]);
		reg_float(tabla, "SalidaZ", InfoCasa[id][cSalidaZ]);
		reg_float(tabla, "SalidaR", InfoCasa[id][cSalidaR]);
		reg_int(tabla, "SalidaInt", InfoCasa[id][cSalidaInt]);
		reg_int(tabla, "SalidaVW", InfoCasa[id][cSalidaVW]);
		reg_int(tabla, "Precio", InfoCasa[id][cPrecio]);
		reg_int(tabla, "Moneda", InfoCasa[id][cMoneda]);
		reg_int(tabla, "CasaDinero", InfoCasa[id][cCasaDinero]);
		reg_int(tabla, "Rentable", InfoCasa[id][cRentable]);
		reg_int(tabla, "RentaPrecio", InfoCasa[id][cRentaPrecio]);
		reg_int(tabla, "Armario1", InfoCasa[id][cArmario][0]);
		reg_int(tabla, "ArmarioCantidad1", InfoCasa[id][cArmarioCantidad][0]);
		reg_int(tabla, "Armario2", InfoCasa[id][cArmario][1]);
		reg_int(tabla, "ArmarioCantidad2", InfoCasa[id][cArmarioCantidad][1]);
		reg_int(tabla, "Armario3", InfoCasa[id][cArmario][2]);
		reg_int(tabla, "ArmarioCantidad3", InfoCasa[id][cArmarioCantidad][2]);
		reg_int(tabla, "Armario4", InfoCasa[id][cArmario][3]);
		reg_int(tabla, "ArmarioCantidad4", InfoCasa[id][cArmarioCantidad][3]);
		reg_int(tabla, "Armario5", InfoCasa[id][cArmario][4]);
		reg_int(tabla, "ArmarioCantidad5", InfoCasa[id][cArmarioCantidad][4]);
		reg_int(tabla, "Armario6", InfoCasa[id][cArmario][5]);
		reg_int(tabla, "ArmarioCantidad6", InfoCasa[id][cArmarioCantidad][5]);
		reg_int(tabla, "Armario7", InfoCasa[id][cArmario][6]);
		reg_int(tabla, "ArmarioCantidad7", InfoCasa[id][cArmarioCantidad][6]);
		reg_int(tabla, "Armario8", InfoCasa[id][cArmario][7]);
		reg_int(tabla, "ArmarioCantidad8", InfoCasa[id][cArmarioCantidad][7]);
		reg_int(tabla, "Armario9", InfoCasa[id][cArmario][8]);
		reg_int(tabla, "ArmarioCantidad9", InfoCasa[id][cArmarioCantidad][8]);
		reg_int(tabla, "Armario10", InfoCasa[id][cArmario][9]);
		reg_int(tabla, "ArmarioCantidad10", InfoCasa[id][cArmarioCantidad][9]);
		reg_int(tabla, "Armario11", InfoCasa[id][cArmario][10]);
		reg_int(tabla, "ArmarioCantidad11", InfoCasa[id][cArmarioCantidad][10]);
		reg_int(tabla, "Armario12", InfoCasa[id][cArmario][11]);
		reg_int(tabla, "ArmarioCantidad12", InfoCasa[id][cArmarioCantidad][11]);
		reg_int(tabla, "Armario13", InfoCasa[id][cArmario][12]);
		reg_int(tabla, "ArmarioCantidad13", InfoCasa[id][cArmarioCantidad][12]);
		reg_int(tabla, "Armario14", InfoCasa[id][cArmario][13]);
		reg_int(tabla, "ArmarioCantidad14", InfoCasa[id][cArmarioCantidad][13]);
		reg_int(tabla, "Armario15", InfoCasa[id][cArmario][14]);
		reg_int(tabla, "ArmarioCantidad15", InfoCasa[id][cArmarioCantidad][14]);
		reg_string(tabla, "Compartida1", InfoCasa[id][cCompartida1], MAX_PLAYER_NAME);
		reg_string(tabla, "Compartida2", InfoCasa[id][cCompartida2], MAX_PLAYER_NAME);
		reg_string(tabla, "Compartida3", InfoCasa[id][cCompartida3], MAX_PLAYER_NAME);
		reg_int(tabla, "TiempoDisponible", InfoCasa[id][cTiempoDisponible]);
		reg_int(tabla, "Destroy", InfoCasa[id][cDestroy]);
		if (InfoCasa[id][cID]) totalcasas++;
		//funcion
		if (InfoCasa[id][cTipo] != 0)
		{
			LabelPickup_casa(id, 1);
			cargaditos++;
		}
		else noexitcasa(id);
	}
	printf("%d casas dinamicas [SQL: %d] cargadas correctamente.", cargaditos, totalcasas-1);
	return 1;
}

noexitcasa(id)
{
	if (IsValidDynamic3DTextLabel(InfoCasa[id][cEntradaLabel]))
	{
		DestroyDynamic3DTextLabel(InfoCasa[id][cEntradaLabel]);
		InfoCasa[id][cEntradaLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	if (IsValidDynamic3DTextLabel(InfoCasa[id][cSalidaLabel]))
	{
		DestroyDynamic3DTextLabel(InfoCasa[id][cSalidaLabel]);
		InfoCasa[id][cSalidaLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	InfoCasa[id][cEntradaLabel] = CreateDynamic3DTextLabel("casita", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
	InfoCasa[id][cSalidaLabel] = CreateDynamic3DTextLabel("casita", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
}

LabelPickup_casa(id, type)
{
	//info
	new location[MAX_ZONE_NAME], info_entrada[470], info_salida[470], exdireccion[215] = "", precio_ex[128], model_pickup = 1273;
	//precio
	if (InfoCasa[id][cMoneda] != 0) format(precio_ex, sizeof precio_ex, "{F1D659}%d coins", InfoCasa[id][cPrecio]);
	else format(precio_ex, sizeof precio_ex, "{00cc00}$%s", diner_coma(InfoCasa[id][cPrecio]));
	//localizacion
	Get2DZone(location, MAX_ZONE_NAME, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ]);
	if (InfoCasa[id][cEntradaVW] == 0 && InfoCasa[id][cEntradaInt] == 0) format(exdireccion, sizeof exdireccion, "Localizacion: %s", location);
	//entrada label
	if (InfoCasa[id][cVenta] != 0) format(info_entrada, sizeof info_entrada, "(Casa %d)\nPropietario: %s\nUbicacion: {FFFFFF}%s\nPulsa 'H' para entrar", id, InfoCasa[id][cPropietario], exdireccion), model_pickup = 1277;
	else format(info_entrada, sizeof info_entrada, "(Casa %d) En Venta!\nPrecio: %s\n{82BCEC}Ubicacion: {FFFFFF}%s", id, precio_ex, exdireccion);
	//salida label
	format(info_salida, sizeof info_salida, "Salida\n(Casa %d)", id);
	//
	if (type == 1) // create
	{
		//delete error
		if (IsValidDynamicPickup(InfoCasa[id][cEntradaPickup])) { DestroyDynamicPickup(InfoCasa[id][cEntradaPickup]); }
		if (IsValidDynamicPickup(InfoCasa[id][cSalidaPickup])) { DestroyDynamicPickup(InfoCasa[id][cSalidaPickup]); }
		if (IsValidDynamic3DTextLabel(InfoCasa[id][cEntradaLabel]))
		{
			DestroyDynamic3DTextLabel(InfoCasa[id][cEntradaLabel]);
			InfoCasa[id][cEntradaLabel] = Text3D:INVALID_3DTEXT_ID;
		}
		if (IsValidDynamic3DTextLabel(InfoCasa[id][cSalidaLabel]))
		{
			DestroyDynamic3DTextLabel(InfoCasa[id][cSalidaLabel]);
			InfoCasa[id][cSalidaLabel] = Text3D:INVALID_3DTEXT_ID;
		}
		InfoCasa[id][cEntradaLabel] = CreateDynamic3DTextLabel(info_entrada, 0x82BCECFF, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ]+0.35, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoCasa[id][cEntradaVW], InfoCasa[id][cEntradaInt], -1);
		InfoCasa[id][cSalidaLabel] = CreateDynamic3DTextLabel(info_salida, 0xccccccFF, InfoCasa[id][cSalidaX], InfoCasa[id][cSalidaY], InfoCasa[id][cSalidaZ]+0.35, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoCasa[id][cSalidaVW], InfoCasa[id][cSalidaInt], -1);
		InfoCasa[id][cEntradaPickup] = CreateDynamicPickup(model_pickup, 1, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ], InfoCasa[id][cEntradaVW], InfoCasa[id][cEntradaInt]);
		InfoCasa[id][cSalidaPickup] = CreateDynamicPickup(model_pickup, 1, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ], InfoCasa[id][cSalidaVW], InfoCasa[id][cSalidaInt]);
	}
	else if (type == 2) // update
	{
		//3d label
		UpdateDynamic3DTextLabelText(InfoCasa[id][cEntradaLabel], -1, info_entrada);
		UpdateDynamic3DTextLabelText(InfoCasa[id][cSalidaLabel], -1, info_salida);
	}
}


// variables de 'negocios.sql' desde 05-11-2020
enum negocioInfo
{
	nID,                                // ID en base de datos
	nNombre[128],                       // Nombre
	nPropietario[MAX_PLAYER_NAME],      // Propietario
	nVenta,                             // Venta
	nTipo,                              // Tipo
	nPrecio,                            // Precio
	Float: nEntradaX,                   // Entrada X
	Float: nEntradaY,                   // Entrada Y
	Float: nEntradaZ,                   // Entrada Z
	Float: nEntradaR,                   // Entrada R
	Float: nSalidaX,                    // Salida X
	Float: nSalidaY,                    // Salida Y
	Float: nSalidaZ,                    // Salida Z
	Float: nSalidaR,                    // Salida R
	nSalidaInt,                         // Salida Int
	nSalidaVW,                          // Salida VW
	nSeguro,                            // Seguro
	nDinero,                            // Dinero
	nProductos,                         // Productos
	nCompartida1[MAX_PLAYER_NAME],      // Llaves 1
	nCompartida2[MAX_PLAYER_NAME],      // Llaves 2
	nCompartida3[MAX_PLAYER_NAME],      // Llaves 3
	nTiempoDisponible,                  // Tiempo disponible
	Float: nActorX,						// actor x
	Float: nActorY,						// actor y
	Float: nActorZ,						// actor z
	Float: nActorR,						// actor r
	nActorSkin,							// actor skin
	// no guardable
	Text3D: nEntradaLabel,              // Entrada label                    // Entrada pickup
	Text3D: nSalidaLabel,               // Salida label
	nSalidaPickup,
	nEntradaPickup,
	nInteriorActor,						// interior actor
	nEstadoRobo,                        // robando negocio
	//botar luego
	nObjModel[MAX_MUEBLES_N],
	Float:nObjPosX[MAX_MUEBLES_N],
	Float:nObjPosY[MAX_MUEBLES_N],
	Float:nObjPosZ[MAX_MUEBLES_N],
	Float:nObjRotX[MAX_MUEBLES_N],
	Float:nObjRotY[MAX_MUEBLES_N],
	Float:nObjRotZ[MAX_MUEBLES_N],
};
new InfoNegocio[MAX_NEGOCIOS][negocioInfo];

EnNegocio(playerid)
{
	Loop(id, totalnegocios, 1) if (InfoNegocio[id][nTipo] != 0)
	{
		if (InfoNegocio[id][nSalidaInt] == InfoJugador[playerid][jInterior] && InfoNegocio[id][nSalidaVW] == InfoJugador[playerid][jVirtualWorld])
		{
			return id;
		}
	}
	return -1;
}

CountNegocios(playerid)
{
	new count = 0;
	Loop(id, totalnegocios, 1) if (InfoNegocio[id][nVenta] != 0 && InfoNegocio[id][nTipo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoNegocio[id][nPropietario], true) == 0)
	{
		count++;
	}
	return count;
}

PermisosNegocio(playerid, id)
{
	if (InfoNegocio[id][nVenta] != 0 && InfoNegocio[id][nTipo] != 0)
	{
		if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoNegocio[id][nPropietario], true) == 0) { return 1; }
		if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoNegocio[id][nCompartida1], true) == 0) { return 1; }
		if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoNegocio[id][nCompartida2], true) == 0) { return 1; }
		if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoNegocio[id][nCompartida3], true) == 0) { return 1; }
	}
	return 0;
}

LlavesNegocio(playerid, id)
{
	if (InfoNegocio[id][nVenta] != 0 && InfoNegocio[id][nTipo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoNegocio[id][nPropietario], true) == 0)
	{
		return 1;
	}
	return 0;
}

forward CargarNegocios();
public CargarNegocios()
{
	new cargaditos = 0;
	Loop(e, MAX_NEGOCIOS, 0)
	{
		alm(InfoNegocio[e][nPropietario], "none");
		alm(InfoNegocio[e][nCompartida1], "none");
		alm(InfoNegocio[e][nCompartida2], "none");
		alm(InfoNegocio[e][nCompartida3], "none");
		InfoNegocio[e][nTiempoDisponible] = -1;
		InfoNegocio[e][nEstadoRobo] = 0;
	}
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoNegocio[id][nID]);
		reg_string(tabla, "Nombre", InfoNegocio[id][nNombre], 128);
		reg_string(tabla, "Propietario", InfoNegocio[id][nPropietario], MAX_PLAYER_NAME);
		reg_int(tabla, "Venta", InfoNegocio[id][nVenta]);
		reg_int(tabla, "Tipo", InfoNegocio[id][nTipo]);
		reg_int(tabla, "Precio", InfoNegocio[id][nPrecio]);
		reg_float(tabla, "EntradaX", InfoNegocio[id][nEntradaX]);
		reg_float(tabla, "EntradaY", InfoNegocio[id][nEntradaY]);
		reg_float(tabla, "EntradaZ", InfoNegocio[id][nEntradaZ]);
		reg_float(tabla, "EntradaR", InfoNegocio[id][nEntradaR]);
		reg_float(tabla, "SalidaX", InfoNegocio[id][nSalidaX]);
		reg_float(tabla, "SalidaY", InfoNegocio[id][nSalidaY]);
		reg_float(tabla, "SalidaZ", InfoNegocio[id][nSalidaZ]);
		reg_float(tabla, "SalidaR", InfoNegocio[id][nSalidaR]);
		reg_int(tabla, "SalidaInt", InfoNegocio[id][nSalidaInt]);
		reg_int(tabla, "SalidaVW", InfoNegocio[id][nSalidaVW]);
		reg_int(tabla, "Seguro", InfoNegocio[id][nSeguro]);
		reg_int(tabla, "Dinero", InfoNegocio[id][nDinero]);
		reg_int(tabla, "Productos", InfoNegocio[id][nProductos]);
		reg_string(tabla, "Compartida1", InfoNegocio[id][nCompartida1], MAX_PLAYER_NAME);
		reg_string(tabla, "Compartida2", InfoNegocio[id][nCompartida2], MAX_PLAYER_NAME);
		reg_string(tabla, "Compartida3", InfoNegocio[id][nCompartida3], MAX_PLAYER_NAME);
		reg_int(tabla, "TiempoDisponible", InfoNegocio[id][nTiempoDisponible]);
		reg_float(tabla, "ActorX", InfoNegocio[id][nActorX]);
		reg_float(tabla, "ActorY", InfoNegocio[id][nActorY]);
		reg_float(tabla, "ActorZ", InfoNegocio[id][nActorZ]);
		reg_float(tabla, "ActorR", InfoNegocio[id][nActorR]);
		reg_int(tabla, "ActorSkin", InfoNegocio[id][nActorSkin]);
		if (InfoNegocio[id][nID]) totalnegocios++;
		//funcion
		if (InfoNegocio[id][nTipo] != 0)
		{
			LabelPickup_negocio1(id, 1);
			LabelPickup_negocio(id, 1);
			cargaditos++;
		}
		else noexitnegocio1(id) && no_exit_actor(id);
	}
	printf("%d negocios dinamicos [SQL: %d] cargados correctamente.", cargaditos, totalnegocios-1);
	return 1;
}

noexitnegocio1(id)
{
	if (IsValidDynamic3DTextLabel(InfoNegocio[id][nEntradaLabel]))
	{
		DestroyDynamic3DTextLabel(InfoNegocio[id][nEntradaLabel]);
		InfoNegocio[id][nEntradaLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	if (IsValidDynamic3DTextLabel(InfoNegocio[id][nSalidaLabel]))
	{
		DestroyDynamic3DTextLabel(InfoNegocio[id][nSalidaLabel]);
		InfoNegocio[id][nSalidaLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	InfoNegocio[id][nEntradaLabel] = CreateDynamic3DTextLabel("casita", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
	InfoNegocio[id][nSalidaLabel] = CreateDynamic3DTextLabel("casita", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
}

funcion LabelPickup_negocio(id, actor)
{
	DestroyDynamicPickup(InfoNegocio[id][nEntradaPickup]);
	if (InfoNegocio[id][nVenta] == 0) InfoNegocio[id][nEntradaPickup] = CreateDynamicPickup(1273, 1, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ]);
	else InfoNegocio[id][nEntradaPickup] = CreateDynamicPickup(1272, 1, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ]);

	if (actor != 0 && InfoNegocio[id][nActorSkin] != 0)
	{
		DestroyDynamicActor(InfoNegocio[id][nInteriorActor]);
		InfoNegocio[id][nInteriorActor] = CreateDynamicActor(InfoNegocio[id][nActorSkin], InfoNegocio[id][nActorX], InfoNegocio[id][nActorY], InfoNegocio[id][nActorZ], InfoNegocio[id][nActorR], true, 100.0, InfoNegocio[id][nSalidaVW], InfoNegocio[id][nSalidaInt]);
	}
	return 1;
}

LabelPickup_negocio1(id, type)
{
	//info
	new location[MAX_ZONE_NAME], info_entrada[470], info_salida[470], exdireccion[215] = "", precio_ex[128], model_pickup = 1273;
	//precio
	format(precio_ex, sizeof precio_ex, "{00cc00}$%s", diner_coma(InfoNegocio[id][nPrecio]));
	//localizacion
	Get2DZone(location, MAX_ZONE_NAME, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ]);
	format(exdireccion, sizeof exdireccion, "%s", location);
	//entrada label
	if (InfoNegocio[id][nVenta] != 0) format(info_entrada, sizeof info_entrada, "{ffffff}%s\n{82BCEC}(Negocio %d)\nPropietario: %s\nUbicacion: {FFFFFF}%s\n{82BCEC}Tipo:{FFFFFF} %s\n'H' para entrar",InfoNegocio[id][nNombre], id, InfoNegocio[id][nPropietario], exdireccion, TypeBusiness(id)), model_pickup = 1272;
	else format(info_entrada, sizeof info_entrada, "(Negocio %d) En Venta!\nPrecio: %s\n{82BCEC}Ubicacion: {FFFFFF}%s\n{82BCEC}Tipo:{FFFFFF} %s", id, precio_ex, exdireccion, TypeBusiness(id));
	//salida label
	format(info_salida, sizeof info_salida, "Salida\n(Negocio %d)", id);
	//
	if (type == 1) // create
	{
		//delete error
		if (IsValidDynamicPickup(InfoNegocio[id][nEntradaPickup])) { DestroyDynamicPickup(InfoNegocio[id][nEntradaPickup]); }
		if (IsValidDynamicPickup(InfoNegocio[id][nSalidaPickup])) { DestroyDynamicPickup(InfoNegocio[id][nSalidaPickup]); }
		if (IsValidDynamic3DTextLabel(InfoNegocio[id][nEntradaLabel]))
		{
			DestroyDynamic3DTextLabel(InfoNegocio[id][nEntradaLabel]);
			InfoNegocio[id][nEntradaLabel] = Text3D:INVALID_3DTEXT_ID;
		}
		if (IsValidDynamic3DTextLabel(InfoNegocio[id][nSalidaLabel]))
		{
			DestroyDynamic3DTextLabel(InfoNegocio[id][nSalidaLabel]);
			InfoNegocio[id][nSalidaLabel] = Text3D:INVALID_3DTEXT_ID;
		}
		InfoNegocio[id][nEntradaLabel] = CreateDynamic3DTextLabel(info_entrada, 0x82BCECFF, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ]+0.35, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1);
		InfoNegocio[id][nSalidaLabel] = CreateDynamic3DTextLabel(info_salida, 0xccccccFF, InfoNegocio[id][nSalidaX], InfoNegocio[id][nSalidaY], InfoNegocio[id][nSalidaZ]+0.35, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoNegocio[id][nSalidaVW], InfoNegocio[id][nSalidaInt], -1);
		InfoNegocio[id][nEntradaPickup] = CreateDynamicPickup(model_pickup, 1, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ], 0, 0);
		InfoNegocio[id][nSalidaPickup] = CreateDynamicPickup(model_pickup, 1, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ], InfoNegocio[id][nSalidaVW], InfoNegocio[id][nSalidaInt]);
	}
	else if (type == 2) // update
	{
		//3d label
		UpdateDynamic3DTextLabelText(InfoNegocio[id][nEntradaLabel], -1, info_entrada);
		UpdateDynamic3DTextLabelText(InfoNegocio[id][nSalidaLabel], -1, info_salida);
	}
}

funcion no_exit_actor(id)
{
	DestroyDynamicActor(InfoNegocio[id][nInteriorActor]);
	DestroyDynamicPickup(InfoNegocio[id][nEntradaPickup]);
	InfoNegocio[id][nEntradaPickup] = CreateDynamicPickup(1272, 1, -2190.7974, 165.9186, 58.2604, id, id);
	return 1;
}

//sistema de muebles en sql, by bernal(10/06/2020)
new DentroCasa[MAX_PLAYERS];
new DentroNegocio[MAX_PLAYERS];
new MuebleActual[MAX_PLAYERS];
new DentroEmpresa[MAX_PLAYERS];

#define MAX_PAGE_FURNITURE 50

new pagina_mueble[MAX_PLAYERS];
new is_mueble_actual[MAX_PLAYERS];

enum mInfo
{
	mID_sql,
	mTipo,
	mPropiedad,
	mModelo,
	mNombre[128],
	Float: mPotX,
	Float: mPotY,
	Float: mPotZ,
	Float: mRotX,
	Float: mRotY,
	Float: mRotZ,
	mInterior,
	mVirtualWorld,
	mPrecio,
	mPuerta,
	mObjeto,
};
new InfoMueble[MAX_MUEBLES][mInfo];

forward CargarMuebles();
public CargarMuebles()
{
	new cargaditos = 0, decasas = 0, denegocios = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;

		reg_int(tabla, "ID", InfoMueble[id][mID_sql]);
		reg_int(tabla, "Tipo", InfoMueble[id][mTipo]);
		reg_int(tabla, "Propiedad", InfoMueble[id][mPropiedad]);
		reg_int(tabla, "Modelo", InfoMueble[id][mModelo]);
		reg_string(tabla, "Nombre", InfoMueble[id][mNombre], 128);
		reg_float(tabla, "PotX", InfoMueble[id][mPotX]);
		reg_float(tabla, "PotY", InfoMueble[id][mPotY]);
		reg_float(tabla, "PotZ", InfoMueble[id][mPotZ]);
		reg_float(tabla, "RotX", InfoMueble[id][mRotX]);
		reg_float(tabla, "RotY", InfoMueble[id][mRotY]);
		reg_float(tabla, "RotZ", InfoMueble[id][mRotZ]);
		reg_int(tabla, "Interior", InfoMueble[id][mInterior]);
		reg_int(tabla, "VirtualWorld", InfoMueble[id][mVirtualWorld]);
		reg_int(tabla, "Precio", InfoMueble[id][mPrecio]);
		reg_int(tabla, "Puerta", InfoMueble[id][mPuerta]);
		if (InfoMueble[id][mID_sql]) cargaditos++;
		//funcion
		if (InfoMueble[id][mModelo] != 0)
		{
			switch (InfoMueble[id][mTipo])
			{
				case 1: decasas++;
				case 2: denegocios++;
			}
			totalmuebles++;
		}
		if (InfoMueble[id][mPotX] != 0.0)
		{
			InfoMueble[id][mObjeto] = CreateDynamicObject(InfoMueble[id][mModelo], InfoMueble[id][mPotX], InfoMueble[id][mPotY], InfoMueble[id][mPotZ], InfoMueble[id][mRotX], InfoMueble[id][mRotY], InfoMueble[id][mRotZ], InfoMueble[id][mVirtualWorld], InfoMueble[id][mInterior]);
		}
	}
	printf("%d muebles [c: %d] [n: %d] (SQL %d) cargados correctamente.", totalmuebles-1, decasas, denegocios, cargaditos);
	CheckPropiedades();
	return 1;
}

Dialog:MenuMuebles(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new id = -1;
	if (DentroCasa[playerid] != -1) id = DentroCasa[playerid];
	if (DentroNegocio[playerid] != -1) id = DentroNegocio[playerid];
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* Ocurrio un error, si el mismo continua habre ticket en el dc principal de North America Roleplay.");
	switch (listitem)
	{
		case 0: ListaMuebles(playerid, 1);
		case 1:
		{
			if (DentroCasa[playerid] != -1) ShowModelSelectionMenu(playerid, MueblesCasa, "Muebles de casa");
			if (DentroNegocio[playerid] != -1) ShowModelSelectionMenu(playerid, MueblesNegocios, "Muebles de negocio");
		}
		case 2:
		{
			new actual_muebles = CountMuebles(playerid);
			if (actual_muebles == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes ningun mueble.");
			Dialog_Show(playerid, BorrarAllMuebles, DIALOG_STYLE_MSGBOX, "Borrar muebles", "{EBEBEB}Estas seguro de borrar todos los muebles?", "Continuar", "Volver");
		}
	}
	return 1;
}

check_id_prop_mueble(playerid)
{
	new id = -1;
	if (DentroCasa[playerid] != -1)
	{
		id = DentroCasa[playerid];
	}
	if (DentroNegocio[playerid] != -1)
	{
		id = DentroNegocio[playerid];
	}
	return id;
}

Dialog:BorrarAllMuebles(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_muebles(playerid);
	new id = -1, nameP[10];
	if (DentroCasa[playerid] != -1)
	{
		id = DentroCasa[playerid];
		alm(nameP, "casa");
	}
	if (DentroNegocio[playerid] != -1)
	{
		id = DentroNegocio[playerid];
		alm(nameP, "negocio");
	}
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* Ocurrio un error, si el mismo continua Habre ticket en el dc principal de North America ROLEPLAY.");
	new count_mubles = 0, gformat[128];
	if (DentroCasa[playerid] != -1)
	{
		Loop(x, totalmuebles+1, 1) if (InfoMueble[x][mVirtualWorld] == InfoCasa[id][cSalidaVW])
		{
			borrar_mueble(x);
			count_mubles++;
		}
	}
	if (DentroNegocio[playerid] != -1)
	{
		Loop(x, totalmuebles+1, 1) if (InfoMueble[x][mVirtualWorld] == InfoNegocio[id][nSalidaVW])
		{
			borrar_mueble(x);
			count_mubles++;
		}
	}
	format(gformat, sizeof gformat, "Borraste los %d muebles de tu %s.", count_mubles, nameP);
	SendClientMessage(playerid, 0x00CC00FF, gformat);
	return 1;
}

CountMuebles(playerid)
{
	new VW = GetPlayerVirtualWorld(playerid), count = 0;
	Loop(id, totalmuebles+1, 1) if (InfoMueble[id][mVirtualWorld] == VW)
	{
        count++;
	}
	return count;
}

ListaMuebles(playerid, pagina)
{
	new actual_muebles = CountMuebles(playerid);
	if (actual_muebles == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes ningun mueble.");

	pagina_mueble[playerid] = pagina;
	is_mueble_actual[playerid] = 0;
	//check id mueble
	new countx = 0, VW = GetPlayerVirtualWorld(playerid);
	Loop(id, totalmuebles+1, 1) if (InfoMueble[id][mVirtualWorld] == VW)
	{
		new format_var[128];
		format(format_var, sizeof format_var, "judsjmueble%d", countx);
		SetPVarInt(playerid, format_var, id);
		countx++;
	}
	//show dialogo
	new gformat[256], show_dialog[3072], show_muestra, inicio_id;
	switch (pagina)
	{
		case 1: show_muestra = 50, inicio_id = 0;
		case 2: show_muestra = MAX_PAGE_FURNITURE*2, inicio_id = MAX_PAGE_FURNITURE;
		case 3: show_muestra = MAX_PAGE_FURNITURE*3, inicio_id = MAX_PAGE_FURNITURE*2;
		case 4: show_muestra = MAX_PAGE_FURNITURE*4, inicio_id = MAX_PAGE_FURNITURE*3;
		case 5: show_muestra = MAX_PAGE_FURNITURE*5, inicio_id = MAX_PAGE_FURNITURE*4;
		case 6: show_muestra = MAX_PAGE_FURNITURE*6, inicio_id = MAX_PAGE_FURNITURE*5;
		case 7: show_muestra = MAX_PAGE_FURNITURE*7, inicio_id = MAX_PAGE_FURNITURE*6;
		case 8: show_muestra = MAX_PAGE_FURNITURE*8, inicio_id = MAX_PAGE_FURNITURE*7;
		case 9: show_muestra = MAX_PAGE_FURNITURE*9, inicio_id = MAX_PAGE_FURNITURE*8;
		case 10: show_muestra = MAX_PAGE_FURNITURE*10, inicio_id = MAX_PAGE_FURNITURE*9;
	}
	new count = 0;
	Loop(x, show_muestra, inicio_id)
	{
		new format_var[128];
		format(format_var, sizeof format_var, "judsjmueble%d", x);
		new id = GetPVarInt(playerid, format_var), excolor[10];
		if (InfoMueble[id][mInterior] == -1) excolor = "{F4C221}";
		else excolor = "{2EC231}";
		if (InfoMueble[id][mVirtualWorld] == VW)
		{
			format(gformat, sizeof gformat, "(%d) %s%s\n", x+1, excolor, InfoMueble[id][mNombre]);
			strcat(show_dialog, gformat);
			format(format_var, sizeof format_var, "mueble_actual%d", count);
			SetPVarInt(playerid, format_var, id);
			count++;
		}
		format(format_var, sizeof format_var, "judsjmueble%d", x);
		SetPVarInt(playerid, format_var, 0);
	}
	//siguiente pagina
	if (actual_muebles >= MAX_PAGE_FURNITURE*pagina)
	{
		format(gformat, sizeof gformat, "{FF0000}>> Ir siguiente pagina %d\n", pagina+1);
		strcat(show_dialog, gformat);
	}
	format(gformat, sizeof gformat, "Lista de tus muebles: {FF0000}%d", actual_muebles);
	Dialog_Show(playerid, ShowMuebles, DIALOG_STYLE_LIST, gformat, show_dialog, "Continuar", "Volver");
	return 1;
}

Dialog:ShowMuebles(playerid, response, listitem, inputtext[])
{
	//opcion volver
	if (!response)
	{
		if (pagina_mueble[playerid] != 1) ListaMuebles(playerid, pagina_mueble[playerid]-1);
		else cmd_muebles(playerid);
		return 1;
	}
	//siguiente pagina
	if (listitem == MAX_PAGE_FURNITURE) return ListaMuebles(playerid, pagina_mueble[playerid]+1);
	//opcion continuar
	new format_var[128];
	format(format_var, sizeof format_var, "mueble_actual%d", listitem);
	new id = GetPVarInt(playerid, format_var);
	if (!InfoMueble[id][mModelo]) return SendClientMessage(playerid, 0xccccccff, "* No has seleccionado nada.");
	is_mueble_actual[playerid] = id;
	Dialogo_Editar_Mueble(playerid, id);
	return 1;
}

Dialogo_Editar_Mueble(playerid, id)
{
	new show_dialog[860];
	if (InfoMueble[id][mInterior] != -1) format(show_dialog, sizeof show_dialog, "{FFFFFF}Informacion\n{2EC231}Ocultar{FFFFFF}\nEditar posicion\nEditar nombre\nGirar\nBorrar");
	else format(show_dialog, sizeof show_dialog, "{FFFFFF}Informacion\n{F4C221}Mostrar{FFFFFF}\nEditar posicion\nEditar nombre\nGirar\nBorrar");
	Dialog_Show(playerid, EditarMueble, DIALOG_STYLE_LIST, "Menu del mueble", show_dialog, "Continuar", "Volver");
	return 1;
}

Dialog:EditarMueble(playerid, response, listitem, inputtext[])
{
	//opcion volver
	if (!response)
	{
		ListaMuebles(playerid, pagina_mueble[playerid]);
		return 1;
	}
	new id = is_mueble_actual[playerid], gformat[256], query[512];
	if (id == 0) return SendClientMessage(playerid, 0xccccccff, "* Has seleccionado un slot sin mueble.");
	if (InfoMueble[id][mVirtualWorld] == 0) return SendClientMessage(playerid, 0xccccccff, "* Has seleccionado un slot sin mueble.");
	//opcion continuar
	switch (listitem)
	{
		case 0:
		{
			if (InfoMueble[id][mInterior] != -1) format(gformat, sizeof gformat, "{FFFFFF}Nombre: %s\nModelo: %d\nDistancia: %0.2f metros\n{2EC231}Colocado", InfoMueble[id][mNombre], InfoMueble[id][mModelo], (GetPlayerDistanceFromPoint(playerid, InfoMueble[id][mPotX], InfoMueble[id][mPotY], InfoMueble[id][mPotZ]) * 0.01));
			else format(gformat, sizeof gformat, "{FFFFFF}Nombre: %s\nModelo: %d\n{F4C221}Oculto", InfoMueble[id][mNombre], InfoMueble[id][mModelo]);
			Dialog_Show(playerid, DialogNone, DIALOG_STYLE_MSGBOX, "Informacion", gformat, "Cerrar", "");
			is_mueble_actual[playerid] = 0;
		}
		case 1: //ocultar/mostrar
		{
		    if (InfoMueble[id][mInterior] != -1)
		    {
				InfoMueble[id][mInterior] = -1;
				if (InfoMueble[id][mObjeto] != INVALID_STREAMER_ID)
				{
					DestroyDynamicObject(InfoMueble[id][mObjeto]);
					InfoMueble[id][mObjeto] = INVALID_STREAMER_ID;
				}
				InfoMueble[id][mObjeto] = 0;
				is_mueble_actual[playerid] = 0;
				format(gformat, sizeof gformat, "Ocultaste {2EC231}%s{FFFFFF}.", InfoMueble[id][mNombre]);
				SendClientMessage(playerid, 0xFFFFFFFF, gformat);
		    }
		    else
		    {
		        new edit = 0;
				if (InfoMueble[id][mPotX] == 0.0 && InfoMueble[id][mPotY] == 0.0 && InfoMueble[id][mPotZ] == 0.0)
				{
					GetPlayerPos(playerid, InfoMueble[id][mPotX], InfoMueble[id][mPotY], InfoMueble[id][mPotZ]);
	        		GetXYInFrontOfPlayer(playerid, InfoMueble[id][mPotX], InfoMueble[id][mPotY], 3.0);
	        		edit = 1;
	        	}
				InfoMueble[id][mInterior] = GetPlayerInterior(playerid);
				InfoMueble[id][mObjeto] = CreateDynamicObject(InfoMueble[id][mModelo], InfoMueble[id][mPotX], InfoMueble[id][mPotY], InfoMueble[id][mPotZ], InfoMueble[id][mRotX], InfoMueble[id][mRotY], InfoMueble[id][mRotZ], InfoMueble[id][mVirtualWorld], InfoMueble[id][mInterior]);
				if (edit != 0)
				{
					InfoJugador[playerid][pEditingMode] = 55;
					EditDynamicObject(playerid, InfoMueble[id][mObjeto]);
					edicion_sql_actual[playerid] = id;

					SendClientMessage(playerid, 0xccccccff, "El objeto no tenia posicion guardada, asi que te tocara editarlo.");
				}
				else
				{
					format(gformat, sizeof gformat, "Sacaste {F4C221}%s{FFFFFF}.", InfoMueble[id][mNombre]);
					SendClientMessage(playerid, 0xFFFFFFFF, gformat);
					is_mueble_actual[playerid] = 0;
				}
			}
			mysql_format(DBngrp, query, sizeof query, "UPDATE muebles SET Interior = '%d' WHERE ID = '%d'", InfoMueble[id][mInterior], InfoMueble[id][mID_sql]);
			mysql_tquery(DBngrp, query);
			Streamer_Update(playerid);
		}
		case 2:
		{
			//si no tiene configurado la id.
			if (InfoMueble[id][mPotX] == 0.0 && InfoMueble[id][mPotY] == 0.0 && InfoMueble[id][mPotZ] == 0.0)
			{
				GetPlayerPos(playerid, InfoMueble[id][mPotX], InfoMueble[id][mPotY], InfoMueble[id][mPotZ]);
        		GetXYInFrontOfPlayer(playerid, InfoMueble[id][mPotX], InfoMueble[id][mPotY], 3.0);
        	}
			if (InfoMueble[id][mInterior] == -1)
			{
				InfoMueble[id][mInterior] = GetPlayerInterior(playerid);
				InfoMueble[id][mObjeto] = CreateDynamicObject(InfoMueble[id][mModelo], InfoMueble[id][mPotX], InfoMueble[id][mPotY], InfoMueble[id][mPotZ], 0.0, 0.0, 0.0, InfoMueble[id][mVirtualWorld], InfoMueble[id][mInterior]);
			}
			InfoJugador[playerid][pEditingMode] = 55;
			EditDynamicObject(playerid, InfoMueble[id][mObjeto]);
			edicion_sql_actual[playerid] = id;
		}
		case 3: Dialog_Show(playerid, ChangeMuebleName, DIALOG_STYLE_INPUT, "Nombre del mueble", "{EBEBEB}Escribe el nuevo nombre del mueble", "Continuar", "Volver");
		case 4:
		{
			if (InfoMueble[id][mInterior] == -1) return SendClientMessage(playerid, 0xccccccff, "* Ese mueble esta oculto o no lo has agregado.");
			Dialog_Show(playerid, GirarMueble, DIALOG_STYLE_LIST, "Girar mueble", "0 grados\n90 grados\n180 grados\n270 grados", "Continuar", "Volver");
		}
		case 5:
		{
			format(gformat, sizeof gformat, "Borraste {FF0000}%s{FFFFFF}.", InfoMueble[id][mNombre]);
			SendClientMessage(playerid, 0xFFFFFFFF, gformat);
			borrar_mueble(id);
		}
	}
	return 1;
}

borrar_mueble(id)
{
	if (InfoMueble[id][mObjeto] != INVALID_STREAMER_ID)
	{
		DestroyDynamicObject(InfoMueble[id][mObjeto]);
		InfoMueble[id][mObjeto] = INVALID_STREAMER_ID;
	}
	InfoMueble[id][mObjeto] = 0;
	InfoMueble[id][mTipo] = 0;
	InfoMueble[id][mPropiedad] = -1;
	InfoMueble[id][mModelo] = 0;
	alm(InfoMueble[id][mNombre], "none");
	InfoMueble[id][mPotX] = 0.0;
	InfoMueble[id][mPotY] = 0.0;
	InfoMueble[id][mPotZ] = 0.0;
	InfoMueble[id][mRotX] = 0.0;
	InfoMueble[id][mRotY] = 0.0;
	InfoMueble[id][mRotZ] = 0.0;
	InfoMueble[id][mInterior] = -1;
	InfoMueble[id][mVirtualWorld] = 0;
	InfoMueble[id][mPrecio] = 0;
	InfoMueble[id][mPuerta] = 0;
	new query[1028];
	mysql_format(DBngrp, query, sizeof query, "UPDATE muebles SET Tipo = 0, Propiedad = -1, Modelo = 0, PotX = 0.0, PotY = 0.0, PotZ = 0.0, \
	RotX = 0.0, RotY = 0.0, RotZ = 0.0, Interior = -1, VirtualWorld = 0, Precio = 0, Puerta = 0 WHERE ID = '%d'", InfoMueble[id][mID_sql]);
	mysql_tquery(DBngrp, query);
	return 1;
}

Dialog:GirarMueble(playerid, response, listitem, inputtext[])
{
	new id = is_mueble_actual[playerid], query[512];
	if (check_id_prop_mueble(playerid) == -1) return cmd_muebles(playerid);
	if (id == 0) return SendClientMessage(playerid, 0xccccccff, "* Has seleccionado un slot sin mueble.");
	if (InfoMueble[id][mVirtualWorld] == 0) return SendClientMessage(playerid, 0xccccccff, "* Has seleccionado un slot sin mueble.");
	if (!response) return Dialogo_Editar_Mueble(playerid, id);
	if (InfoMueble[id][mInterior] == -1) return SendClientMessage(playerid, 0xccccccff, "* Ese mueble esta oculto o no lo has agregado.");
	new Float: grados = 0.0;
	switch (listitem)
	{
		case 0:
		{
		    if (InfoMueble[id][mRotZ] == 0.0) return SendClientMessage(playerid, 0xccccccff, "* El mueble ya esta en 0 grados.");
			grados = 0.0;
		}
		case 1:
		{
		    if (InfoMueble[id][mRotZ] == 90.0) return SendClientMessage(playerid, 0xccccccff, "* El mueble ya esta en 90 grados.");
			grados = 90.0;
		}
		case 2:
		{
		    if (InfoMueble[id][mRotZ] == 180.0) return SendClientMessage(playerid, 0xccccccff, "* El mueble ya esta en 180 grados.");
			grados = 180.0;
		}
		case 3:
		{
		    if (InfoMueble[id][mRotZ] == 270.0) return SendClientMessage(playerid, 0xccccccff, "* El mueble ya esta en 270 grados.");
			grados = 270.0;
		}
	}
	format(query, sizeof query, "Giraste %s %0.f grados.", InfoMueble[id][mNombre], grados);
	SendClientMessage(playerid, 0xccccccff, query);
	GetDynamicObjectRot(InfoMueble[id][mObjeto], InfoMueble[id][mRotX], InfoMueble[id][mRotY], InfoMueble[id][mRotZ]);
	InfoMueble[id][mRotZ] = grados;
	SetDynamicObjectRot(InfoMueble[id][mObjeto], InfoMueble[id][mRotX], InfoMueble[id][mRotY], InfoMueble[id][mRotZ]);
	mysql_format(DBngrp, query, sizeof query, "UPDATE muebles SET RotX = '%f', RotY = '%f', RotZ = '%f' WHERE ID = '%d'", InfoMueble[id][mRotX], InfoMueble[id][mRotY], InfoMueble[id][mRotZ], InfoMueble[id][mID_sql]);
	mysql_tquery(DBngrp, query);
	return 1;
}

Dialog:ChangeMuebleName(playerid, response, listitem, inputtext[])
{
	new id = is_mueble_actual[playerid], query[512];
	if (check_id_prop_mueble(playerid) == -1) return cmd_muebles(playerid);
	if (id == 0) return SendClientMessage(playerid, 0xccccccff, "* Has seleccionado un slot sin mueble.");
	if (InfoMueble[id][mVirtualWorld] == 0) return SendClientMessage(playerid, 0xccccccff, "* Has seleccionado un slot sin mueble.");
	if (!response) return Dialogo_Editar_Mueble(playerid, id);
	if (strlen(inputtext) > 32 || strlen(inputtext) < 0) { SendClientMessage(playerid, 0xccccccff, "* No puedes poner mas de 32 caracteres para renombrar."); return 1; }
	alm(InfoMueble[id][mNombre], inputtext);
	format(query, sizeof query, "Nuevo nombre del mueble: {D1C231}%s", InfoMueble[id][mNombre]);
	SendClientMessage(playerid, -1, query);
	mysql_format(DBngrp, query, sizeof query, "UPDATE muebles SET Nombre = '%e' WHERE ID = '%d'", InfoMueble[id][mNombre], InfoMueble[id][mID_sql]);
	mysql_tquery(DBngrp, query);
	is_mueble_actual[playerid] = 0;
	return 1;
}

// variables de 'incendios.sql' desde 05-01-2021
enum incendioInfo
{
	pI_IDsql,
	pI_intensidad,
	pI_propiedad,
	pI_tipo,
	pI_objeto[15],
};
new InfoIncendio[MAX_INCENDIOS][incendioInfo];

new sel_incendio[MAX_PLAYERS][MAX_INCENDIOS];

forward CargarIncendios();
public CargarIncendios()
{
	new cargaditos = 0;
	//clean
	Loop(e, MAX_INCENDIOS, 0)
	{
		InfoIncendio[e][pI_tipo] = -1;
		InfoIncendio[e][pI_propiedad] = -1;
	}
	//load
	Loop(tabla, cache_num_rows(), 0)
	{
		new id = tabla+1;
		reg_int(tabla, "ID", InfoIncendio[id][pI_IDsql]);
		reg_int(tabla, "Tipo", InfoIncendio[id][pI_tipo]);
		reg_int(tabla, "Propiedad", InfoIncendio[id][pI_propiedad]);
		if (InfoIncendio[id][pI_IDsql]) totalincendios++;
		if (InfoIncendio[id][pI_propiedad] != -1)
		{
			cargaditos++;
	        CreateFireGeneral(InfoIncendio[id][pI_propiedad], InfoIncendio[id][pI_tipo], 1, id);
		}
	}
	printf("%d incendios [SQL: %d] cargados correctamente.", cargaditos, totalincendios-1);
	return 1;
}

forward FuegoSiguiente();
public FuegoSiguiente()
{
	Loop(id, MAX_INCENDIOS, 1) if (InfoIncendio[id][pI_propiedad] == -1)
	{
		return id;
	}
	return -1;
}

forward DestroyFire(id);
public DestroyFire(id)
{
	if (InfoIncendio[id][pI_propiedad] != -1)
	{
		InfoIncendio[id][pI_propiedad] = -1;
		InfoIncendio[id][pI_tipo] = -1;
		guardar_int_mysql("incendios", "Tipo", InfoIncendio[id][pI_IDsql], -1);
		guardar_int_mysql("incendios", "Propiedad", InfoIncendio[id][pI_IDsql], -1);
		Loop(e, 15, 0) if (InfoIncendio[id][pI_objeto][e] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(InfoIncendio[id][pI_objeto][e]);
			InfoIncendio[id][pI_objeto][e] = INVALID_STREAMER_ID;
		}
		return true;
	}
	return false;
}

forward CercaIncendio(playerid);
public CercaIncendio(playerid)
{
	Loop(id, totalincendios, 1) if (InfoIncendio[id][pI_propiedad] != -1)
	{
		new Float: PosFire[3];
		if (InfoIncendio[id][pI_tipo] == 0)
		{
			PosFire[0] = InfoCasa[InfoIncendio[id][pI_propiedad]][cEntradaX];
			PosFire[1] = InfoCasa[InfoIncendio[id][pI_propiedad]][cEntradaY];
			PosFire[2] = InfoCasa[InfoIncendio[id][pI_propiedad]][cEntradaZ];
		}
		else
		{
			PosFire[0] = InfoNegocio[InfoIncendio[id][pI_propiedad]][nEntradaX];
			PosFire[1] = InfoNegocio[InfoIncendio[id][pI_propiedad]][nEntradaY];
			PosFire[2] = InfoNegocio[InfoIncendio[id][pI_propiedad]][nEntradaZ];
		}
		if (IsPlayerInRangeOfPoint(playerid, 10.0, PosFire[0], PosFire[1], PosFire[2])) return id;
	}
	return -1;
}

forward EstaEnFuego(playerid);
public EstaEnFuego(playerid)
{
	Loop(id, totalincendios, 1) if (InfoIncendio[id][pI_propiedad] != -1)
	{
		if (InfoIncendio[id][pI_tipo] == 0)
		{
			new house = InfoIncendio[id][pI_propiedad];
			if (IsPlayerInRangeOfPoint(playerid, 1.5, InfoCasa[house][cEntradaX], InfoCasa[house][cEntradaY], InfoCasa[house][cEntradaZ]))
			{
				Quitar_Vida(playerid, -1.5);
			}
		}
		else
		{
			new business = InfoIncendio[id][pI_propiedad];
			if (IsPlayerInRangeOfPoint(playerid, 1.5, InfoNegocio[business][nEntradaX], InfoNegocio[business][nEntradaY], InfoNegocio[business][nEntradaZ]))
			{
				Quitar_Vida(playerid, -1.5);
			}
		}
	}
}

forward GenerarIncendio();
public GenerarIncendio()
{
	if (OnFaction(6) < 2) return 1;
	new a = random(4), location[MAX_ZONE_NAME], gformat[256];
	if (a == 0 || a == 1)
	{
		new casaid = random(totalcasas)-1;
		if (casaid == -1 || casaid == 0) casaid = 1;
		if (InfoCasa[casaid][cTipo] != 0)
		{
			if (InfoCasa[casaid][cEntradaInt] == 0 && InfoCasa[casaid][cEntradaVW] == 0)
			{
				Get2DZone(location, MAX_ZONE_NAME, InfoCasa[casaid][cEntradaX], InfoCasa[casaid][cEntradaY], InfoCasa[casaid][cEntradaZ]);
				format(gformat, sizeof gformat, "CENTRAL: Se genero un nuevo incendio en la casa #%d en %s.", casaid, location);
				SendRadioTrabajo(15, C_COLORPOLICIA, gformat);
				CreateFireGeneral(casaid, 0, 0);
				return 1;
			}
		}
	}
	if (a == 2 || a == 3)
	{
		new negocioid = random(totalnegocios)-1;
		if (negocioid == -1 || negocioid == 0) negocioid = 1;
		if (InfoNegocio[negocioid][nTipo] != 0)
		{
			Get2DZone(location, MAX_ZONE_NAME, InfoNegocio[negocioid][nEntradaX], InfoNegocio[negocioid][nEntradaY], InfoNegocio[negocioid][nEntradaZ]);
			format(gformat, sizeof gformat, "CENTRAL: Se genero un nuevo incendio en el negocio '%s' en %s.", InfoNegocio[negocioid][nNombre], location);
			SendRadioTrabajo(15, C_COLORPOLICIA,  gformat);
			CreateFireGeneral(negocioid, 1, 0);
			return 1;
		}
	}
	return 0;
}

stock CreateFireGeneral(houseid, tipo, create, a = -1)
{
	new intensidad = random(40)+10;
	if (create != 0)
	{
		if (tipo == 0)
		{
			InfoIncendio[a][pI_tipo] = 0;
			InfoIncendio[a][pI_intensidad] = intensidad;
			InfoIncendio[a][pI_propiedad] = houseid;
			InfoIncendio[a][pI_objeto][14] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX], InfoCasa[houseid][cEntradaY], InfoCasa[houseid][cEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][13] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX], InfoCasa[houseid][cEntradaY], InfoCasa[houseid][cEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][12] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX], InfoCasa[houseid][cEntradaY] + 2, InfoCasa[houseid][cEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][11] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] + 2, InfoCasa[houseid][cEntradaY], InfoCasa[houseid][cEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][10] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] + 2, InfoCasa[houseid][cEntradaY] + 2, InfoCasa[houseid][cEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][9] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX], InfoCasa[houseid][cEntradaY] + 2, InfoCasa[houseid][cEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][8] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] + 2, InfoCasa[houseid][cEntradaY], InfoCasa[houseid][cEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][7] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX], InfoCasa[houseid][cEntradaY], InfoCasa[houseid][cEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][6] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX], InfoCasa[houseid][cEntradaY] - 2, InfoCasa[houseid][cEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][5] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] - 2, InfoCasa[houseid][cEntradaY], InfoCasa[houseid][cEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][4] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] - 2, InfoCasa[houseid][cEntradaY] - 2, InfoCasa[houseid][cEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][3] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX], InfoCasa[houseid][cEntradaY] - 2, InfoCasa[houseid][cEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][2] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] - 2, InfoCasa[houseid][cEntradaY], InfoCasa[houseid][cEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][1] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] + 2, InfoCasa[houseid][cEntradaY] + 2, InfoCasa[houseid][cEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][0] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] - 2, InfoCasa[houseid][cEntradaY] - 2, InfoCasa[houseid][cEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
		}
		else if (tipo == 1)
		{
			InfoIncendio[a][pI_tipo] = 1;
			InfoIncendio[a][pI_intensidad] = intensidad;
			InfoIncendio[a][pI_propiedad] = houseid;
			InfoIncendio[a][pI_objeto][14] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX], InfoNegocio[houseid][nEntradaY], InfoNegocio[houseid][nEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][13] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX], InfoNegocio[houseid][nEntradaY], InfoNegocio[houseid][nEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][12] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX], InfoNegocio[houseid][nEntradaY] + 2, InfoNegocio[houseid][nEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][11] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] + 2, InfoNegocio[houseid][nEntradaY], InfoNegocio[houseid][nEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][10] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] + 2, InfoNegocio[houseid][nEntradaY] + 2, InfoNegocio[houseid][nEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][9] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX], InfoNegocio[houseid][nEntradaY] + 2, InfoNegocio[houseid][nEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][8] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] + 2, InfoNegocio[houseid][nEntradaY], InfoNegocio[houseid][nEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][7] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX], InfoNegocio[houseid][nEntradaY], InfoNegocio[houseid][nEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][6] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX], InfoNegocio[houseid][nEntradaY] - 2, InfoNegocio[houseid][nEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][5] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] - 2, InfoNegocio[houseid][nEntradaY], InfoNegocio[houseid][nEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][4] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] - 2, InfoNegocio[houseid][nEntradaY] - 2, InfoNegocio[houseid][nEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][3] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX], InfoNegocio[houseid][nEntradaY] - 2, InfoNegocio[houseid][nEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][2] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] - 2, InfoNegocio[houseid][nEntradaY], InfoNegocio[houseid][nEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][1] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] + 2, InfoNegocio[houseid][nEntradaY] + 2, InfoNegocio[houseid][nEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			InfoIncendio[a][pI_objeto][0] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] - 2, InfoNegocio[houseid][nEntradaY] - 2, InfoNegocio[houseid][nEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
		}
	}
	else
	{
		Loop(id, MAX_INCENDIOS, 1) if (InfoIncendio[id][pI_propiedad] == -1)
		{
			if (tipo == 0)
			{
				InfoIncendio[id][pI_tipo] = 0;
				InfoIncendio[id][pI_intensidad] = intensidad;
				InfoIncendio[id][pI_propiedad] = houseid;
				InfoIncendio[id][pI_objeto][14] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX], InfoCasa[houseid][cEntradaY], InfoCasa[houseid][cEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][13] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX], InfoCasa[houseid][cEntradaY], InfoCasa[houseid][cEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][12] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX], InfoCasa[houseid][cEntradaY] + 2, InfoCasa[houseid][cEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][11] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] + 2, InfoCasa[houseid][cEntradaY], InfoCasa[houseid][cEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][10] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] + 2, InfoCasa[houseid][cEntradaY] + 2, InfoCasa[houseid][cEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][9] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX], InfoCasa[houseid][cEntradaY] + 2, InfoCasa[houseid][cEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][8] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] + 2, InfoCasa[houseid][cEntradaY], InfoCasa[houseid][cEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][7] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX], InfoCasa[houseid][cEntradaY], InfoCasa[houseid][cEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][6] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX], InfoCasa[houseid][cEntradaY] - 2, InfoCasa[houseid][cEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][5] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] - 2, InfoCasa[houseid][cEntradaY], InfoCasa[houseid][cEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][4] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] - 2, InfoCasa[houseid][cEntradaY] - 2, InfoCasa[houseid][cEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][3] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX], InfoCasa[houseid][cEntradaY] - 2, InfoCasa[houseid][cEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][2] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] - 2, InfoCasa[houseid][cEntradaY], InfoCasa[houseid][cEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][1] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] + 2, InfoCasa[houseid][cEntradaY] + 2, InfoCasa[houseid][cEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][0] = CreateDynamicObject(18691, InfoCasa[houseid][cEntradaX] - 2, InfoCasa[houseid][cEntradaY] - 2, InfoCasa[houseid][cEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			}
			else if (tipo == 1)
			{
				InfoIncendio[id][pI_tipo] = 1;
				InfoIncendio[id][pI_intensidad] = intensidad;
				InfoIncendio[id][pI_propiedad] = houseid;
				InfoIncendio[id][pI_objeto][14] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX], InfoNegocio[houseid][nEntradaY], InfoNegocio[houseid][nEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][13] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX], InfoNegocio[houseid][nEntradaY], InfoNegocio[houseid][nEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][12] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX], InfoNegocio[houseid][nEntradaY] + 2, InfoNegocio[houseid][nEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][11] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] + 2, InfoNegocio[houseid][nEntradaY], InfoNegocio[houseid][nEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][10] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] + 2, InfoNegocio[houseid][nEntradaY] + 2, InfoNegocio[houseid][nEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][9] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX], InfoNegocio[houseid][nEntradaY] + 2, InfoNegocio[houseid][nEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][8] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] + 2, InfoNegocio[houseid][nEntradaY], InfoNegocio[houseid][nEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][7] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX], InfoNegocio[houseid][nEntradaY], InfoNegocio[houseid][nEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][6] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX], InfoNegocio[houseid][nEntradaY] - 2, InfoNegocio[houseid][nEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][5] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] - 2, InfoNegocio[houseid][nEntradaY], InfoNegocio[houseid][nEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][4] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] - 2, InfoNegocio[houseid][nEntradaY] - 2, InfoNegocio[houseid][nEntradaZ], 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][3] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX], InfoNegocio[houseid][nEntradaY] - 2, InfoNegocio[houseid][nEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][2] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] - 2, InfoNegocio[houseid][nEntradaY], InfoNegocio[houseid][nEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][1] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] + 2, InfoNegocio[houseid][nEntradaY] + 2, InfoNegocio[houseid][nEntradaZ] + 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
				InfoIncendio[id][pI_objeto][0] = CreateDynamicObject(18691, InfoNegocio[houseid][nEntradaX] - 2, InfoNegocio[houseid][nEntradaY] - 2, InfoNegocio[houseid][nEntradaZ] - 2, 0.0, 0.0, 0.0, 0, 0, -1, 550.0, 550.0);
			}
			//opcion idsql ya creada.
			new query[195];
			if (InfoIncendio[id][pI_IDsql] != 0)
			{
				mysql_format(DBngrp, query, sizeof query, "UPDATE incendios SET Tipo = '%d', Propiedad = '%d' WHERE ID = '%d'", InfoIncendio[id][pI_tipo], InfoIncendio[id][pI_propiedad], InfoIncendio[id][pI_IDsql]);
				mysql_tquery(DBngrp, query);
				id = MAX_INCENDIOS;
				return 1;
			}
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO incendios (Tipo, Propiedad) VALUES ('%d', '%d')", InfoIncendio[id][pI_tipo], InfoIncendio[id][pI_propiedad]);
			mysql_tquery(DBngrp, query, "OnIncendioCreate", "i", id);
			id = MAX_INCENDIOS;
		}
	}
	return 0;
}

forward OnIncendioCreate(id);
public OnIncendioCreate(id)
{
	InfoIncendio[id][pI_IDsql] = cache_insert_id();
	cache_unset_active();
	totalincendios++;
    return 1;
}

// variables de 'garajes.sql' desde 12-04-2021
enum garajeInfo
{
	gID,					// ID en base de datos
	gEspacio,               // Espacio (1 chico - 2 mediano - 3 grande)
	gTipo,                  // Tipo (1 casa - 2 negocio - 3 familia - 4 faccion)
	gPropiedad,             // ID propiedad o fam/fac
	gSeguro,                // Seguro
	Float: gEntradaX,       // Entrada X
	Float: gEntradaY,       // Entrada Y
	Float: gEntradaZ,       // Entrada Z
	Float: gEntradaR,       // Entrada R
	Float: gEntradaX_V,     // Entrada X V
	Float: gEntradaY_V,     // Entrada Y V
	gEntradaInt,            // Entrada Int
	gEntradaVW,             // Entrada VW
	Float: gSalidaX,        // Salida X
	Float: gSalidaY,        // Salida Y
	Float: gSalidaZ,        // Salida Z
	Float: gSalidaR,        // Salida R
	Float: gSalidaVehX,		// Salida veh X
	Float: gSalidaVehY,		// Salida veh Y
	Float: gSalidaVehZ,		// Salida veh Z
	Float: gSalidaVehR,		// Salida veh R
	gSalidaInt,             // Salida Int
	gSalidaVW,              // Salida VW
	//no saved
	Text3D: gEntradaLabel,  // Entrada label
	gEntradaPickup,         // Entrada pickup
	Text3D: gSalidaLabel,   // Salida label
};
new InfoGaraje[MAX_GARAJES][garajeInfo];

PermisosGaraje(playerid, id)
{
	new pes = InfoGaraje[id][gPropiedad];
	switch (InfoGaraje[id][gTipo])
	{
		case 1: { if (PermisosCasa(playerid, pes) != 0) return 1; }
		case 2: { if (PermisosNegocio(playerid, pes) != 0) return 1; }
		case 3: { if (InfoJugador[playerid][jFamMiembro] == pes) return 1; }
		case 4: { if (InfoJugador[playerid][jFacMiembro] == pes) return 1; }
	}
	return 0;
}

forward CargarGarajes();
public CargarGarajes()
{
	new cargaditos = 0;
	Loop(e, MAX_GARAJES, 0)
	{
		InfoGaraje[e][gPropiedad] = -1;
	}
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoGaraje[id][gID]);
		reg_int(tabla, "Espacio", InfoGaraje[id][gEspacio]);
		reg_int(tabla, "Tipo", InfoGaraje[id][gTipo]);
		reg_int(tabla, "Propiedad", InfoGaraje[id][gPropiedad]);
		reg_int(tabla, "Seguro", InfoGaraje[id][gSeguro]);
		reg_float(tabla, "EntradaX", InfoGaraje[id][gEntradaX]);
		reg_float(tabla, "EntradaY", InfoGaraje[id][gEntradaY]);
		reg_float(tabla, "EntradaZ", InfoGaraje[id][gEntradaZ]);
		reg_float(tabla, "EntradaR", InfoGaraje[id][gEntradaR]);
		reg_float(tabla, "EntradaX_V", InfoGaraje[id][gEntradaX_V]);
		reg_float(tabla, "EntradaY_V", InfoGaraje[id][gEntradaY_V]);
		reg_int(tabla, "EntradaInt", InfoGaraje[id][gEntradaInt]);
		reg_int(tabla, "EntradaVW", InfoGaraje[id][gEntradaVW]);
		reg_float(tabla, "SalidaX", InfoGaraje[id][gSalidaX]);
		reg_float(tabla, "SalidaY", InfoGaraje[id][gSalidaY]);
		reg_float(tabla, "SalidaZ", InfoGaraje[id][gSalidaZ]);
		reg_float(tabla, "SalidaR", InfoGaraje[id][gSalidaR]);
		reg_float(tabla, "SalidaVehX", InfoGaraje[id][gSalidaVehX]);
		reg_float(tabla, "SalidaVehY", InfoGaraje[id][gSalidaVehY]);
		reg_float(tabla, "SalidaVehZ", InfoGaraje[id][gSalidaVehZ]);
		reg_float(tabla, "SalidaVehR", InfoGaraje[id][gSalidaVehR]);
		reg_int(tabla, "SalidaInt", InfoGaraje[id][gSalidaInt]);
		reg_int(tabla, "SalidaVW", InfoGaraje[id][gSalidaVW]);
		if (InfoGaraje[id][gID]) totalgarajes++;
		//funcion
		if (InfoGaraje[id][gTipo] != 0)
		{
			CreateDynamicCP(InfoGaraje[id][gEntradaX], InfoGaraje[id][gEntradaY], InfoGaraje[id][gEntradaZ] - 1, 4.0, -1, -1, -1, 5.0);
		}
		else noexitgaraje(id);
	}
	printf("%d garajes dinamicos [SQL: %d] cargados correctamente.", cargaditos, totalgarajes-1);
	return 1;
}

noexitgaraje(id)
{
	if (IsValidDynamic3DTextLabel(InfoGaraje[id][gEntradaLabel]))
	{
		DestroyDynamic3DTextLabel(InfoGaraje[id][gEntradaLabel]);
		InfoGaraje[id][gEntradaLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	if (IsValidDynamic3DTextLabel(InfoGaraje[id][gSalidaLabel]))
	{
		DestroyDynamic3DTextLabel(InfoGaraje[id][gSalidaLabel]);
		InfoGaraje[id][gSalidaLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	InfoGaraje[id][gEntradaLabel] = CreateDynamic3DTextLabel("garaje", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
	InfoGaraje[id][gSalidaLabel] = CreateDynamic3DTextLabel("garaje", -1, -2190.7974, 165.9186, 58.2604, 1.0, .worldid = id, .interiorid = id);
}

GetEspacioGaraje(id)
{
	new name_x[32];
	switch (InfoGaraje[id][gEspacio])
	{
		case 1: alm(name_x, "Chico");
		case 2: alm(name_x, "Mediano");
		case 3: alm(name_x, "Grande");
	}
	return name_x;
}

GetTypeGaraje(id)
{
	new name_x[256], pes = InfoGaraje[id][gPropiedad];
	switch (InfoGaraje[id][gTipo])
	{
		case 1: format(name_x, sizeof name_x, "{44B339}Casa %d", pes);
		case 2: format(name_x, sizeof name_x, "{2486A8}Negocio %d", pes);
		case 3:
		{
			if (InfoFamilia[pes][fTipo] != 0) format(name_x, sizeof name_x, "{D05A27}Familia %s", InfoFamilia[pes][fLogo]);
			else format(name_x, sizeof name_x, "{D05A27}Familia %d", pes);
		}
		case 4: format(name_x, sizeof name_x, "{F0DB0D}Faccion %s", GetLogoFaccion(pes));
	}
	return name_x;
}

LabelPickup_garaje(id, type)
{
	//info
	new location[MAX_ZONE_NAME], info_entrada[470], info_salida[470], exdireccion[215] = "";
	//localizacion
	Get2DZone(location, MAX_ZONE_NAME, InfoGaraje[id][gEntradaX], InfoGaraje[id][gEntradaY], InfoGaraje[id][gEntradaZ]);
	if (InfoGaraje[id][gEntradaVW] == 0 && InfoGaraje[id][gEntradaInt] == 0) format(exdireccion, sizeof exdireccion, "Localizacion: %s", location);
	//entrada label
	format(info_entrada, sizeof info_entrada, "{CCCCCC}({EDBD29}Garaje %d{CCCCCC})\nPropiedad: %s{CCCCCC}\nEspacio: %s\n%s", id, GetTypeGaraje(id), GetEspacioGaraje(id), exdireccion);
	//salida label
	format(info_salida, sizeof info_salida, "{CCCCCC}Salida\n({EDBD29}Garaje %d{CCCCCC})", id);
	//
	if (type == 1) // create
	{
		//delete error
		if (IsValidDynamicPickup(InfoGaraje[id][gEntradaPickup])) { DestroyDynamicPickup(InfoGaraje[id][gEntradaPickup]); }
		if (IsValidDynamic3DTextLabel(InfoGaraje[id][gEntradaLabel]))
		{
			DestroyDynamic3DTextLabel(InfoGaraje[id][gEntradaLabel]);
			InfoGaraje[id][gEntradaLabel] = Text3D:INVALID_3DTEXT_ID;
		}
		if (IsValidDynamic3DTextLabel(InfoGaraje[id][gSalidaLabel]))
		{
			DestroyDynamic3DTextLabel(InfoGaraje[id][gSalidaLabel]);
			InfoGaraje[id][gSalidaLabel] = Text3D:INVALID_3DTEXT_ID;
		}
		InfoGaraje[id][gEntradaLabel] = CreateDynamic3DTextLabel(info_entrada, -1, InfoGaraje[id][gEntradaX], InfoGaraje[id][gEntradaY], InfoGaraje[id][gEntradaZ]+0.35, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoGaraje[id][gEntradaVW], InfoGaraje[id][gEntradaInt], -1);
		InfoGaraje[id][gSalidaLabel] = CreateDynamic3DTextLabel(info_salida, -1, InfoGaraje[id][gSalidaVehX], InfoGaraje[id][gSalidaVehY], InfoGaraje[id][gSalidaVehZ]+0.35, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoGaraje[id][gSalidaVW], InfoGaraje[id][gSalidaInt], -1);
		InfoGaraje[id][gEntradaPickup] = CreateDynamicPickup(19132, 1, InfoGaraje[id][gEntradaX], InfoGaraje[id][gEntradaY], InfoGaraje[id][gEntradaZ], InfoGaraje[id][gEntradaVW], InfoGaraje[id][gEntradaInt]);
	}
	else if (type == 2) // update
	{
		//3d label
		UpdateDynamic3DTextLabelText(InfoGaraje[id][gEntradaLabel], -1, info_entrada);
		UpdateDynamic3DTextLabelText(InfoGaraje[id][gSalidaLabel], -1, info_salida);
	}
}

// variables de 'graffitis.sql' desde 23-04-2021
enum graffitiInfo
{
	grID_sql,						// id db
	gr_Mensaje[256],                // mensaje
	gr_Creador[MAX_PLAYER_NAME],    // creador
	gr_Fecha,                       // fecha de creacionf
	Float: gr_PosX,					// potX
	Float: gr_PosY,					// potY
	Float: gr_PosZ,					// potZ
	Float: gr_RotX,					// rotX
	Float: gr_RotY,					// rotY
	Float: gr_RotZ,					// rotZ
	gr_Interior,					// interior
	gr_VirtualWorld,				// virtualWorld
	gr_Objeto,                      // objeto
};
new InfoGraffiti[MAX_GRAFFITIS][graffitiInfo];

forward CargarGraffitis();
public CargarGraffitis()
{
	//clear
	Loop(x, MAX_GRAFFITIS, 0)
	{
		alm(InfoGraffiti[x][gr_Mensaje], "ninguno");
		alm(InfoGraffiti[x][gr_Creador], "ninguno");
		InfoGraffiti[x][gr_Fecha] = 0;
		InfoGraffiti[x][gr_PosX] = 0.0;
		InfoGraffiti[x][gr_PosY] = 0.0;
		InfoGraffiti[x][gr_PosZ] = 0.0;
		InfoGraffiti[x][gr_RotX] = 0.0;
		InfoGraffiti[x][gr_RotY] = 0.0;
		InfoGraffiti[x][gr_RotZ] = 0.0;
	}
	new cargaditos = 0, pintados = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoGraffiti[id][grID_sql]);
		reg_string(tabla, "Mensaje", InfoGraffiti[id][gr_Mensaje], 256);
		reg_string(tabla, "Creador", InfoGraffiti[id][gr_Creador], MAX_PLAYER_NAME);
		reg_int(tabla, "Fecha", InfoGraffiti[id][gr_Fecha]);
		reg_float(tabla, "PotX", InfoGraffiti[id][gr_PosX]);
		reg_float(tabla, "PotY", InfoGraffiti[id][gr_PosY]);
		reg_float(tabla, "PotZ", InfoGraffiti[id][gr_PosZ]);
		reg_float(tabla, "RotX", InfoGraffiti[id][gr_RotX]);
		reg_float(tabla, "RotY", InfoGraffiti[id][gr_RotY]);
		reg_float(tabla, "RotZ", InfoGraffiti[id][gr_RotZ]);
		reg_int(tabla, "Interior", InfoGraffiti[id][gr_Interior]);
		reg_int(tabla, "VirtualWorld", InfoGraffiti[id][gr_VirtualWorld]);
		if (InfoGraffiti[id][grID_sql]) totalgraffitis++;
		//funcion
		if (InfoGraffiti[id][gr_PosX] != 0.0)
		{
			if (!strcmp(InfoGraffiti[id][gr_Creador], "ninguno", true))
			{
				InfoGraffiti[id][gr_Objeto] = CreateDynamicObject(18665, InfoGraffiti[id][gr_PosX], InfoGraffiti[id][gr_PosY], InfoGraffiti[id][gr_PosZ], InfoGraffiti[id][gr_RotX], InfoGraffiti[id][gr_RotY], InfoGraffiti[id][gr_RotZ], -1, 0, -1, 6000.0);
			}
			else
			{
				InfoGraffiti[id][gr_Objeto] = CreateDynamicObject(18665, InfoGraffiti[id][gr_PosX], InfoGraffiti[id][gr_PosY], InfoGraffiti[id][gr_PosZ], InfoGraffiti[id][gr_RotX], InfoGraffiti[id][gr_RotY], InfoGraffiti[id][gr_RotZ], -1, 0, -1, 6000.0);
				new graffitiText[128];
				alm(graffitiText, InfoGraffiti[id][gr_Mensaje]);
				strreplace(graffitiText, "(n)", "\n");
				strreplace(graffitiText, "(a)", "{0000FF}"); //azul
				strreplace(graffitiText, "(b)", "{FFFFFF}"); //blanco
				strreplace(graffitiText, "(am)", "{FFFF00}"); //amarillo
				strreplace(graffitiText, "(v)", "{00C200}"); //verde
				strreplace(graffitiText, "(ne)", "{000000}"); //negro
				strreplace(graffitiText, "(na)", "{FFBF00}"); //naranja
				strreplace(graffitiText, "(r)", "{FF0000}"); //rojo
				strreplace(graffitiText, "(ce)", "{00FFFF}"); //celeste
				SetDynamicObjectMaterialText(InfoGraffiti[id][gr_Objeto], 0, graffitiText, OBJECT_MATERIAL_SIZE_256x256, "Arial", 32, 1, 0xFFFFFFFF, 0, 1);
				pintados++;
			}
			cargaditos++;
		}
	}
	printf("%d graffitis dinamicos [Pintados: %d] [SQL: %d] cargados correctamente.", cargaditos, pintados, totalgraffitis-1);
	return 1;
}


//<=================================> funciones:
funcion split(const strsrc[], strdest[][], delimiter)
{
	new i, li, aNum, len;
	while (i <= strlen(strsrc))
	{
		if (strsrc[i] == delimiter || i == strlen(strsrc))
		{
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i + 1;
			aNum++;
		}
		i++;
	}
	return 1;
}

Dar_Skin(playerid, skin)
{
	InfoJugador[playerid][jSkin] = skin;
	SetPlayerSkin(playerid, skin);
	guardar_int_mysql("cuentas", "Skin", InfoJugador[playerid][jID], InfoJugador[playerid][jSkin]);
}

#define GetPlayerCash(%0) InfoJugador[%0][jDinero]
stock GivePlayerCash(playerid, money, reason[])
{
	new money_new = 0, gregistros[256], gformat[190];
	//dise?o + log normal
	new f_string[32];
	format(f_string, sizeof f_string, "%d", money);
	if (!isnumeric(f_string))
	{
	    format(gregistros, sizeof gregistros, "[-] %s (SQL ID %d) perdio $%s (%s)", InfoJugador[playerid][jNombre_Apellido], InfoJugador[playerid][jID], diner_coma(money), reason);
		format(gformat, sizeof gformat, "~r~~h~ %s$", diner_coma(money));
		PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
	}
	else
	{
	    format(gregistros, sizeof gregistros, "[+] %s (SQL ID %d) recibio $%s (%s)", InfoJugador[playerid][jNombre_Apellido], InfoJugador[playerid][jID], diner_coma(money), reason);
		format(gformat, sizeof gformat, "~g~~h~ %s$", diner_coma(money));
		PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
	}
	if (GetTextDraw[playerid] == 0)
	{
		GetTextDraw[playerid] = 1;
		PlayerTextDrawSetStringEx(playerid, draw_money[playerid], gformat);
		PlayerTextDrawShow(playerid, draw_money[playerid]);
		SetTimerEx("HideDrawMoney", 4000, false, "d", playerid);
	}
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], gregistros, 0);
	//ceder dinero
	money_new = InfoJugador[playerid][jDinero] + money;
	InfoJugador[playerid][jDinero] = money_new;
	GivePlayerMoney(playerid, money);
	guardar_int_mysql("cuentas", "Dinero", InfoJugador[playerid][jID], money_new);
	return 1;
}

forward HideDrawMoney(playerid);
public HideDrawMoney(playerid)
{
	GetTextDraw[playerid] = 0;
	PlayerTextDrawHide(playerid, draw_money[playerid]);
}

funcion ActualizarHambre(playerid)
{
	new gfomraty[190];
	if (InfoJugador[playerid][jHambre] < MIN_HAMBRE) InfoJugador[playerid][jHambre] = MIN_HAMBRE;
	if (InfoJugador[playerid][jHambre] == 60.0) _Mensaje(playerid, 4, "FFFFFF", "Empiezas a tener mucha hambre. Deberias comer algo.");
	else if (InfoJugador[playerid][jHambre] == 50.0) _Mensaje(playerid, 4, "FFFFFF", "Empiezas a tener mucha hambre. Deberias comer algo.");
	else if (InfoJugador[playerid][jHambre] == 40.0) _Mensaje(playerid, 4, "FFFFFF", "Empiezas a tener mucha hambre. Deberias comer algo.");
	else if (InfoJugador[playerid][jHambre] == 31.0) _Mensaje(playerid, 4, "FFFFFF", "Empiezas a tener mucha hambre. Deberias comer algo.");
	if (InfoJugador[playerid][jHambre] <= MIN_HAMBRE * 2)
	{
		new mareo = (5000 * MIN_HAMBRE) / InfoJugador[playerid][jHambre];
		SetPlayerDrunkLevel(playerid, mareo);
	    _Mensaje(playerid, 4, "FFFFFF", "Empiezas a tener hambre. Deberias comer algo.");
	}
	SetPlayerProgressBarValue(playerid, BarraHambre[playerid], InfoJugador[playerid][jHambre]);
	UpdatePlayerProgressBar(playerid, BarraHambre[playerid]);
	guardar_int_mysql("cuentas", "Hambre", InfoJugador[playerid][jID], InfoJugador[playerid][jHambre]);
	format(gfomraty, sizeof gfomraty,"%d", InfoJugador[playerid][jHambre]);
	PlayerTextDrawSetString(playerid, TD_PantallaHG[playerid][4], gfomraty);
	return 1;
}

funcion ActualizarSed(playerid)
{
    new gfomraty[190];
	if (InfoJugador[playerid][jSed] < MIN_SED) InfoJugador[playerid][jSed] = MIN_SED;
	if (InfoJugador[playerid][jSed] == 60.0) _Mensaje(playerid, 4, "FFFFFF", "Empiezas a tener mucha sed. Deberias beber algo.");
	else if (InfoJugador[playerid][jSed] == 50.0) _Mensaje(playerid, 4, "FFFFFF", "Empiezas a tener mucha sed. Deberias beber algo.");
	else if (InfoJugador[playerid][jSed] == 40.0) _Mensaje(playerid, 4, "FFFFFF", "Empiezas a tener mucha sed. Deberias beber algo.");
	else if (InfoJugador[playerid][jSed] == 30.0) _Mensaje(playerid, 4, "FFFFFF", "Empiezas a tener mucha sed. Deberias beber algo.");
	if (InfoJugador[playerid][jSed] <= MIN_SED * 2)
	{
		new mareo = (5000 * MIN_SED) / InfoJugador[playerid][jSed];
		_Mensaje(playerid, 4, "FFFFFF", "Empiezas a tener sed. Deberias beber algo.");
		SetPlayerDrunkLevel(playerid, mareo);
	}
	SetPlayerProgressBarValue(playerid, BarraSed[playerid], InfoJugador[playerid][jSed]);
	UpdatePlayerProgressBar(playerid, BarraSed[playerid]);
	guardar_int_mysql("cuentas", "Sed", InfoJugador[playerid][jID], InfoJugador[playerid][jSed]);
    format(gfomraty, sizeof gfomraty,"%d", InfoJugador[playerid][jSed]);
    PlayerTextDrawSetString(playerid, TD_PantallaHG[playerid][3], gfomraty);
	return 1;
}

funcion SPEC_SetPlayerVirtualWorld(playerid, vw)
{
	SetPlayerVirtualWorld(playerid, vw);
	if (vw == 0)
	{
		DentroNegocio[playerid] = -1;
		DentroCasa[playerid] = -1;
	}
	return 1;
}
#define SetPlayerVirtualWorld SPEC_SetPlayerVirtualWorld

static const ObjetosInteriorC[][] =
{
	{1528, 100, "Graffiti A"},
	{1531, 100, "Graffiti B"},
	{18659, 100, "Graffiti C"},
	{28660, 100, "Graffiti D"},
	{18661, 100, "Graffiti E"},
	{18662, 100, "Graffiti F"},
	{18663, 100, "Graffiti G"},
	{18664, 100, "Graffiti H"},
	{18665, 100, "Graffiti I"},
	{18666, 100, "Graffiti J"},
	{18667, 100, "Graffiti K"},
	{1212, 100, "Dinero"},
	{1578, 100, "Paquete verde"},
	{1579, 100, "Paquete azul"},
	{1580, 100, "Paquete rojo"},
	{1930, 100, "Fichas 1"},
	{1931, 100, "Fichas 2"},
	{1932, 100, "Fichas 3"},
	{1978, 100, "Mesa casino"},
	{1979, 100, "Ruleta casino"},
	{2337, 100, "Lavadora"},//Ba?o
	{2097, 100, "Bañera sprunk"},
	{2526, 100, "Bañera"},
	{2522, 100, "Bañera 2"},
	{2516, 100, "Bañera 3"},
	{2527, 100, "Ducha"},
	{2517, 100, "Ducha 2"},
	{2525, 100, "Inodoro"},
	{2528, 100, "Inodoro 2"},
	{2514, 100, "Inodoro 3"},
	{1208, 100, "Lavaropa"},
	{1825, 100, "Mesa y sillas"},//Mesas
	{643, 100, "Mesa y sillas"},
	{2188, 100, "Mesa de blackyack"},
	{2964, 100, "Mesa de pool"},
	{19474, 100, "Mesa de cartas"},
	{2030, 100, "Mesa de marmol"},
	{2086, 100, "Mesa de vidrio"},
	{2112, 100, "Mesa de madera A"},
	{2115, 100, "Mesa de madera B"},
	{2118, 100, "Mesa de marmol 2"},
	{2085, 100, "Mesa de vidrio 2"},
	{2762, 100, "Mesa grande"},
	{2763, 100, "Mesa pequeña"},
	{2747, 100, "Mesa pequeña"},
	{2644, 100, "Mesa pequeña"},
	{11717, 100, "Sillon pro"},//sofas/sillones
	{2356, 100, "Silla de escritorio"},//sillas
	{1715, 100, "Silla A"},
	{1720, 100, "Silla B"},
	{1714, 100, "Silla C"},
	{1739, 100, "Silla D"},
	{1811, 100, "Silla E"},
	{1810, 100, "Silla F"},
	{2079, 100, "Silla G"},
	{2636, 100, "Silla H"},
	{2788, 100, "Silla I"},
	{1716, 100, "Silla J"},
	{1721, 100, "Silla K"},
	{1805, 100, "Silla L"},
	{2079, 100, "Silla M"},
	{2120, 100, "Silla N"},
	{2121, 100, "Silla ñ"},
	{2096, 100, "Silla O"},
	{1796, 100, "Cama individual"},//camas
	{2563, 100, "Cama matrimonial2"},
	{2566, 100, "Cama matrimonial"},
	{1700, 100, "Cama 1"},
	{1701, 100, "Cama 2"},
	{1725, 100, "Cama 3"},
	{1745, 100, "Cama 4"},
	{1793, 100, "Cama 5"},
	{1794, 100, "Cama 6"},
	{1795, 100, "Cama 7"},
	{1796, 100, "Cama 8"},
	{1797, 100, "Cama 9"},
	{1798, 100, "Cama 10"},
	{1799, 100, "Cama 11"},
	{1800, 100, "Cama 12"},
	{1801, 100, "Cama 13"},
	{1802, 100, "Cama 14"},
	{1803, 100, "Cama 15"},
	{2090, 100, "Cama 16"},
	{2298, 100, "Cama azul"},
	{2299, 100, "Cama marron"},
	{2300, 100, "Cama amarilla"},
	{2301, 100, "Cama amarilla-roja"},
	{2302, 100, "Cama Blanca-azul"},
	{2339, 100, "Horno"},//cocina
	{19590, 100, "Cuchillo"},
	{2132, 100, "Fregadera Blanca"},
	{2141, 100, "Nevera"},
	{1665, 100, "Cenicero 1"},
	{1510, 100, "Cenicero 2"},
	{2149, 100, "Microondas"},
	{2421, 100, "Microondas 2"},
	{19584, 100, "Olla de cocina"},
	{19586, 100, "Espatula de cocina"},
	{19585, 100, "Sarten de cocina"},
	{1738, 100, "Estufa pared"},
	{2822, 100, "Platos"},
	{2820, 100, "Platos"},
	{2135, 100, "Horno + extractor Beige"},
	{2136, 100, "Fregadera Beige"},
	{2336, 100, "Fregadera"},
	{2415, 100, "Freidora"},
	{2417, 100, "Freidora 2"},
	{2002, 100, "Filtro de agua"},
	{1808, 100, "Filtro de agua 2"},
	{2013, 100, "Parte de cocina 1"},
	{2014, 100, "Parte de cocina 2"},
	{2015, 100, "Parte de cocina 3"},
	{2016, 100, "Parte de cocina 4"},
	{2018, 100, "Parte de cocina 5"},
	{2019, 100, "Parte de cocina 6"},
	{2134, 100, "Cocina blanca Parte 1"},
	{2133, 100, "Cocina blanca Parte 2"},
	{2131, 100, "Cocina blanca Parte 3"},
	{2130, 100, "Fregadera Roja"},
	{2128, 100, "Nevera Roja"},
	{2127, 100, "Cocina roja Parte 1"},
	{2129, 100, "Cocina roja Parte 2"},
	{2294, 100, "Cocina roja Parte 3"},
	{2137, 100, "Cocina Beige Parte 1"},
	{2139, 100, "Cocina Beige Parte 2"},
	{2140, 100, "Cocina Beige Parte 3"},
	{2160, 100, "Fregadera de madera"},
	{2159, 100, "Cocina madera parte 1"},
	{2158, 100, "Cocina madera parte 2"},
	{2157, 100, "Cocina madera parte 3"},
	{14720, 100, "Cocina completa"},
	{2515, 100, "Lava manos"},
	{2518, 100, "Lava manos 2"},
	{2524, 100, "Lava manos"},
	{19580, 100, "Pizza"},//comida
	{19579, 100, "Pan"},
	{19578, 100, "Banana"},
	{19577, 100, "Tomate"},
	{19575, 100, "Manzana"},
	{19574, 100, "Naranja"},
	{19572, 100, "Caja de pizza"},
	{19571, 100, "Caja de pizza 2"},
	{19570, 100, "Leche envasada"},
	{19569, 100, "Leche envasada en carton"},
	{19568, 100, "Comida empaquetada"},
	{19565, 100, "Nachos en paquete"},
	{19563, 100, "Jugo de naranja"},
	{19564, 100, "Jugo de manzana"},
	{19562, 100, "Cereales"},
	{19094, 100, "Hamburguesa A"},
	{19811, 100, "Hamburguesa B"},
	{2703, 100, "Hamburguesa C"},
	{2768, 100, "Hamburguesa D"},
	{2702, 100, "Hamburguesa E"},
	{19623, 100, "Camara de fotos"},//eletronico
	{19893, 100, "Laptop abierta"},
	{19894, 100, "Laptop cerrada"},
	{2165, 100, "PC + Escritorio"},
	{2028, 100, "Consola CJD500"},
	{2202, 100, "Impresora"},
	{2313, 100, "TV + DVD Player"},
	{2627, 100, "Cinta para correr"},
	{2630, 100, "Bicicleta Fija"},
	{2872, 100, "Maquina de juegos A"},
	{2778, 100, "Maquina de juegos B"},
	{2779, 100, "Maquina de juegos C"},
	{19317, 100, "Guitarra electrica A"},
	{19318, 100, "Guitarra electrica B"},
	{19319, 100, "Guitarra electrica C"},
	{19609, 100, "Bateria"},
	{19610, 100, "Microfono"},
	{19611, 100, "Sostiene Microfono"},
	{19612, 100, "Planta"},
	{19615, 100, "Planta 2"},
	{19616, 100, "Parlante R"},
	{19617, 100, "Disco dorado R"},
	{19614, 100, "Amplificador de guitarra"},
	{19613, 100, "Amplificador de guitarra"},
	{2499, 100, "Cometa"},//accesorios
	{1649, 100, "Vidrio"},
	{1828, 100, "Alfombra Leopardo"},
	{2815, 100, "Alfombra A"},
	{2818, 100, "Alfombra B"},
	{2817, 100, "Alfombra C"},
	{2842, 100, "Alfombra D"},
	{2847, 100, "Alfombra E"},
	{19166, 100, "Cuadro de San Andreas"},
	{19172, 100, "Cuadro de Santa Maria B."},
	{19173, 100, "Cuadro de San Francisco"},
	{1409, 100, "Tacho de basura"},
	{19618, 100, "Caja fuerte A"},
	{19619, 100, "Caja fuerte B"},
	{2332, 100, "Caja fuerte C"},
	{628, 100, "Maseta A"},//
	{630, 100, "Maseta B"},
	{638, 100, "Maseta C"},
	{949, 100, "Maseta D"},
	{1360, 100, "Maseta E"},
	{1361, 100, "Maseta F"},
	{15038, 100, "Maseta G"},
	{2253, 100, "Maseta 1"},
	{2252, 100, "Maseta 2"},
	{2251, 100, "Maseta 3"},
	{2250, 100, "Maseta 4"},
	{2249, 100, "Maseta 5"},
	{2247, 100, "Maseta 6"},
	{2245, 100, "Maseta 7"},
	{2244, 100, "Maseta 8"},
	{2240, 100, "Maseta 9"},
	{2574, 100, "Escritorio + Caja fuerte"},//cuarto
	{16779, 100, "Ventilador"},
	{2161, 100, "Estanteria"},//estantes
	{2467, 100, "Estanteria cristal A"},
	{2385, 100, "Estanteria cristal B"},
	{2211, 100, "Estanteria cristal C"},
	{2210, 100, "Estanteria cristal D"},
	{1744, 100, "Estante"},
	{1742, 100, "Mueble+libros"},
	{1502, 100, "Puerta A"},//puertas
	{1491, 100, "Puerta B"},
	{1492, 100, "Puerta C"},
	{1494, 100, "Puerta D"},
	{1498, 100, "Puerta blanca"},
	{1536, 100, "Puerta negra"},
	{19859, 100, "Puerta amarilla"},
    {16151, 100, "Bar"},
	{19625, 100, "Cigarro 1"},
	{1485, 100, "Cigarro 2"},
	{19622, 100, "Escoba"},
	{2025, 100, "Armario"},
	{2167, 100, "Armario 2"},
	{2576, 100, "Armario 3"},
	{2689, 100, "Ropa gris"},
	{2704, 100, "Ropa negro con naranja"},
	{2705, 100, "Ropa blanca"},
	{2706, 100, "Ropa roja"},
	{1736, 100, "Cabeza de animal"},
	{1985, 100, "Bolsa de boxeo"},
	{2289, 100, "Cuadro de ciudad"},
	{2288, 100, "Cuadro de tabla"},
	{2287, 100, "Cuadro de barcos"},
	{2286, 100, "Cuadro de barco grande"},
	{2284, 100, "Cuadro de iglesia"},
	{2282, 100, "Cuadro de bosque"},
	{2281, 100, "Cuadro de bosque 2"},
	{2280, 100, "Cuadro de bosque 3"},
	{2279, 100, "Cuadro de bosque 4"},
	{2277, 100, "Cuadro de gato"},
	{2276, 100, "Cuadro de puente"},
	{2275, 100, "Cuadro de frutas"},
	{2274, 100, "Cuadro de flor"},
	{2273, 100, "Cuadro de flores"},
	{2271, 100, "Cuadro de blanco"},
	{2270, 100, "Cuadro de hojas"},
	{2269, 100, "Cuadro de lago"},
	{2268, 100, "Cuadro de gato 2"},
	{2267, 100, "Cuadro grande de barco"},
	{2266, 100, "Cuadro de ciudad SF"},
	{2265, 100, "Cuadro de desierto"},
	{2264, 100, "Cuadro de playa"},
	{2262, 100, "Cuadro de ciudad SF"},
	{2261, 100, "Cuadro de puente SF"},
	{2259, 100, "Cuadro de slenderman"},
	{2258, 100, "Cuadro de ciudad LA"},
	{2257, 100, "Cuadro de colores"},
	{2256, 100, "Cuadro de palmeras"},
	{2255, 100, "Cuadro de puta"},
	{2108, 100, "Lampara A"},
	{2076, 100, "Lampara B"},
	{2075, 100, "Lampara C"},
	{2074, 100, "Lampara D"},
	{2073, 100, "Lampara E"},
	{2072, 100, "Lampara F"},
	{2071, 100, "Lampara G"},
	{2069, 100, "Lampara H"},
	{2026, 100, "Lampara I"},
	{2023, 100, "Lampara J"},
	{1734, 100, "Lampara K"},
	{1731, 100, "Lampara L"},
	{1962, 100, "Disco azul"},
	{1961, 100, "Disco verde"},
	{1960, 100, "Disco morado"},
	{1768, 100, "Sofa A"},
	{1766, 100, "Sofa B"},
	{1764, 100, "Sofa C"},
	{1763, 100, "Sofa D"},
	{1761, 100, "Sofa E"},
	{1760, 100, "Sofa F"},
	{1757, 100, "Sofa G"},
	{1756, 100, "Sofa H"},
	{1753, 100, "Sofa I"},
	{1713, 100, "Sofa J"},
	{1712, 100, "Sofa K"},
	{1710, 100, "Sofa L"},
	{1709, 100, "Sofa M"},
	{1707, 100, "Sofa N"},
	{1706, 100, "Sofa ñ"},
	{1703, 100, "Sofa O"},
	{2572, 100, "2 sofas + mesa"},
	{2571, 100, "2 sofas + mesa"},
	{1702, 100, "Sillon 1"},
	{1754, 100, "Sillon 2"},
	{1755, 100, "Sillon 3"},
	{1758, 100, "Sillon 4"},
	{1759, 100, "Sillon 5"},
	{1762, 100, "Sillon 6"},
	{1765, 100, "Sillon 7"},
	{1769, 100, "Sillon 8"},
	{11689, 100, "Sillon 9"},
	{2608, 100, "Estante"},
	{1718, 100, "Consola nintendo"},
	{1719, 100, "Consola play"},
	{2296, 100, "TV con estantes"},
	{11707, 100, "Toallero para baño"},
	{11709, 100, "Lavamanos para baño"},
	{11712, 100, "Cruz religiosa"},
	{11722, 100, "Envase de ketchup"},
	{11723, 100, "Envase de mostaza"},
	{11725, 100, "Chimenea"},
	{11726, 100, "Candelabro de techo"},
	{11728, 100, "Telefono de pared"},
	{11733, 100, "Caballito"},
	{11734, 100, "Silla amacadora"},
	{11738, 100, "Botiquin"},
	{11743, 100, "Cafetera"},
	{11744, 100, "Plato"},
	{11745, 100, "Bolso/Maleta"},
	{19835, 100, "Vaso de cafe"},
	{19824, 100, "Botellas A"},
	{19823, 100, "Botellas B"},
	{19822, 100, "Botellas C"},
	{19821, 100, "Botellas D"},
	{19820, 100, "Botellas E"},
	{1551, 100, "Botellas F"},
	{1520, 100, "Botellas G"},
	{1517, 100, "Botellas H"},
	{1512, 100, "Botellas I"},
	{19819, 100, "Copas A"},
	{19818, 100, "Copas B"},
	{1667, 100, "Copas C"},
	{19814, 100, "Enchufes de pared"},
	{19813, 100, "Enchufes de pared 2"},
	{19808, 100, "Teclado de PC"},
	{19807, 100, "Telefono de escritorio"},
	{19806, 100, "Araña(Lampara de techo)"},
	{19804, 100, "Candado"},
	{19792, 100, "Tarjeta de debito"},
	{19825, 100, "Reloj de pared"},
	{19632, 100, "Leña encendida"},
	{19787, 100, "TV PLASMA"},
	{2312, 100, "Television A"},
	{2316, 100, "Television B"},
	{2317, 100, "Television C"},
	{2322, 100, "Television D"},
	{2596, 100, "Television E"},
	{2595, 100, "Television F"},
	{14532, 100, "Television G"},
	{1747, 100, "Television H"},
	{1748, 100, "Television I"},
	{1749, 100, "Television J"},
	{1450, 100, "Television K"},
	{1751, 100, "Television L"},
	{1752, 100, "Television M"},
	{1791, 100, "Television N"},
	{7192, 100, "Television ñ"},
	{1782, 100, "DVD A"},
	{1783, 100, "DVD B"},
	{1788, 100, "DVD C"},
	{1790, 100, "DVD D"},
	{1785, 100, "Planta DVD"},
	{1787, 100, "Xbox negro"},
	{1786, 100, "Xbox 360"},
	{2103, 100, "Estereo A"},
	{2226, 100, "Estereo B"},
	{1809, 100, "Equipo de musica A"},
	{1839, 100, "Equipo de musica B"},
	{1840, 100, "Parlante"},
	{1841, 100, "Parlante 2"},
	{2102, 100, "Parlantes"},
	{2229, 100, "Parlante grande"},
	{2233, 100, "Parlante 3"},
	{2230, 100, "Parlante 4"},
	{336, 100, "Bate"},
	{339, 100, "Katana"},
	{341, 100, "Moto sierra"},
	{342, 100, "Bomba"},
	{344, 100, "Molotov"},
	{345, 100, "Misil"},
	{346, 100, "Colt .45"},
	{347, 100, "Colt .45 con silenciador"},
	{348, 100, "Eagle"},
	{349, 100, "Escopeta"},
	{350, 100, "Escopeta doble"},
	{351, 100, "Escopeta combate"},
	{352, 100, "Uzi"},
	{372, 100, "Tec"},
	{353, 100, "MP5"},
	{355, 100, "Ak-47"},
	{356, 100, "M4"},
	{357, 100, "Rifle de caza"},
	{358, 100, "Francotirador"},
	{359, 100, "Basuka"},
	{360, 100, "Basuka mortal"},
	{361, 100, "Lanza llamas"},
	{362, 100, "Minigun"},
	{370, 100, "Jetpack"},
	{371, 100, "Mochila"},
	{373, 100, "Chaleco"},
	{19354, 100, "Pared media negra"},
	{19355, 100, "Pared media gris"},
	{19356, 100, "Pared media madera"},
	{19357, 100, "Pared media blanca"},
	{19358, 100, "Pared media blanca negro"},
	{19361, 100, "Pared media naranja"},
	{19384, 100, "Marco puerta negro"},
	{19385, 100, "Marco puerta gris"},
	{19386, 100, "Marco puerta madera"},
	{19387, 100, "Marco puerta blanco"},
	{19388, 100, "Marco puerta blanca negra"},
	{19390, 100, "Marco puerta naranja"},
	{19400, 100, "Marco ventana negro"},
	{19401, 100, "Marco ventana gris"},
	{19402, 100, "Marco ventana madera"},
	{19403, 100, "Marco ventana blanco"},
	{19404, 100, "Marco ventana blanca negra"},
	{19407, 100, "Marco ventana naranja"},
	{19427, 100, "Pared chica negra"},
	{19428, 100, "Pared chica gris"},
	{19429, 100, "Pared chica madera"},
	{19430, 100, "Pared chica blanca"},
	{19431, 100, "Pared chica negra blanca"},
	{19434, 100, "Pared chica naranja"},
	{19446, 100, "Pared grande negra"},
	{19447, 100, "Pared grande gris"},
	{19448, 100, "Pared grande madera"},
	{19449, 100, "Pared grande blanca"},
	{19450, 100, "Pared grande blanca negra"},
	{19453, 100, "Pared grande naranja"}
};

static const ObjetosInteriorN[][] =
{
	{1212, 100, "Dinero"},
	{1578, 100, "Paquete verde"},
	{1579, 100, "Paquete azul"},
	{1580, 100, "Paquete rojo"},
	{1930, 100, "Fichas 1"},
	{1931, 100, "Fichas 2"},
	{1932, 100, "Fichas 3"},
	{1978, 100, "Mesa casino"},
	{1979, 100, "Ruleta casino"},
    {2725, 100, "Mesa de Narguile"},
    {2726, 100, "Narguile"},
    {19128, 100, "Pista de color"},
    {16151, 100, "Bar"},
	{2188, 100, "Mesa de blackyack"},
	{1825, 100, "Mesa y sillas"},
	{643, 100, "Mesa y sillas"},
	{11717, 100, "Sillon pro"},
	{2623, 100, "Registradora"},
	{19632, 100, "Leña"},
	{19640, 100, "Estante vacio"},
	{19621, 100, "Aceite"},
	{19622, 100, "Escoba"},
	{19623, 100, "Camara"},
	{19624, 100, "Maleta marron"},
	{19626, 100, "Pala"},
	{19627, 100, "Llave"},
	{19561, 100, "Producto A"},
	{19562, 100, "Producto B"},
	{19563, 100, "Producto C"},
	{19564, 100, "Producto D"},
	{19565, 100, "Producto E"},
	{19566, 100, "Producto F"},
	{19567, 100, "Producto G"},
	{19568, 100, "Producto H"},
	{19569, 100, "Producto I"},
	{19570, 100, "Producto J"},
	{19636, 100, "Frutas A"},
	{19637, 100, "Frutas B"},
	{19638, 100, "Frutas C"},
	{19893, 100, "Laptop abierta"},
	{19894, 100, "Laptop cerrada"},
	{19326, 100, "3 for 2"},
	{1988, 100, "Estante de cereales"},
	{1983, 100, "Estante de cereales 2"},
	{1842, 100, "Congelador"},
	{1884, 100, "Estante de productos"},
	{1848, 100, "Estante de productos 2"},
	{1991, 100, "Estante de licores"},
	{1996, 100, "Estante de licores 2"},
	{1984, 100, "Caja registradora"},
	{2871, 100, "Estante de cereales 3"},
	{1775, 100, "Maquina de sprunk"},
	{2872, 100, "Maquina de juegos"},
	{2779, 100, "Maquina de juegos"},
	{1349, 100, "Carrito de compra"},
	{19572, 100, "Caja pissh"},
	{19592, 100, "Canasta de compra"},
	{19825, 100, "Reloj sprunk"},
	{1498, 100, "Puerta blanca"},
	{1536, 100, "Puerta negra"},
	{19859, 100, "Puerta amarilla"},
	{1561, 100, "Puerta 24/7"},
	{11706, 100, "Bote de basura"},
	{11711, 100, "Exit"},
	{2002, 100, "Filtro de agua"},
	{1808, 100, "Filtro de agua 2"},
	{19328, 100, "Cartel murky"},
	{19329, 100, "Cartel 24/7"},
	{19608, 100, "Lugar de musica"},
	{19609, 100, "Bateria"},
	{19610, 100, "Microfono"},
	{19611, 100, "Sostiene Microfono"},
	{19612, 100, "Planta"},
	{19613, 100, "Amplificador de guitarra"},
	{19614, 100, "Amplificador de guitarra"},
	{19615, 100, "Planta 2"},
	{19616, 100, "Parlante"},
	{19617, 100, "Disco de oro"},
	{1718, 100, "Consola nintendo"},
	{1719, 100, "Consola play"},
	{1840, 100, "Parlante"},
	{2028, 100, "Consola CJD500"},
	{19787, 100, "TV PLASMA"},
	{2312, 100, "Television A"},
	{2316, 100, "Television B"},
	{2317, 100, "Television C"},
	{2322, 100, "Television D"},
	{2596, 100, "Television E"},
	{2595, 100, "Television F"},
	{14532, 100, "Television G"},
	{1747, 100, "Television H"},
	{1748, 100, "Television I"},
	{1749, 100, "Television J"},
	{1450, 100, "Television K"},
	{1751, 100, "Television L"},
	{1752, 100, "Television M"},
	{1791, 100, "Television N"},
	{7192, 100, "Television ñ"},
	{1782, 100, "DVD A"},
	{1783, 100, "DVD B"},
	{1788, 100, "DVD C"},
	{1790, 100, "DVD D"},
	{1785, 100, "Planta DVD"},
	{1787, 100, "Xbox negro"},
	{1786, 100, "Xbox 360"},
	{2103, 100, "Estereo A"},
	{2226, 100, "Estereo B"},
	{1809, 100, "Equipo de musica A"},
	{1839, 100, "Equipo de musica B"},
	{1840, 100, "Parlante"},
	{1841, 100, "Parlante 2"},
	{2102, 100, "Parlantes"},
	{2229, 100, "Parlante grande"},
	{2233, 100, "Parlante 3"},
	{2230, 100, "Parlante 4"},
	{2063, 100, "Estante de hierro"},
	{1989, 100, "Estante pequeño vacio"},
	{918, 100, "Bombona"},
	{1650, 100, "Bidon de gasolina"},
	{1644, 100, "Mostaza"},
	{2040, 100, "Caja de municion"},
	{1218, 100, "Tanque toxico"},
	{2340, 100, "Nevera"},
	{1208, 100, "Lavadora"},
	{2337, 100, "Lavadora 2"},
	{2713, 100, "Retrete"},
	{2843, 100, "Ropa"},
	{2845, 100, "Ropa 2"},
	{2846, 100, "Ropa 3"},
	{2844, 100, "Ropa 4"},
	{2835, 100, "Alfombra"},
	{2816, 100, "Revista"},
	{1432, 100, "Sillas + mesa"},
	{11689, 100, "Sillon"},
	{11690, 100, "Mesa"},
	{11691, 100, "Mesa 2"},
	{11688, 100, "Parlante"},
	{11687, 100, "Banco"},
	{2350, 100, "Banco 2"},
	{11686, 100, "Repartidor de alcohol"},
	{2310, 100, "Silla"},
	{2636, 100, "Silla 2"},
	{2638, 100, "Silla 3"},
	{2452, 100, "Dispensadora sprunk"},
	{2637, 100, "Mesa"},
	{2635, 100, "Mesa pequeña"},
	{2764, 100, "Mesa pequeña 2"},
	{2807, 100, "Silla"},
	{2639, 100, "Sillon"},
	{19580, 100, "Pizza"},
	{2682, 100, "Menu pizzeria"},
	{2645, 100, "Menu pizzeria 2"},
	{2453, 100, "Movedor de pizza"},
	{2646, 100, "Anuncio pizza"},
	{2668, 100, "Anuncio pizza 2"},
	{2665, 100, "Anuncio pizza 3"},
	{2451, 100, "Freidora"},
	{2417, 100, "Freidora 2"},
	{2415, 100, "Freidora 3"},
	{19558, 100, "Gorra de pizza"},
	{19571, 100, "Caja de pizza"},
	{2688, 100, "Anuncio fire blanket"},
	{2770, 100, "Deposito de basura"},
	{2762, 100, "Mesa CB"},
	{2763, 100, "Mesa pequeña CB"},
	{2766, 100, "Anuncio CB"},
	{2768, 100, "Hamburguesa CB"},
	{2769, 100, "Burrito CB"},
	{2765, 100, "Anuncio CB 2"},
	{2424, 100, "Meson CB"},
	{2422, 100, "PC CB"},
	{2748, 100, "Sillon CB"},
	{2746, 100, "Sillon CB 2"},
	{1716, 100, "Banco RD"},
	{2361, 100, "Congelador RD"},
	{2714, 100, "Cartel Open"},
	{2730, 100, "Cartel de ropa"},
	{2729, 100, "Cartel de ropa 2"},
	{2720, 100, "Cartel de ropa 3"},
	{2722, 100, "Cartel de ropa 4"},
	{2731, 100, "Cartel de ropa 5"},
	{2383, 100, "Ropa amarilla"},
	{2374, 100, "Camisas de cuadro azul"},
	{2399, 100, "Franelas R gris"},
	{2382, 100, "Pantalones"},
	{2375, 100, "Estante de ropa ZIP"},
	{2708, 100, "Estante vacio"},
	{2403, 100, "Estante gigante vacio"},
	{2385, 100, "Estante de vidrio"},
	{2387, 100, "Pantalones 2"},
	{2392, 100, "Pantalones 3"},
	{2381, 100, "Monos"},
	{2394, 100, "Camisas variada"},
	{2371, 100, "Sostenedor"},
	{2372, 100, "Sostenedor 2"},
	{2373, 100, "Sostenedor 3"},
	{2698, 100, "Cajas pro + estante"},
	{2622, 100, "Sostendor Prolaps"},
	{2625, 100, "Estante vacio 2"},
	{2654, 100, "Cajas de zapatos"},
	{2694, 100, "Caja de zapato"},
	{2652, 100, "Cajas Pro"},
	{2704, 100, "Chaqueta naranja 12"},
	{2689, 100, "Chaqueta gris Rockstar"},
	{2705, 100, "Franelilla R"},
	{2706, 100, "Franelilla D"},
	{2389, 100, "Chaquetas blancas + rojo"},
	{2396, 100, "Chaquetetas negras"},
	{2397, 100, "Pantalones gris"},
	{2398, 100, "Monos azules"},
	{2399, 100, "Chaquetas R gris"},
	{2401, 100, "Monos rojos"},
	{2390, 100, "Monos verdes"},
	{2656, 100, "Anuncio PRO"},
	{2732, 100, "Anuncio ZIP"},
	{2733, 100, "Anuncio ZIP 2"},
	{2734, 100, "Anuncio ZIP 3"},
	{2735, 100, "Anuncio ZIP 4"},
	{2583, 100, "Revistas XXX"},
	{2582, 100, "Revistas Hardcore"},
	{2578, 100, "Revistas XXX + estante"},
	{2585, 100, "Juguetes + estante"},
	{2681, 100, "Maquina de juegos"},
	{2581, 100, "Estante de peliculas HC"},
	{19354, 100, "Pared media negra"},
	{19355, 100, "Pared media gris"},
	{19356, 100, "Pared media madera"},
	{19357, 100, "Pared media blanca"},
	{19358, 100, "Pared media blanca negro"},
	{19361, 100, "Pared media naranja"},
	{19384, 100, "Marco puerta negro"},
	{19385, 100, "Marco puerta gris"},
	{19386, 100, "Marco puerta madera"},
	{19387, 100, "Marco puerta blanco"},
	{19388, 100, "Marco puerta blanca negra"},
	{19390, 100, "Marco puerta naranja"},
	{19400, 100, "Marco ventana negro"},
	{19401, 100, "Marco ventana gris"},
	{19402, 100, "Marco ventana madera"},
	{19403, 100, "Marco ventana blanco"},
	{19404, 100, "Marco ventana blanca negra"},
	{19407, 100, "Marco ventana naranja"},
	{19427, 100, "Pared chica negra"},
	{19428, 100, "Pared chica gris"},
	{19429, 100, "Pared chica madera"},
	{19430, 100, "Pared chica blanca"},
	{19431, 100, "Pared chica negra blanca"},
	{19434, 100, "Pared chica naranja"},
	{19446, 100, "Pared grande negra"},
	{19447, 100, "Pared grande gris"},
	{19448, 100, "Pared grande madera"},
	{19449, 100, "Pared grande blanca"},
	{19450, 100, "Pared grande blanca negra"},
	{19453, 100, "Pared grande naranja"}
};

//<=================================> vehiculos usados
enum v_info
{
	uPrecioVeh,
	uModeloVeh,
	uSeguro,
	uPaintJob,
	uColor_1,
	uColor_2,
	uDanioSuperficie,
	uDanioPuertas,
	uDanioLuces,
	uDanioRuedas,
	Float: uVida,
	uModificaciones[MAX_MODIFICACIONES],
	uGasolina,
	uStereo,
	uNeon,
}
new i_Usado[MAX_VEH_USADO][v_info];

funcion CargarVehUsados()
{
	if (!fexist("VehiculosUsados.rp")) return 1;
	new szFileStr[1024], File: iFileHandle = fopen("VehiculosUsados.rp", io_read),id;
	while (id < sizeof(i_Usado) && fread(iFileHandle, szFileStr))
	{
		sscanf(szFileStr, "p<|>iiiiiiiiiifiiiiiiiiiiiiiiiiii",
		i_Usado[id][uPrecioVeh],
		i_Usado[id][uModeloVeh],
		i_Usado[id][uSeguro],
		i_Usado[id][uPaintJob],
		i_Usado[id][uColor_1],
		i_Usado[id][uColor_2],
		i_Usado[id][uDanioSuperficie],
		i_Usado[id][uDanioPuertas],
		i_Usado[id][uDanioLuces],
		i_Usado[id][uDanioRuedas],
		i_Usado[id][uVida],
		i_Usado[id][uModificaciones][0],
		i_Usado[id][uModificaciones][1],
		i_Usado[id][uModificaciones][2],
		i_Usado[id][uModificaciones][3],
		i_Usado[id][uModificaciones][4],
		i_Usado[id][uModificaciones][5],
		i_Usado[id][uModificaciones][6],
		i_Usado[id][uModificaciones][7],
		i_Usado[id][uModificaciones][8],
		i_Usado[id][uModificaciones][9],
		i_Usado[id][uModificaciones][10],
		i_Usado[id][uModificaciones][11],
		i_Usado[id][uModificaciones][12],
		i_Usado[id][uModificaciones][13],
		i_Usado[id][uModificaciones][14],
		i_Usado[id][uGasolina],
		i_Usado[id][uStereo],
		i_Usado[id][uNeon]);
		if (i_Usado[id][uModeloVeh] >= 400)
		{
			++id;
		}
	}
	printf(" Sistema de vehiculos usados cargado (%d).",id);
	return fclose(iFileHandle);
}

ActualizarUVeh()
{
	new szFileStr[512], File: fHandle = fopen("VehiculosUsados.rp", io_write);
	for (new id; id < MAX_VEH_USADO; id++)
	{
		format(szFileStr, sizeof(szFileStr), "%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\r\n",
		i_Usado[id][uPrecioVeh],
		i_Usado[id][uModeloVeh],
		i_Usado[id][uSeguro],
		i_Usado[id][uPaintJob],
		i_Usado[id][uColor_1],
		i_Usado[id][uColor_2],
		i_Usado[id][uDanioSuperficie],
		i_Usado[id][uDanioPuertas],
		i_Usado[id][uDanioLuces],
		i_Usado[id][uDanioRuedas],
		i_Usado[id][uVida],
		i_Usado[id][uModificaciones][0],
		i_Usado[id][uModificaciones][1],
		i_Usado[id][uModificaciones][2],
		i_Usado[id][uModificaciones][3],
		i_Usado[id][uModificaciones][4],
		i_Usado[id][uModificaciones][5],
		i_Usado[id][uModificaciones][6],
		i_Usado[id][uModificaciones][7],
		i_Usado[id][uModificaciones][8],
		i_Usado[id][uModificaciones][9],
		i_Usado[id][uModificaciones][10],
		i_Usado[id][uModificaciones][11],
		i_Usado[id][uModificaciones][12],
		i_Usado[id][uModificaciones][13],
		i_Usado[id][uModificaciones][14],
		i_Usado[id][uGasolina],
		i_Usado[id][uStereo],
		i_Usado[id][uNeon]);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

// sistema de concesionaria 12-11-2020

#define Buy_Vehicle_Show 750

enum mainCS
{
	csModelo,		// id vehiculo samp
	csTipo,			// tipo
	csMoneda,		// 0: $ - 1: coins
	csPrecio,       // precio
};

static const InfoConcesionario[][mainCS] =
{
	{0, 0, 0, 0},
 	// tipo 1:
    {521, 1, 1, 20},
	{581, 1, 0, 40000},
	{461, 1, 0, 40000},
	{586, 1, 0, 12000},
	{468, 1, 0, 200000},
	{463, 1, 0, 45000},
	{471, 1, 0, 50000},
	{448, 1, 0, 12000},
	{462, 1, 0, 10000},
	{509, 1, 0, 5000},
	{510, 1, 0, 6000},
	{481, 1, 0, 7000},
	{522, 1, 1, 25},
	// tipo 2:
	{426, 2, 0, 35000},
	{566, 2, 0, 33500},
	{445, 2, 0, 27300},
	{474, 2, 0, 18500},
	{517, 2, 0, 16000},
	{518, 2, 0, 19000},
	{543, 2, 0, 9000},
	{575, 2, 0, 16500},
	{550, 2, 0, 14000},
	{567, 2, 0, 56010},
	{554, 2, 0, 180000},
	{576, 2, 0, 18000},
	{419, 2, 0, 18095},
	{402, 2, 0, 850000},
	{421, 2, 0, 22000},
	{466, 2, 0, 15000},
	{467, 2, 0, 13500},
	{475, 2, 0, 17000},
	{542, 2, 0, 13000},
	{529, 2, 0, 15000},
	{551, 2, 0, 36000},
	{546, 2, 0, 17700},
	{547, 2, 0, 19000},
	{600, 2, 0, 16000},
	{458, 2, 0, 46000},
	{516, 2, 0, 26000},
	// tipo 3:
    {429, 3, 1, 25},
	{415, 3, 1, 30},
	{477, 3, 1, 25},
	{555, 3, 0, 700000},
	{587, 3, 0, 600000},
	{480, 3, 0, 700000},
	{506, 3, 1, 25},
	{559, 3, 0, 600000},
	{560, 3, 0, 800000},
	{562, 3, 0, 600000},
	{558, 3, 0, 600000},
	{545, 3, 0, 50000},
	{541, 3, 1, 30},
	{424, 3, 1, 25},
	{434, 3, 1, 30},
	{444, 3, 1, 50},
	{494, 3, 1, 30},
	{603, 3, 1, 10},
	// tipo 4:
	{496, 4, 0, 45000},
	{565, 4, 0, 200000},
	{579, 4, 0, 800000},
	{535, 4, 0, 140000},
	{500, 4, 0, 165000},
	{418, 4, 0, 9000},
	{440, 4, 0, 8000},
	{459, 4, 0, 10000},
	{482, 4, 0, 190000},
	{489, 4, 0, 250000},
	{498, 4, 0, 22000},
	{413, 4, 0, 11000},
	{423, 4, 0, 9200},
	{404, 4, 0, 10000},
	{483, 4, 0, 13080},
    {495, 4, 1, 30},
	{589, 4, 0, 12000},
	{508, 4, 0, 22000},
	{400, 4, 0, 250000},
	{437, 4, 1, 30},
	// tipo 5:
	{417, 5, 0, 150000000},
	{469, 5, 1, 20},
	{487, 5, 1, 45},
	{511, 5, 1, 30},
	{513, 5, 0, 10000000},
	{519, 5, 1, 50},
	{553, 5, 0, 150000000},
	{577, 5, 0, 150000000},
	{592, 5, 0, 1500000},
	{593, 5, 0, 5000000},
	{515, 5, 1, 35},
	// tipo 6:
	{401, 6, 0, 12000},
	{405, 6, 0, 25000},
	{412, 6, 0, 11250},
	{436, 6, 0, 9000},
    {439, 6, 1, 5},
	{478, 6, 0, 7500},
	{491, 6, 0, 20000},
	{492, 6, 0, 25000}
};

enum Textdraws_Enum
{
    Text:RoboNegocio[5]
};
new Textdraws[Textdraws_Enum];

//<=================================> anti-balas - jorgito
enum antichitplayers
{
	BalasW
}
new Anti[MAX_PLAYERS][antichitplayers];

//gasolineras fix (08/04/2021) by edinsonwalker
enum gasInfo
{
	gsID,
	gsNegocio,
	Float: gsPosX,
	Float: gsPosY,
	Float: gsPosZ,
	gsInterior,
	gsVirtualWorld,
	Text3D: gsLabel,
	gsPickup,
};
new InfoGas[MAX_GASOLINERAS][gasInfo];

ID_Gas(playerid)
{
	Loop(id, totalgasolineras, 1) if (InfoGas[id][gsPosX] != 0.0)
	{
		if (IsPlayerInRangeOfPoint(playerid, 2.5, InfoGas[id][gsPosX], InfoGas[id][gsPosY], InfoGas[id][gsPosZ]) && GetPlayerInterior(playerid) == InfoGas[id][gsInterior] && GetPlayerVirtualWorld(playerid) == InfoGas[id][gsVirtualWorld])
		{
			return id;
		}
	}
	return -1;
}

forward CargarGasolineras();
public CargarGasolineras()
{
	new cargaditos = 0;
	//clean
	Loop(x, MAX_GASOLINERAS, 0)
	{
		InfoGas[x][gsNegocio] = -1;
	}
	//load
	Loop(tabla, cache_num_rows(), 0)
	{
		new id = tabla+1;
		reg_int(tabla, "ID", InfoGas[id][gsID]);
		reg_int(tabla, "Negocio", InfoGas[id][gsNegocio]);
		reg_float(tabla, "PosX", InfoGas[id][gsPosX]);
		reg_float(tabla, "PosY", InfoGas[id][gsPosY]);
		reg_float(tabla, "PosZ", InfoGas[id][gsPosZ]);
		reg_int(tabla, "Interior", InfoGas[id][gsInterior]);
		reg_int(tabla, "VirtualWorld", InfoGas[id][gsVirtualWorld]);
		if (InfoGas[id][gsID]) totalgasolineras++;
		if (InfoGas[id][gsPosX] != 0.0)
		{
			cargaditos++;
			Articulos_Gasolinera(id);
		}
	}
	printf("%d gasolineras [SQL: %d] cargadas correctamente.", cargaditos, totalgasolineras-1);
	return 1;
}

Articulos_Gasolinera(id)
{
	if (IsValidDynamic3DTextLabel(InfoGas[id][gsLabel]))
	{
		DestroyDynamic3DTextLabel(InfoGas[id][gsLabel]);
		InfoGas[id][gsLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	DestroyDynamicPickup(InfoGas[id][gsPickup]);
	InfoGas[id][gsPickup] = CreateDynamicPickup(1650, 1, InfoGas[id][gsPosX], InfoGas[id][gsPosY], InfoGas[id][gsPosZ], InfoGas[id][gsVirtualWorld], InfoGas[id][gsInterior]);
	new string[550];
	format(string, sizeof string, "Gasolineria (%d)\n{FFFFFF}Negocio: {3FB74E}%s\n\n{FFFFFF}Toca la {FFFF00}'BOCINA' {FFFFFF}para llenar el tanque.", id, InfoNegocio[InfoGas[id][gsNegocio]][nNombre]);
	InfoGas[id][gsLabel] = CreateDynamic3DTextLabel(string, 0x3F84B7FF, InfoGas[id][gsPosX], InfoGas[id][gsPosY], InfoGas[id][gsPosZ], 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, InfoGas[id][gsVirtualWorld], InfoGas[id][gsInterior], -1);
	return 1;
}

//<=================================> sistema de accesorios
enum AccesoriosEnum
{
	ModeloAccesorio,
	PrecioAccesorio,
	NombreAccesorio[36],
};

static const AccesoriosPD[][AccesoriosEnum] =
{
	{19801, 70, "Pasamontañas"},
	{19773, 50, "Pistolera"},
	{19904, 150, "Chaleco reflector"},
	{19942, 60, "Radio portatil"},
	{19775, 25, "Placa"},
	{19141, 250, "Casco tactico"},
	{19142, 300, "Chaleco tactico"},
	{18636, 70, "Gorra negra police"},
	{19099, 70, "Sombrero negro"},
	{19100, 70, "Sombrero marron"},
	{18637, 250, "Escudo antidisturbios"},
	{19161, 130, "Gorra negra con logo"},
	{19162, 130, "Gorra azul con logo"},
	{19200, 150, "Casco de Motorista"},
	{19138, 80, "Gafas negras"},
	{19139, 80, "Gafas rojas"},
	{19140, 80, "Gafas azules"},
	{19472, 120, "Mascara gas"},
	{19347, 40, "Estrella"},
	{19515, 255, "Chaleco tactico gris"},
	{19777, 255, "Parche F.B.I"},
	{19514, 150, "Casco gris"},
	{19521, 200, "Gorra unica."},
	{18642, 20, "Taser"},
	{368, 12, "Vision nocturna"}

};

static const Accesorios[][AccesoriosEnum] =
{
	{18976, 12, "Casco motrocross"},
	{18979, 12, "Casco rosa"},
	{18978, 12, "Casco blanco"},
	{368, 12, "Vision nocturna"},
    {19801, 70, "Pasamontañas"},
	{19773, 50, "Pistolera"},
	{19777, 255, "Parche F.B.I"},
	{19904, 150, "Chaleco reflector"},
	{19942, 60, "Radio portatil"},
	{11712, 60, "Cruz de la iglesia"},
	{2045, 60, "Bate con clavos"},
	{19775, 25, "Placa"},
	{19141, 250, "Casco Tactico"},
	{19142, 300, "Chaleco Tactico"},
	{18636, 70, "Gorra negra police"},
	{19099, 70, "Sombrero negro"},
	{19100, 70, "Sombrero marron"},
	{18637, 250, "Escudo antidisturbios"},
	{19161, 130, "Gorra negra con logo"},
	{19162, 130, "Gorra azul con logo"},
	{19200, 150, "Casco de Motorista"},
	{19138, 80, "Gafas negras"},
	{19139, 80, "Gafas rojas"},
	{19140, 80, "Gafas azules"},
	{19472, 120, "Mascara gas"},
	{19347, 40, "Estrella"},
	{1276, 14, "Totem"},
	{19515, 255, "Chaleco tactico gris"},
	{19514, 150, "Casco gris"},
	{19521, 200, "Gorra unica."},
	{1254, 15, "Calavera"},
	{19320, 15, "Calabaza"},
	{18642, 20, "Taser"},
	{18640, 7, "Peluca 1"},
	{18975, 9, "Peluca 2"},
	{19136, 20, "Peluca 3"},
	{19274, 14, "Peluca 4"},
	{18632, 2, "Caña Pesca"},
	{18638, 5, "Casco de minero"},
	{19093, 4, "Gorra blanca"},
	{19160, 5, "Gorra amarilla"},
	{18639, 6, "Sombrero"},
	{18891, 5, "Bandana 1"},
	{18892, 5, "Bandana 2"},
	{18893, 5, "Bandana 3"},
	{18894, 5, "Bandana 4"},
	{18895, 5, "Bandana 5"},
	{18896, 5, "Bandana 6"},
	{18897, 5, "Bandana 7"},
	{18898, 5, "Bandana 8"},
	{18899, 5, "Bandana 9"},
	{18900, 5, "Bandana 10"},
	{18901, 7, "Bandana 11"},
	{18902, 7, "Bandana 12"},
	{18903, 7, "Bandana 13"},
	{18904, 7, "Bandana 14"},
	{18905, 7, "Bandana 15"},
	{18906, 7, "Bandana 16"},
	{18907, 7, "Bandana 17"},
	{18908, 7, "Bandana 18"},
	{18909, 7, "Bandana 19"},
	{18910, 7, "Bandana 20"},
	{18911, 10, "Bandana 21"},
	{18912, 10, "Bandana 22"},
	{18913, 10, "Bandana 23"},
	{18914, 10, "Bandana 24"},
	{18915, 10, "Bandana 25"},
	{18916, 10, "Bandana 26"},
	{18917, 10, "Bandana 27"},
	{18918, 10, "Bandana 28"},
	{18919, 10, "Bandana 29"},
	{18920, 10, "Bandana 30"},
	{19487, 10, "Sombrero VIP"},
	{19488, 10, "Sombrero VIP 2"},
	{18921, 5, "Boina 1"},
	{18922, 5, "Boina 2"},
	{18923, 7, "Boina 3"},
	{18924, 8, "Boina 4"},
	{18925, 8, "Boina 5"},
	{19557, 8, "Mascara sexy"},
	{11704, 8, "Mascara demonio"},
	{360, 8, "Objeto premium"},
	{370, 8, "Jetpack"},
	{371, 8, "Mochila"},
	{19554, 25, "Capucha"},
	{19067, 3, "Capucha 2"},
	{19068, 3, "Capucha 3"},
	{19069, 3, "Capucha 4"},
	{19528, 30, "Gorro de Bruja"},
	{19623, 25, "Camara"},
	{19627, 25, "Llave"},
	{19555, 25, "Guante Boxeo L"},
	{19556, 25, "Guante Boxeo R"},
	{18952, 10, "Casco Boxeo"},
	{19137, 15, "GorraCluckinBell"},
	{19330, 8, "Casco Bomb"},
	{19331, 9, "Casco Bomb2"},
	{19317, 10, "Guitarra"},
	{19318, 10, "GuitarraX"},
	{19319, 12, "XFireGuitarra"},
	{1210, 5, "Maleta"},
	{19421, 4, "Audifonos 1"},
	{19422, 4, "Audifonos 2"},
	{19423, 4, "Audifonos 3"},
	{19424, 4, "Audifonos 4"},
	{19558, 4, "Gorra pizzero"},
	{19559, 6, "Mochila"},
	{19517, 6, "Cabello 1"},
	{19077, 6, "Cabello 2"},
	{19624, 41, "Maleta de mano"},
	{19330, 5 ,"sombrerodefuego"},
	{1242, 100, "Chaleco"},
	{19036, 2, "Mascara 1"},
	{19037, 2, "Mascara 2"},
	{19038, 2, "Mascara 3"},
	{19163, 25, "Mascara S3X"},
	{19064, 9, "Gorro santa 1"},
	{19065, 12, "Gorro santa 2"},
	{19066, 14, "Gorro santa 3"},
	{18645, 15, "Casco de moto"},
	{18926, 2, "Gorra 1"},
	{18927, 2, "Gorra 2"},
	{18928, 2, "Gorra 3"},
	{18929, 2, "Gorra 4"},
	{18930, 2, "Gorra 5"},
	{18931, 2, "Gorra 6"},
	{18932, 2, "Gorra 7"},
	{18933, 2, "Gorra 8"},
	{18934, 2, "Gorra 9"},
	{18935, 2, "Gorra 10"},
	{18939, 7, "Gorra 11"},
	{18940, 7, "Gorra 12"},
	{18941, 7, "Gorra 13"},
	{18942, 4, "Gorra 14"},
	{18955, 7, "Gorra 15"},
	{18956, 7, "Gorra 16"},
	{18957, 7, "Gorra 17"},
	{18958, 7, "Gorra 18"},
	{18959, 7, "Gorra 19"},
	{18960, 10, "Gorra 20"},
	{18953, 12, "Gorra 21"},
	{18954, 7, "Gorra 22"},
	{18943, 4, "Gorra 23"},
	{18961, 10, "Gorra 24"},
	{18966, 5, "Gorra 25"},
	{18967, 5, "Gorra 26"},
	{18968, 6, "Gorra 27"},
	{18969, 6, "Gorra 28"},
	{18936, 5, "Casco 1"},
	{18937, 7, "Casco 2"},
	{18938, 8, "Casco 3"},
	{18944, 3, "Sombrero 1"},
	{18945, 3, "Sombrero 2"},
	{18946, 3, "Sombrero 3"},
	{18947, 3, "Sombrero 4"},
	{18948, 3, "Sombrero 5"},
	{18949, 3, "Sombrero 6"},
	{18950, 3, "Sombrero 7"},
	{18951, 3, "Sombrero 8"},
	{18962, 12, "Sombrero 9"},
	{18971, 7, "Sombrero 10"},
	{18972, 5, "Sombrero 11"},
	{18973, 1, "Sombrero 12"},
	{18970, 5, "Sombrero 13"},
	{19006, 7, "Lentes 1"},
	{19007, 7, "Lentes 2"},
	{19008, 7, "Lentes 3"},
	{19009, 7, "Lentes 4"},
	{19010, 7, "Lentes 4"},
	{19011, 7, "Lentes 6"},
	{19012, 7, "Lentes 7"},
	{19013, 7, "Lentes 8"},
	{19014, 7, "Lentes 9"},
	{19015, 7, "Lentes 10"},
	{19016, 7, "Lentes 11"},
	{19017, 7, "Lentes 12"},
	{19018, 7, "Lentes 13"},
	{19019, 7, "Lentes 14"},
	{19020, 7, "Lentes 15"},
	{19021, 7, "Lentes 16"},
	{19022, 7, "Lentes 17"},
	{19023, 7, "Lentes 18"},
	{19024, 7, "Lentes 19"},
	{19025, 7, "Lentes 20"},
	{19026, 7, "Lentes 21"},
	{19027, 7, "Lentes 22"},
	{19028, 7, "Lentes 23"},
	{19029, 7, "Lentes 24"},
	{19030, 7, "Lentes 25"},
	{19031, 7, "Lentes 26"},
	{19032, 7, "Lentes 27"},
	{19033, 7, "Lentes 28"},
	{19034, 7, "Lentes 29"},
	{19035, 7, "Lentes 30"},
	{19039, 8, "Reloj 1"},
	{19040, 8, "Reloj 2"},
	{19041, 8, "Reloj 3"},
	{19057, 25, "Caja regalo"},
	{1550, 25, "Bolsa de dinero"},
	{19527, 25, "Caldera"},
	{19078, 25, "Loro"},
	{19042, 8, "Reloj 4"},
	{19043, 8, "Reloj 5"},
	{19044, 8, "Reloj 6"},
	{19045, 8, "Reloj 7"},
	{19046, 8, "Reloj 8"},
	{19047, 8, "Reloj 9"},
	{19048, 8, "Reloj 10"},
	{19049, 8, "Reloj 11"},
	{19050, 8, "Reloj 12"},
	{19051, 8, "Reloj 13"},
	{19052, 8, "Reloj 14"},
	{19053, 8, "Reloj 15"},
	{18641, 10, "Linterna"},
	{19095, 8, "Sombrero vaquero 2"},
	{19096, 7, "Sombrero vaquero 3"},
	{19097, 6, "Sombrero vaquero 4"},
	{19098, 6, "Sombrero vaquero 5"},
	{19553, 2, "Sombrero de paja"},
	{19101, 15, "Casco militar 1"},
	{19102, 15, "Casco militar 2"},
	{19103, 15, "Casco militar 3"},
	{19104, 15, "Casco militar 4"},
	{19105, 15, "Casco militar 5"},
	{19106, 15, "Casco militar 6"},
	{19107, 15, "Casco militar 7"},
	{19108, 15, "Casco militar 8"},
	{19109, 15, "Casco militar 9"},
	{19110, 15, "Casco militar 10"},
	{19111, 15, "Casco militar 11"},
	{19112, 15, "Casco militar 12"}

};

enum accCaid
{
	AccID,
	Float:AccX,
	Float:AccY,
	Float:AccZ,
	AccVWorld,
	AccInterior,
	aHueso,
	Float: aPosicionX,
	Float: aPosicionY,
	Float: aPosicionZ,
	Float: aRotacionX,
	Float: aRotacionY,
	Float: aRotacionZ,
	Float: aEscalaX,
	Float: aEscalaY,
	Float: aEscalaZ,
	aMochila,
};
new InfoCaido[MAX_OBJETOS_S][accCaid], AccCaido[MAX_OBJETOS_S];
//<=================================> posiciones:
new Float:_Granjero[26][3] =
{
	{-329.8441,-1557.6462,17.1252},
	{-234.1303,-1548.5472,6.3998},
	{-213.3647,-1471.5482,9.1731},
	{-330.6235,-1470.2892,15.6810},
	{-333.9123,-1512.1113,16.0053},
	{-264.0076,-1469.2531,5.0508},
	{-160.0505,-1415.3773,3.9964},
	{-167.2669,-1304.8627,5.1608},
	{-318.7726,-1315.9666,10.3838},
	{-286.0480,-1369.3938,10.4001},
	{-326.8901,-1429.5435,16.1370},
	{-333.9123,-1512.1113,16.0053},
	{-282.6288,-1466.4514,6.3875},
	{-218.7042,-1516.6606,8.2762},
	{-281.3156,-1555.7562,6.9667},
	{-167.2669,-1304.8627,5.1608},
	{-318.7726,-1315.9666,10.3838},
	{-286.0480,-1369.3938,10.4001},
	{-326.8901,-1429.5435,16.1370},
	{-282.6288,-1466.4514,6.3875},
	{-218.7042,-1516.6606,8.2762},
	{-281.3156,-1555.7562,6.9667},
	{-288.0921,-1526.8507,8.6386},
	{-286.0480,-1369.3938,10.4001},
	{-347.0992,-1504.7065,22.2383},
	{-369.2457,-1464.7102,26.7027}
};

new Float:_OOCp[4][4] =
{
	{1523.8583,-43.5685,1002.1310},
	{1523.8583,-43.5685,1002.1310},
	{1523.8583,-43.5685,1002.1310},
	{1523.8583,-43.5685,1002.1310}
};

new Float:_COMISARIAp[4][3] =
{
	{223.9050,110.5000,999.0156},
	{223.9050,110.5000,999.0156},
	{223.9050,110.5000,999.0156},
	{223.9050,110.5000,999.0156}
};

new Float:_PFp[4][3] =
{
	{188.2428,1913.2661,17.6721},
	{229.6464,1902.8188,17.6481},
	{214.4664,1874.8922,17.6406},
	{203.7212,1895.0477,17.6406}
};

// sistema de llamadas
LlamarTelefono(playerid, numero)
{
	if (numero == InfoJugador[playerid][jTelefono]) return ShowInfoForPlayer(playerid, "No te puedes llamar a ti mismo.", 2000);
	// 911
	if (numero == 911)
	{
		if (InfoJugador[playerid][jDutyPD] != 0) return ShowInfoForPlayer(playerid, "No puedes llamar a la policia estando de servicio.", 2000);
		EnLlamada[playerid] = 911;
		new Cops = 0;
		foreach(Player, i) if (IsPlayerConnectedEx(i) && InfoJugador[i][jFamMiembro] == 1)
		{
			SendClientMessageEx(i, 0x77c7ffff, "[Central]: Una llamada esta siendo transferida al departamento de emergencias. ((/centralita para coger el telefono))");
			Cops++;
		}
		if (Cops == 0)
		{
			SendClientMessage(playerid, 0x77c7ffFF, "[Central]: {FFFFFF}En estos momentos nuestras lineas estan saturadas ((no hay LAPD/LAES en servicio)).");
			EnLlamada[playerid] = 0;
			return 1;
		}
		SendClientMessage(playerid, 0x77c7ffFF, "[Central]: Espere mientras le pasamos al departamento policial...");
		return 1;
	}
	// 305
	else if(numero == 305)
	{
		if (InfoJugador[playerid][jFamMiembro] == 1000) return ShowInfoForPlayer(playerid, "No puedes llamar a LA Network siento parte de ella.", 2000);
		if ( _sanCall != -1) return ShowInfoForPlayer(playerid, "El numero al que llama se encuentra ocupado.", 2000);
		EnLlamada[playerid] = 305;
		new repors = 0;
		foreach(Player, i) if (IsPlayerConnectedEx(i) && InfoJugador[i][jFamMiembro] == 3)
		{
			SendClientMessageEx(i, 0xEFFF00FF, "* Llamada entrante del %d, escribe /conectar [numero]", InfoJugador[playerid][jTelefono]);
			repors++;
		}
		if (repors == 0)
		{
			SendClientMessageEx(playerid, 0xFFFFFFFF, "En estos momentos no se encuentran reporteros en la linea.");
			EnLlamada[playerid] = 0;
			return 1;
		}
		SendClientMessageEx(playerid, 0xFFFFFFFF, "Llamando al 305, numero de LA Network...");
		return 1;
	}
	// 108
	else if (numero == 108)
	{
		EnLlamada[playerid] = 108;
		SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Estas llamando al servicio grua de North America ROLEPLAY, espera un momento...");
		SetTimerEx("LlamarGrua",3000, false, "i", playerid);
		return 1;
	}
	// jugadores
	new playerid2 = -1;
	foreach(Player, x) if (IsPlayerConnectedEx(x) && InfoJugador[x][jTelefono] == numero)
	{
		playerid2 = x;
		break;
	}
	if (playerid2 == -1) return ShowInfoForPlayer(playerid, "~r~El numero que ha marcado no existe o no esta disponible.", 2000);
	if (EnLlamada[playerid2] != 0 || PersonaEnLlamada[playerid2] != -1) return ShowInfoForPlayer(playerid, "El numero que ha marcado ya esta en una ~r~llamada.", 2000);
	if (B_Telefono[playerid2] != 0) return ShowInfoForPlayer(playerid, "Ese numero de telefono esta apagado.", 2000);
	AccionesRol(playerid2, 0, "le empieza a sonar el telefono.");
	SendClientMessageEx(playerid2, 0x00C200FF, "* Llamada entrante del %d, escribe /atender para responder al telefono.", InfoJugador[playerid][jTelefono]);
	SendClientMessageEx(playerid, 0xFFFFFFFF, "Llamando al numero %d.", numero);
	new Float: cx, Float: cy, Float: cz;
	GetPlayerPos(playerid, cx, cy, cz);
	PlayerPlaySound(playerid, 3600, cx, cy, cz);
	GetPlayerPos(playerid2, cx, cy, cz);
	PlayerPlaySound(playerid2, 3600, cx, cy, cz);
	ToqueLlamada[playerid2] = 0;
	PersonaEnLlamada[playerid] = playerid2;
	PersonaEnLlamada[playerid2] = playerid;
	EnLlamada[playerid] = 1;
	ToqueLlamadaTimer[playerid2] = SetTimerEx("HaciendoLlamada", 15000, true, "i", playerid2);
	return 1;
}

ColgarTelefono(playerid)
{
	new oyente = PersonaEnLlamada[playerid];
	if (EnLlamada[playerid] == 1)
	{
		EnLlamada[playerid] = 0;
		SendClientMessageEx(playerid, 0xFFFFFFFF, "Has colgado");
		SendClientMessageEx(oyente, 0xFFFFFFFF, "Tienes una llamada perdida del %d.", InfoJugador[playerid][jTelefono]);
		KillTimer(ToqueLlamadaTimer[oyente]);
		ToqueLlamada[oyente] = 0;
		PersonaEnLlamada[oyente] = -1;
		PersonaEnLlamada[playerid] = -1;
		return 1;
	}
	if (EnLlamada[playerid] == 2 || EnLlamada[playerid] == 3)
	{
		SendClientMessageEx(playerid, 0xFFFFFFFF, "Colgaste la llamada.");
		SendClientMessageEx(oyente, 0xFFFFFFFF, "Han colgado la llamada.");
		if (EnLlamada[playerid] == 3)
		{
			SendClientMessageEx(playerid, 0xFFFFFFFF, "Coste de la llamada: 1$");
			InfoJugador[playerid][jSaldo] -= 1;
			guardar_int_mysql("cuentas", "Saldo", InfoJugador[playerid][jID], InfoJugador[playerid][jSaldo]);
		}
		if (EnLlamada[oyente] == 3)
		{
			SendClientMessageEx(oyente, 0xFFFFFFFF, "Coste de la llamada: 1$");
			InfoJugador[oyente][jSaldo] -= 1;
			guardar_int_mysql("cuentas", "Saldo", InfoJugador[oyente][jID], InfoJugador[oyente][jSaldo]);
		}
		EnLlamada[playerid] = 0;
		EnLlamada[oyente] = 0;
		PersonaEnLlamada[oyente] = -1;
		PersonaEnLlamada[playerid] = -1;
		return 1;
	}
	if (EnLlamada[playerid] == 911)
	{
		EnLlamada[playerid] = 0;
		SendClientMessageEx(playerid, 0xFFFFFFFF, "Colgaste la llamada.");
	}
	if (EnLlamada[playerid] == 108)
	{
		EnLlamada[playerid] = 0;
		SendClientMessageEx(playerid, 0xFFFFFFFF, "Colgaste la llamada.");
	}
	if (EnLlamada[playerid] == 912)
	{
		SendClientMessageEx(playerid, 0xFFFFFFFF, "Colgaste la llamada.");
		SendClientMessageEx(oyente, 0xFFFFFFFF, "Han colgado la llamada.");
		EnLlamada[playerid] = 0;
		EnLlamada[oyente] = 0;
		PersonaEnLlamada[oyente] = -1;
		PersonaEnLlamada[playerid] = -1;
	}
	if (EnLlamada[playerid] == 305)
	{
		if ( _sanCall == playerid )
		{
			_MensajeSAN(0x00DC3AFF, "[SAN] Conexion telefonica finalizada.");
			_sanCall = -1;
		}
		EnLlamada[playerid] = 0;
		SendClientMessageEx(playerid, 0xFFFFFFFF, "Colgaste la llamada.");
	}
	return 1;
}

forward HaciendoLlamada(playerid);
public HaciendoLlamada(playerid)
{
	if (!IsPlayerConnectedEx(playerid)) return 1;
	new playerid2 = PersonaEnLlamada[playerid];
	if (!_Telefono(playerid))
	{
		EnLlamada[playerid2] = 0;
		ToqueLlamada[playerid] = 0;
		SendClientMessageEx(playerid2, 0xFFFFFFFF, "No contestan");
		PersonaEnLlamada[playerid2] = -1;
		PersonaEnLlamada[playerid] = -1;
		KillTimer(ToqueLlamadaTimer[playerid]);
		return 1;
	}
	if (ToqueLlamada[playerid] > 4)
	{
	    EnLlamada[playerid2] = 0;
		ToqueLlamada[playerid] = 0;
		SendClientMessageEx(playerid, 0xFFFFFFFF, "Llamada perdida del %d.", InfoJugador[playerid2][jTelefono]);
		SendClientMessageEx(playerid2, 0xFFFFFFFF, "No contestan.");
		foreach(Player, i) if (IsPlayerConnectedEx(i) && PersonaEnLlamada[i] == playerid) { PersonaEnLlamada[i] = -1; break; }
		PersonaEnLlamada[playerid] = -1;
		KillTimer(ToqueLlamadaTimer[playerid]);
		return 1;
	}
	new Float: cx, Float: cy, Float: cz;
	GetPlayerPos(playerid, cx, cy, cz);
	PlayerPlaySound(playerid, 3600, cx, cy, cz);
	SendClientMessageEx(playerid2, 0xFFFFFFFF, "Llamando...");
	ToqueLlamada[playerid] ++;
	return 1;
}

//<=================================> inventario/bolsillos
enum dData
{
	DropID,
	DropTipo,
	DropCantidad,
	Text3D:TextoTirado,
	Float:DropPosX,
	Float:DropPosY,
	Float:DropPosZ,
	DropVWorld,
	DropInterior,
};
new InfoSuelo[MAX_OBJETOS_S][dData], ObjetoCaido[MAX_OBJETOS_S], ObjTimer[MAX_OBJETOS_S];

enum armasInfo
{
	IDFuncional,
	NombreArma[32],
	ModeloArma,
	Valida,
};

static const ArmasInfo[][armasInfo] =
{
    {0, "Vacio", 0, 0},
	{1, "Puño americano", 331, 1},
	{2, "Palo de golf", 333, 1},
	{3, "Porra", 334, 1},
	{4, "Cuchillo", 335, 1},
	{5, "Bate de beisbol", 336, 1},
	{6, "Pala", 337, 1},
	{7, "Palo de billar", 338, 1},
	{8, "Katana", 339, 1},
	{9, "Motosierra", 341, 1},
	{10, "Consolador rosa", 321, 1},
	{11, "Vibrador blanco", 322, 1},
	{12, "Gran vibrador blanco", 323, 1},
	{13, "Vibrador plateado", 324, 1},
	{14, "Ramo de flores", 325, 1},
	{15, "Baston", 326, 1},
	{16, "Granada", 342, 1},
	{17, "Granada lacrimogena", 343, 1},
	{18, "Coctel Molotov", 344, 1},
	{19, "Vacio", 0, 0},
	{20, "Vacio", 0, 0},
	{21, "Vacio", 0, 0},
	{22, "9mm", 346, 1},
	{23, "9mm-silenciada", 347, 1},
	{24, "Desert eagle", 348, 1},
	{25, "Escopeta", 349, 1},
	{26, "Escopeta recortada", 350, 1},
	{27, "Escopeta de combate", 351, 1},
	{28, "UZI", 352, 1},
	{29, "MP5", 353, 1},
	{30, "AK-47", 355, 1},
	{31, "M4", 356, 1},
	{32, "Tec-9", 372, 1},
	{33, "Rifle", 357, 1},
	{34, "Francotirador", 358, 1},
	{35, "RPG", 359, 1},
	{37, "Lanzallamas", 361, 1},
	{38, "Minigun", 362, 1},
	{43, "Camara", 367, 1}
};

enum inventarioInfo
{
	IDObjeto,
	NombreObjeto[32],
	ModeloObjeto,
	IDArma,
	Guardable,
	Arrojadizo,
	Capacidad,
	Float: invRotX, Float: invRotY, Float: invRotZ, Float: invZoom,
};

static const InfoInventario[][inventarioInfo] =
{
    {0, "Vacio", 0, 0, 0, 0, 0},
    {1, "Nudillera", 331, 1, 1, 0, 1, 0.0, 0.0, -15.0, 0.500},
    {2, "Palo de golf", 333, 2, 3, 0, 1, 44.0, -42.0, -55.0, 0.500},
    {3, "Baston policial", 334, 3, 1, 0, 1, 44.0, -42.0, -115.0, 0.700},
    {4, "Navaja", 335, 4, 1, 0, 1, 44.0, -42.0, -115.0, 0.500},
    {5, "Bate", 336, 5, 3, 0, 1, 44.0, -42.0, -115.0, 0.700},
    {6, "Pala", 337, 0, 3, 0, 1, 44.0, -42.0, -70.0, 1.120},
    {7, "Palo de billar", 338, 0, 3, 0, 1, 44.0, -42.0, -70.0, 1.120},
    {8, "Sable", 339, 8, 3, 0, 1, 44.0, -42.0, -70.0, 1.000},
    {9, "Motosierra", 341, 9, 3, 0, 1, 44.0, -42.0, -70.0, 1.000},
    {10, "Consolador rosa", 321, 0, 1, 0, 1, 44.0, -42.0, -70.0, 1.000},
    {11, "Consolador pequeño", 322, 0, 1, 0, 1, 44.0, -42.0, -70.0, 0.500},
    {12, "Consolador largo", 323, 0, 1, 0, 1, 44.0, -42.0, -70.0, 0.500},
    {13, "Consolador plateado", 324, 0, 1, 0, 1, 44.0, -42.0, -70.0, 0.500},
    {14, "Flores", 325, 0, 3, 0, 1, 44.0, -42.0, -70.0, 0.800},
    {15, "Baston", 326, 0, 3, 0, 1, 44.0, -42.0, -70.0, 0.800},
    {16, "Granada", 342, 16, 1, 1, 1, 44.0, -42.0, 90.0, 0.600},
    {17, "Granada de gas", 343, 17, 1, 1, 30, 44.0, -42.0, 90.0, 0.600},
    {18, "Coctel molotov", 344, 18, 1, 1, 10, 44.0, -42.0, 90.0, 0.700},
    {19, "45. Colt", 346, 22, 1, 0, 70, 30.0, -19.0, 15.0, 0.700},
    {20, "45. Colt + silenciador", 347, 23, 1, 0, 70, 30.0, -19.0, 15.0, 0.900},
    {24, "Desert Eagle", 348, 24, 1, 0, 50, 30.0, -19.0, 15.0, 0.900},
    {25, "Escopeta", 349, 25, 3, 0, 50, 30.0, -19.0, 15.0, 0.900},
    {26, "Recortada", 350, 26, 3, 0, 30, 30.0, -19.0, 15.0, 0.700},
    {27, "Escopeta de combate", 351, 27, 3, 0, 100, 30.0, -19.0, 15.0, 1.000},
    {28, "UZI", 352, 28, 1, 0, 200, 30.0, -19.0, 15.0, 0.850},
    {29, "MP5", 353, 29, 3, 0, 250, -25.0, 7.0, -4.0, 0.900},
    {27, "AK47", 355, 30, 3, 0, 350, -25.0, 7.0, -4.0, 1.200},
    {28, "M4", 356, 31, 3, 0, 300, -25.0, 7.0, -4.0, 1.200},
    {29, "Tec9", 372, 32, 1, 0, 200, 6.0, -15.0, 57.0, 1.200},
    {30, "AK47", 357, 33, 3, 0, 30, 6.0, -15.0, 57.0, 1.000},
    {31, "Rifle de francotirador", 358, 34, 3, 0, 20, 6.0, -15.0, 57.0, 1.200},
    {32, "Cohete", 359, 35, 3, 0, 100, 6.0, -15.0, 57.0, 1.600},
    {33, "RPG Cohete", 360, 36, 3, 0, 100, 6.0, -15.0, 57.0, 1.500},
    {34, "Lanzallamas", 361, 37, 3, 0, 100, 6.0, -15.0, 57.0, 2.000},
    {35, "Minigun", 362, 38, 3, 0, 5000, 6.0, -15.0, 57.0, 2.500},
    {36, "Spray", 365, 41, 1, 0, 99999, 6.0, -15.0, 57.0, 0.800},
    {37, "Extintor", 366, 42, 3, 0, 1500, 6.0, -15.0, 57.0, 2.000},
    {38, "Camara fotografica", 367, 43, 1, 0, 500, 6.0, -15.0, 57.0, 2.000},
    {39, "Paracaidas", 371, 46, 3, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {40, "Taser", 347, 23, 1, 0, 2, 30.0, -19.0, 15.0, 0.900},
    {41, "Cargador 45. Colt", 19995, 0, 1, 0, 70, 0.0, 0.0, 0.0, 1.000},
    {42, "Cargador D. Eagle", 19995, 0, 1, 0, 50, 0.0, 0.0, 0.0, 1.000},
    {43, "Cargador UZI", 19995, 0, 1, 0, 200, 0.0, 0.0, 0.0, 1.000},
    {44, "Cargador MP5", 19995, 0, 1, 0, 250, 0.0, 0.0, 0.0, 1.000},
    {45, "Cargador TEC-9", 19995, 0, 1, 0, 200, 0.0, 0.0, 0.0, 1.000},
    {46, "Cargador AK47", 2037, 0, 1, 0, 350, 0.0, 0.0, 0.0, 1.000},
    {47, "Cargador M4", 2037, 0, 1, 0, 300, 0.0, 0.0, 0.0, 1.000},
    {48, "Cargador rifle", 2037, 0, 1, 0, 20, 0.0, 0.0, 0.0, 1.000},
    {49, "Cartuchos de Escopeta", 2040, 0, 2, 1, 40, 0.0, 0.0, 0.0, 1.000},
    {3600, "Caja vacia", 3052, 0, 2, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {51, "C. 45. Colt", 3052, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {52, "C. D. Eagle", 3052, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {53, "C. Tec-9", 3052, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {54, "C. UZI", 3052, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {55, "C. MP5", 3052, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {56, "C. Escopeta", 3052, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {57, "C. Escopeta recortada", 3052, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {58, "C. Escopeta de combate", 3052, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {59, "C. Ak-47", 3052, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {60, "C. M4A1", 3052, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {61, "C. Rifle de caza", 3052, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {62, "C. Rifle de francotirador", 3052, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {63, "C. Cargadores 45. Colt", 2040, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {64, "C. Cargadores D. Eagle", 2040, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {65, "C. Cargadores Tec-9", 2040, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {66, "C. Cargadores UZI", 2040, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {67, "C. Cargadores MP5", 2040, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {68, "C. Cargadores Ak-47", 2040, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {69, "C. Cargadores M4A1", 2040, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {70, "C. Cargadores Rifle", 2040, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {71, "Spray", 365, 41, 1, 1, 99999, 6.0, -15.0, 57.0, 0.800},
    {72, "Chaleco", 1242, 0, 2, 1, 100, 0.0, 0.0, 0.0, 1.000},
    {73, "Esposas", 19418, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {74, "Bolsita de marihuana", 327, 0, 1, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {75, "Bolsita de cocaina", 327, 0, 1, 1, 3, 0.0, 0.0, 0.0, 1.000},
    {76, "Bolsita de crack", 327, 0, 1, 1, 3, 0.0, 0.0, 0.0, 1.000},
    {77, "Bolsita de heroina", 327, 0, 1, 1, 3, 0.0, 0.0, 0.0, 1.000},
    {78, "Tripi de LSD", 327, 0, 1, 1, 3, 0.0, 0.0, 0.0, 1.000},
    {79, "Semilla marihuana", 327, 0, 1, 1, 30, 0.0, 0.0, 0.0, 1.000},
    {80, "Telefono", 18871, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {81, "GPS", 18875, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {82, "Radio", 330, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {83, "Dados", 1852, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {84, "Tarjeta de debito", 19792, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {85, "Caña de pesca", 18632, 0, 2, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {86, "Destornillador", 18644, 0, 2, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {87, "Encendedor", 19998, 0, 1, 1, 30, 0.0, 0.0, 0.0, 1.000},
    {88, "C. Cigarrillos", 19896, 0, 1, 1, 10, 0.0, 0.0, 0.0, 1.000},
    {89, "Bidon de gasolina", 1650, 0, 2, 1, 10, 0.0, 0.0, 0.0, 1.000},
    {90, "Bolsa de doritos", 2663, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {91, "Bolsa de patatas", 2663, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {92, "Bolsa de nachos", 2663, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {93, "Lata de sprunk", 2601, 0, 1, 0, 5, 0.0, 0.0, 0.0, 1.000},
    {94, "Lata de pepsi", 2601, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {95, "Botella de agua", 1484, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {96, "Botella de cerveza", 1486, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {97, "Copa de vino", 1667, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {98, "Vaso de whisky", 1666, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {99, "Vaso de ron", 1666, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {100, "Hamburguesa", 2768, 0, 1, 1, 5, 0.0, 0.0, 0.0, 1.000},
    {101, "Burrito", 2769, 0, 1, 1, 5, 0.0, 0.0, 0.0, 1.000},
    {102, "Pizza", 2814, 0, 1, 1, 8, 0.0, 0.0, 0.0, 1.000},
    {103, "Botella de ron", 1544, 0, 1, 1, 12, 0.0, 0.0, 0.0, 1.000},
    {104, "Botella de whisky", 1520, 0, 1, 1, 12, 0.0, 0.0, 0.0, 1.000},
    {105, "Botella de vino", 1517, 0, 1, 1, 12, 0.0, 0.0, 0.0, 1.000},
    {106, "Cigarro", 19625, 0, 1, 1, 5, 0.0, 0.0, 0.0, 1.000},
    {107, "Billete", 1212, 0, 1, 1, 311, 0.0, 0.0, 0.0, 1.000},
    {108, "C. Cargadores Escopeta", 2040, 0, 2, 1, 20, 0.0, 0.0, 0.0, 1.000},
    {109, "Optiwand", 356, 0, 0, 3, 1, 0.0, 0.0, 0.0, 1.000},
    {110, "P. Marihuana", 1578, 0, 2, 1, 500, 0.0, 0.0, 0.0, 1.000},
    {111, "P. Cocaina", 1579, 0, 2, 1, 500, 0.0, 0.0, 0.0, 1.000},
    {112, "P. Crack", 1577, 0, 2, 1, 500, 0.0, 0.0, 0.0, 1.000},
    {113, "P. Heroina", 1576, 0, 2, 1, 500, 0.0, 0.0, 0.0, 1.000},
    {114, "P. LSD", 1580, 0, 2, 1, 500, 0.0, 0.0, 0.0, 1.000},
    {115, "Telefono A", 18865, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {116, "Telefono B", 18866, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {117, "Telefono C", 18867, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {118, "Telefono D", 18868, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {119, "Telefono E", 18869, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {120, "Telefono F", 18870, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {121, "Telefono G", 18871, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {122, "Telefono H", 18872, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {123, "Telefono I", 18873, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {124, "Purple drank", 1546, 0, 1, 1, 10, 0.0, 0.0, 0.0, 1.000},
    {125, "Codeine", 1543, 0, 1, 1, 2, 0.0, 0.0, 0.0, 1.000},
    {126, "Goma de mascar", 0, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {127, "Cuchillo", 11716, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {128, "Palanca", 18634, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {129, "Alcoholimetro", 2711, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {130, "Botiquin", 11738, 0, 2, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {131, "Caja registradora", 1514, 0, 2, 0, 8000, 0.0, 0.0, 0.0, 1.000},
    {132, "Porro", 3027, 0, 1, 1, 5, 0.0, 0.0, 0.0, 1.000},
    {133, "C4", 1252, 0, 2, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {134, "Autografo de Bernal", 2953, 0, 2, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {135, "Jetpack", 370, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {136, "Casco", 18645, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {137, "Maso", 19631, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
	{138, "Materiales", 19941, 43, 1, 0, 99999, 0.0, 0.0, 0.0, 1.000},
	{139, "Botiquin", 11738, 0, 1, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {140, "Bolsa de repuestos", 2663, 0, 2, 1, 99999, 0.0, 0.0, 0.0, 1.000},
    {141, "C. Chalecos", 3052, 0, 2, 1, 100, 0.0, 0.0, 0.0, 1.000},
	{142, "Dinamita", 1654, 0, 1, 0, 1, 0.0, 0.0, 0.0, 1.000},
    {143, "TV Madera", 1429, 0, 2, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {144, "TV Negro", 1518, 0, 2, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {145, "Microondas", 2912, 0, 2, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {146, "Monitor + CPU", 2190, 0, 2, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {147, "Blu Ray", 1788, 0, 2, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {148, "DVD", 1790, 0, 2, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {149, "PlayStation 3", 2028, 0, 2, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {150, "Bluetooth speaker", 2226, 0, 2, 1, 1, 0.0, 0.0, 0.0, 1.000},
    {151, "Mochila", 371, 0, 3, 1, 2000, 0.0, 0.0, 0.0, 1.000}
};

PonerObjeto(playerid, slot, objetoid)
{
	new modelo = InfoInventario[objetoid][ModeloObjeto];
	if (slot == 1) // mano derecha
	{
		switch (objetoid)
		{
			case 1: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Nudillera
			case 2: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Palo de golf
			case 3: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Baston policial
			case 4: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Navaja
			case 5: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Bate
			case 6: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Pala
			case 7: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Palo de billar
			case 8: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Sable
			case 9: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Motosierra
			case 10: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Consolador 1
			case 11: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Consolador 2
			case 12: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Consolador 3
			case 13: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Consolador 4
			case 14: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Flores
			case 15: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Baston - Palanca
			case 16: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Granada
			case 17: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Granada de gas
			case 18: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Coctel molotov
			case 19: SetPlayerAttachedObject(playerid, 6, modelo, 6); //45. Colt
			case 20: SetPlayerAttachedObject(playerid, 6, modelo, 6); //45. Colt + silenciador
			case 21: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Desert Eagle
			case 22: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Escopeta
			case 23: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Recortada
			case 24: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Escopeta combate
			case 25: SetPlayerAttachedObject(playerid, 6, modelo, 6); //UZI
			case 26: SetPlayerAttachedObject(playerid, 6, modelo, 6); //MP5
			case 27: SetPlayerAttachedObject(playerid, 6, modelo, 6); //AK47
			case 28: SetPlayerAttachedObject(playerid, 6, modelo, 6); //M4
			case 29: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Tec9
			case 30: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Rifle de caza
			case 31: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Rifle de francotirador
			case 32: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Cohete
			case 33: SetPlayerAttachedObject(playerid, 6, modelo, 6); //RPG Cohete
			case 34: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Lanzallamas
			case 35: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Minigun
			case 36: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Spray
			case 37: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Extintor
			case 38: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Camara fotografica
			case 39: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Paracaidas
			case 40: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Taser
			case 41..45: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.083999, 0.039000, -0.003999, 0.799998, -5.099998, -92.599990, 1.000000, 1.000000, 1.000000); //Cargador pequeño
			case 46..48: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.064999, 0.035998, 0.018999, 1.599980, -105.499984, 1.800009, 0.649999, 0.910999, 0.476999); //Cargador grande
			case 49: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.063000, 0.053000, 0.015000, -2.100000, -99.399963, 79.600021, 0.425000, 0.560000, 0.482999); //Cargador escopeta
			case 50..62: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.152999, 0.106998, 0.034999, -85.699996, 179.999969, 78.399993, 1.038999, 0.752000, 0.854999); //Cajas grandes
			case 63..70: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.063000, 0.053000, 0.015000, -2.100000, -99.399963, 79.600021, 0.425000, 0.560000, 0.482999); //Cajas pequeñas
			case 71: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Spray (no arma)
			case 72: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Chaleco
			case 73: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.117999, 0.009998, -0.041000, 10.800001, -103.099998, 0.000000, 1.000000, 1.000000, 1.000000); //Esposas
			case 74..79: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.117999, 0.009998, -0.041000, 10.800001, -103.099998, 0.000000, 1.000000, 1.000000, 1.000000); //Bolsitas droga y semilla
			case 80: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.067000, 0.040000, 0.047999, 94.499992, 15.299990, -177.700012, 0.825999, 0.991999, 0.480999); //Telefono
			case 81: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.042000, 0.042000, 0.003999, 78.999961, 1.699989, 103.699920, 0.724999, 0.667999, 0.480999); //GPS
			case 82: SetPlayerAttachedObject(playerid, 6, modelo, 6, -0.005000, -0.010000, -0.024000, 10.800001, 1.499994, 0.000000, 1.000000, 1.000000, 1.000000); //Radio
			case 83: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.080000, 0.032000, 0.003999, 81.299957, 2.899988, 102.499923, 0.176999, 0.100000, 0.121999); //Dados
			case 84: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.065000, 0.044000, -0.001000, 87.699981, -119.399978, -81.000007, 1.000000, 1.000000, 1.000000); //Tarjeta debito
			case 85: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.076000, 0.001999, 0.002000, 9.400000, -171.900024, 150.999969, 1.000000, 1.000000, 0.717999); //Caña de pesca
			case 86: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.079999, 0.020998, 0.016999, 10.800001, 164.000000, 0.000000, 1.000000, 1.000000, 1.000000); //Destornillador
			case 87: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.059000, 0.041000, 0.012999, 0.199999, -21.399997, 0.099999, 0.389000, 0.939000, 0.409999); //Encendedor
			case 88: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.070999, 0.032999, 0.025999, 10.800001, 89.800041, 0.000000, 1.000000, 1.000000, 1.000000); //Cigarrillos
			case 89: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.095997, 0.005997, 0.049004, 32.000011, -103.499977, 10.299985, 0.825999, 0.620998, 0.762996); //Bidon de gasolina
			case 90,91,92: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.204000, 0.029998, 0.016999, 10.800001, -103.099998, 0.000000, 0.839000, 0.423999, 0.645000); //Doritos, patatas y nachos
			case 93,94: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.043999, 0.029998, 0.016999, 10.800001, -13.199980, 1.000000, 1.000000, 1.000000, 1.000000); //Sprunk y fanta
			case 95: SetPlayerAttachedObject(playerid, 6, modelo, 6, -0.031000, -0.030001, 0.060999, 10.800001, 17.200008, 0.000000, 1.000000, 1.000000, 1.000000); //Botella agua
			case 96: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.042000, 0.055999, -0.085000, 10.800001, 1.100013, 0.000000, 1.000000, 1.000000, 1.000000); //Botella cerveza
			case 97: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.064999, 0.029998, 0.016999, 10.800001, -30.299997, 0.000000, 1.000000, 1.000000, 1.000000); //Copa de vino
			case 98,99: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.059999, 0.029998, 0.016999, 10.800001, -31.300012, 0.000000, 1.000000, 1.000000, 1.000000); //Vaso de whisky y ron
			case 100: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.088999, 0.029998, 0.045999, -43.799991, -24.899995, -10.599997, 1.000000, 1.000000, 0.833999); //Hamburguesa
			case 101: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.054000, 0.029998, 0.016999, 106.699981, -11.200008, -105.300056, 1.000000, 1.000000, 1.000000); //Burrito
			case 102: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.296000, 0.126998, 0.016999, 103.400001, 0.199999, 0.000000, 1.000000, 1.000000, 1.000000); //Pizza
			case 103: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.035000, 0.059999, -0.076000, 10.800001, 5.399998, 0.000000, 1.000000, 1.000000, 1.000000); //Botella ron
			case 104: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.037000, 0.072998, -0.065001, 10.800001, 0.100004, 0.000000, 1.000000, 1.000000, 1.000000); //Botella whisky
			case 105: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.036000, 0.034998, 0.064998, 10.800001, -0.399997, 0.000000, 1.000000, 1.000000, 1.000000); //Botella vino
			case 106: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.121999, -0.004000, 0.004999, 9.599995, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //Cigarro
			case 107: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.057998, 0.028998, 0.004001, -69.499977, -5.499964, -96.500000, 0.825999, 0.620998, 0.762996); //billetes
			case 108: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.063000, 0.053000, 0.015000, -2.100000, -99.399963, 79.600021, 0.425000, 0.560000, 0.482999); //Caja Cargador escopeta
			case 109: SetPlayerAttachedObject(playerid, 6, modelo, 6); //Optiwand
			case 110..114: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.082000, 0.000000, 0.000000, 0.099999, 76.499984, 1.000000, 1.000000, 1.000000, 1.000000); //Paquetes drogas
			case 115..123: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.067000, 0.040000, 0.047999, 94.499992, 15.299990, -177.700012, 0.825999, 0.991999, 0.480999); //Telefonos
			case 124: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.093999, 0.052000, 0.004003, -1.100001, -27.100055, -73.999977, 0.777999, 0.982000, 0.851000); //Purple drank
			case 125: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.042000, 0.055999, -0.085000, 10.800001, 1.100013, 0.000000, 1.000000, 1.000000, 1.000000); //Codeine
			case 126: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.117999, 0.009998, -0.041000, 10.800001, -103.099998, 0.000000, 1.000000, 1.000000, 1.000000); // chicle
			case 127: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.079999, 0.020998, 0.016999, 10.800001, 164.000000, 0.000000, 1.000000, 1.000000, 1.000000); //Cuchillo
			case 128: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.074000, 0.013999, 0.050999, 95.600013, 0.000000, 0.000000, 0.818000, 0.447000, 0.685000); //Palanca
			case 129: SetPlayerAttachedObject(playerid, 6, modelo, 6, -0.048000, 0.025999, 0.083000, -174.299987, 45.499992, 1.100000, 1.000000, 1.000000, 1.500000); //Alcoholimetro
			case 130: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.178000, 0.019999, 0.031998, 0.000000, -101.600021, 0.000000, 0.630999, 0.452998, 0.611998); //Botiquin
			case 131: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.098000, 0.153000, -0.219999, -110.699958, -10.599965, -99.099998, 0.825999, 0.620999, 0.762999); //Caja registradora
			case 132: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.098000, 0.034000, 0.037999, 111.599998, 19.299999, 8.299999, 1.000000, 1.000000, 1.000000); //Porro
			case 133: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.079999, 0.020998, 0.016999, 10.800001, 164.000000, 0.000000, 1.000000, 1.000000, 1.000000); //C4
			case 134: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.079999, 0.020998, 0.016999, 10.800001, 164.000000, 0.000000, 1.000000, 1.000000, 1.000000); //Autografo
			case 135: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.117999, 0.009998, -0.041000, 10.800001, -103.099998, 0.000000, 1.000000, 1.000000, 1.000000); //jetpack
			case 136: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.117999, 0.009998, -0.041000, 10.800001, -103.099998, 0.000000, 1.000000, 1.000000, 1.000000); //jetpack
			case 137: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.103000, 0.026000, 0.000000, -86.000007, 93.399986, 0.000000, 1.274000, 1.023998, 1.197000); //Maso minero
			case 138: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //Materiales
			case 139: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.178000, 0.019999, 0.031998, 0.000000, -101.600021, 0.000000, 0.630999, 0.452998, 0.611998); //Botiquin
			case 140: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.204000, 0.029998, 0.016999, 10.800001, -103.099998, 0.000000, 0.839000, 0.423999, 0.645000); //bolsa de repuestos
			case 141: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.152999, 0.106998, 0.034999, -85.699996, 179.999969, 78.399993, 1.038999, 0.752000, 0.854999); //Cajas chalecos
			case 142: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.048000, -0.001999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //dinamita
			case 143: SetPlayerAttachedObject(playerid, 6, modelo, 5, -0.045800, 0.189297, 0.213481, 276.266876, 0.722662, 119.390830, 0.825105, 0.976897, 0.840149);
			case 144: SetPlayerAttachedObject(playerid, 6, modelo, 5, -0.035699, 0.228443, 0.209540, 278.555969, 357.488067, 106.670646, 0.932163, 0.899836, 0.902104);
			case 145: SetPlayerAttachedObject(playerid, 6, modelo, 5, -0.143977, 0.171898, -0.158107, 8.848129, 16.818716, 3.184455, 0.555940, 0.397590, 1.000000);
			case 146: SetPlayerAttachedObject(playerid, 6, modelo, 5, -0.358281, -0.002825, 0.023657, 285.520538, 355.671569, 107.623764, 1.000000, 1.000000, 1.000000);
			case 147: SetPlayerAttachedObject(playerid, 6, modelo, 5, 0.004669, 0.026491, 0.180251, 283.267181, 347.590423, 108.920188, 1.000000, 1.000000, 1.000000);
			case 148: SetPlayerAttachedObject(playerid, 6, modelo, 5, 0.036196, 0.060064, 0.137536, 281.493682, 354.646545, 110.527542, 1.000000, 1.000000, 1.000000);
			case 149: SetPlayerAttachedObject(playerid, 6, modelo, 5, -0.025814, 0.044218, 0.205650, 283.869171, 351.121704, 2.281757, 1.000000, 1.000000, 1.000000);
			case 150: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.388999, 0.034000, 0.101999, 0.000000, -100.599998, 0.399999, 1.000000, 1.000000, 1.000000); //boombox
			case 151: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.152999, 0.106998, 0.034999, -85.699996, 179.999969, 78.399993, 1.038999, 0.752000, 0.854999); //mochila
		}
	}
	else if (slot == 2) // mano izquierda
	{
		switch (objetoid)
		{
			case 1: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.024999, 0.000000, -0.005999, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //Nudillera
			case 2: SetPlayerAttachedObject(playerid, 7, modelo, 5, -0.040000, 0.067000, -0.003000, -29.899999, 152.000000, 176.000030, 1.000000, 1.000000, 1.000000); //Palo de golf
			case 3: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.000000, 0.059999, -0.022000, 161.599990, 10.700001, 5.800002, 1.000000, 1.000000, 1.000000); //Baston policial
			case 4: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.180999, 0.000000, 0.017999, 0.000000, 177.800018, -8.799996, 1.000000, 1.000000, 1.000000); //Navaja
			case 5: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.135999, 0.030999, 0.053999, -17.900001, 153.800018, 0.000000, 1.000000, 1.000000, 1.000000); //Bate
			case 6: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.041999, 0.051999, -0.080000, -27.899986, 155.800018, -167.499938, 1.000000, 1.000000, 1.000000); //Pala
			case 7: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.156999, 0.092000, 0.071999, -25.099998, 172.899963, -19.899995, 1.000000, 1.000000, 1.000000); //Palo de billar
			case 8: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.058000, 0.008000, -0.109000, -27.999998, 155.100036, 172.699966, 1.000000, 1.000000, 1.000000); //Sable
			case 9: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.000000, 0.078999, -0.009000, 155.599990, 7.200000, 4.800000, 1.000000, 1.000000, 1.000000); //Motosierra
			case 10: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.015000, 0.041000, -0.068000, -25.599971, 162.900054, -175.300018, 1.000000, 1.000000, 1.000000); //Consolador 1
			case 11: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.023999, 0.052999, -0.041999, 157.899978, 2.499999, 0.000000, 1.000000, 1.000000, 1.000000); //Consolador 2
			case 12: SetPlayerAttachedObject(playerid, 7, modelo, 5, -0.002000, 0.074000, 0.001000, 151.200042, 23.000000, -9.100001, 1.000000, 1.000000, 1.000000); //Consolador 3
			case 13: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.017999, 0.003999, -0.047999, 168.200012, 18.300003, -27.900005, 1.000000, 1.000000, 1.000000); //Consolador 4
			case 14: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.176000, 0.000000, -0.011000, -23.399999, 160.599990, -6.399995, 1.000000, 1.000000, 1.000000); //Flores
			case 15: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.008999, -0.018999, -0.047999, -33.199996, 159.900085, 156.399902, 1.000000, 1.000000, 1.000000); //Baston
			case 16: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.019000, 0.047000, -0.021000, 164.499984, 0.000000, -17.599994, 1.000000, 1.000000, 1.000000); //Granada
			case 17: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.034000, 0.063000, -0.037999, 164.500000, 14.599996, -4.700009, 1.000000, 1.000000, 1.000000); //Granada de gas
			case 18: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.022999, 0.039000, -0.125999, 165.700012, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //Coctel molotov
			case 19: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.033000, 0.057999, -0.017999, 146.299987, 14.999998, -4.700002, 1.000000, 1.000000, 1.000000); //45. Colt + silenciador
			case 20: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.050999, 0.038000, -0.021999, 144.500015, 9.100000, -11.600002, 1.000000, 1.000000, 1.000000); //45. Colt
			case 21: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.041000, 0.038000, -0.026999, 173.899963, 0.000000, 1.799999, 1.000000, 1.000000, 1.000000); //Desert Eagle
			case 22: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.000000, 0.089000, 0.000000, 153.500015, 10.000001, 4.800000, 1.000000, 1.000000, 1.000000); //Escopeta
			case 23: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.040000, 0.026000, 0.011000, -156.300003, 0.000000, 2.600000, 1.000000, 1.000000, 1.000000); //Recortada
			case 24: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.023000, 0.048999, -0.013000, 172.200012, 14.400005, 0.599999, 1.000000, 1.000000, 1.000000); //Escopeta combate
			case 25: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.024999, 0.048000, -0.012000, 172.000076, -3.099988, -2.099991, 1.000000, 1.000000, 1.000000); //UZI
			case 26: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.005000, 0.065000, -0.016000, 162.399963, 9.599999, 8.400000, 1.000000, 1.000000, 1.000000); //MP5
			case 27: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.057999, 0.076999, -0.023999, 162.799942, 14.399999, 0.000000, 1.000000, 1.000000, 1.000000); //AK47
			case 28: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.043999, 0.028999, -0.038000, 167.499969, 15.999998, 0.000000, 1.000000, 1.000000, 1.000000); //M4
			case 29: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.048000, 0.049999, 0.011000, -172.600006, -2.299995, 5.999999, 1.000000, 1.000000, 1.000000); //Tec9
			case 30: SetPlayerAttachedObject(playerid, 7, modelo, 5, -0.043000, 0.065999, -0.044999, 167.499954, 17.399999, 0.000000, 1.000000, 1.000000, 1.000000); //Rifle de caza
			case 31: SetPlayerAttachedObject(playerid, 7, modelo, 5, -0.018000, 0.085000, 0.033000, 167.399978, 12.200000, -0.299997, 1.000000, 1.000000, 1.000000); //Rifle de francotirador
			case 32: SetPlayerAttachedObject(playerid, 7, modelo, 5, -0.019999, 0.053999, -0.042000, -33.100013, -174.800018, 171.199890, 0.757999, 0.782000, 0.979999); //Cohete
			case 33: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.171999, 0.079999, -0.111999, -124.399993, 166.300018, -93.599990, 1.038999, 0.752000, 0.854999); //RPG Cohete
			case 34: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.044999, 0.083999, 0.034999, 47.699974, -79.599967, -89.300102, 0.654999, 0.782000, 0.758000); //Lanzallamas
			case 35: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.023000, 0.048999, -0.013000, 172.200012, 14.400005, 0.599999, 1.000000, 1.000000, 1.000000); //Minigun
			case 36: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.036999, 0.026999, -0.079999, 152.899993, 14.900004, -0.400000, 1.000000, 1.000000, 1.000000); //Spray
			case 37: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.004000, 0.061999, -0.063999, 126.599990, 33.099998, 2.200000, 1.000000, 1.000000, 1.000000); //Extintor
			case 38: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.018000, 0.062999, 0.074999, -109.400039, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //Camara fotografica
			case 39: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.018000, 0.062999, 0.074999, -109.400039, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //Paracaidas
			case 40: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.050999, 0.038000, -0.021999, 144.500015, 9.100000, -11.600002, 1.000000, 1.000000, 1.000000); //Taser
			case 41..45: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.088999, 0.023000, 0.006000, -9.600001, 178.099945, 92.899978, 1.000000, 1.000000, 1.000000); //Cargador pequeño
			case 46..48: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.092000, 0.038000, -0.026000, -37.200008, 82.199996, 3.499996, 0.649999, 0.910999, 0.476999); //Cargador grande
			case 49: SetPlayerAttachedObject(playerid, 7, modelo, 5,  0.059000, 0.053000, 0.005000, -2.100000, -99.399963, 103.800018, 0.425000, 0.560000, 0.482999); //Cargador escopeta
			case 50..62: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.171999, 0.079999, -0.111999, -124.399993, 166.300018, -93.599990, 1.038999, 0.752000, 0.854999); //Cajas grandes
			case 63..70: SetPlayerAttachedObject(playerid, 7, modelo, 5,  0.059000, 0.053000, 0.005000, -2.100000, -99.399963, 103.800018, 0.425000, 0.560000, 0.482999); //Cargador escopeta
			case 71: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.018000, 0.062999, 0.074999, -109.400039, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //Spray (no arma)
			case 72: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.023000, 0.048999, -0.013000, 172.200012, 14.400005, 0.599999, 1.000000, 1.000000, 1.000000); //Chaleco
			case 73: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.036000, 0.037999, 0.054999, -37.200008, 82.199996, 3.499995, 1.000000, 1.000000, 1.000000); //Esposas
			case 74..79: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.036000, 0.037999, 0.054999, -37.200008, 82.199996, 3.499995, 1.000000, 1.000000, 1.000000); //Bolsitas droga y semilla
			case 80: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.113000, 0.058000, 0.010999, 76.599967, 15.299990, -170.900024, 0.825999, 0.991999, 0.480999); //Telefono
			case 81: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.076000, 0.031000, 0.003999, 81.299957, 2.899988, 102.499923, 0.724999, 0.667999, 0.480999); //GPS
			case 82: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.144999, -0.009999, 0.027000, -23.500009, -173.399993, 3.499995, 1.000000, 1.000000, 1.000000); //Radio
			case 83: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.091000, 0.032000, -0.011000, 81.299957, 2.899988, 102.499923, 0.176999, 0.100000, 0.121999); //Dados
			case 84: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.065000, 0.044000, -0.001000, 87.699981, -119.399978, -81.000007, 1.000000, 1.000000, 1.000000); //Tarjeta debito
			case 85: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.095999, 0.016999, -0.005999, 151.600036, -178.500000, 11.999951, 1.000000, 1.000000, 0.717999); //Caña de pesca
			case 86: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.092000, 0.037999, -0.026000, -37.200008, -18.400012, 3.499995, 1.000000, 1.000000, 1.000000); //Destornillador
			case 87: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.084000, 0.026000, -0.014000, 156.000076, -21.299989, -1.399998, 0.389000, 0.939000, 0.409999); //Encendedor
			case 88: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.092000, 0.038000, -0.026000, -37.200008, 82.199996, 3.499996, 1.000000, 1.000000, 1.000000); //Cigarrillos
			case 89: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.133997, 0.013997, -0.038995, 158.099990, -81.999946, 5.999985, 0.825999, 0.620998, 0.762996); //Bidon de gasolina
			case 90,91,92: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.216999, 0.037999, -0.002999, -13.699973, -98.399971, 3.000000, 0.839000, 0.423999, 0.645000); //Doritos, patatas y nachos
			case 93,94: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.072000, 0.036999, -0.026000, -11.800009, 175.100036, 3.000000, 1.000000, 1.000000, 1.000000); //Sprunk y fanta
			case 95: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.134000, 0.001999, -0.122000, -37.200008, -149.699951, -37.999996, 1.000000, 1.000000, 1.000000); //Botella agua
			case 96: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.092000, 0.114000, 0.069000, -37.200008, -173.000015, 3.499995, 1.000000, 1.000000, 1.000000); //Botella cerveza
			case 97: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.077000, 0.037999, -0.026000, -37.200008, -174.300003, 3.499995, 1.000000, 1.000000, 1.000000); //Copa vino
			case 98,99: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.081000, 0.037999, -0.012999, -37.200008, 172.500061, 3.499995, 1.000000, 1.000000, 1.000000); //Vaso de whisky y ron
			case 100: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.125999, 0.037999, -0.006999, -143.300033, -3.300006, 144.699966, 1.000000, 1.000000, 0.833999); //Hamburguesa
			case 101: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.092000, 0.037999, -0.026000, -37.200008, 82.199996, -175.000000, 1.000000, 1.000000, 1.000000); //Burrito
			case 102: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.293000, 0.108000, -0.049999, -116.499977, 170.400054, 3.799995, 1.000000, 1.000000, 1.000000); //Pizza
			case 103: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.092000, 0.096000, 0.066999, -25.500007, 179.099990, 3.499995, 1.000000, 1.000000, 1.000000); //Botella de ron
			case 104: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.092000, 0.092000, 0.045000, -37.200008, -165.699996, 3.499995, 1.000000, 1.000000, 1.000000); //Botella de whisky
			case 105: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.072000, 0.037999, -0.038000, -15.100006, -158.999984, 3.499995, 1.000000, 1.000000, 1.000000); //Botella de vino
			case 106: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.130000, 0.013999, 0.007999, 9.599995, 6.699999, 29.500005, 1.000000, 1.000000, 1.000000); //Cigarro
			case 107: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.080998, 0.056998, -0.023998, 75.300010, -21.099960, -83.500007, 0.825999, 0.620998, 0.762996); //billetes
			case 108: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.063000, 0.053000, 0.015000, -2.100000, -99.399963, 79.600021, 0.425000, 0.560000, 0.482999); //Caja Cargador escopeta
			case 109: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.043999, 0.028999, -0.038000, 167.499969, 15.999998, 0.000000, 1.000000, 1.000000, 1.000000); //Optiwand
			case 110..114: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.082000, 0.000000, 0.000000, -0.399999, 76.499984, -25.099998, 1.000000, 1.000000, 1.000000); //Paquetes drogas
			case 115..123: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.113000, 0.058000, 0.010999, 76.599967, 15.299990, -170.900024, 0.825999, 0.991999, 0.480999); //Telefonos
			case 124: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.093998, 0.052000, -0.017997, 1.899998, -168.300033, -73.999977, 0.777998, 0.981999, 0.851000); //Purple drank
			case 125: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.092000, 0.114000, 0.069000, -37.200008, -173.000015, 3.499995, 1.000000, 1.000000, 1.000000); //Codeine
			case 126: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.036000, 0.037999, 0.054999, -37.200008, 82.199996, 3.499995, 1.000000, 1.000000, 1.000000); // chicle
			case 127: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.180999, 0.000000, 0.017999, 0.000000, 177.800018, -8.799996, 1.000000, 1.000000, 1.000000); //Cuchillo
			case 128: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.082000, 0.022000, -0.040999, -110.899955, 0.000000, -20.699991, 1.000000, 0.541000, 0.599999); //Palanca
			case 129: SetPlayerAttachedObject(playerid, 7, modelo, 5, -0.000000, 0.004999, -0.080999, -16.900087, 43.799995, 4.500000, 1.000000, 1.000000, 1.500000); //Alcoholimetro
			case 130: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.193000, 0.029000, -0.001001, 0.000000, -101.600021, 12.900000, 0.630999, 0.452998, 0.611998); //Botiquin
			case 131: SetPlayerAttachedObject(playerid, 6, modelo, 6, 0.098000, 0.153000, -0.219999, -110.699958, -10.599965, -99.099998, 0.825999, 0.620999, 0.762999); //Caja registradora
			case 132: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.116999, 0.034000, -0.037000, 111.599998, 19.299999, 8.299999, 1.000000, 1.000000, 1.000000); //Porro
			case 133: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.092000, 0.037999, -0.026000, -37.200008, -18.400012, 3.499995, 1.000000, 1.000000, 1.000000); //C4
			case 134: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.092000, 0.037999, -0.026000, -37.200008, -18.400012, 3.499995, 1.000000, 1.000000, 1.000000); //Autografo
			case 135: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.036000, 0.037999, 0.054999, -37.200008, 82.199996, 3.499995, 1.000000, 1.000000, 1.000000); //Jetpack
			case 136: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.036000, 0.037999, 0.054999, -37.200008, 82.199996, 3.499995, 1.000000, 1.000000, 1.000000); //Jetpack
			case 137: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.093998, 0.000000, -0.085000, 65.200012, -78.400001, -11.100002, 1.110000, 1.000000, 1.000000); //Maso minero
			case 138: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.045000, 0.068000, 0.000000, 0.000000, 0.000000, 0.000000, 1.144999, 1.000000, 1.000000); //Materiales
			case 139: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.193000, 0.029000, -0.001001, 0.000000, -101.600021, 12.900000, 0.630999, 0.452998, 0.611998); //Botiquin
			case 140: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.216999, 0.037999, -0.002999, -13.699973, -98.399971, 3.000000, 0.839000, 0.423999, 0.645000); //Bolsa de repuestos
			case 141: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.171999, 0.079999, -0.111999, -124.399993, 166.300018, -93.599990, 1.038999, 0.752000, 0.854999); //Cajas chalecos
			case 142: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.050999, 0.072000, 0.000000, -34.699996, -21.000000, 1.699999, 1.000000, 1.000000, 1.000000); //dinamita
			case 143: SetPlayerAttachedObject(playerid, 7, modelo, 5, -0.045800, 0.189297, 0.213481, 276.266876, 0.722662, 119.390830, 0.825105, 0.976897, 0.840149);
			case 144: SetPlayerAttachedObject(playerid, 7, modelo, 5, -0.035699, 0.228443, 0.209540, 278.555969, 357.488067, 106.670646, 0.932163, 0.899836, 0.902104);
			case 145: SetPlayerAttachedObject(playerid, 7, modelo, 5, -0.143977, 0.171898, -0.158107, 8.848129, 16.818716, 3.184455, 0.555940, 0.397590, 1.000000);
			case 146: SetPlayerAttachedObject(playerid, 7, modelo, 5, -0.358281, -0.002825, 0.023657, 285.520538, 355.671569, 107.623764, 1.000000, 1.000000, 1.000000);
			case 147: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.004669, 0.026491, 0.180251, 283.267181, 347.590423, 108.920188, 1.000000, 1.000000, 1.000000);
			case 148: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.036196, 0.060064, 0.137536, 281.493682, 354.646545, 110.527542, 1.000000, 1.000000, 1.000000);
			case 149: SetPlayerAttachedObject(playerid, 7, modelo, 5, -0.025814, 0.044218, 0.205650, 283.869171, 351.121704, 2.281757, 1.000000, 1.000000, 1.000000);
			case 150: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.423000, 0.000000, 0.019999, 6.100001, -101.499984, 36.800006, 1.000000, 1.000000, 1.000000); //boombox
			case 151: SetPlayerAttachedObject(playerid, 7, modelo, 5, 0.171999, 0.079999, -0.111999, -124.399993, 166.300018, -93.599990, 1.038999, 0.752000, 0.854999); //mochila
		}
	}
	else if (slot == 3) // espalda
	{
		if (B_Pecho[playerid] == 0)
		{
			switch (objetoid)
			{
				case 2: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.378000, -0.112998, 0.040000, 6.499971, -109.000022, -6.500008, 0.719999, 0.611000, 0.630000); //Palo de golf
				case 5: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.287000, -0.106998, 0.040000, 6.499971, -109.000022, -6.500008, 0.719999, 0.611000, 0.630000); //Bate
				case 6: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.265000, -0.157998, 0.061000, 6.499971, -108.600013, 92.200012, 0.719999, 0.611000, 0.630000); //Pala
				case 7: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.287000, -0.106998, 0.040000, 6.499971, -109.000022, -6.500008, 0.719999, 0.611000, 0.630000); //Palo de billar
				case 8: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.287000, -0.106998, 0.040000, 6.499971, -109.000022, -6.500008, 0.719999, 0.611000, 0.630000); //Sable
				case 9: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.427000, -0.131998, 0.038000, -2.800032, -18.000013, 172.900024, 0.719999, 0.611000, 0.630000); //Motosierra
				case 14: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.287000, -0.106998, 0.040000, 6.499971, -109.000022, -6.500008, 0.719999, 0.611000, 0.630000); //Flores
				case 15: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.287000, -0.106998, 0.040000, 6.499971, -109.000022, -6.500008, 0.719999, 0.611000, 0.630000); //Baston
				case 22: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.220000, -0.135998, 0.113000, -1.900013, 161.699951, 8.599991, 0.719999, 0.675999, 0.928000); //Escopeta
				case 23: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.345999, -0.151998, 0.166000, -1.900013, 161.699951, 8.599991, 0.918999, 0.982999, 0.984000); //Recortada
				case 24: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.345999, -0.151998, 0.166000, -1.900013, 161.699951, 8.599991, 0.918999, 0.982999, 0.984000); //Escopeta combate
				case 26: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.205000, -0.136998, 0.156000, -1.500012, 152.599945, 5.399990, 0.918999, 0.982999, 0.984000); //MP5
				case 27: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.251000, -0.130998, 0.135999, -1.500012, 152.599945, 5.399990, 0.960999, 0.883999, 0.984000); //AK47
				case 28: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.251000, -0.130998, 0.135999, -1.500012, 152.599945, 5.399990, 0.960999, 0.883999, 0.984000); //M4
				case 30: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.017999, -0.133999, 0.000000, 11.899997, 32.799995, 9.599994, 0.618999, 1.000000, 1.000000); //Rifle de caza
				case 31: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.018000, -0.133999, 0.000000, 11.899998, 32.799995, 9.599995, 0.618999, 1.000000, 1.000000); //Rifle de francotirador
				case 32: SetPlayerAttachedObject(playerid, 9, modelo, 1, -0.019999, -0.155000, 0.068000, 15.799981, 164.600006, -3.100142, 0.757999, 0.782000, 0.979999); //Cohete
				case 33: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.195999, -0.142000, -0.129000, -1.799999, 18.200000, 0.000000, 1.000000, 1.000000, 1.000000); //Cohete RPG
				case 34: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.363999, -0.155000, 0.083000, 15.799981, 164.600006, -3.100142, 0.654999, 0.782000, 0.758000); //Lanzallamas
				case 35: SetPlayerAttachedObject(playerid, 9, modelo, 1, -0.289000, -0.114999, -0.048000, 0.000000, 0.000000, 0.000000, 0.643000, 1.000000, 0.636000); //Minigun
				case 37: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.439999, -0.114999, 0.157000, -27.400011, 134.299942, -2.600011, 0.990999, 0.883999, 1.003000); //Extintor
				case 39: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.087999, -0.114999, 0.000000, 11.899997, 86.899993, -18.700014, 1.029998, 1.000000, 1.000000); //Paracaidas
				case 109: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.251000, -0.130998, 0.135999, -1.500012, 152.599945, 5.399990, 0.960999, 0.883999, 0.984000); //Optiwand
				case 151: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.087999, -0.114999, 0.000000, 11.899997, 86.899993, -18.700014, 1.029998, 1.000000, 1.000000); //Mochila
			}
		}
		else
		{
			switch (objetoid)
			{
				case 2: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.378000, -0.112998, 0.040000, 6.499971, -109.000022, -6.500008, 0.719999, 0.611000, 0.630000); //Palo de golf
				case 5: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.287000, -0.106998, 0.040000, 6.499971, -109.000022, -6.500008, 0.719999, 0.611000, 0.630000); //Bate
				case 6: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.265000, -0.157998, 0.061000, 6.499971, -108.600013, 92.200012, 0.719999, 0.611000, 0.630000); //Pala
				case 7: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.287000, -0.106998, 0.040000, 6.499971, -109.000022, -6.500008, 0.719999, 0.611000, 0.630000); //Palo de billar
				case 8: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.287000, -0.106998, 0.040000, 6.499971, -109.000022, -6.500008, 0.719999, 0.611000, 0.630000); //Sable
				case 9: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.427000, -0.131998, 0.038000, -2.800032, -18.000013, 172.900024, 0.719999, 0.611000, 0.630000); //Motosierra
				case 14: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.287000, -0.106998, 0.040000, 6.499971, -109.000022, -6.500008, 0.719999, 0.611000, 0.630000); //Flores
				case 15: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.287000, -0.106998, 0.040000, 6.499971, -109.000022, -6.500008, 0.719999, 0.611000, 0.630000); //Baston
				case 22: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.200999, 0.175998, -0.119999, -176.800094, 150.299972, -1.400024, 0.780000, 0.850000, 0.758000); //Escopeta
				case 23: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.200999, 0.175998, -0.119999, -176.800094, 150.299972, -1.400024, 0.780000, 0.850000, 0.758000); //Recortada
				case 24: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.251998, 0.160998, -0.181998, -176.800094, 150.299972, -5.100023, 0.780000, 0.850000, 0.758000); //Escopeta combate
				case 26: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.200999, 0.166998, -0.119999, -176.800094, 150.299972, -1.900023, 0.780000, 0.850000, 0.758000); //MP5
				case 27: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.200999, 0.191998, -0.119999, -176.800094, 150.299972, -1.900023, 0.758000, 0.850000, 0.780000); //AK47
				case 28: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.147998, 0.203998, -0.096999, -176.300125, 147.999984, -2.200024, 0.841000, 1.000000, 0.852999); //M4
				case 30: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.251998, 0.170998, -0.129998, -176.800094, 150.299972, -5.100023, 0.780000, 0.850000, 0.758000); //Rifle de caza
				case 31: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.251998, 0.170998, -0.129998, -176.800094, 150.299972, -5.100023, 0.780000, 0.850000, 0.758000); //Rifle de francotirador
				case 32: SetPlayerAttachedObject(playerid, 9, modelo, 1, -0.019999, -0.155000, 0.068000, 15.799981, 164.600006, -3.100142, 0.757999, 0.782000, 0.979999); //Cohete
				case 33: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.195999, -0.142000, -0.129000, -1.799999, 18.200000, 0.000000, 1.000000, 1.000000, 1.000000); //Cohete RPG
				case 34: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.363999, -0.155000, 0.083000, 15.799981, 164.600006, -3.100142, 0.654999, 0.782000, 0.758000); //Lanzallamas
				case 35: SetPlayerAttachedObject(playerid, 9, modelo, 1, -0.289000, -0.114999, -0.048000, 0.000000, 0.000000, 0.000000, 0.643000, 1.000000, 0.636000); //Minigun
				case 37: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.439999, -0.114999, 0.157000, -27.400011, 134.299942, -2.600011, 0.990999, 0.883999, 1.003000); //Extintor
				case 39: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.087999, -0.114999, 0.000000, 11.899997, 86.899993, -18.700014, 1.029998, 1.000000, 1.000000); //Paracaidas
				case 109: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.147998, 0.203998, -0.096999, -176.300125, 147.999984, -2.200024, 0.841000, 1.000000, 0.852999); //Optiwand
				case 151: SetPlayerAttachedObject(playerid, 9, modelo, 1, 0.087999, -0.114999, 0.000000, 11.899997, 86.899993, -18.700014, 1.029998, 1.000000, 1.000000); //Mochila BY x1 Bernal //
			}
		}
	}
	return 1;
}
funcion TirarAcc(ObjetoID, Float: X, Float: Y, Float: Z, world, interior, playerid)
{
	if (ObjetoID == 0) return 1;
	new Float: rotx, Float: roty, Float: rotz, toy = RanuraSeleccionada[playerid];
	Loop(i, sizeof InfoCaido, 0) if (InfoCaido[i][AccX] == 0.0 && InfoCaido[i][AccY] == 0.0 && InfoCaido[i][AccZ] == 0.0)
	{
		InfoCaido[i][AccID] = ObjetoID;
		InfoCaido[i][AccX] = X;
		InfoCaido[i][AccY] = Y;
		InfoCaido[i][AccZ] = Z;
		InfoCaido[i][AccVWorld] = world;
		InfoCaido[i][AccInterior] = interior;
		InfoCaido[i][aHueso] = InfoJugador[playerid][aHueso][toy];
		InfoCaido[i][aPosicionX] = InfoJugador[playerid][aPosicionX][toy];
		InfoCaido[i][aPosicionY] = InfoJugador[playerid][aPosicionY][toy];
		InfoCaido[i][aPosicionZ] = InfoJugador[playerid][aPosicionZ][toy];
		InfoCaido[i][aRotacionX] = InfoJugador[playerid][aRotacionX][toy];
		InfoCaido[i][aRotacionY] = InfoJugador[playerid][aRotacionY][toy];
		InfoCaido[i][aRotacionZ] = InfoJugador[playerid][aRotacionZ][toy];
		InfoCaido[i][aEscalaZ] = InfoJugador[playerid][aEscalaZ][toy];
		InfoCaido[i][aEscalaY] = InfoJugador[playerid][aEscalaY][toy];
		InfoCaido[i][aEscalaX] = InfoJugador[playerid][aEscalaX][toy];
		rotx = 80;
		roty = 0;
		rotz = 0;
		AccCaido[i] = CreateDynamicObject(ObjetoID, X, Y, Z - 1, rotx, roty, rotz, world);
		SetTimerEx("TirarAccTimer", 600000, false, "i", i);
		return 1;
	}
	return 1;
}

funcion TirarAccTimer(i)
{
	if (AccCaido[i] != INVALID_STREAMER_ID)
	{
		DestroyDynamicObject(AccCaido[i]);
		AccCaido[i] = INVALID_STREAMER_ID;
	}
    InfoCaido[i][AccX] = 0.0;
    InfoCaido[i][AccY] = 0.0;
    InfoCaido[i][AccZ] = 0.0;
    InfoCaido[i][AccID] = 0;
    return 1;
}

funcion TirarObjeto(ObjetoID, Tipo, Cantidad, Float: X, Float: Y, Float: Z, world, interior)
{
 	if (ObjetoID != 0)
	{
 		new Float: rotx, Float: roty, Float: rotz, string[210];
  		for (new i = 0; i < sizeof(InfoSuelo); i++)
		{
   			if (InfoSuelo[i][DropPosX] == 0.0)
			{
     			InfoSuelo[i][DropID] = ObjetoID;
     			InfoSuelo[i][DropTipo] = Tipo;
       			InfoSuelo[i][DropCantidad] = Cantidad;
         		InfoSuelo[i][DropPosX] = X;
          		InfoSuelo[i][DropPosY] = Y;
           		InfoSuelo[i][DropPosZ] = Z;
            	InfoSuelo[i][DropVWorld] = world;
            	InfoSuelo[i][DropInterior] = interior;
            	rotx = 80;
            	roty = 0;
            	rotz = 0;
            	if (ObjetoID >= 47 && ObjetoID <= 49) rotx = 0;
            	if (ObjetoID >= 50 && ObjetoID <= 53) rotx = 0;
            	Z += 0.02;
            	if (ObjetoID == 67) rotx = 0;
            	if (ObjetoID >= 75 && ObjetoID <= 79) rotx = 0;
       	 		if (ObjetoID >= 102 && ObjetoID <= 124) rotx = 0;
       	 		if(ObjetoID == 131 || (ObjetoID >= 93 && ObjetoID <= 99) || (ObjetoID >= 103 && ObjetoID <= 105))
       	 		{
       	 		    rotx = 0.0;
					roty = 0.0;
					roty = 0.0;
					Z += 0.08;
       	 		}
				if(ObjetoID == 105) Z -= 0.08;
				if(ObjetoID == 131) Z += 0.12;
            	Z += 0.02;
				if(ObjetoID == 142) { rotx = 0; roty = 0; rotz = 0; Z += 0.2; } //dinamita
				if(Tipo != 1)
				{
				    ObjetoCaido[i] = CreateDynamicObject(ArmasInfo[ObjetoID][ModeloArma], X, Y, Z - 1, rotx, roty, rotz, world);
				    format(string, sizeof string, "%s\n{FFFFFF}usa /recoger", ArmasInfo[ObjetoID][NombreArma]);
            		InfoSuelo[i][TextoTirado] = CreateDynamic3DTextLabel(string, 0x73DA61FF, X, Y, Z - 1, 15.0);
				}
				else
				{
	            	ObjetoCaido[i] = CreateDynamicObject(InfoInventario[ObjetoID][ModeloObjeto], X, Y, Z - 1, rotx, roty, rotz, world);
					format(string, sizeof string, "%s\n{FFFFFF}{FFFFFF}usa /recoger", InfoInventario[ObjetoID][NombreObjeto]);
	            	InfoSuelo[i][TextoTirado] = CreateDynamic3DTextLabel(string, 0x73DA61FF, X, Y, Z - 1, 15.0);
				}
            	ObjTimer[i] = SetTimerEx("SueloTime", 600000, false, "i", i);
            	return 1;
        	}
    	}
    }
    return 1;
}

stock RecogerObjeto(playerid, objeto_id = -1)
{
	new idobjeto = -1;
	if (objeto_id != -1)
	{
		if (_enPos(playerid, 2.0, InfoSuelo[objeto_id][DropPosX], InfoSuelo[objeto_id][DropPosY], InfoSuelo[objeto_id][DropPosZ]) && GetPlayerVirtualWorld(playerid) == InfoSuelo[objeto_id][DropVWorld] && GetPlayerInterior(playerid) == InfoSuelo[objeto_id][DropInterior])
		{
			idobjeto = objeto_id;
		}
	}
	else
	{
		Loop(ex, sizeof InfoSuelo, 0) if (_enPos(playerid, 2.0, InfoSuelo[ex][DropPosX], InfoSuelo[ex][DropPosY], InfoSuelo[ex][DropPosZ]) && GetPlayerVirtualWorld(playerid) == InfoSuelo[ex][DropVWorld] && GetPlayerInterior(playerid) == InfoSuelo[ex][DropInterior])
		{
			idobjeto = ex;
			break;
		}
	}
	if (idobjeto == -1) return ShowInfoForPlayer(playerid, "No tienes ningun objeto cercano a ti.", 2000);
	new string[512], obj = InfoSuelo[idobjeto][DropID];
	if (Objeto_Carga(obj)) { if (Tiene_Obj_Carga(playerid) != 0) { ShowInfoForPlayer(playerid, "Ya posees objetos de carga en una de tus ~r~manos.", 2000); return 1; } }
	if (ObjetoCaido[idobjeto] != INVALID_STREAMER_ID)
	{
		DestroyDynamicObject(ObjetoCaido[idobjeto]);
		ObjetoCaido[idobjeto] = INVALID_STREAMER_ID;
	}
	if (IsValidDynamic3DTextLabel(InfoSuelo[idobjeto][TextoTirado]))
	{
		DestroyDynamic3DTextLabel(InfoSuelo[idobjeto][TextoTirado]);
		InfoSuelo[idobjeto][TextoTirado] = Text3D:INVALID_3DTEXT_ID;
	}
	if (InfoJugador[playerid][jHorasConectado] < 2)
	{
		if (InfoSuelo[idobjeto][DropTipo] != 1) return  ShowInfoForPlayer(playerid, "No posees diez horas de juego, no puedes tomar el arma.", 2000);
	}
	switch(InfoSuelo[idobjeto][DropTipo])
	{
	    case 1:
	    {
			if (InfoJugador[playerid][jManoDerecha] == 0)
			{
				InfoJugador[playerid][jManoDerecha] = obj, InfoJugador[playerid][jManoDerechaCant] = InfoSuelo[idobjeto][DropCantidad];
				if (InfoInventario[obj][IDArma] > 0 && InfoSuelo[idobjeto][DropCantidad] > 0) { GivePlayerWeapon(playerid, InfoInventario[obj][IDArma], InfoSuelo[idobjeto][DropCantidad]); }
				PonerObjeto(playerid, 1, obj);
				mysql_format(DBngrp, string, sizeof string, "UPDATE cuentas SET mano_derecha = '%d', Cantidad_mano_derecha = '%d' WHERE ID = '%d'", InfoJugador[playerid][jManoDerecha], InfoJugador[playerid][jManoDerechaCant], InfoJugador[playerid][jID]);
				mysql_tquery(DBngrp, string);
			}
			else if (InfoJugador[playerid][jManoIzquierda] == 0)
			{
				InfoJugador[playerid][jManoIzquierda] = obj, InfoJugador[playerid][jManoIzquierdaCant] = InfoSuelo[idobjeto][DropCantidad];
				PonerObjeto(playerid, 2, obj);
				mysql_format(DBngrp, string, sizeof string, "UPDATE cuentas SET mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'", InfoJugador[playerid][jManoIzquierda], InfoJugador[playerid][jManoIzquierdaCant], InfoJugador[playerid][jID]);
				mysql_tquery(DBngrp, string);
			}
			if (Objeto_Carga(obj)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SendClientMessageEx(playerid, 0xA7CE00FF, "Recogiste %s.", InfoInventario[InfoSuelo[idobjeto][DropID]][NombreObjeto]);
			if (obj == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		}
		case 2:
		{
			DarArma(playerid, obj);
		    format(string, sizeof(string), "Recogiste la %s del suelo.", NombreArmas(InfoSuelo[idobjeto][DropID]));
		    SendClientMessageEx(playerid, 0xA7CE00FF, string);
		}
	}
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
	InfoSuelo[idobjeto][DropPosX] = 0.0;
	InfoSuelo[idobjeto][DropPosY] = 0.0;
	InfoSuelo[idobjeto][DropPosZ] = 0.0;
	InfoSuelo[idobjeto][DropID] = 0;
	InfoSuelo[idobjeto][DropCantidad] = 0;
	KillTimer(ObjTimer[idobjeto]);
	Streamer_Update(playerid);
	SetPlayerInventario(playerid, 3);
	return 1;
}

funcion SueloTime(i)
{
	if (ObjetoCaido[i] != INVALID_STREAMER_ID)
	{
		DestroyDynamicObject(ObjetoCaido[i]);
		ObjetoCaido[i] = INVALID_STREAMER_ID;
	}
	if (IsValidDynamic3DTextLabel(InfoSuelo[i][TextoTirado]))
	{
		DestroyDynamic3DTextLabel(InfoSuelo[i][TextoTirado]);
		InfoSuelo[i][TextoTirado] = Text3D:INVALID_3DTEXT_ID;
	}
	if(InfoSuelo[i][DropTipo] == 151) borrar_mochila(InfoSuelo[i][DropCantidad]);
    InfoSuelo[i][DropPosX] = 0.0;
    InfoSuelo[i][DropPosY] = 0.0;
    InfoSuelo[i][DropPosZ] = 0.0;
    InfoSuelo[i][DropID] = 0;
    InfoSuelo[i][DropTipo] = 0;
    InfoSuelo[i][DropCantidad] = 0;
    KillTimer(ObjTimer[i]);
    return 1;
}

funcion _Telefono(playerid) {
	switch(InfoJugador[playerid][jManoDerecha]) {
		case 80: return 80;
		case 115: return 115;
		case 116: return 116;
		case 117: return 117;
		case 118: return 118;
		case 119: return 119;
		case 120: return 120;
		case 121: return 121;
		case 122: return 122;
		case 123: return 123;
 	}
	switch(InfoJugador[playerid][jManoIzquierda]) {
		case 80: return 80;
		case 115: return 115;
		case 116: return 116;
		case 117: return 117;
		case 118: return 118;
		case 119: return 119;
		case 120: return 120;
		case 121: return 121;
		case 122: return 122;
		case 123: return 123;
	}
	return 0;
}

funcion _Telefono2(playerid, mano) {
    if(mano == 1) {
		switch(InfoJugador[playerid][jManoDerecha]) {
		    case 80: return 80;
		    case 115: return 115;
		    case 116: return 116;
		    case 117: return 117;
		    case 118: return 118;
		    case 119: return 119;
		    case 120: return 120;
		    case 121: return 121;
		    case 122: return 122;
			case 123: return 123;
		}
    } else if(mano == 2) {
		switch(InfoJugador[playerid][jManoIzquierda]) {
		    case 80: return 80;
		    case 115: return 115;
		    case 116: return 116;
		    case 117: return 117;
		    case 118: return 118;
		    case 119: return 119;
		    case 120: return 120;
		    case 121: return 121;
		    case 122: return 122;
			case 123: return 123;
		}
    }
	return 0;
}

funcion TieneCaja(playerid, mano) {
    if(mano == 1) {
        switch(InfoJugador[playerid][jManoDerecha]) {
            case 51: return 19; //- 45. Colt
            case 52: return 21; //- D. Eagle
            case 53: return 29; //- Tec-9
            case 54: return 25; //- UZI
            case 55: return 26; //- MP5
            case 56: return 22; //- Escopeta
            case 57: return 23; //- Escopeta recortada
            case 58: return 24; //- Escopeta de combate
            case 59: return 27; //- Ak-47
            case 60: return 28; //- M4A1
            case 61: return 30; //- Rifle de caza
            case 62: return 31; //- Rifle de francotirador
            case 63: return 41; //- Cargador 45. Colt
            case 64: return 42; //- Cargador D. Eagle
            case 65: return 45; //- Cargador Tec-9
            case 66: return 43; //- Cargador UZI
            case 67: return 44; //- Cargador MP5
            case 68: return 46; //- Cargador Ak-47
            case 69: return 47; //- Cargador M4A1
            case 70: return 48; //- Cargador rifle
            case 108: return 49; //- Cargador Escopeta
            case 141: return 72; //- Chaleco
        }
    } else if(mano == 2) {
        switch(InfoJugador[playerid][jManoIzquierda]) {
            case 51: return 19; //- 45. Colt
            case 52: return 21; //- D. Eagle
            case 53: return 29; //- Tec-9
            case 54: return 25; //- UZI
            case 55: return 26; //- MP5
            case 56: return 22; //- Escopeta
            case 57: return 23; //- Escopeta recortada
            case 58: return 24; //- Escopeta de combate
            case 59: return 27; //- Ak-47
            case 60: return 28; //- M4A1
            case 61: return 30; //- Rifle de caza
            case 62: return 31; //- Rifle de francotirador
            case 63: return 41; //- Cargador 45. Colt
            case 64: return 42; //- Cargador D. Eagle
            case 65: return 45; //- Cargador Tec-9
            case 66: return 43; //- Cargador UZI
            case 67: return 44; //- Cargador MP5
            case 68: return 46; //- Cargador Ak-47
            case 69: return 47; //- Cargador M4A1
            case 70: return 48; //- Cargador rifle
            case 108: return 49; //- Cargador Escopeta
            case 141: return 72; //- Chaleco
        }
    } else if(mano == 3) {
        switch(InfoJugador[playerid][jManoIzquierda] || InfoJugador[playerid][jManoDerecha]) {
            case 50: return 1; //- Caja vacia
        }
    }
    return 0;
}

funcion TienePaquete(playerid, mano) {
    if(mano == 1) {
        switch(InfoJugador[playerid][jManoDerecha]) {
            case 110: return 74; //- Marihuana
            case 111: return 75; //- Cocaina
            case 112: return 76; //- Crack
            case 113: return 77; //- Heroina
            case 114: return 78; //- LSD
        }
    } else if(mano == 2) {
        switch(InfoJugador[playerid][jManoIzquierda]) {
            case 110: return 74; //- Marihuana
            case 111: return 75; //- Cocaina
            case 112: return 76; //- Crack
            case 113: return 77; //- Heroina
            case 114: return 78; //- LSD
        }
    }
    return 0;
}

funcion SetVehicleMatricula(carid) {
	if(!GetVehicleModel(carid)) return 1;
	new matricula[24];
	format(matricula, sizeof(matricula), "LS-%d", carid);
	SetVehicleNumberPlate(carid, matricula);
	return 1;
}

funcion DarMatricula(carid, id) {
	if(!GetVehicleModel(carid)) return 1;
	new matricula[24];
	format(matricula, sizeof(matricula), "LS-%d", id);
	SetVehicleNumberPlate(carid, matricula);
	return 1;
}

stock alm(string[], string2[])
{
    strmid(string, string2, 0, strlen(string2), strlen(string2) + 1);
    return 1;
}

RespawnNearbyVehicles(playerid, Float: radi)
{
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);
	Loop(i, MAX_VEHICLES, 0) if (GetVehicleModel(i))
	{
		new Float: posx, Float: posy, Float: posz, Float: tempposx, Float: tempposy, Float: tempposz;
		GetVehiclePos(i, posx, posy, posz);
		tempposx = (posx - x);
		tempposy = (posy - y);
		tempposz = (posz - z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			SetVehicleToRespawn(i);
		}
	}
}

stock Float:GetPosInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance) { //by: whoever
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	switch(IsPlayerInAnyVehicle(playerid)) {
	    case 0: GetPlayerFacingAngle(playerid, a);
	    case 1: GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
	return a;
}

forward _FGomas(playerid); public _FGomas(playerid){
	ClearAnimations(playerid);
 	TogglePlayerControllable(playerid, 1);
    _Gomas[playerid] = 0;
    return 1;
}

forward _FGomas2(playerid); public _FGomas2(playerid){
	ClearAnimations(playerid);
 	TogglePlayerControllable(playerid, 1);
    Taseado[playerid] = 0;
    return 1;
}

NombreRJugador(playerid)
{
	new nameplayer[MAX_PLAYER_NAME + 2];
	if (InfoJugador[playerid][jUsoMascara]) alm(nameplayer, InfoJugador[playerid][jNombre_Apellido]);
	else GetPlayerName(playerid, nameplayer, sizeof nameplayer);
	for(new i = 0, j = strlen(nameplayer); i < j; i ++)
	{
		if(nameplayer[i] == '_')
		{
			nameplayer[i] = ' ';
		}
	}
	return nameplayer;
}

NombreJugador(playerid)
{
	new nameplayer[MAX_PLAYER_NAME + 2];
	GetPlayerName(playerid, nameplayer, sizeof nameplayer);
	if (InfoJugador[playerid][jUsoMascara]) format(nameplayer, sizeof nameplayer, "Desconocido_%d", InfoJugador[playerid][jID]);
	else
	{
		for(new i = 0, j = strlen(nameplayer); i < j; i ++)
		{
			if(nameplayer[i] == '_')
			{
				nameplayer[i] = ' ';
			}
		}
	}
	return nameplayer;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if (!IsPlayerConnectedEx(playerid)) { return 1; }
	if (playerid != INVALID_PLAYER_ID)
	{
		switch (weaponid)
		{
			case 49,50,53,54: //caidas y varios
			{
				if (EnServicioADM[playerid] == 1) return 1;
				_arma[playerid] = weaponid;
				asesino[playerid] = issuerid;
				Quitar_Vida(playerid, -amount);
				return 1;
			}
		}
	}
	if (playerid != INVALID_PLAYER_ID ||issuerid != INVALID_PLAYER_ID)
	{
		if (!CheckTimer(20, TimerCombate[playerid]))
		{
			TimerCombate[playerid] = gettime();
			TimerCombate[issuerid] = gettime();
		}
		if (EnZonaSegura[issuerid] != 0 && (!Es_Banda(issuerid, 1, 2, 3)))
		{
			if (GetPlayerState(issuerid) == PLAYER_STATE_ONFOOT && GetPlayerSpecialAction(issuerid) == SPECIAL_ACTION_NONE) ApplyAnimation(issuerid, "PED", "IDLE_tired", 4.1, false, false, false, false, 0);
			SendClientMessage(issuerid, 0xccccccFF, "Info: {FFFFFF}Estas en una zona segura, no puedes agredir.");
			return 1;
		}
		if (EnServicioADM[playerid] == 1) return 1;
		if (InfoJugador[playerid][jMuerto] == 1) return 1;
		if (GetPlayerState(playerid) == PLAYER_STATE_WASTED) return 1;
		if (GetPVarInt(playerid, "EnEvento") == 1) return 1;
		//anticheat
		if (weaponid != 0) advWeapons[playerid] = 0;
		_arma[playerid] = weaponid;
		asesino[playerid] = issuerid;
		new Float:armour = InfoJugador[playerid][jChaleco];
		// eagle
		// taser
		if (weaponid == 23 && modotazer[issuerid]==1)
		{
			if (IsPlayerInAnyVehicle(playerid))
			{
				if (EnMotos_Bicis(GetPlayerVehicleID(playerid)))
				{
					if (!CercaDelWeon(10.0, issuerid, playerid)) return ShowInfoForPlayer(issuerid, "~r~No lograste tasear al jugador, esta muy lejos.", 2000);
					RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid, 0);
					Taseado[playerid] = 1;
					PlayerAudio(playerid, 6003, 8.0);
					SendClientMessageEx(playerid, 0xAFAFAFFF, "Importante: %s te ha paralizado con cables de taser, 10 segundos para pasar efecto.", NombreJugador(issuerid));
					SendClientMessageEx(issuerid, 0xAFAFAFFF, "Importante: Has paralizado con cables de taser a %s.", NombreJugador(playerid));
					SetTimerEx("_FGomas2", 10000, false, "i", playerid);
					return 1;
				}
			}
			else
			{
				if (!CercaDelWeon(10.0, issuerid, playerid)) return ShowInfoForPlayer(issuerid, "~r~No lograste tasear al jugador, esta muy lejos.", 2000);
				TogglePlayerControllable(playerid, 0);
				Taseado[playerid] = 1;
				PlayerAudio(playerid, 6003, 8.0);
				SendClientMessageEx(playerid, 0xAFAFAFFF, "Importante: %s te ha paralizado con cables de taser.", NombreJugador(issuerid));
				SendClientMessageEx(issuerid, 0xAFAFAFFF, "Importante: Has paralizado con cables de taser a %s. (/quitarcables)", NombreJugador(playerid));
				return 1;
			}
		}
		// escopetita
		if (weaponid == 25 && modotazer[issuerid]==1)
		{
			if (IsPlayerInAnyVehicle(playerid))
			{
				if (EnMotos_Bicis(GetPlayerVehicleID(playerid)))
				{
					if (_Gomas[playerid] == 1) return 1;
					TogglePlayerControllable(playerid, 0);
					RemovePlayerFromVehicle(playerid);
					_Gomas[playerid] = 1;
					SendClientMessageEx(playerid, 0xAFAFAFFF, "Importante: %s te ha paralizado con balas de goma, 10 segundos para pasar efecto.", NombreJugador(issuerid));
					SendClientMessageEx(issuerid, 0xAFAFAFFF, "Importante: Has paralizado con balas de goma a %s.", NombreJugador(playerid));
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("_FGomas", 10000, false, "i", playerid);
					return 1;
				}
			}
			else
			{
				if (_Gomas[playerid] == 1) return 1;
				TogglePlayerControllable(playerid, 0);
				_Gomas[playerid] = 1;
				SendClientMessageEx(playerid, 0xAFAFAFFF, "Importante: %s te ha paralizado con balas de goma, 10 segundos para pasar efecto.", NombreJugador(issuerid));
				SendClientMessageEx(issuerid, 0xAFAFAFFF, "Importante: Has paralizado con balas de goma a %s.", NombreJugador(playerid));
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("_FGomas", 10000, false, "i", playerid);
				return 1;
			}
		}
		// da?os
		if (armour > amount)
		{
			InfoJugador[playerid][jChaleco] = armour-amount;
		}
		else
		{
			InfoJugador[playerid][jChaleco] = 0.0;
			armour = amount-armour;
			Quitar_Vida(playerid, -armour);
		}
		SetPlayerArmour(playerid, InfoJugador[playerid][jChaleco]);
		guardar_float_mysql("cuentas", "Chaleco", InfoJugador[playerid][jID], InfoJugador[playerid][jChaleco]);
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
    if(bodypart == 9)
	{
		intentoac[playerid]++;
		if(intentoac[playerid] > 3)
		{
	    	CheatDetected(playerid, "Ha acertado un tiro a la cabeza", 1);
	    	intentoac[playerid] = 0;
		}
	}
    return 1;
}

stock PlayerAudio(playerid, soundid, Float: radio = 10.0)// Realistic sound playback
{
    new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);
	foreach(new i: Player)
	{
		if(_enPos(i, radio, x, y, z)) PlayerPlaySound(i, soundid, x, y, z);
	}
	return 1;
}

main()
{
    print(" ");
    print("SERVIDOR INICIADO CON EXITO.");
	print(" ");
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	new id = verificar_id_vehiculo(vehicleid);
	if (id != -1)
	{
		InfoVehiculo[id][vPaintJob] = paintjobid;
		guardar_int_mysql("vehiculos", "PaintJob", InfoVehiculo[id][vID], InfoVehiculo[id][vPaintJob]);
	}
    return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	new id = verificar_id_vehiculo(vehicleid);
	if (id != -1)
	{
		InfoVehiculo[id][vColor1] = color1;
		InfoVehiculo[id][vColor2] = color2;
		guardar_int_mysql("vehiculos", "Color1", InfoVehiculo[id][vID], InfoVehiculo[id][vColor1]);
		guardar_int_mysql("vehiculos", "Color2", InfoVehiculo[id][vID], InfoVehiculo[id][vColor2]);
	}
    return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	if (enterexit == 0)
	{
		if (EsteVehEs(playerid, GetPlayerVehicleID(playerid)) > -1)
		{
			SaveVehicleMods(EsteVehEs(playerid, GetPlayerVehicleID(playerid)));
		}
		SetPlayerInterior(playerid, 0);
	}
    return 0;
}

//vehicle spawning
public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	if (cheat_VehicleSpawning != 0)
	{
		new Float: ac_x, Float: ac_y, Float: ac_z, Float: distance = GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z);
		GetVehiclePos(vehicleid, ac_x, ac_y, ac_z);
		if (distance > 16.0 && ac_z > -70 && distance > uwuVehPos[vehicleid][vp_distance] + ( distance / 2 ))
		{
			GetVehicleZAngle(vehicleid, uwuVehPos[vehicleid][vp_z_angle]);
			SetVehicleZAngle(vehicleid, uwuVehPos[vehicleid][vp_z_angle]);
			MoverVehiclePos(vehicleid, ac_x, ac_y, ac_z );
			if (InfoJugador[playerid][jHorasConectado] == 0 || InfoJugador[playerid][jHorasConectado] == 1) { CheatDetected(playerid, "Vehicle Spawning", 2); }
			return 1;
		}
		uwuVehPos[vehicleid][vp_distance] = distance;
	}
	return 1;
}

CheatDetected(playerid, reason[], type)
{
	if (InfoJugador[playerid][jAdmin] != 0) return 1;
	new gformat[320];
	if (type == 1) //Advertencia
	{
		format(gformat, sizeof gformat, "{DC1005}[AC-UwU]{FFFFFF} Se detecto a %s[%d] de posible '%s'.", InfoJugador[playerid][jNombre_Apellido], playerid, reason);
		SendAdminMessage(0xFFFFFFFF, gformat);
	}
	else if (type == 2) //Kick
	{
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		format(gformat, sizeof gformat, "{DC1005}[AC-UwU]{FFFFFF} %s[%d] fue expulsado por '%s' - IP: %s", InfoJugador[playerid][jNombre_Apellido], playerid, reason, Ip);
		SendAdminMessage(0xFFFFFFFF, gformat);
		cheat_kick(playerid, reason);
	}
	return 2;
}

stock cheat_kick(playerid, reason[])
{
	printf("[AC-UwU] %s kickeado [%s]", InfoJugador[playerid][jNombre_Apellido], reason);
	SendClientMessageEx(playerid, 0x989898FF, "Has sido expulsado por el anticheat, detectado: {F80101}%s", reason);
	new string[185];
	new File: antic_Log = fopen("Anticheat_uwu_log.txt", io_append);
	format(string, sizeof string, "%s expulsado - #%s\r\n", InfoJugador[playerid][jNombre_Apellido], reason);
	fwrite(antic_Log, string);
	fclose(antic_Log);
	format(string, sizeof string, "Fue expulsado - #%s", reason);
	AddRegistroAC(playerid, string);
	SetTimerEx("TimerKICK", 800, false, "i", playerid);
	return 1;
}


stock Es_job(jugador, trabajo, extra = -1, extra2 = -1)//trabajos
{
	if(IsPlayerConnected(jugador))
	{
	    new job=InfoJugador[jugador][jTrabajo1], job2=InfoJugador[jugador][jTrabajo2], job3=InfoJugador[jugador][jTrabajo3];

		if(job == trabajo || job == extra || job == extra2) return 1;
		else if(job2 == trabajo || job2 == extra || job2 == extra2) return 1;
		else if(job3 == trabajo || job3 == extra || job3 == extra2) return 1;
	}
	return 0;
}

stock Es_Banda(playerid, banda, extra = -1, extra2 = -1, extra3 = -1, extra4 = -1)//facciones
{
	if (!IsPlayerConnectedEx(playerid)) return 1;
	new lider = InfoJugador[playerid][jFamLider], miembro = InfoJugador[playerid][jFamMiembro];
	if (miembro == banda || miembro == extra || miembro == extra2 || miembro == extra3 || miembro == extra4) return 1;
	else if (lider == banda || lider == extra || lider == extra2 || lider == extra3 || lider == extra4) return 1;
	return 0;
}

stock Es_Lider(jugador, banda, extra = -1, extra2 = -1, extra3 = -1)//lideres
{
	if(IsPlayerConnected(jugador))
	{
		new lider = InfoJugador[jugador][jFamLider];
		if(lider == banda || lider == extra || lider == extra2 || lider == extra3) return 1;
	}
	return 0;
}

//rango
en_Concesionaria(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,5.0,1986.5800,-2100.4500,13.5469)) { return 1; } //motos
	else if(IsPlayerInRangeOfPoint(playerid,5.0,2131.8674, -1151.0360, 23.8920)) { return 1; } //Coutt And Schutz
	else if(IsPlayerInRangeOfPoint(playerid,5.0,519.0496, -1293.6548, 17.2224)) { return 1; } //grotti
	else if(IsPlayerInRangeOfPoint(playerid,5.0,2793.1045, -1087.5013, 30.6801)) { return 1; } //camionetas
	else if(IsPlayerInRangeOfPoint(playerid,5.0,2515.4216, -1957.9753, 16.7286)) { return 1; } //Nuevased
	else if(IsPlayerInRangeOfPoint(playerid,5.0,2589.1169, -2219.4470, 13.5184)) { return 1; } //coches usados
	return 0;
}

EstaEnAutoSAN(carid)
{
	if(GetVehicleModel(carid) == 582 || GetVehicleModel(carid) == 488) return 1;
	return 0;
}

EstaEnBanco(playerid)
{
	if (_enPos(playerid, 2.0, 822.0089,1.8540,1004.1797)) return 1;
	if (ID_Cajero(playerid) != -1) return 1;
	return 0;
}

EstaEnPuntosDeMesas(playerid) {
	if(_enPos(playerid, 2.0, 1876.4457,-1859.1759,13.5781)) return 1;
	else if(_enPos(playerid, 2.0, 1880.4150,-1859.1361,13.5771)) return 1;
	else if(_enPos(playerid, 2.0, 1884.5431,-1859.1453,13.5761)) return 1;
	else if(_enPos(playerid, 2.0, 1889.8762,-1859.0316,13.5748)) return 1;
	else if(_enPos(playerid, 2.0, 1889.8318,-1854.1593,13.5736)) return 1;
	else if(_enPos(playerid, 2.0, 1884.5231,-1854.2139,13.5749)) return 1;
	else if(_enPos(playerid, 2.0, 1880.3518,-1854.1354,13.5759)) return 1;
	else if(_enPos(playerid, 2.0, 1876.4625,-1854.0952,13.5769)) return 1;
	else if(_enPos(playerid, 2.0, 1876.4602,-1849.1450,13.5757)) return 1;
	else if(_enPos(playerid, 2.0, 1880.3745,-1849.1436,13.5747)) return 1;
	else if(_enPos(playerid, 2.0, 1884.5364,-1849.1409,13.5737)) return 1;
	else if(_enPos(playerid, 2.0, 1889.8585,-1849.1438,13.5724)) return 1;
    return 0;
}

EstaEnPuntosDeArboles(playerid) {
    if(_enPos(playerid, 3.0, -441.13446, -1767.01123, 6.06064)) return 1;
    else if(_enPos(playerid, 3.0, -432.12009, -1785.66162, 3.72014)) return 1;
    else if(_enPos(playerid, 3.0, -419.71930, -1793.72607, 3.42763)) return 1;
    else if(_enPos(playerid, 3.0, -409.08514, -1794.17078, 3.07774)) return 1;
    else if(_enPos(playerid, 3.0, -404.41458, -1782.54700, 3.10609)) return 1;
    else if(_enPos(playerid, 3.0, -398.54572, -1769.50366, 4.84904)) return 1;
    else if(_enPos(playerid, 3.0, -393.60931, -1792.14294, 3.10774)) return 1;
    return 0;
}

_Fabrica(playerid) {
    if (_enPos(playerid, 2.0, 1393.5485,1043.5651,1464.2018)) return 1;
    else if (_enPos(playerid, 2.0, 1393.4978,1041.1793,1464.2018)) return 1;
    else if (_enPos(playerid, 2.0, 1393.4574,1038.8839,1464.2018)) return 1;
    else if (_enPos(playerid, 2.0, 1393.4114,1036.4785,1464.2018)) return 1;
    else if (_enPos(playerid, 2.0, 1396.0099,1036.4309,1464.2018)) return 1;
    else if (_enPos(playerid, 2.0, 1396.0565,1038.7504,1464.2018)) return 1;
    else if (_enPos(playerid, 2.0, 1396.0986,1041.1199,1464.2018)) return 1;
    else if (_enPos(playerid, 2.0, 1396.1481,1043.5350,1464.2018)) return 1;
    return 0;
}

en_punto_arresto(playerid)
{
	if (_enPos(playerid, 5.0, 2314.0645,2447.0774,3.2734)) return 1; // Garage LV
	else if (_enPos(playerid, 5.0, 1560.5967,-1693.8125,5.8906)) return 1; // Garage LS
	else if (_enPos(playerid, 5.0, -1623.6234,660.0409,-5.2422)) return 1; // Garage SF
	else if (_enPos(playerid, 5.0, 2255.8445,2474.8198,38.6837)) return 1; // Aero LV
	else if (_enPos(playerid, 5.0, 1548.9985,-1706.3549,28.3948)) return 1; // Aero LS
	else if (_enPos(playerid, 5.0, -1688.3605,714.4664,30.6016)) return 1; // Aero SF
	else if (_enPos(playerid, 5.0, 200.7210, 168.3594, 1002.9638)) return 1; // Interior LA
	else if (_enPos(playerid, 5.0, 217.5615,1855.1033,12.9325)) return 1; //arrestargn
	else if (_enPos(playerid, 5.0, 2746.6055,-2470.8145,13.6484)) return 1; //arrestar nuevo SAEM
	else if (_enPos(playerid, 5.0, 620.5442,-596.2567,17.2330)) return 1; //arrestar sheriff
	return 0;
}

en_punto_tallerpd(playerid)
{
	if (_enPos(playerid, 5.0, 2278.1614,2443.0762,3.2734)) return 1; // LV
	else if (_enPos(playerid, 5.0, 2322.3467,2474.1570,38.6837)) return 1; // AIR LV
	else if (_enPos(playerid, 5.0, 1357.9662,-33.9916,-91.6174)) return 1; // raro
	else if (_enPos(playerid, 5.0, -1574.5828,749.0201,-5.9590)) return 1; // SF real
	else if (_enPos(playerid, 5.0, -1679.5690,705.9722,30.6016)) return 1; // AIR SF
	else if (_enPos(playerid, 5.0, 1568.7781,-1694.7095,5.8906)) return 1; //LS
	else if (_enPos(playerid, 5.0, 1567.7096,-1697.2681,28.3956)) return 1; //AIR LS
	return 0;
}

EstaEnPuntosCosechas(playerid) {
    if(_enPos(playerid, 10.0, -329.8441,-1557.6462,17.1252)) return 1;
    else if(_enPos(playerid, 10.0, -234.1303,-1548.5472,6.3998)) return 1;
    else if(_enPos(playerid, 10.0, -213.3647,-1471.5482,9.1731)) return 1;
    else if(_enPos(playerid, 10.0, -330.6235,-1470.2892,15.6810)) return 1;
    else if(_enPos(playerid, 10.0, -333.9123,-1512.1113,16.0053)) return 1;
    else if(_enPos(playerid, 10.0, -264.0076,-1469.2531,5.0508)) return 1;
    else if(_enPos(playerid, 10.0, -160.0505,-1415.3773,3.9964)) return 1;
    else if(_enPos(playerid, 10.0, -167.2669,-1304.8627,5.1608)) return 1;
    else if(_enPos(playerid, 10.0, -318.7726,-1315.9666,10.3838)) return 1;
    else if(_enPos(playerid, 10.0, -286.0480,-1369.3938,10.4001)) return 1;
    else if(_enPos(playerid, 10.0, -326.8901,-1429.5435,16.1370)) return 1;
    else if(_enPos(playerid, 10.0, -333.9123,-1512.1113,16.0053)) return 1;
    else if(_enPos(playerid, 10.0, -282.6288,-1466.4514,6.3875)) return 1;
    else if(_enPos(playerid, 10.0, -218.7042,-1516.6606,8.2762)) return 1;
    else if(_enPos(playerid, 10.0, -281.3156,-1555.7562,6.9667)) return 1;
    else if(_enPos(playerid, 10.0, -167.2669,-1304.8627,5.1608)) return 1;
    else if(_enPos(playerid, 10.0, -318.7726,-1315.9666,10.3838)) return 1;
    else if(_enPos(playerid, 10.0, -286.0480,-1369.3938,10.4001)) return 1;
    else if(_enPos(playerid, 10.0, -326.8901,-1429.5435,16.1370)) return 1;
    else if(_enPos(playerid, 10.0, -282.6288,-1466.4514,6.3875)) return 1;
    else if(_enPos(playerid, 10.0, -218.7042,-1516.6606,8.2762)) return 1;
    else if(_enPos(playerid, 10.0, -281.3156,-1555.7562,6.9667)) return 1;
    else if(_enPos(playerid, 10.0, -288.0921,-1526.8507,8.6386)) return 1;
    else if(_enPos(playerid, 10.0, -286.0480,-1369.3938,10.4001)) return 1;
    else if(_enPos(playerid, 10.0, -347.0992,-1504.7065,22.2383)) return 1;
    else if(_enPos(playerid, 10.0, -369.2457,-1464.7102,26.7027)) return 1;
    return 0;
}

_Pdrogas(playerid) {
	if(_enPos(playerid, 10.0, 633.3113, -1776.1129, 14.1459)) return 1; //- Marihuana
	else if(_enPos(playerid, 10.0, 990.2177, -1349.8931, 13.3322)) return 1; //- Crack
	else if(_enPos(playerid, 10.0, 2199.9021, -1259.1571, 24.0084)) return 1; //- Heroina
	else if(_enPos(playerid, 10.0, 2537.6741, -1469.8153, 23.9680)) return 1; //- lsd
	else if(_enPos(playerid, 10.0, 2280.2500, -1937.8478, 13.5463)) return 1; //- cocaina
	return 0;
}

_Pentregas(playerid) {
	if(_enPos(playerid, 10.0, 1843.9279, -1863.0637, 13.4591)) return 1;
	else if(_enPos(playerid, 10.0, 1798.3921, -1441.8682, 13.3058)) return 1;
	else if(_enPos(playerid, 10.0, 2092.6326, -1343.3174, 23.9050)) return 1;
	else if(_enPos(playerid, 10.0, 2139.8669, -1207.1927, 23.9445)) return 1;
	else if(_enPos(playerid, 10.0, 1449.1597, -1149.7483, 23.8987)) return 1;
	else if(_enPos(playerid, 10.0, 486.9438, -1468.7220, 18.5618)) return 1;
	else if(_enPos(playerid, 10.0, 2358.1895, -1472.5239, 23.7326)) return 1;
	else if(_enPos(playerid, 10.0, 1832.9298, -1403.4407, 13.3343)) return 1;
	else if(_enPos(playerid, 10.0, 1574.1155, -1286.5681, 17.3694)) return 1;
	else if(_enPos(playerid, 10.0, 788.4850, -1608.5558, 13.3503)) return 1;
	else if(_enPos(playerid, 10.0, 951.4890, -1366.0647, 13.2354)) return 1;
	else if(_enPos(playerid, 10.0, 2400.4500, -1496.9219, 23.7326)) return 1;
	else if(_enPos(playerid, 10.0, -2033.2224,-95.0304,35.5155)) return 1; //SF
	else if(_enPos(playerid, 10.0, 2103.3979,2037.3856,11.1668)) return 1; //LV
    return 0;
}

EstaEnTiendaRopa(playerid) {
    if(_enPos(playerid, 30.0, 207.5627, -103.7291, 1005.2578)) return 1;
    else if(_enPos(playerid, 30.0, 203.9068, -41.0728, 1001.8047)) return 1;
    else if(_enPos(playerid, 25.0, 203.9068, -41.0728, 1001.8047)) return 1;
    else if(_enPos(playerid, 30.0, 214.4470, -7.6471, 1001.2109)) return 1;
    else if(_enPos(playerid, 50.0, 161.3765, -83.8416, 1001.8047)) return 1;
    else if(_enPos(playerid, 30.0, -2664.3318, 1538.4259, 907.1797)) return 1;
    else if(_enPos(playerid, 30.0, 1395.0045, -1896.1139, 13.3733)) return 1;
    else if(_enPos(playerid, 30.0, 202.6777, -163.0623, 1000.5306)) return 1;
    return 0;
}

//camionero
funcion _CamionCancel(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) { if(Camionero_Vehicle(vehicleid)) SetVehicleToRespawn(vehicleid); }
    DeletePVar(playerid, "TipoCarga");
    _Contenido[_CamVeh[playerid]] = 0;
    _CamVeh[playerid] = INVALID_VEHICLE_ID;
    gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
    DisablePlayerCheckpoint(playerid);
    return 1;
}


//vehiculos
EstaAutoEnganche(carid) {
    if(GetVehicleModel(carid) == 485 || GetVehicleModel(carid) == 525 || GetVehicleModel(carid) == 583 || GetVehicleModel(carid) == 574) { return 1; }
    return 0;
}

LAFD_Veh(carid)
{
    for(new v = 0; v < sizeof(LAFDVehicle); v++) { if(carid == LAFDVehicle[v]) return 1; }
    return 0;
}

LSPD_Veh(carid)
{
    for(new v = 0; v < sizeof(LSPDVehicle); v++) { if(carid == LSPDVehicle[v]) return 1; }
    return 0;
}

LSPD_Veh2(carid)
{
	for(new v = 0; v < 90; v++) { if(carid == LSPDVehicle[v]) return 1; }
	return 0;
}

CNN_Veh(carid)
{
    for(new v = 0; v < sizeof(CNNVehicle); v++) { if(carid == CNNVehicle[v]) return 1; }
    return 0;
}

Basurero_Vehicle(carid) {
    for(new v = 0; v < sizeof(BasureroVehicle); v++) { if(carid == BasureroVehicle[v]) return 1; }
    return 0;
}

Camionero_Vehicle(carid) {
    for(new v = 0; v < sizeof(CamioneroVehicle); v++) { if(carid == CamioneroVehicle[v]) return 1; }
    return 0;
}

Granjero_Vehicle(carid) {
    if(GetVehicleModel(carid) == 531) { return 1; }
    return 0;
}

GOB_Vehicle(carid) {
    for(new v = 0; v < sizeof(GOBVehicle); v++) { if(carid == GOBVehicle[v]) return 1; }
    return 0;
}

GN_Vehicle(carid) {
    for(new i = 0; i < sizeof(GNVehicle); i++) { if(GNVehicle[i] == carid) return 1; }
    return 0;
}

EstaEnBicis(carid) {
    if(GetVehicleModel(carid) == 509 || GetVehicleModel(carid) == 481 || GetVehicleModel(carid) == 510) { return 1; }
    return 0;
}

stock IsACruiser(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 523, 427, 490, 528, 596..599, 601: return 1;
	}
	return 0;
}

stock IsABoat(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return 1;
	}
	return 0;
}

stock IsAPlane(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 460, 464, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593: return 1;
	}
	return 0;
}

stock IsAHelicopter(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
	}
	return 0;
}

EnMotos_Bicis(carid) {
    new Bike[] = { 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471 };
    for(new i = 0; i < sizeof(Bike); i++) { if(GetVehicleModel(carid) == Bike[i]) return 1; }
    return 0;
}

EstaEnAvion(carid) {
    new Avion[] = {592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469};
    for(new i = 0; i < sizeof(Avion); i++) { if(GetVehicleModel(carid) == Avion[i]) return 1; }
    return 0;
}


EstaEnBote(carid) {
    new Boats[] = {472, 473, 493, 484, 430, 454, 453, 452, 446};
    for(new i = 0; i < sizeof(Boats); i++) { if(GetVehicleModel(carid) == Boats[i]) return 1; }
    return 0;
}

Veh_MaleteroGrande(carid) {
    new veh[] = {400, 413, 414, 418, 427, 428, 440, 456, 459, 482, 483, 489, 490, 495, 498, 499, 479, 482, 609};
    for(new i = 0; i < sizeof(veh); i++) { if(GetVehicleModel(carid) == veh[i]) return 1; }
    return 0;
}

stock QuitarBolsillos(playerid)
{
	Loop(e, 9, 0)
	{
		InfoJugador[playerid][jBolsillo][e] = 0;
		InfoJugador[playerid][jBolsilloCant][e] = 0;
	}
	new que2ry[1000], query[2000];
	format(que2ry, sizeof que2ry, "UPDATE cuentas SET Bolsillo_1 = 0, Cantidad_bolsillo_1 = 0, Bolsillo_2 = 0, Cantidad_bolsillo_2 = 0, Bolsillo_3 = 0, Cantidad_bolsillo_3 = 0, Bolsillo_4 = 0, Cantidad_bolsillo_4 = 0, Bolsillo_5 = 0, Cantidad_bolsillo_5 = 0,");
	mysql_format(DBngrp, query, sizeof query, "%s Bolsillo_6 = 0, Cantidad_bolsillo_6 = 0, Bolsillo_7 = 0, Cantidad_bolsillo_7 = 0, Bolsillo_8 = 0, Cantidad_bolsillo_8 = 0, Bolsillo_9 = 0, Cantidad_bolsillo_9 = 0 = 0 WHERE ID = '%d'", que2ry, InfoJugador[playerid][jID]);
	mysql_tquery(DBngrp, query);
}

stock QuitarCinturon(playerid)
{
	Loop(e, 6, 0)
	{
		InfoJugador[playerid][jCinturon][e] = 0;
		InfoJugador[playerid][jCinturonCant][e] = 0;
	}
	new que2ry[1000], query[2000];
	format(que2ry, sizeof que2ry, "UPDATE cuentas SET Cinturon_1 = 0, Cantidad_cinturon_1 = 0, Cinturon_2 = 0, Cantidad_cinturon_2 = 0, Cinturon_3 = 0, Cantidad_cinturon_3 = 0, Cinturon_4 = 0,");
	mysql_format(DBngrp, query, sizeof query, "%s Cantidad_cinturon_4 = 0, Cinturon_5 = 0, Cantidad_cinturon_5 = 0, Cinturon_6 = 0, Cantidad_cinturon_6 = 0 WHERE ID = '%d'", que2ry, InfoJugador[playerid][jID]);
	mysql_tquery(DBngrp, query);
}

stock QuitarManos(playerid)
{
	if (Objeto_Carga(InfoJugador[playerid][jManoDerecha])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	if (Objeto_Carga(InfoJugador[playerid][jManoIzquierda])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    InfoJugador[playerid][jManoIzquierda] = 0;
    InfoJugador[playerid][jManoIzquierdaCant] = 0;
    InfoJugador[playerid][jManoDerecha] = 0;
    InfoJugador[playerid][jManoDerechaCant] = 0;
    RemovePlayerAttachedObject(playerid, 6);
    RemovePlayerAttachedObject(playerid, 7);
	new query[500];
	mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET mano_derecha = 0, Cantidad_mano_derecha = 0, mano_izquierda = 0, Cantidad_mano_izquierda = 0 WHERE ID = '%d'", InfoJugador[playerid][jID]);
	mysql_tquery(DBngrp, query);
}

stock QuitarEspalda(playerid)
{
    InfoJugador[playerid][jEspalda] = 0, InfoJugador[playerid][jEspaldaCant] = 0;
    RemovePlayerAttachedObject(playerid, 9);
	new query[256];
	mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Espalda = 0, Cantidad_espalda = 0 WHERE ID = '%d'", InfoJugador[playerid][jID]);
	mysql_tquery(DBngrp, query);
}

stock PlayerPlaySoundEx(soundid, Float: x, Float: y, Float: z) { // Realistic sound playback
    foreach(Player, i) {
        if(_enPos(i, 20.0, x, y, z)) PlayerPlaySound(i, soundid, x, y, z);
    }
    return 1;
}

PartesVehiculo(type) {
    new name[64];
    switch(type) {
        case 0: name = "Aleron";
        case 1: name = "Capo";
        case 2: name = "Techo";
        case 3: name = "Lados";
        case 4: name = "Lamps";
        case 5: name = "Nitro";
        case 6: name = "Escape";
        case 7: name = "Ruedas";
        case 8: name = "Stereo";
        case 9: name = "Hidraulica";
        case 10: name = "Parachoque D.";
        case 11: name = "Parachoque T.";
        case 12: name = "Ventilacion Izq.";
        case 13: name = "Ventilacion Der.";
        default: name = "Desconocida";
    }
    return name;
}

PartesNombres(part) {
    new name[24];
    switch(part - 1000) {
        case 0: name = "Pro";
        case 1: name = "Win";
        case 2: name = "Drag";
        case 3: name = "Alpha";
        case 4: name = "Champ Scoop";
        case 5: name = "Fury Scoop";
        case 6: name = "Roof Scoop";
        case 7: name = "Sideskirt";
        case 8: name = "2x";
        case 9: name = "5x";
        case 10: name = "10x";
        case 11: name = "Race Scoop";
        case 12: name = "Worx Scoop";
        case 13: name = "Round Fog";
        case 14: name = "Champ";
        case 15: name = "Race";
        case 16: name = "Worx";
        case 17: name = "Sideskirt";
        case 18: name = "Upswept";
        case 19: name = "Twin";
        case 20: name = "Large";
        case 21: name = "Medium";
        case 22: name = "Small";
        case 23: name = "Fury";
        case 24: name = "Square Fog";
        case 26: name = "Alien";
        case 27: name = "Alien";
        case 28: name = "Alien";
        case 29: name = "X-Flow";
        case 30: name = "X-Flow";
        case 31: name = "X-Flow";
        case 32: name = "Alien Roof Vent";
        case 33: name = "X-Flow Roof Vent";
        case 34: name = "Alien";
        case 35: name = "X-Flow Roof Vent";
        case 36: name = "Alien";
        case 37: name = "X-Flow";
        case 38: name = "Alien Roof Vent";
        case 39: name = "X-Flow";
        case 40: name = "Alien";
        case 41: name = "X-Flow";
        case 42: name = "Chrome";
        case 43: name = "Slamin";
        case 44: name = "Chrome";
        case 45: name = "X-Flow";
        case 46: name = "Alien";
        case 47: name = "Alien";
        case 48: name = "X-Flow";
        case 49: name = "Alien";
        case 50: name = "X-Flow";
        case 51: name = "Alien";
        case 52: name = "X-Flow";
        case 53: name = "X-Flow";
        case 54: name = "Alien";
        case 55: name = "Alien";
        case 56: name = "Alien";
        case 57: name = "X-Flow";
        case 58: name = "Alien";
        case 59: name = "X-Flow";
        case 60: name = "X-Flow";
        case 61: name = "X-Flow";
        case 62: name = "Alien";
        case 63: name = "X-Flow";
        case 64: name = "Alien";
        case 65: name = "Alien";
        case 66: name = "X-Flow";
        case 67: name = "Alien";
        case 68: name = "X-Flow";
        case 69: name = "Alien";
        case 70: name = "X-Flow";
        case 71: name = "Alien";
        case 72: name = "X-Flow";
        case 88: name = "Alien";
        case 89: name = "X-Flow";
        case 90: name = "Alien";
        case 91: name = "X-Flow";
        case 92: name = "Alien";
        case 93: name = "X-Flow";
        case 94: name = "Alien";
        case 95: name = "X-Flow";
        case 99: name = "Chrome";
        case 100: name = "Chrome Grill";
        case 101: name = "Chrome Flames";
        case 102: name = "Chrome Strip";
        case 103: name = "Convertible";
        case 104: name = "Chrome";
        case 105: name = "Slamin";
        case 106: name = "Chrome Arches";
        case 107: name = "Chrome Strip";
        case 108: name = "Chrome Strip";
        case 109: name = "Chrome";
        case 110: name = "Slamin";
        case 113: name = "Chrome";
        case 114: name = "Slamin";
        case 115: name = "Chrome";
        case 116: name = "Slamin";
        case 117: name = "Chrome";
        case 118: name = "Chrome Trim";
        case 119: name = "Wheelcovers";
        case 120: name = "Chrome Trim";
        case 121: name = "Wheelcovers";
        case 122: name = "Chrome Flames";
        case 123: name = "Bullbar Chrome Bars";
        case 124: name = "Chrome Arches";
        case 125: name = "Bullbar Chrome Lights";
        case 126: name = "Chrome";
        case 127: name = "Slamin";
        case 128: name = "Vinyl Hardtop";
        case 129: name = "Chrome";
        case 130: name = "Hardtop";
        case 131: name = "Softtop";
        case 132: name = "Slamin";
        case 133: name = "Chrome Strip";
        case 134: name = "Chrome Strip";
        case 135: name = "Slamin";
        case 136: name = "Chrome";
        case 137: name = "Chrome Strip";
        case 138: name = "Alien";
        case 139: name = "X-Flow";
        case 140: name = "X-Flow";
        case 141: name = "Alien";
        case 142: name = "Left Oval Vents";
        case 143: name = "Right Oval Vents";
        case 144: name = "Left Square Vents";
        case 145: name = "Right Square Vents";
        case 146: name = "X-Flow";
        case 147: name = "Alien";
        case 148: name = "X-Flow";
        case 149: name = "Alien";
        case 150: name = "Alien";
        case 151: name = "X-Flow";
        case 152: name = "X-Flow";
        case 153: name = "Alien";
        case 154: name = "Alien";
        case 155: name = "Alien";
        case 156: name = "X-Flow";
        case 157: name = "X-Flow";
        case 158: name = "X-Flow";
        case 159: name = "Alien";
        case 160: name = "Alien";
        case 161: name = "X-Flow";
        case 162: name = "Alien";
        case 163: name = "X-Flow";
        case 164: name = "Alien";
        case 165: name = "X-Flow";
        case 166: name = "Alien";
        case 167: name = "X-Flow";
        case 168: name = "Alien";
        case 169: name = "Alien";
        case 170: name = "X-Flow";
        case 171: name = "Alien";
        case 172: name = "X-Flow";
        case 173: name = "X-Flow";
        case 174: name = "Chrome";
        case 175: name = "Slamin";
        case 176: name = "Chrome";
        case 177: name = "Slamin";
        case 178: name = "Slamin";
        case 179: name = "Chrome";
        case 180: name = "Chrome";
        case 181: name = "Slamin";
        case 182: name = "Chrome";
        case 183: name = "Slamin";
        case 184: name = "Chrome";
        case 185: name = "Slamin";
        case 186: name = "Slamin";
        case 187: name = "Chrome";
        case 188: name = "Slamin";
        case 189: name = "Chrome";
        case 190: name = "Slamin";
        case 191: name = "Chrome";
        case 192: name = "Chrome";
        case 193: name = "Slamin";
    }
    return name;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(!(1 <= GetPlayerInterior(playerid) <= 3))
	{
		new szMessage[260];
		format(szMessage, sizeof szMessage, "{FF2F2F}[AdmWarnig]{FFFFFF} %s(%d) tal vez este usando hacks de modificaciones de autos (aplicando: %s %s en un %s).", NombreOriginal(playerid), playerid, PartesNombres(componentid), PartesVehiculo(GetVehicleComponentType(componentid)), GetVehicleName(vehicleid));
		SendAdminMessage(0xFFFFFFFF, szMessage);
	}
	return 1;
}

stock SendMessageFaction(color, string[], member1 = -1, member2 = -1, member3 = -1, member4 = -1)
{
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid))
	{
		if (InfoJugador[playerid][jFamMiembro] == member1 || InfoJugador[playerid][jFamMiembro] == member2 || InfoJugador[playerid][jFamMiembro] == member3 || InfoJugador[playerid][jFamMiembro] == member4)
		{
			SendSplitMessage(playerid, color, string);
		}
	}
}

SendRadioFaction(member, color, string[])
{
	foreach(Player, i)
	{
		if(InfoJugador[i][jFamMiembro] == member)
		{
			SendSplitMessage(i, color, string);
		}
	}
}

SendRadioTrabajo(member, color, string[])
{
	foreach(Player, i)
	{
		if(Es_job(i, member))
		{
			SendSplitMessage(i, color, string);
		}
	}
    return 1;
}
Show_Info_Player(jugador, jugador2)
{
    if (IsPlayerConnectedEx(jugador) && IsPlayerConnectedEx(jugador2))
	{
		new proximonvl = InfoJugador[jugador2][jNivel] + 1, cantidadexp = proximonvl * nivelexp, hide_acoount[3500], gformat[320], indice[128];
		format(gformat, sizeof gformat, "{cccccc}Nombre: {FFFFFF}%s (SQL: %d)\n", InfoJugador[jugador2][jNombre_Apellido], InfoJugador[jugador2][jID]); strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Edad: {FFFFFF}%d años\n", InfoJugador[jugador2][jEdad]);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Correo: {FFFFFF}%d\n", InfoJugador[jugador2][jEmail]);
		strcat(hide_acoount, gformat);
		if (InfoJugador[jugador2][jSexo] == 1) { format(gformat, sizeof gformat, "{cccccc}Sexo: {FFFFFF}Hombre\n"); strcat(hide_acoount, gformat); }
		else if (InfoJugador[jugador2][jSexo] == 2) { format(gformat, sizeof gformat, "{cccccc}Sexo: {FFFFFF}Mujer\n"); strcat(hide_acoount, gformat); }
		if (InfoJugador[jugador2][jTelefono] == 0 || InfoJugador[jugador2][jTelefono] == -1) format(gformat, sizeof gformat, "{cccccc}Telefono: {E7BDA7}No tienes\n");
		else format(gformat, sizeof gformat, "{cccccc}Telefono: {FFFFFF}%d\n", InfoJugador[jugador2][jTelefono]);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Documento: {FFFFFF}%d\n", InfoJugador[jugador2][jDocumento]);
		strcat(hide_acoount, gformat);
		if (InfoJugador[jugador2][jVerificado] == 0) { format(gformat, sizeof gformat, "{cccccc}Estatus: {FFFFFF}Usuario comun\n"); strcat(hide_acoount, gformat); }
		else if (InfoJugador[jugador2][jVerificado] == 1) { format(gformat, sizeof gformat, "{cccccc}Estatus: {FFFFFF}Verificado\n"); strcat(hide_acoount, gformat); }
		if (InfoJugador[jugador2][jYT] == 1) { format(gformat, sizeof gformat, "{FF0000}You{FFFFFF}Tuber: : {FFFFFF}ON\n"); strcat(hide_acoount, gformat); }
		format(gformat, sizeof gformat, "{cccccc}Ganzuas: {FFFFFF}%d\n", InfoJugador[jugador2][jGanzuas]);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Lineas: {ffffff}%d\n", InfoJugador[jugador2][jLineas]);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Carnadas: {FFFFFF}%d\n", InfoJugador[jugador2][jCarnadas]);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Materiales: {FFFFFF}%d\n", InfoJugador[jugador2][jMateriales]);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Coins: {D6B82E}%d\n", InfoJugador[jugador2][jCoins]);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Nivel: {FFFFFF}%d (%d/%d)\n", InfoJugador[jugador2][jNivel], InfoJugador[jugador2][jExperiencia], cantidadexp);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Horas jugadas: {FFFFFF}%d hrs\n", InfoJugador[jugador2][jHorasConectado]);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Membresia: {FFFFFF}%s\n", GetNameVIP(InfoJugador[jugador2][jNivelVIP]));
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Dinero: {1EB032}$%s\n", diner_coma(GetPlayerCash(jugador2)));
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Saldo bancario: {1EB032}$%s\n", diner_coma(InfoJugador[jugador2][jBanco]));
		strcat(hide_acoount, gformat);
		if (InfoJugador[jugador2][jFacMiembro] != 0)
		{

		}
		if (InfoJugador[jugador2][jFamMiembro] != 0)
		{
		    new fam_id = InfoJugador[jugador2][jFamMiembro];
			format(gformat, sizeof gformat, "{cccccc}Banda: {FD1717}%s - %s(%d)\n", InfoFamilia[fam_id][fNombre], fam_rango[fam_id][InfoJugador[jugador2][jFamRango]-1], InfoJugador[jugador2][jFamRango]);
			strcat(hide_acoount, gformat);
		}
		if (InfoJugador[jugador2][jTrabajo1] != 0)
		{
			format(gformat, sizeof gformat, "{cccccc}Trabajo 1: {FFFFFF}%s\n", GetNameJob(InfoJugador[jugador2][jTrabajo1]));
			strcat(hide_acoount, gformat);
		}
		if (InfoJugador[jugador2][jTrabajo2] != 0)
		{
			format(gformat, sizeof gformat, "{cccccc}Trabajo 2: {FFFFFF}%s\n", GetNameJob(InfoJugador[jugador2][jTrabajo2]));
			strcat(hide_acoount, gformat);
		}
		if (InfoJugador[jugador2][jTrabajo3] != 0)
		{
			format(gformat, sizeof gformat, "{cccccc}Trabajo 3: {FFFFFF}%s\n", GetNameJob(InfoJugador[jugador2][jTrabajo3]));
			strcat(hide_acoount, gformat);
		}
		if (InfoJugador[jugador2][jTiempoCarcel] != 0)
		{
			format(gformat, sizeof gformat, "{cccccc}Tiempo carcel: {E7BDA7}%d minutos\n", InfoJugador[jugador2][jTiempoCarcel]);
			strcat(hide_acoount, gformat);
		}
		format(gformat, sizeof gformat, "{cccccc}Arrestos: {FFFFFF}%d veces\n",  InfoJugador[jugador2][jArrestos]);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Sanciones: {E7BDA7}%d oportunidades\n",  InfoJugador[jugador2][jSanciones]);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Puntos de rol: {FFFFFF}%d",  InfoJugador[jugador2][jPuntosRol]);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}IP actual: {FFFFFF}%d\n", InfoJugador[jugador2][jIP]);
		strcat(hide_acoount, gformat);
		format(indice, sizeof indice, "{008BFF}Estadisticas de %s", NombreJugador(jugador2));
		Dialog_Show(jugador, ShowInvalido, DIALOG_STYLE_LIST, indice, hide_acoount, "Cerrar", "");
	}
	return 1;
}

funcion CargarStuff() {
    new arrCoords[14][210];
    new strFromFile2[128];
    new File: file = fopen("Stuff.rp", io_read);
    if(file) {
        fread(file, strFromFile2);
        splits(strFromFile2, arrCoords, ',');
        DineroLoteria = strval(arrCoords[0]);
        DineroEstado = strval(arrCoords[1]);
        if(DineroEstado < 0) DineroEstado = 0;
        if(ValorImpuestos < 0) ValorImpuestos = 0;
        ValorImpuestos = strval(arrCoords[2]);
        SangreLAFD = strval(arrCoords[3]);
        DobleExperiencia = strval(arrCoords[4]);
        if(TroncosDis < 0) TroncosDis = 1000;
        TroncosDis = strval(arrCoords[5]);
        Record_UsersOn = strval(arrCoords[6]);
        UsersD_0 = strval(arrCoords[7]);
        UsersD_1 = strval(arrCoords[8]);
        UsersD_2 = strval(arrCoords[9]);
        UsersT_0 = strval(arrCoords[10]);
        UsersT_1 = strval(arrCoords[11]);
        UsersT_2 = strval(arrCoords[12]);
        TiempoParaConquistar = strval(arrCoords[13]);
        fclose(file);
        print(" Sistema de status del servidor cargado.");
        ActualizarTroncoLabel();
    } else {
        print(" Error con el sistema de status.");
    }
    return 1;
}

stock ActualizarEst() {
    new coordsstring[210];
    format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", DineroLoteria, DineroEstado, ValorImpuestos, SangreLAFD, DobleExperiencia, TroncosDis,
	Record_UsersOn,UsersD_0,UsersD_1,UsersD_2,UsersT_0,UsersT_1,UsersT_2,TiempoParaConquistar);
    new File: file2 = fopen("Stuff.rp", io_write);
    fwrite(file2, coordsstring);
    fclose(file2);
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{

	PlayAudioStreamForPlayer(playerid, "https://audio.jukehost.co.uk/EefMMHQxPKzZ8YORgFHB63J764LWsaOx");

	if (IsPlayerNPC(playerid)) return 1;
	if (state_on[playerid] == 0)
	{
		SetPlayerColor(playerid, 0xE7E7E700); // color logeo
		state_on[playerid] = 1;
		SetSpawnInfo(playerid, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0) ;
		SpawnPlayer(playerid);
		LimpiarPantalla(playerid);
		new playerip[32];
		GetPlayerIp(playerid, playerip, 32);
		if(!strcmp(playerip, InfoJugador[playerid][jIP])) // La IP actual no es la misma IP de la ultima conexion
		{
			new string[210];
			format(string, sizeof string, "Administracion: La ip de acceso de %s(%d) a cambiado de la ultima registrada.", NombreRJugador(playerid), playerid);
			MensajeAdmin(string);
			format(string, sizeof string, "Info: {FFFFFF}Tu IP de acceso cambio desde tu ultimo ingreso a %s.", playerip);
			SendClientMessage(playerid, 0xccccccFF, string);
		}
	}
	return 1;
}
/*
//public SV_VOID:OnPlayerActivationKeyPress(SV_UINT:playerid, SV_UINT:keyid)//sampvoice
{
    // Attach player to local stream as speaker if 'B' key is pressed
 //   if (keyid == 0x42 && lstream[playerid]) SvAttachSpeakerToStream(lstream[playerid], playerid);
    // Attach the player to the global stream as a speaker if the 'Z' key is pressed
    if (keyid == 0x5A && gstream) SvAttachSpeakerToStream(gstream, playerid);
}

public SV_VOID:OnPlayerActivationKeyRelease(SV_UINT:playerid, SV_UINT:keyid)
{
    // Detach the player from the local stream if the 'B' key is released
    if (keyid == 0x42 && lstream[playerid]) SvDetachSpeakerFromStream(lstream[playerid], playerid);
    // Detach the player from the global stream if the 'Z' key is released
    if (keyid == 0x5A && gstream) SvDetachSpeakerFromStream(gstream, playerid);
}
public OnPlayerConnect(playerid)
{
//sampvoice
// Checking for plugin availability
    if (SvGetVersion(playerid) == SV_NULL)
    {
        SendClientMessage(playerid, -1, "No se pudo encontrar el complemento sampvoice. en su Aporte/Data para saber como instalarlo valla al dc principal de FalpaCity");
    }
    // Checking for a microphone
    else if (SvHasMicro(playerid) == SV_FALSE)
    {
        SendClientMessage(playerid, -1, "No se pudo encontrar el micr?fono. sampvoice");
    }
    // Create a local stream with an audibility distance of 40.0, an unlimited number of listeners
    // and the name 'Local' (the name 'Local' will be displayed in red in the players' speakerlist)
    else if ((lstream[playerid] = SvCreateDLStreamAtPlayer(40.0, SV_INFINITY, playerid, 0xff0000ff, "Local")))
    {
        SendClientMessage(playerid, -1, "si eres de PC preciona B para chat de voz FalpaCity Roleplay. Usar Z para hablar podria causar un baneo en su cuenta SI ERES DE ANDROID IGNORA ESTO");

        // Attach the player to the global stream as a listener
        if (gstream) SvAttachListenerToStream(gstream, playerid);

        // Assign microphone activation keys to the player
        SvAddKey(playerid, 0x42);
        SvAddKey(playerid, 0x5A);
    }
////////////////////////////////////////////////////////////////////////////
*/
public OnPlayerConnect(playerid)
{

	Streamer_ToggleIdleUpdate(playerid,1);
	//sala de entrevista
    RemoveBuildingForPlayer(playerid, 1721, -2034.8047, -117.4531, 1034.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2190, -2033.8047, -116.8828, 1034.9609, 0.25);


	///hitman
	RemoveBuildingForPlayer(playerid, 3421, 2351.8281, -652.9219, 129.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 3414, 2351.8281, -652.9219, 129.1875, 0.25);










	//mc donals
	RemoveBuildingForPlayer(playerid, 5530, 2112.9375, -1797.0938, 19.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 2091.1641, -1826.8359, 12.7031, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 2099.8516, -1813.9063, 13.1016, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 2099.8594, -1819.3594, 13.1016, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 2099.8594, -1799.4219, 13.1016, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 2102.6016, -1822.0781, 13.1172, 0.25);
    RemoveBuildingForPlayer(playerid, 1432, 2104.0156, -1812.4219, 12.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 1432, 2101.9922, -1814.7109, 12.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 1432, 2103.4063, -1817.3047, 12.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 1432, 2102.1250, -1819.9531, 12.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 1432, 2101.6328, -1798.1719, 12.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 1432, 2103.9609, -1800.5625, 12.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 2128.3125, -1826.8359, 12.7031, 0.25);
    RemoveBuildingForPlayer(playerid, 5418, 2112.9375, -1797.0938, 19.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 2099.8516, -1793.9766, 13.1016, 0.25);
    RemoveBuildingForPlayer(playerid, 712, 2100.8125, -1764.3750, 21.3906, 0.25);
    RemoveBuildingForPlayer(playerid, 1408, 2102.6641, -1791.3281, 13.1016, 0.25);
    RemoveBuildingForPlayer(playerid, 1432, 2103.6875, -1795.9063, 12.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 1432, 2102.0625, -1793.1406, 12.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2105.0859, -1765.6094, 10.8047, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 2114.7188, -1785.1797, 16.3984, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 2128.3125, -1786.7109, 12.7031, 0.25);

	//Comisaria
	RemoveBuildingForPlayer(playerid, 2204, 225.1094, 122.7422, 1009.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 2204, 225.1094, 125.9688, 1009.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 2210, 226.7891, 128.3984, 1009.2109, 0.25);
	// LSPD
	RemoveBuildingForPlayer(playerid, 1258, 1510.8906, -1607.3125, 13.6953, 0.25);



	if (IsPlayerNPC(playerid)) return 1;
	SetPlayerColor(playerid, 0xE7E7E700); // color logeo
	new Users = Iter_Count(Player), Nombre2[24], Pos_, string[256];
	// lectura de bloqueos ip (31/10/2020)
	new playerIP[19];
	GetPlayerIp(playerid, playerIP, sizeof playerIP);
	if (CheckBan(playerIP))
	{
		new query[160];
		new Cache:result;
		mysql_format(DBngrp, query, sizeof query, "SELECT * FROM ips WHERE IP = '%e'", playerIP);
		result = mysql_query(DBngrp, query);
		new admin[24], razon[256], fecha[256];
		reg_string(0, "Admin", admin, 24);
		reg_string(0, "Razon", razon, 256);
		reg_string(0, "Fecha", fecha, 256);
	    SendClientMessageEx(playerid, 0xCCCC00FF, "Hemos detectado que tu IP se encuentra bloqueada en nuestra base de datos.");
		SendClientMessageEx(playerid, 0xCCCC00FF, "Razon: %s | Admin: %s | Fecha: %s", razon, admin, fecha);
		SendClientMessageEx(playerid, 0xCCCC00FF, "Si esto es un error, puedes apelar en nuestro discord: https://discord.gg/f4FQ6cYK");
		SetTimerEx("TimerKICK", 1000, false, "d", playerid);
		cache_delete(result);
		return 1;
 	}
 	GetPlayerName(playerid, Nombre2, 24);
 	if (CheckChangeName(Nombre2))
	{
	    new query[360];
		mysql_format(DBngrp, query, sizeof query, "SELECT * FROM nombres_cambiados WHERE Nombre_Apellido = '%s'", Nombre2);
		mysql_query(DBngrp, query);
		new admin[24];
		reg_string(0, "Responsable", admin, 24);
	    format(string, sizeof(string), "{FFFFFF}Este nombre esta bloqueado, no puedes usarlo\n\nRegistro BD: {ED801A}%s\n{FFFFFF}Responsable: {00cc00}%s\n\n{FFFFFF}Consideras esto un error?\nToma una captura y ve a nuestro foro\n{ED801A}proximamente.", Nombre2, admin);
	    ShowPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{ED801A}Nombres cambiados - Administracion", string, "Aceptar", "");
		SetTimerEx("TimerKICK", 1000, false, "d", playerid);
		return 1;
	}
	DeletePVar(playerid, "EnCrack");
	//nombre invalido
	Pos_ = strfind(Nombre2, "_");
	if (!Pos_ || Pos_ < 1 || Pos_ > (strlen(Nombre2)-2) || IlegalCharacterName(Nombre2))
	{
		SetPlayerName(playerid, "NombreInvalido");
		ShowPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{FF0000} FORMATO INVALIDO", "> Su nombre contiene un formato invalido, el formato es {00c200}Nombre_Apellido.\n\n   {FFFFFF}- Las inciales del nombre, y el apellido deben estar si o si en MAYUSCULA\n   {FFFFFF}- Ademas, no se permiten nombres de famosos como por ejemplo Romulo_Contreras.", "Aceptar", "");
		SetTimerEx("TimerKICK", 2000, false, "d", playerid);
		return 1;
	}

	//record de usuarios
	if (Users > Record_UsersOn)
	{
		Record_UsersOn = Users;
		printf("- Nuevo record de gente Online: %d personas", Users);
		format(string, sizeof string, "[OOC] North America ROLEPLAY[101]: Hemos conseguido un nuevo record de personas online %d JUGADORES!", Users);
		SendClientMessageToAll(0xFFB600FF, string);
		getdate(UsersD_2,UsersD_1,UsersD_0);
		gettime(UsersT_0,UsersT_1,UsersT_2);
		ActualizarEst();
	}

	//reset variables
	EnZonaSegura[playerid] = 0;

	ID_Banco_Robando[playerid] = -1;
	DeletePVar(playerid, "ModoSpray");
	SetPVarString(playerid, "TextoGraffiti", "");
	SetPVarInt(playerid, "LetraGraffiti", 5);
	Player_Color_Conquista[playerid] = 0;

	Robando_Objeto[playerid] = 0;
	ID_Robo_Casa[playerid] = -1;
	Tiempo_Robo_Casa[playerid] = 0;
    RecogerDinero[playerid] = -1;
	Explotando[playerid] = 0;
	Act_Inventario[playerid] = 0;

	SetPVarInt(playerid, "TT_BAR", -1);
	CarTick[playerid] = 0;
	LastVehicle[playerid] = 0;
	advWeapons[playerid] = 0;
	AdvVehs[playerid] = 0;
	Adv2Vehs[playerid] = 0;
	for (new i = 0; i < MAX_SYNC_TYPES; ++i) { SetSyncTime (playerid, i); }
 	WarningTPlayer[playerid] = 0;
	debugDead[playerid] = 0;
	activate_wasted[playerid] = 0;
	PosSpawnBug[playerid][0] = 2105.0334;
	PosSpawnBug[playerid][1] = -1473.9088;
	PosSpawnBug[playerid][2] = 24.1237;
	PosSpawnBug[playerid][3] = 0.0000;
	PosVwBug[playerid] = 0;
	PosIntBug[playerid] = 0;
	FalsoPD[playerid] = 0;
	Robando[playerid] = 0;
	KillTimer(Robo[playerid]);
	LugarRobo[playerid] = 0;
	ID_Negocio_Robo[playerid] = -1;
	playerTextdraw[playerid] = false;
	puntos_recorridos_basu[playerid] = -1;
	con_basura_mano[playerid] = 0;
	tu_veh_basura[playerid] = 0;
	idcompanero[playerid] = INVALID_PLAYER_ID;
	SetPVarInt(playerid, "act_point", 0);
	NumeroFamilia[playerid] = 0;
	VehiculoMEcha[playerid] = 0;
	PrecioMecaOpera[playerid] = 0;
	YaOfrecioMeca[playerid] = -1;
	EsElOfrecedorMeca[playerid] = -1;
	TimerOperacionMeca[playerid] = -1;
	TimerRepararVip[playerid] = -1;
	TimerCrear[playerid] = -1;
	TimerCombate[playerid] = -1;
	TimerPuertas[playerid]= 10;
	TimerTiempoCarcel[playerid] = 0;
	TimerOtherLlamado[playerid] = 0;
	ConLlamadoMecanico[playerid] = -1;
	EnLlamadoMecanico[playerid] = 0;
	TiempoLlamadoMecanico[playerid] = 0;
	PosLlamadoMecanico[playerid][0] = 0;	PosLlamadoMecanico[playerid][1] = 0;	PosLlamadoMecanico[playerid][2] = 0;
	MecanicoDuty[playerid] = 0;
	PrecioOral[playerid] = -1;
	ClienteOral[playerid] = -1;
	PutaOral[playerid] = -1;
	TimerProstituta[playerid] = -1;
	pagina_mueble[playerid] = 0;
	is_mueble_actual[playerid] = 0;
	edicion_sql_actual[playerid] = -1;
	DentroCasa[playerid] = -1;
	DentroNegocio[playerid] = -1;
	EnModoTrabajo[playerid] = 0;
	PeticionUber[playerid] = 0;
	IdListaWeapon[playerid] = 0;
	IdListaDialog1[playerid] = 0;
	EnServicioUber[playerid] = 0;
	SaliendoServer[playerid] = 0;
	countGameTime[playerid] = 0;
	state_on[playerid] = 0;
	usuario_registro[playerid] = 0;
	reset_InfoJugador(playerid);
	DataUserClean(playerid);
	RemoveBuildingForPlayerEx(playerid);

	DestroyDynamic3DTextLabel(InfoJugador[playerid][jNameTag]);
	InfoJugador[playerid][jNameTag] = Text3D:INVALID_3DTEXT_ID;
	OnLoadPlayerTextDraw(playerid);

	TD_Conquista[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 406.000000, "Conquista:_0");
	PlayerTextDrawLetterSize(playerid, TD_Conquista[playerid], 0.286000, 1.276444);
	PlayerTextDrawAlignment(playerid, TD_Conquista[playerid], 2);
	PlayerTextDrawColor(playerid, TD_Conquista[playerid], -76);
	PlayerTextDrawSetShadow(playerid, TD_Conquista[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_Conquista[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Conquista[playerid], 255);
	PlayerTextDrawFont(playerid, TD_Conquista[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_Conquista[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TD_Conquista[playerid], 0);
	return 1;
}

OnLoadPlayerTextDraw(playerid)
{
	// anuncios 28/04/2021 by edinsonwalker
	TD_Anuncio[playerid][0] = CreatePlayerTextDraw(playerid, 31.400009, 317.333557, "");
	PlayerTextDrawFont(playerid, TD_Anuncio[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, TD_Anuncio[playerid][0], 0.151900, 1.100431);
	PlayerTextDrawSetOutline(playerid, TD_Anuncio[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TD_Anuncio[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, TD_Anuncio[playerid][0], 1);
	PlayerTextDrawColor(playerid, TD_Anuncio[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_Anuncio[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, TD_Anuncio[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, TD_Anuncio[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TD_Anuncio[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, TD_Anuncio[playerid][0], 0);

	TD_Anuncio[playerid][1] = CreatePlayerTextDraw(playerid, 31.000000, 301.583557, "");
	PlayerTextDrawFont(playerid, TD_Anuncio[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, TD_Anuncio[playerid][1], 0.151999, 1.144997);
	PlayerTextDrawSetOutline(playerid, TD_Anuncio[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TD_Anuncio[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, TD_Anuncio[playerid][1], 1);
	PlayerTextDrawColor(playerid, TD_Anuncio[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_Anuncio[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, TD_Anuncio[playerid][1], 0);
	PlayerTextDrawUseBox(playerid, TD_Anuncio[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TD_Anuncio[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, TD_Anuncio[playerid][1], 0);

	//inventario 12/04/2021 by edinsonwalker
	INV_nombre[playerid] = CreatePlayerTextDraw(playerid, 559.000000, 417.000000, "_");
	PlayerTextDrawFont(playerid, INV_nombre[playerid], 1);
	PlayerTextDrawLetterSize(playerid, INV_nombre[playerid], 0.262499, 1.049999);
	PlayerTextDrawTextSize(playerid, INV_nombre[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, INV_nombre[playerid], 1);
	PlayerTextDrawSetShadow(playerid, INV_nombre[playerid], 0);
	PlayerTextDrawAlignment(playerid, INV_nombre[playerid], 2);
	PlayerTextDrawColor(playerid, INV_nombre[playerid], 0xea2c2cff);
	PlayerTextDrawBackgroundColor(playerid, INV_nombre[playerid], 255);
	PlayerTextDrawBoxColor(playerid, INV_nombre[playerid], 0);
	PlayerTextDrawUseBox(playerid, INV_nombre[playerid], 1);
	PlayerTextDrawSetProportional(playerid, INV_nombre[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, INV_nombre[playerid], 0);

	nombrelogin[playerid] = CreatePlayerTextDraw(playerid, 230.000000, 381.000000, "_");
	PlayerTextDrawFont(playerid, nombrelogin[playerid], 1);
	PlayerTextDrawLetterSize(playerid, nombrelogin[playerid], 0.287500, 1.250000);
	PlayerTextDrawTextSize(playerid, nombrelogin[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, nombrelogin[playerid], 1);
	PlayerTextDrawSetShadow(playerid, nombrelogin[playerid], 0);
	PlayerTextDrawAlignment(playerid, nombrelogin[playerid], 1);
	PlayerTextDrawColor(playerid, nombrelogin[playerid], 0x525ad1ff);
	PlayerTextDrawBackgroundColor(playerid, nombrelogin[playerid], 255);
	PlayerTextDrawBoxColor(playerid, nombrelogin[playerid], 50);
	PlayerTextDrawUseBox(playerid, nombrelogin[playerid], 0);
	PlayerTextDrawSetProportional(playerid, nombrelogin[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, nombrelogin[playerid], 0);

	INV_skin[playerid] = CreatePlayerTextDraw(playerid, 432.000000, 309.000000, " ");
	PlayerTextDrawFont(playerid, INV_skin[playerid], 5);
	PlayerTextDrawLetterSize(playerid, INV_skin[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, INV_skin[playerid], 68.000000, 90.500000);
	PlayerTextDrawSetOutline(playerid, INV_skin[playerid], 0);
	PlayerTextDrawSetShadow(playerid, INV_skin[playerid], 0);
	PlayerTextDrawAlignment(playerid, INV_skin[playerid], 1);
	PlayerTextDrawColor(playerid, INV_skin[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_skin[playerid], 0);
	PlayerTextDrawBoxColor(playerid, INV_skin[playerid], 255);
	PlayerTextDrawUseBox(playerid, INV_skin[playerid], 0);
	PlayerTextDrawSetProportional(playerid, INV_skin[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, INV_skin[playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, INV_skin[playerid], 286);
	PlayerTextDrawSetPreviewRot(playerid, INV_skin[playerid], -26.000000, 0.000000, 25.000000, 0.959999);
	PlayerTextDrawSetPreviewVehCol(playerid, INV_skin[playerid], 1, 1);

	INV_obj[playerid][0] = CreatePlayerTextDraw(playerid, 496.000000, 219.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][0], 5);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][0], 40.000000, 40.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][0], 1);
	PlayerTextDrawColor(playerid, INV_obj[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][0], -131);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][0], 255);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][0], 1);
	PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][0], 11738);
	PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][0], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, INV_obj[playerid][0], 1, 1);

	INV_obj[playerid][1] = CreatePlayerTextDraw(playerid, 533.000000, 249.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][1], 0.170833, 0.850000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][1], 3);
	PlayerTextDrawColor(playerid, INV_obj[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][1], 0);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][1], 0);

	INV_obj[playerid][2] = CreatePlayerTextDraw(playerid, 539.000000, 219.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][2], 5);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][2], 40.000000, 40.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][2], 1);
	PlayerTextDrawColor(playerid, INV_obj[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][2], -131);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][2], 255);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][2], 1);
	PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][2], 11738);
	PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][2], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, INV_obj[playerid][2], 1, 1);

	INV_obj[playerid][3] = CreatePlayerTextDraw(playerid, 576.000000, 249.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][3], 0.170833, 0.850000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][3], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][3], 3);
	PlayerTextDrawColor(playerid, INV_obj[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][3], 0);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][3], 0);

	INV_obj[playerid][4] = CreatePlayerTextDraw(playerid, 582.000000, 219.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][4], 5);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][4], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][4], 40.000000, 40.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][4], 1);
	PlayerTextDrawColor(playerid, INV_obj[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][4], -131);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][4], 255);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][4], 1);
	PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][4], 11738);
	PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][4], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, INV_obj[playerid][4], 1, 1);

	INV_obj[playerid][5] = CreatePlayerTextDraw(playerid, 619.000000, 249.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][5], 0.170833, 0.850000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][5], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][5], 3);
	PlayerTextDrawColor(playerid, INV_obj[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][5], 0);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][5], 0);

	INV_obj[playerid][6] = CreatePlayerTextDraw(playerid, 496.000000, 263.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][6], 5);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][6], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][6], 40.000000, 40.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][6], 1);
	PlayerTextDrawColor(playerid, INV_obj[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][6], -131);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][6], 255);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][6], 1);
	PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][6], 11738);
	PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][6], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, INV_obj[playerid][6], 1, 1);

	INV_obj[playerid][7] = CreatePlayerTextDraw(playerid, 533.000000, 293.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][7], 2);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][7], 0.170833, 0.850000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][7], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][7], 3);
	PlayerTextDrawColor(playerid, INV_obj[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][7], 0);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][7], 0);

	INV_obj[playerid][8] = CreatePlayerTextDraw(playerid, 539.000000, 263.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][8], 5);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][8], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][8], 40.000000, 40.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][8], 1);
	PlayerTextDrawColor(playerid, INV_obj[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][8], -131);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][8], 255);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][8], 1);
	PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][8], 11738);
	PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][8], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, INV_obj[playerid][8], 1, 1);

	INV_obj[playerid][9] = CreatePlayerTextDraw(playerid, 576.000000, 293.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][9], 2);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][9], 0.170833, 0.850000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][9], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][9], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][9], 3);
	PlayerTextDrawColor(playerid, INV_obj[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][9], 255);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][9], 0);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][9], 0);

	INV_obj[playerid][10] = CreatePlayerTextDraw(playerid, 582.000000, 263.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][10], 5);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][10], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][10], 40.000000, 40.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][10], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][10], 1);
	PlayerTextDrawColor(playerid, INV_obj[playerid][10], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][10], -131);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][10], 255);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][10], 1);
	PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][10], 11738);
	PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][10], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, INV_obj[playerid][10], 1, 1);

	INV_obj[playerid][11] = CreatePlayerTextDraw(playerid, 619.000000, 293.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][11], 2);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][11], 0.170833, 0.850000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][11], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][11], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][11], 3);
	PlayerTextDrawColor(playerid, INV_obj[playerid][11], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][11], 255);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][11], 0);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][11], 0);

	INV_obj[playerid][12] = CreatePlayerTextDraw(playerid, 496.000000, 307.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][12], 5);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][12], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][12], 40.000000, 40.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][12], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][12], 1);
	PlayerTextDrawColor(playerid, INV_obj[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][12], -131);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][12], 255);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][12], 1);
	PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][12], 11738);
	PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][12], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, INV_obj[playerid][12], 1, 1);

	INV_obj[playerid][13] = CreatePlayerTextDraw(playerid, 533.000000, 337.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][13], 2);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][13], 0.170833, 0.850000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][13], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][13], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][13], 3);
	PlayerTextDrawColor(playerid, INV_obj[playerid][13], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][13], 255);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][13], 0);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][13], 0);

	INV_obj[playerid][14] = CreatePlayerTextDraw(playerid, 539.000000, 307.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][14], 5);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][14], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][14], 40.000000, 40.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][14], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][14], 1);
	PlayerTextDrawColor(playerid, INV_obj[playerid][14], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][14], -131);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][14], 255);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][14], 0);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][14], 1);
	PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][14], 11738);
	PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][14], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, INV_obj[playerid][14], 1, 1);

	INV_obj[playerid][15] = CreatePlayerTextDraw(playerid, 576.000000, 337.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][15], 2);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][15], 0.170833, 0.850000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][15], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][15], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][15], 3);
	PlayerTextDrawColor(playerid, INV_obj[playerid][15], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][15], 255);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][15], 0);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][15], 1);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][15], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][15], 0);

	INV_obj[playerid][16] = CreatePlayerTextDraw(playerid, 582.000000, 307.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][16], 5);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][16], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][16], 40.000000, 40.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][16], 0);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][16], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][16], 1);
	PlayerTextDrawColor(playerid, INV_obj[playerid][16], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][16], -131);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][16], 255);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][16], 0);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][16], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][16], 1);
	PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][16], 11738);
	PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][16], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, INV_obj[playerid][16], 1, 1);

	INV_obj[playerid][17] = CreatePlayerTextDraw(playerid, 619.000000, 337.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][17], 2);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][17], 0.170833, 0.850000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][17], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][17], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][17], 3);
	PlayerTextDrawColor(playerid, INV_obj[playerid][17], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][17], 255);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][17], 0);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][17], 1);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][17], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][17], 0);

	INV_obj[playerid][18] = CreatePlayerTextDraw(playerid, 496.000000, 374.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][18], 5);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][18], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][18], 40.000000, 40.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][18], 0);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][18], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][18], 1);
	PlayerTextDrawColor(playerid, INV_obj[playerid][18], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][18], -131);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][18], 255);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][18], 0);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][18], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][18], 1);
	PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][18], 11738);
	PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][18], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, INV_obj[playerid][18], 1, 1);

	INV_obj[playerid][19] = CreatePlayerTextDraw(playerid, 533.000000, 404.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][19], 2);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][19], 0.170833, 0.850000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][19], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][19], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][19], 3);
	PlayerTextDrawColor(playerid, INV_obj[playerid][19], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][19], 255);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][19], 0);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][19], 1);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][19], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][19], 0);

	INV_obj[playerid][20] = CreatePlayerTextDraw(playerid, 539.000000, 374.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][20], 5);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][20], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][20], 40.000000, 40.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][20], 0);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][20], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][20], 1);
	PlayerTextDrawColor(playerid, INV_obj[playerid][20], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][20], -131);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][20], 255);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][20], 0);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][20], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][20], 1);
	PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][20], 11738);
	PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][20], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, INV_obj[playerid][20], 1, 1);

	INV_obj[playerid][21] = CreatePlayerTextDraw(playerid, 576.000000, 404.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][21], 2);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][21], 0.170833, 0.850000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][21], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][21], 1);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][21], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][21], 3);
	PlayerTextDrawColor(playerid, INV_obj[playerid][21], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][21], 255);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][21], 0);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][21], 1);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][21], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][21], 0);

	INV_obj[playerid][22] = CreatePlayerTextDraw(playerid, 582.000000, 374.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][22], 5);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][22], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][22], 40.000000, 40.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][22], 0);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][22], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][22], 1);
	PlayerTextDrawColor(playerid, INV_obj[playerid][22], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][22], -131);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][22], 255);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][22], 0);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][22], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][22], 1);
	PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][22], 11738);
	PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][22], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, INV_obj[playerid][22], 1, 1);

	INV_obj[playerid][23] = CreatePlayerTextDraw(playerid, 619.000000, 404.000000, "");
	PlayerTextDrawFont(playerid, INV_obj[playerid][23], 2);
	PlayerTextDrawLetterSize(playerid, INV_obj[playerid][23], 0.170833, 0.850000);
	PlayerTextDrawTextSize(playerid, INV_obj[playerid][23], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, INV_obj[playerid][23], 1);
	PlayerTextDrawSetShadow(playerid, INV_obj[playerid][23], 0);
	PlayerTextDrawAlignment(playerid, INV_obj[playerid][23], 3);
	PlayerTextDrawColor(playerid, INV_obj[playerid][23], -1);
	PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][23], 255);
	PlayerTextDrawBoxColor(playerid, INV_obj[playerid][23], 0);
	PlayerTextDrawUseBox(playerid, INV_obj[playerid][23], 1);
	PlayerTextDrawSetProportional(playerid, INV_obj[playerid][23], 1);
	PlayerTextDrawSetSelectable(playerid, INV_obj[playerid][23], 0);

	// Info nivel de busqueda

	TD_Wasted[playerid] = CreatePlayerTextDraw(playerid, 550.000000, 431.500000, "_");
	PlayerTextDrawFont(playerid, TD_Wasted[playerid], 3);
	PlayerTextDrawLetterSize(playerid, TD_Wasted[playerid], 0.561666, 2.050000);
	PlayerTextDrawTextSize(playerid, TD_Wasted[playerid], 185.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, TD_Wasted[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TD_Wasted[playerid], 0);
	PlayerTextDrawAlignment(playerid, TD_Wasted[playerid], 3);
	PlayerTextDrawColor(playerid, TD_Wasted[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_Wasted[playerid], 255);
	PlayerTextDrawBoxColor(playerid, TD_Wasted[playerid], 50);
	PlayerTextDrawUseBox(playerid, TD_Wasted[playerid], 0);
	PlayerTextDrawSetProportional(playerid, TD_Wasted[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TD_Wasted[playerid], 0);

	// Info money

	draw_money[playerid] = CreatePlayerTextDraw(playerid, 617.496582, 138.666625, "");
	PlayerTextDrawLetterSize(playerid, draw_money[playerid], 0.337686, 1.255832);
	PlayerTextDrawAlignment(playerid, draw_money[playerid], 3);
	PlayerTextDrawColor(playerid, draw_money[playerid], -16776961);
	PlayerTextDrawSetShadow(playerid, draw_money[playerid], 0);
	PlayerTextDrawSetOutline(playerid, draw_money[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, draw_money[playerid], 255);
	PlayerTextDrawFont(playerid, draw_money[playerid], 3);
	PlayerTextDrawSetProportional(playerid, draw_money[playerid], 1);

	//textdraws

	// configuracion de accesorio 21-10-2020
	MenuToy_TD[playerid][0] = CreatePlayerTextDraw(playerid, 114.000000, 216.000000, "0.01");
	PlayerTextDrawFont(playerid, MenuToy_TD[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, MenuToy_TD[playerid][0], 0.600000, 2.349999);
	PlayerTextDrawTextSize(playerid, MenuToy_TD[playerid][0], 400.000000, 97.500000);
	PlayerTextDrawSetOutline(playerid, MenuToy_TD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, MenuToy_TD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, MenuToy_TD[playerid][0], 2);
	PlayerTextDrawColor(playerid, MenuToy_TD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, MenuToy_TD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, MenuToy_TD[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, MenuToy_TD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, MenuToy_TD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, MenuToy_TD[playerid][0], 0);

	MenuToy_TD[playerid][1] = CreatePlayerTextDraw(playerid, 114.000000, 238.000000, "Posicion - Y");
	PlayerTextDrawFont(playerid, MenuToy_TD[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, MenuToy_TD[playerid][1], 0.270833, 1.100000);
	PlayerTextDrawTextSize(playerid, MenuToy_TD[playerid][1], 400.000000, 108.000000);
	PlayerTextDrawSetOutline(playerid, MenuToy_TD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, MenuToy_TD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, MenuToy_TD[playerid][1], 2);
	PlayerTextDrawColor(playerid, MenuToy_TD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, MenuToy_TD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, MenuToy_TD[playerid][1], 0);
	PlayerTextDrawUseBox(playerid, MenuToy_TD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, MenuToy_TD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, MenuToy_TD[playerid][1], 0);

	// compra de toy 21/10/2020
	Toy_ID[playerid] = -1;
	ToyObject[playerid] = INVALID_OBJECT_ID;

	ToyBuy[playerid] = CreatePlayerTextDraw(playerid, 314.000000, 322.000000, "_");
	PlayerTextDrawFont(playerid, ToyBuy[playerid], 2);
	PlayerTextDrawLetterSize(playerid, ToyBuy[playerid], 0.341666, 1.749998);
	PlayerTextDrawTextSize(playerid, ToyBuy[playerid], 703.000000, 182.000000);
	PlayerTextDrawSetOutline(playerid, ToyBuy[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ToyBuy[playerid], 0);
	PlayerTextDrawAlignment(playerid, ToyBuy[playerid], 2);
	PlayerTextDrawColor(playerid, ToyBuy[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ToyBuy[playerid], 255);
	PlayerTextDrawBoxColor(playerid, ToyBuy[playerid], 0);
	PlayerTextDrawUseBox(playerid, ToyBuy[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ToyBuy[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ToyBuy[playerid], 0);

	// compra de skin 07/10/2020
	Ropa_ID[playerid] = 0;

	SkinBuy[playerid] = CreatePlayerTextDraw(playerid, 447.000000, 357.000000, "_");
	PlayerTextDrawFont(playerid, SkinBuy[playerid], 2);
	PlayerTextDrawLetterSize(playerid, SkinBuy[playerid], 0.275000, 2.149999);
	PlayerTextDrawTextSize(playerid, SkinBuy[playerid], 694.500000, 12.000000);
	PlayerTextDrawSetOutline(playerid, SkinBuy[playerid], 1);
	PlayerTextDrawSetShadow(playerid, SkinBuy[playerid], 0);
	PlayerTextDrawAlignment(playerid, SkinBuy[playerid], 1);
	PlayerTextDrawColor(playerid, SkinBuy[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, SkinBuy[playerid], 255);
	PlayerTextDrawBoxColor(playerid, SkinBuy[playerid], 0);
	PlayerTextDrawUseBox(playerid, SkinBuy[playerid], 1);
	PlayerTextDrawSetProportional(playerid, SkinBuy[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, SkinBuy[playerid], 0);

	// Hud inferior By x1

	//  Info Zona: Ubicacion.

	InfoZona[playerid] = CreatePlayerTextDraw(playerid, 290.000000, 436.000000, "_");
	PlayerTextDrawFont(playerid, InfoZona[playerid], 2);
	PlayerTextDrawLetterSize(playerid, InfoZona[playerid], 0.171666, 1.050000);
	PlayerTextDrawTextSize(playerid, InfoZona[playerid], 400.000000, 319.500000);
	PlayerTextDrawSetOutline(playerid, InfoZona[playerid], 1);
	PlayerTextDrawSetShadow(playerid, InfoZona[playerid], 0);
	PlayerTextDrawAlignment(playerid, InfoZona[playerid], 1);
	PlayerTextDrawColor(playerid, InfoZona[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, InfoZona[playerid], 255);
	PlayerTextDrawBoxColor(playerid, InfoZona[playerid], 50);
	PlayerTextDrawUseBox(playerid, InfoZona[playerid], 0);
	PlayerTextDrawSetProportional(playerid, InfoZona[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, InfoZona[playerid], 0);

   // Info Zona segura.

	InfoZS[playerid] = CreatePlayerTextDraw(playerid, 225.000000, 436.000000, "Zona Segura");
	PlayerTextDrawFont(playerid, InfoZS[playerid], 2);
    PlayerTextDrawLetterSize(playerid, InfoZS[playerid], 0.171666, 1.050000);
	PlayerTextDrawTextSize(playerid, InfoZS[playerid], 400.000000, 319.500000);
	PlayerTextDrawSetOutline(playerid, InfoZS[playerid], 1);
	PlayerTextDrawSetShadow(playerid, InfoZS[playerid], 0);
	PlayerTextDrawAlignment(playerid, InfoZS[playerid], 1);
	PlayerTextDrawColor(playerid, InfoZS[playerid], 0xFF0000FF);
	PlayerTextDrawBackgroundColor(playerid, InfoZS[playerid], 255);
	PlayerTextDrawBoxColor(playerid, InfoZS[playerid], 50);
	PlayerTextDrawUseBox(playerid, InfoZS[playerid], 0);
	PlayerTextDrawSetProportional(playerid, InfoZS[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, InfoZS[playerid], 0);

	// Info Nivel VIP.

	InfoInferior[playerid] = CreatePlayerTextDraw(playerid, 96.000000, 436.000000, "_");
	PlayerTextDrawFont(playerid, InfoInferior[playerid], 2);
    PlayerTextDrawLetterSize(playerid, InfoInferior[playerid], 0.171666, 1.050000);
	PlayerTextDrawTextSize(playerid, InfoInferior[playerid], 400.000000, 319.500000);
	PlayerTextDrawSetOutline(playerid, InfoInferior[playerid], 1);
	PlayerTextDrawSetShadow(playerid, InfoInferior[playerid], 0);
	PlayerTextDrawAlignment(playerid, InfoInferior[playerid], 1);
	PlayerTextDrawColor(playerid, InfoInferior[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, InfoInferior[playerid], 255);
	PlayerTextDrawBoxColor(playerid, InfoInferior[playerid], 50);
	PlayerTextDrawUseBox(playerid, InfoInferior[playerid], 0);
	PlayerTextDrawSetProportional(playerid, InfoInferior[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, InfoInferior[playerid], 0);

	// Info dia de paga.

	PayDayTD[playerid] = CreatePlayerTextDraw(playerid, 24.000000, 163.000000, "_");
	PlayerTextDrawFont(playerid, PayDayTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, PayDayTD[playerid], 0.245833, 1.150000);
	PlayerTextDrawTextSize(playerid, PayDayTD[playerid], 174.500000, 27.000000);
	PlayerTextDrawSetOutline(playerid, PayDayTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, PayDayTD[playerid], 0);
	PlayerTextDrawAlignment(playerid, PayDayTD[playerid], 1);
	PlayerTextDrawColor(playerid, PayDayTD[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, PayDayTD[playerid], 255);
	PlayerTextDrawBoxColor(playerid, PayDayTD[playerid], 170);
	PlayerTextDrawUseBox(playerid, PayDayTD[playerid], 0);
	PlayerTextDrawSetProportional(playerid, PayDayTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, PayDayTD[playerid], 0);

	InfoTextShowing[playerid] = 1;


	// Informacion wep.

	TD_PantallaHG[playerid][1] = CreatePlayerTextDraw(playerid, 4.000000, 436.000000, "NARP");
	PlayerTextDrawFont(playerid, TD_PantallaHG[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, TD_PantallaHG[playerid][1], 0.171666, 1.050000);
	PlayerTextDrawTextSize(playerid, TD_PantallaHG[playerid][1], 400.000000, 319.500000);
	PlayerTextDrawSetOutline(playerid, TD_PantallaHG[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TD_PantallaHG[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, TD_PantallaHG[playerid][1], 1);
	PlayerTextDrawColor(playerid, TD_PantallaHG[playerid][1], 0xFF0000FF);
	PlayerTextDrawBackgroundColor(playerid, TD_PantallaHG[playerid][1], 31);
	PlayerTextDrawBoxColor(playerid, TD_PantallaHG[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, TD_PantallaHG[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, TD_PantallaHG[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, TD_PantallaHG[playerid][1], 0);

    // Info Nivel y Experiencia.

	TD_PantallaHG[playerid][2] = CreatePlayerTextDraw(playerid, 415.000000, 436.000000, "_");
	PlayerTextDrawFont(playerid, TD_PantallaHG[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, TD_PantallaHG[playerid][2], 0.171666, 1.050000);
	PlayerTextDrawTextSize(playerid, TD_PantallaHG[playerid][2], 400.000000, 319.500000);
	PlayerTextDrawSetOutline(playerid, TD_PantallaHG[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, TD_PantallaHG[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, TD_PantallaHG[playerid][2], 2);
	PlayerTextDrawColor(playerid, TD_PantallaHG[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_PantallaHG[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, TD_PantallaHG[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, TD_PantallaHG[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, TD_PantallaHG[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, TD_PantallaHG[playerid][2], 0);

	// Info Hambre.

    TD_PantallaHG[playerid][3] = CreatePlayerTextDraw(playerid, 615.000000, 438.000000, "_");
	PlayerTextDrawFont(playerid, TD_PantallaHG[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, TD_PantallaHG[playerid][3], 0.171666, 1.050000);
	PlayerTextDrawTextSize(playerid, TD_PantallaHG[playerid][3], 400.000000, 319.500000);
	PlayerTextDrawSetOutline(playerid, TD_PantallaHG[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, TD_PantallaHG[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, TD_PantallaHG[playerid][3], 1);
	PlayerTextDrawColor(playerid, TD_PantallaHG[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_PantallaHG[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, TD_PantallaHG[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, TD_PantallaHG[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, TD_PantallaHG[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, TD_PantallaHG[playerid][3], 0);

	// info Sed.

    TD_PantallaHG[playerid][4] = CreatePlayerTextDraw(playerid, 585.000000, 438.000000, "_");
	PlayerTextDrawFont(playerid, TD_PantallaHG[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, TD_PantallaHG[playerid][4], 0.171666, 1.050000);
	PlayerTextDrawTextSize(playerid, TD_PantallaHG[playerid][4], 400.000000, 319.500000);
	PlayerTextDrawSetOutline(playerid, TD_PantallaHG[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, TD_PantallaHG[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, TD_PantallaHG[playerid][4], 1);
	PlayerTextDrawColor(playerid, TD_PantallaHG[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_PantallaHG[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, TD_PantallaHG[playerid][4], 50);
	PlayerTextDrawUseBox(playerid, TD_PantallaHG[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, TD_PantallaHG[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, TD_PantallaHG[playerid][4], 0);




	// compra de skin nuevo by Bernal
	TD_ShopRopa[playerid][0] = CreatePlayerTextDraw(playerid, 550.000000, 380.000000, "_");
	PlayerTextDrawFont(playerid, TD_ShopRopa[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, TD_ShopRopa[playerid][0], 0.600000, 2.950000);
	PlayerTextDrawTextSize(playerid, TD_ShopRopa[playerid][0], 298.500000, 138.500000);
	PlayerTextDrawSetOutline(playerid, TD_ShopRopa[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TD_ShopRopa[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, TD_ShopRopa[playerid][0], 2);
	PlayerTextDrawColor(playerid, TD_ShopRopa[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_ShopRopa[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, TD_ShopRopa[playerid][0], 255);
	PlayerTextDrawUseBox(playerid, TD_ShopRopa[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TD_ShopRopa[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, TD_ShopRopa[playerid][0], 0);

	TD_ShopRopa[playerid][1] = CreatePlayerTextDraw(playerid, 485.000000, 380.000000, "Negocio~n~Ropa: ~y~124 (Normal)~n~~w~Precio: ~g~$450 ~w~(Econ.)");
	PlayerTextDrawFont(playerid, TD_ShopRopa[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, TD_ShopRopa[playerid][1], 0.212500, 0.950000);
	PlayerTextDrawTextSize(playerid, TD_ShopRopa[playerid][1], 720.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, TD_ShopRopa[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TD_ShopRopa[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, TD_ShopRopa[playerid][1], 1);
	PlayerTextDrawColor(playerid, TD_ShopRopa[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_ShopRopa[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, TD_ShopRopa[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, TD_ShopRopa[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, TD_ShopRopa[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, TD_ShopRopa[playerid][1], 0);

	TD_ShopRopa[playerid][2] = CreatePlayerTextDraw(playerid, 504.000000, 348.000000, "< Ant.");
	PlayerTextDrawFont(playerid, TD_ShopRopa[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, TD_ShopRopa[playerid][2], 0.170833, 1.500000);
	PlayerTextDrawTextSize(playerid, TD_ShopRopa[playerid][2], 16.500000, 46.500000);
	PlayerTextDrawSetOutline(playerid, TD_ShopRopa[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, TD_ShopRopa[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, TD_ShopRopa[playerid][2], 2);
	PlayerTextDrawColor(playerid, TD_ShopRopa[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_ShopRopa[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, TD_ShopRopa[playerid][2], 255);
	PlayerTextDrawUseBox(playerid, TD_ShopRopa[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, TD_ShopRopa[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, TD_ShopRopa[playerid][2], 1);

	TD_ShopRopa[playerid][3] = CreatePlayerTextDraw(playerid, 596.000000, 348.000000, "Sig. >");
	PlayerTextDrawFont(playerid, TD_ShopRopa[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, TD_ShopRopa[playerid][3], 0.170833, 1.500000);
	PlayerTextDrawTextSize(playerid, TD_ShopRopa[playerid][3], 16.500000, 46.500000);
	PlayerTextDrawSetOutline(playerid, TD_ShopRopa[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, TD_ShopRopa[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, TD_ShopRopa[playerid][3], 2);
	PlayerTextDrawColor(playerid, TD_ShopRopa[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_ShopRopa[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, TD_ShopRopa[playerid][3], 255);
	PlayerTextDrawUseBox(playerid, TD_ShopRopa[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, TD_ShopRopa[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, TD_ShopRopa[playerid][3], 1);

	TD_ShopRopa[playerid][4] = CreatePlayerTextDraw(playerid, 596.000000, 328.000000, "Comprar");
	PlayerTextDrawFont(playerid, TD_ShopRopa[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, TD_ShopRopa[playerid][4], 0.170833, 1.250000);
	PlayerTextDrawTextSize(playerid, TD_ShopRopa[playerid][4], 16.500000, 46.500000);
	PlayerTextDrawSetOutline(playerid, TD_ShopRopa[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, TD_ShopRopa[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, TD_ShopRopa[playerid][4], 2);
	PlayerTextDrawColor(playerid, TD_ShopRopa[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_ShopRopa[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, TD_ShopRopa[playerid][4], 9109759);
	PlayerTextDrawUseBox(playerid, TD_ShopRopa[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, TD_ShopRopa[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, TD_ShopRopa[playerid][4], 1);

	TD_ShopRopa[playerid][5] = CreatePlayerTextDraw(playerid, 504.000000, 328.000000, "salir (X)");
	PlayerTextDrawFont(playerid, TD_ShopRopa[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, TD_ShopRopa[playerid][5], 0.170833, 1.250000);
	PlayerTextDrawTextSize(playerid, TD_ShopRopa[playerid][5], 16.500000, 46.500000);
	PlayerTextDrawSetOutline(playerid, TD_ShopRopa[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, TD_ShopRopa[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, TD_ShopRopa[playerid][5], 2);
	PlayerTextDrawColor(playerid, TD_ShopRopa[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_ShopRopa[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, TD_ShopRopa[playerid][5], -16776961);
	PlayerTextDrawUseBox(playerid, TD_ShopRopa[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, TD_ShopRopa[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, TD_ShopRopa[playerid][5], 1);

	radio2[playerid] = CreatePlayerTextDraw(playerid, 488.800201, 385.777832, "Frecuencia: 2314");
	PlayerTextDrawLetterSize(playerid, radio2[playerid], 0.323199, 2.207288);
	PlayerTextDrawTextSize(playerid, radio2[playerid], -1.999997, -22.897779);
	PlayerTextDrawAlignment(playerid, radio2[playerid], 1);
	PlayerTextDrawColor(playerid, radio2[playerid], 65535);
	PlayerTextDrawSetShadow(playerid, radio2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, radio2[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, radio2[playerid], 51);
	PlayerTextDrawFont(playerid, radio2[playerid], 3);
	PlayerTextDrawSetProportional(playerid, radio2[playerid], 1);



	CuadroAyuda[playerid] = CreatePlayerTextDraw(playerid, 431.024963, 260.583251, "Bienvenido al servidor, el servidor el servidor cuenta con normativas roleplay donde intentas simular una vida con nosotros usa /ayuda o /duda para resolver tus dudas");
	PlayerTextDrawLetterSize(playerid, CuadroAyuda[playerid], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, CuadroAyuda[playerid], 611.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, CuadroAyuda[playerid], 1);
	PlayerTextDrawColor(playerid, CuadroAyuda[playerid], -1);
	PlayerTextDrawUseBox(playerid, CuadroAyuda[playerid], 1);
	PlayerTextDrawBoxColor(playerid, CuadroAyuda[playerid], -205);
	PlayerTextDrawSetShadow(playerid, CuadroAyuda[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, CuadroAyuda[playerid], 255);
	PlayerTextDrawFont(playerid, CuadroAyuda[playerid], 1);
	PlayerTextDrawSetProportional(playerid, CuadroAyuda[playerid], 1);

	InfoText[playerid] = CreatePlayerTextDraw(playerid, 316.000000, 384.000000, "El comando introducido es incorrecto");
	PlayerTextDrawAlignment(playerid, InfoText[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, InfoText[playerid], 70);
	PlayerTextDrawFont(playerid, InfoText[playerid], 1);
	PlayerTextDrawLetterSize(playerid, InfoText[playerid], 0.290000, 1.200000);
	PlayerTextDrawColor(playerid, InfoText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, InfoText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, InfoText[playerid], 1);

	TD_Necesidades[0] = TextDrawCreate(572.000000, 435.000000, "HUD:radar_burgerShot");
	TextDrawFont(TD_Necesidades[0], 4);
	TextDrawLetterSize(TD_Necesidades[0], 0.600000, 2.000000);
	TextDrawTextSize(TD_Necesidades[0], 13.500000, 13.500000);
	TextDrawSetOutline(TD_Necesidades[0], 1);
	TextDrawSetShadow(TD_Necesidades[0], 0);
	TextDrawAlignment(TD_Necesidades[0], 3);
	TextDrawColor(TD_Necesidades[0], -1);
	TextDrawBackgroundColor(TD_Necesidades[0], 255);
	TextDrawBoxColor(TD_Necesidades[0], 170);
	TextDrawUseBox(TD_Necesidades[0], 1);
	TextDrawSetProportional(TD_Necesidades[0], 1);
	TextDrawSetSelectable(TD_Necesidades[0], 0);

	TD_Necesidades[1] = TextDrawCreate(603.000000, 435.000000, "HUD:radar_dateDrink");
	TextDrawFont(TD_Necesidades[1], 4);
	TextDrawLetterSize(TD_Necesidades[1], 0.600000, 2.000000);
	TextDrawTextSize(TD_Necesidades[1], 13.500000, 13.500000);
	TextDrawSetOutline(TD_Necesidades[1], 1);
	TextDrawSetShadow(TD_Necesidades[1], 0);
	TextDrawAlignment(TD_Necesidades[1], 3);
	TextDrawColor(TD_Necesidades[1], -1);
	TextDrawBackgroundColor(TD_Necesidades[1], 255);
	TextDrawBoxColor(TD_Necesidades[1], 170);
	TextDrawUseBox(TD_Necesidades[1], 1);
	TextDrawSetProportional(TD_Necesidades[1], 1);
	TextDrawSetSelectable(TD_Necesidades[1], 0);

	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if (usuario_registro[playerid] != 2) return 1; // new 16/10/2020
	SetPVarInt(playerid, "TT_BAR", -1);
	if (IsValidPlayerObject(playerid, ToyObject[playerid]))
	{
		DestroyPlayerObject(playerid, ToyObject[playerid]);
		ToyObject[playerid] = INVALID_OBJECT_ID;
	}
	if (tu_veh_basura[playerid] != 0) { SetVehicleToRespawn(tu_veh_basura[playerid]); }
	if (idcompanero[playerid] != 0) { idcompanero[playerid] = -1; }
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && ConLlamadoMecanico[playerid2] == playerid)
	{
		SendClientMessageEx(playerid2, 0xCCCC00FF, "El jugador que solicito un llamado mecanico, se desconecto.");
		ConLlamadoMecanico[playerid2] = -1;
	}
	if (ConLlamadoMecanico[playerid] != -1)
	{
	    if (IsPlayerConnectedEx(ConLlamadoMecanico[playerid]))
	    {
	        SendClientMessage(ConLlamadoMecanico[playerid], 0xCCCC00FF, "El mecanico que tomo tu llamado, se desconecto, intenta llamar otro.");
			TimerOtherLlamado[ConLlamadoMecanico[playerid]] = 0;
	    }
	}
	Robando[playerid] = 0;
	KillTimer(Robo[playerid]);
	LugarRobo[playerid] = 0;
	ID_Negocio_Robo[playerid] = -1;
	PlayerTextDrawDestroy(playerid, draw_money[playerid]);
	MecanicoDuty[playerid] = 0;
	SaliendoServer[playerid] = 1;
	if (ClienteOral[playerid] != -1)
	{
		if (IsPlayerConnectedEx(PutaOral[playerid]))
		{
		    PutaOral[playerid] = -1;
			TimerProstituta[playerid] = -1;
		}
		ClienteOral[playerid] = -1;
		PrecioOral[playerid] = -1;
	}
	DestroyPlayerProgressBar(playerid, BarraExp[playerid]);
	DestroyPlayerProgressBar(playerid, BarraSed[playerid]);
	DestroyPlayerProgressBar(playerid, BarraHambre[playerid]);
	TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
	TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
	SetPVarInt(playerid, "IsNameNew", 0);
    new string[256];
	GetPlayerPos(playerid, InfoJugador[playerid][jPosicionX], InfoJugador[playerid][jPosicionY], InfoJugador[playerid][jPosicionZ]);
	GetPlayerFacingAngle(playerid, InfoJugador[playerid][jPosicionR]);
	InfoJugador[playerid][jInterior] = GetPlayerInterior(playerid);
	InfoJugador[playerid][jVirtualWorld] = GetPlayerVirtualWorld(playerid);
	InfoJugador[playerid][jUltimaConexion] = FechaHoy();
	if (Toy_ID[playerid] != -1)
	{
		InfoJugador[playerid][jInterior] = NegocioInt[playerid];
		InfoJugador[playerid][jVirtualWorld] = NegocioVW[playerid];
		InfoJugador[playerid][jPosicionX] = NegocioPos[playerid][0];
		InfoJugador[playerid][jPosicionY] = NegocioPos[playerid][1];
		InfoJugador[playerid][jPosicionZ] = NegocioPos[playerid][2];
		InfoJugador[playerid][jPosicionR] = NegocioPos[playerid][3];
		Toy_ID[playerid] = -1;
	}
	if (Ropa_ID[playerid] != 0)
	{
		InfoJugador[playerid][jInterior] = NegocioInt[playerid];
		InfoJugador[playerid][jVirtualWorld] = NegocioVW[playerid];
		InfoJugador[playerid][jPosicionX] = NegocioPos[playerid][0];
		InfoJugador[playerid][jPosicionY] = NegocioPos[playerid][1];
		InfoJugador[playerid][jPosicionZ] = NegocioPos[playerid][2];
		InfoJugador[playerid][jPosicionR] = NegocioPos[playerid][3];
		Ropa_ID[playerid] = 0;
	}
    if (GetPVarInt(playerid, "EnEvento") == 1)
	{
        InfoJugador[playerid][jInterior] = jEvento[playerid][eInterior];
        InfoJugador[playerid][jVirtualWorld] = jEvento[playerid][eVW];
        InfoJugador[playerid][jPosicionX] = jEvento[playerid][eVariable][1];
        InfoJugador[playerid][jPosicionY] = jEvento[playerid][eVariable][2];
        InfoJugador[playerid][jPosicionZ] = jEvento[playerid][eVariable][3];
        InfoJugador[playerid][jPosicionR] = jEvento[playerid][eVariable][0];
        InfoJugador[playerid][jVida] = jEvento[playerid][eVariable][4];
        InfoJugador[playerid][jChaleco] = jEvento[playerid][eVariable][5];
    }
    if (IsValidDynamic3DTextLabel(InfoJugador[playerid][jLabelAdmin]))
	{
		DestroyDynamic3DTextLabel(InfoJugador[playerid][jLabelAdmin]);
		InfoJugador[playerid][jLabelAdmin] = Text3D:INVALID_STREAMER_ID;
	}
    if (rent_vehicle_id[playerid] != INVALID_VEHICLE_ID)
	{
	    new vehicleid = rent_vehicle_id[playerid];

	    DestroyVehicle(vehicleid);

	    SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Tu moto rentable fue devuelta por los destrosos.");

	    vehicle_rent_owner[vehicleid] = INVALID_PLAYER_ID;
	    rent_vehicle_id[playerid] = INVALID_VEHICLE_ID;
	}
	if (id_coche_temporal_fac[playerid] != INVALID_VEHICLE_ID)
	{
	    new vehicleid = id_coche_temporal_fac[playerid];

	    DestroyVehicle(vehicleid);

	    SendClientMessage(playerid, 0xccccccFF, "*** El vehiculo faccionario fue eliminado.");

	    vehicle_temporal_owner[vehicleid] = INVALID_PLAYER_ID;
	    id_coche_temporal_fac[playerid] = INVALID_VEHICLE_ID;
	    esfaccion_temvehicle[vehicleid] = 0;
	}
	if (coche_trabajo_id[playerid] != INVALID_VEHICLE_ID)
	{
	    new vehicleid = coche_trabajo_id[playerid];

	    DestroyVehicle(vehicleid);

	    vehicle_rent_owner[vehicleid] = INVALID_PLAYER_ID;
	    coche_trabajo_id[playerid] = INVALID_VEHICLE_ID;
	}
    if (ConquistandoMercado[playerid] >= 0)
    {
	    MercadoData[ConquistandoMercado[playerid]][mTiempoConquista2] = 0;
	    ConquistandoMercado[playerid] = -1;
	    format(string, sizeof string, "(( [Familia] %s(%d) se desconecto, el mercado no pudo ser conquistado ))", NombreJugador(playerid), playerid);
		SendFamilyMessage(InfoJugador[playerid][jFamLider], 0x6BBFA0FF, string);
	    foreach(new i: Player) if (IsPlayerConnectedEx(i))
		{
			PlayerTextDrawHide(i, ConquistaMercado[i]);
		}
	}
	//reporte activo
	Loop(x, MAX_REPORTES, 1) if (InfoReporte[x][rUsuario] == playerid || InfoReporte[x][rReportado] == playerid)
	{
	    if(InfoReporte[x][rID] != 0)
	    {
	        InfoReporte[x][rTiempoReporte] = 0;
			InfoReporte[x][rID] = 0;
		}
	}
	DestroyDynamic3DTextLabel(InfoJugador[playerid][jNameTag]);
	InfoJugador[playerid][jNameTag] = Text3D:INVALID_3DTEXT_ID;
	B_SANMUSIC[playerid] = 0;
	if (UsandoOptiwand[playerid] != -1)
	{
		new h = UsandoOptiwand[playerid];
		InfoJugador[playerid][jPosicionX] = InfoCasa[h][cEntradaX];
		InfoJugador[playerid][jPosicionY] = InfoCasa[h][cEntradaY];
		InfoJugador[playerid][jPosicionZ] = InfoCasa[h][cEntradaZ];
		InfoJugador[playerid][jPosicionR] = InfoCasa[h][cEntradaR];
		InfoJugador[playerid][jInterior] = InfoCasa[h][cEntradaInt];
		InfoJugador[playerid][jVirtualWorld] = InfoCasa[h][cEntradaVW];
	}
	if (checkcoche[playerid] != 0)
	{
	    DestroyVehicle(cocherobo[playerid]);
		checkcoche[playerid] = 0;
		cocherobo[playerid] = 0;
	}
    SetPlayerChatBubble(playerid, "", 0xBFC0C2FF, 50.0, 1000);
    if (InfoFogata[playerid][fPosicionX] != 0.0)
	{
		if (InfoFogata[playerid][fObjeto] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(InfoFogata[playerid][fObjeto]);
			InfoFogata[playerid][fObjeto] = INVALID_STREAMER_ID;
		}
		if (InfoFogata[playerid][fObjeto2] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(InfoFogata[playerid][fObjeto2]);
			InfoFogata[playerid][fObjeto2] = INVALID_STREAMER_ID;
		}
	}
    switch (reason)
	{
        case 0: { format(string, sizeof string, "%s se ha desconectado del servidor. (Problemas de conexion con el servidor.)", NombreRJugador(playerid)); ProxDetector(30.0, playerid, string, 0xd4c417FF, 0xd4c417FF, 0xd4c417FF, 0xd4c417FF, 0xd4c417FF); }
        case 1: { format(string, sizeof string, "%s se ha desconectado del servidor. (Voluntariamente (/q))", NombreRJugador(playerid)); ProxDetector(30.0, playerid, string, 0xd4c417FF, 0xd4c417FF, 0xd4c417FF, 0xd4c417FF, 0xd4c417FF); }
        case 2: { format(string, sizeof string, "%s se ha desconectado del servidor. (Kickeado - Baneado)", NombreRJugador(playerid)); ProxDetector(30.0, playerid, string, 0xd4c417FF, 0xd4c417FF, 0xd4c417FF, 0xd4c417FF, 0xd4c417FF); }
    }
	timer_muerte[playerid] = 0;
    KillTimer(VisitaTimer[playerid]);
	KillTimer(ToqueLlamadaTimer[playerid]); //Sistema telefono
    if (PersonaEnLlamada[playerid] != -1) KillTimer(ToqueLlamadaTimer[PersonaEnLlamada[playerid]]);
    if (EnLlamada[playerid] == 3) { InfoJugador[playerid][jSaldo] -= 3; guardar_int_mysql("cuentas", "Saldo", InfoJugador[playerid][jID], InfoJugador[playerid][jSaldo]); }
	if (PersonaEnLlamada[playerid] != -1)
	{
	    if (EnLlamada[PersonaEnLlamada[playerid]] == 3)
		{
			_Mensaje(PersonaEnLlamada[playerid], 2, "0", "Coste de la llamada: 1$");
			InfoJugador[PersonaEnLlamada[playerid]][jSaldo] -= 1;
			guardar_int_mysql("cuentas", "Saldo", InfoJugador[PersonaEnLlamada[playerid]][jID], InfoJugador[PersonaEnLlamada[playerid]][jSaldo]);
		}
	}
	if ( _sanCall == playerid )
	{
		_MensajeSAN(0x00DC3AFF, "[SAN] Conexion telefonica finalizada.");
		_sanCall = -1;
	}
    for(new i=0; i<MAX_PLAYERS; i++) { if(PersonaEnLlamada[i] == playerid){_Mensaje(i, 2, "0", "Se ha cortado la linea..."); EnLlamada[i] = 0; PersonaEnLlamada[i] = -1; break;} }
    if (GetPVarType(playerid, "AreaVehPos") && GetPVarType(playerid, "AreaVehMus"))
	{
		foreach(Player, i) if (IsPlayerInDynamicArea(i, GetPVarInt(playerid, "AreaVehMus")))
		{
			PararMVeh(i);
			_Mensaje(i, 2, "0", "El dueño de el vehiculo a salido del servidor.");
        }
    }
	if (GetPVarType(playerid, "PlacedBB"))
	{
		if (GetPVarInt(playerid, "PlacedBB") != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
			SetPVarInt(playerid, "PlacedBB", INVALID_STREAMER_ID);
		}
		if (IsValidDynamic3DTextLabel(LabelBoombox[playerid]))
		{
			DestroyDynamic3DTextLabel(LabelBoombox[playerid]);
			LabelBoombox[playerid] = Text3D:INVALID_3DTEXT_ID;
		}
        if (GetPVarType(playerid, "BBArea"))
		{
            foreach(Player, i) if (IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
			{
				StopAudioStreamForPlayer(i);
				_Mensaje(i, 2, "0", "* El dueño del equipo de sonido a salido del servidor.");
            }
        }
    }
    if (GetPVarType(playerid, "PlacedParty"))
	{
		if (GetPVarInt(playerid, "PlacedParty") != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(GetPVarInt(playerid, "PlacedParty"));
			SetPVarInt(playerid, "PlacedParty", INVALID_STREAMER_ID);
		}
        if (GetPVarType(playerid, "PartyArea"))
		{
            foreach(Player, i) if (IsPlayerInDynamicArea(i, GetPVarInt(playerid, "PartyArea")))
			{
				StopAudioStreamForPlayer(i);
				_Mensaje(i, 2, "0", "* El DJ abandono el servidor, espera un momento...");
            }
        }
    }
    if (Spectate[playerid] < 553)
	{
        SpectadorID[Spectate[playerid]] = 999;
        Spectate[playerid] = 999;
    }
    foreach(Player, i)
	{
        if (_MedicAcept[i] == playerid)
		{
            _MedicAcept[playerid] = 999;
            GameTextForPlayer(i, "~w~Jugador~n~~r~se desconecto", 5000, 1);
            _Medic2Call[i] = 0;
            DisablePlayerCheckpoint(i);
        }
        if (_BombAcept[i] == playerid)
		{
            _BombAcept[playerid] = 999;
            GameTextForPlayer(i, "~w~Jugador~n~~r~se desconecto", 5000, 1);
            _Bomb2Call[i] = 0;
            DisablePlayerCheckpoint(i);
        }
    }
    if (EnServicio[playerid] == 1)
	{
		if (Es_Banda(playerid, 1)) Fac2_ -= 2;
		if (Es_job(playerid, 15)) Fac5_ -= 3;
	}
    PlayerTextDrawDestroy(playerid, InfoZS[playerid]);
    PlayerTextDrawDestroy(playerid, InfoZona[playerid]);
    PlayerTextDrawDestroy(playerid, TD_Wasted[playerid]);
    PlayerTextDrawDestroy(playerid, TextTrabajo[playerid]);
    PlayerTextDrawDestroy(playerid, TD_Velocimetro[playerid][0]);
    PlayerTextDrawDestroy(playerid, TD_Velocimetro[playerid][1]);
    PlayerTextDrawDestroy(playerid, TD_Conquista[playerid]);
	GuardarVehiculos(playerid);

	//actualiza sql positions
	new query[2056];
	mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Conectado = '0' WHERE ID = '%d'", InfoJugador[playerid][jID]);
	mysql_tquery(DBngrp, query);
	mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET PosicionX = '%f', PosicionY = '%f', PosicionZ = '%f', PosicionR = '%f', Vida = '%f', Chaleco = '%f', Interior = '%d', VirtualWorld = '%d', \
	UltimaConexion = '%e', TiempoCarcel = '%d', mano_derecha = '%d', Cantidad_mano_derecha = '%d', mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE Nombre_Apellido = '%e'",
	InfoJugador[playerid][jPosicionX],
	InfoJugador[playerid][jPosicionY],
	InfoJugador[playerid][jPosicionZ],
	InfoJugador[playerid][jPosicionR],
	InfoJugador[playerid][jVida],
	InfoJugador[playerid][jChaleco],
	InfoJugador[playerid][jInterior],
	InfoJugador[playerid][jVirtualWorld],
	InfoJugador[playerid][jUltimaConexion],
	InfoJugador[playerid][jTiempoCarcel],
	InfoJugador[playerid][jManoDerecha],
	InfoJugador[playerid][jManoDerechaCant],
	InfoJugador[playerid][jManoIzquierda],
	InfoJugador[playerid][jManoIzquierdaCant],
	InfoJugador[playerid][jNombre_Apellido]);
	mysql_tquery(DBngrp, query);
	InfoJugador[playerid][jID] = -1;
    return 1;
}

stock IlegalCharacterName(str[]) {
	static const IlegalC[] = {
		'0','1','2','3','4',
		'5','6','7','8','9',
		'[',']','$','(',')',
		'.', '-'
	};
	Loop(i, strlen(str),0) {
		Loop(c, sizeof IlegalC, 0) {
		    if(str[i] == IlegalC[c]) return true;
		}
	}
	return false;
}

GetParteToy(playerid, id)
{
	new	name_this[24];
	alm(name_this, "Desconocida");
	switch (InfoJugador[playerid][aHueso][id])
	{
		case 1: alm(name_this, "Columna");
		case 2: alm(name_this, "Cabeza");
		case 3: alm(name_this, "Brazo izquierdo");
		case 4: alm(name_this, "Brazo derecho");
		case 5: alm(name_this, "Mano izquierda");
		case 6: alm(name_this, "Mano derecha");
		case 7: alm(name_this, "Muslo izquierdo");
		case 8: alm(name_this, "Muslo derecho");
		case 9: alm(name_this, "Pie izquierdo");
		case 10: alm(name_this, "Pie derecho");
		case 11: alm(name_this, "Pantorrilla derecha");
		case 12: alm(name_this, "Pantorrilla izquierda");
		case 13: alm(name_this, "Antebrazo izquierdo");
		case 14: alm(name_this, "Antebrazo derecho");
		case 15: alm(name_this, "Clavicula izquierda");
		case 16: alm(name_this, "Clavicula derecha");
		case 17: alm(name_this, "Cuello");
		case 18: alm(name_this, "Mandibula");
	}
	return name_this;
}

CountPlayerToy(playerid)
{
	new count = 0;
	Loop(id, 5, 0) if (InfoJugador[playerid][aModelo][id] != 0)
	{
	    count++;
	}
	return count;
}

GetNameToy(playerid, ida)
{
	new nombre[56] = "desconocido";
	Loop(i, sizeof Accesorios, 0) if (Accesorios[i][ModeloAccesorio] == InfoJugador[playerid][aModelo][ida])
	{
		alm(nombre, Accesorios[i][NombreAccesorio]);
	}
	return nombre;
}

GetPriceToy(modelo)
{
	new monto = 0;
	Loop(i, sizeof Accesorios, 0) if (Accesorios[i][ModeloAccesorio] == modelo)
	{
		monto = Accesorios[i][PrecioAccesorio];
		break;
	}
	return monto;
}

NameToyObject(modelo)
{
	new nombre[56] = "desconocido";
	Loop(i, sizeof Accesorios, 0) if (Accesorios[i][ModeloAccesorio] == modelo)
	{
		alm(nombre, Accesorios[i][NombreAccesorio]);
	}
	return nombre;
}

// colores toys
#define RGBAToARGB(%1)		(%1 >>> 8 | %1 << 24)

enum ctInfo
{
	ctColor[32],
	ctNombre[32]
};

static const InfoColorToy[][ctInfo] =
{
	// ROSA
    {"0xFFC0CBFF", "Rosado"},
    {"0xFFB6C1FF", "Rosado claro"},
    {"0xFF69B4FF", "Rosado caliente"},
    {"0xFF1493FF", "Rosado profundo"},
    {"0xC71585FF", "Violeta medio"},
    {"0xDB7093FF", "Violeta roso"},
    {"0x8B008BFF", "Magenta oscuro"},
    {"0x9932CCFF", "Orquidea oscuro"},
    {"0x7FFF00FF", "Chatreuse 1"},

	// NARANJA
    {"0xFFA07AFF", "Salmon claro"},
    {"0xFF7F50FF", "Coral"},
    {"0xFF6347FF", "Tomate"},
    {"0xFF4500FF", "Anaranjado"},
    {"0xFF8C00FF", "Naranja oscura"},
    {"0xFFA500FF", "Naranja"},

	// AMARILLO
    {"0xFFD700FF", "Oro"},
    {"0xFFFF00FF", "Amarillo"},
    {"0xFFFFE0FF", "Amarilo claro"},
    {"0xFFFACDFF", "Limon gasa"},
    {"0xFAFAD2FF", "Amarillo oro claro"},
    {"0xFFEFD5FF", "Papaya latigo"},
    {"0xFFE4B5FF", "Moccasin"},
    {"0xFFDAB9FF", "Hojaldre de melcoton"},
    {"0xEEE8AAFF", "Amarillo caia"},
    {"0xF0E68CFF", "Khaki"},
    {"0xBDB76BFF", "Khaki oscuro"},

	// ROJO
	{"0xCD5C5CFF", "Rojo indio"},
	{"0xF08080FF", "Coral claro"},
	{"0xFA8072FF", "Salmon"},
	{"0xE9967AFF", "Salmon oscuro"},
	{"0xFFA07AFF", "Salmon claro"},
	{"0xDC143CFF", "Carmesi"},
	{"0xFF0000FF", "Rojo"},
	{"0xB22222FF", "Ladrillo fuego"},
	{"0x8B0000FF", "Rojo oscuro"},
	{"0x000000FF", "Negro"}
};

GetColorToy(playerid, id)
{
	new exName[128] = "{EBEBEB}Ninguno";
	//verifica si es -1
	if (InfoJugador[playerid][aColor][id] == -1) return exName;
	//resto:
	format(exName, sizeof exName, "{%.6s}%s\n", InfoColorToy[InfoJugador[playerid][aColor][id]][ctColor][2], InfoColorToy[InfoJugador[playerid][aColor][id]][ctNombre]);
	return exName;
}

SetColorToy(coler)
{
	new color = 0, gformat[32];
	if (coler == -1) return color;
	format(gformat, sizeof gformat, "%x", RGBAToARGB(hexstr(InfoColorToy[coler][ctColor])));
	color = hexstr(gformat);
	return color;
}

SetPosEx(playerid, Float: pot_x, Float: pot_y, Float: pot_z, Float: pot_r = 0.0, pot_int, pot_vw, guardable)
{
	//posiciones x,y,z,r
	if (pot_x != -1)
	{
		InfoJugador[playerid][jPosicionX] = pot_x;
		InfoJugador[playerid][jPosicionY] = pot_y;
		InfoJugador[playerid][jPosicionZ] = pot_z;
		InfoJugador[playerid][jPosicionR] = pot_r;
		SetPlayerPosEx(playerid, pot_x, pot_y, pot_z);
		SetPlayerFacingAngle(playerid, pot_r);
	}
	else { GetPlayerPos(playerid, InfoJugador[playerid][jPosicionX], InfoJugador[playerid][jPosicionY], InfoJugador[playerid][jPosicionZ]); GetPlayerFacingAngle(playerid, InfoJugador[playerid][jPosicionR]); }
	//interior
	if (pot_int != -1)
	{
		InfoJugador[playerid][jInterior] = pot_int;
		SetPlayerInterior(playerid, pot_int);
	}
	else InfoJugador[playerid][jInterior] = GetPlayerInterior(playerid);
	//virtualworld
	if (pot_vw != -1)
	{
		InfoJugador[playerid][jVirtualWorld] = pot_vw;
		SetPlayerVirtualWorld(playerid, pot_vw);
	}
	else InfoJugador[playerid][jVirtualWorld] = GetPlayerVirtualWorld(playerid);
	if (guardable != 0)
	{
		//guardado mysql
		new query[1028];
		mysql_format(DBngrp, query, sizeof query , "UPDATE cuentas SET PosicionX = '%f', PosicionY = '%f', PosicionZ = '%f', PosicionR = '%f', Interior = '%d', VirtualWorld = '%d' WHERE ID = '%d'",
		InfoJugador[playerid][jPosicionX], InfoJugador[playerid][jPosicionY], InfoJugador[playerid][jPosicionZ], InfoJugador[playerid][jPosicionR], InfoJugador[playerid][jInterior], InfoJugador[playerid][jVirtualWorld], InfoJugador[playerid][jID]);
		mysql_tquery(DBngrp, query);
    }
	return 1;
}

funcion _Expulsar(jugador, tipo, mensaje[]) {
    new InfoMjs[150];
    switch (tipo) {
        case 0: // Dialogo
            {
                format(InfoMjs, sizeof(InfoMjs), "{ffffff}Usted ha sido expulsado del servidor\n\n{ADC3E7}Razon:{ffffff}\n %s.", mensaje);
            	ShowPlayerDialog(jugador, D_INVALIDO, DIALOG_STYLE_MSGBOX, "Expulsado del servidor", InfoMjs, "Aceptar", "");
            	Expulsar(jugador, 1);
            }
        case 1: // Chat
            {
				format(InfoMjs, sizeof(InfoMjs), "Info: {FFFFFF}Usted ha sido expulsado del servidor, Razon:{cccccc} %s.", mensaje);
				SendClientMessage(jugador, 0xccccccFF, InfoMjs);
            	Expulsar(jugador, 1);
			}
    }
    return 1;
}

funcion ActualizarArmas(playerid)
{
    for (new i = 0; i < 12; i ++) {
	    new query[512];
		mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Arma_%d = '%d' WHERE ID = '%d'", i, InfoJugador[playerid][jArmas][i], InfoJugador[playerid][jID]);
		mysql_tquery(DBngrp, query);
	}
	return 1;
}

funcion EliminarArmas(playerid)
{
	for (new i = 0; i < 12; i ++) {
	    new query[512];
        mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Arma_%d = '%d' WHERE ID = '%d'", i, 0, InfoJugador[playerid][jID]);
		mysql_tquery(DBngrp, query);
	}
	return 1;
}

funcion ActualizarManos(playerid)
{
	new ManoDer = InfoJugador[playerid][jManoDerecha], ManoDerCant = InfoJugador[playerid][jManoDerechaCant];
	if (ManoDer == 0) RemovePlayerAttachedObject(playerid, 6);
	if (InfoInventario[ManoDer][Arrojadizo] == 1 && ManoDerCant <= 0)
	{
		if (Objeto_Carga(ManoDer)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		InfoJugador[playerid][jManoDerecha] = 0;
		InfoJugador[playerid][jManoDerechaCant] = 0;
		RemovePlayerAttachedObject(playerid, 6);
	}
	if (ManoDer > 0 && ManoDer < sizeof(InfoInventario))
	{
		if (ManoDerCant > InfoInventario[ManoDer][Capacidad])
		{
			InfoJugador[playerid][jManoDerechaCant] = InfoInventario[ManoDer][Capacidad];
		}
	}
	new ManoIzq = InfoJugador[playerid][jManoIzquierda], ManoIzqCant = InfoJugador[playerid][jManoIzquierdaCant];
	if (ManoIzq == 0) RemovePlayerAttachedObject(playerid, 7);
	if (ManoIzq > 0 && ManoIzq < sizeof(InfoInventario))
	{
		if (ManoIzqCant > InfoInventario[ManoIzq][Capacidad]) { InfoJugador[playerid][jManoIzquierdaCant] = InfoInventario[ManoIzq][Capacidad]; }
		if (ManoIzq < 16 && ManoIzqCant <= 0) { InfoJugador[playerid][jManoIzquierdaCant] = 1; }
	}
	if (InfoInventario[ManoIzq][Arrojadizo] == 1 && ManoIzqCant <= 0)
	{
		if (Objeto_Carga(ManoIzq)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		InfoJugador[playerid][jManoIzquierda] = 0;
		InfoJugador[playerid][jManoIzquierdaCant] = 0;
		RemovePlayerAttachedObject(playerid, 7);
	}

	new query[512];
	mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET mano_derecha = '%d', Cantidad_mano_derecha = '%d', mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'",
	InfoJugador[playerid][jManoDerecha], InfoJugador[playerid][jManoDerechaCant], InfoJugador[playerid][jManoIzquierda], InfoJugador[playerid][jManoIzquierdaCant], InfoJugador[playerid][jID]);
	mysql_tquery(DBngrp, query);
	return 1;
}

funcion _MarcarPos(playerid, Float: x, Float: y, Float: z, mensaje[]){
	SetPlayerCheckpoint(playerid, x, y, z, 2);
	_Mensaje(playerid, 4, "FFFFFF", mensaje);
	SetPVarInt(playerid, "EnCheckPoint", 1);
	TogglePlayerAllDynamicCPs(playerid, false);
    return 1;
}

RestarNegocio(id, pago)
{
	if (InfoNegocio[id][nVenta] != 0)
	{
		InfoNegocio[id][nDinero] += pago;
		InfoNegocio[id][nProductos]--;
		guardar_int_mysql("negocios", "Dinero", InfoNegocio[id][nID], InfoNegocio[id][nDinero]);
		guardar_int_mysql("negocios", "Productos", InfoNegocio[id][nID], InfoNegocio[id][nProductos]);
	}
}

PagarProducto(playerid, id, pagar, objeto, cantidad)
{
	if (GetPlayerCash(playerid) < pagar) { ShowInfoForPlayer(playerid, "No tienes suficiente dinero.", 2000); return 1; }
	if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
	if (InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = cantidad;}
	else if (InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = cantidad;}
	new gformat[190];
	format(gformat, sizeof gformat, "compra de %s", InfoInventario[objeto][NombreObjeto]);
	GivePlayerCash(playerid, -pagar, gformat);
	RestarNegocio(id, pagar);
	SendClientMessageEx(playerid, 0xCCCCFFFF, "Compraste %s.", InfoInventario[objeto][NombreObjeto]);
	ActualizarManos(playerid);
    return 1;
}

PagarNegocio(playerid, id, pagar)
{
	GivePlayerCash(playerid, -pagar, "producto de negocio");
	RestarNegocio(id, pagar);
    return 1;
}

stock Expulsar(jugador, seg = 0) {
    if(!seg) return Kick(jugador);
    else if(seg) SetTimerEx("Desconectar", seg * 1000, false, "i", jugador);
    return 1;
}
funcion Desconectar(jugador) return Kick(jugador);

funcion _boombox(playerid, music[]) {
	if(GetPVarType(playerid, "PlacedBB")) {
		foreach(Player, i) {
			if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea"))) {
				PlayStream(i, music, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
			}
		}
		SetPVarString(playerid, "BBStation", music);
	}
	return 1;
}

funcion _fiestaparty(playerid, music[]) {
	if(GetPVarType(playerid, "PlacedParty")) {
		foreach(Player, i) {
			if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "PartyArea"))) {
				PlayStream(i, music, GetPVarFloat(playerid, "PartyX"), GetPVarFloat(playerid, "PartyY"), GetPVarFloat(playerid, "PartyZ"), 200.0, 1);
			}
		}
		SetPVarString(playerid, "PartyStation", music);
	}
	return 1;
}

funcion _stereo(playerid, music[]) {
	if(GetPVarType(playerid, "AreaVehPos")) {
		foreach(Player, i) {
			if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "AreaVehMus"))) {
				ReproducirMVeh(i, music, GetPVarFloat(playerid, "AreaVehPosX"), GetPVarFloat(playerid, "AreaVehPosY"), GetPVarFloat(playerid, "AreaVehPosZ"), 50.0, 1);
			}
		}
		SetPVarString(playerid, "AreaVehAud", music);
	}
	return 1;
}

funcion _estereo(playerid, music[], id) {
	foreach(Player, i) if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid)) {
		escuchandop[i] = 1;
		estacionp[i] = EscucharMusica(i, music);
	}
	estacionveh[GetPlayerVehicleID(playerid)] = id;
	return 1;
}


funcion _MusicTlf(playerid, music[], titulo[]) {
	StopAudioStreamForPlayer(playerid);
	EscucharMusica(playerid, music);
	_Mensaje(playerid, 4, "FFFFFF", titulo);
	MusicaEsc[playerid] = 1;
	return 1;
}

funcion _Agenda(playerid)
{
	new dialog[1024], string[256];
	if(InfoJugador[playerid][jNumeroContacto][0] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #1{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto1], InfoJugador[playerid][jNumeroContacto][0]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #1{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][1] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #2{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto2], InfoJugador[playerid][jNumeroContacto][1]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #2{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][2] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #3{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto3], InfoJugador[playerid][jNumeroContacto][2]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #3{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][3] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #4{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto4], InfoJugador[playerid][jNumeroContacto][3]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #4{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][4] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #5{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto5], InfoJugador[playerid][jNumeroContacto][4]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #5{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][5] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #6{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto6], InfoJugador[playerid][jNumeroContacto][5]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #6{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][6] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #7{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto7], InfoJugador[playerid][jNumeroContacto][6]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #7{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][7] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #8{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto8], InfoJugador[playerid][jNumeroContacto][7]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #8{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][8] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #9{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto9], InfoJugador[playerid][jNumeroContacto][8]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #9{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][9] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #10{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto10], InfoJugador[playerid][jNumeroContacto][9]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #10{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][10] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #11{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto11], InfoJugador[playerid][jNumeroContacto][10]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #11{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][11] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #12{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto12], InfoJugador[playerid][jNumeroContacto][11]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #12{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][12] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #13{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto13], InfoJugador[playerid][jNumeroContacto][12]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #13{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][13] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #14{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto14], InfoJugador[playerid][jNumeroContacto][13]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #14{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][14] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #15{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto15], InfoJugador[playerid][jNumeroContacto][14]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #15{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][15] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #16{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto16], InfoJugador[playerid][jNumeroContacto][15]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #16{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][16] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #17{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto17], InfoJugador[playerid][jNumeroContacto][16]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #17{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][17] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #18{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto18], InfoJugador[playerid][jNumeroContacto][17]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #18{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][18] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #19{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto19], InfoJugador[playerid][jNumeroContacto][18]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #19{FFFFFF} | Vacio");
	strcat(dialog, string);
	if(InfoJugador[playerid][jNumeroContacto][19] != 0) format(string, sizeof string, "\n{b0b0b0}Contacto #20{FFFFFF} | %s [%d]", InfoJugador[playerid][jNombreContacto20], InfoJugador[playerid][jNumeroContacto][19]);
	else format(string, sizeof string, "\n{b0b0b0}Contacto #20{FFFFFF} | Vacio");
	strcat(dialog, string);
	DialogExPlayer(playerid, D_AGENDA, DIALOG_STYLE_LIST, "{D6E1EB}Agenda", dialog, "Seleccionar", "Inicio");
	return 1;
}
stock IsVarchard(const nombre[])
{
    new
        len = strlen(nombre),
        cont=0,
        pos;
    if(!(3 <= len <= 3)) return false;//Controlar que el nombre tenga mas de 8 caracteres
    for(new k = 0; k < len; k++)
    {
        switch(nombre[k])
        {
            case 'a' .. 'z': continue;
            case 'A' .. 'Z': continue;
            default: return false;
        }
    }
    return true;
}

Actualizar(playerid)
{
    new proximonvl = InfoJugador[playerid][jNivel] + 1, cantidadexp = proximonvl * nivelexp, gfomraty[190];
	SetPlayerProgressBarMaxValue(playerid, BarraExp[playerid], cantidadexp);
	SetPlayerProgressBarValue(playerid, BarraExp[playerid], InfoJugador[playerid][jExperiencia]);
	UpdatePlayerProgressBar(playerid, BarraExp[playerid]);
	format(gfomraty, sizeof gfomraty,"Nivel ~r~%d ~w~Exp ~g~%d/%d", InfoJugador[playerid][jNivel], InfoJugador[playerid][jExperiencia], cantidadexp);
    PlayerTextDrawSetString(playerid, TD_PantallaHG[playerid][2], gfomraty);
}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new string[256];
	if(dialogid == D_VALIDACION)
	{
	    if(response)
	 	{
		    if(!strcmp("soloNorth America", inputtext))
		    {
		        _Mensaje(playerid, 4, "FFFFFF", "Bievenido");
		        validado[playerid] = 1;
		    }else Kick(playerid);
		}else Kick(playerid);
	}
	if(dialogid == D_ADMINSTAFF)
	{
	    if(response)
		{
		    new DComandosAdmin[800];
		    switch(listitem)
		    {
		        case 0:
		        {
		            if (Admin(1, playerid)) {
						strcat(DComandosAdmin, "{00C38E}Soporte{ffffff}:\n");
						strcat(DComandosAdmin, "{FFFFFF}/mutear - /muteardiscord - /staff - /ls - /lv - /sf - /ir /mutearad\n");
						strcat(DComandosAdmin, "{FFFFFF}/llevarls - /reportes - /llevarlv - /llevarsf - /admins - /liberar - /jail - /jailcuenta (Usuario off)\n");
					}else ShowInfoForPlayer(playerid, "~r~No tienes acceso.", 2000);
		        }
		        case 1:
		        {
		            if (Admin(2, playerid)) {
						strcat(DComandosAdmin, "{008A49}Mod A Pruebas{ffffff}:\n");
						strcat(DComandosAdmin, "{FFFFFF}/ir - /desbugear - /ultimaconexion - /staff - /vercoche - /vercoches - /golpear - /vercuenta - /verct - /verbolsillos /responsable\n");
						strcat(DComandosAdmin, "{FFFFFF}/respawncars - /ls - /limpiarreportes - /sf - /lv - /llevarls - /llevarsf - /llevarlv - /enmascarados - /enmascaradospd - /darropa - /togprivados\n");
						strcat(DComandosAdmin, "{FFFFFF}/liberar - /jail - /jailcuenta - /ar - /rr - /kick - /enjail - /nuevos - /condinero - /irnegocio - /ircasa - /spec - /estaenjail\n");
						strcat(DComandosAdmin, "{FFFFFF}/respawncar - /alogin - /traer - /reportes - /congelar - /descongelar - /reportes - /staff - /togstaff - /vip - /togvip - /qfa\n");
						strcat(DComandosAdmin, "{FFFFFF}/verplantas - /irplanta - /revivir - /darvida - /traercar - /ircar - /darchaleco - /irtrabajo - /vernumero - /vercuentaoff\n\n");
					}else ShowInfoForPlayer(playerid, "~r~No tienes acceso.", 2000);
		        }
		        case 2:
		        {
                    if (Admin(3, playerid)) {
						strcat(DComandosAdmin, "{7362A6}Moderador{ffffff}:\n");
						strcat(DComandosAdmin, "{FFFFFF}/irpuerta - /tban - /editarint - /editarvw - /bloquearprivados - /bloqueardudas - /respawngeneral- /fixvid\n");
						strcat(DComandosAdmin, "{FFFFFF}/jailtipo - /bloquearreportes - /bancuenta - /banear - /banip - /verip - /bloquearip - /limpiartodo - /limpiarbolsillos - /limpiarmanos\n");
						strcat(DComandosAdmin, "{FFFFFF}/borrarplanta - /limpiarcinturon - /limpiarespalda - /togpecho - /incendios - /unbanip - /unban - /respawnvehiculosjob - /saciar - /limpiarpiso\n");
						strcat(DComandosAdmin, "{FFFFFF}/vergraffitis /retirarequipo\n\n");
					}else ShowInfoForPlayer(playerid, "~r~No tienes acceso.", 2000);
		        }
		        case 3:
		        {
                    if (Admin(4, playerid)) {
						strcat(DComandosAdmin, "{B00000}Moderador Global{ffffff}:\n");
						strcat(DComandosAdmin, "{FFFFFF}/irobjetoadmin - /borrarobjetoadmin - /objetosadmin - /crearobjetoadmin - /limpiarsuelo - /entercar - /borrardudas - /bugentrenar\n");
						strcat(DComandosAdmin, "{FFFFFF}/cpantalla - /limpiarchat - /fixveh - /borrarreportes - /limpiarant - /quitardnifalso - /crearincendio - /ao\n\n");
					}else ShowInfoForPlayer(playerid, "~r~No tienes acceso.", 2000);
		        }
		        case 4:
		        {
                    if (Admin(5, playerid)) {
						strcat(DComandosAdmin, "{FF193A}Administrador{ffffff}:\n");
						strcat(DComandosAdmin, "{FFFFFF}/fuelcars - /fuelcarsno - /fixvehall - /anuncios - /dejarfondos - /registro - /nombreadmin\n");
						strcat(DComandosAdmin, "{FFFFFF}/ircordenada - /irinteriorcasa - /cambiarhora - /cambiarclima - /regalarhabilidad - /verificar\n");
						strcat(DComandosAdmin, "{FFFFFF}/robobanco - /quitarbanco - /revivirbanco - /addblacklist - /removebl - /blacklist\n\n");
					}else ShowInfoForPlayer(playerid, "~r~No tienes acceso.", 2000);
		        }
		        case 5:
		        {
                    if (Admin(6, playerid)) {
						strcat(DComandosAdmin, "{D373B1}Director{ffffff}:\n");
						strcat(DComandosAdmin, "{FFFFFF}/multicuenta - /darencrol - /pladelantar - /limpiarmaletero - /darhabilidad - /aoa - /dobleexp - /diadepaga\n");
						strcat(DComandosAdmin, "{FFFFFF}/creargraffiti - /regaloatodos - /guardarservidor - /adminevento - /tipoevento - /editarevento\n");
						strcat(DComandosAdmin, "{FFFFFF}/lugarevento - /borrarevento - /iniciarevento - /anunciar - /cerrarevento - /repetir - /explotarv - /abrirevento\n\n");
					}else ShowInfoForPlayer(playerid, "~r~No tienes acceso.", 2000);
		        }
		        case 6:
		        {
                    if (Admin(10, playerid)) {
						strcat(DComandosAdmin, "{004F00}Fundador{ffffff}:\n");
						strcat(DComandosAdmin, "{FFFFFF}/activartest - /borrarauto - /ddiscord - /ddudas - /mercadosconquista\n\n");
					}else ShowInfoForPlayer(playerid, "~r~No tienes acceso.", 2000);
		        }
		        case 7:
		        {
                    if (Admin(11, playerid)) {
						strcat(DComandosAdmin, "{004F00}CEO{ffffff}:\n");
						strcat(DComandosAdmin, "{FFFFFF}/petar -/darmateriales - /crash - /darcoins - /quitarcoins - /dardinerooff - /darencfac - /darencfam\n");
						strcat(DComandosAdmin, "{FFFFFF}/anticheat - /darencayudantes - /avecasa - /casas - /limpiartodooff - /dardinero\n");
						strcat(DComandosAdmin, "{FFFFFF}/darencban - /darencstaff - /editarp - /editarp2 - /crearauto - /borrarcasa\n");
						strcat(DComandosAdmin, "{FFFFFF}/antigm - /menuregalos -/darvip - /darstat - /creargasolinera - /borrargasolinera - /crearobjeto\n");
						strcat(DComandosAdmin, "{FFFFFF}/crearnegocio - /dartoy - /menureferido - /borrarnegocio - /creargarage - /borrargarage - /editarcasa - /crearcasa\n");
						strcat(DComandosAdmin, "{FFFFFF}/crearcajero - /borrarcajero - /editarcajero - /editarn - /avenegocio - /editargarage\n\n");
					}else ShowInfoForPlayer(playerid, "~r~No tienes acceso.", 2000);
		        }
		        case 8:
		        {
         			if (InfoJugador[playerid][jEncargado][4]) {
						strcat(DComandosAdmin, "{E8B63A}#ROL{ffffff}:\n");
						strcat(DComandosAdmin, "{FFFFFF}/darpuntorol /quitarpuntorol\n");
					}else ShowInfoForPlayer(playerid, "~r~No tienes acceso.", 2000);
		        }
		        case 9:
		        {
                    if (InfoJugador[playerid][jEncargado][3]) {
						strcat(DComandosAdmin, "{E8B63A}#BAN{ffffff}:\n");
						strcat(DComandosAdmin, "{FFFFFF}/banear /desbanear /banip /unbanip\n/fip\n");
					}else ShowInfoForPlayer(playerid, "~r~No tienes acceso.", 2000);
		        }
		        case 10:
		        {
                    if (InfoJugador[playerid][jEncargado][0]) {
						strcat(DComandosAdmin, "{E8B63A}#STAFF{ffffff}:\n");
						strcat(DComandosAdmin, "{FFFFFF}/daradmin /daradminoff /admins /adminwarn /quitarwarn\n");
					}else ShowInfoForPlayer(playerid, "~r~No tienes acceso.", 2000);
		        }
		        case 11:
		        {
                    if (InfoJugador[playerid][jEncargado][2])
					{
						strcat(DComandosAdmin, "{E8B63A}#BANDAS{ffffff}:\n");
						strcat(DComandosAdmin, "{FFFFFF}/crearbanda - /borrarbanda - /limpiarbanda - /hacerliderbanda - /darmiembrobanda\n");
						strcat(DComandosAdmin, "{FFFFFF}/quitarbandaaoff - /editarfnombre - /editarflogo - /editarflider - /editarbanda\n");
						strcat(DComandosAdmin, "{FFFFFF}/irbanda - /crearvehbanda - /borrarvehbanda - /quitarbanda\n");
					} else ShowInfoForPlayer(playerid, "~r~No tienes acceso.", 2000);
		        }
		        case 12:
		        {
		            if(InfoJugador[playerid][jEncargado][5])
		            {
		                strcat(DComandosAdmin, "{FFFF00}#EVENTOS{FFFFFF}:\n");
		                strcat(DComandosAdmin, "{FFFFFF}/crearfiesta /expulsardj /crearboxeo\n");
		                strcat(DComandosAdmin, "{FFFFFF}/llevarring\n");
					}else ShowInfoForPlayer(playerid, "~r~No tienes acceso.", 2000);
				}
				case 13:
		        {
		            if(InfoJugador[playerid][jEncargado][6])
		            {
		                strcat(DComandosAdmin, "{FFFF00}#AYUDANTES{FFFFFF}:\n");
		                strcat(DComandosAdmin, "{FFFFFF}/darayudante /removerayudante\n");
					}else ShowInfoForPlayer(playerid, "~r~No tienes acceso.", 2000);
				}
		    }
		    ShowPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{ADC3E7}Comandos", DComandosAdmin, "Cerrar", "");
		}
	}

	if(dialogid==D_regalos){
	if(response){
	new money = Random(4000, 10000);
	new count = 0;
	switch (listitem)
	{
		case 0: {
			foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2))
			{
			GivePlayerCash(playerid2, money, "cmd_regalo");
			SendClientMessageEx(playerid2, 0xCCCC00FF, "*** Recibiste $%s dolares.", diner_coma(money));
			count++;
			}
			format(string, sizeof string, "Administracion: %s envio regalos a todo el servidor.", NombreRJugador(playerid));
			_MensajeOOC(C_GCRP, string);
			SendClientMessageEx(playerid, 0xcccc00ff, "%d usuarios recibieron regalo.", count);
			return 1;
		}
		case 1: {
				foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2))
			{
			InfoJugador[playerid2][jCoins]++;
			guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid2][jID], InfoJugador[playerid2][jCoins]);
			SendClientMessageEx(playerid2, 0xCCCC00FF, "*** Recibiste 1 coin, ahora tienes %d coins.", InfoJugador[playerid2][jCoins]);
			count++;
			}
				format(string, sizeof string, "Administracion: %s envio regalos a todo el servidor.", NombreRJugador(playerid));
				_MensajeOOC(C_GCRP, string);
				SendClientMessageEx(playerid, 0xcccc00ff, "%d usuarios recibieron regalo.", count);
				return 1;
		}
		case 2: {
			foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2))
			{
			SendClientMessageEx(playerid2, 0xCCCC00FF, "*** Recibiste 1 arma por parte de la administracion.");
			DarArma(playerid2,29);
			ActualizarArmas(playerid2);
			count++;
			}
			format(string, sizeof string, "Administracion: %s envio regalos a todo el servidor.", NombreRJugador(playerid));
			_MensajeOOC(C_GCRP, string);
			SendClientMessageEx(playerid, 0xcccc00ff, "%d usuarios recibieron regalo.", count);
			return 1;
			}
		}
	}
	return 1;
}
	if(dialogid == D_REQUIS)
	{
	    if(response)
	    {
			new id = GetPVarInt(playerid, "UsuarioRe");
			InfoJugador[id][jManoDerecha] = InfoJugador[playerid][jManoDerecha];
			InfoJugador[id][jManoDerechaCant] = InfoJugador[playerid][jManoDerechaCant];
			PonerObjeto(id, 1, InfoJugador[id][jManoDerecha]);
			if (InfoInventario[InfoJugador[id][jManoDerecha]][IDArma] > 0) { GivePlayerWeapon(id, InfoInventario[InfoJugador[id][jManoDerecha]][IDArma], InfoJugador[id][jManoDerechaCant]); }
			InfoJugador[playerid][jManoDerecha] = 0;
		    InfoJugador[playerid][jManoDerechaCant] = 0;
		    RemovePlayerAttachedObject(playerid, 6);
		    cmd_me(id,"cede lo que tiene en su mano derecha");
		    cmd_me(playerid,"toma con la mano derecha un objeto");
		    ActualizarManos(id);
		    ActualizarManos(playerid);
	    }
	}
	if(dialogid == D_COINS)
	{
	    if(response)
	    {
		    switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid, D_COINS0, DIALOG_STYLE_MSGBOX, "Como comprar vip?", "{ffffff}Metodo global:\n\n{003087}Paypal:{ffffff} para adquirir coins por medio de paypal debes escribir a: {9dc914}@x1{ffffff} via discord.\n\n\
					Cuanto cuesta cada coins {26d1c4}1USD = 10 coin", "Atras", "Cancelar");
				}
				case 1:
				{

				}
		    }
		}
	}
	
	if(dialogid == ARMAS_MERCA)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					if (RevisarDinero(playerid, 12000))
					{
					GivePlayerMoney(playerid, -12000);
					DarArma(playerid, 24);
					SendClientMessage(playerid, -1, "Compraste una Desert eagle.");
					}
					else
					{
					SendClientMessage(playerid, -1, "No tienes el dinero suficiente");
					}
					return 1;

				}
			}
		}
	}
	if(dialogid == D_referido)
	{
		if(!response) return SendClientMessageEx(playerid,0xFFFFFFFF, "{008BFF}! {FFFFFF}puedes volver a abrir este mensaje usando {008BFF}/referido.");
		if(strlen(inputtext) < 1) return ShowPlayerDialog(playerid, D_referido, DIALOG_STYLE_INPUT, "Sistema de {fff000}referido!", "{FFFFFF}Ingresa un codigo de referido.", "Continuar", "Cancelar");
		new query[256];
		mysql_format(DBngrp, query, sizeof query, "SELECT * FROM referidos WHERE codigo = '%s'", inputtext);
		new Cache:result;
		result = mysql_query(DBngrp, query);
		if (cache_num_rows() > 0) {
			new query1[256];
			mysql_format(DBngrp, query1, sizeof query, "UPDATE referidos SET usos = usos+1 WHERE codigo = '%s'", inputtext);
			mysql_tquery(DBngrp, query1);
			mysql_tquery(DBngrp, "SELECT * FROM `referidos` ORDER BY `ID` ASC", "CargarReferidos");
			InfoJugador[playerid][jReferido] = 1;
			alm(InfoJugador[playerid][jNombreAmigo], inputtext);
			guardar_int_mysql("cuentas", "Referido", InfoJugador[playerid][jID], InfoJugador[playerid][jReferido]);
			guardar_string_mysql("cuentas", "NombreAmigo", InfoJugador[playerid][jID], inputtext);
			GivePlayerCash(playerid, 15000, "codigo de referido");
			if (InfoJugador[playerid][jNivel]>=3){
				SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}Estableciste como tu codigo de referido a %s, recibiste {008BFF}$15.000", inputtext);
				SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}No recibiste +1 nivel ya que posees un nivel mayor o igual a 3.", inputtext);
				format(string, sizeof string, "Administracion: %s ha redimido el codigo de referido: %s", NombreRJugador(playerid), inputtext);
				MensajeAdmin(string);
			}else
			SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}Estableciste como tu codigo de referido a %s, recibiste {008BFF}$15.000 + 1 nivel de experiencia.", inputtext);
			InfoJugador[playerid][jNivel] = InfoJugador[playerid][jNivel]+1;
			SetPlayerScore(playerid, InfoJugador[playerid][jNivel]);
			guardar_int_mysql("cuentas", "Nivel", InfoJugador[playerid][jID], InfoJugador[playerid][jNivel]);
			Actualizar(playerid);
			return 1;
		} else SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}El codigo %s no existe.", inputtext);
		cache_delete(result);
	}
	if(dialogid==D_referidocrear){
	new id = -1;
	Loop(x, MAX_Referidos, 1)
	{
		id = x;
		break;
	}
	if(response){
	new query[256];
	mysql_format(DBngrp, query, sizeof query, "SELECT * FROM cuentas WHERE Nombre_Apellido = '%e'", inputtext);
	new Cache:result;
	result = mysql_query(DBngrp, query);
	if (cache_num_rows() > 0) {
		new query1[256];
		mysql_format(DBngrp, query1, sizeof query1, "SELECT * FROM referidos WHERE nombre = '%e'", inputtext);
        new Cache:result1;
		result1 = mysql_query(DBngrp, query1);
     	if (cache_num_rows() > 0) {
			SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}este usuario ya tiene un codigo de referido asignado.", inputtext);
		}else
		ShowPlayerDialog(playerid, D_referidocrear1, DIALOG_STYLE_INPUT, "{2C56D4}Ingresa el codigo", "Ingresa el codigo personalizado para asignarle al usuario", "Aceptar", "Cancelar");
		alm(InfoReferido[id][sNombre], inputtext);
		cache_delete(result1);
	}else SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}no hay ninguna cuenta con el nombre %s.", inputtext);
	cache_delete(result);
	} else SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}has cancelado la creacion del codigo.", inputtext);
	}
	if(dialogid==D_referidocrear1){
		new query[256];
		new id = -1;
		Loop(x, MAX_Referidos, 1)
	{
		id = x;
		break;
	}
		if(response){
			if(strlen(inputtext) < 3) return ShowPlayerDialog(playerid, D_referidocrear1, DIALOG_STYLE_INPUT, "{ffffff} Minimo 3 caragteres -{2C56D4}Ingresa el codigo", "Ingresa el codigo personalizado para asignarle al usuario", "Aceptar", "Cancelar");
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO referidos (codigo, nombre) VALUES ('%s', '%s')", inputtext, InfoReferido[id][sNombre]);
			mysql_tquery(DBngrp, query);
			SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}has creado el codigo de referido:'%s' para: %s.",inputtext, InfoReferido[id][sNombre]);
			format(string, sizeof string, "Administracion: %s creado el codigo de referido: %s", NombreRJugador(playerid), inputtext);
			MensajeAdmin(string);
			mysql_tquery(DBngrp, "SELECT * FROM `referidos` ORDER BY `ID` ASC", "CargarReferidos");
			return 1;
		}
	}
	if(dialogid==D_referidoeliminar){
		if (response){
		new query[256];
		mysql_format(DBngrp, query, sizeof query, "SELECT * FROM referidos WHERE nombre = '%s'", inputtext);
		new Cache:result;
		result = mysql_query(DBngrp, query);
		if (cache_num_rows() > 0) {
			new query1[256];
			mysql_format(DBngrp, query1, sizeof query1, "DELETE FROM referidos WHERE nombre ='%s'", inputtext);
			mysql_tquery(DBngrp, query1);
			mysql_tquery(DBngrp, "SELECT * FROM `referidos` ORDER BY `ID` ASC", "CargarReferidos");
			SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}has eliminado correctamente el codigo de: '%s'.",inputtext);
			format(string, sizeof string, "Administracion: %s ha eliminado el codigo de referido: %s", NombreRJugador(playerid), inputtext);
			MensajeAdmin(string);
		}else SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}no hay ningun codigo con el nombre %s.", inputtext);
		cache_delete(result);
	}
}

	if(dialogid == D_UBER)
	{
        if(response)
		{
		    GivePlayerCash(PeticionUsuarioMando[playerid],-PeticionDinero[playerid], "servicio de uber");
		    GivePlayerCash(playerid,PeticionDinero[playerid], "servicio de uber");
		    SetPlayerRaceCheckpoint(playerid,1,PeticionCorde[playerid][0],PeticionCorde[playerid][1],PeticionCorde[playerid][2],0,0,0,5.0);
		    SendClientMessage(playerid, 0x6e8f99FF, "[Uber]: {FFFFFF}Se te ha marcado la posicion.");
		    SendClientMessage(PeticionUsuarioMando[playerid], 0x6e8f99FF, "[Uber]: {FFFFFF}Acepto tu peticion.");
			PeticionUber[playerid] = 0;
		}else
		{
		    SendClientMessage(PeticionUsuarioMando[playerid], 0x6e8f99FF, "[Uber]: {FFFFFF}Ha rechazado la peticion vuelve a usar /suber para proponer.");
		    PeticionUber[playerid] = 2;
		}
	}
	if(dialogid == D_WHATSDIA3)
	{
	    if(response)
		{
		    new Float:F[3];
            GetPlayerPos(GetPVarInt(playerid, "IDWhats"),F[0],F[1],F[2]);
            SetPlayerCheckpoint(playerid, F[0], F[1], F[2], 3.0);
		}
 	}
	if(dialogid == D_WHATSDIA1)
	{
	    if(response)
		{
		    for(new x=0; x<MAX_PLAYERS; x++)
			{
				if(IsPlayerConnected(x) && x != INVALID_PLAYER_ID)
				{
					if(InfoJugador[x][jTelefono] == strval(inputtext))
					{
		    			if (B_Telefono[x] > 0) return  ShowInfoForPlayer(playerid, "Ese jugador tiene el telefono apagado o fuera de linea", 2000);
		    			new str[120];
		    			format(str,sizeof(str),"%s te ha mandado su ubicacion por whatsapp, pulsa aceptar para recibir su ubicacion",NombreJugador(playerid));
		    			SetPVarInt(x, "IDWhats", playerid);
		    			ShowPlayerDialog(x, D_WHATSDIA3, DIALOG_STYLE_MSGBOX, "Ubicacion", str, "Aceptar", "Cancelar");
		    			return 1;
					}
				}
			}
		}
 	}
	if(dialogid == D_WHATSDIA2)
	{
	    if(response)
		{
		    for(new x=0; x<MAX_PLAYERS; x++)
			{
				if(IsPlayerConnected(x) && x != INVALID_PLAYER_ID)
				{
					if(InfoJugador[x][jTelefono] == GetPVarInt(playerid, "TelefonoWhats"))
					{
					    format(string, sizeof string, "[WhatsApp de %d]: %s", GetPVarInt(playerid, "TelefonoWhats"), inputtext);
						_Mensaje(x, 4, "81ed14", string);
						return 1;
					}
				}
			}
		}
 	}
	if(dialogid == D_WHATSDIA0)
	{
	    if(response)
		{
		    for(new x=0; x<MAX_PLAYERS; x++)
			{
				if(IsPlayerConnected(x) && x != INVALID_PLAYER_ID)
				{
					if(InfoJugador[x][jTelefono] == strval(inputtext))
					{
		    			if (B_Telefono[x] > 0) return  ShowInfoForPlayer(playerid, "Ese jugador tiene el telefono apagado o fuera de linea", 2000);
		    			SetPVarInt(playerid, "TelefonoWhats", strval(inputtext));
		    			ShowPlayerDialog(playerid, D_WHATSDIA2, DIALOG_STYLE_INPUT, "Mensaje", "Ingresa el mensaje", "Aceptar", "Cancelar");
		    			return 1;
					}
				}
			}
		}
 	}
	if(dialogid == D_WHATSDIA)
	{
	    if(response)
		{
		    switch(listitem)
			{
			    case 0: ShowPlayerDialog(playerid, D_WHATSDIA0, DIALOG_STYLE_INPUT, "Ingresa el numero", "Ingresa el numero de telefono:", "Aceptar", "Cancelar");
			    case 1: ShowPlayerDialog(playerid, D_WHATSDIA1, DIALOG_STYLE_INPUT, "Ingresa el numero", "Ingresa el numero de telefono:", "Aceptar", "Cancelar");
			}
		}
 	}
	if(dialogid == 600)
	{
		if(!response) return _Mensaje(playerid, 4, "FFFFFF", " Cancelaste el menu.");

		new objeto, precio;

		switch(listitem)
		{
			case 0: objeto = 93, precio = 7;
			case 1: objeto = 90, precio = 8;
			case 2: objeto = 91, precio = 6;
			case 3: objeto = 101, precio = 10;
		}
        if(InfoJugador[playerid][jTickets] >= precio) {
			new text_[128];
			if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
			if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 1;}
			else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
			format(text_, sizeof(text_), "Canjeaste %d tickets por %s.", precio, InfoInventario[objeto][NombreObjeto]);
			_Mensaje(playerid, 4, "FFFFFF", text_);
			InfoJugador[playerid][jTickets] -= precio;
			guardar_int_mysql("cuentas", "Tickets", InfoJugador[playerid][jID], InfoJugador[playerid][jTickets]);
			ActualizarManos(playerid);
			return 1;
		} else return _Mensaje(playerid, 4, "FFFFFF", "No posees suficientes tickets.");
	}
	if(dialogid == 601)
	{
		if(!response) return _Mensaje(playerid, 4, "FFFFFF", " Cancelaste el menu.");

		new objeto, precio, unidad;

		switch(listitem)
		{
			case 0: objeto = 87, precio = 20, unidad = 3;
			case 1: objeto = 88, precio = 36, unidad = 6;
			case 2: objeto = 126, precio = 9, unidad = 1;
			case 3: objeto = 115, precio = 290, unidad = 1;
			case 4: {
				if(InfoJugador[playerid][jTickets] >= 100) {
					InfoJugador[playerid][jSaldo] += 10;
					InfoJugador[playerid][jTickets] -= 100;
					guardar_int_mysql("cuentas", "Tickets", InfoJugador[playerid][jID], InfoJugador[playerid][jTickets]);
					guardar_int_mysql("cuentas", "Saldo", InfoJugador[playerid][jID], InfoJugador[playerid][jSaldo]);
					_Mensaje(playerid, 4, "FFFFFF", "Canjeaste 100 tickets por un chip con 10 de credito.");
					return 1;
				} else return _Mensaje(playerid, 4, "FFFFFF", "* {ffffff} No posees suficientes tickets.");
			}
		}

        if(InfoJugador[playerid][jTickets] >= precio) {
			new text_[128];
			if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
			if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = unidad;}
			else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = unidad;}
			format(text_, sizeof(text_), "Canjeaste %d tickets por %s (%d).", precio, InfoInventario[objeto][NombreObjeto], unidad);
			_Mensaje(playerid, 4, "FFFFFFF", text_);
			InfoJugador[playerid][jTickets] -= precio;
			guardar_int_mysql("cuentas", "Tickets", InfoJugador[playerid][jID], InfoJugador[playerid][jTickets]);
			ActualizarManos(playerid);
			return 1;
		} else return _Mensaje(playerid, 4, "FFFFFF", "*{ffffff} No posees suficientes tickets.");
	}

	switch (dialogid)
	{
		case D_CINTURON:
			{
				if(!response) { return 1; }
				new i = listitem;
				if(i >= 0 && i <= 7) { S_Cinturon(playerid, i); }
				else if(i == 8) return 1;
				else if(i == 9) G_Cinturon(playerid, 1);
				else if(i == 10) G_Cinturon(playerid, 2);
				else if(i == 11) cmd_cmano(playerid);
			}
		case D_TELEFONOUBER:
		    {
		        if(!response) return cmd_telefono(playerid, "\1");
		        for(new m = 0; m < MAX_PLAYERS; m++)
				{
				    if(IsPlayerConnected(m))
					{
					    if(EnServicioUber[m] == 1)
						{
						    SendClientMessageEx(m, 0x6e8f99FF, "[Uber]: {FFFFFF}%s solicita un uber en su posicion (%s) - /auber %d",NombreJugador(playerid),GetPlayerNameZone(playerid),playerid);
						    PeticionUber[playerid] = 1;
						}
					}
				}
		    }
		case D_TELEFONO2:
			{
				if(!response) return cmd_telefono(playerid, "\1");
				switch(listitem) {
					case 0: ShowPlayerDialog(playerid, D_TELEFONO3, DIALOG_STYLE_INPUT, "{D6E1EB}Llamar", "Introduce el numero:", "Llamar", "Inicio");
					case 1: ShowInfoForPlayer(playerid, "en construccion.", 2000);
				}
			}
		case D_TELEFONO3:
			{
				if (response) {
					if (isnull(inputtext) || !isnumeric(inputtext)) return ShowPlayerDialog(playerid, D_TELEFONO3, DIALOG_STYLE_INPUT, "{D6E1EB}Llamar", "Introduce el numero:", "Llamar", "Inicio");
					format(string, 16, "%d", strval(inputtext));
					cmd_llamar(playerid, string);
				} else cmd_telefono(playerid, "\1");
			}
		case D_TELEFONO4:
			{
				if(!response) return cmd_telefono(playerid, "\1");
				switch(listitem) {
					case 0: ShowPlayerDialog(playerid, D_TELEFONO5, DIALOG_STYLE_INPUT, "{D6E1EB}Mensajes", "Introduce el numero:", "Siguiente", "Inicio");
					case 1: ShowInfoForPlayer(playerid, "en construccion.", 2000);
				}
			}
		case D_TELEFONO5:
			{
				if (response) {
					if (isnull(inputtext) || !isnumeric(inputtext)) return ShowPlayerDialog(playerid, D_TELEFONO5, DIALOG_STYLE_INPUT, "{D6E1EB}Mensajes", "Introduce el numero:", "Siguiente", "Inicio");
					format(string, 16, "%d", strval(inputtext));
					NumeroMensaje[playerid] = strval(inputtext);
					ShowPlayerDialog(playerid, D_TELEFONO6, DIALOG_STYLE_INPUT, "{D6E1EB}Mensajes", "Introduce el texto que vas a enviar:", "Enviar", "Inicio");
				} else cmd_telefono(playerid, "\1");
			}
		case D_TELEFONO6:
			{
				if (response) {
					if (isnull(inputtext)) return ShowPlayerDialog(playerid, D_TELEFONO6, DIALOG_STYLE_INPUT, "{D6E1EB}Mensajes", "Introduce el texto que vas a enviar:", "Enviar", "Inicio");
					new phonenumb = NumeroMensaje[playerid], text[256];
					alm(text, inputtext);
					if (InfoJugador[playerid][jSaldo] < 2) return  ShowInfoForPlayer(playerid, "No tienes saldo suficiente para enviar un mensaje.", 2000);
					foreach(Player, i) {
	        			if (InfoJugador[i][jTelefono] == phonenumb && phonenumb != 0) {
	            			new playerid2 = i;
	            			if (IsPlayerConnectedEx(playerid2)) {
	                    		if (B_Telefono[playerid2] > 0) return  ShowInfoForPlayer(playerid, "Ese jugador tiene el telefono apagado.", 2000);
	                    		SendClientMessageEx(playerid2, 0xFFD100FF, "[SMS: %d]: (( %s ))", InfoJugador[playerid][jTelefono], text);
	                    		SendClientMessage(playerid, 0xFFD100FF, "* Mensaje enviado con exito.");
								new Float: cx, Float: cy, Float: cz;
								GetPlayerPos(playerid, cx, cy, cz);
 								PlayerPlaySound(playerid, 1053, cx, cy, cz);
								GetPlayerPos(playerid2, cx, cy, cz);
	                    		PlayerPlaySound(playerid2, 1053, cx, cy, cz);
	                    		GameTextForPlayer(playerid, "~r~$-1~w~ Saldo", 5000, 1);
	                    		InfoJugador[playerid][jSaldo] -= 1;
								guardar_int_mysql("cuentas", "Saldo", InfoJugador[playerid][jID], InfoJugador[playerid][jSaldo]);
	        					NumeroMensaje[playerid] = -1;
	                    		return 1;
	                		}
	            		}
        			}
    				_Mensaje(playerid, 2, "0", "El numero que ha marcado no existe o no esta disponible.");
  				} else cmd_telefono(playerid, "\1");
			}
		case D_TELEFONO7:
			{
				if(response) {
					if(listitem == 0) {
						StopAudioStreamForPlayer(playerid);
						_Mensaje(playerid, 2, "0", "Paraste la musica.");
						MusicaEsc[playerid] = 0;
					}
					else if(listitem == 1) _MusicTlf(playerid, "http://54house.stream-balancer.de:80", "Escuchando: 54 House");
					else if(listitem == 2) _MusicTlf(playerid, "http://184.154.94.194:8028/listen.pls", "Escuchando: Top Latino");
					else if(listitem == 3) _MusicTlf(playerid, "http://148.251.91.15:7004", "Escuchando: Dubbase.FM");
					else if(listitem == 4) _MusicTlf(playerid, "http://listen.shoutcast.com/reggaetonhits.m3u", "Escuchando: Reggae Hits");
					else if(listitem == 5) _MusicTlf(playerid, "http://216.230.231.122:8000/MP3128", "Escuchando: MBradio.FM");
					else if(listitem == 6) _MusicTlf(playerid, "http://listen.shoutcast.com/113fmtheeagle.m3u", "Escuchando: 113 FM TEagle");
					else if(listitem == 7) _MusicTlf(playerid, "http://108.61.73.119:8028", "Escuchando: 181 FM");
					else if(listitem == 8) _MusicTlf(playerid, "http://173.244.215.163:8380", "Escuchando: Soft Rock Cafe");
					else if(listitem == 9) _MusicTlf(playerid, "http://69.4.232.118:80", "Escuchando: HardRadio.com");
					else if(listitem == 10) _MusicTlf(playerid, "http://64.202.98.133:2010", "Escuchando: Aural Moon");
					else if(listitem == 11) _MusicTlf(playerid, "http://50.117.115.211:80", "Escuchando: Idobi Radio");
					else if(listitem == 12) _MusicTlf(playerid, "http://108.61.30.179:4010", "Escuchando: www.Hot108.com");
					else if(listitem == 13) _MusicTlf(playerid, "http://50.7.64.226:80/frisky_mp3_hi", "Escuchando: Sensacion Peru");
					else if(listitem == 14) _MusicTlf(playerid, "http://5.135.223.251:9000", "Escuchando: BluePoint");
					else if(listitem == 15) _MusicTlf(playerid, "http://62.210.209.179:8030/stream", "Escuchando: PaganMetalRadio");
					else if(listitem == 16) _MusicTlf(playerid, "http://198.211.102.165:8000", "Escuchando: Dirty Beats Radio 24/7");
					else if(listitem == 17) _MusicTlf(playerid, "http://somafm.com/tags.pls", "Escuchando: The Trip");
					else if(listitem == 18) _MusicTlf(playerid, "http://streaming.latina101.com.ar/listen.pls", "Latina FM (Arg)");
					else if(listitem == 19) _MusicTlf(playerid, "http://s3.voscast.com:8002/;.m3u", "Escuchando: Amor latino");
					else if(listitem == 20) _MusicTlf(playerid, "http://listen.radionomy.com/hotmixradio-hiphop-128.m3u", "Hotmixradio");
					else if(listitem == 21) _MusicTlf(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=139278", "Naxi Cafe Radio");
					else if(listitem == 22) _MusicTlf(playerid, "http://listen.shoutcast.com:80/RadioHunter-TheHitzChannel", "Radio Hunter");
					else if(listitem == 23) _MusicTlf(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=654138", "181.0 - BCEver");
					else if(listitem == 24) ShowPlayerDialog(playerid, D_TELEFONO8, DIALOG_STYLE_INPUT, "{D6E1EB}Youtube", "{FFFFFF}Escribe el titulo del video para reproducir:", "Continuar", "Cancelar");
                } else _Mensaje(playerid, 2, "0", "Saliste del menu de musica.");
            }
		case D_TELEFONO8:
			{
				if(response == 1) {
					if(strlen(inputtext)) {
						new chao[255];
						StopAudioStreamForPlayer(playerid);
						format(chao, sizeof(chao), "https://6t.pe/?song=%s", inputtext);
						EscucharMusica(playerid, chao);
						format(chao, sizeof(chao), "Escuchando actualmente: {FFFFFF}%s", inputtext);
						_Mensaje(playerid, 5, "0", chao);
						MusicaEsc[playerid] = 1;
					}
				} else return 1;
			}
		case D_TRABAJOSTP:
		{
		    if(response) {
		        switch(listitem)
		        {
					case 0: SetPosEx(playerid, 2137.6953, -2282.5144, 20.7174, 0.0, 0, 0, 1);
		            case 1: SetPosEx(playerid, 2259.8452, -1019.4909, 59.2940, 0.0, 0, 0, 1);
		            case 2: SetPosEx(playerid, 1049.6455, 1320.5607, 10.8512, 0.0, 0, 0, 1);
		            case 3: SetPosEx(playerid, 1670.3774, 763.9501, 11.4662, 0.0, 0, 0, 1);
		            case 4: SetPosEx(playerid, 1896.9608, -1877.7721, 13.5075, 0.0, 0, 0, 1);
		            case 5: SetPosEx(playerid, -418.6058, -1759.5006, 6.2169, 0.0, 0, 0, 1);
		            case 6: SetPosEx(playerid, -381.8525, -1439.0780, 25.7266, 0.0, 0, 0, 1);
		            case 7: SetPosEx(playerid, 2457.5103, -1901.0210, 13.5469, 0.0, 0, 0, 1);
		            case 8: SetPosEx(playerid, -920.0352, -512.7627, 26.6708, 0.0, 0, 0, 1);
		            case 9: SetPosEx(playerid, -1058.9244, -1195.6283, 129.2188, 0.0, 0, 0, 1);
		            case 10: SetPosEx(playerid, 596.8975, 202.9436, 21.5701, 0.0, 0, 0, 1);
		        }
		    }
		}

		case D_AGENDA:
			{
				if(!response) { return 1;}
				new i = listitem;
				if(i >= 0 && i <= 19) { RanuraSeleccionadaA[playerid] = i; ShowPlayerDialog(playerid, D_AGENDA2, DIALOG_STYLE_LIST, "{D6E1EB}Opciones:", "{00CDFF}Agregar contacto\n{CA3022}Eliminar contacto\n{00c200}Llamar contacto", "Continuar", "Salir"); }
			}
		case D_AGENDA2:
		{
			if (!response) return 1;
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, D_AGENDA3, DIALOG_STYLE_INPUT, "{D6E1EB}Numero", "{FFFFFF}> Escribe el numero de telefono", "Aceptar", "Cancelar");
				case 1:
				{
					if(InfoJugador[playerid][jNumeroContacto][RanuraSeleccionadaA[playerid]] == 0) return  ShowInfoForPlayer(playerid, "No hay ningun contacto en esa ranura.", 2000);
					if(RanuraSeleccionadaA[playerid] == 0) alm(InfoJugador[playerid][jNombreContacto1], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto1", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto1]);
					else if(RanuraSeleccionadaA[playerid] == 1) alm(InfoJugador[playerid][jNombreContacto2], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto2", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto2]);
					else if(RanuraSeleccionadaA[playerid] == 2) alm(InfoJugador[playerid][jNombreContacto3], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto3", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto3]);
					else if(RanuraSeleccionadaA[playerid] == 3) alm(InfoJugador[playerid][jNombreContacto4], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto4", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto4]);
					else if(RanuraSeleccionadaA[playerid] == 4) alm(InfoJugador[playerid][jNombreContacto5], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto5", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto5]);
					else if(RanuraSeleccionadaA[playerid] == 5) alm(InfoJugador[playerid][jNombreContacto6], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto6", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto6]);
					else if(RanuraSeleccionadaA[playerid] == 6) alm(InfoJugador[playerid][jNombreContacto7], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto7", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto7]);
					else if(RanuraSeleccionadaA[playerid] == 7) alm(InfoJugador[playerid][jNombreContacto8], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto8", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto8]);
					else if(RanuraSeleccionadaA[playerid] == 8) alm(InfoJugador[playerid][jNombreContacto9], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto9", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto9]);
					else if(RanuraSeleccionadaA[playerid] == 9) alm(InfoJugador[playerid][jNombreContacto10], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto10", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto10]);
					else if(RanuraSeleccionadaA[playerid] == 10) alm(InfoJugador[playerid][jNombreContacto11], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto11", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto11]);
					else if(RanuraSeleccionadaA[playerid] == 11) alm(InfoJugador[playerid][jNombreContacto12], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto12", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto12]);
					else if(RanuraSeleccionadaA[playerid] == 12) alm(InfoJugador[playerid][jNombreContacto13], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto13", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto13]);
					else if(RanuraSeleccionadaA[playerid] == 13) alm(InfoJugador[playerid][jNombreContacto14], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto14", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto14]);
					else if(RanuraSeleccionadaA[playerid] == 14) alm(InfoJugador[playerid][jNombreContacto15], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto15", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto15]);
					else if(RanuraSeleccionadaA[playerid] == 15) alm(InfoJugador[playerid][jNombreContacto16], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto16", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto16]);
					else if(RanuraSeleccionadaA[playerid] == 16) alm(InfoJugador[playerid][jNombreContacto17], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto17", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto17]);
					else if(RanuraSeleccionadaA[playerid] == 17) alm(InfoJugador[playerid][jNombreContacto18], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto18", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto18]);
					else if(RanuraSeleccionadaA[playerid] == 18) alm(InfoJugador[playerid][jNombreContacto19], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto19", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto19]);
					else if(RanuraSeleccionadaA[playerid] == 19) alm(InfoJugador[playerid][jNombreContacto20], "Vacio"), guardar_string_mysql("cuentas", "NombreContacto20", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto20]);
					InfoJugador[playerid][jNumeroContacto][RanuraSeleccionadaA[playerid]] = 0;
					new gsdo[12];
					format(gsdo, sizeof gsdo, "Contacto%d", RanuraSeleccionadaA[playerid]+1);
					guardar_int_mysql("cuentas", gsdo, InfoJugador[playerid][jID], InfoJugador[playerid][jNumeroContacto][RanuraSeleccionadaA[playerid]]);
					_Mensaje(playerid, 4, "FFFFFF", "Contacto eliminado de la agenda.");
					RanuraSeleccionadaA[playerid] = -1;
				}
				case 2:
				{
					if (InfoJugador[playerid][jNumeroContacto][RanuraSeleccionadaA[playerid]] == 0) return ShowInfoForPlayer(playerid, "No hay ningun contacto en esa ranura.", 2000);
					if (InfoJugador[playerid][jSaldo] < 3) return ShowInfoForPlayer(playerid, "No tienes saldo suficiente para realizar esta llama.", 2000);
					if (B_Telefono[playerid] > 0) return ShowInfoForPlayer(playerid, "Tu telefono se encuentra apagado, escribe /togmovil para encenderlo.", 2000);
					if (EnLlamada[playerid] != 0){ShowInfoForPlayer(playerid, "Ya estas en una llamada.", 2000); return 1;}
					if(InfoJugador[playerid][jNumeroContacto][RanuraSeleccionadaA[playerid]] == InfoJugador[playerid][jTelefono]){ShowInfoForPlayer(playerid, "No te puedes llamar a ti mismo.", 2000); return 1;}
					LlamarTelefono(playerid, InfoJugador[playerid][jNumeroContacto][RanuraSeleccionadaA[playerid]]);
					RanuraSeleccionadaA[playerid] = -1;
				}
			}
			return 1;
		}
		case D_AGENDA3:
			{
				new amount = strval(inputtext);
				if(!isnumeric(inputtext)) return ShowInfoForPlayer(playerid, "Solo numeros porfavor, vuelve a intentarlo.", 2000);
				if(amount > 999999 || amount < 1000) return ShowInfoForPlayer(playerid, "Numero no puede ser mayor a 999999 o menor a 1000.", 2000);
				if(InfoJugador[playerid][jNumeroContacto][RanuraSeleccionadaA[playerid]] != 0) return ShowInfoForPlayer(playerid, "Ya tienes un contacto en esa ranura.", 2000);
				InfoJugador[playerid][jNumeroContacto][RanuraSeleccionadaA[playerid]] = amount;
				ShowPlayerDialog(playerid, D_AGENDA4, DIALOG_STYLE_INPUT, "{D6E1EB}Nombre", "{FFFFFF}> Escribe el nombre del contacto", "Aceptar", "Cancelar");
			}
		case D_AGENDA4:
			{
				if (!response) return 1;
				if (!strlen(inputtext)) return 1;
				if (strlen(inputtext) > 7 || strlen(inputtext) < 0) { ShowInfoForPlayer(playerid, "No puedes poner el nombre con mas de 7 caracteres.", 2000); return 1; }
				if(RanuraSeleccionadaA[playerid] == 0) alm(InfoJugador[playerid][jNombreContacto1], inputtext), guardar_string_mysql("cuentas", "NombreContacto1", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto1]);
                else if(RanuraSeleccionadaA[playerid] == 1) alm(InfoJugador[playerid][jNombreContacto2], inputtext), guardar_string_mysql("cuentas", "NombreContacto2", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto2]);
                else if(RanuraSeleccionadaA[playerid] == 2) alm(InfoJugador[playerid][jNombreContacto3], inputtext), guardar_string_mysql("cuentas", "NombreContacto3", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto3]);
                else if(RanuraSeleccionadaA[playerid] == 3) alm(InfoJugador[playerid][jNombreContacto4], inputtext), guardar_string_mysql("cuentas", "NombreContacto4", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto4]);
                else if(RanuraSeleccionadaA[playerid] == 4) alm(InfoJugador[playerid][jNombreContacto5], inputtext), guardar_string_mysql("cuentas", "NombreContacto5", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto5]);
                else if(RanuraSeleccionadaA[playerid] == 5) alm(InfoJugador[playerid][jNombreContacto6], inputtext), guardar_string_mysql("cuentas", "NombreContacto6", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto6]);
                else if(RanuraSeleccionadaA[playerid] == 6) alm(InfoJugador[playerid][jNombreContacto7], inputtext), guardar_string_mysql("cuentas", "NombreContacto7", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto7]);
                else if(RanuraSeleccionadaA[playerid] == 7) alm(InfoJugador[playerid][jNombreContacto8], inputtext), guardar_string_mysql("cuentas", "NombreContacto8", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto8]);
                else if(RanuraSeleccionadaA[playerid] == 8) alm(InfoJugador[playerid][jNombreContacto9], inputtext), guardar_string_mysql("cuentas", "NombreContacto9", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto9]);
                else if(RanuraSeleccionadaA[playerid] == 9) alm(InfoJugador[playerid][jNombreContacto10], inputtext), guardar_string_mysql("cuentas", "NombreContacto10", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto10]);
                else if(RanuraSeleccionadaA[playerid] == 10) alm(InfoJugador[playerid][jNombreContacto11], inputtext), guardar_string_mysql("cuentas", "NombreContacto11", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto11]);
                else if(RanuraSeleccionadaA[playerid] == 11) alm(InfoJugador[playerid][jNombreContacto12], inputtext), guardar_string_mysql("cuentas", "NombreContacto12", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto12]);
                else if(RanuraSeleccionadaA[playerid] == 12) alm(InfoJugador[playerid][jNombreContacto13], inputtext), guardar_string_mysql("cuentas", "NombreContacto13", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto13]);
                else if(RanuraSeleccionadaA[playerid] == 13) alm(InfoJugador[playerid][jNombreContacto14], inputtext), guardar_string_mysql("cuentas", "NombreContacto14", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto14]);
                else if(RanuraSeleccionadaA[playerid] == 14) alm(InfoJugador[playerid][jNombreContacto15], inputtext), guardar_string_mysql("cuentas", "NombreContacto15", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto15]);
                else if(RanuraSeleccionadaA[playerid] == 15) alm(InfoJugador[playerid][jNombreContacto16], inputtext), guardar_string_mysql("cuentas", "NombreContacto16", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto16]);
                else if(RanuraSeleccionadaA[playerid] == 16) alm(InfoJugador[playerid][jNombreContacto17], inputtext), guardar_string_mysql("cuentas", "NombreContacto17", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto17]);
                else if(RanuraSeleccionadaA[playerid] == 17) alm(InfoJugador[playerid][jNombreContacto18], inputtext), guardar_string_mysql("cuentas", "NombreContacto18", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto18]);
                else if(RanuraSeleccionadaA[playerid] == 18) alm(InfoJugador[playerid][jNombreContacto19], inputtext), guardar_string_mysql("cuentas", "NombreContacto19", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto19]);
                else if(RanuraSeleccionadaA[playerid] == 19) alm(InfoJugador[playerid][jNombreContacto20], inputtext), guardar_string_mysql("cuentas", "NombreContacto20", InfoJugador[playerid][jID], InfoJugador[playerid][jNombreContacto20]);
				new gsdo[12];
				format(gsdo, sizeof gsdo, "Contacto%d", RanuraSeleccionadaA[playerid]+1);
				guardar_int_mysql("cuentas", gsdo, InfoJugador[playerid][jID], InfoJugador[playerid][jNumeroContacto][RanuraSeleccionadaA[playerid]]);
                _Mensaje(playerid, 4, "FFFFFF", "Nuevo contacto agregado a tu agenda telefonica.");
                RanuraSeleccionadaA[playerid] = -1;
                _Agenda(playerid);
                return 1;
            }
		case D_SALDO:
		{
			if (!response) return 1;
			new amount = strval(inputtext), id = EnNegocio(playerid);
			if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
			if (amount < 1) { ShowInfoForPlayer(playerid, "No puedes recargar menos de un dolar.", 2000); return 1; }
			if (GetPlayerCash(playerid) >= amount)
			{
				RestarNegocio(id, amount);
				InfoJugador[playerid][jSaldo] += amount;
				GivePlayerCash(playerid, -amount, "saldo telefono");
				guardar_int_mysql("cuentas", "Saldo", InfoJugador[playerid][jID], InfoJugador[playerid][jSaldo]);
				SendClientMessageEx(playerid, 0xCCCCFFFF, "Recargaste $%d, ahora tienes $%d de saldo en tu telefono.", amount, InfoJugador[playerid][jSaldo]);
				return 1;
			}
			ShowInfoForPlayer(playerid, "No tienes tanto dinero para recargar.", 2000);
			return 1;
		}
		case D_PUERTO:
			{
				if(response) {
					if(listitem == 0) {
						if(InfoJugador[playerid][jCarnadas] > 50) return ShowInfoForPlayer(playerid, "Ya has comprado 50 carnadas para pescar, gastalas primero.", 2000);
						if(GetPlayerCash(playerid) < 10) { ShowInfoForPlayer(playerid, "No tienes suficiente dinero.", 2000); return 1; }
						GivePlayerCash(playerid, -10, "carnadas");
						_Mensaje(playerid, 5, "0", "Compraste una lata de carnadas de 15 unidades.");
						InfoJugador[playerid][jCarnadas] += 15;
						guardar_int_mysql("cuentas", "Carnadas", InfoJugador[playerid][jID], InfoJugador[playerid][jCarnadas]);
						return 1;
					} else if(listitem == 1) {
						if(InfoJugador[playerid][jLineas] > 30) return ShowInfoForPlayer(playerid, "Ya has comprado 30 lineas para pescar, gastalas primero.", 2000);
						if(GetPlayerCash(playerid) < 5) { ShowInfoForPlayer(playerid, "No tienes suficiente dinero.", 2000); return 1; }
						GivePlayerCash(playerid, -5, "lineas de pesca");
						_Mensaje(playerid, 5, "0", "Compraste diez lineas para pescar.");
						InfoJugador[playerid][jLineas] += 10;
						guardar_int_mysql("cuentas", "Lineas", InfoJugador[playerid][jID], InfoJugador[playerid][jLineas]);
						return 1;
					} else if(listitem == 2) {
						if(GetPlayerCash(playerid) < 25) { ShowInfoForPlayer(playerid, "No tienes suficiente dinero.", 2000); return 1; }
						new objeto = 85;
						if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
						if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 1;}
						else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
						GivePlayerCash(playerid, -25, "caña de pesca");
						_Mensaje(playerid, 5, "0", "Compraste una caña de pescar.");
						ActualizarManos(playerid);
						return 1;
					} else if(listitem == 3) {
						if (InfoJugador[playerid][jPescados] > 10)
						{
							SendClientMessageEx(playerid, 0x00CCCCFF, "Vendiste %d peces al restaurante y sumaste $%s a tu bolsillo.", InfoJugador[playerid][jPescados], diner_coma(InfoJugador[playerid][jPescados]));
							GivePlayerCash(playerid, InfoJugador[playerid][jPescados]*100, "venta de pescados");
							InfoJugador[playerid][jPescados] = 0;
							guardar_int_mysql("cuentas", "Pescados", InfoJugador[playerid][jID], InfoJugador[playerid][jPescados]);
							return 1;
						} else return ShowInfoForPlayer(playerid, "Lo minimo para vender son diez peces.", 2000);
					}
				}
			}
		case D_BOOMBOX:
			{
				if(!response) return _Mensaje(playerid, 2, "0", "Has cancelado la seleccion de emisoras de radio.");
				switch(listitem) {
					case 0: {
							if(GetPVarType(playerid, "BBArea")) {
								foreach(Player, i) {
									if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea"))) { StopStream(i); }
								}
								DeletePVar(playerid, "BBStation");
							}
							_Mensaje(playerid, 2, "0", "Has apagado tu equipo sonido.");
						}
					case 1: {
							new StationsDialog[2500];
							strcat(StationsDialog, "{00C200}1\t{FFFFFF}54 HGelctro\t{00A2FF}Electro\n");
							strcat(StationsDialog, "{00C200}2\t{FFFFFF}x3 Rappers\t{00A2FF}Electro\n");
							strcat(StationsDialog, "{00C200}3\t{FFFFFF}HG Rap\t{00A2FF}Electro\n");
							strcat(StationsDialog, "{00C200}4\t{FFFFFF}RockHG Hits\t{00A2FF}Rock\n");
							strcat(StationsDialog, "{00C200}5\t{FFFFFF}Metalradio.FM\t{00A2FF}Metal\n");
							strcat(StationsDialog, "{00C200}6\t{FFFFFF}113.HGRP FM TEagle\t{00A2FF}Classic rock\n");
							strcat(StationsDialog, "{00C200}7\t{FFFFFF}181.9 FM\t{00A2FF}Classic rock\n");
							strcat(StationsDialog, "{00C200}8\t{FFFFFF}New Tropical\t{00A2FF}Tropical\n");
							strcat(StationsDialog, "{00C200}9\t{FFFFFF}Radio 181FM\t{00A2FF}Reggaeton\n");
							strcat(StationsDialog, "{00C200}10\t{FFFFFF}North America Oficial Big Boss\t{00A2FF}Reggaeton\n");
							strcat(StationsDialog, "{00C200}11\t{FFFFFF}HG ?engosito\t{00A2FF}Reggaeton\n");
							strcat(StationsDialog, "{00C200}12\t{FFFFFF}Fifti HG\t{00A2FF}Hip Hop\n");
							strcat(StationsDialog, "{00C200}13\t{FFFFFF}High Hip-Hop classic\t{00A2FF}Pop\n");
							ShowPlayerDialog(playerid, D_BOOMBOX1, DIALOG_STYLE_LIST, "{00C200}Radios", StationsDialog, "Seleccionar", "Atras");
						}
					case 2: ShowPlayerDialog(playerid, D_BOOMBOX2, DIALOG_STYLE_INPUT, "{D6E1EB}Url - Internet", "{FFFFFF}Inserta un Stream (www.offliberty.com) para reproducirlo", "Continuar", "Cancelar");
				}
			}
		case D_BOOMBOX1:
			{
				if(!response) ShowPlayerDialog(playerid, D_BOOMBOX, DIALOG_STYLE_LIST, "{D6E1EB}Lista de emisoras", "Radio Online\nURL - Internet\nApagar equipo sonido", "Continuar", "Salir");
				if(response) {
					if(listitem == 0) _boombox(playerid, "https://media-ice.musicradio.com/HeartLondonMP3");
					else if(listitem == 1) _boombox(playerid, "https://media-ssl.musicradio.com/Capital");
					else if(listitem == 2) _boombox(playerid, "https://stream.live.vc.bbcmedia.co.uk/bbc_radio_one");
					else if(listitem == 3) _boombox(playerid, "https://ais.absoluteradio.co.uk/absoluteradiohigh.aac");
					else if(listitem == 4) _boombox(playerid, "https://media-ssl.musicradio.com/RadioXLondon");
					else if(listitem == 5) _boombox(playerid, "https://stream-mz.planetradio.co.uk/magicnational.aac");
					else if(listitem == 6) _boombox(playerid, "http://media.radiojackie.com:5873/stream/1/");
					else if(listitem == 7) _boombox(playerid, "https://radio2.vip-radios.fm:18009/stream-128kmp3-BossaNovaBrazil");
					else if(listitem == 8) _boombox(playerid, "https://streams.bigfm.de/bigfm-latinbeats-64-aac?usid=0-0-L-A-M-06");
					else if(listitem == 9) _boombox(playerid, "http://stream.latinofm.de/latinofm.mp3");
					else if(listitem == 10) _boombox(playerid, "https://streams.bigfm.de/bigfm-reggaevibes-64-aac?usid=0-0-L-A-M-06");
					else if(listitem == 11) _boombox(playerid, "http://50.7.64.226:80/frisky_mp3_hi");
					else if(listitem == 12) _boombox(playerid, "https://streams.regenbogen.de/rr-latin-128-aac?usid=0-0-H-A-D-06");
				}
			}
		case D_BOOMBOX2:
			{
				if(response == 1) {
					if(isnull(inputtext)) { return _Mensaje(playerid, 2, "0", "No has introducido ningun URL."); }
					if(strlen(inputtext)) { _boombox(playerid, inputtext); }
				}
			}
		case D_Cdnifalso:
			{
				if (!response) return _Mensaje(playerid, 4, "FFFFFF", "Cancelaste la operacion.");
				if(strlen(inputtext) < 1 || strlen(inputtext) > 18 || strfind(inputtext, "_", true) != -1)
				{
					ShowPlayerDialog(playerid, D_Cdnifalso, DIALOG_STYLE_INPUT, "{FFFFFF}Falsificacion 1", "Escribe el 'Nombre Apellido', ejemplo: Jorge North America:", "Siguiente", "Cancelar");
				}
				else
				{
					ShowPlayerDialog(playerid, D_Cdnifalso2, DIALOG_STYLE_INPUT, "{FFFFFF}Falsificacion 2", "Ingresa la edad falsa del documento:", "Siguiente", "Cancelar");
   					strmid(DocumentoNombre[playerid], inputtext, 0, strlen(inputtext), 18);
				}
			}
		case D_Cdnifalso2:
			{
				if (!response) return _Mensaje(playerid, 4, "FFFFFF", "Cancelaste la operacion.");
				if (!isnumeric(inputtext)) return ShowInfoForPlayer(playerid, "Solo numeros porfavor, vuelve a intentarlo.", 2000);
				new edad = strval(inputtext);
				InfoJugador[playerid][jFakeEdad] = edad;
				format(string, sizeof string, "Estas seguro que quieres usar el nombre de\n\t%s, edad: %d en tu DNI falso? Precio: 2.000$", DocumentoNombre[playerid], edad);
				ShowPlayerDialog(playerid, D_Cdnifalso3, DIALOG_STYLE_MSGBOX, "{D6E1EB}Falsificacion 3", string, "Aceptar", "Cancelar");
				return 1;
			}
		case D_Cdnifalso3:
			{
				if (!response) return _Mensaje(playerid, 4, "FFFFFF", "Cancelaste la operacion.");
				alm(InfoJugador[playerid][jFakeNombre], DocumentoNombre[playerid]);
				new dni = 555 + random(91017);
				InfoJugador[playerid][jFakeDNI] = dni;
				guardar_int_mysql("cuentas", "FakeEdad", InfoJugador[playerid][jID], InfoJugador[playerid][jFakeEdad]);
				guardar_int_mysql("cuentas", "FakeDNI", InfoJugador[playerid][jID], InfoJugador[playerid][jFakeDNI]);
				guardar_string_mysql("cuentas", "FakeNombre", InfoJugador[playerid][jID], InfoJugador[playerid][jFakeNombre]);
				_Mensaje(playerid, 5, "0", "Adquiriste un documento falso, para usarlo (/dnifalso).");
				GivePlayerCash(playerid, -2000, "documento falso");
			}
		case D_Ifaccion:
			{
				if(response == 1)
				{
					format(string, sizeof string, "Felicidades! Ahora eres miembro de {b0b0b0}%s{FFFFFF}.", NombreFaccion[playerid]);
					_Mensaje(playerid, 4, "ffffff", string);
					format(string, sizeof string, " %s acepto el ingreso.", NombreJugador(playerid));
					_Mensaje(TomandoTrabajo[playerid], 4, "FFFFFF", string);
					format(string, sizeof string, "Ingreso a la banda");
     				AddRegistroFam(playerid, NombreFaccion[playerid], string);
					InfoJugador[playerid][jFacMiembro] = NumeroFaccion[playerid];
					InfoJugador[playerid][jFacRango] = 0;
					guardar_int_mysql("cuentas", "FacMiembro", InfoJugador[playerid][jID], InfoJugador[playerid][jFacMiembro]);
					guardar_int_mysql("cuentas", "FacRango", InfoJugador[playerid][jID], InfoJugador[playerid][jFacRango]);
					NombreFaccion[playerid] = "N-F";
					NumeroFaccion[playerid] = 0;
					TomandoTrabajo[playerid] = -1;
				}
				else
				{
					_Mensaje(TomandoTrabajo[playerid], 4, "FFFFFF", "Rechazaron tu peticion de ingreso.");
					_Mensaje(playerid, 4, "FFFFFF", "Rechazaste el ingreso a la faccion.");
					NombreFaccion[playerid] = "N-F";
					NumeroFaccion[playerid] = 0;
					TomandoTrabajo[playerid] = -1;
				}
			}
		case D_Peluqueria1:
		{
			if (!response) return 1;
			new TextAcc[512];
			Loop(toy, 5, 0)
			{
				if (InfoJugador[playerid][aModelo][toy] == 0) format(TextAcc, sizeof TextAcc, "%s{ffffff}(%d) - Vacio\n", TextAcc, toy);
				else format(TextAcc, sizeof TextAcc, "%s{ffffff}(%d) - {FF972F}%s\n", TextAcc, toy, GetNameToy(playerid, toy));
			}
			ShowPlayerDialog(playerid, D_Peluqueria2, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona una ranura", TextAcc, "Continuar", "Salir");
			return 1;
		}
		case D_Peluqueria2:
		{
			if (!response) return ShowPlayerDialog(playerid, D_Peluqueria1, DIALOG_STYLE_MSGBOX, "Productos de venta", "\n{ffffff}A continuacion debes elegir la..\nranura donde quieres el {00a2ff}accesorio{ffffff}.\n\n   - Recuerda que cada {00a2ff}accesorio{ffffff} tiene un costo de {00c200}25{ffffff}$.\n\n", "Continuar", "Cancelar"); //- Accesorios
			if (InfoJugador[playerid][aModelo][listitem] != 0) return ShowInfoForPlayer(playerid, "Ya tienes en uso esa ranura.", 2000);
			RanuraSeleccionada[playerid] = listitem;
			new peluca[7]; peluca[0] = 19077; peluca[1] = 19136; peluca[2] = 19274;
			peluca[3] = 18975; peluca[4] = 18640; peluca[5] = 19350; peluca[6] = 19351;
			ShowModelSelectionMenuEx(playerid, peluca, 7, "Peluqueria", D_Peluqueria3);
			return 1;
		}
		case D_COMPRARTOYVIP:
		{
			if (!response) return 1;
			if (InfoJugador[playerid][jNivelVIP] < 1) return ShowInfoForPlayer(playerid, "No tienes acceso a este comando.", 2000);
			new TextAcc[512];
			Loop(toy, 5, 0)
			{
				if (InfoJugador[playerid][aModelo][toy] == 0) format(TextAcc, sizeof TextAcc, "%s{ffffff}(%d) - Vacio\n", TextAcc, toy);
				else format(TextAcc, sizeof TextAcc, "%s{ffffff}(%d) - {FF972F}%s\n", TextAcc, toy, GetNameToy(playerid, toy));
			}
			ShowPlayerDialog(playerid, D_COMPRARTOYVIP2, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona una ranura", TextAcc, "Continuar", "Salir");
			return 1;
		}
		case D_COMPRARTOYVIP2:
				if(response) {
					if(InfoJugador[playerid][jNivelVIP] < 1) return ShowInfoForPlayer(playerid, "No tienes acceso a este comando.", 2000);
					RanuraSeleccionada[playerid] = listitem;
					ShowModelSelectionMenu(playerid, AccesoriosVIP, "Accesorios vip's");
				} else return 1;

		case D_ESTEREO:
			{
				if(!response) return _Mensaje(playerid, 2, "0", "Has cancelado la seleccion de emisoras de radio.");
				switch(listitem) {
					case 0: {
							AccionesRol(playerid, 0, "apaga la radio del vehiculo.");
							foreach(Player, i) if(GetPlayerVehicleID(i) == GetPlayerVehicleID(i)) {
								StopAudioStreamForPlayer(i);
								estacionp[i] = 0;
								estacionveh[GetPlayerVehicleID(i)] = 0;
							}
						}
					case 1: _estereo(playerid, "https://media-ice.musicradio.com/HeartLondonMP3", 1), AccionesRol(playerid, 0, "cambia la estacion de radio a 54A HGelctro.");
					case 2: _estereo(playerid, "https://media-ssl.musicradio.com/Capital", 2), AccionesRol(playerid, 0, "cambia la estacion de radio a x1 Rappers.");
					case 3: _estereo(playerid, "https://stream.live.vc.bbcmedia.co.uk/bbc_radio_one", 3), AccionesRol(playerid, 0, "cambia la estacion de radio a HG Rap.");
					case 4: _estereo(playerid, "https://ais.absoluteradio.co.uk/absoluteradiohigh.aac", 4), AccionesRol(playerid, 0, "cambia la estacion de radio a RockHG Hits.");
					case 5: _estereo(playerid, "https://media-ssl.musicradio.com/RadioXLondon", 5), AccionesRol(playerid, 0, "cambia la estacion de radio a Metalradio.FM");
					case 6: _estereo(playerid, "https://stream-mz.planetradio.co.uk/magicnational.aac", 6), AccionesRol(playerid, 0, "cambia la estacion de radio a 113.HGRP FM TEagle");
					case 7: _estereo(playerid, "http://media.radiojackie.com:5873/stream/1/", 7), AccionesRol(playerid, 0, "cambia la estacion de radio a 181.48 FM.");
					case 8: _estereo(playerid, "https://radio2.vip-radios.fm:18009/stream-128kmp3-BossaNovaBrazil", 8), AccionesRol(playerid, 0, "cambia la estacion de radio a History Tropical.");
					case 9: _estereo(playerid, "https://streams.bigfm.de/bigfm-latinbeats-64-aac?usid=0-0-L-A-M-06", 9), AccionesRol(playerid, 0, "cambia la estacion de radio a Radio x1.");
					case 10: _estereo(playerid, "http://stream.latinofm.de/latinofm.mp3", 10), AccionesRol(playerid, 0, "cambia la estacion de radio a Exiliados Big Boss.");
					case 11: _estereo(playerid, "https://streams.bigfm.de/bigfm-reggaevibes-64-aac?usid=0-0-L-A-M-06", 11), AccionesRol(playerid, 0, "cambia la estacion de radio a HG ?engosito.");
					case 12: _estereo(playerid, "http://50.7.64.226:80/frisky_mp3_hi", 12), AccionesRol(playerid, 0, "cambia la estacion de radio a Fifti HG.");
					case 13: _estereo(playerid, "https://streams.regenbogen.de/rr-latin-128-aac?usid=0-0-H-A-D-06", 13), AccionesRol(playerid, 0, "cambia la estacion de radio a High Hip-Hop.");
					}
			}
		case D_PREMIUMS:
			if(response) switch(listitem) {
				case 0: {
						new DialogStatus[3000];
						strcat(DialogStatus, "\n{C93CCE}?{FFFFFF} +50$ en pago diario.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Acceso al chat /vip.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Color dorado in game.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 2 ranura extra en /ropa.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 1 ranura extra en vehiculos.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 2 ranura extra en maleteros.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 1 ranura extra para /comprarcasa.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Acceso al /casillero y salon premium.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Acceso a skins gratis en /casillero.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Descuento de 10% en vehiculos en venta.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Descuento de 25% en productos de negocios.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Dinero de regalo por comprar: 5000{00c200}$\n\n");
						strcat(DialogStatus, "{FF0000}Costo:{FFFFFF} 100{00c200}${FFFFFF} pesos(Argentinos)\n\n");
						ShowPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{D6E1EB}Basico", DialogStatus, "Cerrar", "");
					}
				case 1: {
						new DialogStatus[3000];
						strcat(DialogStatus, "\n{C93CCE}?{FFFFFF} +100$ en pago diario.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Acceso al chat /vip.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Color dorado in game.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 3 ranura extra en /ropa.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 1 ranura extra en /trabajos.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 2 ranura extra en vehiculos.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 3 ranura extra en maleteros.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 2 ranura extra para /comprarcasa.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 1 ranura extra para /comprarnegocio.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Acceso al /casillero y salon premium.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Acceso a skins gratis en /casillero.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Acceso a accesorios(premium) /prendas.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Descuento de 25% en vehiculos en venta.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Descuento de 25% en productos de negocios.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Acceso al regalo(cada 12hrs) en /casillero.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Dinero de regalo por comprar: 10500{00c200}$\n\n");
						strcat(DialogStatus, "{FF0000}Costo:{FFFFFF} 150{00c200}${FFFFFF} pesos(argentinos)\n\n");
						ShowPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{D6E1EB}Avanzado", DialogStatus, "Cerrar", "");
					}
				case 2: {
						new DialogStatus[3000];
						strcat(DialogStatus, "\n{C93CCE}?{FFFFFF} +150$ en pago diario.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Acceso al chat /vip.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Color dorado in game.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 4 ranura extra en /ropa.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 1 ranura extra en /trabajos.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 3 ranura extra en vehiculos.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 3 ranura extra en maleteros.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 3 ranura extra para /comprarcasa.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} 1 ranura extra para /comprarnegocio.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Acceso al /casillero y salon premium.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Acceso a skins gratis en /casillero.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Acceso a accesorios(premium) /prendas.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Descuento de 42% en vehiculos en venta.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Descuento de 25% en productos de negocios.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Acceso al regalo(cada 12hrs) en /casillero.\n");
						strcat(DialogStatus, "{C93CCE}?{FFFFFF} Dinero de regalo por comprar: 20000{00c200}$\n\n");
						strcat(DialogStatus, "{FF0000}Costo:{FFFFFF} 230{00c200}${FFFFFF} pesos(argentinos)\n\n");
						ShowPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{D6E1EB}Ultra", DialogStatus, "Cerrar", "");
					}
			}
		case D_CAMELLO:
				if (response) {
					new location[MAX_ZONE_NAME], avisapd = random(3);
					if (listitem == 0) //- Crack
					{
						if (RevisarDinero(playerid, 9000))
						{
							Get2DZone(location, MAX_ZONE_NAME, 2315.2449, 33.6971, 27.3995);
							format(string, sizeof string, "[SMS: 0057081]: Necesito que vengas por el crack en %s.", location);
							_Mensaje(playerid, 4, "FFEA5F", string);
							Pedido[playerid] = 2;
							TogglePlayerAllDynamicCPs(playerid, false);
							SetPlayerCheckpoint(playerid, 2315.2449, 33.6971, 27.3995, 2);
							switch (avisapd)
							{
								case 0: return 1;
								case 1: {
									format(string, sizeof string, "CENTRAL: Un anonimo ha denunciado que se esta haciendo un trafico en %s.", location);
									SendRadioFaction(1, C_COLORPOLICIA, string);
									SendRadioFaction(3, C_COLORPOLICIA, string);
									return 1;
								}
								case 2: return 1;
							}
						}
					}
					else if (listitem == 1) //- Cocaina
					{
						if (RevisarDinero(playerid, 10000))
						{
							Get2DZone(location, MAX_ZONE_NAME, 1281.0088, 305.0030, 19.5505);
							format(string, sizeof string, "[SMS: 0067083]: Necesito que vengas por la cocaina en %s.", location);
							_Mensaje(playerid, 4, "FFEA5F", string);
							Pedido[playerid] = 3;
							TogglePlayerAllDynamicCPs(playerid, false);
							SetPlayerCheckpoint(playerid, 1281.0088, 305.0030, 19.5505, 2);
							switch (avisapd)
							{
								case 0: return 1;
								case 1: {
									format(string, sizeof string, "CENTRAL: Un anonimo ha denunciado que se esta haciendo un trafico en %s.", location);
									SendRadioFaction(1, C_COLORPOLICIA, string);
									SendRadioFaction(3, C_COLORPOLICIA, string);
									return 1;
								}
								case 2: return 1;
							}
						}
					}
					else if (listitem == 2) //- Heroina
					{
						if (RevisarDinero(playerid, 8000))
						{
							Get2DZone(location, MAX_ZONE_NAME, 2195.8572, -1971.3330, 13.7833);
							format(string, sizeof string, "[SMS: 0017281]: Necesito que vengas por la heroina en %s.", location);
							_Mensaje(playerid, 4, "FFEA5F", string);
							Pedido[playerid] = 4;
							TogglePlayerAllDynamicCPs(playerid, false);
							SetPlayerCheckpoint(playerid, 2195.8572, -1971.3330, 13.7833, 2);
							switch (avisapd)
							{
								case 0: return 1;
								case 1: {
									format(string, sizeof string, "CENTRAL: Un anonimo ha denunciado que se esta haciendo un trafico en %s.", location);
									SendRadioFaction(1, C_COLORPOLICIA, string);
									SendRadioFaction(3, C_COLORPOLICIA, string);
									return 1;
								}
								case 2: return 1;
							}
						}
					}
					else if (listitem == 3) //- LSD
					{
						if (RevisarDinero(playerid, 5000))
						{
							Get2DZone(location, MAX_ZONE_NAME, 1667.4683, -2095.2505, 13.7241);
							format(string, sizeof string, "[SMS: 0047001]: Necesito que vengas por la droga LSD en %s.", location);
							_Mensaje(playerid, 4, "FFEA5F", string);
							Pedido[playerid] = 5;
							TogglePlayerAllDynamicCPs(playerid, false);
							SetPlayerCheckpoint(playerid, 1667.4683, -2095.2505, 13.7241, 2);
							switch (avisapd)
							{
								case 0: return 1;
								case 1: {
									format(string, sizeof string, "CENTRAL: Un anonimo ha denunciado que se esta haciendo un trafico en %s.", location);
									SendRadioFaction(1, C_COLORPOLICIA, string);
									SendRadioFaction(3, C_COLORPOLICIA, string);
									return 1;
								}
								case 2: return 1;
							}
						}
					}
					else if (listitem == 4) // MARIHUANA
					{
						if (RevisarDinero(playerid, 2200))
						{
							Get2DZone(location, MAX_ZONE_NAME, 2494.1326, -1464.6361, 24.0107);
							format(string, sizeof string, "[SMS: 5049927]: Necesito que vengas por las semillas en %s.", location);
							_Mensaje(playerid, 4, "FFEA5F", string);
							Pedido[playerid] = 6;
							TogglePlayerAllDynamicCPs(playerid, false);
							SetPlayerCheckpoint(playerid, 2494.1326, -1464.6361, 24.0107, 2);
							switch (avisapd)
							{
								case 0: return 1;
								case 1: {
									format(string, sizeof string, "CENTRAL: Un anonimo ha denunciado que se esta haciendo un trafico en %s.", location);
									SendRadioFaction(1, C_COLORPOLICIA, string);
									SendRadioFaction(3, C_COLORPOLICIA, string);
									return 1;
								}
								case 2: return 1;
							}
						}
					}
				}
		case D_FABRICA:
			{
				if (!_Fabrica(playerid)) return _Mensaje(playerid, 4, "ffffff", "{ADC3E7}Ya no estas en un punto de fabrica.");
				new obj, material, Cops, tipo;
				foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jDutyPD] != 0)
				{
					Cops++;
				}
				if (response) {
					if(InfoJugador[playerid][jT_fabrica] == -1 && InfoJugador[playerid][jI_fabrica] < 3)
					{
						if (listitem == 0) { //- Caja de D. Eagle
							if(InfoJugador[playerid][jMateriales] >= 75){
								material = 75;
								obj = 24;
								tipo = 1;
							} else return ShowInfoForPlayer(playerid, "No tienes suficientes materiales.", 2000);
						} else if (listitem == 1) { //- Caja de MP5
							if(InfoJugador[playerid][jMateriales] >= 150){
								material = 150;
								obj = 29;
								tipo = 1;
							} else return ShowInfoForPlayer(playerid, "No tienes suficientes materiales.", 2000);
						} else if (listitem == 2) { //- Caja de Escopeta
							if(InfoJugador[playerid][jMateriales] >= 200){
								material = 200;
								obj = 25;
								tipo = 1;
							} else return ShowInfoForPlayer(playerid, "No tienes suficientes materiales.", 2000);
						} else if (listitem == 3) { //- Caja de Ak-47
							if(InfoJugador[playerid][jMateriales] >= 350){
								material = 350;
								obj = 30;
								tipo = 1;
							} else return ShowInfoForPlayer(playerid, "No tienes suficientes materiales.", 2000);
						}
					}
					if(tipo != 0)
					{
					if(InfoJugador[playerid][jMateriales] <= material) return ShowInfoForPlayer(playerid, "No tienes los suficientes materiales.", 2000);
					jPt_fabrica[playerid] = SetTimerEx("PedidoFabrica", 35000, false, "iiiii", playerid, obj, material, 4, tipo);
					_Mensaje(playerid, 4, "ffffff", "Jorge dice: Tu pedido esta en camino, Juan fue por el.");
					_Mensaje(playerid, 4, "ffffff", "[NO TE ALEJES DEL /FABRICAR HASTA QUE LLEGUE EL PEDIDO NI TE COLOQUES COSAS EN LA MANO O SE CANCELARA]");
					SendRadioFaction(1, C_COLORPOLICIA, "CENTRAL: Un anonimo ha denunciado que se esta haciendo un trafico de armas.");
					if(InfoJugador[playerid][jManoIzquierda] == 50) InfoJugador[playerid][jManoIzquierdaCant] --;
					else InfoJugador[playerid][jManoDerechaCant] --;
					}
					ActualizarManos(playerid);
					return 1;
				}
			}
		case D_DrogaP:
			if (response) switch (listitem) {
				case 0: {
						if (GetPVarInt(playerid, "SeleccionDroga") == 0) return ShowInfoForPlayer(playerid, "No estas traficando drogas.", 2000);
						new mypoint = -1;
						if (_enPos(playerid, 4.0, 655.2497, -502.9607, 16.3102)) { mypoint = 5; }
						if (mypoint == -1) return ShowInfoForPlayer(playerid, "No estas en el punto especificado.", 2000);
						if (InfoJugador[playerid][jPaquetes]) {
							ShowInfoForPlayer(playerid, "No se puede sostener mas paquetes de drogas.", 2000);
							SetPVarInt(playerid, "SeleccionDroga", 0);
							return 1;
						}
						if (GetPlayerCash(playerid) > 8) {
							_Mensaje(playerid, 2, "0", "Pagaste $8 por el paquete de marihuana.");
							GivePlayerCash(playerid, -8, "paquete marihuana");
							InfoJugador[playerid][jPaquetes] = 1;
							SetPVarInt(playerid, "TipoDroga", 1);
							SetPVarInt(playerid, "SeleccionDroga", 0);
							SetPVarInt(playerid, "TeleportTafricante", 25);
							SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTTRAFICANTE);
							_Mensaje(playerid, 2, "0", "Ahora dejalo en lugar indicado para tu paga. {FF0000}(Ve al punto rojo)");
							SetPlayerCheckpoint(playerid, 633.3113, -1776.1129, 14.1459, 2);
							SetPVarInt(playerid, "EnCheckPoint", 5);
							return 1;
						} else {
							ShowInfoForPlayer(playerid, "No tienes $8 dolares.", 2000);
							SetPVarInt(playerid, "SeleccionDroga", 0);
							return 1;
						}
					}
				case 1: {
						if (GetPVarInt(playerid, "SeleccionDroga") == 0) return ShowInfoForPlayer(playerid, "No estas traficando drogas.", 2000);
						new mypoint = -1;
						if (_enPos(playerid, 4.0, 655.2497, -502.9607, 16.3102)) { mypoint = 5; }
						if (mypoint == -1) return ShowInfoForPlayer(playerid, "No estas en el punto especificado.", 2000);
						if (InfoJugador[playerid][jPaquetes]) {
							ShowInfoForPlayer(playerid, "No se puede sostener mas paquetes de drogas.", 2000);
							SetPVarInt(playerid, "SeleccionDroga", 0);
							return 1;
						}
						if (GetPlayerCash(playerid) > 6) {
							_Mensaje(playerid, 2, "0", "Pagaste $6 por el paquete de crack.");
							GivePlayerCash(playerid, -6, "paquete de crack");
							InfoJugador[playerid][jPaquetes] = 1;
							SetPVarInt(playerid, "TipoDroga", 2);
							SetPVarInt(playerid, "SeleccionDroga", 0);
							SetPVarInt(playerid, "TeleportTafricante", 25);
							SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTTRAFICANTE);
							SetPlayerCheckpoint(playerid, 990.2177, -1349.8931, 13.3322, 2);
							_Mensaje(playerid, 2, "0", "Ahora dejalo en lugar indicado para tu paga. {FF0000}(Ve al checkpoint)");
							SetPVarInt(playerid, "EnCheckPoint", 5);
							return 1;
						} else {
							ShowInfoForPlayer(playerid, "No tienes $6 dolares.", 2000);
							SetPVarInt(playerid, "SeleccionDroga", 0);
							return 1;
						}
					}
				case 2: {
						if (GetPVarInt(playerid, "SeleccionDroga") == 0) return ShowInfoForPlayer(playerid, "No estas traficando drogas.", 2000);
						new mypoint = -1;
						if (_enPos(playerid, 4.0, 655.2497, -502.9607, 16.3102)) { mypoint = 5; }
						if (mypoint == -1) return ShowInfoForPlayer(playerid, "No estas en el punto especificado.", 2000);
						if (InfoJugador[playerid][jPaquetes]) {
							ShowInfoForPlayer(playerid, "No se puede sostener mas paquetes de drogas.", 2000);
							SetPVarInt(playerid, "SeleccionDroga", 0);
							return 1;
						}
						if (GetPlayerCash(playerid) > 7) {
							_Mensaje(playerid, 2, "0", "Pagaste $7 por el paquete de heroina.");
							GivePlayerCash(playerid, -7, "paquete de heroina");
							InfoJugador[playerid][jPaquetes] = 1;
							SetPVarInt(playerid, "TipoDroga", 3);
							SetPVarInt(playerid, "SeleccionDroga", 0);
							SetPVarInt(playerid, "TeleportTafricante", 25);
							SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTTRAFICANTE);
							SetPlayerCheckpoint(playerid, 2199.9021, -1259.1571, 24.0084, 2);
							_Mensaje(playerid, 2, "0", "Ahora dejalo en lugar indicado para tu paga. {FF0000}(Ve al checkpoint)");
							SetPVarInt(playerid, "EnCheckPoint", 5);
							return 1;
						} else {
							ShowInfoForPlayer(playerid, "No tienes $7 dolares.", 2000);
							SetPVarInt(playerid, "SeleccionDroga", 0);
							return 1;
						}
					}
				case 3: {
						if (GetPVarInt(playerid, "SeleccionDroga") == 0) return ShowInfoForPlayer(playerid, "No estas traficando drogas.", 2000);
						new mypoint = -1;
						if (_enPos(playerid, 4.0, 655.2497, -502.9607, 16.3102)) { mypoint = 5; }
						if (mypoint == -1) return ShowInfoForPlayer(playerid, "No estas en el punto especificado.", 2000);
						if (InfoJugador[playerid][jPaquetes]) {
							ShowInfoForPlayer(playerid, "No se puede sostener mas paquetes de drogas.", 2000);
							SetPVarInt(playerid, "SeleccionDroga", 0);
							return 1;
						}
						if (GetPlayerCash(playerid) > 9) {
							_Mensaje(playerid, 2, "0", "Pagaste $9 por el paquete de lsd.");
							GivePlayerCash(playerid, -9, "paquete de lsd");
							InfoJugador[playerid][jPaquetes] = 1;
							SetPVarInt(playerid, "TipoDroga", 4);
							SetPVarInt(playerid, "SeleccionDroga", 0);
							SetPVarInt(playerid, "TeleportTafricante", 25);
							SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTTRAFICANTE);
							SetPlayerCheckpoint(playerid, 2537.6741, -1469.8153, 23.9680, 2);
							_Mensaje(playerid, 2, "0", "Ahora dejalo en lugar indicado para tu paga. {FF0000}(Ve al checkpoint)");
							SetPVarInt(playerid, "EnCheckPoint", 5);
							return 1;
						} else {
							ShowInfoForPlayer(playerid, "No tienes $9 dolares.", 2000);
							SetPVarInt(playerid, "SeleccionDroga", 0);
							return 1;
						}
					}
				case 4: {
						if (GetPVarInt(playerid, "SeleccionDroga") == 0) return ShowInfoForPlayer(playerid, "No estas traficando drogas.", 2000);
						new mypoint = -1;
						if (_enPos(playerid, 4.0, 655.2497, -502.9607, 16.3102)) { mypoint = 5; }
						if (mypoint == -1) return ShowInfoForPlayer(playerid, "No estas en el punto especificado.", 2000);
						if (InfoJugador[playerid][jPaquetes]) {
							ShowInfoForPlayer(playerid, "No se puede sostener mas paquetes de drogas.", 2000);
							SetPVarInt(playerid, "SeleccionDroga", 0);
							return 1;
						}
						if (GetPlayerCash(playerid) > 8) {
							_Mensaje(playerid, 2, "0", "Pagaste $8 por el paquete de cocaina.");
							GivePlayerCash(playerid, -8, "paquete de cocaina");
							InfoJugador[playerid][jPaquetes] = 1;
							SetPVarInt(playerid, "TipoDroga", 5);
							SetPVarInt(playerid, "SeleccionDroga", 0);
							SetPVarInt(playerid, "TeleportTafricante", 25);
							SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTTRAFICANTE);
							SetPlayerCheckpoint(playerid, 2280.2500, -1937.8478, 13.5463, 2);
							_Mensaje(playerid, 2, "0", "Ahora dejalo en lugar indicado para tu paga. {FF0000}(Ve al checkpoint)");
							SetPVarInt(playerid, "EnCheckPoint", 5);
							return 1;
						} else {
							ShowInfoForPlayer(playerid, "No tienes $8 dolares.", 2000);
							SetPVarInt(playerid, "SeleccionDroga", 0);
							return 1;
						}
					}
			}
		case D_Praticar:
			{
				if (response) switch (listitem) {
					case 0: {
							if(RevisarDinero(playerid, 40)) {
								GivePlayerCash(playerid, -40, "estilo kung fu");
								InfoJugador[playerid][jPelea] = 6;
								SetPlayerFightingStyle(playerid, InfoJugador[playerid][jPelea]);
								_Mensaje(playerid, 4, "00c200", "[Profesor]:{ffffff} Felicidades! Has aprendido Kung Fu.");
								ApplyAnimation(playerid, "benchpress", "gym_bp_celebrate", 4.0, 1, 1, 1, 1, 500, 1);
								guardar_int_mysql("cuentas", "Pelea", InfoJugador[playerid][jID], InfoJugador[playerid][jPelea]);
							}
						}
					case 1: {
							if(RevisarDinero(playerid, 30)) {
								GivePlayerCash(playerid, -30, "estilo boxeo");
								InfoJugador[playerid][jPelea] = 5;
								SetPlayerFightingStyle(playerid, InfoJugador[playerid][jPelea]);
								_Mensaje(playerid, 4, "00c200", "[Profesor]:{ffffff} Felicidades! Has aprendido a Boxear.");
								ApplyAnimation(playerid, "benchpress", "gym_bp_celebrate", 4.0, 1, 1, 1, 1, 500, 1);
								guardar_int_mysql("cuentas", "Pelea", InfoJugador[playerid][jID], InfoJugador[playerid][jPelea]);
							}
						}
				}
			}

		case D_Uvehiculo1:
		{
			if(!response) { _Mensaje(playerid, 4, "FFFFFF", "Cerraste el catalogo de compras."); return 1; }
			new ID = listitem,StrPVar[40];
			format(StrPVar, sizeof StrPVar, "GPS_vehC_%d",ID);
			new i = GetPVarInt(playerid,StrPVar);
			compra_Veh[playerid] = i;
			format(string, sizeof string,
			"{ffffff}Estas seguro que quieres comprar este vehiculo?\n\n\
			{ffffff}     Modelo: %s - Precio: {1CB54C}$%d\n", GetNameVehicle(i_Usado[i][uModeloVeh]), i_Usado[i][uPrecioVeh]);
			ShowPlayerDialog(playerid, D_Uvehiculo2, DIALOG_STYLE_MSGBOX, "{D6E1EB}Adquirir vehiculo", string, "Comprar", "Cancelar");
			return 1;
		}
		case D_Uvehiculo2:
		{
			if(!response) { _Mensaje(playerid, 4, "FFFFFF", "Cerraste el catalogo de compras."); compra_Veh[playerid] = -1; return 1; }
			if (compra_Veh[playerid] == -1) return _Mensaje(playerid, 4, "FFFFFF", "Cerraste el catalogo de compras.");
			new d = compra_Veh[playerid];
			new max_vehs = VehicleCount(playerid);
			if(InfoJugador[playerid][jNivelVIP] == 0 && max_vehs >= 3)
			{
			    compra_Veh[playerid] = -1;
				_Mensaje(playerid, 4, "FFFFFF", "Solo puedes tener 3 vehiculos.");
				return 1;
			}
			if(InfoJugador[playerid][jNivelVIP] == 1 && max_vehs >= 4)
			{
			    compra_Veh[playerid] = -1;
				_Mensaje(playerid, 4, "FFFFFF", "Solo puedes tener 4 vehiculos.");
				return 1;
			}
			if(InfoJugador[playerid][jNivelVIP] == 2 && max_vehs >= 5)
			{

			}
			if(InfoJugador[playerid][jNivelVIP] == 3 && max_vehs >= 6)
			{
			    compra_Veh[playerid] = -1;
				_Mensaje(playerid, 4, "FFFFFF", "Solo puedes tener 5 vehiculos.");
				return 1;
			}
			new costo = i_Usado[d][uPrecioVeh];
			if (GetPlayerCash(playerid) < costo)
			{
			    compra_Veh[playerid] = -1;
				_Mensaje(playerid, 4, "FFFFFF", "No tienes dinero para comprar ese vehiculo.");
				return 1;
			}
			GivePlayerCash(playerid, -costo, "vehiculo usado");
			DineroEstado += (costo * 50) / (100); // Da dinero al estado
			SendClientMessageEx(playerid, -1, "Felicitaciones! Compraste %s usado. Recuerda /estacionar, mas informacion en /ayuda.", GetNameVehicle(i_Usado[d][uModeloVeh]));
			CreateVehiclePlayer(playerid, i_Usado[d][uModeloVeh], 2605.9143, -2212.0251, 13.1689, 180.0000, 0, 0, i_Usado[d][uColor_1], i_Usado[d][uColor_2], costo * 2, d, 0);
			bV_usado(d);
			compra_Veh[playerid] = -1;
			return 1;
		}
		case D_FOGATA:
			{
				if (response) {
					if (listitem == 0) { //- Colocar
						if(InfoJugador[playerid][jManoDerecha] != 87 && InfoJugador[playerid][jManoIzquierda] != 87){ ShowInfoForPlayer(playerid, "Necesitas un encendedor con gas para encender la fogata.", 2000); return 1;}
						if(InfoJugador[playerid][jTroncos] >= 50){
							if (InfoFogata[playerid][fObjeto] != 0) return ShowInfoForPlayer(playerid, "Ya has creado una fogata.", 2000);
							if (GetPlayerVirtualWorld(playerid) != 0) return ShowInfoForPlayer(playerid, "No puedes crear fogatas en interiores.", 2000);
							new Float: Positionss[3];
							GetPlayerPos(playerid, Positionss[0], Positionss[1], Positionss[2]);
							InfoFogata[playerid][fPosicionX] = Positionss[0];
							InfoFogata[playerid][fPosicionY] = Positionss[1];
							InfoFogata[playerid][fPosicionZ] = Positionss[2];
							InfoFogata[playerid][fObjeto] = CreateDynamicObject(1463, Positionss[0], Positionss[1], Positionss[2], 0.000, 0.000, 0.000);
							EditDynamicObject(playerid, InfoFogata[playerid][fObjeto]);
							SetPVarInt(playerid,"Editando_F", 1);
							_Mensaje(playerid, 2, "0", "Has tomado unos troncos con el cual estas armando una fogata.");
							InfoJugador[playerid][jTroncos] -= 30;
							if(InfoJugador[playerid][jManoDerecha] == 87){InfoJugador[playerid][jManoDerechaCant] --;}
							else if(InfoJugador[playerid][jManoIzquierda] == 87){InfoJugador[playerid][jManoIzquierdaCant] --;}
							ActualizarManos(playerid);
							guardar_int_mysql("cuentas", "Troncos", InfoJugador[playerid][jID], InfoJugador[playerid][jTroncos]);
						} else return ShowInfoForPlayer(playerid, "No tienes suficientes troncos (50).", 2000);
					} else if (listitem == 1) { //- Editar
						if (InfoFogata[playerid][fObjeto] == 0) return ShowInfoForPlayer(playerid, "No has creado una fogata.", 2000);
						EditDynamicObject(playerid, InfoFogata[playerid][fObjeto]);
						SetPVarInt(playerid,"Editando_F", 1);
						_Mensaje(playerid, 2, "0", "Edicion de fogata.");
					} else if (listitem == 2) { //- Borrar
						if (InfoFogata[playerid][fObjeto] == 0) return ShowInfoForPlayer(playerid, "No has creado una fogata.", 2000);

						if (InfoFogata[playerid][fObjeto] != INVALID_STREAMER_ID)
						{
							DestroyDynamicObject(InfoFogata[playerid][fObjeto]);
							InfoFogata[playerid][fObjeto] = INVALID_STREAMER_ID;
						}
						if (InfoFogata[playerid][fObjeto2] != INVALID_STREAMER_ID)
						{
							DestroyDynamicObject(InfoFogata[playerid][fObjeto2]);
							InfoFogata[playerid][fObjeto2] = INVALID_STREAMER_ID;
						}
						InfoFogata[playerid][fPosicionX] = 0.0;
						InfoFogata[playerid][fPosicionX] = 0.0;
						InfoFogata[playerid][fPosicionX] = 0.0;
						InfoFogata[playerid][fPosicionRX] = 0.0;
						InfoFogata[playerid][fPosicionRY] = 0.0;
						InfoFogata[playerid][fPosicionRZ] = 0.0;
						InfoFogata[playerid][fObjeto] = 0;
						InfoFogata[playerid][fObjeto2] = 0;
						_Mensaje(playerid, 2, "0", "Apagaste la fogata con dos bales de agua.");
						return 1;
					}
				}
			}
		case D_PCLSPD1: {
			if(!response) return _Mensaje(playerid, 5, "0", " Saliste del ordenador policial.");
			switch(listitem) {
				case 0: ShowPlayerDialog(playerid, D_PCLSPD2, DIALOG_STYLE_INPUT, "{D6E1EB}Busqueda de informacion		", "Introduzca el documento de la persona:", "Buscar", "Cancelar");
				case 1: ShowPlayerDialog(playerid, D_PCLSPD3, DIALOG_STYLE_INPUT, "{D6E1EB}Historial delictivo		", "Introduzca el documento de la persona:", "Buscar", "Cancelar");
				case 2: Dialog_Show(playerid, Show4Computador, DIALOG_STYLE_INPUT, "{D6E1EB}Informacion de vehiculo		", "Introduzca el numero del vehiculo (/dl):", "Buscar", "Cancelar");
				case 3: {
						PlayerPlaySound(playerid, 1058, 0, 0, 0);
						if (EnLlamada[playerid] != 0) { ShowInfoForPlayer(playerid, "Ya estas en una llamada.", 2000); return 1; }
						if (InfoJugador[playerid][jFamMiembro] == 1 || InfoJugador[playerid][jFamMiembro] == 5) {
							new oyente = -1;
							for (new i; i < MAX_PLAYERS; i++) {
								if (EnLlamada[i] == 911) {
									oyente = i;
									break;
								}
            				}
            				if (oyente != -1) {
								PersonaEnLlamada[playerid] = oyente;
								PersonaEnLlamada[oyente] = playerid;
								_Mensaje(oyente, 2, "0", "Han respondido al telefono.");
								EnLlamada[playerid] = 2;
								EnLlamada[oyente] = 912;
								AccionesRol(playerid, 0, "contesto la llamada de emergencia.");
								return 1;
							}
						}
						_ordenador(playerid);
						_Mensaje(playerid, 4, "b00000", " Parece no haber llamadas entrantes.");
				}
				case 4: {
						new _dialog1[3000], _dialog2[300], so_s;
						strcat(_dialog1, "{ffffff}Listado:\n\n");
						foreach(Player, _i) if (InfoJugador[_i][jEstrellas] != 0) {

							format(_dialog2, sizeof(_dialog2), "{ffffff}Nombre completo: %s | Nivel de busqueda: %d\n", NombreJugador(_i), InfoJugador[_i][jEstrellas]);
							strcat(_dialog1, _dialog2);
							++so_s;

						}
						if (so_s) {
			        		Dialog_Show(playerid, Show0Computador, DIALOG_STYLE_MSGBOX, "{b0b0b0}Sospechosos		", _dialog1, "Cerrar", "");
						} else Dialog_Show(playerid, Show0Computador, DIALOG_STYLE_MSGBOX, "{b0b0b0}Sospechosos		", "No se encuentran sospechosos en este momento", "Cerrar", "");
				}
				case 5:
				{
					cmd_refuerzos(playerid);
				}
			}
		}
		case D_PCLSPD2:
			{
				if(!response) {
					_ordenador(playerid);
				} else {
					if(!isnumeric(inputtext)) return ShowPlayerDialog(playerid, D_PCLSPD2, DIALOG_STYLE_INPUT, "{D6E1EB}Busqueda de informacion		", "Introduzca el documento de la persona:\n\n{ff0000} Documento invalido (coloco palabras)", "Buscar", "Cancelar");
					new x212 = strval(inputtext);
					if (x212 == 0) return ShowPlayerDialog(playerid, D_PCLSPD2, DIALOG_STYLE_INPUT, "{D6E1EB}Busqueda de informacion		", "Introduzca el documento de la persona:\n\n{ff0000} Documento invalido (coloco numero 0)", "Buscar", "Cancelar");
					foreach(Player, idjugador) if (InfoJugador[idjugador][jDocumento] == x212) {
						new car[5], fly[5], boat[5], gun[5], cam[5];
						new _dialog1[3000], _dialog2[300], _dialog3[300];
						if (InfoJugador[idjugador][jLicencias][0] == 1) gun = "Si";
						else gun = "No";
						if (InfoJugador[idjugador][jLicencias][1] == 1) car = "Si";
						else car = "No";
						if (InfoJugador[idjugador][jLicencias][2] == 1) cam = "Si";
						else cam = "No";
						if (InfoJugador[idjugador][jLicencias][4] == 1) fly = "Si";
						else fly = "No";
						if (InfoJugador[idjugador][jLicencias][5] == 1) boat = "Si";
						else boat = "No";

						strcat(_dialog1, "{ffffff}Resultados de busqueda:\n\n");

						format(_dialog2, sizeof _dialog2, "{ffffff}Nombre completo: %s\nEdad: %d\nTelefono: %d\nDocumento: %d\n\n", NombreJugador(idjugador), InfoJugador[idjugador][jEdad], InfoJugador[idjugador][jTelefono], InfoJugador[idjugador][jDocumento]);
						strcat(_dialog1, _dialog2);

						Loop(xd, totalcasas, 1) if (InfoCasa[xd][cTipo] != 0 && strcmp(InfoJugador[idjugador][jNombre_Apellido], InfoCasa[xd][cPropietario], true) == 0)
						{
						    if (InfoCasa[xd][cEntradaInt] == 0 && InfoCasa[xd][cEntradaVW] == 0)
						    {
								Get2DZone(_dialog2, MAX_ZONE_NAME, InfoCasa[xd][cEntradaX], InfoCasa[xd][cEntradaY], InfoCasa[xd][cEntradaZ]);
								format(_dialog2, sizeof _dialog2, "{ffffff}Casa: %s - %d\n",_dialog2, xd);
							}
							else { format(_dialog2, sizeof _dialog2, "{ffffff}Casa: %d\n", xd); }
							strcat(_dialog1, _dialog2);
						}

						format(_dialog2, sizeof _dialog2, "{ffffff}Licencia de conducir: %s\nLicencia de vuelo: %s\nLicencia de bote: %s\nLicencia de armas: %s\nLicencia de camionero: %s\n\n", car, fly, boat, gun, cam);
						strcat(_dialog1, _dialog2);

						format(_dialog3, sizeof(_dialog3), "{b0b0b0}Informacion de %s		", NombreJugador(idjugador));
			        	Dialog_Show(playerid, Show0Computador, DIALOG_STYLE_MSGBOX, _dialog3, _dialog1, "Cerrar", "");
						return 1;
					}
					ShowPlayerDialog(playerid, D_PCLSPD2, DIALOG_STYLE_INPUT, "{D6E1EB}Busqueda de informacion		", "Introduzca el documento de la persona:\n\n{ff0000} Documento invalido (user desconectado)", "Buscar", "Cancelar");
				}
			}
		case D_PCLSPD3:
			{
				if(!response) {
					_ordenador(playerid);
				} else {
					if(!isnumeric(inputtext)) return ShowPlayerDialog(playerid, D_PCLSPD3, DIALOG_STYLE_INPUT, "{D6E1EB}Historial delictivo		", "Introduzca el documento de la persona:\n\n{ff0000} Documento invalido (coloco palabras)", "Buscar", "Cancelar");
					new x212 = strval(inputtext);
					if (x212 == 0) return ShowPlayerDialog(playerid, D_PCLSPD2, DIALOG_STYLE_INPUT, "{D6E1EB}Historial delictivo		", "Introduzca el documento de la persona:\n\n{ff0000} Documento invalido (coloco numero 0)", "Buscar", "Cancelar");
					foreach(Player, idjugador) if (InfoJugador[idjugador][jDocumento] == x212) {
						new _dialog1[3000], _dialog2[300], _dialog3[300];

						format(_dialog2, sizeof(_dialog2),
						"{ffffff}Nombre completo: %s\n\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\nNivel de busqueda: %d\n\n",
						NombreJugador(idjugador),
						InfoJugador[idjugador][jRazonDelito1],
						InfoJugador[idjugador][jRazonDelito2],
						InfoJugador[idjugador][jRazonDelito3],
						InfoJugador[idjugador][jRazonDelito4],
						InfoJugador[idjugador][jRazonDelito5],
						InfoJugador[idjugador][jRazonDelito6],
						InfoJugador[idjugador][jRazonDelito7],
						InfoJugador[idjugador][jRazonDelito8],
						InfoJugador[idjugador][jRazonDelito9],
						InfoJugador[idjugador][jRazonDelito10],
						InfoJugador[idjugador][jEstrellas]);
						strcat(_dialog1, _dialog2);

						format(_dialog3, sizeof(_dialog3), "{b0b0b0}Historial de %s		", NombreJugador(idjugador));
			        	Dialog_Show(playerid, Show0Computador, DIALOG_STYLE_MSGBOX, _dialog3, _dialog1, "Cerrar", "");
						return 1;
					}
					ShowPlayerDialog(playerid, D_PCLSPD2, DIALOG_STYLE_INPUT, "{D6E1EB}Historial delictivo		", "Introduzca el documento de la persona:\n\n{ff0000} Documento invalido (user desconectado)", "Buscar", "Cancelar");
				}
			}

		case D_ELEGIRROPA:
			{
				if(!response) return 1;
				CambiarRopa(playerid, GetPVarInt(playerid, "ROPA_SELECCIONADA"), listitem);
			}

		case D_RESTAURANTES:
		{
		    if (!response) return 1;
			new id = EnNegocio(playerid);
			if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
			switch (listitem)
			{
				case 0: PagarProducto(playerid, id, 20, 96, 1); //- Botella de cerveza
				case 1: PagarProducto(playerid, id, 30, 97, 1); //- Copa de vino
				case 2: PagarProducto(playerid, id, 40, 98, 1); //- Vaso de whisky
				case 3: PagarProducto(playerid, id, 50, 99, 1); //- Vaso de ron
				case 4: PagarProducto(playerid, id, 30, 100, 1); //- Kids meal
				case 5: PagarProducto(playerid, id, 20, 91, 1); //- Bolsa patatas
				case 6: PagarProducto(playerid, id, 30, 101, 2); //- Burrito
				case 7: PagarProducto(playerid, id, 45, 102, 2); //- Pizza jamon y queso
				case 8: PagarProducto(playerid, id, 28, 101, 1); //- Parilla vegetariana
			}
			return 1;
		}
		case D_CLUCKINBELL:
		{
		    if (!response) return 1;
			new id = EnNegocio(playerid);
			if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
			switch (listitem)
			{
				case 0: PagarProducto(playerid, id, 20, 101, 1); //- The Little
				case 1: PagarProducto(playerid, id, 20, 101, 2); //- Cluker
				case 2: PagarProducto(playerid, id, 30, 100, 1); //- Kids Meal
				case 3: PagarProducto(playerid, id, 40, 100, 2); //- Cluker Mediana
				case 4: PagarProducto(playerid, id, 50, 100, 3); //- Super Cluker
				case 5: PagarProducto(playerid, id, 60, 100, 2); //- Cluker' Bell + Coca Cola
				case 6: PagarProducto(playerid, id, 40, 100, 3); //- Especial Bell
			}
			return 1;
		}
		case D_BURGERSHOT:
		{
		    if (!response) return 1;
			new id = EnNegocio(playerid);
			if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
			switch (listitem)
			{
				case 0: PagarProducto(playerid, id, 20, 100, 1); //- Simple Shot
				case 1: PagarProducto(playerid, id, 30, 100, 2); //- Doble Barreled
				case 2: PagarProducto(playerid, id, 40, 100, 3); //- Buckshot Especial
				case 3: PagarProducto(playerid, id, 45, 101, 1); //- Parilla vegetariana
				case 4: PagarProducto(playerid, id, 100, 100, 4); //- Filete de Mariscos
				case 5: PagarProducto(playerid, id, 30, 101, 2); //- Pollo Bits
			}
			return 1;
		}
		case D_PIZZASTACK:
		{
		    if (!response) return 1;
			new id = EnNegocio(playerid);
			if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
			switch (listitem)
			{
				case 0: PagarProducto(playerid, id, 20, 102, 1); //- The Bustert
				case 1: PagarProducto(playerid, id, 35, 102, 2); //- The Double D-Lux
				case 2: PagarProducto(playerid, id, 30, 102, 2); //- The Full Rack
				case 3: PagarProducto(playerid, id, 40, 102, 3); //- Pizza Jamon y Queso
				case 4: PagarProducto(playerid, id, 55, 102, 3); //- Pizza Completa + Coca Cola
				case 5: PagarProducto(playerid, id, 40, 102, 2); //- Plato Del Hoy
				case 6: PagarProducto(playerid, id, 60, 102, 4); //- Especial Pizza Familiar
			}
			return 1;
		}
		case D_NEG_CLUBS:
		{
		    if (!response) return 1;
			new id = EnNegocio(playerid);
			if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
			switch (listitem)
			{
				case 0: PagarProducto(playerid, id, 4, 95, 1); //- Agua
				case 1: PagarProducto(playerid, id, 20, 97, 1); //- Copa de vino
				case 2: PagarProducto(playerid, id, 30, 98, 1); //- Vaso de whisky
				case 3: PagarProducto(playerid, id, 20, 99, 1); //- Vaso de ron
				case 4: PagarProducto(playerid, id, 8, 96, 2); //- Cerveza
				case 5: PagarProducto(playerid, id, 100, 104, 10); //- Botella de whisky
				case 6: PagarProducto(playerid, id, 20, 88, 8); //- Cigarros
				case 7: PagarProducto(playerid, id, 10, 87, 10); //- Encendedor
				case 8: PagarProducto(playerid, id, 30, 101, 1); //- Burrito
				case 9: PagarProducto(playerid, id, 85, 105, 10); //- Botella de vino
				case 10: PagarProducto(playerid, id, 81, 103, 10); //- Botella de ron
			}
			return 1;
		}
		case D_SEXSHOP:
		{
		    if (!response) return 1;
			new id = EnNegocio(playerid);
			if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
			switch (listitem)
			{
				case 0: if(RevisarDinero(playerid, 15)) ShowPlayerDialog(playerid, D_SEXSHOP3, DIALOG_STYLE_LIST, "{D6E1EB}Ropa sexual de mujer", "{ffffff}Ropa de Sexo 1\nRopa de Sexo 2\nRopa de Sexo 3\nRopa de Sexo 4\nRopa de Sexo 5\nRopa de Sexo 6\nRopa de Sexo 7\nRopa de Sexo 8", "Continuar", "Salir");
				case 1: if(RevisarDinero(playerid, 15)) ShowPlayerDialog(playerid, D_SEXSHOP2, DIALOG_STYLE_LIST, "{D6E1EB}Ropa sexual de hombre", "{ffffff}Ropa de Sexo 1\nRopa de Sexo 2\nRopa de Sexo 3\nRopa de Sexo 4", "Continuar", "Salir");
				case 2: if(RevisarDinero(playerid, 15)) ShowPlayerDialog(playerid, D_SEXSHOP4, DIALOG_STYLE_LIST, "{D6E1EB}Juguetes sexuales", "{ffffff}Dildo Doble punta\nDildo pequeño\nDildo vibrador\nDildo vibrador pequeño", "Continuar", "Salir");
			}
			return 1;
		}
		case D_SEXSHOP2:
		{
		    if (!response) return 1;
			new id = EnNegocio(playerid);
			if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
			switch (listitem)
			{
				case 0: ElegirRopa(playerid, 18);
				case 1: ElegirRopa(playerid, 97);
				case 2: ElegirRopa(playerid, 154);
				case 3: ElegirRopa(playerid, 252);
			}
			_Mensaje(playerid, 5, "0", "Has comprado un traje de sexo masculino.");
			if (InfoJugador[playerid][jNivelVIP] == 0) PagarNegocio(playerid, id, 15);
			else PagarNegocio(playerid, id, 12), _Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $15, a ti te costo $12.");
			return 1;
		}
		case D_SEXSHOP3:
		{
		    if (!response) return 1;
			new id = EnNegocio(playerid);
			if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
			switch (listitem)
			{
				case 0: ElegirRopa(playerid, 63);
				case 1: ElegirRopa(playerid, 75);
				case 2: ElegirRopa(playerid, 85);
				case 3: ElegirRopa(playerid, 87);
				case 4: ElegirRopa(playerid, 152);
				case 5: ElegirRopa(playerid, 178);
				case 6: ElegirRopa(playerid, 256);
				case 7: ElegirRopa(playerid, 257);
			}
			_Mensaje(playerid, 5, "0", "Has comprado un traje de sexo femenino.");
			if (InfoJugador[playerid][jNivelVIP] == 0) PagarNegocio(playerid, id, 15);
			else PagarNegocio(playerid, id, 12), _Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $15, a ti te costo $12.");
			return 1;
		}
		case D_SEXSHOP4:
		{
		    if (!response) return 1;
			new id = EnNegocio(playerid);
			if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
			switch (listitem)
			{
				case 0: PagarProducto(playerid, id, 10, 10, 1); //- dildo
				case 1: PagarProducto(playerid, id, 8, 11, 1); //- dildo
				case 2: PagarProducto(playerid, id, 12, 12, 1); //- dildo
				case 3: PagarProducto(playerid, id, 8, 13, 1); //- dildo
			}
			return 1;
		}
		case D_GASOLINERA:
		{
		    if (!response) return 1;
			new id = EnNegocio(playerid);
			if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
			switch (listitem)
			{
				case 0: PagarProducto(playerid, id, 50, 89, 1); //- bidon de gasolina
				case 1: PagarProducto(playerid, id, 5, 91, 1); //- -
				case 2: PagarProducto(playerid, id, 5, 93, 1); //- -
				case 3: PagarProducto(playerid, id, 10, 87, 5); //- -
				case 4: PagarProducto(playerid, id, 100, 88, 5); //- -
				case 5:
				{
					if (RevisarDinero(playerid, 50))
					{
						_Mensaje(playerid, 4, "33CCFF", "Compraste unas piezas de recambio, comandos: /repararveh.");
						GivePlayerCash(playerid, -50, "piezas de recambio");
						RestarNegocio(id, 50);
						new obj = 140;
						if (InfoJugador[playerid][jManoDerecha] > 0 && InfoJugador[playerid][jManoIzquierda] > 0) return ShowInfoForPlayer(playerid, "Debes tener una mano vacia.", 2000);
                    	if (InfoJugador[playerid][jManoDerecha] == 0)
						{
							InfoJugador[playerid][jManoDerecha] = obj;
							InfoJugador[playerid][jManoDerechaCant] = 150;
							PonerObjeto(playerid, 1, obj);
							if (InfoInventario[obj][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[obj][IDArma], InfoInventario[obj][Capacidad]); }
						}
						else if (InfoJugador[playerid][jManoDerecha] != 0)
						{
                    		InfoJugador[playerid][jManoIzquierda] = obj;
                    		InfoJugador[playerid][jManoIzquierdaCant] = 150;
                    		PonerObjeto(playerid, 2, obj);
                    	}
                    	ActualizarManos(playerid);
					}
				}
			}
			return 1;
		}


            case P_PANTALLA: {
                if(response == 1) {
                    switch(listitem) {
						case 0: {
                                _Mensaje(playerid, 4, "ADC3E7", "*{FFFFFF} Estas viendo tus necesidades");
                                return 1;
							}
						case 1: {
                                _Mensaje(playerid, 4, "ADC3E7", "*{FFFFFF} Removiste tus necesidades");
                                return 1;
							}
						case 2: {
                                _Mensaje(playerid, 4, "ADC3E7", "*{FFFFFF} Limpiaste tu Pantalla");
                                LimpiarPantalla(playerid);
                                return 1;
							}
							case 3: {
                                _Mensaje(playerid, 4, "ADC3E7", "*{FFFFFF} Ocultaste el hud de coins");
                                return 1;
							}
							case 4: {
                                _Mensaje(playerid, 4, "ADC3E7", "*{FFFFFF} Estas viendo tus coins");
                                return 1;
							}
							case 5: {
								ocultarradio(playerid);
                                _Mensaje(playerid, 4, "ADC3E7", "*{FFFFFF} Ocultaste el textdraw de frecuencia");
                                return 1;
							}
							case 6: {
								mostrarradio(playerid);
                                _Mensaje(playerid, 4, "ADC3E7", "*{FFFFFF} Estas viendo tu frecuencia");
                                return 1;
							}
                       }
                  }
             }


        case D_FERRETERIA:
        {
            if (!response) return 1;
			new id = EnNegocio(playerid);
			if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
			switch (listitem)
			{
				case 0:
				{
					if (RevisarDinero(playerid, 3))
					{
						new objeto = 89;
						if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
						if (InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 1;}
						else if (InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
						_Mensaje(playerid, 2, "0", "Has comprado un bidon de gasolina, comandos: /llenarveh");
						ActualizarManos(playerid);
						GivePlayerCash(playerid, -3, "bidon de gasolina");
						RestarNegocio(id, 3);
					}
				}
				case 1:
				{
					if (RevisarDinero(playerid, 2))
					{
						new objeto = 83;
						if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
						if (InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 1;}
						else if (InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
						ActualizarManos(playerid);
						GivePlayerCash(playerid, -2, "compra obj83");
						RestarNegocio(id, 2);
					}
				}
				case 2:
				{
					if (RevisarDinero(playerid, 30))
					{
						new objeto = 128;
						if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
						if (InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 1;}
						else if (InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
						ActualizarManos(playerid);
						GivePlayerCash(playerid, -30, "compra obj128");
						RestarNegocio(id, 30);
					}
				}
				case 3: // chaleco reflector
				{
					new TextAcc[512];
					Loop(toy, 5, 0)
					{
						if (InfoJugador[playerid][aModelo][toy] == 0) format(TextAcc, sizeof TextAcc, "%s{ffffff}(%d) - Vacio\n", TextAcc, toy);
						else format(TextAcc, sizeof TextAcc, "%s{ffffff}(%d) - {FF972F}%s\n", TextAcc, toy, GetNameToy(playerid, toy));
					}
					ShowPlayerDialog(playerid, D_FERRETERIA2, DIALOG_STYLE_LIST, "{D6E1EB}Selecciona una ranura", TextAcc, "Continuar", "Salir");
				}
				case 4:
				{
					if (RevisarDinero(playerid, 5))
					{
						new objeto = 6;
						if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
						if (InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 1;}
						else if (InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
						ActualizarManos(playerid);
						GivePlayerCash(playerid, -5, "compra obj6");
						RestarNegocio(id, 5);
					}
				}
				case 5:
				{
					if (RevisarDinero(playerid, 8))
					{
						new objeto = 71;
						if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
						if (InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 4;}
						else if (InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 4;}
						ActualizarManos(playerid);
						GivePlayerCash(playerid, -8, "compra obj71");
						RestarNegocio(id, 8);
					}
				}
				case 6:
				{
					if (RevisarDinero(playerid, 50))
					{
						new objeto = 50;
						if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
						if (InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 1;}
						else if (InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
						ActualizarManos(playerid);
						GivePlayerCash(playerid, -50, "compra obj50");
						RestarNegocio(id, 50);
					}
				}
				case 7:
				{
					if (RevisarDinero(playerid, 75))
					{
						Loop(x, 9, 0) if (InfoJugador[playerid][jBolsillo][x] == 0)
						{
							InfoJugador[playerid][jBolsillo][x] = 5;
							InfoJugador[playerid][jBolsilloCant][x] = 1;
							_Mensaje(playerid, 2, "0", "Has comprado un bate baseball.");
							GivePlayerCash(playerid, -75, "compra obj5");
							RestarNegocio(id, 75);
							new grs[32];
							format(grs, sizeof grs, "Bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid][jID], InfoJugador[playerid][jBolsillo][x]);
							format(grs, sizeof grs, "Cantidad_bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid][jID], InfoJugador[playerid][jBolsilloCant][x]);
							return 1;
						}
						SendClientMessage(playerid, -1, "No tienes espacio donde guardar el bate baseball.");
					}
				}
				case 8:
				{
					if (RevisarDinero(playerid, 25))
					{
						Loop(x, 9, 0) if (InfoJugador[playerid][jBolsillo][x] == 0)
						{
							InfoJugador[playerid][jBolsillo][x] = 127;
							InfoJugador[playerid][jBolsilloCant][x] = 1;
							_Mensaje(playerid, 2, "0", "Has comprado un cuchillo.");
							GivePlayerCash(playerid, -25, "compra obj25");
							RestarNegocio(id, 25);
							new grs[32];
							format(grs, sizeof grs, "Bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid][jID], InfoJugador[playerid][jBolsillo][x]);
							format(grs, sizeof grs, "Cantidad_bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid][jID], InfoJugador[playerid][jBolsilloCant][x]);
							return 1;
						}
						SendClientMessage(playerid, -1, "No tienes espacio donde guardar el cuchillo.");
					}
				}
			}
			return 1;
		}
        case D_FERRETERIA2:
		{
			if (!response) return 1;
			new id = EnNegocio(playerid);
			if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
			if (GetPlayerCash(playerid) < 25) return ShowInfoForPlayer(playerid, "No tienes suficiente dinero.", 2000);
			if (InfoJugador[playerid][aModelo][listitem] != 0) return SendClientMessageEx(playerid, 0xccccccff, "* Tienes la ranura %d ocupada.", listitem);
			InfoJugador[playerid][aModelo][listitem] = 19904;
			InfoJugador[playerid][aHueso][listitem] = 2;
			InfoJugador[playerid][aPosicionX][listitem] = 0.0;
			InfoJugador[playerid][aPosicionY][listitem] = 0.0;
			InfoJugador[playerid][aPosicionZ][listitem] = 0.0;
			InfoJugador[playerid][aRotacionX][listitem] = 0.0;
			InfoJugador[playerid][aRotacionY][listitem] = 0.0;
			InfoJugador[playerid][aRotacionZ][listitem] = 0.0;
			InfoJugador[playerid][aEscalaX][listitem] = 1;
			InfoJugador[playerid][aEscalaY][listitem] = 1;
			InfoJugador[playerid][aEscalaZ][listitem] = 1;
			ActualizarToy(playerid, listitem);
			format(string, sizeof string, "Compraste un chaleco naranja por $25 (ranura %d). Editalo /accesorios.", listitem);
			_Mensaje(playerid, 2, "0", string);
			GivePlayerCash(playerid, -25, "chaleco naranja");
			RestarNegocio(id, 25);
			return 1;
		}
				 case 2323:
		{
			if(strlen(inputtext) < 5) return ShowPlayerDialog(playerid, 2323, DIALOG_STYLE_INPUT, "Actualizacion de {fff000}correo!", "{FFFFFF}Minimo {FF0000}5 {FFFFFF}caracteres para el registro del correo.", "Continuar", "Cancelar");
			if(strfind(inputtext, "@", true) == -1) return ShowPlayerDialog(playerid, 2323, DIALOG_STYLE_INPUT, "Actualizacion de {fff000}correo!", "{FFFFFF}Formato {FF0000}INCORRECTO{FFFFFF}, por favor ingresa un correo real.", "Continuar", "Cancelar");
			if(strfind(inputtext, ".", true) == -1) return ShowPlayerDialog(playerid, 2323, DIALOG_STYLE_INPUT, "Actualizacion de {fff000}correo!", "{FFFFFF}Formato {FF0000}INCORRECTO{FFFFFF}, por favor ingresa un correo real.", "Continuar", "Cancelar");

			new query[256];
			mysql_format(DBngrp, query, sizeof query, "SELECT * FROM cuentas WHERE Email = '%s'", inputtext);
			new Cache:result;
			result = mysql_query(DBngrp, query);
			if (cache_num_rows() > 0) {
			ShowPlayerDialog(playerid, 2323, DIALOG_STYLE_INPUT, "Actualizacion de {fff000}correo!", "{FFFFFF}Este correo {FF0000}ya esta en uso {FFFFFF}, por favor elige otro.", "Continuar", "Cancelar");
			return 1;
			}
			cache_delete(result);
		    if (!response) return ShowPlayerDialog(playerid, 2323, DIALOG_STYLE_INPUT, "Actualizacion de {fff000}correo!", "{FFFFFF}Por favor ingresa un correo {FF0000}REAL{FFFFFF} esto servir? \nen caso de perdida de cuenta.", "Continuar", "Cancelar");
			else
			{
				alm(InfoJugador[playerid][jEmail], inputtext);
				guardar_string_mysql("cuentas", "Email", InfoJugador[playerid][jID], InfoJugador[playerid][jEmail]);
				SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}Estableciste como tu correo como %s.", inputtext);
				return 1;
			}
		}
		case 15902:
		{
		    if(response)
		    {
		        new string2[550*5];
		        switch(listitem)
		        {
		            case 3:
		            {
		                format(string2, sizeof(string2), "{6ec072}Feliz\n\
		                {d15032}Molesto\n\
		                {72dddc}Amigable\n\
		                {ddca72}Honesto\n\
		                {e763e5}Hermoso\n\
		                {63e91a}Musculoso\n\
		                {1a5ae9}Empresario");
		                ShowPlayerDialog(playerid, 15903, DIALOG_STYLE_LIST, "Configuracion - Estatico", string2, ">", ">");
		                return 1;
					}
					case 4:
					{
					    switch(InfoJugador[playerid][pUsaEstado])
					    {
					        case 0:
							{
								format(string2, sizeof(string2), "{FFFFFF}Ingresa el estado que desees para tu personaje");
								ShowPlayerDialog(playerid, 15904, DIALOG_STYLE_INPUT, "Configuracion - Personalizado", string2, ">", ">");
							}
					    	case 1:
							{
								format(string2, sizeof(string2), "{FFFFFF}Tu estado actual es: %s\n{FFFFFF}Ingresa el estado que desees para tu personaje", InfoJugador[playerid][jEstadoEstatico]);
								ShowPlayerDialog(playerid, 15904, DIALOG_STYLE_INPUT, "Configuracion - Personalizado", string, ">", ">");
							}
					    	case 2:
							{
								format(string2, sizeof(string2), "{FFFFFF}Tu estado actual es: %s\n{FFFFFF}Ingresa el estado que desees para tu personaje", InfoJugador[playerid][jEstadoPersonal]);
								ShowPlayerDialog(playerid, 15904, DIALOG_STYLE_INPUT, "Configuracion - Personalizado", string2, ">", ">");
							}
						}
					}
					case 5:
					{
					    ShowPlayerDialog(playerid, 15905, DIALOG_STYLE_LIST, "Configuracion - Estado actual", "Estatico\nPersonalizado", ">", ">");
					}
					case 6:
					{
					    ShowPlayerDialog(playerid, 15906, DIALOG_STYLE_LIST, "Configuracion - Estado visual", "Desactivado\nActivo", ">", ">");
					}
				}
			}
		}
		case 15903:
		{
			if (!response) return 1;
			switch (listitem)
			{
				case 0: alm(InfoJugador[playerid][jEstadoEstatico], "{6ec072}Feliz");
				case 1: alm(InfoJugador[playerid][jEstadoEstatico], "{d15032}Molesto");
				case 2: alm(InfoJugador[playerid][jEstadoEstatico], "{72dddc}Amigable");
				case 3: alm(InfoJugador[playerid][jEstadoEstatico], "{ddca72}Honesto");
				case 4: alm(InfoJugador[playerid][jEstadoEstatico], "{e763e5}Hermoso");
				case 5: alm(InfoJugador[playerid][jEstadoEstatico], "{63e91a}Musculoso");
				case 6: alm(InfoJugador[playerid][jEstadoEstatico], "{1a5ae9}Empresario");
			}
			InfoJugador[playerid][pUsaEstado] = 1;
			InfoJugador[playerid][pConEstado] = 1;
			guardar_string_mysql("cuentas", "EstadoEstatico", InfoJugador[playerid][jID], InfoJugador[playerid][jEstadoEstatico]);
			guardar_int_mysql("cuentas", "UsaEstado", InfoJugador[playerid][jID], InfoJugador[playerid][pUsaEstado]);
			guardar_int_mysql("cuentas", "ConEstado", InfoJugador[playerid][jID], InfoJugador[playerid][pConEstado]);
			SendClientMessageEx(playerid, 0xFFFF00FF, "Ahora tu estado sera %s{FFFF00}, lo veran todos los usuarios si lo tienes activo.", InfoJugador[playerid][jEstadoEstatico]);
			if (IsValidDynamic3DTextLabel(InfoJugador[playerid][jNameTag]))
			{
				DestroyDynamic3DTextLabel(InfoJugador[playerid][jNameTag]);
				InfoJugador[playerid][jNameTag] = Text3D:INVALID_3DTEXT_ID;
			}
			InfoJugador[playerid][jNameTag] = CreateDynamic3DTextLabel(InfoJugador[playerid][jEstadoEstatico], -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1);
			return 1;
		}
		case 15904:
		{
			if (!response) return 1;
			if (strlen(inputtext) > 60 || strlen(inputtext) < 0) { ShowInfoForPlayer(playerid, "No puedes usar mas de 60 caracteres en el estado.", 2000); return 1; }
			format(InfoJugador[playerid][jEstadoPersonal],120, "{a6c1c8}%s", inputtext);
			InfoJugador[playerid][pUsaEstado] = 2;
			InfoJugador[playerid][pConEstado] = 1;
			guardar_string_mysql("cuentas", "EstadoPersonal", InfoJugador[playerid][jID], InfoJugador[playerid][jEstadoPersonal]);
			guardar_int_mysql("cuentas", "UsaEstado", InfoJugador[playerid][jID], InfoJugador[playerid][pUsaEstado]);
			guardar_int_mysql("cuentas", "ConEstado", InfoJugador[playerid][jID], InfoJugador[playerid][pConEstado]);
			SendClientMessageEx(playerid, 0xFFFF00FF, "Ahora tu estado sera %s{FFFF00}, lo veran todos los usuarios si lo tienes activo.", InfoJugador[playerid][jEstadoPersonal]);
			if (IsValidDynamic3DTextLabel(InfoJugador[playerid][jNameTag]))
			{
				DestroyDynamic3DTextLabel(InfoJugador[playerid][jNameTag]);
				InfoJugador[playerid][jNameTag] = Text3D:INVALID_3DTEXT_ID;
			}
			InfoJugador[playerid][jNameTag] = CreateDynamic3DTextLabel(InfoJugador[playerid][jEstadoPersonal], -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1);
			return 1;
		}
		case 15905:
		{
		    if (!response) return 1;
		    switch(listitem)
			{
		    	case 0:
		        {
					InfoJugador[playerid][pUsaEstado] = 1;
					InfoJugador[playerid][pConEstado] = 1;
					guardar_int_mysql("cuentas", "UsaEstado", InfoJugador[playerid][jID], InfoJugador[playerid][pUsaEstado]);
					guardar_int_mysql("cuentas", "ConEstado", InfoJugador[playerid][jID], InfoJugador[playerid][pConEstado]);
					SendClientMessageEx(playerid, 0xFFFF00FF, "Ahora tu estado sera %s{FFFF00}, lo veran todos los usuarios si lo tienes activo.", InfoJugador[playerid][jEstadoEstatico]);
					if (IsValidDynamic3DTextLabel(InfoJugador[playerid][jNameTag]))
					{
						DestroyDynamic3DTextLabel(InfoJugador[playerid][jNameTag]);
						InfoJugador[playerid][jNameTag] = Text3D:INVALID_3DTEXT_ID;
					}
					InfoJugador[playerid][jNameTag] = CreateDynamic3DTextLabel(InfoJugador[playerid][jEstadoEstatico], -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1);
				}
				case 1:
				{
					InfoJugador[playerid][pUsaEstado] = 2;
					InfoJugador[playerid][pConEstado] = 1;
					guardar_int_mysql("cuentas", "UsaEstado", InfoJugador[playerid][jID], InfoJugador[playerid][pUsaEstado]);
					guardar_int_mysql("cuentas", "ConEstado", InfoJugador[playerid][jID], InfoJugador[playerid][pConEstado]);
					SendClientMessageEx(playerid, 0xFFFF00FF, "Ahora tu estado sera %s{FFFF00}, lo veran todos los usuarios si lo tienes activo.", InfoJugador[playerid][jEstadoPersonal]);
					if (IsValidDynamic3DTextLabel(InfoJugador[playerid][jNameTag]))
					{
						DestroyDynamic3DTextLabel(InfoJugador[playerid][jNameTag]);
						InfoJugador[playerid][jNameTag] = Text3D:INVALID_3DTEXT_ID;
					}
					InfoJugador[playerid][jNameTag] = CreateDynamic3DTextLabel(InfoJugador[playerid][jEstadoPersonal], -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1);
				}
			}
			return 1;
		}
		case 15906:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
						if (IsValidDynamic3DTextLabel(InfoJugador[playerid][jNameTag]))
						{
							DestroyDynamic3DTextLabel(InfoJugador[playerid][jNameTag]);
							InfoJugador[playerid][jNameTag] = Text3D:INVALID_3DTEXT_ID;
						}
						InfoJugador[playerid][pUsaEstado] = 0;
						InfoJugador[playerid][pConEstado] = 0;
						guardar_int_mysql("cuentas", "UsaEstado", InfoJugador[playerid][jID], InfoJugador[playerid][pUsaEstado]);
						guardar_int_mysql("cuentas", "ConEstado", InfoJugador[playerid][jID], InfoJugador[playerid][pConEstado]);
						SendClientMessage(playerid, 0xFFFF00FF, "Tu estado fue deshabilitado, nadie mas lo podra ver.");
					}
					case 1:
					{
						InfoJugador[playerid][pConEstado] = 1;
						if (IsValidDynamic3DTextLabel(InfoJugador[playerid][jNameTag]))
						{
							DestroyDynamic3DTextLabel(InfoJugador[playerid][jNameTag]);
							InfoJugador[playerid][jNameTag] = Text3D:INVALID_3DTEXT_ID;
						}
						if (InfoJugador[playerid][pUsaEstado] == 1) { InfoJugador[playerid][jNameTag] = CreateDynamic3DTextLabel(InfoJugador[playerid][jEstadoEstatico], -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1); }
						if (InfoJugador[playerid][pUsaEstado] == 2) { InfoJugador[playerid][jNameTag] = CreateDynamic3DTextLabel(InfoJugador[playerid][jEstadoPersonal], -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1); }
						guardar_int_mysql("cuentas", "UsaEstado", InfoJugador[playerid][jID], InfoJugador[playerid][pUsaEstado]);
						guardar_int_mysql("cuentas", "ConEstado", InfoJugador[playerid][jID], InfoJugador[playerid][pConEstado]);
					}
				}
			}
		}
		case 4378:
		{
			if (!response) return 1;
			new Float: uwuX, Float: uwuY, Float: uwuZ, Float: uwuR, acess = 0;
			if (rent_vehicle_id[playerid] != INVALID_VEHICLE_ID) return ShowInfoForPlayer(playerid, "Ya has alquilado un transporte.", 2000);
			if (GetPlayerCash(playerid) < 200) { ShowInfoForPlayer(playerid, "No tienes suficiente dinero.", 2000); return 1; }
			if (_enPos(playerid, 2.5, 1155.0530,-1734.1528,13.7734)) { uwuX = 1153.0483, uwuY = -1738.0815, uwuZ = 13.5093, uwuR = 266.9287; acess = 1; }
			else if (_enPos(playerid, 2.5, 1814.5594,-1876.3534,13.5781)) { uwuX = 1813.7972, uwuY = -1889.9381, uwuZ = 13.4141, uwuR = 271.3156; acess = 1; }
			else if (_enPos(playerid, 2.5, 2407.2253,-1530.8224,23.9922)) { uwuX = 2405.8953, uwuY = -1541.4404, uwuZ = 24.0000, uwuR = 273.1956; acess = 1; }
			else if (_enPos(playerid, 2.5, 1212.4705,-1327.8193,13.5601)) { uwuX = 1197.3756, uwuY = -1327.7072, uwuZ = 13.3984, uwuR = 179.5315; acess = 1; }
			else if (_enPos(playerid, 2.5, 515.4665,138.4498,24.1811)) { uwuX = 519.9038, uwuY = 128.5036, uwuZ = 23.8462, uwuR = 183.3150; acess = 1; }
			else if (_enPos(playerid, 2.5, 2407.7251,-2096.6748,13.5469)) { uwuX = 2415.8308, uwuY = -2111.2092, uwuZ = 13.3478, uwuR = 0.0599; acess = 1; }
			else if (_enPos(playerid, 2.5, 1870.0323,-1178.6909,23.8281)) { uwuX = 1863.7260, uwuY = -1171.0874, uwuZ = 23.6563, uwuR = 170.1781; acess = 1; }
			else if (_enPos(playerid, 2.5, 1083.5105,1367.4147,10.8203)) { uwuX = 1083.9707, uwuY = 1370.9873, uwuZ = 10.6719, uwuR = 90.3244; acess = 1; }
			else if (_enPos(playerid, 2.5, 1641.9050,825.2701,6.8314)) { uwuX = 1641.3993, uwuY = 831.3016, uwuZ = 6.7415, uwuR = 270.4693; acess = 1; }
			else if (_enPos(playerid, 2.5, 2084.9177,883.6021,7.3590)) { uwuX = 2080.1536, uwuY = 883.9470, uwuZ = 7.3723, uwuR = 2.9504; acess = 1; }
			else if (_enPos(playerid, 2.5, 2112.7393,2005.6913,10.8203)) { uwuX = 2119.6404, uwuY = 2005.0994, uwuZ = 10.6719, uwuR = 181.8656; acess = 1; }
			else if (_enPos(playerid, 2.5, 2306.9006,2406.0198,10.8203)) { uwuX = 2310.2378, uwuY = 2410.5503, uwuZ = 10.6719, uwuR = 271.4797; acess = 1; }
			else if (_enPos(playerid, 2.5, 1625.8264,1866.6997,10.8203)) { uwuX = 1625.8352, uwuY = 1870.5369, uwuZ = 10.6719, uwuR = 271.8633; acess = 1; }
			else if (_enPos(playerid, 2.5, 1778.6791,1420.3652,6.8552)) { uwuX = 1781.1704, uwuY = 1411.4104, uwuZ = 6.7797, uwuR = 179.4761; acess = 1; }
			else if (_enPos(playerid, 2.5, 1436.2965,-2277.9526,13.5469)) { uwuX = 1432.5704, uwuY = -2275.2085, uwuZ = 13.3828, uwuR = 351.1393; acess = 1; }
			if (acess == 0) return 1;
			new carid = CreateVehicle(462, uwuX, uwuY, uwuZ, uwuR, 1, 1, 60);
			rent_vehicle_id[playerid] = carid;
			vehicle_rent_owner[carid] = playerid;
			veh_info[carid][vFuel] = 0.0;
			veh_info[carid][vSost] = 100;
			veh_info[carid][vStatus] = 2;
			GasolinaInicialVeh[carid] = 100;
			PutPlayerInVehicleEx(playerid, carid, 0);
			SetVehicleParamsEx(carid, 1, 0, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Has alquilado una nueva moto faggio, por 200$.");
			GivePlayerCash(playerid, -200, "alquiler faggio");
			return 1;
		}
		case 4379:
		{
		    new string2[550*3];
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                format(string2, sizeof(string2), "{ea2c2c}CIWI: {FFFFFF}Bienvenido chico/a, te explicare un poco sobre nuestro sistema de facciones.\n\
		                {FFFFFF}El primer paso a realizar es /facciones, podras ver nuestras facciones activas al momento.\n\
		                Como segundo paso tendras que conocer el servidor, porque hasta que seas nivel 2 no podras ingresar a una faccion.\n\
	                    Ahora me imagino que quieres saber donde estas ubicadas, cierto?\n\
		                Muy bien!, te puedo ayudar, ingresa {cccccc}/GPS > Centrales{FFFFFF}.\n\
	                    Esperamos te sirva esta guia!.");
		                ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Bienvenido > North America ROLEPLAY Oficial", string2, ">", "");
					}
					case 1:
					{
					    format(string2, sizeof(string2), "{FFB600}Banco North America ROLEPLAY Oficial: {FFFFFF}Hola, este es un anuncio de nuestro director bancario {cccccc}CIWI\n\
					    {FFFFFF}Es muy importante que tengas una cuenta bancaria, ya que sin esto no podras recibir tus Pagos Diarios (PayDay), ademas\n\
					    de que no podras recibir transferencias bancarias y no podras guardar dinero y ganar interes en el banco.\n\n\
					    Deseas abrir una cuenta ahora, verdad?\n\
					    Lo sabia, es momento de usar tu {cccccc}/GPS > Lugares importantes\n\
					    {FFFFFF}Marca el banco mas cercano, ve y podras abrir tu cuenta bancaria Suerte!");
					    ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Bienvenido > North America ROLEPLAY Oficial", string2, ">", "");
					}
					case 2:
					{
					    format(string2, sizeof(string2), "{FFFF00}CIWI: {FFFFFF}Eres nuevo/a perfecto, te voy a enseñar como usar tu sistema de bolsillos personal.\n\
					    Lo primero que debes saber, es lo siguiente:\n\
					        - No usaras o veras un arma facilmente\n\
					        - Los telefonos, GPS, armamentos, accesorios. Es un solo sistema automatizado\n\
						Vale ya que tienes este conocimiento, te mostraremos tus accesos al panel de objetos o tus bolsillos\n\
						Primero paso: {cccccc}/bolsillos {FFFFFF}aqui podras ver todo lo que contiene tu personaje guardado\n\
						Segundo paso: {cccccc}/guardari o /guardard {ffffff}es importante no tener todo a la vista de los demas, con esos comandos podras guardarlos\n\n\
						Conforme vayas aumentando de nivel, comenzaras a entender mas esto, tambien puedes ver {ffff00}/ayuda > bolsillos");
						ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Bienvenido > North America ROLEPLAY Oficial", string2, ">", "");
					}
					case 3:
					{
					    format(string2, sizeof(string2), "{00cc00}CIWI: {FFFFFF}Hola, soy la persona para enseñarte como trabajar\n\
					    Lo primero que debes hacer es usar tu {cccccc}/GPS > Trabajos\n\
					    {FFFFFF}Ahi deberas ubicar de que quieres trabajar, todos los trabajos menos los ilegales estan disponibles para ti\n\
					    Te preguntaras, como llego hasta ese lugar?\n\n\
					    Ves la gaceta en frente de ti?\n\
					    Se que la ves, vamos no me hagas ir hasta alla y enseñarte\n\
					    Perfecto ya que la viste, es un punto de renta de faggio ve y consigue una, luego podras ir hasta donde este el trabajo.\n\
					    Suerte, espero te sirva esta guia.");
					    ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Bienvenido > North America ROLEPLAY Oficial", string2, ">", "");
					}
					case 4:
					{
					    format(string2, sizeof(string2), "{00cc00}CIWI: {FFFFFF}¡Holis!, creen que soy la persona para enseñarte de esto\n\
					    Lo primero que debes saber es que si tienes un vehiculo tenemos talleres mecanicos por toda la ciudad\n\
					    Si, asi como te digo chico/a, tenemos muchos talleres!\n\n\
					    En estos talleres podras tunear, modificar, reparar y mucho mas\n\
					    Quieres encontrarlos?\n\n\
					    Muy bien usa {cccccc}/GPS > Negocios {FFFFFF}Selecciona cualquiera que tenga el nombre de taller en el dialogo\n\
					    Espero te sirva mucho esta guia!.");
					    ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Bienvenido > North America ROLEPLAY Oficial", string2, ">", "");
					}
				}
			}
		}
		case 4380:
		{
		    new string2[550*5];
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                format(string2, sizeof(string2), "{FFFFFF}Bienvenido/a, primero que todo debes unirte desde {008BFF}/trabajos\n\
		                {FFFFFF}Para iniciar debes usar el comando {ea2c2c}/crearmueble\n\
		                Luego debes recoger un tronco con el cual crearas los muebles\n\
		                Donde queda?, es facil a un costado del galpon podras ver un {ea2c2c}Pickup{FFFFFF}, solo debes dar click en el mismo\n\
		                Una vez hecho esto debes ir a una Mesa y hacer un mueble.\n\n\
		                Para terminar y recibir una paga solo debes usar {ea2c2c}/dmueble.");
		                ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Trabsjo > North America ROLEPLAY Oficial", string2, ">", "");
					}
					case 1:
		            {
		                format(string2, sizeof(string2), "{FFB600}Importante:\n\
		                {FFFFFF}Para que este trabajo funcione deben haber muebles disponibles en el stock\n\
		                Como rellenar los troncos para que funcione?, lo haces en el trabajo de Aserrador\n\
		                Puedes ubicarlo con {cccccc}/GPS > Trabajos");
		                ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Trabsjo > North America ROLEPLAY Oficial", string2, ">", "");
					}
					case 2:
					{
					    SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Sin ninguna implementacion de momento.");
					}
				}
			}
		}
		case 4381:
		{
		    new string2[550*5];
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                format(string2, sizeof(string2), "{FFFFFF}Bienvenido/a, primero que todo debes unirte desde {008BFF}/trabajos\n\
		               	{FFFFFF}Para comenzar a trabajar, necesitas un Maso\n\
		                Puedes conseguir uno justo en la entrada con el comando {ffff00}/pedirmaso {FFFFFF}una vez lo tengas\n\
		                Solo debes entrar la Mina, buscar un mineral que puedas picar y Presionar {FFFF00}'F' {FFFFFF}y empezaras\n\
		                Una vez hecho esto, luego de unos segundos debes entregar la Roca que te haya dado en la procesadora\n\
		                El pago es automatico, y lo consigues al presionar {FFFF00}'ALT'{FFFFFF} en la procesadora.");
		                ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Trabajos > North America ROLEPLAY Oficial", string2, ">", "");
					}
					case 1:
					{
					    format(string2, sizeof(string2), "{FFB600}Importante:\n\
		                {FFFFFF}Segun vayas aumentando de nivel en el trabajo ({FFFF00}Habilidad{ffffff}) la paga aumentara automaticamente\n\
		                Solo necesitas mejorarla con el comando {FFFF00}/mejorar minero\n\
		                {FFFFFF}Esperamos que esta guia te sirva.");
		                ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Trabajos > North America ROLEPLAY Oficial", string2, ">", "");
					}
					case 2:
					{
					    SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Sin ninguna implementacion de momento.");
					}
				}
			}
		}
		case 4382:
		{
		    new string2[550*5];
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                format(string2, sizeof(string2), "{FFFFFF}Bienvenido/a, primero que todo debes unirte desde {008BFF}/trabajos\n\
						{FFFFFF}Te explicare un poco de que trata el trabajo {FFFF00}Carguero\n\
		                Debes tomar primeramente el trabajo, luego usar {FFFF00}/empezarcarga{FFFFFF} tendras que tomar cajas\n\
		                Y estas llevarlas hasta el vagon del tren, y esto continuamente.\n\n\
		                Una vez quieras terminar de trabajar solamente debes usar {ffff00}/dcargar");
		                ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Trabajos > North America ROLEPLAY Oficial", string2, ">", "");
              		}
					case 1:
					{
					    format(string2, sizeof(string2), "{FFB600}Importante:\n\
					    {FFFFFF}Mientras vayas trabajando iras aumentando tu nivel y asi mismo conseguiras mas dinero.\n\
					    Deberas de mejorar cada que tu ({FFFF00}/habilidad{FFFFFF}) llegue al maximo y es con el comando {ffff00}/mejorar carguero\n\
					    {FFFFFF}Esperamos que esta guia te funcione y sea de tu agrado.");
					    ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Trabajos > North America ROLEPLAY Oficial", string2, ">", "");
					}
					case 2:
					{
					    SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Sin ninguna implementacion de momento.");
					}
				}
			}
		}
		case 4383:
		{
		    new string2[550*5];
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                format(string2, sizeof(string2), "{FFFFFF}Bienvenido/a, primero que todo debes unirte desde {008BFF}/trabajos\n\
						{FFFFFF}Te explicare un poco de que trata el trabajo {FFFF00}Basurero\n\
		                {FFFFFF}Debes tomar primeramente el trabajo, el cual lo haces mediante /trabajos > ''{FFFF00}Basurero{FFFFFF}''\n\
		                Luego le daras a {FFFF00}UNIRSE {FFFFFF}de inmediato podras subirte a un camion, tendras que trabajar solo unicamente.\n\
		               	Una vez hecho esto podras comenzar a buscar y recoger la basura desde el camion en toda la ciudad de Las Venturas.");
		                ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Trabajos > North America ROLEPLAY Oficial", string2, ">", "");
              		}
					case 1:
					{
					    new dialogShow[2056];
					    strcat(dialogShow, "{008BFF}Basurero:\n\n");
						strcat(dialogShow, "{CCCCCC}Para iniciar el trabajo, utiliza {008BFF}/basurero{CCCCCC} dentro de un camion de basura,\n");
						strcat(dialogShow, "{CCCCCC}se te marcara en el radar los puntos determinados en las venturas para recoger basura.\n\n");
						strcat(dialogShow, "{CCCCCC}Este trabajo cuenta con {008BFF}/habilidad{CCCCCC}.\n");
						Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
					}
					case 2:
					{
					    SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Sin ninguna implementacion de momento.");
					}
				}
			}
		}
		case 4384:
		{
		    new string2[550*5];
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                format(string2, sizeof(string2), "{FFFFFF}Bienvenido/a, primero que todo debes unirte desde {008BFF}/trabajos\n\
		                {FFFFFF}Te explicare un poco de que trata el trabajo {FFFF00}Camionero\n\
		                {FFFFFF}Lo primero que debes saber de este trabajo es que necesitas un Camion, el cual debes pedirlo con el comando {FFFF00}/vehiculo\n\
		                {FFFFFF}Una vez tengas el camion, solamente debes usar el comando {FFFF00}/transportar {FFFFFF}para elegir una ruta y cargamento.\n\n\
		                La paga de este trabajo es automatica al entregar el camion de vuelta.");
		                ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Trabajos > North America ROLEPLAY Oficial", string2, ">", "");
              		}
					case 1:
					{
					    format(string2, sizeof(string2), "{FFB600}Importante:\n\
					    {FFFFFF}Si por caso extraño el camion se desaparece u/o roban, solamente debes usar /desbug\n\
					    El camion automaticamente se respawnera y tendras libertad de tomar uno nuevo\n\
					    Eres un jugador de {FFFF00}Android{FFFFFF}?\n\
					    Para evitar crash o lag al momento de estar en un recorrido, baja los graficos y recursos cerrando todas tus aplicaciones abiertas.");
					    ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Trabajos > North America ROLEPLAY Oficial", string2, ">", "");
					}
					case 2:
					{
					    SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Sin ninguna implementacion de momento.");
					}
				}
			}
		}
		case 4385:
		{
		    new string2[550*5];
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                format(string2, sizeof(string2), "{FFFFFF}Bienvenido/a, primero que todo debes unirte desde {008BFF}/trabajos\n\
						{FFFFFF}Te explicare un poco de que trata el trabajo {FFFF00}Aserrador\n\
		                {FFFFFF}Debes tomar primeramente el trabajo, el cual lo haces mediante /trabajos > ''{FFFF00}Aserrador{FFFFFF}''\n\
		                Luego le daras a {FFFF00}UNIRSE {FFFFFF}de inmediato podras usar {FFFF00}/creartronco{FFFFFF}.\n\
		               	Una vez hecho esto podras comenzar a talar los arboles de las cercanias.");
		                ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Trabajos > North America ROLEPLAY Oficial", string2, ">", "");
              		}
					case 1:
					{
					    new dialogShow[2056];
					    strcat(dialogShow, "{008BFF}Aserrador:\n\n");
						strcat(dialogShow, "{CCCCCC}Para iniciar el trabajo, utiliza {008BFF}/creartronco{CCCCCC}, una vez lleves una cantidad favorable de troncos,\n");
						strcat(dialogShow, "{CCCCCC}puedes cobrar tu pago con el comando {008BFF}/dtronco{CCCCCC}, entre mas troncos mayor sera tu pago.\n\n");
						strcat(dialogShow, "{CCCCCC}Este trabajo cuenta con {008BFF}/habilidad{CCCCCC}.\n");
						Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
					}
					case 2:
					{
					    SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Sin ninguna implementacion de momento.");
					}
				}
			}
		}
		case 4386:
		{
		    new string2[550*5];
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                format(string2, sizeof(string2), "{FFFFFF}Bienvenido/a, primero que todo debes unirte desde {008BFF}/trabajos\n\
						{FFFFFF}Te explicare un poco de que trata el trabajo {FFFF00}Recolector\n\
		                {FFFFFF}Debes tomar primeramente el trabajo, el cual lo haces mediante /trabajos > ''{FFFF00}Recolector{FFFFFF}''\n\
		                Luego le daras a {FFFF00}UNIRSE {FFFFFF}de inmediato podras usar {FFFF00}/recolectar{FFFFFF}.\n\
		               	Una vez hecho esto podras comenzar a tomar las manzanas de los arboles de las cercanias.");
		                ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Trabajos > North America ROLEPLAY Oficial", string2, ">", "");
              		}
					case 1:
					{
					    new dialogShow[2056];
					    strcat(dialogShow, "{008BFF}Recolector:\n\n");
						strcat(dialogShow, "{CCCCCC}Para iniciar el trabajo, utiliza {008BFF}/recolectar{CCCCCC} y comienza a recolectar las manzanas.\n\n");
						strcat(dialogShow, "{CCCCCC}Para finalizar el trabajo, utiliza {008BFF}/dejarrecolectar {cccccc}y recibiras la paga automaticamente.\n");
						Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
					}
					case 2:
					{
					    SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Sin ninguna implementacion de momento.");
					}
				}
			}
		}
        case 4387:
		{
		    new string2[550*5];
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                format(string2, sizeof(string2), "{FFFFFF}Bienvenido/a, primero que todo debes unirte desde {008BFF}/trabajos\n\
						{FFFFFF}Te explicare un poco de que trata el trabajo {FFFF00}Medico\n\
		                {FFFFFF}Debes tomar primeramente el trabajo, el cual lo haces mediante /trabajos > ''{FFFF00}Medico{FFFFFF}''\n\
		                Luego le daras a {FFFF00}UNIRSE {FFFFFF}de inmediato podras usar {FFFF00}/servicio{FFFFFF} para ver los llamados del 911.\n\
		               	Una vez hecho esto podras comenzar a usar /irmedico [id jugador] para atenderlos.");
		                ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Trabajos > North America ROLEPLAY Oficial", string2, ">", "");
              		}
					case 1:
					{
					    new dialogShow[2056];
					    strcat(dialogShow, "{008BFF}Medico:\n\n");
						strcat(dialogShow, "{CCCCCC}/servicio - {FFFFFF}ingresar en servicio y ver los llamados del 911\n");
						strcat(dialogShow, "{CCCCCC}/callsign - {FFFFFF}asignacion de unidad\n");
						strcat(dialogShow, "{CCCCCC}/m - {FFFFFF}megafono de unidad\n");
						strcat(dialogShow, "{CCCCCC}/reanimar\n");
						strcat(dialogShow, "{CCCCCC}/curar\n");
						strcat(dialogShow, "{CCCCCC}/sacarsangre\n");
						strcat(dialogShow, "{CCCCCC}/irmedico - {FFFFFF}aceptar llamadas de 911\n");
						strcat(dialogShow, "{CCCCCC}/irbombero - {FFFFFF}aceptar llamadas de 911 sobre incendios\n");
						strcat(dialogShow, "{CCCCCC}/verincendios\n");
						strcat(dialogShow, "{CCCCCC}Debes ir al interior del hospital e ir al casillero para equiparte.\n");
						Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
					}
					case 2:
					{
					    SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Sin ninguna implementacion de momento.");
					}
				}
			}
		}
		case 4388:
		{
		    new string2[550*5];
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                format(string2, sizeof(string2), "{FFFFFF}Bienvenido/a, primero que todo debes unirte desde {008BFF}/trabajos\n\
						{FFFFFF}Te explicare un poco de que trata el trabajo {FFFF00}Granjero\n\
		                {FFFFFF}Debes tomar primeramente el trabajo, el cual lo haces mediante /trabajos > ''{FFFF00}Granjero{FFFFFF}''\n\
		                Luego le daras a {FFFF00}UNIRSE {FFFFFF}de inmediato podras usar {FFFF00}/cosechar{FFFFFF} para comenzar a recolectar.\n\
						puedes cobrar tu pago con el comando {008BFF}/dcosechar{CCCCCC}, entre mas gramos mayor sera tu pago.");
		                ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "Trabajos > North America ROLEPLAY Oficial", string2, ">", "");
              		}
					case 1:
					{
					    new dialogShow[2056];
					    strcat(dialogShow, "{008BFF}Granjero:\n\n");
						strcat(dialogShow, "{CCCCCC}/cosechar - {FFFFFF}Puedes comenzar a recolectar en un tractor.\n");
						Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
					}
					case 2:
					{
					    SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Sin ninguna implementacion de momento.");
					}
				}
			}
		}
		case 5002:
		{
		    if (!response) return 1;
			if (InfoJugador[playerid][jApodoDiscord] == 0)
			{
				alm(InfoJugador[playerid][jApodoDiscordNombre], inputtext);
				SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}Has cambiado tu apodo de discord a %s.", inputtext);
				InfoJugador[playerid][jApodoDiscord] = 1;
				guardar_int_mysql("cuentas", "ApodoDiscord", InfoJugador[playerid][jID], InfoJugador[playerid][jApodoDiscord]);
				guardar_string_mysql("cuentas", "ApodoDiscordNombre", InfoJugador[playerid][jID], InfoJugador[playerid][jApodoDiscordNombre]);
				return 1;
			}
			InfoJugador[playerid][jApodoDiscord] = 0;
			guardar_int_mysql("cuentas", "ApodoDiscord", InfoJugador[playerid][jID], InfoJugador[playerid][jApodoDiscord]);
			return 1;
		}
		case 5102:
		{
			if(!response) return 1;
			switch(listitem) {
				case 0: {
						if(GetPVarType(playerid, "PartyArea")) {
							foreach(Player, i) {
								if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "PartyArea"))) { StopStream(i); }
							}
							DeletePVar(playerid, "PartyStation");
						}
						_Mensaje(playerid, 2, "0", "Has apagado tu equipo sonido.");
					}
				case 1: ShowPlayerDialog(playerid, 5103, DIALOG_STYLE_INPUT, "{D6E1EB}Url - Internet", "{FFFFFF}Inserta un Stream (www.offliberty.com) para reproducirlo", "Continuar", "Cancelar");
			}
		}
		case 5103:
			{
				if(response == 1) {
					if(isnull(inputtext)) { return _Mensaje(playerid, 2, "0", "No has introducido ningun URL."); }
					if(strlen(inputtext)) { _fiestaparty(playerid, inputtext); }
				}
			}
        case 6000:
		{
		    switch(listitem)
		    {
		        case 7:
		        {
		            ShowPlayerDialog(playerid, 6001, DIALOG_STYLE_INPUT, "West Coast > Modificar tiempo de conquista", "Ingresa un valor en segundos para el tiempo.", "300", "");
				}
			}
		}
		case 6001:
		{
		    if(!response) return cmd_serverstats(playerid);
		    if(response)
		    {
		        if (isnull(inputtext) || !isnumeric(inputtext)) return cmd_serverstats(playerid);
		        TiempoParaConquistar = strval(inputtext);
		        ActualizarEst();
		        new string2[210];
		        format(string2, sizeof(string2), "Info: {FFFFFF}Modificaste el tiempo necesario para conquista de territorios a %s.", generarTiempo(strval(inputtext)));
		        SendClientMessage(playerid, 0xccccccFF, string2);
		        format(string2, sizeof(string2), "[OOC] North America ROLEPLAY Oficial[101]: El tiempo requerido de conquista es ahora de %s", generarTiempo(strval(inputtext)));
    			SendClientMessageToAll(0xFFB600FF, string2);
			}
		}
		case 9001:
		{
		    new idjugador = GetPVarInt(playerid, "PersonaID");
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(InfoJugador[idjugador][jAdmin] > 0) return ShowInfoForPlayer(playerid, "El jugador tiene el nivel necesario para el comando.", 2000);
		                if(InfoJugador[idjugador][jRestriccion][0] == 1)
					    {
					        InfoJugador[idjugador][jRestriccion][0] = 0;
					        format(string, sizeof string, "Info: {FFFFFF}Le desactivaste el acceso /ir a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						else if(InfoJugador[playerid][jRestriccion][0] == 0)
						{
						    InfoJugador[idjugador][jRestriccion][0] = 1;
						    format(string, sizeof string, "Info: {FFFFFF}Le activaste el acceso /ir a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						guardar_int_mysql("cuentas", "Restriccion1", InfoJugador[idjugador][jID], InfoJugador[idjugador][jRestriccion][0]);
					}
					case 1:
		            {
		                if(InfoJugador[idjugador][jAdmin] > 2) return ShowInfoForPlayer(playerid, "El jugador tiene el nivel necesario para el comando.", 2000);
		                if(InfoJugador[idjugador][jRestriccion][1] == 1)
					    {
					        InfoJugador[idjugador][jRestriccion][1] = 0;
					        format(string, sizeof string, "Info: {FFFFFF}Le desactivaste el acceso /traer a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						else if(InfoJugador[playerid][jRestriccion][1] == 0)
						{
						    InfoJugador[idjugador][jRestriccion][1] = 1;
						    format(string, sizeof string, "Info: {FFFFFF}Le activaste el acceso /traer a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						guardar_int_mysql("cuentas", "Restriccion2", InfoJugador[idjugador][jID], InfoJugador[idjugador][jRestriccion][1]);
					}
					case 2:
		            {
		                if(InfoJugador[idjugador][jAdmin] > 0) return ShowInfoForPlayer(playerid, "El jugador tiene el nivel necesario para el comando.", 2000);
		                if(InfoJugador[idjugador][jRestriccion][2] == 1)
					    {
					        InfoJugador[idjugador][jRestriccion][2] = 0;
					        format(string, sizeof string, "Info: {FFFFFF}Le desactivaste el acceso /mutear a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						else if(InfoJugador[playerid][jRestriccion][2] == 0)
						{
						    InfoJugador[idjugador][jRestriccion][2] = 1;
						    format(string, sizeof string, "Info: {FFFFFF}Le activaste el acceso /mutear a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						guardar_int_mysql("cuentas", "Restriccion3", InfoJugador[idjugador][jID], InfoJugador[idjugador][jRestriccion][2]);
					}
					case 3:
		            {
		                if(InfoJugador[idjugador][jAdmin] >= 3) return ShowInfoForPlayer(playerid, "El jugador tiene el nivel necesario para el comando.", 2000);
		                if(InfoJugador[idjugador][jRestriccion][3] == 1)
					    {
					        InfoJugador[idjugador][jRestriccion][3] = 0;
					        format(string, sizeof string, "Info: {FFFFFF}Le desactivaste el acceso /banear a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						else if(InfoJugador[playerid][jRestriccion][3] == 0)
						{
						    InfoJugador[idjugador][jRestriccion][3] = 1;
						    format(string, sizeof string, "Info: {FFFFFF}Le activaste el acceso /banear a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						guardar_int_mysql("cuentas", "Restriccion4", InfoJugador[idjugador][jID], InfoJugador[idjugador][jRestriccion][3]);
					}
					case 4:
		            {
		                if(InfoJugador[idjugador][jAdmin] > 2) return ShowInfoForPlayer(playerid, "El jugador tiene el nivel necesario para el comando.", 2000);
		                if(InfoJugador[idjugador][jRestriccion][4] == 1)
					    {
					        InfoJugador[idjugador][jRestriccion][4] = 0;
					        format(string, sizeof string, "Info: {FFFFFF}Le desactivaste el acceso /ao a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						else if(InfoJugador[playerid][jRestriccion][4] == 0)
						{
						    InfoJugador[idjugador][jRestriccion][4] = 1;
						    format(string, sizeof string, "Info: {FFFFFF}Le activaste el acceso /ao a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						guardar_int_mysql("cuentas", "Restriccion5", InfoJugador[idjugador][jID], InfoJugador[idjugador][jRestriccion][4]);
					}
					case 5:
		            {
		                if(InfoJugador[idjugador][jAdmin] > 1) return ShowInfoForPlayer(playerid, "El jugador tiene el nivel necesario para el comando.", 2000);
		                if(InfoJugador[idjugador][jRestriccion][5] == 1)
					    {
					        InfoJugador[idjugador][jRestriccion][5] = 0;
					        format(string, sizeof string, "Info: {FFFFFF}Le desactivaste el acceso /jail a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						else if(InfoJugador[playerid][jRestriccion][5] == 0)
						{
						    InfoJugador[idjugador][jRestriccion][5] = 1;
						    format(string, sizeof string, "Info: {FFFFFF}Le activaste el acceso /jail a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						guardar_int_mysql("cuentas", "Restriccion6", InfoJugador[idjugador][jID], InfoJugador[idjugador][jRestriccion][5]);
					}
					case 6:
		            {
		                if(InfoJugador[idjugador][jAdmin] > 0) return ShowInfoForPlayer(playerid, "El jugador tiene el nivel necesario para el comando.", 2000);
		                if(InfoJugador[idjugador][jRestriccion][6] == 1)
					    {
					        InfoJugador[idjugador][jRestriccion][6] = 0;
					        format(string, sizeof string, "Info: {FFFFFF}Le desactivaste el acceso /kick a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						else if(InfoJugador[playerid][jRestriccion][6] == 0)
						{
						    InfoJugador[idjugador][jRestriccion][6] = 1;
						    format(string, sizeof string, "Info: {FFFFFF}Le activaste el acceso /kick a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						guardar_int_mysql("cuentas", "Restriccion7", InfoJugador[idjugador][jID], InfoJugador[idjugador][jRestriccion][6]);
					}
					case 7:
		            {
		                if(InfoJugador[idjugador][jAdmin] > 2) return ShowInfoForPlayer(playerid, "El jugador tiene el nivel necesario para el comando.", 2000);
		                if(InfoJugador[idjugador][jRestriccion][7] == 1)
					    {
					        InfoJugador[idjugador][jRestriccion][7] = 0;
					        format(string, sizeof string, "Info: {FFFFFF}Le desactivaste el acceso /desban a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						else if(InfoJugador[playerid][jRestriccion][7] == 0)
						{
						    InfoJugador[idjugador][jRestriccion][7] = 1;
						    format(string, sizeof string, "Info: {FFFFFF}Le activaste el acceso /desban a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						guardar_int_mysql("cuentas", "Restriccion8", InfoJugador[idjugador][jID], InfoJugador[idjugador][jRestriccion][7]);
					}
					case 8:
		            {
		                if(InfoJugador[idjugador][jAdmin] > 2) return ShowInfoForPlayer(playerid, "El jugador tiene el nivel necesario para el comando.", 2000);
		                if(InfoJugador[idjugador][jRestriccion][8] == 1)
					    {
					        InfoJugador[idjugador][jRestriccion][8] = 0;
					        format(string, sizeof string, "Info: {FFFFFF}Le desactivaste el acceso /vercuenta a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						else if(InfoJugador[playerid][jRestriccion][8] == 0)
						{
						    InfoJugador[idjugador][jRestriccion][8] = 1;
						    format(string, sizeof string, "Info: {FFFFFF}Le activaste el acceso /vercuenta a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						guardar_int_mysql("cuentas", "Restriccion9", InfoJugador[idjugador][jID], InfoJugador[idjugador][jRestriccion][8]);
					}
					case 9:
		            {
		                if(InfoJugador[idjugador][jAdmin] > 2) return ShowInfoForPlayer(playerid, "El jugador tiene el nivel necesario para el comando.", 2000);
		                if(InfoJugador[idjugador][jRestriccion][9] == 1)
					    {
					        InfoJugador[idjugador][jRestriccion][9] = 0;
					        format(string, sizeof string, "Info: {FFFFFF}Le desactivaste el acceso /vercoches a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						else if(InfoJugador[playerid][jRestriccion][9] == 0)
						{
						    InfoJugador[idjugador][jRestriccion][9] = 1;
						    format(string, sizeof string, "Info: {FFFFFF}Le activaste el acceso /vercoches a '%s'.", NombreRJugador(idjugador));
					        SendClientMessage(playerid, 0xccccccFF, string);
					        PanelAdministrativo(playerid, idjugador);
						}
						guardar_int_mysql("cuentas", "Restriccion10", InfoJugador[idjugador][jID], InfoJugador[idjugador][jRestriccion][9]);
					}
					case 10:
					{
					    InfoJugador[idjugador][jAdmin] = 0;
	                    InfoJugador[idjugador][jEncargado][0] = 0;
	                    InfoJugador[idjugador][jEncargado][1] = 0;
	                    InfoJugador[idjugador][jEncargado][2] = 0;
	                    InfoJugador[idjugador][jEncargado][3] = 0;
	                    InfoJugador[idjugador][jEncargado][4] = 0;
						guardar_int_mysql("cuentas", "JuegaleOwo", InfoJugador[idjugador][jID], InfoJugador[idjugador][jAdmin]);
						guardar_int_mysql("cuentas", "Encargado_1", InfoJugador[idjugador][jID], InfoJugador[idjugador][jEncargado][0]);
						guardar_int_mysql("cuentas", "Encargado_2", InfoJugador[idjugador][jID], InfoJugador[idjugador][jEncargado][1]);
						guardar_int_mysql("cuentas", "Encargado_3", InfoJugador[idjugador][jID], InfoJugador[idjugador][jEncargado][2]);
						guardar_int_mysql("cuentas", "Encargado_4", InfoJugador[idjugador][jID], InfoJugador[idjugador][jEncargado][3]);
						guardar_int_mysql("cuentas", "Encargado_5", InfoJugador[idjugador][jID], InfoJugador[idjugador][jEncargado][4]);
	                    format(string, sizeof string, "Administracion: %s(%d) ha expulsado a %s del staff.", NombreRJugador(playerid), playerid, NombreRJugador(idjugador));
	                    MensajeAdmin(string);
	                    format(string, sizeof string, "Info: {FFFFFF}El administrador %s te expulso del STAFF.", NombreRJugador(playerid));
	                    SendClientMessage(idjugador, 0xccccccFF, string);
	                    PanelAdministrativo(playerid, idjugador);
					}
					case 11:
					{
					    format(string, sizeof string, "El jugador %s fue expulsado por %s, Razon:[Panel administrativo]", NombreRJugador(playerid), NombreRJugador(idjugador));
						_MensajeOOC(0xAA3333FF, string);

						format(string, sizeof string, "Panel administrativo");
						_Expulsar(idjugador, 0, string);
						PanelAdministrativo(playerid, idjugador);
					}
					case 12:
					{
					    format(string, sizeof string, "El jugador %s ha sido bloqueado por %s, Razon:[Panel administrativo]",NombreRJugador(playerid), NombreRJugador(idjugador));
						_MensajeOOC(0xAA3333FF, string);
						InfoJugador[idjugador][jBaneado] = 20;
						guardar_int_mysql("cuentas", "Baneado", InfoJugador[idjugador][jID], InfoJugador[idjugador][jBaneado]);
						InfoJugador[idjugador][jBan_m] = FechaHoy();
						guardar_string_mysql("cuentas", "Ban_m", InfoJugador[idjugador][jID], InfoJugador[idjugador][jBan_m]);
						alm(InfoJugador[idjugador][jBan_c], NombreRJugador(playerid));
						guardar_string_mysql("cuentas", "Ban_c", InfoJugador[idjugador][jID], InfoJugador[idjugador][jBan_c]);
						alm(InfoJugador[idjugador][jBan_r], "Panel Administrativo");
						guardar_string_mysql("cuentas", "Ban_r", InfoJugador[idjugador][jID], InfoJugador[idjugador][jBan_r]);
						InfoJugador[idjugador][jAdmin] = 0;
						InfoJugador[idjugador][jEncargado][0] = 0;
			            InfoJugador[idjugador][jEncargado][1] = 0;
			            InfoJugador[idjugador][jEncargado][2] = 0;
			            InfoJugador[idjugador][jEncargado][3] = 0;
			            InfoJugador[idjugador][jEncargado][4] = 0;
						guardar_int_mysql("cuentas", "JuegaleOwo", InfoJugador[idjugador][jID], InfoJugador[idjugador][jAdmin]);
						guardar_int_mysql("cuentas", "Encargado_1", InfoJugador[idjugador][jID], InfoJugador[idjugador][jEncargado][0]);
						guardar_int_mysql("cuentas", "Encargado_2", InfoJugador[idjugador][jID], InfoJugador[idjugador][jEncargado][1]);
						guardar_int_mysql("cuentas", "Encargado_3", InfoJugador[idjugador][jID], InfoJugador[idjugador][jEncargado][2]);
						guardar_int_mysql("cuentas", "Encargado_4", InfoJugador[idjugador][jID], InfoJugador[idjugador][jEncargado][3]);
						guardar_int_mysql("cuentas", "Encargado_5", InfoJugador[idjugador][jID], InfoJugador[idjugador][jEncargado][4]);
						_Expulsar(idjugador, 0, "Panel administrativo");
						PanelAdministrativo(playerid, idjugador);
					}
					case 13:
					{
					    SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Crasheaste a esa persona del servidor.");
					    GameTextForPlayer(idjugador, "%%$#@1~555#",66666000, 6);
					}
				}
			}
		}
		case 9999:
		{
		    if (!response)
			{
				_Expulsar(playerid, 1, "Ingreso falso");
				return 1;
			}
		    if(response)
		    {
		        ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "North America ROLEPLAY Roleplay Oficial> Cargando datos", "{FFFFFF}Espera un momento, estamos cargando tus datos...", "Espere", "");
			}
		}
		//-
    }
    return 0;
}

// Easy Dialog

Dialog:Show0Computador(playerid, response, listitem, inputtext[])
{
	if (!response) return _ordenador(playerid);
	_ordenador(playerid);
	return 1;
}

Dialog:Show4Computador(playerid, response, listitem, inputtext[])
{
	if (!response) return _ordenador(playerid);
	if (!isnumeric(inputtext)) return Dialog_Show(playerid, Show4Computador, DIALOG_STYLE_INPUT, "{D6E1EB}Informacion de vehiculo		", "Introduzca el numero del vehiculo (/dl):\n\n{ff0000} ID invalida (coloco palabras)", "Buscar", "Cancelar");
	new vehicleid = strval(inputtext);
	new id = verificar_id_vehiculo(vehicleid), sTitulo[128], sInfo[512];
	if (id == -1) return Dialog_Show(playerid, Show4Computador, DIALOG_STYLE_INPUT, "{D6E1EB}Informacion de vehiculo		", "Introduzca el numero del vehiculo (/dl):\n\n{ff0000} ID invalida (coloco un ID inexistente o no tiene propietario)", "Buscar", "Cancelar");
	format(sInfo, sizeof sInfo, "{ffffff}Informacion:\n\nModelo: %s\nPropetario: %s\nMulta: $%d\n\n", GetNameVehicle(InfoVehiculo[id][vModelo]), InfoVehiculo[id][vPropietario], InfoVehiculo[id][vMulta]);
	format(sTitulo, sizeof sTitulo, "{b0b0b0}Matricula LS-%d		", InfoVehiculo[id][vID]);
	Dialog_Show(playerid, Show0Computador, DIALOG_STYLE_MSGBOX, sTitulo, sInfo, "Cerrar", "");
	return 1;
}

Dialog:ShowElectronica(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new id = EnNegocio(playerid);
	if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
	switch (listitem)
	{
		case 0:
		{
			if (GetPlayerCash(playerid) < 10) { SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes suficiente dinero ($10)."); return 1; }
			new objeto = 80;
			if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
			if (InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = InfoInventario[objeto][Capacidad];}
			else if (InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = InfoInventario[objeto][Capacidad];}
			SendClientMessageEx(playerid, 0x8080FFFF, "Compraste un telefono, comandos: /telefono");
			ActualizarManos(playerid);
			GivePlayerCash(playerid, -10, "compra telefono");
			RestarNegocio(id, 10);
		}
		case 1:
		{
			if (GetPlayerCash(playerid) < 12) { SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes suficiente dinero ($12)."); return 1; }
			new objeto = 38;
			if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
			if (InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto; InfoJugador[playerid][jManoDerechaCant] = 30; if (InfoInventario[objeto][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[objeto][IDArma], 30); } }
			else if (InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 30;}
			SendClientMessageEx(playerid, 0x8080FFFF, "Compraste una camara.");
			ActualizarManos(playerid);
			GivePlayerCash(playerid, -12, "compra camara");
			RestarNegocio(id, 12);
		}
		case 2:
		{
			if (GetPlayerCash(playerid) < 40) { SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes suficiente dinero ($40)."); return 1; }
			SendClientMessageEx(playerid, 0x8080FFFF, "Compraste un equipo sonido, comandos: /equiposonido /encender /requiposonido.");
			InfoJugador[playerid][jBoombox] = 1;
			guardar_int_mysql("cuentas", "Boombox", InfoJugador[playerid][jID], InfoJugador[playerid][jBoombox]);
			GivePlayerCash(playerid, -40, "compra boombox");
			RestarNegocio(id, 40);
		}
		case 3: // stereo
		{
			if (GetPlayerCash(playerid) < 100) { SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes suficiente dinero ($100)."); return 1; }
			new dialog[3084], gformat[370], iCount = 0;
			Loop(veh, totalvehiculos, 1) if (InfoVehiculo[veh][vModelo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoVehiculo[veh][vPropietario], true) == 0)
			{
				if (InfoVehiculo[veh][vEmbargo] != 0) format(gformat, sizeof gformat, "{FF0000}%s {C0C0C0}(embargado)\n", GetNameVehicle(InfoVehiculo[veh][vModelo]));
				else
				{
					if (InfoVehiculo[veh][vSpawned] != 0)
					{
						format(gformat, sizeof gformat, "{FF0000}%s {C0C0C0}(%d)\n", GetNameVehicle(InfoVehiculo[veh][vModelo]), InfoVehiculo[veh][vDL]);
					}
					else format(gformat, sizeof gformat, "{FF0000}%s {C0C0C0}(oculto)\n", GetNameVehicle(InfoVehiculo[veh][vModelo]));
				}
				strcat(dialog, gformat);
				//conteo
				new gformat2[64];
				format(gformat2, sizeof gformat2, "keybuylock%d", iCount);
				SetPVarInt(playerid, gformat2, veh);
				iCount++;
			}
			if (iCount == 0) return ShowInfoForPlayer(playerid, "No tienes ningun vehiculo a tu nombre.", 2000);
			Dialog_Show(playerid, BuyLockVehicle, DIALOG_STYLE_LIST, "Mis vehiculos", dialog, "Continuar", "Salir");
		}
		case 4:
		{
			if (GetPlayerCash(playerid) < 50) { SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes suficiente dinero ($50)."); return 1; }
			new objeto = 82;
			if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
			if (InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = InfoInventario[objeto][Capacidad];}
			else if (InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = InfoInventario[objeto][Capacidad];}
			SendClientMessageEx(playerid, 0x8080FFFF, "Compraste un radio portable, comandos: /togradio /frecuencia /pr.");
			ActualizarManos(playerid);
			GivePlayerCash(playerid, -50, "compra radio portable");
			RestarNegocio(id, 50);
		}
	}
	return 1;
}

Dialog:BuyLockVehicle(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new id = EnNegocio(playerid);
	if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
	new gformat[40];
	format(gformat, sizeof gformat, "keybuylock%d", listitem);
	new veh = GetPVarInt(playerid, gformat);
	if (InfoVehiculo[veh][vSpawned] == 0) return ShowInfoForPlayer(playerid, "El vehiculo que seleccionaste esta oculto.", 2000);
	if (InfoVehiculo[veh][vModelo] == 0) return ShowInfoForPlayer(playerid, "El vehiculo que seleccionaste no posee un modelo.", 2000);
	if (InfoVehiculo[veh][vEmbargo] == 1) return ShowInfoForPlayer(playerid, "No se puede en un vehiculo confiscado.", 2000);
	if (EnMotos_Bicis(InfoVehiculo[veh][vDL])) return ShowInfoForPlayer(playerid, "No se puede colocar stereo de maletero a motos o bicis.", 2000);
	if (InfoVehiculo[veh][vStereo] == 1) return ShowInfoForPlayer(playerid, "Esto ya esta instalado en este vehiculo.", 2000);
	SendClientMessageEx(playerid, 0x8080FFFF, "Compraste un stereo, comandos: /stereo /estacion /apagarstereo");
	InfoVehiculo[veh][vStereo] = 1;
	guardar_int_mysql("vehiculos", "Stereo", InfoVehiculo[veh][vID], InfoVehiculo[veh][vStereo]);
	if (InfoJugador[playerid][jNivelVIP] == 0)
	{
		GivePlayerCash(playerid, -100, "stereo vehicle");
		RestarNegocio(id, 100);
	}
	else
	{
		GivePlayerCash(playerid, -75, "stereo vehicle VIP");
		RestarNegocio(id, 75);
		_Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $100, a ti te costo $75.");
	}
	return 1;
}

//

public OnPlayerClickPlayer(playerid, clickedplayerid, source) //seleccion tabulador jugador
{
    return 1;
}

public OnGameModeInit()
{
	

// Uncomment the line to enable debug mode sampvoice
    // SvDebug(SV_TRUE);

 //   gstream = SvCreateGStream(0xffff0000, "Global");
	//////////////////////////777777777777777
	djson_GameModeInit();
	AntiAmx();
	//mysql server samp
	DBngrp = mysql_connect(samp_host, samp_user, samp_password, samp_database);
	if (mysql_errno(DBngrp) != 0)
	{
    	print("No se pudo establecer la conexion a la base de datos.");
		SendRconCommand("exit");
    	return 1;
	}
	else
	{
    	print(" ");
    	print("CONEXION A LA BASE DE DATOS CON EXITO.");
    	print(" ");
	}

	//load server samp
	mysql_tquery(DBngrp, "SELECT * FROM `plantas` ORDER BY `ID` ASC", "CargarPlantas");				// (24/10/2020)
	mysql_tquery(DBngrp, "SELECT * FROM `vehiculos` ORDER BY `ID` ASC", "CargarVehiculos");
	mysql_tquery(DBngrp, "SELECT * FROM `referidos` ORDER BY `ID` ASC", "CargarReferidos");			// (27/10/2020)
	mysql_tquery(DBngrp, "SELECT * FROM `casas` ORDER BY `ID` ASC", "CargarCasas");                 // (02/11/2020)
	mysql_tquery(DBngrp, "SELECT * FROM `negocios` ORDER BY `ID` ASC", "CargarNegocios");			// (05/11/2020)
	mysql_tquery(DBngrp, "SELECT * FROM `muebles` ORDER BY `ID` ASC", "CargarMuebles");				// (02/11/2020)
	mysql_tquery(DBngrp, "SELECT * FROM `familias` ORDER BY `ID` ASC", "CargarFamilias");			// (27/11/2020)
	mysql_tquery(DBngrp, "SELECT * FROM `puertas` ORDER BY `ID` ASC", "CargarPuertas");				// (04/12/2020)
	mysql_tquery(DBngrp, "SELECT * FROM `incendios` ORDER BY `ID` ASC", "CargarIncendios");			// (05/01/2021)
	mysql_tquery(DBngrp, "SELECT * FROM `mercados` ORDER BY `ID` ASC", "CargarMercado");			// (05/01/2021)
	mysql_tquery(DBngrp, "SELECT * FROM `fabricas` ORDER BY `ID` ASC", "CargarFabricas");                          // (15/02/2021)
	mysql_tquery(DBngrp, "SELECT * FROM `cajeros` ORDER BY `ID` ASC", "CargarCajeros");				// (01/04/2021)
	mysql_tquery(DBngrp, "SELECT * FROM `territorios` ORDER BY `ID` ASC", "CargarTerritorios");		// (01/04/2021)
	mysql_tquery(DBngrp, "SELECT * FROM `estacionamientos` ORDER BY `ID` ASC", "Estacionamientos_Load", "");          // (15/02/2021)
	mysql_tquery(DBngrp, "SELECT * FROM `gasolineras` ORDER BY `ID` ASC", "CargarGasolineras");		// (08/04/2021)
	mysql_tquery(DBngrp, "SELECT * FROM `garajes` ORDER BY `ID` ASC", "CargarGarajes");				// (12/04/2021)
	mysql_tquery(DBngrp, "SELECT * FROM `graffitis` ORDER BY `ID` ASC", "CargarGraffitis");			// (23/04/2021)
	mysql_tquery(DBngrp, "SELECT * FROM `vehiculos_temporales` ORDER BY `ID` ASC", "CargarVehiculos_Temporales");
	mysql_tquery(DBngrp, "SELECT * FROM `mochilas` ORDER BY `ID` ASC", "CargarMochilas");				// (16/07/2022)

	CargarZonas(); // (26/04/2021)

	//mapa a?adiduras (29/04/2021)
	camioneros[0] = GangZoneCreate(2853.6669921875, 2104, 2969.6669921875, 2118);
	camioneros[1] = GangZoneCreate(2960, 2075, 3000, 2147);

	SanMusic = 0;
	UsePlayerPedAnims();

	//edicion de toys
	CreateObject(14865, 267.44769, 290.29041, 1000.14838,   0.00000, 0.00000, 0.00000);

	//Reinicio del sv
	TiempoReinicio = 0;
    Reinicio = 0;
	TiempoParaConquistar = 300;
    //? Configuracion
    SetGameModeText("RP - ESP");
	SendRconCommand("hostname North America Roleplay [PC-ANDROID]");
    SendRconCommand("weburl proximamente");
    SendRconCommand("mapname San andreas");
    SendRconCommand("rcon_password lmodica");
    SendRconCommand("language Español v1.0");
//	SendRconCommand("minconnectiontime 3000");
	SendRconCommand("ackslimit 99999");
	SendRconCommand("messageslimit 1000");
	SendRconCommand("messageholelimit 5000");
	SendRconCommand("conncookies 1");
	SendRconCommand("cookielogging 0");

	//? Ajustes
	SetWeather(clima);
    AllowInteriorWeapons(true);
    ShowPlayerMarkers(PLAYER_MARKERS_MODE_GLOBAL);
    EnableStuntBonusForAll(false);
    DisableInteriorEnterExits();
    ManualVehicleEngineAndLights();
    SetNameTagDrawDistance(20.0);

	//? Cargado de datos
	CargarObjetosAdmin();
    CargarStuff();
    CargarPeajes();
	CargarFacVeh();

	//? Model's
    SkinsHombre = LoadModelSelectionMenu("Modelos/SkinsHombre.txt");
    SkinsMujer = LoadModelSelectionMenu("Modelos/SkinsMujer.txt");
    AccesoriosVIP = LoadModelSelectionMenu("Modelos/AccesoriosVIP.txt");
    MueblesCasa = LoadModelSelectionMenu("Modelos/MueblesCasa.txt");
    MueblesNegocios = LoadModelSelectionMenu("Modelos/MueblesNegocios.txt");

	// BAILARINA INTRO
	// cmd_venderobjeto
	actor_venta[0] = CreateDynamicActor(15, 162.2607, -168.7453, 1.5781, 86.5148, true, 100.0, 0, 0);
	actor_venta[1] = CreateDynamicActor(28, 1297.5764, 391.8414, 19.5547, 40.6953, true, 100.0, 0, 0);
	// cmd_robarbanco
	//funcion banco tempre
	Loop(id, 5, 0)
	{
		Timer_Banco[id] = 0;
		Proceso_Banco[id] = 0;
		if (IsValidDynamic3DTextLabel(Label_Banco[id]))
		{
			DestroyDynamic3DTextLabel(Label_Banco[id]);
			Label_Banco[id] = Text3D:INVALID_3DTEXT_ID;
		}
		new gformat[190];
		format(gformat, sizeof gformat, "{A9D159}Banco %s\n{EBEBEB}Para empezar un robo usa: {008BFF}/robarbanco", GetNombreBanco(id));
		Label_Banco[id] = CreateDynamic3DTextLabel(gformat, -1, 825.1021, 10.0683, 1004.1457+1.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetBancoVW(id), 3);
	}
	Obj_Banco[0] = CreateDynamicObject(1536, 824.49475, 9.35855, 1003.18042,   0.00000, 0.00000, 90.00000, 4, 3);
	Obj_Banco[6] = CreateDynamicObject(1536, 824.49475, 9.35855, 1003.18042,   0.00000, 0.00000, 90.00000, 0, 3);
	Obj_Banco[12] = CreateDynamicObject(1536, 824.49475, 9.35855, 1003.18042,   0.00000, 0.00000, 90.00000, 2, 3);
	Obj_Banco[18] = CreateDynamicObject(1536, 824.49475, 9.35855, 1003.18042,   0.00000, 0.00000, 90.00000, 1, 3);
	Obj_Banco[24] = CreateDynamicObject(1536, 824.49475, 9.35855, 1003.18042,   0.00000, 0.00000, 90.00000, 16, 3);
	CreateDynamic3DTextLabel("Presiona tecla 'N' o '/tomarbolsa'", 0xCCCC00FF, 821.1219, 10.1087, 1004.1857+1.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 3);

	//negocio
	CreateDynamicObject(18009, 412.28436, -54.44561, 999.07080,   0.00000, 0.00000, -89.93999);
	CreateDynamicObject(18981, 413.15521, -51.14120, 1000.37079,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18981, 378.91949, -189.13831, 999.11432,   0.00000, 90.00000, 90.00000);
	//puntos de basura
	CreateDynamicObject(1344, 1079.05481, 1804.08740, 10.60980,   0.00000, 0.00000, -180.00000, 0, 0, -1, 550.0, 550.0);
	CreateDynamicObject(1331, 1736.49255, 2224.10596, 10.65927,   0.00000, 0.00000, -90.00000, 0, 0, -1, 550.0, 550.0);
	CreateDynamicObject(1236, 2309.12915, 2504.62109, 10.38899,   0.00000, 0.00000, 0.00000, 0, 0, -1, 550.0, 550.0);
	CreateDynamicObject(1336, 2518.35571, 1226.07117, 10.84402,   0.00000, 0.00000, -90.00000, 0, 0, -1, 550.0, 550.0);
	CreateDynamicObject(1227, 1626.88257, 1141.80945, 10.58503,   0.00000, 0.00000, 0.00000, 0, 0, -1, 550.0, 550.0);
	CreateDynamicObject(1334, 1139.06506, 1202.33679, 10.86350,   0.00000, 0.00000, -180.00000, 0, 0, -1, 550.0, 550.0);
    //? Vehiculos
	// vehiculos de trabajos:
     //- Camionero
	CamioneroVehicle[0] = AddStaticVehicleEx(413, 1983.9487,2263.3953,13.9490,179.4149, -1, -1, TIEMPO_RESPAWN);
	CamioneroVehicle[1] = AddStaticVehicleEx(413, 1988.3508,2263.2847,13.4687,179.8641, -1, -1, TIEMPO_RESPAWN);
	CamioneroVehicle[2] = AddStaticVehicleEx(413, 1993.3945,2263.1042,12.9226,179.6312, -1, -1, TIEMPO_RESPAWN);
	CamioneroVehicle[3] = AddStaticVehicleEx(413, 1998.0242,2263.2214,12.3985,179.7454, -1, -1, TIEMPO_RESPAWN);
	CamioneroVehicle[4] = AddStaticVehicleEx(413, 2002.6687,2263.3796,11.8868,178.6823, -1, -1, TIEMPO_RESPAWN);
	CamioneroVehicle[5] = AddStaticVehicleEx(413, 2006.9435,2263.4453,11.4054,178.9110, -1, -1, TIEMPO_RESPAWN);
	CamioneroVehicle[6] = AddStaticVehicleEx(413, 2007.9977,2241.1289,11.3001,89.3165, -1, -1, TIEMPO_RESPAWN);
	CamioneroVehicle[7] = AddStaticVehicleEx(413, 2007.9177,2245.7800,11.2986,88.3556, -1, -1, TIEMPO_RESPAWN);
	CamioneroVehicle[8] = AddStaticVehicleEx(413, 2007.9702,2250.1028,11.3027,90.8894, -1, -1, TIEMPO_RESPAWN);
	CamioneroVehicle[9] = AddStaticVehicleEx(413, 1995.8241,2227.0376,12.6486,358.1267, -1, -1, TIEMPO_RESPAWN);
	CamioneroVehicle[10] = AddStaticVehicleEx(456, 2009.1399,2229.4993,11.2569,359.2348, -1, -1, TIEMPO_RESPAWN);
	CamioneroVehicle[11] = AddStaticVehicleEx(456, 2001.3695,2229.0295,12.1231,4.5663, -1, -1, TIEMPO_RESPAWN);

	//basurero
	BasureroVehicle[0] = AddStaticVehicleEx(408, 1055.5443, 1355.7959, 11.4371, 182.0400, -1, -1, TIEMPO_RESPAWN);
	BasureroVehicle[1] = AddStaticVehicleEx(408, 1049.0100, 1356.1624, 11.4371, 182.0400, -1, -1, TIEMPO_RESPAWN);
	BasureroVehicle[2] = AddStaticVehicleEx(408, 1041.9611, 1355.8151, 11.4371, 182.0400, -1, -1, TIEMPO_RESPAWN);
	BasureroVehicle[3] = AddStaticVehicleEx(408, 1042.0098, 1329.8580, 11.4371, 311.1001, -1, -1, TIEMPO_RESPAWN);
	BasureroVehicle[4] = AddStaticVehicleEx(408, 1041.7112, 1337.7588, 11.4371, 311.1001, -1, -1, TIEMPO_RESPAWN);
	BasureroVehicle[5] = AddStaticVehicleEx(408, 1050.6675, 1311.3673, 11.4371, 311.1001, -1, -1, TIEMPO_RESPAWN);
	BasureroVehicle[6] = AddStaticVehicleEx(408, 1057.6517, 1299.1157, 11.4371, 348.7201, -1, -1, TIEMPO_RESPAWN);
	BasureroVehicle[7] = AddStaticVehicleEx(408, 1065.0405, 1299.5654, 11.4371, 348.7201, -1, -1, TIEMPO_RESPAWN);
	BasureroVehicle[8] = AddStaticVehicleEx(408, 1072.4602, 1304.2468, 11.4371, 366.7201, -1, -1, TIEMPO_RESPAWN);
	BasureroVehicle[9] = AddStaticVehicleEx(408, 1073.1210, 1320.4034, 11.4371, 365.1601, -1, -1, TIEMPO_RESPAWN);

	//- Granjero
    GranjeroVehicle[0] = AddStaticVehicleEx(531, -368.7332, -1451.6243, 25.8230, 87.9600, 44, 44, TIEMPO_RESPAWN);
    GranjeroVehicle[1] = AddStaticVehicleEx(531, -368.5662, -1447.5449, 25.8230, 87.9600, 44, 44, TIEMPO_RESPAWN);
    GranjeroVehicle[2] = AddStaticVehicleEx(531, -368.5672, -1443.6130, 25.8230, 87.9600, 44, 44, TIEMPO_RESPAWN);
    GranjeroVehicle[3] = AddStaticVehicleEx(531, -368.5800, -1439.5243, 25.8230, 87.9600, 44, 44, TIEMPO_RESPAWN);
    GranjeroVehicle[4] = AddStaticVehicleEx(531, -368.6263, -1435.2294, 25.8230, 87.9600, 44, 44, TIEMPO_RESPAWN);
    GranjeroVehicle[5] = AddStaticVehicleEx(531, -368.6034, -1430.9125, 25.8230, 87.9600, 44, 44, TIEMPO_RESPAWN);
    GranjeroVehicle[6] = AddStaticVehicleEx(531, -368.3646, -1426.6874, 25.8230, 87.9600, 44, 44, TIEMPO_RESPAWN);
    GranjeroVehicle[7] = AddStaticVehicleEx(531, -368.1512, -1422.7263, 25.8230, 87.9600, 44, 44, TIEMPO_RESPAWN);
    GranjeroVehicle[8] = AddStaticVehicleEx(531, -368.0165, -1418.4948, 25.8230, 87.9600, 44, 44, TIEMPO_RESPAWN);
    GranjeroVehicle[9] = AddStaticVehicleEx(531, -367.8882, -1413.8467, 25.8230, 87.9600, 44, 44, TIEMPO_RESPAWN);

	//Transportista
      //- Granjero

    ///text haciendas
    CreateDynamic3DTextLabel("Escribe abrir1", C_LIGHTBLUE, 994.7745,1207.6071,12.0172, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 3); 
	CreateDynamic3DTextLabel("Escribe abrir1", C_LIGHTBLUE, 1001.2709,1207.4661,10.8203, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 3); 
///////mapicon
	CreateDynamicMapIcon(2373.3213, -642.4605, 126.8000, 32, 0, 0, 0, -1, 600.0);
	CreateDynamicMapIcon(3441.6599, -1080.3800, 10.8000, 32, 0, 0, 0, -1, 600.0);
	CreateDynamicMapIcon(986.9995, 1342.8715, 11.0179, 32, 0, 0, 0, -1, 600.0);

	//Actores de interaccion
	actor_1 = CreateDynamicActor(72, 1439.9690,-2290.8269,13.5469,270.8463, true, 100.0, 0, 0);
	ApplyDynamicActorAnimation(actor_1, "PED", "IDLE_chat", 4.1, 1, 0, 0, 1, 1);
	CreateDynamicPickup(19133, 1, 1440.7760,-2290.7625,13.5469);
    CreateDynamic3DTextLabel("Acercate{FFFFFF}, te enseñare un poco sobre el servidor!\nPresiona {FFFF00}'H'", 0xFFFF00FF, 1440.7760,-2290.7625,13.5469,10.0);
    _MapIcon(1440.7760,-2290.7625,13.5469, 42);

    actor_2 = CreateDynamicActor(8, 1887.4268,-1868.8591,13.5543,189.4032, true, 100.0, 0, 0);
	ApplyDynamicActorAnimation(actor_2, "PED", "IDLE_chat", 4.1, 1, 0, 0, 1, 1);
	CreateDynamicPickup(19133, 1, 1887.6332,-1869.7506,13.5474);
    CreateDynamic3DTextLabel("Acercate{FFFFFF}, te enseñare un poco sobre {FFFF00}Carpintero{FFFFFF}\nPresiona {FFFF00}'H'", 0xFFFF00FF, 1887.6332,-1869.7506,13.5474,10.0);
    _MapIcon(1887.6332,-1869.7506,13.5474, 42);

    actor_3 = CreateDynamicActor(27, 609.3635,143.7215,9.2064,35.3118, true, 100.0, 0, 0);
	ApplyDynamicActorAnimation(actor_3, "PED", "IDLE_chat", 4.1, 1, 0, 0, 1, 1);
	CreateDynamicPickup(19133, 1, 608.8870,144.1534,9.2761);
    CreateDynamic3DTextLabel("Acercate{FFFFFF}, te enseñare un poco sobre {FFFF00}Minero{FFFFFF}\nPresiona {FFFF00}'H'", 0xFFFF00FF, 608.8870,144.1534,9.2761,10.0);
    _MapIcon(608.8870,144.1534,9.2761, 42);

    actor_4 = CreateDynamicActor(153, 2183.2053,-2253.0400,14.7717,175.4713, true, 100.0, 0, 0);
	ApplyDynamicActorAnimation(actor_4, "PED", "IDLE_chat", 4.1, 1, 0, 0, 1, 1);
	CreateDynamicPickup(19133, 1, 2183.1450,-2253.7949,14.7734);
    CreateDynamic3DTextLabel("Acercate{FFFFFF}, te enseñare un poco sobre {FFFF00}Carguero{FFFFFF}\nPresiona {FFFF00}'H'", 0xFFFF00FF, 2183.1450,-2253.7949,14.7734,10.0);
    _MapIcon(2183.1450,-2253.7949,14.7734, 42);

	actor_5 = CreateDynamicActor(16, 1047.7738,1313.2410,10.8203,294.4860, true, 100.0, 0, 0);
	ApplyDynamicActorAnimation(actor_5, "PED", "IDLE_chat", 4.1, 1, 0, 0, 1, 1);
	CreateDynamicPickup(19133, 1, 1048.5063,1313.6018,10.8203);
    CreateDynamic3DTextLabel("Acercate{FFFFFF}, te enseñare un poco sobre {FFFF00}Basurero{FFFFFF}\nPresiona {FFFF00}'H'", 0xFFFF00FF, 1048.5063,1313.6018,10.8203,10.0);
    _MapIcon(1048.5063,1313.6018,10.8203, 42);

    actor_6 = CreateDynamicActor(16, 1658.8839,759.3741,10.8203,79.7437, true, 100.0, 0, 0);
	ApplyDynamicActorAnimation(actor_6, "PED", "IDLE_chat", 4.1, 1, 0, 0, 1, 1);
	CreateDynamicPickup(19133, 1, 1658.4202,759.4255,10.8203);
    CreateDynamic3DTextLabel("Acercate{FFFFFF}, te enseñare un poco sobre {FFFF00}Camionero{FFFFFF}\nPresiona {FFFF00}'H'", 0xFFFF00FF, 1658.4202,759.4255,10.8203,10.0);
    _MapIcon(1658.4202,759.4255,10.8203, 42);

    actor_7 = CreateDynamicActor(31, -415.6027,-1759.3142,5.9064,213.1901, true, 100.0, 0, 0);
	ApplyDynamicActorAnimation(actor_7, "PED", "IDLE_chat", 4.1, 1, 0, 0, 1, 1);
	CreateDynamicPickup(19133, 1, -415.2265,-1759.8402,5.8383);
    CreateDynamic3DTextLabel("Acercate{FFFFFF}, te enseñare un poco sobre {FFFF00}Aserrador{FFFFFF}\nPresiona {FFFF00}'H'", 0xFFFF00FF, -415.2265,-1759.8402,5.8383,10.0);
    _MapIcon(-415.2265,-1759.8402,5.8383, 42);

    actor_8 = CreateDynamicActor(161, -1061.0811,-1206.3732,129.2188,271.2825, true, 100.0, 0, 0);
	ApplyDynamicActorAnimation(actor_8, "PED", "IDLE_chat", 4.1, 1, 0, 0, 1, 1);
	CreateDynamicPickup(19133, 1, -1060.5051,-1206.3903,129.2188);
    CreateDynamic3DTextLabel("Acercate{FFFFFF}, te enseñare un poco sobre {FFFF00}Recolector{FFFFFF}\nPresiona {FFFF00}'H'", 0xFFFF00FF, -1060.5051,-1206.3903,129.2188,10.0);
    _MapIcon(-1060.5051,-1206.3903,129.2188, 42);

    actor_9 = CreateDynamicActor(70, 1180.9049,-1330.4548,13.5848,271.1068, true, 100.0, 0, 0);
	ApplyDynamicActorAnimation(actor_9, "PED", "IDLE_chat", 4.1, 1, 0, 0, 1, 1);
	CreateDynamicPickup(19133, 1, 1181.4335,-1330.4563,13.5857);
    CreateDynamic3DTextLabel("Acercate{FFFFFF}, te enseñare un poco sobre {FFFF00}Medico{FFFFFF}\nPresiona {FFFF00}'H'", 0xFFFF00FF, 1181.4335,-1330.4563,13.5857,10.0);
    _MapIcon(1181.4335,-1330.4563,13.5857, 42);

    actor_10 = CreateDynamicActor(161, -382.9461,-1426.1866,26.3113,270.6165, true, 100.0, 0, 0);
	ApplyDynamicActorAnimation(actor_10, "PED", "IDLE_chat", 4.1, 1, 0, 0, 1, 1);
	CreateDynamicPickup(19133, 1, -375.9461,-1426.1866,26.3113);
    CreateDynamic3DTextLabel("Acercate{FFFFFF}, te enseñare un poco sobre {FFFF00}Granjero{FFFFFF}\nPresiona {FFFF00}'H'", 0xFFFF00FF, -382.2699,-1426.1146,26.1414,10.0);
    _MapIcon(-375.9461,-1426.1866,26.3113, 42);
    
    actor_10 = CreateDynamicActor(68, -2937.8564,-1281.2394,5002.7139,267.6065, true, 100.0, 5, 5);
	ApplyDynamicActorAnimation(actor_10, "GRAVEYARD", "prst_loopa", 4.1, 1, 0, 0, 1, 1);
	CreateDynamicPickup(1239, 1, -2937.8564,-1281.2394,5002.7139);
    CreateDynamic3DTextLabel("Iglesia de Los Santos\n{FFFFFF}Acercate y escribe {96BAF5}/casarse\n\n{FFFFFF}Costo: {00cc00}$3,500", 0x96BAF5FF, -2936.1179,-1281.1608,5002.7139,10.0);

	//anuncios
	TD_Uso[0] = 0;
	TD_Uso[1] = 0;

	// conquista
	Box_Conquista = TextDrawCreate(320.000000, 355.000000, "-");
	TextDrawLetterSize(Box_Conquista, 12.321674, 9.937778);
	TextDrawAlignment(Box_Conquista, 2);
	TextDrawColor(Box_Conquista, 167);
	TextDrawSetShadow(Box_Conquista, 0);
	TextDrawSetOutline(Box_Conquista, 0);
	TextDrawBackgroundColor(Box_Conquista, 255);
	TextDrawFont(Box_Conquista, 1);
	TextDrawSetProportional(Box_Conquista, 1);
	TextDrawSetShadow(Box_Conquista, 0);

	//inventario 12/04/2021 by edinsonwalker
	INV_base = TextDrawCreate(559.000000, 217.000000, "_");
	TextDrawFont(INV_base, 1);
	TextDrawLetterSize(INV_base, 0.595833, 23.450004);
	TextDrawTextSize(INV_base, 296.500000, 128.500000);
	TextDrawSetOutline(INV_base, 1);
	TextDrawSetShadow(INV_base, 0);
	TextDrawAlignment(INV_base, 2);
	TextDrawColor(INV_base, -1);
	TextDrawBackgroundColor(INV_base, 255);
	TextDrawBoxColor(INV_base, 210);
	TextDrawUseBox(INV_base, 1);
	TextDrawSetProportional(INV_base, 1);
	TextDrawSetSelectable(INV_base, 0);

	INV_2base = TextDrawCreate(463.000000, 295.000000, "_");
	TextDrawFont(INV_2base, 1);
	TextDrawLetterSize(INV_2base, 0.545833, 10.950005);
	TextDrawTextSize(INV_2base, 294.500000, 56.000000);
	TextDrawSetOutline(INV_2base, 1);
	TextDrawSetShadow(INV_2base, 0);
	TextDrawAlignment(INV_2base, 2);
	TextDrawColor(INV_2base, -1);
	TextDrawBackgroundColor(INV_2base, 255);
	TextDrawBoxColor(INV_2base, 210);
	TextDrawUseBox(INV_2base, 1);
	TextDrawSetProportional(INV_2base, 1);
	TextDrawSetSelectable(INV_2base, 0);

	INV_info = TextDrawCreate(463.000000, 293.000000, "Inventario");
	TextDrawFont(INV_info, 0);
	TextDrawLetterSize(INV_info, 0.425000, 1.650000);
	TextDrawTextSize(INV_info, 400.000000, 17.000000);
	TextDrawSetOutline(INV_info, 1);
	TextDrawSetShadow(INV_info, 0);
	TextDrawAlignment(INV_info, 2);
	TextDrawColor(INV_info, -1);
	TextDrawBackgroundColor(INV_info, 255);
	TextDrawBoxColor(INV_info, 0);
	TextDrawUseBox(INV_info, 1);
	TextDrawSetProportional(INV_info, 1);
	TextDrawSetSelectable(INV_info, 0);

	INV_2info = TextDrawCreate(486.000000, 358.000000, "-");
	TextDrawFont(INV_2info, 2);
	TextDrawLetterSize(INV_2info, 12.229171, -0.600000);
	TextDrawTextSize(INV_2info, 400.000000, 17.000000);
	TextDrawSetOutline(INV_2info, 1);
	TextDrawSetShadow(INV_2info, 0);
	TextDrawAlignment(INV_2info, 1);
	TextDrawColor(INV_2info, 0xea2c2cff);
	TextDrawBackgroundColor(INV_2info, 255);
	TextDrawBoxColor(INV_2info, 0);
	TextDrawUseBox(INV_2info, 1);
	TextDrawSetProportional(INV_2info, 1);
	TextDrawSetSelectable(INV_2info, 0);

	INV_IeD = TextDrawCreate(558.000000, 359.000000, "Izquierda_Espalda_Derecha");
	TextDrawFont(INV_IeD, 1);
	TextDrawLetterSize(INV_IeD, 0.275000, 1.149999);
	TextDrawTextSize(INV_IeD, 400.000000, 17.000000);
	TextDrawSetOutline(INV_IeD, 1);
	TextDrawSetShadow(INV_IeD, 0);
	TextDrawAlignment(INV_IeD, 2);
	TextDrawColor(INV_IeD, -741092353);
	TextDrawBackgroundColor(INV_IeD, 255);
	TextDrawBoxColor(INV_IeD, 0);
	TextDrawUseBox(INV_IeD, 1);
	TextDrawSetProportional(INV_IeD, 1);
	TextDrawSetSelectable(INV_IeD, 0);

	INV_exit = TextDrawCreate(436.000000, 379.000000, "X");
	TextDrawFont(INV_exit, 1);
	TextDrawLetterSize(INV_exit, 0.491665, 1.549999);
	TextDrawTextSize(INV_exit, 449.000000, 26.500000);
	TextDrawSetOutline(INV_exit, 1);
	TextDrawSetShadow(INV_exit, 0);
	TextDrawAlignment(INV_exit, 1);
	TextDrawColor(INV_exit, -1523963137);
	TextDrawBackgroundColor(INV_exit, 255);
	TextDrawBoxColor(INV_exit, 0);
	TextDrawUseBox(INV_exit, 1);
	TextDrawSetProportional(INV_exit, 1);
	TextDrawSetSelectable(INV_exit, 1);

	// configuracion de accesorio 21-10-2020
	TD_MenuToy[0] = TextDrawCreate(534.000000, 128.000000, "_");
	TextDrawFont(TD_MenuToy[0], 1);
	TextDrawLetterSize(TD_MenuToy[0], 0.600000, 6.199987);
	TextDrawTextSize(TD_MenuToy[0], 301.000000, 165.500000);
	TextDrawSetOutline(TD_MenuToy[0], 1);
	TextDrawSetShadow(TD_MenuToy[0], 0);
	TextDrawAlignment(TD_MenuToy[0], 2);
	TextDrawColor(TD_MenuToy[0], -1061109505);
	TextDrawBackgroundColor(TD_MenuToy[0], 255);
	TextDrawBoxColor(TD_MenuToy[0], 673720572);
	TextDrawUseBox(TD_MenuToy[0], 1);
	TextDrawSetProportional(TD_MenuToy[0], 1);
	TextDrawSetSelectable(TD_MenuToy[0], 0);

	TD_MenuToy[1] = TextDrawCreate(534.000000, 204.000000, "_");
	TextDrawFont(TD_MenuToy[1], 1);
	TextDrawLetterSize(TD_MenuToy[1], 0.600000, 6.199987);
	TextDrawTextSize(TD_MenuToy[1], 301.000000, 165.500000);
	TextDrawSetOutline(TD_MenuToy[1], 1);
	TextDrawSetShadow(TD_MenuToy[1], 0);
	TextDrawAlignment(TD_MenuToy[1], 2);
	TextDrawColor(TD_MenuToy[1], -1061109505);
	TextDrawBackgroundColor(TD_MenuToy[1], 255);
	TextDrawBoxColor(TD_MenuToy[1], 673720572);
	TextDrawUseBox(TD_MenuToy[1], 1);
	TextDrawSetProportional(TD_MenuToy[1], 1);
	TextDrawSetSelectable(TD_MenuToy[1], 0);

	TD_MenuToy[2] = TextDrawCreate(534.000000, 281.000000, "_");
	TextDrawFont(TD_MenuToy[2], 1);
	TextDrawLetterSize(TD_MenuToy[2], 0.600000, 6.199987);
	TextDrawTextSize(TD_MenuToy[2], 301.000000, 165.500000);
	TextDrawSetOutline(TD_MenuToy[2], 1);
	TextDrawSetShadow(TD_MenuToy[2], 0);
	TextDrawAlignment(TD_MenuToy[2], 2);
	TextDrawColor(TD_MenuToy[2], -1061109505);
	TextDrawBackgroundColor(TD_MenuToy[2], 255);
	TextDrawBoxColor(TD_MenuToy[2], 673720572);
	TextDrawUseBox(TD_MenuToy[2], 1);
	TextDrawSetProportional(TD_MenuToy[2], 1);
	TextDrawSetSelectable(TD_MenuToy[2], 0);

	TD_MenuToy[3] = TextDrawCreate(477.000000, 142.000000, "X");
	TextDrawFont(TD_MenuToy[3], 2);
	TextDrawLetterSize(TD_MenuToy[3], 0.575000, 4.049979);
	TextDrawTextSize(TD_MenuToy[3], 42.000000, 42.000000);
	TextDrawSetOutline(TD_MenuToy[3], 1);
	TextDrawSetShadow(TD_MenuToy[3], 0);
	TextDrawAlignment(TD_MenuToy[3], 2);
	TextDrawColor(TD_MenuToy[3], -1);
	TextDrawBackgroundColor(TD_MenuToy[3], 255);
	TextDrawBoxColor(TD_MenuToy[3], 221);
	TextDrawUseBox(TD_MenuToy[3], 1);
	TextDrawSetProportional(TD_MenuToy[3], 1);
	TextDrawSetSelectable(TD_MenuToy[3], 1);

	TD_MenuToy[4] = TextDrawCreate(532.000000, 142.000000, "Y");
	TextDrawFont(TD_MenuToy[4], 2);
	TextDrawLetterSize(TD_MenuToy[4], 0.575000, 4.049979);
	TextDrawTextSize(TD_MenuToy[4], 42.000000, 42.000000);
	TextDrawSetOutline(TD_MenuToy[4], 1);
	TextDrawSetShadow(TD_MenuToy[4], 0);
	TextDrawAlignment(TD_MenuToy[4], 2);
	TextDrawColor(TD_MenuToy[4], -1);
	TextDrawBackgroundColor(TD_MenuToy[4], 255);
	TextDrawBoxColor(TD_MenuToy[4], 221);
	TextDrawUseBox(TD_MenuToy[4], 1);
	TextDrawSetProportional(TD_MenuToy[4], 1);
	TextDrawSetSelectable(TD_MenuToy[4], 1);

	TD_MenuToy[5] = TextDrawCreate(586.000000, 142.000000, "Z");
	TextDrawFont(TD_MenuToy[5], 2);
	TextDrawLetterSize(TD_MenuToy[5], 0.575000, 4.049979);
	TextDrawTextSize(TD_MenuToy[5], 42.000000, 42.000000);
	TextDrawSetOutline(TD_MenuToy[5], 1);
	TextDrawSetShadow(TD_MenuToy[5], 0);
	TextDrawAlignment(TD_MenuToy[5], 2);
	TextDrawColor(TD_MenuToy[5], -1);
	TextDrawBackgroundColor(TD_MenuToy[5], 255);
	TextDrawBoxColor(TD_MenuToy[5], 221);
	TextDrawUseBox(TD_MenuToy[5], 1);
	TextDrawSetProportional(TD_MenuToy[5], 1);
	TextDrawSetSelectable(TD_MenuToy[5], 1);

	TD_MenuToy[6] = TextDrawCreate(616.000000, 127.000000, "Posicion");
	TextDrawFont(TD_MenuToy[6], 2);
	TextDrawLetterSize(TD_MenuToy[6], 0.266666, 1.100000);
	TextDrawTextSize(TD_MenuToy[6], 400.000000, 17.000000);
	TextDrawSetOutline(TD_MenuToy[6], 1);
	TextDrawSetShadow(TD_MenuToy[6], 0);
	TextDrawAlignment(TD_MenuToy[6], 3);
	TextDrawColor(TD_MenuToy[6], -1);
	TextDrawBackgroundColor(TD_MenuToy[6], 255);
	TextDrawBoxColor(TD_MenuToy[6], 0);
	TextDrawUseBox(TD_MenuToy[6], 1);
	TextDrawSetProportional(TD_MenuToy[6], 1);
	TextDrawSetSelectable(TD_MenuToy[6], 0);

	TD_MenuToy[7] = TextDrawCreate(477.000000, 219.000000, "X");
	TextDrawFont(TD_MenuToy[7], 2);
	TextDrawLetterSize(TD_MenuToy[7], 0.575000, 4.049979);
	TextDrawTextSize(TD_MenuToy[7], 42.000000, 42.000000);
	TextDrawSetOutline(TD_MenuToy[7], 1);
	TextDrawSetShadow(TD_MenuToy[7], 0);
	TextDrawAlignment(TD_MenuToy[7], 2);
	TextDrawColor(TD_MenuToy[7], -1);
	TextDrawBackgroundColor(TD_MenuToy[7], 255);
	TextDrawBoxColor(TD_MenuToy[7], 221);
	TextDrawUseBox(TD_MenuToy[7], 1);
	TextDrawSetProportional(TD_MenuToy[7], 1);
	TextDrawSetSelectable(TD_MenuToy[7], 1);

	TD_MenuToy[8] = TextDrawCreate(532.000000, 219.000000, "Y");
	TextDrawFont(TD_MenuToy[8], 2);
	TextDrawLetterSize(TD_MenuToy[8], 0.575000, 4.049979);
	TextDrawTextSize(TD_MenuToy[8], 42.000000, 42.000000);
	TextDrawSetOutline(TD_MenuToy[8], 1);
	TextDrawSetShadow(TD_MenuToy[8], 0);
	TextDrawAlignment(TD_MenuToy[8], 2);
	TextDrawColor(TD_MenuToy[8], -1);
	TextDrawBackgroundColor(TD_MenuToy[8], 255);
	TextDrawBoxColor(TD_MenuToy[8], 221);
	TextDrawUseBox(TD_MenuToy[8], 1);
	TextDrawSetProportional(TD_MenuToy[8], 1);
	TextDrawSetSelectable(TD_MenuToy[8], 1);

	TD_MenuToy[9] = TextDrawCreate(586.000000, 219.000000, "Z");
	TextDrawFont(TD_MenuToy[9], 2);
	TextDrawLetterSize(TD_MenuToy[9], 0.575000, 4.049979);
	TextDrawTextSize(TD_MenuToy[9], 42.000000, 42.000000);
	TextDrawSetOutline(TD_MenuToy[9], 1);
	TextDrawSetShadow(TD_MenuToy[9], 0);
	TextDrawAlignment(TD_MenuToy[9], 2);
	TextDrawColor(TD_MenuToy[9], -1);
	TextDrawBackgroundColor(TD_MenuToy[9], 255);
	TextDrawBoxColor(TD_MenuToy[9], 221);
	TextDrawUseBox(TD_MenuToy[9], 1);
	TextDrawSetProportional(TD_MenuToy[9], 1);
	TextDrawSetSelectable(TD_MenuToy[9], 1);

	TD_MenuToy[10] = TextDrawCreate(616.000000, 203.000000, "Rotacion");
	TextDrawFont(TD_MenuToy[10], 2);
	TextDrawLetterSize(TD_MenuToy[10], 0.266666, 1.100000);
	TextDrawTextSize(TD_MenuToy[10], 400.000000, 17.000000);
	TextDrawSetOutline(TD_MenuToy[10], 1);
	TextDrawSetShadow(TD_MenuToy[10], 0);
	TextDrawAlignment(TD_MenuToy[10], 3);
	TextDrawColor(TD_MenuToy[10], -1);
	TextDrawBackgroundColor(TD_MenuToy[10], 255);
	TextDrawBoxColor(TD_MenuToy[10], 0);
	TextDrawUseBox(TD_MenuToy[10], 1);
	TextDrawSetProportional(TD_MenuToy[10], 1);
	TextDrawSetSelectable(TD_MenuToy[10], 0);

	TD_MenuToy[11] = TextDrawCreate(477.000000, 296.000000, "X");
	TextDrawFont(TD_MenuToy[11], 2);
	TextDrawLetterSize(TD_MenuToy[11], 0.575000, 4.049979);
	TextDrawTextSize(TD_MenuToy[11], 42.000000, 42.000000);
	TextDrawSetOutline(TD_MenuToy[11], 1);
	TextDrawSetShadow(TD_MenuToy[11], 0);
	TextDrawAlignment(TD_MenuToy[11], 2);
	TextDrawColor(TD_MenuToy[11], -1);
	TextDrawBackgroundColor(TD_MenuToy[11], 255);
	TextDrawBoxColor(TD_MenuToy[11], 221);
	TextDrawUseBox(TD_MenuToy[11], 1);
	TextDrawSetProportional(TD_MenuToy[11], 1);
	TextDrawSetSelectable(TD_MenuToy[11], 1);

	TD_MenuToy[12] = TextDrawCreate(532.000000, 296.000000, "Y");
	TextDrawFont(TD_MenuToy[12], 2);
	TextDrawLetterSize(TD_MenuToy[12], 0.575000, 4.049979);
	TextDrawTextSize(TD_MenuToy[12], 42.000000, 42.000000);
	TextDrawSetOutline(TD_MenuToy[12], 1);
	TextDrawSetShadow(TD_MenuToy[12], 0);
	TextDrawAlignment(TD_MenuToy[12], 2);
	TextDrawColor(TD_MenuToy[12], -1);
	TextDrawBackgroundColor(TD_MenuToy[12], 255);
	TextDrawBoxColor(TD_MenuToy[12], 221);
	TextDrawUseBox(TD_MenuToy[12], 1);
	TextDrawSetProportional(TD_MenuToy[12], 1);
	TextDrawSetSelectable(TD_MenuToy[12], 1);

	TD_MenuToy[13] = TextDrawCreate(586.000000, 296.000000, "Z");
	TextDrawFont(TD_MenuToy[13], 2);
	TextDrawLetterSize(TD_MenuToy[13], 0.575000, 4.049979);
	TextDrawTextSize(TD_MenuToy[13], 42.000000, 42.000000);
	TextDrawSetOutline(TD_MenuToy[13], 1);
	TextDrawSetShadow(TD_MenuToy[13], 0);
	TextDrawAlignment(TD_MenuToy[13], 2);
	TextDrawColor(TD_MenuToy[13], -1);
	TextDrawBackgroundColor(TD_MenuToy[13], 255);
	TextDrawBoxColor(TD_MenuToy[13], 221);
	TextDrawUseBox(TD_MenuToy[13], 1);
	TextDrawSetProportional(TD_MenuToy[13], 1);
	TextDrawSetSelectable(TD_MenuToy[13], 1);

	TD_MenuToy[14] = TextDrawCreate(616.000000, 281.000000, "Escala");
	TextDrawFont(TD_MenuToy[14], 2);
	TextDrawLetterSize(TD_MenuToy[14], 0.266666, 1.100000);
	TextDrawTextSize(TD_MenuToy[14], 400.000000, 17.000000);
	TextDrawSetOutline(TD_MenuToy[14], 1);
	TextDrawSetShadow(TD_MenuToy[14], 0);
	TextDrawAlignment(TD_MenuToy[14], 3);
	TextDrawColor(TD_MenuToy[14], -1);
	TextDrawBackgroundColor(TD_MenuToy[14], 255);
	TextDrawBoxColor(TD_MenuToy[14], 0);
	TextDrawUseBox(TD_MenuToy[14], 1);
	TextDrawSetProportional(TD_MenuToy[14], 1);
	TextDrawSetSelectable(TD_MenuToy[14], 0);

	TD_MenuToy[15] = TextDrawCreate(113.000000, 204.000000, "_");
	TextDrawFont(TD_MenuToy[15], 1);
	TextDrawLetterSize(TD_MenuToy[15], 0.600000, 6.199987);
	TextDrawTextSize(TD_MenuToy[15], 301.000000, 218.000000);
	TextDrawSetOutline(TD_MenuToy[15], 1);
	TextDrawSetShadow(TD_MenuToy[15], 0);
	TextDrawAlignment(TD_MenuToy[15], 2);
	TextDrawColor(TD_MenuToy[15], -1061109505);
	TextDrawBackgroundColor(TD_MenuToy[15], 255);
	TextDrawBoxColor(TD_MenuToy[15], 673720572);
	TextDrawUseBox(TD_MenuToy[15], 1);
	TextDrawSetProportional(TD_MenuToy[15], 1);
	TextDrawSetSelectable(TD_MenuToy[15], 0);

	TD_MenuToy[16] = TextDrawCreate(34.000000, 215.000000, "+");
	TextDrawFont(TD_MenuToy[16], 2);
	TextDrawLetterSize(TD_MenuToy[16], 0.575000, 4.049979);
	TextDrawTextSize(TD_MenuToy[16], 42.000000, 42.000000);
	TextDrawSetOutline(TD_MenuToy[16], 1);
	TextDrawSetShadow(TD_MenuToy[16], 0);
	TextDrawAlignment(TD_MenuToy[16], 2);
	TextDrawColor(TD_MenuToy[16], -1);
	TextDrawBackgroundColor(TD_MenuToy[16], 255);
	TextDrawBoxColor(TD_MenuToy[16], 221);
	TextDrawUseBox(TD_MenuToy[16], 1);
	TextDrawSetProportional(TD_MenuToy[16], 1);
	TextDrawSetSelectable(TD_MenuToy[16], 1);

	TD_MenuToy[17] = TextDrawCreate(192.000000, 215.000000, "-");
	TextDrawFont(TD_MenuToy[17], 2);
	TextDrawLetterSize(TD_MenuToy[17], 0.575000, 4.049979);
	TextDrawTextSize(TD_MenuToy[17], 42.000000, 42.000000);
	TextDrawSetOutline(TD_MenuToy[17], 1);
	TextDrawSetShadow(TD_MenuToy[17], 0);
	TextDrawAlignment(TD_MenuToy[17], 2);
	TextDrawColor(TD_MenuToy[17], -1);
	TextDrawBackgroundColor(TD_MenuToy[17], 255);
	TextDrawBoxColor(TD_MenuToy[17], 221);
	TextDrawUseBox(TD_MenuToy[17], 1);
	TextDrawSetProportional(TD_MenuToy[17], 1);
	TextDrawSetSelectable(TD_MenuToy[17], 1);

	TD_MenuToy[18] = TextDrawCreate(57.000000, 311.000000, "Cambiar vista");
	TextDrawFont(TD_MenuToy[18], 2);
	TextDrawLetterSize(TD_MenuToy[18], 0.350000, 1.750000);
	TextDrawTextSize(TD_MenuToy[18], 169.500000, 17.000000);
	TextDrawSetOutline(TD_MenuToy[18], 1);
	TextDrawSetShadow(TD_MenuToy[18], 0);
	TextDrawAlignment(TD_MenuToy[18], 1);
	TextDrawColor(TD_MenuToy[18], -1);
	TextDrawBackgroundColor(TD_MenuToy[18], 255);
	TextDrawBoxColor(TD_MenuToy[18], 251);
	TextDrawUseBox(TD_MenuToy[18], 1);
	TextDrawSetProportional(TD_MenuToy[18], 1);
	TextDrawSetSelectable(TD_MenuToy[18], 1);

	TD_MenuToy[19] = TextDrawCreate(43.000000, 349.000000, "Guardar");
	TextDrawFont(TD_MenuToy[19], 2);
	TextDrawLetterSize(TD_MenuToy[19], 0.350000, 1.750000);
	TextDrawTextSize(TD_MenuToy[19], 113.500000, 15.000000);
	TextDrawSetOutline(TD_MenuToy[19], 1);
	TextDrawSetShadow(TD_MenuToy[19], 0);
	TextDrawAlignment(TD_MenuToy[19], 1);
	TextDrawColor(TD_MenuToy[19], -1);
	TextDrawBackgroundColor(TD_MenuToy[19], 255);
	TextDrawBoxColor(TD_MenuToy[19], 251);
	TextDrawUseBox(TD_MenuToy[19], 1);
	TextDrawSetProportional(TD_MenuToy[19], 1);
	TextDrawSetSelectable(TD_MenuToy[19], 1);

	TD_MenuToy[20] = TextDrawCreate(141.000000, 349.000000, "Salir");
	TextDrawFont(TD_MenuToy[20], 2);
	TextDrawLetterSize(TD_MenuToy[20], 0.350000, 1.750000);
	TextDrawTextSize(TD_MenuToy[20], 183.500000, 15.000000);
	TextDrawSetOutline(TD_MenuToy[20], 1);
	TextDrawSetShadow(TD_MenuToy[20], 0);
	TextDrawAlignment(TD_MenuToy[20], 1);
	TextDrawColor(TD_MenuToy[20], -1);
	TextDrawBackgroundColor(TD_MenuToy[20], 255);
	TextDrawBoxColor(TD_MenuToy[20], 251);
	TextDrawUseBox(TD_MenuToy[20], 1);
	TextDrawSetProportional(TD_MenuToy[20], 1);
	TextDrawSetSelectable(TD_MenuToy[20], 1);

	// compra de toy 21/10/2020
	BuyToy[0] = TextDrawCreate(316.000000, 322.000000, "_");
	TextDrawFont(BuyToy[0], 1);
	TextDrawLetterSize(BuyToy[0], 0.600000, 8.849995);
	TextDrawTextSize(BuyToy[0], 298.500000, 179.000000);
	TextDrawSetOutline(BuyToy[0], 1);
	TextDrawSetShadow(BuyToy[0], 0);
	TextDrawAlignment(BuyToy[0], 2);
	TextDrawColor(BuyToy[0], -1);
	TextDrawBackgroundColor(BuyToy[0], 255);
	TextDrawBoxColor(BuyToy[0], 135);
	TextDrawUseBox(BuyToy[0], 1);
	TextDrawSetProportional(BuyToy[0], 1);
	TextDrawSetSelectable(BuyToy[0], 0);

	BuyToy[1] = TextDrawCreate(231.000000, 384.000000, "Anterior");
	TextDrawFont(BuyToy[1], 2);
	TextDrawLetterSize(BuyToy[1], 0.358332, 1.549998);
	TextDrawTextSize(BuyToy[1], 305.500000, 15.500000);
	TextDrawSetOutline(BuyToy[1], 1);
	TextDrawSetShadow(BuyToy[1], 0);
	TextDrawAlignment(BuyToy[1], 1);
	TextDrawColor(BuyToy[1], -1);
	TextDrawBackgroundColor(BuyToy[1], 255);
	TextDrawBoxColor(BuyToy[1], -741092558);
	TextDrawUseBox(BuyToy[1], 1);
	TextDrawSetProportional(BuyToy[1], 1);
	TextDrawSetSelectable(BuyToy[1], 1);

	BuyToy[2] = TextDrawCreate(324.000000, 384.000000, "Siguiente");
	TextDrawFont(BuyToy[2], 2);
	TextDrawLetterSize(BuyToy[2], 0.358332, 1.549998);
	TextDrawTextSize(BuyToy[2], 401.500000, 15.500000);
	TextDrawSetOutline(BuyToy[2], 1);
	TextDrawSetShadow(BuyToy[2], 0);
	TextDrawAlignment(BuyToy[2], 1);
	TextDrawColor(BuyToy[2], -1);
	TextDrawBackgroundColor(BuyToy[2], 255);
	TextDrawBoxColor(BuyToy[2], -741092558);
	TextDrawUseBox(BuyToy[2], 1);
	TextDrawSetProportional(BuyToy[2], 1);
	TextDrawSetSelectable(BuyToy[2], 1);

	BuyToy[3] = TextDrawCreate(275.000000, 360.000000, "Comprar");
	TextDrawFont(BuyToy[3], 2);
	TextDrawLetterSize(BuyToy[3], 0.358332, 1.549998);
	TextDrawTextSize(BuyToy[3], 345.000000, 15.500000);
	TextDrawSetOutline(BuyToy[3], 1);
	TextDrawSetShadow(BuyToy[3], 0);
	TextDrawAlignment(BuyToy[3], 1);
	TextDrawColor(BuyToy[3], -1);
	TextDrawBackgroundColor(BuyToy[3], 255);
	TextDrawBoxColor(BuyToy[3], 852308530);
	TextDrawUseBox(BuyToy[3], 1);
	TextDrawSetProportional(BuyToy[3], 1);
	TextDrawSetSelectable(BuyToy[3], 1);

	BuyToy[4] = TextDrawCreate(388.000000, 317.000000, "X");
	TextDrawFont(BuyToy[4], 2);
	TextDrawLetterSize(BuyToy[4], 0.662499, 2.749999);
	TextDrawTextSize(BuyToy[4], 405.000000, 15.500000);
	TextDrawSetOutline(BuyToy[4], 1);
	TextDrawSetShadow(BuyToy[4], 0);
	TextDrawAlignment(BuyToy[4], 1);
	TextDrawColor(BuyToy[4], -1962934017);
	TextDrawBackgroundColor(BuyToy[4], 255);
	TextDrawBoxColor(BuyToy[4], 0);
	TextDrawUseBox(BuyToy[4], 1);
	TextDrawSetProportional(BuyToy[4], 1);
	TextDrawSetSelectable(BuyToy[4], 1);

// Login por textdraw

    LoginTD[0] = TextDrawCreate(318.000000, 76.000000, "_");
	TextDrawFont(LoginTD[0], 1);
	TextDrawLetterSize(LoginTD[0], 0.595833, 35.050022);
	TextDrawTextSize(LoginTD[0], 299.500000, 179.500000);
	TextDrawSetOutline(LoginTD[0], 1);
	TextDrawSetShadow(LoginTD[0], 0);
	TextDrawAlignment(LoginTD[0], 2);
	TextDrawColor(LoginTD[0], -1);
	TextDrawBackgroundColor(LoginTD[0], 255);
	TextDrawBoxColor(LoginTD[0], 157);
	TextDrawUseBox(LoginTD[0], 1);
	TextDrawSetProportional(LoginTD[0], 1);
	TextDrawSetSelectable(LoginTD[0], 0);

    LoginTD[1] = TextDrawCreate(318.000000, 76.000000, "North America Roleplay");
	TextDrawFont(LoginTD[1], 1);
	TextDrawLetterSize(LoginTD[1], 0.374999, 1.750000);
	TextDrawTextSize(LoginTD[1], 16.500000, 156.000000);
	TextDrawSetOutline(LoginTD[1], 1);
	TextDrawSetShadow(LoginTD[1], 0);
	TextDrawAlignment(LoginTD[1], 2);
	TextDrawColor(LoginTD[1], -1);
	TextDrawBackgroundColor(LoginTD[1], 255);
	TextDrawBoxColor(LoginTD[1], 50);
	TextDrawUseBox(LoginTD[1], 0);
	TextDrawSetProportional(LoginTD[1], 1);
	TextDrawSetSelectable(LoginTD[1], 0);

	LoginTD[2] = TextDrawCreate(318.000000, 93.000000, "_");
	TextDrawFont(LoginTD[2], 1);
	TextDrawLetterSize(LoginTD[2], 0.425000, 1.750000);
	TextDrawTextSize(LoginTD[2], 400.000000, 192.500000);
	TextDrawSetOutline(LoginTD[2], 1);
	TextDrawSetShadow(LoginTD[2], 0);
	TextDrawAlignment(LoginTD[2], 2);
	TextDrawColor(LoginTD[2], -1);
	TextDrawBackgroundColor(LoginTD[2], 255);
	TextDrawBoxColor(LoginTD[2], 50);
	TextDrawUseBox(LoginTD[2], 0);
	TextDrawSetProportional(LoginTD[2], 1);
	TextDrawSetSelectable(LoginTD[2], 0);

	LoginTD[5] = TextDrawCreate(319.000000, 286.000000, "_");
	TextDrawFont(LoginTD[5], 2);
	TextDrawLetterSize(LoginTD[5], 0.183333, 1.050000);
	TextDrawTextSize(LoginTD[5], 400.000000, 157.000000);
	TextDrawSetOutline(LoginTD[5], 1);
	TextDrawSetShadow(LoginTD[5], 0);
	TextDrawAlignment(LoginTD[5], 2);
	TextDrawColor(LoginTD[5], -1);
	TextDrawBackgroundColor(LoginTD[5], 255);
	TextDrawBoxColor(LoginTD[5], 50);
	TextDrawUseBox(LoginTD[5], 0);
	TextDrawSetProportional(LoginTD[5], 1);
	TextDrawSetSelectable(LoginTD[5], 0);

	LoginTD[6] = TextDrawCreate(236.000000, 334.000000, "_");
	TextDrawFont(LoginTD[6], 1);
	TextDrawLetterSize(LoginTD[6], 0.308333, 1.300000);
	TextDrawTextSize(LoginTD[6], 400.000000, 17.000000);
	TextDrawSetOutline(LoginTD[6], 1);
	TextDrawSetShadow(LoginTD[6], 0);
	TextDrawAlignment(LoginTD[6], 1);
	TextDrawColor(LoginTD[6], -1094795521);
	TextDrawBackgroundColor(LoginTD[6], 255);
	TextDrawBoxColor(LoginTD[6], 50);
	TextDrawUseBox(LoginTD[6], 0);
	TextDrawSetProportional(LoginTD[6], 1);
	TextDrawSetSelectable(LoginTD[6], 0);

	LoginTD[7] = TextDrawCreate(319.000000, 307.000000, "BIENVENIDA/O A North America Roleplay, UN SERVIDOR DONDE PODRAS SER LO QUE QUIERAS, DISFRUTA.");
	TextDrawFont(LoginTD[7], 2);
	TextDrawLetterSize(LoginTD[7], 0.158333, 1.099985);
	TextDrawTextSize(LoginTD[7], 422.500000, 173.000000);
	TextDrawSetOutline(LoginTD[7], 1);
	TextDrawSetShadow(LoginTD[7], 0);
	TextDrawAlignment(LoginTD[7], 2);
	TextDrawColor(LoginTD[7], -1);
	TextDrawBackgroundColor(LoginTD[7], 255);
	TextDrawBoxColor(LoginTD[7], 50);
	TextDrawUseBox(LoginTD[7], 0);
	TextDrawSetProportional(LoginTD[7], 1);
	TextDrawSetSelectable(LoginTD[7], 0);

	LoginTD[8] = TextDrawCreate(317.000000, 157.000000, "INICIAR SESION");
	TextDrawFont(LoginTD[8], 1);
	TextDrawLetterSize(LoginTD[8], 0.374999, 1.750000);
	TextDrawTextSize(LoginTD[8], 16.500000, 156.000000);
	TextDrawSetOutline(LoginTD[8], 1);
	TextDrawSetShadow(LoginTD[8], 0);
	TextDrawAlignment(LoginTD[8], 2);
	TextDrawColor(LoginTD[8], -1);
	TextDrawBackgroundColor(LoginTD[8], 255);
	TextDrawBoxColor(LoginTD[8], 1296911816);
	TextDrawUseBox(LoginTD[8], 1);
	TextDrawSetProportional(LoginTD[8], 1);
	TextDrawSetSelectable(LoginTD[8], 1);
	
	LoginTD[10] = TextDrawCreate(317.000000, 197.000000, "RECUPERAR CONTRASENA");
	TextDrawFont(LoginTD[10], 1);
	TextDrawLetterSize(LoginTD[10], 0.374999, 1.750000);
	TextDrawTextSize(LoginTD[10], 16.500000, 156.000000);
	TextDrawSetOutline(LoginTD[10], 1);
	TextDrawSetShadow(LoginTD[10], 0);
	TextDrawAlignment(LoginTD[10], 2);
	TextDrawColor(LoginTD[10], -1);
	TextDrawBackgroundColor(LoginTD[10], 255);
	TextDrawBoxColor(LoginTD[10], 1296911816);
	TextDrawUseBox(LoginTD[10], 1);
	TextDrawSetProportional(LoginTD[10], 1);
	TextDrawSetSelectable(LoginTD[10], 1);

	LoginTD[11] = TextDrawCreate(310.000000, 357.000000, "HUD:radar_burgerShot");
	TextDrawFont(LoginTD[11], 4);
	TextDrawLetterSize(LoginTD[11], 0.600000, 2.000000);
	TextDrawTextSize(LoginTD[11], 17.000000, 17.000000);
	TextDrawSetOutline(LoginTD[11], 1);
	TextDrawSetShadow(LoginTD[11], 0);
	TextDrawAlignment(LoginTD[11], 1);
	TextDrawColor(LoginTD[11], -1);
	TextDrawBackgroundColor(LoginTD[11], 255);
	TextDrawBoxColor(LoginTD[11], 50);
	TextDrawUseBox(LoginTD[11], 1);
	TextDrawSetProportional(LoginTD[11], 1);
	TextDrawSetSelectable(LoginTD[11], 0);

	LoginTD[12] = TextDrawCreate(317.000000, 157.000000, "REGISTRARSE");
	TextDrawFont(LoginTD[12], 1);
	TextDrawLetterSize(LoginTD[12], 0.374999, 1.750000);
	TextDrawTextSize(LoginTD[12], 16.500000, 156.000000);
	TextDrawSetOutline(LoginTD[12], 1);
	TextDrawSetShadow(LoginTD[12], 0);
	TextDrawAlignment(LoginTD[12], 2);
	TextDrawColor(LoginTD[12], -1);
	TextDrawBackgroundColor(LoginTD[12], 255);
	TextDrawBoxColor(LoginTD[12], 1296911816);
	TextDrawUseBox(LoginTD[12], 1);
	TextDrawSetProportional(LoginTD[12], 1);
	TextDrawSetSelectable(LoginTD[12], 1);

	LoginTD[13] = TextDrawCreate(387.000000, 384.000000, "VERSION 1.0");
	TextDrawFont(LoginTD[13], 1);
	TextDrawLetterSize(LoginTD[13], 0.162500, 0.750000);
	TextDrawTextSize(LoginTD[13], 408.000000, 41.500000);
	TextDrawSetOutline(LoginTD[13], 1);
	TextDrawSetShadow(LoginTD[13], 0);
	TextDrawAlignment(LoginTD[13], 2);
	TextDrawColor(LoginTD[13], -1);
	TextDrawBackgroundColor(LoginTD[13], 255);
	TextDrawBoxColor(LoginTD[13], 50);
	TextDrawUseBox(LoginTD[13], 1);
	TextDrawSetProportional(LoginTD[13], 1);
	TextDrawSetSelectable(LoginTD[13], 0);

	LoginTD[14] = TextDrawCreate(317.000000, 157.000000, "CONTINUAR");
	TextDrawFont(LoginTD[14], 1);
	TextDrawLetterSize(LoginTD[14], 0.374999, 1.750000);
	TextDrawTextSize(LoginTD[14], 16.500000, 156.000000);
	TextDrawSetOutline(LoginTD[14], 1);
	TextDrawSetShadow(LoginTD[14], 0);
	TextDrawAlignment(LoginTD[14], 2);
	TextDrawColor(LoginTD[14], -1);
	TextDrawBackgroundColor(LoginTD[14], 255);
	TextDrawBoxColor(LoginTD[14], 1296911816);
	TextDrawUseBox(LoginTD[14], 1);
	TextDrawSetProportional(LoginTD[14], 1);
	TextDrawSetSelectable(LoginTD[14], 1);

	LoginTD[15] = TextDrawCreate(317.000000, 78.000000, "NUEVA CONEXION IP DETECTADA");
	TextDrawFont(LoginTD[15], 1);
	TextDrawLetterSize(LoginTD[15], 0.141667, 1.049996);
	TextDrawTextSize(LoginTD[15], 404.000000, 86.500000);
	TextDrawSetOutline(LoginTD[15], 1);
	TextDrawSetShadow(LoginTD[15], 0);
	TextDrawAlignment(LoginTD[15], 2);
	TextDrawColor(LoginTD[15], -16776961);
	TextDrawBackgroundColor(LoginTD[15], 255);
	TextDrawBoxColor(LoginTD[15], 50);
	TextDrawUseBox(LoginTD[15], 0);
	TextDrawSetProportional(LoginTD[15], 1);
	TextDrawSetSelectable(LoginTD[15], 0);
     //- Bicis en inicio

    CargarVehUsados();

    CreateDynamicPickup(19134, 1, 1732.8844,702.1658,10.8203);
    CreateDynamic3DTextLabel("{FFFFFF}Deposito de camiones\n{FFFF00}/vehiculo {FFFFFF}para solicitar un nuevo camion\n\nEstas bugeado? Ingresa {FFFF00}/desbug {FFFFFF}Bienvenido!.", 0xFFFFFF00, 1732.8844,702.1658,10.8203,10.0);

    CreateDynamicPickup(19134, 1, 1988.9191,2231.3130,13.3260);
    CreateDynamic3DTextLabel("{FFFFFF}SALIDA\n\nIngresa {ffff00}/vehiculo {FFFFFF}para regresar al parqueadero.", 0xFFFFFF00, 1988.9191,2231.3130,13.3260,10.0);

	//camionero
    CreateDynamicPickup(1318, 1, 1601.0590,783.2723,10.8203);
    CreateDynamic3DTextLabel("{FFFFFF}Empresa {FFFF00}Camionera\n{FFFFFF}Las Vegas [{FFFF00}VL-1{FFFFFF}]", 0xFFFFFFFF, 1601.0590,783.2723,10.8203,10.0);
    CreateDynamicPickup(2912, 1, 1710.1189,770.0330,10.8203);
    CreateDynamic3DTextLabel("{FFFFFF}Deposito de carga\nEscribe {FFFF00}/transportar{FFFFFF} para procesar la carga.", 0xFFFFFFFF, 1710.1189,770.0330,10.8203,10.0);

    // 3D Label's
    //otros mapicons by lucas
    _MapIcon(2119.2095,-2008.7800,7.9844, 23); //mercado negro
    _MapIcon(1929.4712,-1774.7037,23.8505, 36);
    _MapIcon(1851.8180,-1688.7445,46.5962, 48);
    _MapIcon(2230.0151,-1721.3752,13.5626, 54);
    _MapIcon(2243.8672,-1680.2031,21.0313, 45);
    _MapIcon(2117.3652,-1806.8076,22.2188, 29);

    //peaje lv
    CreateDynamic3DTextLabel("Ingresa {ea2c2c}/peaje {FFFFFF}para abrir el peaje.\nO usa el {FFD000}Claxon {FF0000}(H).", 0xFFFFFFFF, 1731.5371,544.9289,26.8230,10.0);
    CreateDynamic3DTextLabel("Ingresa {ea2c2c}/peaje {FFFFFF}para abrir el peaje.\nO usa el {FFD000}Claxon {FF0000}(H).", 0xFFFFFFFF, 1740.0405,541.1727,26.8827,10.0);
    CreateDynamic3DTextLabel("Ingresa {ea2c2c}/peaje {FFFFFF}para abrir el peaje.\nO usa el {FFD000}Claxon {FF0000}(H).", 0xFFFFFFFF, 1755.8710,531.7097,27.1239,10.0);
    CreateDynamic3DTextLabel("Ingresa {ea2c2c}/peaje {FFFFFF}para abrir el peaje.\nO usa el {FFD000}Claxon {FF0000}(H).", 0xFFFFFFFF, 1747.4525,535.5032,27.0627,10.0);

	//peaje ls-sf
    CreateDynamic3DTextLabel("Ingresa {ea2c2c}/peaje {FFFFFF}para abrir el peaje.\nO usa el {FFD000}Claxon {FF0000}(H).", 0xFFFFFFFF, 62.9867,-1525.8798,4.9153,10.0);
    CreateDynamic3DTextLabel("Ingresa {ea2c2c}/peaje {FFFFFF}para abrir el peaje.\nO usa el {FFD000}Claxon {FF0000}(H).", 0xFFFFFFFF, 37.4695,-1537.5255,5.2364,10.0);

	//concesionarias
	_MapIcon(1986.7319,-2100.3467,13.5469, 55); //motos
	_MapIcon(2131.8674, -1151.0360, 23.8920, 55); //Coutt And Schutz
	_MapIcon(519.0496, -1293.6548, 17.2224, 55); //grotti
	_MapIcon(2793.1045, -1087.5013, 30.6801, 55); //camionetas
	_MapIcon(2515.4216, -1957.9753, 16.7286, 55); //Nuevased
	_MapIcon(2589.1169, -2219.4470, 13.5184, 55); //coches usados
	CreateDynamicPickup(1274, 1, 1986.7319,-2100.3467,13.5469); //motos
	CreateDynamicPickup(1274, 1, 2131.8674, -1151.0360, 23.8920); //Coutt And Schutz
	CreateDynamicPickup(1274, 1, 519.0496, -1293.6548, 17.2224); //grotti
	CreateDynamicPickup(1274, 1, 2793.1045, -1087.5013, 30.6801); //camionetas
	CreateDynamicPickup(1274, 1, 2515.4216, -1957.9753, 16.7286); //Nuevased
	CreateDynamicPickup(1274, 1, 2589.1169, -2219.4470, 13.5184); //coches usados
	CreateDynamic3DTextLabel("Para comprar un vehiculo: {008BFF}/catalogo", 0xEBEBEBFF, 1986.7319,-2100.3467,13.5469, 7.5); //motos
	CreateDynamic3DTextLabel("Para comprar un vehiculo: {008BFF}/catalogo", 0xEBEBEBFF, 2131.8674, -1151.0360, 23.8920, 7.5); //Coutt And Schutz
	CreateDynamic3DTextLabel("Para comprar un vehiculo: {008BFF}/catalogo", 0xEBEBEBFF, 519.0496, -1293.6548, 17.2224, 7.5); //grotti
	CreateDynamic3DTextLabel("Para comprar un vehiculo: {008BFF}/catalogo", 0xEBEBEBFF, 2793.1045, -1087.5013, 30.6801, 7.5); //camionetas
	CreateDynamic3DTextLabel("Para comprar un vehiculo: {008BFF}/catalogo", 0xEBEBEBFF, 2515.4216, -1957.9753, 16.7286, 7.5); //Nuevased
	CreateDynamic3DTextLabel("Para comprar un vehiculo usado: {008BFF}/catalogo\n{EBEBEB}Para vender un vehiculo usado {008BFF}/venderveh", 0xEBEBEBFF, 2589.1169, -2219.4470, 13.5184, 15.0); //coches usados

		//lspd-sasd
	CreateDynamicPickup(1239, 1, 229.5383, 182.3108, 1002.9111);
	CreateDynamicPickup(1239, 1, 260.7723, 71.0477, 1003.2422);
	CreateDynamicPickup(1239, 1, -420.6046, 675.0458, 3856.5835);
	CreateDynamic3DTextLabel("(/borrar)", 0xffffffff, 229.5383, 182.3108, 1002.9111, 5.0);
	CreateDynamic3DTextLabel("(/borrar)", 0xffffffff, 260.7723, 71.0477, 1003.2422, 5.0);
	CreateDynamic3DTextLabel("(/borrar)", 0xffffffff, -420.6046, 675.0458, 3856.5835, 5.0);
    CreateDynamic3DTextLabel("(/tallerpd)",					0xffffffff, 2278.1614,2443.0762,3.2734, 8.0);
    CreateDynamic3DTextLabel("(/tallerpd)",					0xffffffff, 1357.9662,-33.9916,-91.6174, 8.0);

    CreateDynamic3DTextLabel("(/tallerpd)",					0xffffffff, 2322.3467,2474.1570,38.6837, 8.0);
    CreateDynamic3DTextLabel("(/tallerpd)",					0xffffffff, -1574.5828,749.0201,-5.9590, 8.0);
    CreateDynamic3DTextLabel("(/tallerpd)",					0xffffffff, -1679.5690,705.9722,30.6016, 8.0);
    CreateDynamic3DTextLabel("(/tallerpd)",					0xffffffff, 1568.7781,-1694.7095,5.8906, 8.0);
    CreateDynamic3DTextLabel("(/tallerpd)",					0xffffffff, 1567.7096,-1697.2681,28.3956, 8.0);
    CreateDynamic3DTextLabel("(/tallergn)",					0xffffffff, 202.3180,1921.0773,17.6406, 8.0);
    CreateDynamic3DTextLabel("(/tallergn)",					0xffffffff, 2746.2668,-2460.2405,13.6484, 8.0);
    CreateDynamic3DTextLabel("(/tallersd)",					0xffffffff, 620.8446,-600.6666,17.2330, 8.0);
    CreateDynamicPickup(1366, 1, 2278.1614,2443.0762,3.2734); // /tallerpd

    CreateDynamicPickup(1366, 1, 2322.3467,2474.1570,38.6837); // /tallerpd
    CreateDynamicPickup(1366, 1, -1574.5828,749.0201,-5.9590); // /tallerpd
    CreateDynamicPickup(1366, 1, -1679.5690,705.9722,30.6016); // /tallerpd
    CreateDynamicPickup(1366, 1, 1568.7781,-1694.7095,5.8906); // /tallerpd
    CreateDynamicPickup(1366, 1, 1567.7096,-1697.2681,28.3956); // /tallerpd
    CreateDynamicPickup(1366, 1, 202.3180,1921.0773,17.6406);   //tallergn
    CreateDynamicPickup(1366, 1, 2746.2668,-2460.2405,13.6484);   //tallergn
    CreateDynamicPickup(1366, 1, 1357.9662,-33.9916,-91.6174); // /tallerpd
    CreateDynamicPickup(1366, 1, 620.8446,-600.6666,17.2330); // /tallersd
	//gn
	CreateDynamicPickup(1239, 1, 202.2707,1873.5331,13.1406);
	CreateDynamic3DTextLabel("(/borrar)", 0xffffffff, 202.2707,1873.5331,13.1406, 0.0);

    //pickup
	pickupspf[0] = CreateDynamicPickup(1239, 1, 175.2823, 1875.1700, 23.5167);
	pickupspf[1] = CreateDynamicPickup(18634, 1, 272.04361, 1876.01123, 17.18144);
	pickupspf[2] = CreateDynamicPickup(18634, 1, 272.59424, 1880.36853, 17.83571);
	pickupspf[3] = CreateDynamicPickup(18634, 1, 269.19070, 1878.51306, 17.19197);
	pickupspf[4] = CreateDynamicPickup(18634, 1, 267.02798, 1882.38379, 18.85914);
	pickupspf[5] = CreateDynamicPickup(1240, 1, 190.1715, -181.7262, 349.3348);
	pickupspf[6] = CreateDynamicPickup(19523, 1, 149.6309, -185.1440, 342.8410);
	CreateDynamicActor(110, 223.1527, 1942.4933, 18.4586, 269.6197, true, 100.0, 0, 0);
	CreateDynamic3DTextLabel("{f4f600}Jorge Gonzalez\n{ffffff}/camello", 0xFF0000FF, 223.1527, 1942.4933, 18.1086, 5.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);

    CreateObject(18981, -26.91166, -49.80461, 1002.02673,   0.00000, 90.00000, 90.00000);
    CreateObject(18981, 1206.78113, -31.13935, 999.44775,   0.00000, 90.00000, 90.00000);
    CreateObject(18981, 1208.00977, -3.92006, 999.41504,   0.00000, 90.00000, 90.00000);
    CreateObject(18981, 955.05048, -52.20440, 999.61029,   0.00000, 90.00000, 90.00000);
    CreateObject(18981, 491.34946, -13.21688, 999.17163,   0.00000, 90.00000, 90.00000);
    CreateObject(18981, 291.60226, -106.83201, 1000.00800,   0.00000, 90.00000, 90.00000);
    CreateObject(18981, 372.38263, -124.51276, 999.93073,   0.00000, 90.00000, 90.00000);
    CreateObject(18981, 368.65411, -68.82710, 1000.00586,   0.00000, 90.00000, 90.00000);
    CreateObject(18981, 314.96454, -134.97142, 998.08435,   0.00000, 90.00000, 90.00000);
    CreateObject(18981, 501.80670, -73.90924, 997.24347,   0.00000, 90.00000, 90.00000);
    CreateObject(18981, 208.89661, -103.65580, 1003.61786,   0.00000, 90.00000, 90.00000);
    CreateObject(18981, 163.10716, -91.74467, 1000.28247,   0.00000, 90.00000, 90.00000);

// editado por x1 //
	//talleres dinamicos
	_MapIcon(1943.9833, -1814.0374, 13.5441, 63);
	_MapIcon(2510.7690, -1781.4368, 13.5629, 63);
	_MapIcon(994.5331, -1378.2527, 13.2320, 63);
	_MapIcon(429.7042, -1792.4181, 5.5991, 63);
	_MapIcon(1800.0814, -2048.4607, 13.5773, 63);
	_MapIcon(1844.48083, 913.94519, 10.27540, 63);
	_MapIcon(-2085.64795, -87.90520, 34.38690, 63);
	CreateDynamicPickup(19627, 1, 1943.9833, -1814.0374, 13.5441);
	CreateDynamicPickup(19627, 1, 2510.7690, -1781.4368, 13.5629);
	CreateDynamicPickup(19627, 1, 994.5331, -1378.2527, 13.2320);
	CreateDynamicPickup(19627, 1, 429.7042, -1792.4181, 5.5991);
	CreateDynamicPickup(19627, 1, 1800.0814, -2048.4607, 13.5773);
	CreateDynamicPickup(19627, 1, 1844.48083, 913.94519, 10.27540);
	CreateDynamicPickup(19627, 1, -2085.64795, -87.90520, 34.38690);
	CreateDynamic3DTextLabel("{008BFF}Taller Idlewood\nToca la {FFFF00}'BOCINA'{CCCCCC} para interactuar.", 0xCCCCCCFF, 1943.9833, -1814.0374, 13.5441, 10.0);
	CreateDynamic3DTextLabel("{008BFF}Taller Ganton\nToca la {FFFF00}'BOCINA'{CCCCCC} para interactuar.", 0xCCCCCCFF, 2510.7690, -1781.4368, 13.5629, 10.0);
	CreateDynamic3DTextLabel("{008BFF}Taller Market\nToca la {FFFF00}'BOCINA'{CCCCCC} para interactuar.", 0xCCCCCCFF, 994.5331, -1378.2527, 13.2320, 10.0);
	CreateDynamic3DTextLabel("{008BFF}Taller Santa Maria Beah\nToca la {FFFF00}'BOCINA'{CCCCCC} para interactuar.", 0xCCCCCCFF, 429.7042, -1792.4181, 5.5991, 10.0);
	CreateDynamic3DTextLabel("{008BFF}Taller El Corona\nToca la {FFFF00}'BOCINA'{CCCCCC} para interactuar.", 0xCCCCCCFF, 1800.0814, -2048.4607, 13.5773, 10.0);
	CreateDynamic3DTextLabel("{008BFF}Taller De Las Venturas\nToca la {FFFF00}'BOCINA'{CCCCCC} para interactuar.", 0xCCCCCCFF, 1844.48083, 913.94519, 10.27540, 10.0);
	CreateDynamic3DTextLabel("{008BFF}Taller De San Fierro\nToca la {FFFF00}'BOCINA'{CCCCCC} para interactuar.", 0xCCCCCCFF, -2085.64795, -87.90515, 34.24590, 10.0);

	//idlewood
	new tallersito;
	tallersito = CreateObject(3292, 1941.74365, -1809.29456, 12.46160,   0.00000, 0.00000, -90.00000, 500.0);
	SetObjectMaterial(tallersito, 0, 9920, "anotherbuildsfe", "gz_vic2d", 0x00000000);
	SetObjectMaterial(tallersito, 1, 9920, "anotherbuildsfe", "gz_vic2d", 0x00000000);
	SetObjectMaterial(tallersito, 2, 18800, "mroadhelix1", "road1-3", 0x00000000);
	SetObjectMaterial(tallersito, 3, 6404, "beafron1_law2", "shingledblue_la", 0x00000000);
	SetObjectMaterial(tallersito, 6, 15034, "genhotelsave", "AH_windows", 0x00000000);
	CreateObject(3293, 1944.42029, -1813.98010, 15.74830,   0.00000, 0.00000, -90.00000, 500.0);
	CreateDynamicObject(19872, 1944.07996, -1813.97302, 10.63642,   0.00000, 0.00000, 90.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(19903, 1939.33850, -1812.41980, 12.49275,   0.00000, 0.00000, -21.89999, 0, 0, -1, 500.0, 500.0);

	//ganton
	tallersito = CreateObject(3292, 2507.74878, -1776.99072, 12.46790,   0.00000, 0.00000, -90.00000, 500.0);
	SetObjectMaterial(tallersito, 0, 9920, "anotherbuildsfe", "gz_vic2d", 0x00000000);
	SetObjectMaterial(tallersito, 1, 9920, "anotherbuildsfe", "gz_vic2d", 0x00000000);
	SetObjectMaterial(tallersito, 2, 18800, "mroadhelix1", "road1-3", 0x00000000);
	SetObjectMaterial(tallersito, 3, 6404, "beafron1_law2", "shingledblue_la", 0x00000000);
	SetObjectMaterial(tallersito, 6, 15034, "genhotelsave", "AH_windows", 0x00000000);
	CreateObject(3293, 2510.41479, -1781.67944, 15.78430,   0.00000, 0.00000, -90.00000, 500.0);
	CreateDynamicObject(19872, 2510.88892, -1781.49744, 10.70938,   0.00000, 0.00000, 90.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(19903, 2505.45996, -1780.29602, 12.58620,   0.00000, 0.00000, 1.32000, 0, 0, -1, 500.0, 500.0);

	//market
	tallersito = CreateObject(3292, 999.16992, -1375.81079, 12.08313,   0.00000, 0.00000, 180.00000, 500.0);
	SetObjectMaterial(tallersito, 0, 9920, "anotherbuildsfe", "gz_vic2d", 0x00000000);
	SetObjectMaterial(tallersito, 1, 9920, "anotherbuildsfe", "gz_vic2d", 0x00000000);
	SetObjectMaterial(tallersito, 2, 18800, "mroadhelix1", "road1-3", 0x00000000);
	SetObjectMaterial(tallersito, 3, 6404, "beafron1_law2", "shingledblue_la", 0x00000000);
	SetObjectMaterial(tallersito, 6, 15034, "genhotelsave", "AH_windows", 0x00000000);
	CreateObject(3293, 994.46582, -1378.48865, 15.29810,   0.00000, 0.00000, 180.00000, 500.0);
	CreateDynamicObject(19872, 994.42932, -1378.19653, 10.39875,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);

	//playa
	tallersito = CreateObject(3292, 425.13089, -1794.84070, 4.57700,   0.00000, 0.00000, 0.00000, 500.0);
	SetObjectMaterial(tallersito, 0, 9920, "anotherbuildsfe", "gz_vic2d", 0x00000000);
	SetObjectMaterial(tallersito, 1, 9920, "anotherbuildsfe", "gz_vic2d", 0x00000000);
	SetObjectMaterial(tallersito, 2, 18800, "mroadhelix1", "road1-3", 0x00000000);
	SetObjectMaterial(tallersito, 3, 6404, "beafron1_law2", "shingledblue_la", 0x00000000);
	SetObjectMaterial(tallersito, 6, 15034, "genhotelsave", "AH_windows", 0x00000000);
	CreateObject(3293, 429.82001, -1792.15564, 7.77253,   0.00000, 0.00000, 0.00000, 500.0);
	CreateDynamicObject(19872, 429.64441, -1792.38184, 2.70694,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(19903, 428.50729, -1797.48047, 4.57540,   0.00000, 0.00000, 78.78004, 0, 0, -1, 500.0, 500.0);

	//corona
	tallersito = CreateObject(3292, 1805.18445, -2045.37378, 12.54282,   0.00000, 0.00000, 180.00000, 500.0);
	SetObjectMaterial(tallersito, 0, 9920, "anotherbuildsfe", "gz_vic2d", 0x00000000);
	SetObjectMaterial(tallersito, 1, 9920, "anotherbuildsfe", "gz_vic2d", 0x00000000);
	SetObjectMaterial(tallersito, 2, 18800, "mroadhelix1", "road1-3", 0x00000000);
	SetObjectMaterial(tallersito, 3, 6404, "beafron1_law2", "shingledblue_la", 0x00000000);
	SetObjectMaterial(tallersito, 6, 15034, "genhotelsave", "AH_windows", 0x00000000);
	CreateObject(3293, 1800.49622, -2048.05786, 15.74280,   0.00000, 0.00000, 180.00000, 500.0);
	CreateDynamicObject(19872, 1800.08911, -2048.43945, 10.69106,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(19903, 1801.62463, -2043.29712, 12.53065,   0.00000, 0.00000, -102.53999, 0, 0, -1, 500.0, 500.0);

	//Las Venturas
	tallersito = CreateObject(3292, 1847.35620, 909.31689, 9.81490,   0.00000, 0.00000, 91.00000, 500.0);
	SetObjectMaterial(tallersito, 0, 9920, "anotherbuildsfe", "gz_vic2d", 0x00000000);
	SetObjectMaterial(tallersito, 1, 9920, "anotherbuildsfe", "gz_vic2d", 0x00000000);
	SetObjectMaterial(tallersito, 2, 18800, "mroadhelix1", "road1-3", 0x00000000);
	SetObjectMaterial(tallersito, 3, 6404, "beafron1_law2", "shingledblue_la", 0x00000000);
	SetObjectMaterial(tallersito, 6, 15034, "genhotelsave", "AH_windows", 0x00000000);
	CreateObject(3293, 1844.60486, 913.96509, 13.04970,   0.00000, 0.00000, 91.00000, 500.0);
	CreateDynamicObject(19872, 1844.52368, 913.92816, 7.94890,   0.00000, 0.00000, 91.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(19903, 1848.82214, 912.13043, 9.85350,   0.00000, 0.00000, -200.00000, 0, 0, -1, 500.0, 500.0);

	//San Fierro - Doherty
	tallersito = CreateObject(3292, -2090.31445, -90.72000, 33.92480,   0.00000, 0.00000, 0.00000, 500.0);
	SetObjectMaterial(tallersito, 0, 9920, "anotherbuildsfe", "gz_vic2d", 0x00000000);
	SetObjectMaterial(tallersito, 1, 9920, "anotherbuildsfe", "gz_vic2d", 0x00000000);
	SetObjectMaterial(tallersito, 2, 18800, "mroadhelix1", "road1-3", 0x00000000);
	SetObjectMaterial(tallersito, 3, 6404, "beafron1_law2", "shingledblue_la", 0x00000000);
	SetObjectMaterial(tallersito, 6, 15034, "genhotelsave", "AH_windows", 0x00000000);
	CreateObject(3293, -2085.63184, -88.05990, 37.27350,   0.00000, 0.00000, 0.00000, 500.0);
	CreateDynamicObject(19872, -2085.62817, -87.85070, 32.19060,   0.00000, 0.00000, 0.00000, 0, 0, -1, 500.0, 500.0);
	CreateDynamicObject(19903, -2087.53247, -92.52910, 34.02400,   0.00000, 0.00000, 76.00000, 0, 0, -1, 500.0, 500.0);


     //- Comandos
    CreateDynamic3DTextLabel("Hospital\n{ffffff}North America Oficial", C_ROJO, -1113.3628,3932.3645,228.6613, 8.0); // bienvenidos al hospital
    CreateDynamic3DTextLabel("(/bandeja)", 					0xffffffff, 2540.0281, -1283.3070, 1043.9797, 8.0); // /bandeja en la prision federal
    CreateDynamic3DTextLabel("San Andreas Police Departament\n{FFFFFF}Radio estatal\n\n{FFFF00}/computador {FFFFFF}para dirigirte a la ciudad.", 				0x0069ffff, 1961.5369,-2399.7751,13.5991, 8.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 9, 20);
    CreateDynamicPickup(19797, 1, 1961.5369,-2399.7751,13.5991, 20, 9); // computador lapd
    CreateDynamic3DTextLabel("{FFFFFF}Banco de San Andreas\n\nIngresa {FFFF00}/banco{FFFFFF} para interactuar.", 					0xffffff00, 822.0089,1.8540,1004.1797, 8.0);
    CreateDynamic3DTextLabel("Movistar TV\n\n{FFFFFF}Equipo de sonido\nPara usarlo ingresa {FFFF00}/directo{FFFFFF}.", 					0xFF0000FF, 256.1315,1762.5151,701.0929, 8.0);
    CreateDynamic3DTextLabel("(/entrenar)", 				0xffffffff, 773.0491, 1.4285, 1000.7209, 8.0);
    CreateDynamic3DTextLabel("(/entrenar)", 				0xffffffff, 653.9918,-1865.1168,5.4609	, 8.0);
    CreateDynamic3DTextLabel("(/practicar)", 				0xffffffff, 767.6719, 13.6320, 1000.7010, 8.0);
    CreateDynamic3DTextLabel("{FFFFFF}San Andreas Police Department\n\nEmbargadero central\nPara embargar un vehiculo ingresa {FFFF00}/embargar{FFFFFF}.", 				0xffffff00, 1658.9924, -1807.1152, 13.5508, 20.0);
    CreateDynamic3DTextLabel("San Andreas Police Department\n{FFFFFF}Tienes una multa pendiente?\n\nPulsa la tecla {FFFF00}N{FFFFFF} para interactuar.", 				0x0069ffff, 234.0532,159.7177,1003.0234, 8.0); // LSPD
    CreateDynamicPickup(19797, 1, 234.0532,159.7177,1003.0234, 3, 3); // multas lapd
    CreateDynamic3DTextLabel("San Andreas Police Department\n{FFFFFF}Tienes una multa pendiente?\n\nPulsa la tecla {FFFF00}N{FFFFFF} para interactuar.", 				0x0069ffff, 250.05, 67.5716, 1003.64, 8.0); // LSPD 2
    CreateDynamicPickup(19797, 1, 250.05, 67.5716, 1003.64, 3, 3); // multas lapd
    CreateDynamic3DTextLabel("{FFFFFF}Bienvenido\nPulsa {ffff00}'H' {ffffff}para interactuar.", 			0xffffff00, 362.0124, 173.3058, 1008.3050, 8.0); // Ayuntamiento
    CreateDynamic3DTextLabel("UBER\n\n{FFFFFF}Central de operaciones\n{FFFF00}/licencia {ffffff}para aceptar el contrato.",					0x5AB6A4FF, -2033.43,-117.526,1035.17, 8); // Licencia UBER
    CreateDynamicPickup(1239, 1, -2033.43,-117.526,1035.17, 9); // UBER central
    CreateDynamic3DTextLabel("(/puerto)", 					0xffffffff, 2795.9546, -2569.3674, 2.9869, 8.0); // Puerto

    CreateDynamic3DTextLabel("{8CE973}Negocio 24/7\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, -23.4566, -55.6323, 1003.5469, 12.0); // 24/7
    CreateDynamic3DTextLabel("{8CE973}Negocio Ropa\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 207.4873, -100.3286, 1005.2578, 12.0); // ropa
    CreateDynamic3DTextLabel("{8CE973}Negocio Restaurante\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, -785.9495, 500.0739, 1371.7422, 12.0); // restaurante
    CreateDynamic3DTextLabel("{8CE973}Negocio Cluckin Bell\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 371.4320, -6.0194, 1001.8589, 12.0); // cluckin bell
    CreateDynamic3DTextLabel("{8CE973}Negocio Pizzeria\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 375.2599, -118.8117, 1001.4995, 12.0); // pizzeriia
    CreateDynamic3DTextLabel("{8CE973}Negocio Burguer Shot\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 377.3137, -67.4423, 1001.5078, 12.0); // habmurer
    CreateDynamic3DTextLabel("{8CE973}Negocio Ammunation\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 308.3979, -141.4581, 999.6016, 12.0); // ammu
    CreateDynamic3DTextLabel("{8CE973}Negocio Peluqueria\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 415.1097, -51.4637, 1001.9000, 12.0); //peluqueria
    CreateDynamic3DTextLabel("{8CE973}Negocio Sex-Shop\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, -103.8922, -22.6771, 1000.7188, 12.0); // sex shop
    CreateDynamic3DTextLabel("{8CE973}Negocio Gasolineria\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, -30.7083, -29.6858, 1003.5078, 12.0); // gasolinera
    CreateDynamic3DTextLabel("{8CE973}Negocio Electronica\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 161.3464, -83.5198, 1001.8989, 12.0); // electronica
    CreateDynamic3DTextLabel("{8CE973}Negocio Bar\n\n{FFFFFF}Pulsa {82BCEC}'N' {FFFFFF} para interactuar.",					0xffffff00, 497.8823, -75.9014, 998.7012, 12.0); // bar
    CreateDynamic3DTextLabel("{8CE973}Negocio Restaurante\n\n{FFFFFF}Pulsa{82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 449.7225, -83.9301, 999.5547, 12.0); // restaurante 2
    CreateDynamic3DTextLabel("{8CE973}Negocio Ferreteria\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 290.2224, -109.6350, 1001.5685, 12.0); // Ferreteria
    CreateDynamic3DTextLabel("{8CE973}Negocio Disco Club\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 499.9653,-19.0419,1000.6719, 12.0); // Alhambra
    CreateDynamic3DTextLabel("{8CE973}Negocio Strip Club\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 1214.8792,-13.2081,1000.9219, 12.0); // Strip club
    CreateDynamic3DTextLabel("{8CE973}Negocio Club Privado\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 1207.2340,-30.3012,1000.9531, 12.0); // Club privatee
    CreateDynamic3DTextLabel("{8CE973}Negocio 24/7\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",							0xffffff00, 1643.5167,1613.2773,1160.8252, 12.0); // 24/7 robable
	CreateDynamic3DTextLabel("{8CE973}Negocio Ropa\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 204.4182, -159.3408, 1000.5279, 12.0); //Didier sachs
	CreateDynamic3DTextLabel("{8CE973}Negocio Ropa\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 207.0711, -129.2703, 1003.5233, 12.0); //Prolaps
	CreateDynamic3DTextLabel("{8CE973}Negocio Ropa\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 203.7999, -43.2282, 1001.8210, 12.0); //sub urban
	CreateDynamic3DTextLabel("{8CE973}Negocio Ropa\n\n{FFFFFF}Pulsa {82BCEC}'N'{FFFFFF} para interactuar.",					0xffffff00, 206.0044, -8.5188, 1001.2266, 12.0); //victim

    CreateDynamic3DTextLabel("(/traficar)",					0xffffffff, 655.2497, -502.9607, 16.3102, 8.0);
	CreateDynamic3DTextLabel("Hospital\n{00CC00}/menuhospital", 0xEBEBEBFF, 1148.2609,-1322.6975,-10.7922, 8.0); // cmd_menuhospital

    CreateDynamic3DTextLabel("San Andreas Police Departament\n\n{FFFFFF}Equipo faccionario\n{FFFF00}/equipo {ffffff}para abrir el dialogo.",					0x0069ffff, 258.5224,78.1989,1003.6406,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 9, 1); // Equipo LAPD
    CreateDynamicPickup(19797, 1, 258.5224,78.1989,1003.6406, 1, 6); // equipo policia
    CreateDynamic3DTextLabel("LVPD\n\n{FFFFFF}Equipo faccionario\n{FFFF00}/equipo {ffffff}para abrir el dialogo.",					0x0069ffff, 219.6902,149.5422,1003.0234, 8.0); // Equipo Sapd LV
    CreateDynamic3DTextLabel("Movistar TV\n\n{FFFFFF}Equipo faccionario\n{FFFF00}/equipo {FFFFFF}para abrir el dialogo.",					0xFF0000FF, 249.2031,1774.6155,701.0859, 8.0); // SAN LS
    CreateDynamic3DTextLabel("(/equipo)",					0xffffffff, 351.6515, 213.3615, 1008.4004, 8.0); // Gobierno
    CreateDynamic3DTextLabel("{66FF00}Militares\n\n{FFFFFF}Equipo faccionario\n{FFFF00}/equipo {ffffff}para abrir el dialogo",					0xffffffff, 248.2357,1859.6606,14.0840, 8.0); //guardia nacional
    CreateDynamic3DTextLabel("{66FF00}Militares\n\n{FFFFFF}Equipo faccionario\n{FFFF00}/equipo {ffffff}para abrir el dialogo",					0xffffffff, 2743.8459,-2453.7400,13.8623, 8.0); //guardia nacional LS
    CreateDynamic3DTextLabel("{66FF00}Sheriff\n\n{FFFFFF}Equipo faccionario\n{FFFF00}/equipo {ffffff}para abrir el dialogo",					0xffffffff, 266.0501,119.1464,1004.6172, 8.0); //sheriff
	//label gasolineras.

	//Mineria
	CreateDynamicPickup(19631, 1, -752.0788,-371.9366,1738.3269); // Picar Carbon
	CreateDynamic3DTextLabel("'Punto de Mineria'\n\n{ffffff}Mineral {baa073}Carbon", 0xFFFF00FF, -752.0788,-371.9366,1738.3269, 8.0);//Mineral Carbon
	CreateDynamicPickup(19631, 1, -761.4437,-402.4356,1736.7665); // Picar Obsidiana
	CreateDynamic3DTextLabel("'Punto de Mineria'\n\n{ffffff}Mineral {990000}Obsidiana", 0xFFFF00FF, -761.4437,-402.4356,1736.7665, 8.0);//Mineral Obsidiana
	CreateDynamicPickup(1239, 1, -750.0787,-377.1798,1738.4974); // Entregar roca
	CreateDynamic3DTextLabel("Presiona {ea2c2c}'ALT'", 0xFFFFFFFF, -750.0787,-377.1798,1738.4974, 8.0);//Procesadora 1
	CreateDynamicPickup(1239, 1, -751.3654,-382.7716,1738.5060); // Entregar roca
	CreateDynamic3DTextLabel("Presiona {ea2c2c}'ALT'", 0xFFFFFFFF, -751.3654,-382.7716,1738.5060, 8.0);//Procesadora 2
	CreateDynamic3DTextLabel("Procesadora\n{FFFFFF}Suelta los minerales aqui.", 0xea2c2cFF, -750.3924,-380.0579,1737.2416+2, 8.0);//texto procesadora 1
	CreateDynamicPickup(19631, 1, 661.2281,135.7510,54.6579); // Picar Plata
	CreateDynamic3DTextLabel("'Punto de Mineria'\n\n{ffffff}Mineral {cccccc}Plata", 0xFFFF00FF, 661.2281,135.7510,54.6579, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 8);//Mineral Plata

	CreateDynamicPickup(19631, 1, 672.7699,155.8111,54.2593); // Picar Diamante
	CreateDynamic3DTextLabel("'Punto de Mineria'\n\n{ffffff}Mineral {cccccc}Diamante", 0xFFFF00FF, 672.7699,155.8111,54.2593, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 8);//Mineral Diamante

	CreateDynamicPickup(1239, 1, 691.9836,139.9159,54.6945, 5, 8); // Entregar roca
	CreateDynamic3DTextLabel("Presiona {ea2c2c}'ALT'", 0xFFFFFFFF, 691.9836,139.9159,54.6945, 8.0);//Procesadora 1
	CreateDynamic3DTextLabel("Procesadora\n{FFFFFF}Suelta los minerales aqui.", 0xea2c2cFF, 693.7542,140.1918,54.3279+1, 8.0);//texto procesadora 1



	//
	CreateDynamicPickup(19197, 1, -727.9954,-337.4093,1739.8827); // salida mina
	CreateDynamic3DTextLabel("{FFFFFF}Mina - Salida", 0xFFFFFF00, -727.9954,-337.4093,1739.8827, 8.0);//salida mina
	CreateDynamicPickup(19197, 1, 608.4077,130.2382,8.3025); // salida mina
	CreateDynamic3DTextLabel("{FFFFFF}Mina - Entrada", 0xFFFFFF00, 608.4077,130.2382,8.3025, 8.0);//salida mina



	//
	CreateDynamicPickup(1239, 1, 605.9418,135.0032,8.3371); // pedir maso
	CreateDynamic3DTextLabel("{FFFFFF}Necesitas un maso?\n{FFFF00}/pedirmaso {FFFFFF}para que te asigne uno el sistema\n\nTienes un error?\n{FFFF00}/reportar [id jugador] [razon]{FFFFFF}.", 0xFFFFFF00, 605.9418,135.0032,8.3371, 8.0);//pedir maso

	///
    CreateDynamic3DTextLabel("(/gob)",						0xffffffff, -2050.8799,-190.1223,35.4445, 8.0);
    CreateDynamic3DTextLabel("(/gob)",						0xffffffff, 218.3815,187.4334,1003.0313, 8.0);
    CreateDynamic3DTextLabel("(/gob)",						0xffffffff, 374.3038,186.4248,1014.1875, 8.0);

     //- Comandos de facciones
    CreateDynamic3DTextLabel("LSPD\n\n{FFFFFF}Equipo faccionario\n{FFFF00}/equipo {ffffff}para abrir el dialogo.",					0x0069ffff, 258.5224,78.1989,1003.6406, 8.0); // Equipo LAPD
    CreateDynamic3DTextLabel("San Andreas Police Departament\n{FFFFFF}Tienes un detenido para procesar?\n\nIngresa {FFFF00}/entregar",					0x36A1B7FF, 2314.0645,2447.0774,3.2734, 8.0); // Arresto LAPD Garage
    CreateDynamic3DTextLabel("{ff0000}ALQAEDA\n{FFFFFF}Peligro! zona muy peligrosa\n\nAqui transitan terroristas, puedes ser sancionado",					0x36A1B7FF, 1028.8734,-359.8045,73.9356, 8.0); // PELIGRO ALQAEDA
    CreateDynamic3DTextLabel("San Andreas Police Departament\n{FFFFFF}Tienes un detenido para procesar?\n\nIngresa {FFFF00}/entregar",					0x36A1B7FF, -1623.6234,660.0409,-5.2422, 8.0); // Arresto LAPD Garage
    CreateDynamic3DTextLabel("San Andreas Police Departament\n{FFFFFF}Tienes un detenido para procesar?\n\nIngresa {FFFF00}/entregar",					0x36A1B7FF, 1560.5967,-1693.8125,5.8906, 8.0); // Arresto LAPD Garage
    CreateDynamic3DTextLabel("San Andreas Police Departament\n{FFFFFF}Tienes un detenido para procesar?\n\nIngresa {FFFF00}/entregar",					0x36A1B7FF, 2255.8445,2474.8198,38.6837, 8.0); // Arresto LAPD AERO LV
    CreateDynamic3DTextLabel("San Andreas Police Departament\n{FFFFFF}Tienes un detenido para procesar?\n\nIngresa {FFFF00}/entregar",					0x36A1B7FF, 1548.9985,-1706.3549,28.3948, 8.0); // Arresto LAPD AERO LS
    CreateDynamic3DTextLabel("San Andreas Police Departament\n{FFFFFF}Tienes un detenido para procesar?\n\nIngresa {FFFF00}/entregar",					0x36A1B7FF, -1688.3605,714.4664,30.6016, 8.0); // Arresto LAPD AERO SF
    CreateDynamic3DTextLabel("San Andreas Police Departament\n{FFFFFF}Tienes un detenido para procesar?\n\nIngresa {FFFF00}/entregar",					0x36A1B7FF, 200.7210, 168.3594, 1002.9638, 8.0); // Arresto LAPD Interior
	CreateDynamic3DTextLabel("Militares\n{FFFFFF}Tienes un detenido para procesar?\n\nIngresa {FFFF00}/entregar",					0x36A1B7FF, 217.5615,1855.1033,12.9325, 8.0); //arrestargn
    CreateDynamic3DTextLabel("Militares\n{FFFFFF}Tienes un detenido para procesar?\n\nIngresa {FFFF00}/entregar",					0x36A1B7FF, 2746.5793,-2470.8628,13.6484, 8.0); //arrestargn
    CreateDynamic3DTextLabel("Sheriff\n{FFFFFF}Tienes un detenido para procesar?\n\nIngresa {FFFF00}/entregar",					0x36A1B7FF, 620.5442,-596.2567,17.2330, 8.0); //arrestarsheriff

	// carpintero
	CreateDynamic3DTextLabel("Presiona\n'{82BCEC}Clic{D6E1EB}'\nPara hacer un mueble", 0xD6E1EBFF, 1876.4457,-1859.1759,13.5781, 8.0);
	CreateDynamic3DTextLabel("Presiona\n'{82BCEC}Clic{D6E1EB}'\nPara hacer un mueble", 0xD6E1EBFF, 1880.4150,-1859.1361,13.5771, 8.0);
	CreateDynamic3DTextLabel("Presiona\n'{82BCEC}Clic{D6E1EB}'\nPara hacer un mueble", 0xD6E1EBFF, 1884.5431,-1859.1453,13.5761, 8.0);
	CreateDynamic3DTextLabel("Presiona\n'{82BCEC}Clic{D6E1EB}'\nPara hacer un mueble", 0xD6E1EBFF, 1889.8762,-1859.0316,13.5748, 8.0);
	CreateDynamic3DTextLabel("Presiona\n'{82BCEC}Clic{D6E1EB}'\nPara hacer un mueble", 0xD6E1EBFF, 1889.8318,-1854.1593,13.5736, 8.0);
	CreateDynamic3DTextLabel("Presiona\n'{82BCEC}Clic{D6E1EB}'\nPara hacer un mueble", 0xD6E1EBFF, 1884.5231,-1854.2139,13.5749, 8.0);
	CreateDynamic3DTextLabel("Presiona\n'{82BCEC}Clic{D6E1EB}'\nPara hacer un mueble", 0xD6E1EBFF, 1880.3518,-1854.1354,13.5759, 8.0);
	CreateDynamic3DTextLabel("Presiona\n'{82BCEC}Clic{D6E1EB}'\nPara hacer un mueble", 0xD6E1EBFF, 1876.4625,-1854.0952,13.5769, 8.0);
	CreateDynamic3DTextLabel("Presiona\n'{82BCEC}Clic{D6E1EB}'\nPara hacer un mueble", 0xD6E1EBFF, 1876.4602,-1849.1450,13.5757, 8.0);
	CreateDynamic3DTextLabel("Presiona\n'{82BCEC}Clic{D6E1EB}'\nPara hacer un mueble", 0xD6E1EBFF, 1880.3745,-1849.1436,13.5747, 8.0);
	CreateDynamic3DTextLabel("Presiona\n'{82BCEC}Clic{D6E1EB}'\nPara hacer un mueble", 0xD6E1EBFF, 1884.5364,-1849.1409,13.5737, 8.0);
	CreateDynamic3DTextLabel("Presiona\n'{82BCEC}Clic{D6E1EB}'\nPara hacer un mueble", 0xD6E1EBFF, 1889.8585,-1849.1438,13.5724, 8.0);

	// aserrador
    CreateDynamic3DTextLabel("Arbol(1)\n\n{FFFFFF}Pulsa {82BCEC}'Clic' {FFFFFF}para talar el arbol.", 0xFF4F33FF, -441.13446, -1767.01123, 6.06064, 8.0);
    CreateDynamic3DTextLabel("Arbol(2)\n\n{FFFFFF}Pulsa {82BCEC}'Clic' {FFFFFF}para talar el arbol.", 0xFF4F33FF, -432.12009, -1785.66162, 3.72014, 8.0);
    CreateDynamic3DTextLabel("Arbol(3)\n\n{FFFFFF}Pulsa {82BCEC}'Clic' {FFFFFF}para talar el arbol.", 0xFF4F33FF, -419.71930, -1793.72607, 3.42763, 8.0);
    CreateDynamic3DTextLabel("Arbol(4)\n\n{FFFFFF}Pulsa {82BCEC}'Clic' {FFFFFF}para talar el arbol.", 0xFF4F33FF, -409.08514, -1794.17078, 3.07774, 8.0);
    CreateDynamic3DTextLabel("Arbol(5)\n\n{FFFFFF}Pulsa {82BCEC}'Clic' {FFFFFF}para talar el arbol.", 0xFF4F33FF, -404.41458, -1782.54700, 3.10609, 8.0);
    CreateDynamic3DTextLabel("Arbol(6)\n\n{FFFFFF}Pulsa {82BCEC}'Clic' {FFFFFF}para talar el arbol.", 0xFF4F33FF, -398.54572, -1769.50366, 4.84904, 8.0);
    CreateDynamic3DTextLabel("Arbol(7)\n\n{FFFFFF}Pulsa {82BCEC}'Clic' {FFFFFF}para talar el arbol.", 0xFF4F33FF, -393.60931, -1792.14294, 3.10774, 8.0);

    //Fabrica de armas
	CreateDynamic3DTextLabel("Ingresa '{ff7575}/fabricar{D6E1EB}' abrir el menu.", 0xD6E1EBFF, 1393.5485,1043.5651,1464.2018, 8.0);//1 mesa fabrica
	CreateDynamic3DTextLabel("Ingresa '{ff7575}/fabricar{D6E1EB}' abrir el menu.", 0xD6E1EBFF, 1393.4978,1041.1793,1464.2018, 8.0);//2 mesa fabrica
	CreateDynamic3DTextLabel("Ingresa '{ff7575}/fabricar{D6E1EB}' abrir el menu.", 0xD6E1EBFF, 1393.4574,1038.8839,1464.2018, 8.0);//3 mesa fabrica
	CreateDynamic3DTextLabel("Ingresa '{ff7575}/fabricar{D6E1EB}' abrir el menu.", 0xD6E1EBFF, 1393.4114,1036.4785,1464.2018, 8.0);//4 mesa fabrica
	CreateDynamic3DTextLabel("Ingresa '{ff7575}/fabricar{D6E1EB}' abrir el menu.", 0xD6E1EBFF, 1396.0099,1036.4309,1464.2018, 8.0);//5 mesa fabrica
	CreateDynamic3DTextLabel("Ingresa '{ff7575}/fabricar{D6E1EB}' abrir el menu.", 0xD6E1EBFF, 1396.0565,1038.7504,1464.2018, 8.0);//6 mesa fabrica
	CreateDynamic3DTextLabel("Ingresa '{ff7575}/fabricar{D6E1EB}' abrir el menu.", 0xD6E1EBFF, 1396.0986,1041.1199,1464.2018, 8.0);//7 mesa fabrica
	CreateDynamic3DTextLabel("Ingresa '{ff7575}/fabricar{D6E1EB}' abrir el menu.", 0xD6E1EBFF, 1396.1481,1043.5350,1464.2018, 8.0);//8 mesa fabrica

    //Motos de renta
    //ls
    CreateDynamic3DTextLabel("Renta de Motos Faggio L.A\n{FFFFFF}Presiona {FFFF00}'Y'", 0x1EB032FF, 1155.0530,-1734.1528,13.7734, 8.0);//1
    CreateDynamicPickup(19134,23,1155.0530,-1734.1528,13.7734);//1
    CreateDynamic3DTextLabel("Renta de Motos Faggio L.A\n{FFFFFF}Presiona {FFFF00}'Y'", 0x1EB032FF, 1814.5594,-1876.3534,13.5781, 8.0);//2
    CreateDynamicPickup(19134,23,1814.5594,-1876.3534,13.5781);//2
    CreateDynamic3DTextLabel("Renta de Motos Faggio L.A\n{FFFFFF}Presiona {FFFF00}'Y'", 0x1EB032FF, 2407.2253,-1530.8224,23.9922, 8.0);//3
    CreateDynamicPickup(19134,23,2407.2253,-1530.8224,23.9922);//3
    CreateDynamic3DTextLabel("Renta de Motos Faggio L.A\n{FFFFFF}Presiona {FFFF00}'Y'", 0x1EB032FF, 1212.4705,-1327.8193,13.5601, 8.0);//4
    CreateDynamicPickup(19134,23,1212.4705,-1327.8193,13.5601);//4
    CreateDynamic3DTextLabel("Renta de Motos Faggio L.A\n{FFFFFF}Presiona {FFFF00}'Y'", 0x1EB032FF, 515.4665,138.4498,24.1811, 8.0);//5
    CreateDynamicPickup(19134,23,515.4665,138.4498,24.1811);//5
    CreateDynamic3DTextLabel("Renta de Motos Faggio L.A\n{FFFFFF}Presiona {FFFF00}'Y'", 0x1EB032FF, 2407.7251,-2096.6748,13.5469, 8.0);//6
    CreateDynamicPickup(19134,23,2407.7251,-2096.6748,13.5469);//6
    CreateDynamic3DTextLabel("Renta de Motos Faggio L.A\n{FFFFFF}Presiona {FFFF00}'Y'", 0x1EB032FF, 1870.0323,-1178.6909,23.8281, 8.0);//7
    CreateDynamicPickup(19134,23,1870.0323,-1178.6909,23.8281);//7
    CreateDynamic3DTextLabel("Renta de Motos Faggio L.A\n{FFFFFF}Presiona {FFFF00}'Y'", 0x1EB032FF, 1436.2965,-2277.9526,13.5469, 8.0);//8
    CreateDynamicPickup(19134,23,1436.2965,-2277.9526,13.5469);//8
    //lv
    CreateDynamic3DTextLabel("Renta de Motos Faggio L.V\n{FFFFFF}Presiona {FFFF00}'Y'", 0x1EB032FF, 1083.5105,1367.4147,10.8203, 8.0);//1
    CreateDynamicPickup(19134,23,1083.5105,1367.4147,10.8203);//1
    CreateDynamic3DTextLabel("Renta de Motos Faggio L.V\n{FFFFFF}Presiona {FFFF00}'Y'", 0x1EB032FF, 1641.9050,825.2701,6.8314, 8.0);//2
    CreateDynamicPickup(19134,23,1641.9050,825.2701,6.8314);//2
    CreateDynamic3DTextLabel("Renta de Motos Faggio L.V\n{FFFFFF}Presiona {FFFF00}'Y'", 0x1EB032FF, 2084.9177,883.6021,7.3590, 8.0);//3
    CreateDynamicPickup(19134,23,2084.9177,883.6021,7.3590);//3
    CreateDynamic3DTextLabel("Renta de Motos Faggio L.V\n{FFFFFF}Presiona {FFFF00}'Y'", 0x1EB032FF, 2112.7393,2005.6913,10.8203, 8.0);//4
    CreateDynamicPickup(19134,23,2112.7393,2005.6913,10.8203);//4
    CreateDynamic3DTextLabel("Renta de Motos Faggio L.V\n{FFFFFF}Presiona {FFFF00}'Y'", 0x1EB032FF, 2306.9006,2406.0198,10.8203, 8.0);//5
    CreateDynamicPickup(19134,23,2306.9006,2406.0198,10.8203);//5
    CreateDynamic3DTextLabel("Renta de Motos Faggios L.V\n{FFFFFF}Presiona {FFFF00}'Y'", 0x1EB032FF, 1625.8264,1866.6997,10.8203, 8.0);//6
    CreateDynamicPickup(19134,23,1625.8264,1866.6997,10.8203);//6
    CreateDynamic3DTextLabel("Renta de Motos Faggio L.V\n{FFFFFF}Presiona {FFFF00}'Y'", 0x1EB032FF, 1778.6791,1420.3652,6.8552, 8.0);//7
    CreateDynamicPickup(19134,23,1778.6791,1420.3652,6.8552);//7

     //- Premium/Vip
    CreateDynamic3DTextLabel("San Andreas - Salon VIP\n\n{FFFFFF}Deseas retirar una mejora de tu membresia?\nIngresa {FFFF00}/casillero {FFFFFF}para abrir el dialogo.", 0xEDBA1AFF, 798.7003,-1416.3333,1016.4688, 8.0); // /casillero
    CreateDynamic3DTextLabel("San Andreas - Tienda de prendas\n{FFFFFF}Este es el lugar para obtener prendas unicas.\n\nIngresa {FFFF00}/prendas {FFFFFF}para abrir el dialogo.", 0xEDBA1AFF, 802.4553,-1419.4771,1016.4688, 8.0); // /prendas
	//Unity
	CreateDynamicObject(8843, 1833.82654, -1866.70361, 12.37470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8843, 1832.83936, -1866.59387, 12.29511,   0.78000, 0.36000, -89.76001);
	CreateDynamicObject(4983, 1958.31946, -1867.72205, 23.68358,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19952, 1831.08179, -1859.33728, 12.57453,   0.00000, 0.00000, -90.84000);
	CreateDynamicObject(1216, 1831.25012, -1849.94263, 13.17634,   0.00000, 0.00000, -92.88002);
	CreateDynamicObject(1234, 1831.34399, -1847.73206, 13.95156,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1832.75989, -1849.37366, 18.33858,   0.00000, 0.00000, -61.01999);
	CreateDynamicObject(1342, 1832.51416, -1837.10242, 13.59094,   0.00000, 0.00000, -180.54005);
	CreateDynamicObject(1367, 1833.24548, -1845.85168, 13.11722,   0.00000, 0.00000, -91.37998);
	CreateDynamicObject(19425, 1835.10632, -1853.18164, 12.38724,   0.00000, 0.00000, 90.36000);
	CreateDynamicObject(19425, 1838.30005, -1853.18005, 12.38720,   0.00000, 0.00000, 90.36000);
	CreateDynamicObject(19425, 1841.50000, -1853.18005, 12.38720,   0.00000, 0.00000, 90.36000);
	CreateDynamicObject(1215, 1835.05762, -1851.10803, 12.92701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1835.05762, -1851.10803, 12.92701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1838.25818, -1851.13293, 12.92701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1841.45898, -1851.11804, 12.92701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1211, 1828.80566, -1856.04028, 13.17402,   0.00000, 0.00000, -88.08002);
	//hitmanhacienda
	CreateDynamicObject(987, 2369.14526, -689.87183, 127.82380,   0.00000, 0.00000, 8.00000);
	CreateDynamicObject(987, 2357.21753, -691.49902, 130.18381,   0.00000, 0.00000, 8.00000);
	CreateDynamicObject(987, 2345.30273, -693.14410, 131.18381,   0.00000, 0.00000, 8.00000);
	CreateDynamicObject(987, 2337.06323, -684.14789, 131.80380,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(987, 2335.96631, -672.00446, 130.80380,   0.00000, 0.00000, -84.00000);
	CreateDynamicObject(987, 2335.54712, -659.95099, 129.14380,   0.00000, 0.00000, -86.00000);
	CreateDynamicObject(987, 2335.25830, -647.87366, 128.46381,   0.00000, 0.00000, -88.00000);
	CreateDynamicObject(987, 2335.98267, -635.57953, 128.90379,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14467, 2359.23877, -646.18762, 131.13300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(694, 2433.92334, -653.08997, 127.27190,   357.00000, 0.00000, 1.00000);
	CreateDynamicObject(694, 2448.39111, -691.84497, 124.67190,   356.85840, 0.00000, -2.54280);
	CreateDynamicObject(694, 2397.23901, -760.08258, 125.67190,   356.85840, 0.00000, -2.54280);
	CreateDynamicObject(791, 2313.22754, -678.86353, 127.44060,   3.14160, 0.00000, 0.95740);
	CreateDynamicObject(3594, 2344.19507, -680.74298, 133.26300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3594, 2348.20703, -687.48572, 133.08299,   10.00000, 0.00000, 55.00000);
	CreateDynamicObject(1551, 2346.30688, -685.35358, 133.96170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1551, 2344.94849, -682.87329, 133.74170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1551, 2350.82324, -688.50018, 133.06171,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(790, 2361.08252, -716.95795, 126.84375,   356.85840, 0.00000, -0.37339);
	CreateDynamicObject(18259, 2349.20142, -654.87360, 128.45840,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(638, 2361.08350, -645.74902, 127.73330,   0.00000, 0.00000, 2.00000);
	CreateDynamicObject(638, 2361.21729, -648.65338, 127.69330,   0.00000, 0.00000, 2.00000);
	CreateDynamicObject(638, 2361.29224, -651.52283, 127.69330,   0.00000, 0.00000, 2.00000);
	CreateDynamicObject(638, 2361.43286, -654.37860, 127.69330,   0.00000, 0.00000, 2.00000);
	CreateDynamicObject(638, 2358.75244, -659.03802, 127.81330,   0.00000, 0.00000, 2.00000);
	CreateDynamicObject(638, 2358.82471, -661.98718, 127.87330,   0.00000, 0.00000, 2.00000);
	CreateDynamicObject(19381, 2353.52832, -650.03235, 127.03250,   0.00000, 89.00000, 0.00000);
	CreateDynamicObject(19381, 2352.74536, -658.95782, 127.03250,   0.00000, 89.00000, 0.00000);
	CreateDynamicObject(638, 2356.97144, -662.98859, 128.01331,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(638, 2354.10107, -663.10278, 128.01331,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(3092, 2354.47266, -646.45862, 130.08490,   0.00000, 0.00000, -102.00000);
	CreateDynamicObject(987, 2402.11938, -685.58893, 125.38380,   0.00000, 0.00000, 8.00000);
	CreateDynamicObject(987, 2414.25635, -683.82397, 125.38380,   0.00000, 0.00000, 95.00000);
	CreateDynamicObject(987, 2413.27368, -671.75110, 125.62380,   0.00000, 0.00000, 95.00000);
	CreateDynamicObject(987, 2412.46313, -659.67181, 125.66380,   0.00000, 0.00000, 95.00000);
	CreateDynamicObject(694, 2438.75049, -624.52606, 130.67188,   356.85840, 0.00000, -2.54277);
	CreateDynamicObject(694, 2437.92017, -701.56238, 128.51190,   356.85840, 0.00000, -2.54280);
	CreateDynamicObject(987, 2411.66138, -647.70129, 124.62380,   0.00000, 0.00000, 93.00000);
	CreateDynamicObject(987, 2411.13110, -635.59912, 122.86380,   0.00000, 0.00000, 104.00000);
	CreateDynamicObject(987, 2400.25659, -619.76593, 122.64380,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(987, 2389.37012, -614.71051, 122.84380,   0.00000, 0.00000, 184.00000);
	CreateDynamicObject(790, 2349.41577, -600.15637, 122.71410,   356.85840, 0.00000, -2.14540);
	CreateDynamicObject(987, 2377.25562, -615.55884, 123.74380,   0.00000, 0.00000, 184.00000);
	CreateDynamicObject(987, 2365.26880, -616.32458, 124.74380,   0.00000, 0.00000, 184.00000);
	CreateDynamicObject(790, 2372.52417, -625.23676, 121.71410,   356.85840, 0.00000, -2.14540);
	CreateDynamicObject(987, 2331.25488, -624.55206, 128.90379,   0.00000, 0.00000, -65.00000);
	CreateDynamicObject(987, 2353.23975, -616.87720, 125.74380,   0.00000, 0.00000, 184.00000);
	CreateDynamicObject(987, 2341.06104, -617.44342, 127.66380,   0.00000, 0.00000, 217.00000);
	CreateDynamicObject(1215, 2393.42383, -693.99609, 125.34730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2406.27930, -691.30951, 124.94730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 2430.27490, -678.35822, 124.69180,   0.00000, 0.00000, 185.00000);
	CreateDynamicObject(2036, 2344.92505, -654.89691, 129.28230,   0.00000, 0.00000, 103.00000);
	CreateDynamicObject(2035, 2344.97388, -654.38989, 129.27029,   0.00000, 0.00000, 106.00000);
	CreateDynamicObject(2044, 2344.82813, -653.44098, 129.28951,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(2034, 2345.03589, -653.89264, 129.29449,   0.00000, 0.00000, 98.00000);
	CreateDynamicObject(3267, 2349.33911, -649.56812, 133.99181,   0.00000, 0.00000, 2.00000);
	CreateDynamicObject(3267, 2349.58716, -657.56372, 133.99181,   0.00000, 0.00000, 178.00000);
	CreateDynamicObject(1242, 2344.96460, -653.32788, 128.94839,   0.00000, 0.00000, 265.00000);
	CreateDynamicObject(1242, 2344.92847, -653.70624, 128.94839,   0.00000, 0.00000, 265.00000);
	CreateDynamicObject(1242, 2344.99707, -654.05402, 128.92841,   0.00000, 0.00000, 265.00000);
	CreateDynamicObject(2064, 2357.99390, -664.98297, 128.84441,   -16.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 2375.53149, -667.83752, 131.18111,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2358.03931, -661.60718, 132.02420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2357.82031, -650.51312, 132.04420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 2322.05737, -644.11560, 130.41969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(790, 2444.76099, -556.66138, 105.71410,   356.85840, 0.00000, -2.14540);
	CreateDynamicObject(644, 2379.35620, -667.55408, 127.60270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(644, 2377.12036, -664.75568, 127.68270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(644, 2373.46191, -665.72131, 127.76270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2063, 2344.94312, -654.27026, 129.33549,   0.00000, 0.00000, 92.00000);
	CreateDynamicObject(1822, 2345.68066, -648.80157, 128.49710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1727, 2345.57739, -646.50568, 128.53310,   0.00000, 0.00000, 2.00000);
	CreateDynamicObject(1727, 2348.00146, -647.60559, 128.53310,   0.00000, 0.00000, -89.00000);
	CreateDynamicObject(1670, 2346.09009, -648.47339, 129.01019,   0.00000, 0.00000, -18.00000);
	CreateDynamicObject(2035, 2346.23242, -648.18213, 129.01790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1310, 2345.06030, -656.09808, 128.63181,   0.00000, 0.00000, 287.00000);
	CreateDynamicObject(1252, 2345.01563, -655.14398, 128.93179,   0.00000, 0.00000, 105.00000);
	CreateDynamicObject(2035, 2344.91919, -654.94733, 129.69890,   0.00000, 0.00000, 97.00000);
	CreateDynamicObject(2045, 2344.90967, -655.02887, 130.15601,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2045, 2345.00415, -654.53131, 130.15601,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(1650, 2344.89722, -653.70233, 130.41870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1650, 2344.90796, -653.32245, 130.41870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2057, 2344.90356, -653.52332, 129.86259,   0.00000, 0.00000, 76.00000);
	CreateDynamicObject(16782, 2347.27002, -661.44232, 1.98660,   0.00000, 0.00000, 92.00000);
	CreateDynamicObject(16782, 2347.24414, -661.44318, 130.27541,   0.00000, 0.00000, 93.00000);
	CreateDynamicObject(1829, 2350.02539, -646.57172, 129.01350,   0.00000, 0.00000, 2.00000);
	CreateDynamicObject(2040, 2350.98340, -660.44348, 129.56171,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2041, 2352.75244, -660.30798, 129.65530,   0.00000, 0.00000, 193.00000);
	CreateDynamicObject(941, 2351.74072, -660.52826, 128.98480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2040, 2351.20703, -660.73450, 129.56171,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2040, 2351.46362, -660.41449, 129.56171,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2041, 2352.54492, -660.55450, 129.65530,   0.00000, 0.00000, 193.00000);
	CreateDynamicObject(2041, 2352.16382, -660.26099, 129.65530,   0.00000, 0.00000, 193.00000);
	CreateDynamicObject(2061, 2350.31616, -661.18262, 128.81750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2061, 2350.46045, -660.97491, 128.83749,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(2061, 2350.36963, -660.71851, 128.83749,   0.00000, 0.00000, 185.00000);
	CreateDynamicObject(1636, 2352.74634, -660.39502, 128.61501,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3057, 2353.24951, -648.22357, 128.84821,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3057, 2353.26025, -649.75018, 128.84821,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3057, 2353.31348, -651.40448, 128.84821,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(790, 2385.73340, -593.08405, 121.71410,   356.85840, 0.00000, -2.14540);
	CreateDynamicObject(790, 2367.58936, -667.95862, 125.67117,   356.85840, 0.00000, -2.14540);
	CreateDynamicObject(1280, 2378.64063, -641.91870, 126.62000,   0.00000, 0.00000, 95.00000);
	CreateDynamicObject(1280, 2373.32129, -642.46051, 126.80000,   0.00000, 0.00000, 95.00000);
	CreateDynamicObject(987, 2390.24561, -687.30060, 125.25111,   0.00000, 0.00000, 8.00000);
	CreateDynamicObject(987, 2378.47046, -688.72858, 125.25111,   0.00000, 0.00000, 8.00000);



	//Tienda Electronica Objetos
	CreateDynamicObject(8947, 1792.03699, -1714.95605, 9.48800, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8947, 1766.79895, -1714.98596, 9.44400, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 1782.36206, -1718.17200, 12.51600, 0.00000, 0.00000, 179.20000);
	CreateDynamicObject(2238, 1783.74402, -1705.86597, 13.69000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2118, 1766.03406, -1719.47095, 12.48800, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2118, 1796.55005, -1719.14099, 12.48800, 0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2118, 1794.60205, -1719.18396, 12.48800, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2111, 1784.09802, -1705.94897, 12.89500, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2403, 1793.02502, -1708.91895, 12.56400, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2317, 1772.30396, -1713.25500, 13.32500, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2229, 1783.69299, -1718.07800, 16.76200, 0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2229, 1778.06299, -1718.07104, 16.76200, 0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2226, 1766.59302, -1719.38904, 13.22900, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2224, 1768.54102, -1719.82996, 13.24400, 0.00000, 0.00000, 20.00000);
	CreateDynamicObject(2315, 1771.43005, -1709.50305, 12.58100, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 1773.84998, -1709.50305, 12.58100, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 1785.50000, -1708.97998, 12.63300, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 1776.06897, -1713.19495, 12.58100, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 1773.65295, -1713.19495, 12.58100, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 1771.22900, -1713.19495, 12.58100, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 1777.46997, -1709.29797, 13.05100, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2226, 1776.18701, -1709.51697, 13.03500, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2227, 1775.04004, -1709.14905, 13.06400, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2230, 1772.49304, -1709.23901, 13.04800, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2231, 1773.45300, -1709.22998, 13.07200, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2231, 1772.92603, -1709.22498, 13.07200, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2230, 1773.97205, -1709.22498, 13.04800, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2233, 1793.47998, -1718.70496, 13.27500, 0.00000, 0.00000, -34.00000);
	CreateDynamicObject(2233, 1777.09705, -1712.74902, 13.06700, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2296, 1763.30603, -1714.89697, 12.48400, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2297, 1770.57605, -1703.85205, 12.46300, 0.00000, 0.00000, -45.00000);
	CreateDynamicObject(2316, 1774.97900, -1713.22302, 13.30700, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2318, 1773.63098, -1713.26404, 13.30200, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2317, 1764.67200, -1718.88098, 13.51700, 0.00000, 0.00000, -40.00000);
	CreateDynamicObject(2322, 1797.00806, -1718.79297, 13.57900, 0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2385, 1789.01294, -1703.47302, 12.59300, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2385, 1786.43298, -1703.45996, 12.59300, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18865, 1790.35498, -1703.75305, 13.09600, 54.00000, 0.00000, 0.00000);
	CreateDynamicObject(19513, 1789.59595, -1703.73596, 13.10500, 54.00000, 0.00000, 0.00000);
	CreateDynamicObject(18871, 1790.30396, -1703.72803, 13.53600, 54.00000, 0.00000, 0.00000);
	CreateDynamicObject(18872, 1789.55103, -1703.72205, 13.54000, 54.00000, 0.00000, 0.00000);
	CreateDynamicObject(18873, 1788.90198, -1703.74902, 13.09500, 54.00000, 0.00000, 0.00000);
	CreateDynamicObject(18874, 1788.87402, -1703.76001, 13.54000, 54.00000, 0.00000, 0.00000);
	CreateDynamicObject(18869, 1790.39502, -1703.78003, 12.66900, 54.00000, 0.00000, 0.00000);
	CreateDynamicObject(18866, 1789.62903, -1703.75195, 12.67700, 54.00000, 0.00000, 0.00000);
	CreateDynamicObject(330, 1788.96594, -1703.76404, 12.63700, 54.00000, 0.00000, -180.00000);
	CreateDynamicObject(19421, 1787.77002, -1703.79700, 13.07200, 54.00000, 0.00000, 0.00000);
	CreateDynamicObject(19421, 1787.77002, -1703.79700, 13.52800, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19422, 1787.03101, -1703.72302, 13.08000, 54.00000, 0.00000, 0.00000);
	CreateDynamicObject(19422, 1787.03101, -1703.72302, 13.51200, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19423, 1786.33899, -1703.76294, 13.07200, 54.00000, 0.00000, 0.00000);
	CreateDynamicObject(19423, 1786.33899, -1703.76294, 13.51200, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19424, 1787.74695, -1703.83801, 12.64500, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19424, 1787.06494, -1703.81702, 12.64500, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19424, 1786.33997, -1703.81201, 12.64500, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2100, 1783.91504, -1708.86804, 12.64000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 1776.25000, -1709.50305, 12.58100, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 1787.91602, -1708.97900, 12.63300, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 1788.11304, -1713.44299, 12.63300, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 1785.66394, -1713.45605, 12.63300, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2102, 1786.44702, -1709.11206, 13.05900, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2103, 1795.21802, -1719.25903, 13.28500, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2104, 1784.54895, -1713.06494, 12.68200, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2202, 1798.15100, -1711.11694, 12.58600, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2202, 1798.16199, -1713.33997, 12.58600, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2422, 1788.68701, -1713.58496, 13.07200, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2424, 1780.56494, -1703.85706, 12.47000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2424, 1778.62903, -1705.52905, 12.47600, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2424, 1777.69897, -1705.52905, 12.47600, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2424, 1776.76904, -1705.52905, 12.47600, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2424, 1775.83899, -1705.52905, 12.47600, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2423, 1774.81995, -1705.45996, 12.48000, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2423, 1780.49097, -1705.53503, 12.48000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2424, 1779.56006, -1705.53101, 12.47600, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2424, 1780.56494, -1704.50500, 12.47600, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2475, 1781.12598, -1711.79602, 12.68900, 0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2475, 1780.59998, -1712.02698, 12.68900, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2489, 1780.87903, -1711.57800, 14.33100, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2490, 1780.78503, -1711.62598, 13.62200, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2513, 1780.79102, -1711.59900, 12.92300, 0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2513, 1780.81104, -1712.25598, 12.92300, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2489, 1780.87000, -1712.21106, 14.33100, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2490, 1780.90503, -1712.20605, 13.62200, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2941, 1779.46802, -1705.59302, 13.85600, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2941, 1777.54797, -1705.59900, 13.85600, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2941, 1775.77100, -1705.59302, 13.85600, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2921, 1783.80798, -1718.03296, 18.60100, 0.00000, 0.00000, -62.00000);
	CreateDynamicObject(2118, 1768.03003, -1719.23706, 12.48800, 0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2118, 1764.33496, -1718.51099, 12.48800, 0.00000, 0.00000, -40.00000);
	CreateDynamicObject(2322, 1784.25403, -1706.20496, 13.57900, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2103, 1788.63403, -1709.01794, 13.03500, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2118, 1792.77002, -1718.67700, 12.48800, 0.00000, 0.00000, -40.00000);
	CreateDynamicObject(2233, 1777.68604, -1712.67798, 13.06700, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18608, 1774.52502, -1710.98999, 18.00500, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18608, 1785.84094, -1711.06897, 18.10900, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(367, 1763.87695, -1708.77905, 13.29800, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 1764.41602, -1707.40601, 13.29800, 0.00000, 0.00000, 62.00000);
	CreateDynamicObject(369, 1766.42603, -1705.18701, 13.24800, 54.00000, 0.00000, 0.00000);
	CreateDynamicObject(370, 1796.93799, -1706.98804, 13.53500, 0.00000, 0.00000, 129.00000);
	CreateDynamicObject(369, 1765.25500, -1706.05505, 13.32600, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(341, 1794.55103, -1704.76099, 13.35100, 0.00000, 0.00000, -16.00000);
	CreateDynamicObject(2606, 1787.21997, -1713.42102, 13.28300, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2691, 1783.81104, -1703.50903, 15.66600, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2692, 1797.80005, -1716.28296, 13.34500, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2690, 1786.50903, -1718.05005, 13.73000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1785.92896, -1718.03699, 13.73000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2698, 1767.69897, -1711.40796, 13.58400, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2698, 1793.34094, -1710.85596, 13.58400, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2700, 1773.77502, -1717.77100, 16.47500, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2700, 1775.30396, -1717.79895, 16.52500, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2778, 1772.85803, -1717.63098, 12.56600, 0.00000, 0.00000, -181.00000);
	CreateDynamicObject(2778, 1771.74695, -1717.63794, 12.56600, 0.00000, 0.00000, -181.00000);
	CreateDynamicObject(2779, 1789.38403, -1717.56201, 12.65700, 0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2779, 1790.38501, -1717.56897, 12.65700, 0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1491, 1779.33801, -1718.14502, 12.52700, 0.00000, 0.00000, 0.00000);
	
	//mercado Negro
	CreateDynamicObject(19377, 2493.01733, -2048.62524, 7.30562,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2493.00317, -2049.71875, 7.30562,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(930, 2515.70898, -2054.11255, 6.00084,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(930, 2514.54419, -2054.17114, 6.00084,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(930, 2515.12085, -2053.50073, 6.00084,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(925, 2511.26636, -2053.52881, 7.10707,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(925, 2508.88135, -2053.49341, 7.23808,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(939, 2506.75903, -2045.06274, 8.75507,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(939, 2511.89063, -2044.85779, 8.48125,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19922, 2522.13477, -2044.47766, 5.26676,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19922, 2519.01196, -2044.46631, 5.26676,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(926, 2523.78198, -2044.31812, 5.45044,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(926, 2523.22314, -2044.44128, 5.45044,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(926, 2523.79028, -2044.89929, 5.45044,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(926, 2523.29980, -2045.28088, 5.45044,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(926, 2524.32031, -2044.32092, 5.45044,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1370, 2525.18872, -2044.14954, 5.34106,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1370, 2525.89868, -2044.10596, 5.34106,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3092, 2501.19580, -2044.07788, 9.82210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1440, 2547.26172, -2053.77612, 3.77494,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3884, 2520.54736, -2053.14868, 4.76945,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19922, 2526.24146, -2053.82104, 4.76028,   0.00000, 4.00000, 0.00000);
	CreateDynamicObject(19922, 2529.34155, -2053.82153, 4.54836,   0.00000, 4.00000, 0.00000);
	CreateDynamicObject(370, 2525.18384, -2053.76416, 5.85120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(373, 2526.09204, -2054.21387, 5.96446,   -26.00000, -60.00000, 98.00000);
	CreateDynamicObject(373, 2526.41089, -2053.66064, 5.96446,   -26.00000, -60.00000, 98.00000);
	CreateDynamicObject(371, 2526.68188, -2054.23071, 5.67816,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(371, 2526.82373, -2053.76465, 5.67816,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19914, 2527.03271, -2053.27686, 5.53540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19914, 2527.16235, -2053.54395, 5.48511,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(344, 2527.48804, -2054.13330, 5.64535,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(344, 2527.36206, -2054.26782, 5.64535,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(344, 2527.24658, -2054.14063, 5.64535,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(337, 2528.13110, -2054.42896, 6.27094,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(337, 2527.66943, -2054.42896, 6.27094,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(337, 2527.20874, -2054.45068, 6.27094,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(330, 2527.62817, -2053.85938, 5.46257,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(330, 2527.48877, -2053.79858, 5.46257,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(341, 2527.85156, -2054.32910, 5.53518,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(341, 2528.48315, -2054.08252, 5.53518,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, 2528.17480, -2053.70215, 5.44464,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, 2528.03687, -2053.59937, 5.44464,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, 2528.19531, -2053.56958, 5.44464,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, 2528.07642, -2053.46069, 5.44464,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, 2528.18457, -2053.40503, 5.44464,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(349, 2517.99731, -2044.12756, 6.10409,   110.00000, 16.00000, -6.00000);
	CreateDynamicObject(349, 2518.02417, -2044.42920, 6.10409,   110.00000, 16.00000, -6.00000);
	CreateDynamicObject(350, 2517.80542, -2044.61206, 6.05810,   81.00000, 0.00000, 6.00000);
	CreateDynamicObject(350, 2518.21729, -2044.83435, 6.05810,   81.00000, 0.00000, 6.00000);
	CreateDynamicObject(350, 2518.61401, -2045.01953, 6.05810,   81.00000, 0.00000, 6.00000);
	CreateDynamicObject(351, 2519.34131, -2044.10498, 6.12260,   99.00000, 16.00000, 0.00000);
	CreateDynamicObject(351, 2519.26343, -2044.45496, 6.10351,   99.00000, 16.00000, 0.00000);
	CreateDynamicObject(352, 2519.16626, -2044.77979, 6.06344,   90.00000, 6.00000, 0.00000);
	CreateDynamicObject(352, 2519.91919, -2044.91504, 6.06344,   90.00000, 6.00000, 0.00000);
	CreateDynamicObject(355, 2520.95044, -2044.06213, 6.11246,   90.00000, 8.00000, 0.00000);
	CreateDynamicObject(355, 2520.90894, -2044.44055, 6.11246,   90.00000, 8.00000, 0.00000);
	CreateDynamicObject(355, 2520.98779, -2044.82544, 6.11246,   90.00000, 8.00000, 0.00000);
	CreateDynamicObject(356, 2522.29883, -2044.04858, 6.08384,   90.00000, 10.00000, 0.00000);
	CreateDynamicObject(356, 2522.21899, -2044.45313, 6.08384,   90.00000, 10.00000, 0.00000);
	CreateDynamicObject(357, 2522.35693, -2044.79626, 6.10675,   90.00000, 16.00000, 0.00000);
	CreateDynamicObject(357, 2522.35449, -2044.98047, 6.10675,   90.00000, 16.00000, 0.00000);
	CreateDynamicObject(19443, 2522.93237, -2043.82605, 9.86374,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(360, 2521.94019, -2044.07178, 10.28689,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(360, 2521.94019, -2044.07178, 9.89532,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(361, 2526.79248, -2044.24182, 4.96274,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(361, 2525.98145, -2044.75952, 5.10955,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(362, 2528.53125, -2044.10132, 4.79553,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(362, 2528.22681, -2044.09875, 4.86608,   0.00000, 0.00000, -84.00000);
	CreateDynamicObject(2985, 2531.95361, -2053.82227, 4.39360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2985, 2532.98730, -2053.83008, 4.39360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3797, 2531.83813, -2046.74194, 10.05142,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3797, 2529.51318, -2049.26074, 10.05142,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1232, 2504.58911, -2054.07886, 4.10521,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 2497.67871, -2044.62109, 4.62384,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(363, 2529.71606, -2054.25537, 5.58341,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(363, 2529.43091, -2054.19751, 5.58341,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(363, 2529.73145, -2053.93359, 5.58341,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(359, 2523.66479, -2043.98657, 10.18688,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(359, 2523.66479, -2043.98657, 9.79546,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(359, 2523.66479, -2043.98657, 9.33018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(366, 2529.88281, -2053.79297, 5.24912,   -36.00000, -46.00000, 0.00000);
	CreateDynamicObject(366, 2529.16821, -2053.79102, 5.27965,   -36.00000, -46.00000, 0.00000);
	CreateDynamicObject(364, 2528.87842, -2053.39966, 5.35535,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(364, 2528.54175, -2053.52856, 5.38588,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(841, 2543.50977, -2045.50073, 3.22260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(841, 2548.03076, -2044.36206, 3.22260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(865, 2546.28662, -2045.46497, 3.03336,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(865, 2550.83789, -2052.59058, 3.03336,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(865, 2553.85229, -2041.02258, 3.03336,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(865, 2554.49536, -2038.13306, 3.03336,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19908, 2548.97485, -2052.08032, 5.05433,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19908, 2548.95044, -2052.04297, 9.83823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19908, 2548.94775, -2046.70288, 9.91767,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19908, 2548.94458, -2045.83276, 9.91767,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19908, 2548.96045, -2048.69922, 5.05433,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1492, 2548.94629, -2044.47437, 3.11556,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19908, 2548.96704, -2041.79211, 5.05433,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19908, 2548.94775, -2046.70288, 8.03790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(865, 2552.82080, -2043.41565, 3.03336,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(802, 2550.03052, -2050.01685, 3.22716,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(802, 2550.65161, -2051.27832, 3.22716,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(833, 2550.00366, -2048.69800, 3.45856,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(833, 2551.96460, -2053.06226, 3.45856,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1344, 2542.68677, -2053.90698, 4.23970,   0.00000, 0.00000, 186.00000);
	CreateDynamicObject(1344, 2544.67700, -2053.66870, 4.23970,   0.00000, 0.00000, 186.00000);
	CreateDynamicObject(939, 2537.09131, -2044.62231, 6.40004,   0.00000, 4.00000, 0.00000);

	


	///MC Donals
	new mmm = CreateObject(4754, 2103.9628, -1804.0280, 21.7038, 0.0000, 0.0000, -159.9521);
    SetObjectMaterialText(mmm, "{E1CA00}m", 0, 130, "Arial", 100, 1, -1250582, 0, 1);

    new mccaffe = CreateObject(19353, 2104.1826, -1818.7877, 14.4864, 22.9999, 0.0000, 179.8011);
    SetObjectMaterialText(mccaffe, "McCaffe", 0, 140, "Comic Sans MS", 100, 1, -32256, 0, 1);

    new imlovin = CreateObject(4754, 2104.3432, -1795.5319, 19.5888, 0.0000, 0.0000, -160.1989);
    SetObjectMaterialText(imlovin, "i'm lovin' it", 0, 130, "Arial", 40, 1, -1250582, 0, 1);

    new mcd = CreateObject(4754, 2114.9018, -1789.6265, 19.5197, 0.0000, 0.0000, 110.0668);
    SetObjectMaterialText(mcd, "McDonald's", 0, 130, "Arial", 50, 1, -1250582, 0, 1);

    new dobrodosli = CreateObject(19353, 2104.5344, -1812.4824, 15.2846, 0.0000, 0.0000, -179.9789);
    SetObjectMaterialText(dobrodosli, "Dobrodosli", 0, 140, "Arial", 50, 1, -5242868, 0, 1);

    new mcdd = CreateObject(4754, 2104.3286, -1815.7062, 19.5327, 0.0000, 0.0000, -159.9931);
    SetObjectMaterialText(mcdd, "McDonald's", 0, 130, "Arial", 50, 0, -1250582, 0, 1);

    new mcburgic = CreateDynamicObjectEx(5418, 2112.93750, -1797.09375, 19.33590,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    SetDynamicObjectMaterial(mcburgic, 4, 6291, "law2_roadsb", "rodeo3sjm", 0xFFFFFFFF);
    SetDynamicObjectMaterial(mcburgic, 8, 9495, "vict_sfw", "Grass_128HV", 0xFFFFFFFF);
    SetDynamicObjectMaterial(mcburgic, 9, 9495, "vict_sfw", "ws_carparknew2", 0xFFFFFFFF);

    new mcdzidici[22];
    mcdzidici[0] = CreateDynamicObjectEx(19454, 2124.95044, -1818.80493, 19.56850,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcdzidici[1] = CreateDynamicObjectEx(19454, 2120.02808, -1789.81165, 19.57580,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcdzidici[2] = CreateDynamicObjectEx(19454, 2109.38062, -1823.70178, 19.56850,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcdzidici[3] = CreateDynamicObjectEx(19454, 2120.06348, -1823.68591, 19.56850,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcdzidici[4] = CreateDynamicObjectEx(19454, 2124.92285, -1794.71326, 19.56850,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcdzidici[5] = CreateDynamicObjectEx(19454, 2118.99341, -1823.70203, 19.56850,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcdzidici[6] = CreateDynamicObjectEx(19454, 2124.94141, -1809.18359, 19.56850,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcdzidici[7] = CreateDynamicObjectEx(19454, 2104.50659, -1818.81104, 19.57580,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcdzidici[8] = CreateDynamicObjectEx(19454, 2104.51270, -1809.18066, 19.57580,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcdzidici[9] = CreateDynamicObjectEx(19454, 2104.52075, -1794.68152, 19.57580,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcdzidici[10] = CreateDynamicObjectEx(19454, 2104.50610, -1799.57422, 19.57580,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcdzidici[11] = CreateDynamicObjectEx(19454, 2109.38037, -1789.79077, 19.57580,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcdzidici[12] = CreateDynamicObjectEx(19454, 2124.94214, -1799.56165, 19.56850,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcdzidici[13] = CreateDynamicObjectEx(19454, 2119.01636, -1789.78552, 19.57580,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcdzidici[14] = CreateDynamicObjectEx(19089, 2123.72607, -1789.01733, 14.64270,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mcdzidici[15] = CreateDynamicObjectEx(19089, 2123.72607, -1789.01733, 13.02890,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mcdzidici[16] = CreateDynamicObjectEx(19089, 2123.72607, -1789.01733, 15.96188,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mcdzidici[17] = CreateDynamicObjectEx(19089, 2123.72607, -1789.01733, 16.40190,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mcdzidici[18] = CreateDynamicObjectEx(19089, 2123.72607, -1789.01733, 15.52690,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mcdzidici[19] = CreateDynamicObjectEx(19089, 2123.72607, -1789.01733, 15.08480,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mcdzidici[20] = CreateDynamicObjectEx(19089, 2123.72607, -1789.01733, 14.07800,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mcdzidici[21] = CreateDynamicObjectEx(19089, 2123.72607, -1789.01733, 13.53900,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    for(new i = 0; i < sizeof(mcdzidici); i++)
{
    SetDynamicObjectMaterial(mcdzidici[i], 0, 3906, "libertyhi5", "wallbrown02_64HV", 0xFF411B00);
}

    new mcbelookolo[12];
    mcbelookolo[0] = CreateDynamicObjectEx(18980, 2104.11011, -1801.40906, 17.32640,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelookolo[1] = CreateDynamicObjectEx(18980, 2125.37036, -1807.13501, 17.33640,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelookolo[2] = CreateDynamicObjectEx(18766, 2108.61108, -1822.09570, 17.35110,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelookolo[3] = CreateDynamicObjectEx(18766, 2118.60669, -1822.10400, 17.35110,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelookolo[4] = CreateDynamicObjectEx(18766, 2109.59326, -1791.41223, 17.35510,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelookolo[5] = CreateDynamicObjectEx(18980, 2124.36914, -1806.37976, 17.32640,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelookolo[6] = CreateDynamicObjectEx(18766, 2120.88037, -1822.10864, 17.34110,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelookolo[7] = CreateDynamicObjectEx(18980, 2104.12744, -1807.10596, 17.33640,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelookolo[8] = CreateDynamicObjectEx(18766, 2120.88794, -1791.40503, 17.34110,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelookolo[9] = CreateDynamicObjectEx(18766, 2110.90894, -1791.40369, 17.34110,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelookolo[10] = CreateDynamicObjectEx(18980, 2125.37939, -1806.37537, 17.32640,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelookolo[11] = CreateDynamicObjectEx(18980, 2124.36914, -1807.12781, 17.34640,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    for(new i = 0; i < sizeof(mcbelookolo); i++)
{
    SetDynamicObjectMaterial(mcbelookolo[i], 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
}

    new mccrveno[6];
    mccrveno[0] = CreateDynamicObjectEx(18764, 2106.55396, -1803.99768, 11.03250,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrveno[1] = CreateDynamicObjectEx(18764, 2106.55396, -1803.99768, 21.00735,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrveno[2] = CreateDynamicObjectEx(18764, 2106.55396, -1803.99768, 16.02200,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrveno[3] = CreateDynamicObjectEx(16101, 2117.65332, -1789.02527, 16.93840,   180.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrveno[4] = CreateDynamicObjectEx(16101, 2119.90552, -1789.01245, 16.93840,   180.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrveno[5] = CreateDynamicObjectEx(16101, 2122.22607, -1789.01672, 16.93840,   180.00000, 0.00000, 0.00000, 400.0, 400.0);
    for(new i = 0; i < sizeof(mccrveno); i++)
{
    SetDynamicObjectMaterial(mccrveno[i], 0, 2361, "shopping_freezers", "white", 0xFFB00000);
}

	new mckamen[27];
	mckamen[0] = CreateDynamicObjectEx(19433, 2105.37866, -1823.38220, 13.98980,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
	mckamen[1] = CreateDynamicObjectEx(19433, 2116.99609, -1823.35095, 16.51950,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
	mckamen[2] = CreateDynamicObjectEx(19433, 2104.52441, -1806.84570, 15.11380,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
	mckamen[3] = CreateDynamicObjectEx(19433, 2106.35742, -1790.01501, 16.51950,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
	mckamen[4] = CreateDynamicObjectEx(19433, 2104.50610, -1812.87512, 16.51950,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
	mckamen[5] = CreateDynamicObjectEx(19433, 2104.50757, -1816.36377, 16.51950,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
	mckamen[6] = CreateDynamicObjectEx(19433, 2104.50854, -1819.84509, 16.51950,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
	mckamen[7] = CreateDynamicObjectEx(19433, 2104.50073, -1821.69470, 16.51950,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
	mckamen[8] = CreateDynamicObjectEx(19433, 2119.53174, -1823.35767, 15.11080,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
	mckamen[9] = CreateDynamicObjectEx(19433, 2104.50220, -1822.66467, 13.98980,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
	mckamen[10] = CreateDynamicObjectEx(19433, 2106.19043, -1823.37036, 16.51950,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
	mckamen[11] = CreateDynamicObjectEx(19433, 2109.68799, -1823.36670, 16.51950,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
	mckamen[12] = CreateDynamicObjectEx(19433, 2113.18433, -1823.36560, 16.51950,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
	mckamen[13] = CreateDynamicObjectEx(19433, 2104.53076, -1800.71472, 15.12040,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
	mckamen[14] = CreateDynamicObjectEx(19433, 2119.53174, -1823.35767, 11.63190,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
	mckamen[15] = CreateDynamicObjectEx(19433, 2116.67896, -1823.36560, 16.51950,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
	mckamen[16] = CreateDynamicObjectEx(19433, 2104.52441, -1806.84570, 11.63190,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
	mckamen[17] = CreateDynamicObjectEx(19433, 2104.55127, -1790.90405, 13.96980,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
	mckamen[18] = CreateDynamicObjectEx(19433, 2104.50586, -1809.37292, 16.51950,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
	mckamen[19] = CreateDynamicObjectEx(19433, 2104.51782, -1798.17871, 16.51950,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
	mckamen[20] = CreateDynamicObjectEx(19433, 2104.52832, -1794.67542, 16.51950,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
	mckamen[21] = CreateDynamicObjectEx(19433, 2104.53564, -1791.65991, 16.51950,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
	mckamen[22] = CreateDynamicObjectEx(19433, 2113.32788, -1789.99463, 16.51950,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
	mckamen[23] = CreateDynamicObjectEx(19433, 2109.84058, -1790.00354, 16.51950,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
	mckamen[24] = CreateDynamicObjectEx(19433, 2104.53076, -1800.71472, 11.63190,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
	mckamen[25] = CreateDynamicObjectEx(19433, 2114.27539, -1790.00647, 13.96980,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
	mckamen[26] = CreateDynamicObjectEx(19433, 2105.25635, -1790.00732, 13.96980,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
	for(new i = 0; i < sizeof(mckamen); i++)
{
    SetDynamicObjectMaterial(mckamen[i], 0, 8839, "vgsecarshow", "sw_wallbrick_06", 0xFFFFFFFF);
}

    new mccrno[57];
    mccrno[0] = CreateDynamicObjectEx(19455, 2106.17847, -1818.61365, 14.95960,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[1] = CreateDynamicObjectEx(19455, 2106.26807, -1818.64722, 13.98660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrno[2] = CreateDynamicObjectEx(19455, 2106.18115, -1812.64294, 14.96250,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[3] = CreateDynamicObjectEx(19455, 2109.24414, -1809.41577, 13.98660,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mccrno[4] = CreateDynamicObjectEx(19455, 2107.96436, -1794.72595, 14.93640,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[5] = CreateDynamicObjectEx(19455, 2109.28833, -1791.79138, 13.98660,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mccrno[6] = CreateDynamicObjectEx(19455, 2109.23071, -1811.07507, 13.98660,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mccrno[7] = CreateDynamicObjectEx(19455, 2109.26221, -1817.20728, 13.98660,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mccrno[8] = CreateDynamicObjectEx(19455, 2109.24756, -1813.85278, 13.98660,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mccrno[9] = CreateDynamicObjectEx(19455, 2109.26025, -1821.77991, 13.98660,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mccrno[10] = CreateDynamicObjectEx(19455, 2109.25391, -1815.56763, 13.98660,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mccrno[11] = CreateDynamicObjectEx(19455, 2109.25854, -1820.38550, 13.98660,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mccrno[12] = CreateDynamicObjectEx(19455, 2118.65259, -1818.61731, 13.98660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrno[13] = CreateDynamicObjectEx(19455, 2106.18433, -1818.61255, 12.63320,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[14] = CreateDynamicObjectEx(19455, 2108.03711, -1818.61902, 13.98660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrno[15] = CreateDynamicObjectEx(19455, 2116.82764, -1818.61609, 14.94820,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[16] = CreateDynamicObjectEx(19455, 2112.74829, -1821.68188, 12.63520,   0.00000, 90.00000, 90.00000, 400.0, 400.0);
    mccrno[17] = CreateDynamicObjectEx(19455, 2116.86133, -1818.61255, 13.98660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrno[18] = CreateDynamicObjectEx(19455, 2114.98535, -1818.61060, 13.98660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrno[19] = CreateDynamicObjectEx(19455, 2112.74829, -1821.68188, 14.96050,   0.00000, 90.00000, 90.00000, 400.0, 400.0);
    mccrno[20] = CreateDynamicObjectEx(19455, 2116.82764, -1818.61609, 12.63320,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[21] = CreateDynamicObjectEx(19455, 2109.24731, -1807.73523, 13.98660,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mccrno[22] = CreateDynamicObjectEx(19455, 2113.39526, -1794.71875, 13.98660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrno[23] = CreateDynamicObjectEx(19455, 2109.27173, -1793.55774, 13.98660,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mccrno[24] = CreateDynamicObjectEx(19455, 2109.78394, -1794.72241, 13.98660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrno[25] = CreateDynamicObjectEx(19455, 2109.24097, -1809.40271, 12.63320,   0.00000, 90.00000, 90.00000, 400.0, 400.0);
    mccrno[26] = CreateDynamicObjectEx(19455, 2109.28223, -1793.62170, 14.94430,   0.00000, 90.00000, 90.00000, 400.0, 400.0);
    mccrno[27] = CreateDynamicObjectEx(19455, 2109.28882, -1797.12244, 14.94040,   0.00000, 90.00000, 90.00000, 400.0, 400.0);
    mccrno[28] = CreateDynamicObjectEx(19455, 2109.28687, -1798.03052, 14.91620,   0.00000, 90.00000, 90.00000, 400.0, 400.0);
    mccrno[29] = CreateDynamicObjectEx(19455, 2111.56836, -1794.72412, 14.93710,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[30] = CreateDynamicObjectEx(19455, 2108.08911, -1794.73010, 14.94430,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[31] = CreateDynamicObjectEx(19455, 2109.27002, -1795.77661, 13.98660,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mccrno[32] = CreateDynamicObjectEx(19455, 2109.25635, -1799.82861, 13.98660,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mccrno[33] = CreateDynamicObjectEx(19455, 2106.13794, -1794.72180, 13.98660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrno[34] = CreateDynamicObjectEx(19455, 2107.91309, -1794.71069, 13.98660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrno[35] = CreateDynamicObjectEx(19455, 2111.56836, -1794.72412, 12.63320,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[36] = CreateDynamicObjectEx(19455, 2108.08911, -1794.73010, 12.63320,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[37] = CreateDynamicObjectEx(19455, 2107.96436, -1794.72595, 12.62220,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[38] = CreateDynamicObjectEx(19455, 2109.28223, -1793.62170, 12.63320,   0.00000, 90.00000, 90.00000, 400.0, 400.0);
    mccrno[39] = CreateDynamicObjectEx(19455, 2109.28882, -1797.12244, 12.63320,   0.00000, 90.00000, 90.00000, 400.0, 400.0);
    mccrno[40] = CreateDynamicObjectEx(19455, 2109.28687, -1798.03052, 12.62220,   0.00000, 90.00000, 90.00000, 400.0, 400.0);
    mccrno[41] = CreateDynamicObjectEx(19455, 2111.56836, -1794.72412, 15.62450,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[42] = CreateDynamicObjectEx(19455, 2108.08911, -1794.73010, 15.62750,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[43] = CreateDynamicObjectEx(19455, 2107.96436, -1794.72595, 15.65050,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[44] = CreateDynamicObjectEx(19455, 2109.28223, -1793.62170, 15.62750,   0.00000, 90.00000, 90.00000, 400.0, 400.0);
    mccrno[45] = CreateDynamicObjectEx(19455, 2109.28882, -1797.12244, 15.63300,   0.00000, 90.00000, 90.00000, 400.0, 400.0);
    mccrno[46] = CreateDynamicObjectEx(19455, 2109.28687, -1798.03052, 15.64280,   0.00000, 90.00000, 90.00000, 400.0, 400.0);
    mccrno[47] = CreateDynamicObjectEx(19455, 2106.18115, -1812.64294, 15.63760,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[48] = CreateDynamicObjectEx(19455, 2106.17847, -1818.61365, 15.63760,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[49] = CreateDynamicObjectEx(19455, 2112.74829, -1821.68188, 15.63850,   0.00000, 90.00000, 90.00000, 400.0, 400.0);
    mccrno[50] = CreateDynamicObjectEx(19455, 2116.82764, -1818.61609, 15.63140,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mccrno[51] = CreateDynamicObjectEx(19455, 2112.38428, -1818.61829, 13.98660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrno[52] = CreateDynamicObjectEx(19455, 2109.80884, -1818.61279, 13.98660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrno[53] = CreateDynamicObjectEx(19455, 2109.26733, -1798.04346, 13.98660,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mccrno[54] = CreateDynamicObjectEx(19455, 2111.61011, -1794.73181, 13.98660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrno[55] = CreateDynamicObjectEx(19089, 2104.45752, -1812.45642, 15.04180,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mccrno[56] = CreateDynamicObjectEx(19089, 2104.45752, -1812.52429, 15.04180,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    for(new i = 0; i < sizeof(mccrno); i++)
{
    SetDynamicObjectMaterial(mccrno[i], 0, 2361, "shopping_freezers", "white", 0xFF0A0A0A);
}

    new mckrov[8];
    mckrov[0] = CreateDynamicObjectEx(19379, 2119.60864, -1818.79578, 21.29390,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mckrov[1] = CreateDynamicObjectEx(19379, 2109.83716, -1818.81213, 21.27390,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mckrov[2] = CreateDynamicObjectEx(19379, 2109.83667, -1809.18555, 21.29390,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mckrov[3] = CreateDynamicObjectEx(19379, 2109.84570, -1794.66809, 21.29390,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mckrov[4] = CreateDynamicObjectEx(19379, 2119.60522, -1794.66492, 21.27390,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mckrov[5] = CreateDynamicObjectEx(19379, 2109.82861, -1804.28247, 21.31790,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mckrov[6] = CreateDynamicObjectEx(19379, 2119.61084, -1813.91382, 21.27390,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    mckrov[7] = CreateDynamicObjectEx(19379, 2119.61035, -1804.28650, 21.27390,   0.00000, 90.00000, 0.00000, 400.0, 400.0);
    for(new i = 0; i < sizeof(mckrov); i++)
{
    SetDynamicObjectMaterial(mckrov[i], 0, 10357, "tvtower_sfs", "ws_rooftarmac2", 0xFFFFFFFF);
}

    new mcprozor[6];
    mcprozor[0] = CreateDynamicObjectEx(19381, 2109.86719, -1790.04028, 10.35970,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcprozor[1] = CreateDynamicObjectEx(19381, 2119.36646, -1823.28577, 10.35970,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcprozor[2] = CreateDynamicObjectEx(19381, 2104.61011, -1796.09998, 10.35970,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcprozor[3] = CreateDynamicObjectEx(19381, 2104.59155, -1812.52478, 10.35970,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcprozor[4] = CreateDynamicObjectEx(19381, 2109.74243, -1823.28442, 10.35970,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcprozor[5] = CreateDynamicObjectEx(19365, 2104.59937, -1821.20874, 13.85060,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    for(new i = 0; i < sizeof(mcprozor); i++)
{
    SetDynamicObjectMaterial(mcprozor[i], 0, 4010, "lanblokb2", "bluewhitewindow", 0xFFFFFFFF);
}

    new mcokolicica[12];
    mcokolicica[0] = CreateDynamicObjectEx(19377, 2119.89429, -1790.01013, 11.65940,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcokolicica[1] = CreateDynamicObjectEx(19362, 2123.21533, -1823.38904, 15.15310,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcokolicica[2] = CreateDynamicObjectEx(19362, 2121.92700, -1823.36072, 15.13060,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcokolicica[3] = CreateDynamicObjectEx(19362, 2121.92700, -1823.36072, 11.65170,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcokolicica[4] = CreateDynamicObjectEx(19362, 2123.21533, -1823.38904, 11.65170,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcokolicica[5] = CreateDynamicObjectEx(19377, 2124.72876, -1818.48950, 11.65940,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcokolicica[6] = CreateDynamicObjectEx(19377, 2124.72485, -1808.86218, 11.65940,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcokolicica[7] = CreateDynamicObjectEx(19377, 2124.70410, -1794.90015, 11.65940,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcokolicica[8] = CreateDynamicObjectEx(19377, 2124.71997, -1799.22961, 11.65940,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcokolicica[9] = CreateDynamicObjectEx(18762, 2104.60718, -1819.79163, 14.37260,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcokolicica[10] = CreateDynamicObjectEx(18762, 2104.60791, -1817.79993, 14.37260,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcokolicica[11] = CreateDynamicObjectEx(18762, 2104.59717, -1818.79492, 14.37260,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    for(new i = 0; i < sizeof(mcokolicica); i++)
{
    SetDynamicObjectMaterial(mcokolicica[i], 0, 9495, "vict_sfw", "newall10_seamless", 0xFFFFFFFF);
}

    new mccunj1 = CreateDynamicObjectEx(1214, 2116.07300, -1786.06824, 11.99850,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    SetDynamicObjectMaterial(mccunj1, 0, 2361, "shopping_freezers", "white", 0xFFB00000);
    SetDynamicObjectMaterial(mccunj1, 1, 2361, "shopping_freezers", "white", 0xFFB00000);
    new mccunj2 = CreateDynamicObjectEx(1214, 2091.67383, -1803.77942, 11.99850,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    SetDynamicObjectMaterial(mccunj2, 0, 2361, "shopping_freezers", "white", 0xFFB00000);
    SetDynamicObjectMaterial(mccunj2, 1, 2361, "shopping_freezers", "white", 0xFFB00000);
    new mccunj3 = CreateDynamicObjectEx(1214, 2091.63843, -1810.09680, 11.99850,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    SetDynamicObjectMaterial(mccunj3, 0, 2361, "shopping_freezers", "white", 0xFFB00000);
    SetDynamicObjectMaterial(mccunj3, 1, 2361, "shopping_freezers", "white", 0xFFB00000);
    new mccunj4 = CreateDynamicObjectEx(1214, 2091.63965, -1806.81775, 11.99850,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    SetDynamicObjectMaterial(mccunj4, 0, 2361, "shopping_freezers", "white", 0xFFB00000);
    SetDynamicObjectMaterial(mccunj4, 1, 2361, "shopping_freezers", "white", 0xFFB00000);
    new mccunj5 = CreateDynamicObjectEx(1214, 2107.17480, -1786.07397, 11.99850,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    SetDynamicObjectMaterial(mccunj5, 0, 2361, "shopping_freezers", "white", 0xFFB00000);
    SetDynamicObjectMaterial(mccunj5, 1, 2361, "shopping_freezers", "white", 0xFFB00000);

    new mcklupe[5];
    mcklupe[0] = CreateDynamicObjectEx(1280, 2095.31226, -1811.29199, 12.92190,   0.00000, 0.00000, -90.00000, 400.0, 400.0);
    mcklupe[1] = CreateDynamicObjectEx(1280, 2099.70630, -1817.02075, 12.92190,   0.00000, 0.00000, 180.00000, 400.0, 400.0);
    mcklupe[2] = CreateDynamicObjectEx(1280, 2095.40405, -1802.78943, 12.92190,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcklupe[3] = CreateDynamicObjectEx(1280, 2099.71509, -1796.70020, 12.92190,   0.00000, 0.00000, 180.00000, 400.0, 400.0);
    mcklupe[4] = CreateDynamicObjectEx(1280, 2111.75366, -1786.52319, 12.92190,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    for(new i = 0; i < sizeof(mcklupe); i++)
{
    SetDynamicObjectMaterial(mcklupe[i], 1, 3587, "snpedhusxref", "sjmlawood", 0xFFFFFFFF);
}

    new mcbelcina[60];
    mcbelcina[0] = CreateDynamicObjectEx(19450, 2097.46704, -1822.27063, 7.93320,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcbelcina[1] = CreateDynamicObjectEx(19450, 2128.76099, -1790.84778, 11.00020,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelcina[2] = CreateDynamicObjectEx(19450, 2093.56421, -1822.26819, 7.94720,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcbelcina[3] = CreateDynamicObjectEx(19450, 2099.11230, -1817.02405, 7.92270,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelcina[4] = CreateDynamicObjectEx(19430, 2128.59082, -1823.04565, 10.99260,   0.00000, 0.00000, 348.57019, 400.0, 400.0);
    mcbelcina[5] = CreateDynamicObjectEx(19430, 2128.49243, -1823.51660, 11.00660,   0.00000, 0.00000, 348.60532, 400.0, 400.0);
    mcbelcina[6] = CreateDynamicObjectEx(19430, 2099.40381, -1822.95496, 10.99260,   0.00000, 0.00000, 11.73040, 400.0, 400.0);
    mcbelcina[7] = CreateDynamicObjectEx(19430, 2103.53540, -1786.14478, 10.99260,   0.00000, 0.00000, 281.65405, 400.0, 400.0);
    mcbelcina[8] = CreateDynamicObjectEx(19430, 2101.35864, -1769.75452, 10.99260,   0.00000, 0.00000, 325.29791, 400.0, 400.0);
    mcbelcina[9] = CreateDynamicObjectEx(19430, 2100.08105, -1824.85999, 10.99260,   0.00000, 0.00000, 32.76065, 400.0, 400.0);
    mcbelcina[10] = CreateDynamicObjectEx(19430, 2101.76123, -1826.57397, 10.99260,   0.00000, 0.00000, 55.28910, 400.0, 400.0);
    mcbelcina[11] = CreateDynamicObjectEx(19430, 2101.36523, -1826.31592, 11.00660,   0.00000, 0.00000, 55.28915, 400.0, 400.0);
    mcbelcina[12] = CreateDynamicObjectEx(19450, 2109.08228, -1827.38818, 11.02020,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcbelcina[13] = CreateDynamicObjectEx(19430, 2103.50488, -1827.22949, 11.00660,   0.00000, 0.00000, 77.84980, 400.0, 400.0);
    mcbelcina[14] = CreateDynamicObjectEx(19430, 2103.17114, -1827.17468, 10.99260,   0.00000, 0.00000, 77.84979, 400.0, 400.0);
    mcbelcina[15] = CreateDynamicObjectEx(19430, 2124.27368, -1827.24548, 11.00660,   0.00000, 0.00000, 281.23193, 400.0, 400.0);
    mcbelcina[16] = CreateDynamicObjectEx(19430, 2124.86890, -1827.11353, 10.99260,   0.00000, 0.00000, 281.23190, 400.0, 400.0);
    mcbelcina[17] = CreateDynamicObjectEx(19430, 2126.28784, -1826.51135, 11.00660,   0.00000, 0.00000, 303.58554, 400.0, 400.0);
    mcbelcina[18] = CreateDynamicObjectEx(19430, 2126.56445, -1826.31482, 10.99260,   0.00000, 0.00000, 303.70126, 400.0, 400.0);
    mcbelcina[19] = CreateDynamicObjectEx(19430, 2127.67236, -1825.23022, 11.00660,   0.00000, 0.00000, 324.74643, 400.0, 400.0);
    mcbelcina[20] = CreateDynamicObjectEx(19430, 2127.87866, -1824.91870, 10.99260,   0.00000, 0.00000, 324.17981, 400.0, 400.0);
    mcbelcina[21] = CreateDynamicObjectEx(19450, 2118.69214, -1827.38879, 11.02020,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcbelcina[22] = CreateDynamicObjectEx(19450, 2128.74609, -1817.47278, 11.02020,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelcina[23] = CreateDynamicObjectEx(19450, 2128.74536, -1807.83728, 11.02020,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelcina[24] = CreateDynamicObjectEx(19450, 2128.74536, -1798.21228, 11.02020,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelcina[25] = CreateDynamicObjectEx(19450, 2102.60449, -1785.98206, 7.93210,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcbelcina[26] = CreateDynamicObjectEx(19450, 2091.73633, -1827.00244, 11.02020,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelcina[27] = CreateDynamicObjectEx(19450, 2093.68604, -1786.43140, 11.02020,   0.00000, 0.00000, 345.02136, 400.0, 400.0);
    mcbelcina[28] = CreateDynamicObjectEx(19450, 2098.66162, -1767.86389, 11.02020,   0.00000, 0.00000, 345.02136, 400.0, 400.0);
    mcbelcina[29] = CreateDynamicObjectEx(19450, 2098.87939, -1766.94910, 11.00020,   0.00000, 0.00000, 345.02139, 400.0, 400.0);
    mcbelcina[30] = CreateDynamicObjectEx(19450, 2101.78906, -1762.35596, 7.95210,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcbelcina[31] = CreateDynamicObjectEx(19450, 2105.42456, -1765.57202, 7.94010,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelcina[32] = CreateDynamicObjectEx(19450, 2103.78979, -1762.34131, 7.94010,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcbelcina[33] = CreateDynamicObjectEx(19430, 2100.29297, -1825.20264, 11.00660,   0.00000, 0.00000, 32.76070, 400.0, 400.0);
    mcbelcina[34] = CreateDynamicObjectEx(19430, 2104.73169, -1767.54187, 11.00660,   0.00000, 0.00000, 280.80945, 400.0, 400.0);
    mcbelcina[35] = CreateDynamicObjectEx(19430, 2104.38745, -1767.59119, 10.99260,   0.00000, 0.00000, 280.80939, 400.0, 400.0);
    mcbelcina[36] = CreateDynamicObjectEx(19430, 2102.97803, -1768.17383, 11.00660,   0.00000, 0.00000, 304.54950, 400.0, 400.0);
    mcbelcina[37] = CreateDynamicObjectEx(19430, 2101.55444, -1769.49194, 11.00660,   0.00000, 0.00000, 325.43964, 400.0, 400.0);
    mcbelcina[38] = CreateDynamicObjectEx(19430, 2102.64551, -1768.38708, 10.99260,   0.00000, 0.00000, 305.29788, 400.0, 400.0);
    mcbelcina[39] = CreateDynamicObjectEx(19450, 2096.16895, -1777.15637, 11.02020,   0.00000, 0.00000, 345.02136, 400.0, 400.0);
    mcbelcina[40] = CreateDynamicObjectEx(19450, 2100.12866, -1775.13245, 11.02020,   0.00000, 0.00000, 350.50696, 400.0, 400.0);
    mcbelcina[41] = CreateDynamicObjectEx(19450, 2099.10400, -1781.34644, 11.00020,   0.00000, 0.00000, 350.50699, 400.0, 400.0);
    mcbelcina[42] = CreateDynamicObjectEx(19450, 2123.88599, -1785.96655, 11.00200,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcbelcina[43] = CreateDynamicObjectEx(19450, 2105.43335, -1764.17969, 7.95210,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelcina[44] = CreateDynamicObjectEx(19450, 2097.05664, -1822.26428, 7.94720,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcbelcina[45] = CreateDynamicObjectEx(19450, 2094.26514, -1791.02161, 7.94720,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcbelcina[46] = CreateDynamicObjectEx(19430, 2099.49023, -1823.42896, 11.00660,   0.00000, 0.00000, 11.73040, 400.0, 400.0);
    mcbelcina[47] = CreateDynamicObjectEx(19430, 2103.10522, -1786.21387, 11.00660,   0.00000, 0.00000, 281.83292, 400.0, 400.0);
    mcbelcina[48] = CreateDynamicObjectEx(19430, 2099.29614, -1790.31433, 11.00660,   0.00000, 0.00000, 347.59674, 400.0, 400.0);
    mcbelcina[49] = CreateDynamicObjectEx(19430, 2099.38330, -1789.85193, 10.99260,   0.00000, 0.00000, 347.59671, 400.0, 400.0);
    mcbelcina[50] = CreateDynamicObjectEx(19430, 2100.01367, -1788.45850, 11.00660,   0.00000, 0.00000, 324.15652, 400.0, 400.0);
    mcbelcina[51] = CreateDynamicObjectEx(19430, 2100.30933, -1788.06653, 10.99260,   0.00000, 0.00000, 324.15649, 400.0, 400.0);
    mcbelcina[52] = CreateDynamicObjectEx(19430, 2101.42065, -1786.98267, 11.00660,   0.00000, 0.00000, 304.88065, 400.0, 400.0);
    mcbelcina[53] = CreateDynamicObjectEx(19430, 2101.69751, -1786.80457, 10.99260,   0.00000, 0.00000, 304.70236, 400.0, 400.0);
    mcbelcina[54] = CreateDynamicObjectEx(19450, 2111.74243, -1785.97266, 7.95210,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcbelcina[55] = CreateDynamicObjectEx(19450, 2100.14063, -1786.00208, 7.95210,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcbelcina[56] = CreateDynamicObjectEx(19450, 2097.44019, -1791.03418, 7.92272,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcbelcina[57] = CreateDynamicObjectEx(19450, 2099.11108, -1796.75806, 7.92270,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    mcbelcina[58] = CreateDynamicObjectEx(19450, 2095.40479, -1802.22205, 7.92270,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
    mcbelcina[59] = CreateDynamicObjectEx(19450, 2095.40601, -1811.78967, 7.92270,   90.00000, 0.00000, 90.00000, 400.0, 400.0);
    for(new i = 0; i < sizeof(mcbelcina); i++)
{
    SetDynamicObjectMaterial(mcbelcina[i], 0, 2361, "shopping_freezers", "white", 0xFFECEAEA);
}

    CreateDynamicObjectEx(19325, 2104.47046, -1821.20483, 12.54970,   90.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(19325, 2116.13818, -1789.92676, 14.04330,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    CreateDynamicObjectEx(19325, 2116.18237, -1823.41040, 14.04330,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    CreateDynamicObjectEx(19325, 2109.49512, -1789.92676, 14.04334,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    CreateDynamicObjectEx(19325, 2104.49683, -1794.92834, 14.04330,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(19325, 2104.49683, -1801.57031, 14.04330,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(19325, 2104.46387, -1810.33325, 14.04330,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(19325, 2104.46387, -1816.97571, 14.04330,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(19325, 2109.54199, -1823.41040, 14.04330,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    CreateDynamicObjectEx(5422, 2124.85156, -1815.66809, 14.53250,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(1498, 2124.82593, -1803.59290, 12.54880,   0.00000, 0.00000, -90.00000, 400.0, 400.0);
    CreateDynamicObjectEx(1635, 2125.56396, -1806.68372, 19.29740,   0.00000, 0.00000, 180.00000, 400.0, 400.0);
    CreateDynamicObjectEx(1635, 2113.80591, -1824.32678, 19.29740,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    CreateDynamicObjectEx(617, 2131.88672, -1788.90527, 12.51120,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(617, 2095.38379, -1827.58862, 12.51120,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(617, 2096.06982, -1788.56433, 12.51120,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(617, 2102.35303, -1765.00708, 12.51120,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(617, 2130.86890, -1827.66479, 12.51120,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(869, 2132.29102, -1788.69653, 12.94659,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(869, 2096.66846, -1788.29077, 12.94659,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(869, 2102.56323, -1764.97742, 12.94659,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(673, 2098.14014, -1776.38281, 12.57660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(673, 2106.34131, -1829.64990, 12.57660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(748, 2098.26025, -1777.36536, 12.47990,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    CreateDynamicObjectEx(869, 2095.78833, -1827.26746, 12.94659,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(9833, 2112.77246, -1829.73462, 10.65643,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(870, 2113.23486, -1829.54504, 12.85078,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(673, 2120.58496, -1829.81482, 12.57660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(673, 2132.06738, -1815.99475, 12.57660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(885, 2131.96753, -1807.48108, 12.49830,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(869, 2131.27051, -1827.50757, 12.94659,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(748, 2113.18433, -1829.73315, 12.47990,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(673, 2131.94409, -1798.41504, 12.57660,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(748, 2132.32495, -1807.81738, 12.47990,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
    CreateDynamicObjectEx(1688, 2111.94067, -1795.55640, 22.37800,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(1688, 2117.16113, -1818.20520, 22.37800,   0.00000, 0.00000, 0.00000, 400.0, 400.0);
    CreateDynamicObjectEx(1689, 2116.32495, -1806.21753, 22.53080,   0.00000, 0.00000, 90.00000, 400.0, 400.0);
   





	//Militares
	CreateDynamicObject(8556, 135.103591, 1940.210815, 22.814960, 0.000000, 0.000000, -0.779980, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3268, 185.692596, 1965.913818, 16.632810, 3.141590, 0.000000, -179.399993, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3268, 185.592880, 2001.931518, 16.227909, 0.141589, -1.320000, -177.899978, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3268, 354.971832, 1944.419311, 16.591669, -0.278409, -1.259999, 2.579989, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8155, 102.236770, 1913.511962, 20.598239, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8209, 196.829864, 1941.025390, 19.351299, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2930, 120.693161, 1941.214965, 20.823450, 0.000000, 0.000000, -88.019996, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2930, 122.351028, 1941.363403, 20.823450, 0.000000, 0.000000, -88.019996, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2930, 120.710021, 1941.293457, 23.394569, 0.000000, 0.000000, -88.019996, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2930, 122.351028, 1941.363403, 23.409080, 0.000000, 0.000000, -88.019996, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8209, 164.333801, 1990.679565, 19.356969, 0.000000, 0.000000, -88.259986, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8313, 172.658813, 2048.903320, 20.312959, 5.880000, -0.239999, -32.520000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8209, 231.835067, 2058.004394, 19.674659, 0.000000, 0.000000, -179.640029, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8152, 369.134826, 1969.755981, 18.199050, 0.000000, 0.000000, -435.839935, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8209, 328.698394, 2056.325195, 18.177299, 0.000000, 0.000000, -182.400177, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8209, 84.512176, 1835.765258, 19.356969, 0.000000, 0.000000, -88.259986, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8209, 135.483901, 1787.558593, 19.356969, 0.000000, 0.000000, -178.139938, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8209, 234.881820, 1790.851928, 19.356969, 0.000000, 0.000000, -178.139938, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8153, 323.755432, 1803.610961, 18.713439, 0.000000, 0.000000, -43.200000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3749, 330.781372, 1781.687500, 21.628379, 0.000000, 0.000000, -134.580032, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8167, 322.932983, 1771.906372, 17.825849, 0.000000, 0.000000, -42.479999, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8167, 322.932983, 1771.906372, 20.237920, 0.000000, 0.000000, -42.479999, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8167, 339.468444, 1789.620483, 18.067119, 1.980000, 1.740000, -42.360000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8167, 339.468444, 1789.620483, 20.458610, 1.980000, 1.740000, -42.360000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8313, 363.165222, 1828.775390, 17.355779, 0.000000, 0.000000, 11.340000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8313, 368.729614, 1854.365234, 17.466640, 0.000000, 0.000000, -184.140029, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8313, 365.448516, 1877.466430, 17.466640, 0.000000, 0.000000, -305.820007, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3279, 347.678161, 1907.665527, 16.506410, 356.858398, 0.000000, 3.141590, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(9241, 100.447441, 1925.359252, 18.899169, 0.000000, 0.000000, 90.600013, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8357, 301.401367, 1931.231201, 16.694650, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(9241, 224.397628, 2033.510620, 18.437549, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(8240, 300.405853, 2004.360351, 29.578020, 0.000000, 0.000000, -181.799942, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16770, 157.813461, 1820.929321, 17.969959, 0.000000, 0.000000, -90.300003, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1584, 166.352233, 1808.990478, 16.555059, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1584, 160.063461, 1801.220947, 16.628160, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1584, 154.728302, 1804.075439, 16.629459, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1584, 165.181640, 1795.316528, 16.625389, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1584, 160.421112, 1806.154663, 16.628860, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1584, 155.005569, 1793.909057, 16.624820, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1583, 165.321197, 1802.523193, 16.626789, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1583, 157.502410, 1808.265869, 16.628330, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1583, 161.480209, 1793.469970, 16.624290, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1583, 154.771667, 1798.898193, 16.625829, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1583, 151.349731, 1805.026977, 16.627340, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18047, 143.220352, 1831.375244, 17.025150, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3014, 150.363235, 1818.188842, 16.766609, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3014, 150.139389, 1818.028320, 16.871929, -0.720019, -182.579986, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2985, 144.964096, 1817.298706, 16.624439, 0.000000, 0.000000, -60.180019, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2886, 143.922134, 1876.763793, 18.191850, 0.000000, 0.000000, 87.480010, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2886, 154.862365, 1846.819702, 18.174829, 0.000000, 0.000000, -178.919937, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3271, 42.669059, 1835.719604, 16.486099, 0.000000, 0.000000, 56.159999, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(19377, 269.269042, 1884.340209, 16.511100, -0.119999, 90.059997, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3644, -7.260930, 1836.227783, 19.180210, 0.000000, 0.000000, 44.459991, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(11445, 11.239809, 1864.683227, 17.249879, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
      //- San Andreas
    _MapIcon(1334.5024,-984.5135,33.8966, 52); //banco /vinewood
    _MapIcon(1782.3137,-1720.7649,13.5472, 52); //banco unity
    _MapIcon(2859.8516, -1405.9196, 11.7516, 52); //banco east
    _MapIcon(1626.9009, -2286.6245, 93.1271, 5); // Aeropuerto
    _MapIcon(550.6507,-1426.5330,16.1252, 59); // Salon premium

    //? Mapeos

    //concesionarias
    CreateDynamicObject(1536, 1980.34253, -2100.07031, 12.52773,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1498, 518.52887, -1294.37354, 16.18997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1498, 2006.82202, -2271.02783, 12.48909,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1498, 2588.43115, -2218.90503, 12.53974,   0.00000, 0.00000, 0.00000);

	CargarMaps(); //- Carga include 'Mapeos.inc'
	//empresas
		//-reparto
    CreateDynamicObject(14603, 1034.68127, 1208.28601, 11.63000,   0.00000, 0.00000, -0.60000, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(14634, 1034.58569, 1204.05798, 11.39215,   0.00000, 0.00000, 0.00000, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(1498, 1032.97229, 1203.60840, 9.84541,   0.00000, 0.00000, 0.00000, -1, 15, -1, MAX_RADIO_STREAM);
		//-mecanica
	CreateDynamicObject(9163, 1907.59485, -2195.51465, 16.43990,   0.00000, 0.00000, 0.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1861.36841, -2194.21729, 16.43990,   0.00000, 0.00000, 0.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1882.99207, -2169.05371, 16.43989,   0.00000, 0.00000, -90.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1906.17517, -2215.52441, 16.43990,   0.00000, 0.00000, -90.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1861.36292, -2234.03174, 16.43990,   0.00000, 0.00000, 0.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1894.82471, -2226.88037, 16.43990,   0.00000, 0.00000, 0.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1881.37219, -2230.20947, 16.43989,   0.00000, 0.00000, -90.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(10558, 1886.42371, -2216.12378, 14.51643,   0.00000, 0.00000, 0.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(14795, 1888.18091, -2201.61060, 14.03457,   0.00000, 179.99451, 1.99950, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(8420, 1926.17676, -2200.04663, 12.58000,   0.00000, 0.00000, 180.00000, -1, 20, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(8420, 1846.17004, -2199.96826, 12.58000,   0.00000, 0.00000, 0.00000, -1, 20, -1, MAX_RADIO_STREAM);

	CreateDynamicObject(9163, 1907.59485, -2195.51465, 16.43990,   0.00000, 0.00000, 0.00000, -1, 21, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1861.36841, -2194.21729, 16.43990,   0.00000, 0.00000, 0.00000, -1, 21, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1883.21741, -2170.90088, 16.43989,   0.00000, 0.00000, -90.00000, -1, 21, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1883.21765, -2217.66650, 16.43989,   0.00000, 0.00000, -90.00000, -1, 21, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(10558, 1893.08325, -2209.00879, 14.51640,   0.00000, 0.00000, 90.00000, -1, 21, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(14795, 1888.18091, -2201.61060, 14.03457,   0.00000, 179.99451, 1.99950, -1, 21, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(8420, 1926.17676, -2200.04663, 12.58000,   0.00000, 0.00000, 180.00000, -1, 21, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(8420, 1846.17004, -2199.96826, 12.58000,   0.00000, 0.00000, 0.00000, -1, 21, -1, MAX_RADIO_STREAM);

	CreateDynamicObject(9163, 1899.88818, -2194.00977, 16.43990,   0.00000, 0.00000, 0.00000, -1, 22, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1861.36841, -2194.21729, 16.43990,   0.00000, 0.00000, 0.00000, -1, 22, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1883.21741, -2170.90088, 16.43989,   0.00000, 0.00000, -90.00000, -1, 22, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(9163, 1883.21765, -2217.66650, 16.43989,   0.00000, 0.00000, -90.00000, -1, 22, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(10558, 1875.37915, -2208.99170, 14.51640,   0.00000, 0.00000, 90.00000, -1, 22, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(14795, 1888.18091, -2201.61060, 14.03457,   0.00000, 179.99451, 1.99950, -1, 22, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(8420, 1926.17676, -2200.04663, 12.58000,   0.00000, 0.00000, 180.00000, -1, 22, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(8420, 1846.17004, -2199.96826, 12.58000,   0.00000, 0.00000, 0.00000, -1, 22, -1, MAX_RADIO_STREAM);

	    // Proteccion de Explosion Gasolineras | By Desconocido | 88 Objetos
    CreateDynamicObject(11677, 1004.4343261719, -948.36755371094, 46.043098449707, 0, 0, 53, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(11417, -105.29484558105, -1193.4342041016, 6.2909736633301, 0, 0, 32, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, -92.699996948242, -1162.1899414063, 1.9800000190735, 0, 0, 68, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, -91.756210327148, -1162.5070800781, 1.9800000190735, 0, 0, 67.999877929688, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, -97.240936279297, -1172.8973388672, 2.039999961853, 0, 0, 67.999877929688, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, -96.299339294434, -1173.2299804688, 2.039999961853, 0, 0, 67.999877929688, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, -90.389022827148, -1175.8388671875, 1.789999961853, 0, 357.5, 67.999877929688, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, -85.95027923584, -1165.0400390625, 1.8899999856949, 0, 1.2000122070313, 67.999877929688, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1610.2292480469, -2713.8059082031, 47.9453125, 0, 0, 323, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1610.798828125, -2714.5485839844, 47.9453125, 0, 0, 322.998046875, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1613.556640625, -2718.2258300781, 47.9453125, 0, 0, 322.998046875, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1614.1141357422, -2718.9680175781, 47.9453125, 0, 0, 322.998046875, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1607.45703125, -2710.1682128906, 47.9453125, 0, 0, 322.998046875, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1606.9255371094, -2709.4631347656, 47.9453125, 0, 0, 322.998046875, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1604.1760253906, -2705.740234375, 47.9453125, 0, 0, 322.998046875, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1603.6298828125, -2705.0249023438, 47.9453125, 0, 0, 322.998046875, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, -1612.1333007813, -2719.8520507813, 48.509635925293, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, -1608.8570556641, -2715.4047851563, 48.509635925293, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, -1605.5515136719, -2711.0432128906, 48.509635925293, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, -1602.2153320313, -2706.6904296875, 48.509635925293, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(11417, -1593.0615234375, -2739.4858398438, 52.412910461426, 0, 0, 10, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(11417, -2243.3530273438, -2548.5139160156, 35.795722961426, 0, 0, 14, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -2248.4870605469, -2562.2756347656, 31.0703125, 0, 0, 63, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -2247.7121582031, -2562.7109375, 31.07745552063, 0, 0, 62.99560546875, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -2243.5483398438, -2564.8002929688, 31.0703125, 0, 0, 62.99560546875, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -2242.6828613281, -2565.2111816406, 31.0703125, 0, 0, 62.99560546875, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(11417, -2023.4284667969, 181.5690612793, 32.709785461426, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1686, -2026.5955810547, 156.82255554199, 28.0390625, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, -2026.0302734375, 156.76225280762, 28.590543746948, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, -2027.0118408203, 156.76225280762, 28.590543746948, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(996, -2016.6087646484, 148.77519226074, 27.436254501343, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, -2016.5404052734, 156.63232421875, 27.251823425293, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(996, -2016.6087646484, 157.69549560547, 27.436254501343, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, -2016.5404052734, 165.54466247559, 27.251823425293, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, -2016.5404052734, 147.75090026855, 27.251823425293, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, -2026.5955810547, 160.27062988281, 28.603385925293, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, -2026.5955810547, 153.22596740723, 28.603385925293, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1677.8190917969, 405.46643066406, 6.3984375, 0, 0, 44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1672.5668945313, 410.72399902344, 6.3984375, 0, 0, 44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1671.7083740234, 409.87326049805, 6.3984375, 0, 0, 44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1676.9721679688, 404.62310791016, 6.3984375, 0, 0, 44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1683.5639648438, 411.21224975586, 6.3984375, 0, 0, 44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1678.2972412109, 416.48797607422, 6.3984375, 0, 0, 44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1684.4241943359, 412.05838012695, 6.3984375, 0, 0, 44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, -1679.1702880859, 417.34906005859, 6.3984375, 0, 0, 44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(8167, -1666.4035644531, 417.02209472656, 2.7000000476837, 90, 0, 315, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(8167, -1665.5202636719, 416.17474365234, 2.7000000476837, 90, 0, 315, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(8167, -1678.6861572266, 403.01733398438, 2.7000000476837, 90, 0, 315, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(8167, -1679.5347900391, 403.89093017578, 2.7000000476837, 90, 0, 315, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(8167, -1685.2546386719, 409.6423034668, 2.7000000476837, 90, 0, 315, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(8167, -1686.1273193359, 410.49356079102, 2.7000000476837, 90, 0, 315, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, -1679.9932861328, 402.42730712891, 6.962760925293, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, -1686.5845947266, 409.04977416992, 6.962760925293, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, -1664.9559326172, 417.49685668945, 6.962760925293, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(8167, -1672.1302490234, 422.75018310547, 2.7000000476837, 90, 0, 315, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(8167, -1673.0307617188, 423.62954711914, 2.7000000476837, 90, 0, 315, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, -1671.5549316406, 424.0885925293, 6.962760925293, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(984, -2410.3576660156, 976.20617675781, 45.097618103027, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(984, -2411.2458496094, 976.20617675781, 45.097618103027, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, -2410.8286132813, 968.40417480469, 45.025260925293, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, -2410.8286132813, 983.60400390625, 45.025260925293, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 1942.140625, -1778.0500488281, 13.192106246948, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 1942.140625, -1773.9300537109, 13.192106246948, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 1942.140625, -1769.8100585938, 13.192106246948, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 1942.140625, -1767.7099609375, 13.192106246948, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 1941.1500244141, -1778.0500488281, 13.192106246948, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 1941.1500244141, -1773.9300537109, 13.191471099854, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 1941.1500244141, -1769.8100585938, 13.192106246948, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 1941.1500244141, -1767.7099609375, 13.192106246948, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1676, 1000.4146728516, -937.34997558594, 42.908992767334, 0, 0, 7.5, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1676, 1007.4282226563, -936.40002441406, 42.908992767334, 0, 0, 7.4981689453125, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, 997.40002441406, -938.25744628906, 41.328125, 0, 0, 7.5, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, 1004.3499755859, -937.34002685547, 41.328125, 0, 0, 7.4981689453125, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, 997.26831054688, -937.2109375, 41.328125, 0, 0, 7.4981689453125, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(994, 1004.2645874023, -936.28521728516, 41.328125, 0, 0, 7.4981689453125, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 655.19494628906, -570.42736816406, 16.052972793579, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 656.1044921875, -570.42736816406, 16.052972793579, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 656.1044921875, -559.77954101563, 16.052972793579, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 655.19494628906, -559.77954101563, 16.052972793579, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(11417, 654.08386230469, -587.52520751953, 20.201992034912, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(12913, 667.57708740234, -583.63159179688, 17.961227416992, 0, 0, 180, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 1379.6687011719, 460.25714111328, 19.896684646606, 0, 0, 336, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 1380.0240478516, 461.03591918945, 19.896684646606, 0, 0, 335.99487304688, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 1384.4685058594, 459.05697631836, 19.896684646606, 0, 0, 335.99487304688, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(970, 1384.1026611328, 458.24130249023, 19.896684646606, 0, 0, 335.99487304688, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, 655.63928222656, -572.41638183594, 16.065814971924, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(1215, 655.63928222656, -557.83038330078, 16.065814971924, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObject(11417, 1350.8807373047, 475.21041870117, 24.070476531982, 0, 0, 110, -1, -1, -1, MAX_RADIO_STREAM);
	//

	// water in pools
    CreateObject(10444, 1339.55957, -650.36328, 107.64650,   0.00000, 0.00000, 110.00000);
    CreateObject(10444, 881.52557, -683.94800, 112.61460,   0.00000, 0.00000, 145.00000);
    CreateObject(10444, 714.78162, -1054.18042, 45.20150,   0.00000, 0.00000, 150.10519);
    CreateDynamicObject(1243, 890.69623, -2448.19629, -3.40480,   0.00000, 0.00000, 0.00000);//pesca

      //- Utiles de gymnasio
	PressBancaBarraObjeto[0] = CreateDynamicObject(2913, barbell_pos[0][0], barbell_pos[0][1], barbell_pos[0][2], barbell_pos[0][3], barbell_pos[0][4], barbell_pos[0][5]);
	PressBancaBarraObjeto[1] = CreateDynamicObject(2913, barbell_pos[1][0], barbell_pos[1][1], barbell_pos[1][2], barbell_pos[1][3], barbell_pos[1][4], barbell_pos[1][5]);
	PressBancaBarraObjeto[2] = CreateDynamicObject(2913, barbell_pos[2][0], barbell_pos[2][1], barbell_pos[2][2], barbell_pos[2][3], barbell_pos[2][4], barbell_pos[2][5]);
	PressBancaBarraObjeto[3] = CreateDynamicObject(2913, barbell_pos[3][0], barbell_pos[3][1], barbell_pos[3][2], barbell_pos[3][3], barbell_pos[3][4], barbell_pos[3][5]);

	  //- Porton e puertas de LAPD
	PuertaLAPD = CreateDynamicObject(1495, 228.25906, 152.26401, 1002.02618,   0.00000, 0.00000, -90.00000);
	BotonPuertaLSPDINT = CreateButton(228.2975, 150.5040, 1003.2021, 90.00000);
    BotonPuertaLSPDINT1 = CreateButton(228.20528, 150.55099, 1003.20209, -90.00000);
    //sheriff
    PuertaSasd = CreateDynamicObject(1495, -448.1926, 692.63770, 3851.9309,   0.00000, 0.00000, -90.00000);
	BotonPuertaSasd = CreateButton(-448.2547, 690.9078, 3853.3909, -90.0000);
	BotonPuertaSasd1 = CreateButton(-448.1216, 690.8560, 3853.6653, 90.00000);
      //- Porton de SAN
    portonSAN1 = CreateDynamicObject(969, 774.11444092, -1384.98632812, 12.92022705, 0.00000000, 0.00000000, 0.00000000);
    portonSAN = CreateDynamicObject(976, 781.77209500, -1330.31884800, 12.68660500, 0.00000000, 0.00000000, -180.85939924);
      //- Porton de embargos
    portondeposito = CreateDynamicObject(19912, -497.41959, -562.72961, 27.28690,   0.00000, 0.00000, 180.59996);

    //-Puerta interior - LAPD comisaria
    PuertaLAPD = CreateDynamicObject(1536, 245.6000, 72.7385, 1002.6406, 0.000000, 0.000000, 0.000000);//puerta principal (H) para entrar
	//-Porton Exterior - LAPD Comisaria
	PortonLAPD = CreateDynamicObject(985, 1545.506225, -1627.595825, 11.642810, 0.000000, 0.000000, 89.900024, -1, -1, -1, 400.00, 400.00);

	 //- /equipo
    CreateDynamicPickup(19797, 1, 258.5224,78.1989,1003.6406); // equipo policia
    CreateDynamicPickup(1239, 1, 1121.7467, 1248.0630, 10.8971); // Equipo SAN LA
    CreateDynamicPickup(1242, 1, 351.6515, 213.3615, 1008.4004); // Equipo Gobierno
    CreateDynamicPickup(1239, 1, 1169.6697,-1352.4993,-10.7849); // Equipo LAFD - Medicos
    CreateDynamicPickup(1242, 1, 248.2357,1859.6606,14.0840); //guardia nacional
    CreateDynamicPickup(1242, 1, 2743.8459,-2453.7400,13.8623); //guardia nacional LS
    CreateDynamicPickup(1247, 1, 266.0501,119.1464,1004.6172); //sheriff

     //- Comandos de facciones
    CreateDynamicPickup(19418, 1, 2314.0645,2447.0774,3.2734); // /arrestar - fuera
    CreateDynamicPickup(19418, 1, -1623.6234,660.0409,-5.2422); // /arrestar - fuera
    CreateDynamicPickup(19418, 1, 1560.5967,-1693.8125,5.8906); // /arrestar - fuera
    CreateDynamicPickup(19418, 1, 2255.8445,2474.8198,38.6837); // /arrestar - AERO LV
    CreateDynamicPickup(19418, 1, 1548.9985,-1706.3549,28.3948); // /arrestar - AERO LS
    CreateDynamicPickup(19418, 1, -1688.3605,714.4664,30.6016); // /arrestar - AERO SF
    CreateDynamicPickup(19418, 1, 200.7210, 168.3594, 1002.9638); // /arrestar - dentro
	CreateDynamicPickup(19418, 1, 217.5615,1855.1033,12.9325); // arrestarmilitares
	CreateDynamicPickup(19418, 1, 620.5442,-596.2567,17.2330); // arrestar sheriff

     //- Extra
    CreateDynamicPickup(1239, 1, 2795.9546, -2569.3674, 2.9869); // /Puerto
    CreateDynamicPickup(19418, 1, 230.5195,164.9984,1003.0234); // /Computador
    CreateDynamicPickup(1239, 1, -1113.3628,3932.3645,228.6613); // Bienvenidos al Hospital.
    CreateDynamicPickup(1274, 1, 822.0089,1.8540,1004.1797); // /banco
    CreateDynamicPickup(1239, 1, 362.0124, 173.3058, 1008.3050); // /ayuntamiento
    CreateDynamicPickup(19797, 1, 1658.9924, -1807.1152, 13.5508); // Embargar
    CreateDynamicPickup(1239, 1, 655.2497, -502.9607, 16.3102); // Punto de /traficar
    CreateDynamicPickup(1240, 1, 1148.2609,-1322.6975,-10.7922); // cmd_menuhospital
    CreateDynamicPickup(1239, 1, 2540.0281, -1283.3070, 1043.9797); // /bandeja en la prision federal.

	 //- Aserrador
    CreateDynamicPickup(1239, 1, -441.13446, -1767.01123, 6.06064);
    CreateDynamicPickup(1239, 1, -432.12009, -1785.66162, 3.72014);
    CreateDynamicPickup(1239, 1, -419.71930, -1793.72607, 3.42763);
    CreateDynamicPickup(1239, 1, -409.08514, -1794.17078, 3.07774);
    CreateDynamicPickup(1239, 1, -404.41458, -1782.54700, 3.10609);
    CreateDynamicPickup(1239, 1, -398.54572, -1769.50366, 4.84904);
    CreateDynamicPickup(1239, 1, -393.60931, -1792.14294, 3.10774);
    CreateDynamicPickup(1239, 1, -418.7807, -1766.8615, 5.0786);
    CreateDynamicPickup(1463, 1, 1897.9568, -1851.2993, 13.5590);

    //Carguero
    CreateDynamicObject(3665, 2193.716552, -2232.875000, 11.500185, 0.000000, 0.000000, -135.800079, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(19321, 2189.260253, -2239.684570, 14.946870, 0.000000, 0.000000, 44.499996, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(19321, 2196.149902, -2232.914062, 14.946870, 0.000000, 0.000000, 44.499996, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(19321, 2203.074462, -2226.108398, 14.946870, 0.000000, 0.000000, 44.499996, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2991, 2189.806884, -2240.206787, 14.101366, 0.000000, 0.000000, -45.099998, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2991, 2196.627685, -2233.408691, 14.101366, 0.000000, 0.000000, -45.099998, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2991, 2203.519042, -2226.539794, 14.101366, 0.000000, 0.000000, -45.099998, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3567, 2176.953125, -2227.333496, 13.206664, 0.000000, 0.000000, 44.400001, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3567, 2183.948242, -2220.482910, 13.206664, 0.000000, 0.000000, 44.400001, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3567, 2190.806640, -2213.765380, 13.206664, 0.000000, 0.000000, 44.400001, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2932, 2179.554443, -2230.062744, 15.507594, 0.000000, 0.000000, 45.399974, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2932, 2174.114257, -2224.698242, 15.507594, 0.000000, 0.000000, 45.399974, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2934, 2186.824951, -2223.289550, 15.497208, 0.000000, 0.000000, 44.200000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2934, 2181.469970, -2217.783691, 15.497208, 0.000000, 0.000000, 44.200000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2935, 2193.542724, -2216.418701, 15.536877, 0.000000, 0.000000, 44.299987, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(2935, 2188.255859, -2211.001220, 15.536877, 0.000000, 0.000000, 44.299987, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(5126, 2207.488525, -2207.087402, 27.306877, 0.000000, 0.000000, -134.800003, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(11401, 2188.768310, -2226.163330, 24.366867, 0.000000, 0.000000, -49.399997, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1381, 2188.779541, -2226.178222, 23.566886, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1684, 2210.940673, -2221.393310, 14.026876, 0.000000, 0.000000, 45.700008, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1684, 2220.355468, -2211.746337, 14.026876, 0.000000, 0.000000, 45.700008, -1, -1, -1, 400.00, 400.00);

	/*//- Inicio
    D_LOGIN = TextDrawCreate(-7.200000, -6.720000, "loadsc14:loadsc14");
    TextDrawLetterSize(D_LOGIN, 0.000000, 0.000000);
    TextDrawTextSize(D_LOGIN, 650.399902, 460.693298);
    TextDrawAlignment(D_LOGIN, 1);
    TextDrawColor(D_LOGIN, -1);
    TextDrawSetShadow(D_LOGIN, 0);
    TextDrawSetOutline(D_LOGIN, 0);
    TextDrawFont(D_LOGIN, 4);*/

	//- Efecto de drogas
    EfectoPorro = TextDrawCreate(-12.000000, 2.000000, "_");
    TextDrawBackgroundColor(EfectoPorro, 255);
    TextDrawFont(EfectoPorro, 1);
    TextDrawLetterSize(EfectoPorro, 0.900000, 51.099998);
    TextDrawColor(EfectoPorro, -1);
    TextDrawSetOutline(EfectoPorro, 0);
    TextDrawSetProportional(EfectoPorro, 1);
    TextDrawSetShadow(EfectoPorro, 1);
    TextDrawUseBox(EfectoPorro, 1);
    TextDrawBoxColor(EfectoPorro, 0x93F3002A);
    TextDrawTextSize(EfectoPorro, 660.000000, 0.000000);
    TextDrawSetSelectable(EfectoPorro, 0);

    EfectoCrack = TextDrawCreate(661.000000, 1.000000, "_");
    TextDrawBackgroundColor(EfectoCrack, 255);
    TextDrawFont(EfectoCrack, 1);
    TextDrawLetterSize(EfectoCrack, 0.800000, 51.299999);
    TextDrawColor(EfectoCrack, -1);
    TextDrawSetOutline(EfectoCrack, 0);
    TextDrawSetProportional(EfectoCrack, 1);
    TextDrawSetShadow(EfectoCrack, 1);
    TextDrawUseBox(EfectoCrack, 1);
    TextDrawBoxColor(EfectoCrack, 0xFFFFFF81);
    TextDrawTextSize(EfectoCrack, -30.000000, -49.000000);
    TextDrawSetSelectable(EfectoCrack, 0);

    EfectoCocaina = TextDrawCreate(661.000000, 1.000000, "_");
    TextDrawBackgroundColor(EfectoCocaina, 255);
    TextDrawFont(EfectoCocaina, 1);
    TextDrawLetterSize(EfectoCocaina, 0.800000, 51.299999);
    TextDrawColor(EfectoCocaina, -1);
    TextDrawSetOutline(EfectoCocaina, 0);
    TextDrawSetProportional(EfectoCocaina, 1);
    TextDrawSetShadow(EfectoCocaina, 1);
    TextDrawUseBox(EfectoCocaina, 1);
    TextDrawBoxColor(EfectoCocaina, 0xB80000BF);
    TextDrawTextSize(EfectoCocaina, -30.000000, -49.000000);
    TextDrawSetSelectable(EfectoCocaina, 0);

    EfectoHeroina = TextDrawCreate(661.000000, 1.000000, "_");
    TextDrawBackgroundColor(EfectoHeroina, 255);
    TextDrawFont(EfectoHeroina, 1);
    TextDrawLetterSize(EfectoHeroina, 0.800000, 51.299999);
    TextDrawColor(EfectoHeroina, -1);
    TextDrawSetOutline(EfectoHeroina, 0);
    TextDrawSetProportional(EfectoHeroina, 1);
    TextDrawSetShadow(EfectoHeroina, 1);
    TextDrawUseBox(EfectoHeroina, 1);
    TextDrawBoxColor(EfectoHeroina, 0x00000095);
    TextDrawTextSize(EfectoHeroina, -30.000000, -49.000000);
    TextDrawSetSelectable(EfectoHeroina, 0);

	Textdraws[RoboNegocio][0] = TextDrawCreate(85.000000, 258.000000, "_");
	TextDrawFont(Textdraws[RoboNegocio][0], 1);
	TextDrawLetterSize(Textdraws[RoboNegocio][0], 0.600000, 6.250000);
	TextDrawTextSize(Textdraws[RoboNegocio][0], 298.500000, 130.000000);
	TextDrawSetOutline(Textdraws[RoboNegocio][0], 1);
	TextDrawSetShadow(Textdraws[RoboNegocio][0], 0);
	TextDrawAlignment(Textdraws[RoboNegocio][0], 2);
	TextDrawColor(Textdraws[RoboNegocio][0], -1);
	TextDrawBackgroundColor(Textdraws[RoboNegocio][0], 255);
	TextDrawBoxColor(Textdraws[RoboNegocio][0], 255);
	TextDrawUseBox(Textdraws[RoboNegocio][0], 1);
	TextDrawSetProportional(Textdraws[RoboNegocio][0], 1);
	TextDrawSetSelectable(Textdraws[RoboNegocio][0], 0);

	Textdraws[RoboNegocio][1] = TextDrawCreate(39.000000, 260.000000, "Robando Negocio...");
	TextDrawFont(Textdraws[RoboNegocio][1], 1);
	TextDrawLetterSize(Textdraws[RoboNegocio][1], 0.320832, 1.750000);
	TextDrawTextSize(Textdraws[RoboNegocio][1], 144.500000, 17.000000);
	TextDrawSetOutline(Textdraws[RoboNegocio][1], 0);
	TextDrawSetShadow(Textdraws[RoboNegocio][1], 0);
	TextDrawAlignment(Textdraws[RoboNegocio][1], 1);
	TextDrawColor(Textdraws[RoboNegocio][1], -1);
	TextDrawBackgroundColor(Textdraws[RoboNegocio][1], 0);
	TextDrawBoxColor(Textdraws[RoboNegocio][1], 0);
	TextDrawUseBox(Textdraws[RoboNegocio][1], 1);
	TextDrawSetProportional(Textdraws[RoboNegocio][1], 1);
	TextDrawSetSelectable(Textdraws[RoboNegocio][1], 0);

	Textdraws[RoboNegocio][3] = TextDrawCreate(25.000000, 279.000000, "Espera un momento que el cajero entregue el dinero...");
	TextDrawFont(Textdraws[RoboNegocio][3], 1);
	TextDrawLetterSize(Textdraws[RoboNegocio][3], 0.212500, 1.549999);
	TextDrawTextSize(Textdraws[RoboNegocio][3], 144.500000, 17.000000);
	TextDrawSetOutline(Textdraws[RoboNegocio][3], 0);
	TextDrawSetShadow(Textdraws[RoboNegocio][3], 0);
	TextDrawAlignment(Textdraws[RoboNegocio][3], 1);
	TextDrawColor(Textdraws[RoboNegocio][3], -1);
	TextDrawBackgroundColor(Textdraws[RoboNegocio][3], 0);
	TextDrawBoxColor(Textdraws[RoboNegocio][3], 0);
	TextDrawUseBox(Textdraws[RoboNegocio][3], 1);
	TextDrawSetProportional(Textdraws[RoboNegocio][3], 1);
	TextDrawSetSelectable(Textdraws[RoboNegocio][3], 0);

	//timers - timer's
    // SetTimer("timer_vehiculos", 60000, true);
    SetTimer("timer_microashas", 250, true);
    SetTimer("timer_spec", 3000, true);
    SetTimer("timer_segundo", 1000, true);
    SetTimer("timer_minuto", 60000, true);
    SetTimer("timer_hora", 3600000, true);
    SetTimer("timer_necesidades", 900*1000, true); // 900 = 5 minutos
    SetTimer("timer_anuncios", 300*1000, true); // 3300 = 5 minutos
    SetTimer("Armas",500,true);

	printf("> Sistema de parqueos/peajes cargado (%i).", MAX_PEAJE);
	return 1;
}

Jugar_Loteria(number)
{
	//ganador
	new DineroLoteriaFallen = 0, string[256];
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid) && InfoJugador[playerid][jLoteria] != 0)
	{
		if (InfoJugador[playerid][jLoteria] == number)
		{
			DineroLoteriaFallen = 1;
			format(string, sizeof string, "[SAN] Ganador numero: %d, %s se llevo un total de $%s", number, NombreJugador(playerid), diner_coma(DineroLoteria));
			_MensajeSAN(0x00DC76FF, string);
			SendClientMessageEx(playerid, 0xFFEA5FFF, "[SMS: 9891]: Felicitaciones, ganaste $%s con tu boleta de loteria %d.", diner_coma(DineroLoteria), number);
			GivePlayerCash(playerid, DineroLoteria, "loteria");
		}
		else { SendClientMessageEx(playerid, 0xccccccff, "No ganaste la loteria, suerte la proxima."); }
		InfoJugador[playerid][jLoteria] = 0;
		guardar_int_mysql("cuentas", "Loteria", InfoJugador[playerid][jID], InfoJugador[playerid][jLoteria]);
	    DineroLoteriaFallen = 0;
	}
	//prox
	new aumento = Random(3500, 4200);
	if (DineroLoteriaFallen)
	{
		DineroLoteria = aumento;
		format(string, sizeof string, "[SAN] Numero ganador %d, nuevo monto total de premio es de $%s", number, diner_coma(DineroLoteria));
	}
	else
	{
		DineroLoteria += aumento;
		format(string, sizeof string, "[SAN] Numero ganador %d, nuevo monto total de premio es de $%s", number, diner_coma(DineroLoteria));
	}
	ActualizarEst();
	_MensajeSAN(0x00DC76FF, string);
	return 1;
}

funcion DataUserClean(playerid)
{
    timer_muerte[playerid] = 0;

	NegocioSQL_ID[playerid] = -1;
    NegocioOffer[playerid] = 999;
    NegocioPrice[playerid] = 0;
	EnVentaPropiedad[playerid] = 0;
	CasaOffer[playerid] = 999;
	CasaPrice[playerid] = 0;
	CasaSQL_ID[playerid] = -1;
	DiscordTimer[playerid] = -1;

    LeOfreci[playerid] = INVALID_PLAYER_ID;
    rent_vehicle_id[playerid] = INVALID_VEHICLE_ID;
	coche_trabajo_id[playerid] = INVALID_VEHICLE_ID;
	id_coche_temporal_fac[playerid] = INVALID_VEHICLE_ID;
	Altavoz[playerid] = 0;
	ConquistandoMercado[playerid] = -1;
	Anti[playerid][BalasW] = 0;
	cocherobo[playerid] = 0;
	checkcoche[playerid] = 0;
	KillTimer(jPt_fabrica[playerid]);
	UsandoOptiwand[playerid] = -1;
	_Logeo[playerid] = 0;
	_rVeh[playerid] = 0;
	Quitando[playerid] = 0;
	for(new i = 0; i < 6; i++) { jEvento[playerid][eVariable][i] = 0.0; }
	_arma[playerid] = -1;
	asesino[playerid] = -1;
    DeletePVar(playerid, "EnEvento");
    jEvento[playerid][eInterior] = 0;
    jEvento[playerid][eVW] = 0;
	SetPlayerChatBubble(playerid, "", 0xBFC0C2FF, 50.0, 1000);
    Taseado[playerid] = 0;
    _Gomas[playerid] = 0;
    EnCasaID[playerid] = -1;
    EnEmpresaID[playerid] = -1;
    MostrarNombre[playerid] = 0;
    MostrarVelocimetro[playerid] = 0;
    BalasDeGoma[playerid] = 0;
    VisitaTimer[playerid] = 0;
    VisitaTimer2[playerid] = 0;
    SolicitaRefuerzos[playerid] = 0;
    BotonPanico[playerid] = 0;
    VehMaleteroPlayer[playerid] = 0;
    VehGuanteraPlayer[playerid] = 0;
    escuchandop[playerid] = 0;
    estacionp[playerid] = 0;
    B_Musica[playerid] = 0;
    MusicaEsc[playerid] = 0;
    B_Manos[playerid] = 0;
    B_Pecho[playerid] = 0;
    Vendado[playerid] = 0;
    RepeticionesPressBanca[playerid] = 0;
    Atado[playerid] = 0;
    Esposado[playerid] = 0;
    intentoac[playerid] = 0;
    HaciendoPressBanca[playerid] = 0;
    Consumiendo[playerid] = 0;
    compra_Veh[playerid] = -1;
    r_vehiculo[playerid] = 0;
    veh_asiento[playerid] = -1;
    Saludo_ID[playerid] = 999;
    alcoholemia[playerid] = 999;
    ReporteA[playerid] = 0;
    ReporteT[playerid] = "Nada";
    ReporteB[playerid] = 0;
    TomandoTrabajo[playerid] = -1;
    DudaT[playerid] = "Nada";
    PrivadosB[playerid] = 0;
    DudaB[playerid] = 0;
    TestErrores[playerid] = 10;
    YaAviso[playerid] = 0;
    Pedido[playerid] = 0;
    B_WSP[playerid] = 0;
    _MedicAcept[playerid] = 999;
    _BombAcept[playerid] = 999;
    B_OOC[playerid] = 1;
    B_VIP[playerid] = 1;
	B_YT[playerid] = 1;
    B_SAN[playerid] = 1;
    BigEar[playerid] = 0;
    B_Faccion[playerid] = 0;
    QuienManejo[playerid] = 0;
    B_Radio[playerid] = 1;
    RanuraSeleccionada[playerid] = -1;
    RanuraSeleccionadaA[playerid] = -1;
    OfrecieronCasarse[playerid] = -1;
	OfrecisteCasarse[playerid] = -1;
    MultaOfrecer[playerid] = 999;
    MultaPrecio[playerid] = 0;
    Paquetes[playerid] = 0;
    EnServicioADM[playerid] = 0;
    _Medic2Call[playerid] = 0;
    _Entrevista[playerid] = 999;
    EnLlamada[playerid] = 0;
    ToqueLlamada[playerid] = 0;
    PersonaEnLlamada[playerid] = -1;
    _Vehdueno[playerid] = 999;
    _Vehprecio[playerid] = 0;
    _VehID[playerid] = -1;
    Spectando[playerid] = 0;
    SpectadorID[playerid] = 999;
    Spectate[playerid] = 999;
    _2Entrevista[playerid] = INVALID_PLAYER_ID;
    B_Privados[playerid] = 0;
    B_Telefono[playerid] = 0;
    ReparacionVehiculo[playerid] = 0;
    ReparacionOfrecer[playerid] = 999;
    ReparacionPrecio[playerid] = 0;
    TruckDeliver[playerid] = 0;
    _CamVeh[playerid] = INVALID_VEHICLE_ID;
    JugadorUsandoAnimacion[playerid] = 0;
    gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
    EnServicio[playerid] = 0;
    JetPack[playerid] = 0;
    RanuraObjNSeleccionada[playerid] = -1;
    RanuraObjCSeleccionada[playerid] = -1;
    FacturaMulta[playerid] = 0;
    GiveKeysTo[playerid] = INVALID_PLAYER_ID;
    Unspec[playerid][sLocal] = 255;
    alm(QuienMato[playerid], "Nadie");
    CederTiempo[playerid] = -1;
    RecargarTiempo[playerid] = -1;
    Intentar[playerid] = -1;
    Intentar2[playerid] = -1;
    IntentarD[playerid] = -1;
    TiempoReporte[playerid] = -1;
    PagarTiempo[playerid] = -1;
    DudaTimer[playerid] = -1;
	InfoFogata[playerid][fPosicionX] = 0.0;
	InfoFogata[playerid][fObjeto] = 0;
	SetPVarInt(playerid, "IsNameNew", 0);
    SetPVarInt(playerid, "TrabajandoL", 0); SetPVarInt(playerid, "TrabajandoC", 0);
    SetPVarInt(playerid, "MueblesCreados", 0); SetPVarInt(playerid, "TroncosCreados", 0);
    SetPVarInt(playerid, "TomoCarpintero", 0); SetPVarInt(playerid, "HaciendoMueble", 0); DeletePVar(playerid, "TipoCarga");
    DeletePVar(playerid, "Congelado"); DeletePVar(playerid, "desbug_muerte");
	_Piedras[playerid] = 0;
	_Minando[playerid] = 0;
    alm(DocumentoNombre[playerid], "Nadie");

   	TextTrabajo[playerid] = CreatePlayerTextDraw(playerid, 318.399963, 352.426788, "_");
	PlayerTextDrawLetterSize(playerid, TextTrabajo[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, TextTrabajo[playerid], 2);
	PlayerTextDrawColor(playerid, TextTrabajo[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TextTrabajo[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TextTrabajo[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TextTrabajo[playerid], 255);
	PlayerTextDrawFont(playerid, TextTrabajo[playerid], 2);
	PlayerTextDrawSetProportional(playerid, TextTrabajo[playerid], 1);

	ServicioGrua[playerid][0] = CreatePlayerTextDraw(playerid, 827.000000, -0.833333, "_");
	PlayerTextDrawLetterSize(playerid, ServicioGrua[playerid][0], 0.000000, 63.958797);
	PlayerTextDrawTextSize(playerid, ServicioGrua[playerid][0], -9.500000, 0.000000);
	PlayerTextDrawAlignment(playerid, ServicioGrua[playerid][0], 1);
	PlayerTextDrawColor(playerid, ServicioGrua[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, ServicioGrua[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, ServicioGrua[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, ServicioGrua[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, ServicioGrua[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, ServicioGrua[playerid][0], 255);
	PlayerTextDrawFont(playerid, ServicioGrua[playerid][0], 0);

	ServicioGrua[playerid][1] = CreatePlayerTextDraw(playerid, 197.500000, 216.999938, "_");
	PlayerTextDrawLetterSize(playerid, ServicioGrua[playerid][1], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, ServicioGrua[playerid][1], 1);
	PlayerTextDrawColor(playerid, ServicioGrua[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, ServicioGrua[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, ServicioGrua[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, ServicioGrua[playerid][1], 51);
	PlayerTextDrawFont(playerid, ServicioGrua[playerid][1], 3);
	PlayerTextDrawSetProportional(playerid, ServicioGrua[playerid][1], 1);

	ServicioGrua[playerid][2] = CreatePlayerTextDraw(playerid, 254.000000, 21.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, ServicioGrua[playerid][2], 5);
	PlayerTextDrawLetterSize(playerid, ServicioGrua[playerid][2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, ServicioGrua[playerid][2], 128.500000, 145.000000);
	PlayerTextDrawSetOutline(playerid, ServicioGrua[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, ServicioGrua[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, ServicioGrua[playerid][2], 2);
	PlayerTextDrawColor(playerid, ServicioGrua[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, ServicioGrua[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, ServicioGrua[playerid][2], 0);
	PlayerTextDrawUseBox(playerid, ServicioGrua[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, ServicioGrua[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, ServicioGrua[playerid][2], 0);
	PlayerTextDrawSetPreviewModel(playerid, ServicioGrua[playerid][2], 416);
	PlayerTextDrawSetPreviewVehCol(playerid, ServicioGrua[playerid][2], 1, 1);

	ServicioGrua[playerid][3] = CreatePlayerTextDraw(playerid, 254.000000, 21.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, ServicioGrua[playerid][3], 5);
	PlayerTextDrawLetterSize(playerid, ServicioGrua[playerid][3], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, ServicioGrua[playerid][3], 128.500000, 145.000000);
	PlayerTextDrawSetOutline(playerid, ServicioGrua[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, ServicioGrua[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, ServicioGrua[playerid][3], 2);
	PlayerTextDrawColor(playerid, ServicioGrua[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, ServicioGrua[playerid][3], 0);
	PlayerTextDrawBoxColor(playerid, ServicioGrua[playerid][3], 0);
	PlayerTextDrawUseBox(playerid, ServicioGrua[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, ServicioGrua[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, ServicioGrua[playerid][3], 0);
	PlayerTextDrawSetPreviewModel(playerid, ServicioGrua[playerid][3], 525);
	PlayerTextDrawSetPreviewVehCol(playerid, ServicioGrua[playerid][3], 1, 1);

    //Velocimetro
	TD_Velocimetro[playerid][0] = CreatePlayerTextDraw(playerid, 314.000000, 390.000000, "_");
	PlayerTextDrawFont(playerid, TD_Velocimetro[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, TD_Velocimetro[playerid][0], 0.649999, 4.299998);
	PlayerTextDrawTextSize(playerid, TD_Velocimetro[playerid][0], 400.000000, 158.000000);
	PlayerTextDrawSetOutline(playerid, TD_Velocimetro[playerid][0], 2);
	PlayerTextDrawSetShadow(playerid, TD_Velocimetro[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, TD_Velocimetro[playerid][0], 2);
	PlayerTextDrawColor(playerid, TD_Velocimetro[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_Velocimetro[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, TD_Velocimetro[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, TD_Velocimetro[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TD_Velocimetro[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, TD_Velocimetro[playerid][0], 0);

	TD_Velocimetro[playerid][1] = CreatePlayerTextDraw(playerid, 350.000000, 400.000000, "_");
	PlayerTextDrawFont(playerid, TD_Velocimetro[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, TD_Velocimetro[playerid][1], 0.204166, 1.549999);
	PlayerTextDrawTextSize(playerid, TD_Velocimetro[playerid][1], 400.000000, 158.000000);
	PlayerTextDrawSetOutline(playerid, TD_Velocimetro[playerid][1], 2);
	PlayerTextDrawSetShadow(playerid, TD_Velocimetro[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, TD_Velocimetro[playerid][1], 2);
	PlayerTextDrawColor(playerid, TD_Velocimetro[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_Velocimetro[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, TD_Velocimetro[playerid][1], 0);
	PlayerTextDrawUseBox(playerid, TD_Velocimetro[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TD_Velocimetro[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, TD_Velocimetro[playerid][1], 0);
    return 1;
}

public OnPlayerSpawn(playerid)
{
	if (state_on[playerid] == 1)
	{
    	PlayAudioStreamForPlayer(playerid, RandMusic[random(sizeof(RandMusic))]);
		TogglePlayerSpectating(playerid, true);
		SetPlayerColor(playerid, 0xE7E7E700);
		LimpiarPantalla(playerid);
		state_on[playerid] = 2;
        SetPlayerInterior(playerid, 0);
        InterpolateCameraPos(playerid, 447.1717, 512.9380, 1001.6884, 447.1717, 512.9380, 1001.6884, 4000);
		InterpolateCameraLookAt(playerid, 446.4043, 513.5767, 1001.7037, 446.4043, 513.5767, 1001.7037, 4000);
		SetPosEx(playerid, 300.1749, 1813.6820, 4.7704, 359.6664, 12, playerid+1, 0);
		new time[3], gformat[170];
		gettime(time[0], time[1], time[2]);
		SetPlayerTime(playerid, time[0], time[1]);
		format(gformat, sizeof gformat, "%s", InfoJugador[playerid][jNombre_Apellido]);
        PlayerTextDrawSetStringEx(playerid, nombrelogin[playerid], gformat);
		PlayerTextDrawShow(playerid, nombrelogin[playerid]);
        TextDrawShowForPlayer(playerid, LoginTD[0]);
        TextDrawShowForPlayer(playerid, LoginTD[1]);
		TextDrawShowForPlayer(playerid, LoginTD[2]);
		TextDrawShowForPlayer(playerid, LoginTD[3]);
		TextDrawShowForPlayer(playerid, LoginTD[4]);
		TextDrawShowForPlayer(playerid, LoginTD[5]);
		TextDrawShowForPlayer(playerid, LoginTD[6]);
		TextDrawShowForPlayer(playerid, LoginTD[7]);
		TextDrawShowForPlayer(playerid, LoginTD[9]);
		TextDrawShowForPlayer(playerid, LoginTD[10]);
		TextDrawShowForPlayer(playerid, LoginTD[11]);
		TextDrawShowForPlayer(playerid, LoginTD[13]);
		SelectTextDraw(playerid, 0x4d7fc9FF);
		//validacion IP
		new query1[256], Cache:result1;
		mysql_format(DBngrp, query1, sizeof query1, "SELECT * FROM cuentas WHERE Nombre_Apellido = '%e' && IP = '%e' LIMIT 1", NombreOriginal(playerid), ipjugador(playerid));
		result1 = mysql_query(DBngrp, query1);
		if (cache_num_rows() > 0) // iniciar sesion
		{
			reg_int(0, "ID", InfoJugador[playerid][jID]);
			reg_string(0, "Nombre_Apellido", InfoJugador[playerid][jNombre_Apellido], MAX_PLAYER_NAME);
			foreach(new p: Player) if (usuario_registro[p] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoJugador[p][jNombre_Apellido], true) == 0)
			{
				Kick(playerid);
				SendClientMessage(p, 0x00CCCCFF, "[!] Alguien intento entrar a tu cuenta, avisa a un administrador.");
				return 1;
			}
			reg_string(0, "Clave", InfoJugador[playerid][jClave], 65);
			reg_string(0, "Salt", InfoJugador[playerid][jSalt], 11);
			cache_unset_active();
            TextDrawShowForPlayer(playerid, LoginTD[14]);
			return 1;
		}
		cache_delete(result1);
		// validacion de cuenta sql
		new query[256], Cache:result;
		mysql_format(DBngrp, query, sizeof query, "SELECT * FROM cuentas WHERE Nombre_Apellido = '%e' LIMIT 1", NombreOriginal(playerid));
		result = mysql_query(DBngrp, query);
		if (cache_num_rows() > 0) // iniciar sesion
		{
			reg_int(0, "ID", InfoJugador[playerid][jID]);
			reg_string(0, "Nombre_Apellido", InfoJugador[playerid][jNombre_Apellido], MAX_PLAYER_NAME);
			foreach(new p: Player) if (usuario_registro[p] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoJugador[p][jNombre_Apellido], true) == 0)
			{
				Kick(playerid);
				SendClientMessage(p, 0x00CCCCFF, "[!] Alguien intento entrar a tu cuenta, avisa a un administrador.");
				return 1;
			}
			reg_string(0, "Clave", InfoJugador[playerid][jClave], 65);
			reg_string(0, "Salt", InfoJugador[playerid][jSalt], 11);
			cache_unset_active();
 		    TextDrawShowForPlayer(playerid, LoginTD[8]);
			TextDrawShowForPlayer(playerid, LoginTD[15]);
		}
		else // registrarse
		{
			TextDrawShowForPlayer(playerid, LoginTD[12]);
		}
		cache_delete(result);
		return 1;
	}

	if (!IsPlayerConnectedEx(playerid) && !IsPlayerNPC(playerid)) return(ShowInfoForPlayer(playerid, "Fuiste expulsado automaticamente, no has ingresado correctamente.", 2000), Kick(playerid));

	_OnPlayerSpawn(playerid);
	return 1;
}

Dialog:ShowIngreso(playerid, response, listitem, inputtext[])
{
	if (!response) return Kick(playerid);
	new Salted_Key[65];
	SHA256_PassHash(inputtext, InfoJugador[playerid][jSalt], Salted_Key, 65);
	if (strcmp(Salted_Key, InfoJugador[playerid][jClave]) == 0)
	{
		new query[170], create = 0, Cache:result;
		mysql_format(DBngrp, query, sizeof query, "SELECT * FROM cuentas WHERE ID = '%d'", InfoJugador[playerid][jID]);
		result = mysql_query(DBngrp, query);
		if (cache_num_rows() > 0)
		{
			reg_string(0, "Email", InfoJugador[playerid][jEmail], 256);
			reg_string(0, "IP", InfoJugador[playerid][jIP], 18);
			reg_int(0, "JuegaleOwo", InfoJugador[playerid][jAdmin]);
			reg_int(0, "Encargado_1", InfoJugador[playerid][jEncargado][0]);
			reg_int(0, "Encargado_2", InfoJugador[playerid][jEncargado][1]);
			reg_int(0, "Encargado_3", InfoJugador[playerid][jEncargado][2]);
			reg_int(0, "Encargado_4", InfoJugador[playerid][jEncargado][3]);
			reg_int(0, "Encargado_5", InfoJugador[playerid][jEncargado][4]);
			reg_int(0, "Encargado_6", InfoJugador[playerid][jEncargado][5]);
			reg_int(0, "Encargado_7", InfoJugador[playerid][jEncargado][6]);
			reg_string(0, "FechaRegistro", InfoJugador[playerid][jFechaRegistro], 256);
			reg_string(0, "UltimaConexion", InfoJugador[playerid][jUltimaConexion], 256);
			reg_float(0, "PosicionX", InfoJugador[playerid][jPosicionX]);
			reg_float(0, "PosicionY", InfoJugador[playerid][jPosicionY]);
			reg_float(0, "PosicionZ", InfoJugador[playerid][jPosicionZ]);
			reg_float(0, "PosicionR", InfoJugador[playerid][jPosicionR]);
			reg_int(0, "Interior", InfoJugador[playerid][jInterior]);
			reg_int(0, "VirtualWorld", InfoJugador[playerid][jVirtualWorld]);
			reg_float(0, "Vida", InfoJugador[playerid][jVida]);
			reg_float(0, "Chaleco", InfoJugador[playerid][jChaleco]);
			reg_int(0, "Skin", InfoJugador[playerid][jSkin]);
			reg_int(0, "Ropa1", InfoJugador[playerid][jRopa][0]);
			reg_int(0, "Ropa2", InfoJugador[playerid][jRopa][1]);
			reg_int(0, "Ropa3", InfoJugador[playerid][jRopa][2]);
			reg_int(0, "Ropa4", InfoJugador[playerid][jRopa][3]);
			reg_int(0, "Ropa5", InfoJugador[playerid][jRopa][4]);
			reg_int(0, "Ropa6", InfoJugador[playerid][jRopa][5]);
			reg_int(0, "Ropa7", InfoJugador[playerid][jRopa][6]);
			reg_int(0, "Ropa8", InfoJugador[playerid][jRopa][7]);
			reg_int(0, "Nivel", InfoJugador[playerid][jNivel]);
			reg_int(0, "Experiencia", InfoJugador[playerid][jExperiencia]);
			reg_int(0, "HorasConectado", InfoJugador[playerid][jHorasConectado]);
			reg_int(0, "Sexo", InfoJugador[playerid][jSexo]);
			reg_int(0, "Edad", InfoJugador[playerid][jEdad]);
			reg_int(0, "Ciudad", InfoJugador[playerid][jCiudad]);
			reg_int(0, "Estilo", InfoJugador[playerid][jEstilo]);
			reg_int(0, "Pelea", InfoJugador[playerid][jPelea]);
			reg_int(0, "Sed", InfoJugador[playerid][jSed]);
			reg_int(0, "Hambre", InfoJugador[playerid][jHambre]);
			reg_int(0, "Alcohol", InfoJugador[playerid][jAlcohol]);
			reg_int(0, "Fuerza", InfoJugador[playerid][jFuerza]);
			reg_int(0, "Dinero", InfoJugador[playerid][jDinero]);
			reg_int(0, "Banco", InfoJugador[playerid][jBanco]);
			reg_int (0, "dutypd", InfoJugador[playerid][jDutyPD]);
			reg_int(0, "FacLider", InfoJugador[playerid][jFacLider]);
			reg_int(0, "FacMiembro", InfoJugador[playerid][jFacMiembro]);
			reg_int(0, "FacRango", InfoJugador[playerid][jFacRango]);
			reg_int(0, "FamLider", InfoJugador[playerid][jFamLider]);
			reg_int(0, "FamMiembro", InfoJugador[playerid][jFamMiembro]);
			reg_int(0, "FamRango", InfoJugador[playerid][jFamRango]);
			reg_int(0, "Bolsillo_1", InfoJugador[playerid][jBolsillo][0]);
			reg_int(0, "Cantidad_bolsillo_1", InfoJugador[playerid][jBolsilloCant][0]);
			reg_int(0, "Bolsillo_2", InfoJugador[playerid][jBolsillo][1]);
			reg_int(0, "Cantidad_bolsillo_2", InfoJugador[playerid][jBolsilloCant][1]);
			reg_int(0, "Bolsillo_3", InfoJugador[playerid][jBolsillo][2]);
			reg_int(0, "Cantidad_bolsillo_3", InfoJugador[playerid][jBolsilloCant][2]);
			reg_int(0, "Bolsillo_4", InfoJugador[playerid][jBolsillo][3]);
			reg_int(0, "Cantidad_bolsillo_4", InfoJugador[playerid][jBolsilloCant][3]);
			reg_int(0, "Bolsillo_5", InfoJugador[playerid][jBolsillo][4]);
			reg_int(0, "Cantidad_bolsillo_5", InfoJugador[playerid][jBolsilloCant][4]);
			reg_int(0, "Bolsillo_6", InfoJugador[playerid][jBolsillo][5]);
			reg_int(0, "Cantidad_bolsillo_6", InfoJugador[playerid][jBolsilloCant][5]);
			reg_int(0, "Bolsillo_7", InfoJugador[playerid][jBolsillo][6]);
			reg_int(0, "Cantidad_bolsillo_7", InfoJugador[playerid][jBolsilloCant][6]);
			reg_int(0, "Bolsillo_8", InfoJugador[playerid][jBolsillo][7]);
			reg_int(0, "Cantidad_bolsillo_8", InfoJugador[playerid][jBolsilloCant][7]);
			reg_int(0, "Bolsillo_9", InfoJugador[playerid][jBolsillo][8]);
			reg_int(0, "Cantidad_bolsillo_9", InfoJugador[playerid][jBolsilloCant][8]);
			reg_int(0, "mano_izquierda", InfoJugador[playerid][jManoIzquierda]);
			reg_int(0, "Cantidad_mano_izquierda", InfoJugador[playerid][jManoIzquierdaCant]);
			reg_int(0, "mano_derecha", InfoJugador[playerid][jManoDerecha]);
			reg_int(0, "Cantidad_mano_derecha", InfoJugador[playerid][jManoDerechaCant]);
			reg_int(0, "Espalda", InfoJugador[playerid][jEspalda]);
			reg_int(0, "Cantidad_espalda", InfoJugador[playerid][jEspaldaCant]);
			reg_int(0, "Cinturon_1", InfoJugador[playerid][jCinturon][0]);
			reg_int(0, "Cantidad_cinturon_1", InfoJugador[playerid][jCinturonCant][0]);
			reg_int(0, "Cinturon_2", InfoJugador[playerid][jCinturon][1]);
			reg_int(0, "Cantidad_cinturon_2", InfoJugador[playerid][jCinturonCant][1]);
			reg_int(0, "Cinturon_3", InfoJugador[playerid][jCinturon][2]);
			reg_int(0, "Cantidad_cinturon_3", InfoJugador[playerid][jCinturonCant][2]);
			reg_int(0, "Cinturon_4", InfoJugador[playerid][jCinturon][3]);
			reg_int(0, "Cantidad_cinturon_4", InfoJugador[playerid][jCinturonCant][3]);
			reg_int(0, "Cinturon_5", InfoJugador[playerid][jCinturon][4]);
			reg_int(0, "Cantidad_cinturon_5", InfoJugador[playerid][jCinturonCant][4]);
			reg_int(0, "Cinturon_6", InfoJugador[playerid][jCinturon][5]);
			reg_int(0, "Cantidad_cinturon_6", InfoJugador[playerid][jCinturonCant][5]);
			reg_int(0, "Arma_0", InfoJugador[playerid][jArmas][0]);
			reg_int(0, "Arma_1", InfoJugador[playerid][jArmas][1]);
			reg_int(0, "Arma_2", InfoJugador[playerid][jArmas][2]);
			reg_int(0, "Arma_3", InfoJugador[playerid][jArmas][3]);
			reg_int(0, "Arma_4", InfoJugador[playerid][jArmas][4]);
			reg_int(0, "Arma_5", InfoJugador[playerid][jArmas][5]);
			reg_int(0, "Arma_6", InfoJugador[playerid][jArmas][6]);
			reg_int(0, "Arma_7", InfoJugador[playerid][jArmas][7]);
			reg_int(0, "Arma_8", InfoJugador[playerid][jArmas][8]);
			reg_int(0, "Arma_9", InfoJugador[playerid][jArmas][9]);
			reg_int(0, "Arma_10", InfoJugador[playerid][jArmas][10]);
			reg_int(0, "Arma_11", InfoJugador[playerid][jArmas][11]);
			reg_int(0, "AlquilerCasa", InfoJugador[playerid][jAlquilerCasa]);
			reg_int(0, "Restriccion1", InfoJugador[playerid][jRestriccion][0]);
			reg_int(0, "Restriccion2", InfoJugador[playerid][jRestriccion][1]);
			reg_int(0, "Restriccion3", InfoJugador[playerid][jRestriccion][2]);
			reg_int(0, "Restriccion4", InfoJugador[playerid][jRestriccion][3]);
			reg_int(0, "Restriccion5", InfoJugador[playerid][jRestriccion][4]);
			reg_int(0, "Restriccion6", InfoJugador[playerid][jRestriccion][5]);
			reg_int(0, "Restriccion7", InfoJugador[playerid][jRestriccion][6]);
			reg_int(0, "Restriccion8", InfoJugador[playerid][jRestriccion][7]);
			reg_int(0, "Restriccion9", InfoJugador[playerid][jRestriccion][8]);
			reg_int(0, "Restriccion10", InfoJugador[playerid][jRestriccion][9]);
			reg_string(0, "EstadoEstatico", InfoJugador[playerid][jEstadoEstatico], 128);
			reg_string(0, "EstadoPersonal", InfoJugador[playerid][jEstadoPersonal], 128);
			reg_int(0, "UsaEstado", InfoJugador[playerid][pUsaEstado]);
			reg_int(0, "ConEstado", InfoJugador[playerid][pConEstado]);
			reg_int(0, "Coins", InfoJugador[playerid][jCoins]);
			reg_int(0, "NivelVIP", InfoJugador[playerid][jNivelVIP]);
			reg_int(0, "ColorVIP", InfoJugador[playerid][jColorVIP]);
			reg_int(0, "DiaVIP", InfoJugador[playerid][jDiaVIP]);
			reg_int(0, "MesVIP", InfoJugador[playerid][jMesVIP]);
			reg_int(0, "Muerto", InfoJugador[playerid][jMuerto]);
			reg_int(0, "Multicuenta", InfoJugador[playerid][jMulticuenta]);
			reg_int(0, "Baneado", InfoJugador[playerid][jBaneado]);
			reg_string(0, "SobreAdmin", InfoJugador[playerid][jSobreAdmin], 50);
			reg_int(0, "SobreAdminint", InfoJugador[playerid][jSobreAdminint]);
			reg_int(0, "Telefono", InfoJugador[playerid][jTelefono]);
			reg_int(0, "Saldo", InfoJugador[playerid][jSaldo]);
			reg_int(0, "Frecuencia", InfoJugador[playerid][jFrecuencia]);
			reg_int(0, "Boombox", InfoJugador[playerid][jBoombox]);
			reg_int(0, "Loteria", InfoJugador[playerid][jLoteria]);
			reg_int(0, "Mascara", InfoJugador[playerid][jMascara]);
			reg_int(0, "Estrellas", InfoJugador[playerid][jEstrellas]);
			reg_int(0, "MinEstrellas", InfoJugador[playerid][jMinEstrellas]);
			reg_int(0, "Trabajo1", InfoJugador[playerid][jTrabajo1]);
			reg_int(0, "Trabajo2", InfoJugador[playerid][jTrabajo2]);
			reg_int(0, "Trabajo3", InfoJugador[playerid][jTrabajo3]);
			reg_string(0, "QuienPuso", InfoJugador[playerid][jQuienPuso], 24);
			reg_int(0, "Arrestos", InfoJugador[playerid][jArrestos]);
			reg_int(0, "Sanciones", InfoJugador[playerid][jSanciones]);
			reg_int(0, "Encarcelado", InfoJugador[playerid][jEncarcelado]);
			reg_string(0, "Sancionador", InfoJugador[playerid][jSancionador], 24);
			reg_int(0, "TiempoCarcel", InfoJugador[playerid][jTiempoCarcel]);
			reg_int(0, "Cargas", InfoJugador[playerid][jCargas]);
			reg_int(0, "Muebles", InfoJugador[playerid][jMuebles]);
			reg_int(0, "Troncos", InfoJugador[playerid][jTroncos]);
			reg_int(0, "Pescados", InfoJugador[playerid][jPescados]);
			reg_int(0, "Cosechas", InfoJugador[playerid][jCosechas]);
			reg_int(0, "Escombros", InfoJugador[playerid][jEscombros]);
			reg_int(0, "Materiales", InfoJugador[playerid][jMateriales]);
			reg_int(0, "Pinturas", InfoJugador[playerid][jPinturas]);
			reg_int(0, "Ganzuas", InfoJugador[playerid][jGanzuas]);
			reg_int(0, "Lineas", InfoJugador[playerid][jLineas]);
			reg_int(0, "Carnadas", InfoJugador[playerid][jCarnadas]);
			reg_int(0, "Cheques", InfoJugador[playerid][jCheques]);
			reg_int(0, "Licencias1", InfoJugador[playerid][jLicencias][0]);
			reg_int(0, "TiempoLicencia1", InfoJugador[playerid][jTiempoLicencia1]);
			reg_int(0, "Licencias2", InfoJugador[playerid][jLicencias][1]);
			reg_int(0, "Licencias3", InfoJugador[playerid][jLicencias][2]);
			reg_int(0, "Licencias4", InfoJugador[playerid][jLicencias][3]);
			reg_int(0, "Licencias5", InfoJugador[playerid][jLicencias][4]);
			reg_int(0, "Licencias6", InfoJugador[playerid][jLicencias][5]);
			reg_int(0, "Licencias7", InfoJugador[playerid][jLicencias][6]);
			reg_int(0, "Habilidad1_1", InfoJugador[playerid][jHabilidad1][0]);
			reg_int(0, "Habilidad2_1", InfoJugador[playerid][jHabilidad2][0]);
			reg_int(0, "Habilidad1_2", InfoJugador[playerid][jHabilidad1][1]);
			reg_int(0, "Habilidad2_2", InfoJugador[playerid][jHabilidad2][1]);
			reg_int(0, "Habilidad1_3", InfoJugador[playerid][jHabilidad1][2]);
			reg_int(0, "Habilidad2_3", InfoJugador[playerid][jHabilidad2][2]);
			reg_int(0, "Habilidad1_4", InfoJugador[playerid][jHabilidad1][3]);
			reg_int(0, "Habilidad2_4", InfoJugador[playerid][jHabilidad2][3]);
			reg_int(0, "Habilidad1_5", InfoJugador[playerid][jHabilidad1][4]);
			reg_int(0, "Habilidad2_5", InfoJugador[playerid][jHabilidad2][4]);
			reg_int(0, "Habilidad1_6", InfoJugador[playerid][jHabilidad1][5]);
			reg_int(0, "Habilidad2_6", InfoJugador[playerid][jHabilidad2][5]);
			reg_int(0, "Habilidad1_7", InfoJugador[playerid][jHabilidad1][6]);
			reg_int(0, "Habilidad2_7", InfoJugador[playerid][jHabilidad2][6]);
			reg_int(0, "Habilidad1_8", InfoJugador[playerid][jHabilidad1][7]);
			reg_int(0, "Habilidad2_8", InfoJugador[playerid][jHabilidad2][7]);
			reg_int(0, "Habilidad1_9", InfoJugador[playerid][jHabilidad1][8]);
			reg_int(0, "Habilidad2_9", InfoJugador[playerid][jHabilidad2][8]);
			reg_int(0, "Documento", InfoJugador[playerid][jDocumento]);
			reg_int(0, "FakeEdad", InfoJugador[playerid][jFakeEdad]);
			reg_int(0, "FakeDNI", InfoJugador[playerid][jFakeDNI]);
			reg_string(0, "FakeNombre", InfoJugador[playerid][jFakeNombre], 24);
			reg_int(0, "Delito1", InfoJugador[playerid][jDelito][0]);
			reg_string(0, "DelitoRazon1", InfoJugador[playerid][jRazonDelito1], 128);
			reg_int(0, "Delito2", InfoJugador[playerid][jDelito][1]);
			reg_string(0, "DelitoRazon2", InfoJugador[playerid][jRazonDelito2], 128);
			reg_int(0, "Delito3", InfoJugador[playerid][jDelito][2]);
			reg_string(0, "DelitoRazon3", InfoJugador[playerid][jRazonDelito3], 128);
			reg_int(0, "Delito4", InfoJugador[playerid][jDelito][3]);
			reg_string(0, "DelitoRazon4", InfoJugador[playerid][jRazonDelito4], 128);
			reg_int(0, "Delito5", InfoJugador[playerid][jDelito][4]);
			reg_string(0, "DelitoRazon5", InfoJugador[playerid][jRazonDelito5], 128);
			reg_int(0, "Delito6", InfoJugador[playerid][jDelito][5]);
			reg_string(0, "DelitoRazon6", InfoJugador[playerid][jRazonDelito6], 128);
			reg_int(0, "Delito7", InfoJugador[playerid][jDelito][6]);
			reg_string(0, "DelitoRazon7", InfoJugador[playerid][jRazonDelito7], 128);
			reg_int(0, "Delito8", InfoJugador[playerid][jDelito][7]);
			reg_string(0, "DelitoRazon8", InfoJugador[playerid][jRazonDelito8], 128);
			reg_int(0, "Delito9", InfoJugador[playerid][jDelito][8]);
			reg_string(0, "DelitoRazon9", InfoJugador[playerid][jRazonDelito9], 128);
			reg_int(0, "Delito10", InfoJugador[playerid][jDelito][9]);
			reg_string(0, "DelitoRazon10", InfoJugador[playerid][jRazonDelito10], 128);
			reg_int(0, "Contacto1", InfoJugador[playerid][jNumeroContacto][0]);
			reg_int(0, "Contacto2", InfoJugador[playerid][jNumeroContacto][1]);
			reg_int(0, "Contacto3", InfoJugador[playerid][jNumeroContacto][2]);
			reg_int(0, "Contacto4", InfoJugador[playerid][jNumeroContacto][3]);
			reg_int(0, "Contacto5", InfoJugador[playerid][jNumeroContacto][4]);
			reg_int(0, "Contacto6", InfoJugador[playerid][jNumeroContacto][5]);
			reg_int(0, "Contacto7", InfoJugador[playerid][jNumeroContacto][6]);
			reg_int(0, "Contacto8", InfoJugador[playerid][jNumeroContacto][7]);
			reg_int(0, "Contacto9", InfoJugador[playerid][jNumeroContacto][8]);
			reg_int(0, "Contacto10", InfoJugador[playerid][jNumeroContacto][9]);
			reg_int(0, "Contacto11", InfoJugador[playerid][jNumeroContacto][10]);
			reg_int(0, "Contacto12", InfoJugador[playerid][jNumeroContacto][11]);
			reg_int(0, "Contacto13", InfoJugador[playerid][jNumeroContacto][12]);
			reg_int(0, "Contacto14", InfoJugador[playerid][jNumeroContacto][13]);
			reg_int(0, "Contacto15", InfoJugador[playerid][jNumeroContacto][14]);
			reg_int(0, "Contacto16", InfoJugador[playerid][jNumeroContacto][15]);
			reg_int(0, "Contacto17", InfoJugador[playerid][jNumeroContacto][16]);
			reg_int(0, "Contacto18", InfoJugador[playerid][jNumeroContacto][17]);
			reg_int(0, "Contacto19", InfoJugador[playerid][jNumeroContacto][18]);
			reg_int(0, "Contacto20", InfoJugador[playerid][jNumeroContacto][19]);
			reg_string(0, "NombreContacto1", InfoJugador[playerid][jNombreContacto1], 32);
			reg_string(0, "NombreContacto2", InfoJugador[playerid][jNombreContacto2], 32);
			reg_string(0, "NombreContacto3", InfoJugador[playerid][jNombreContacto3], 32);
			reg_string(0, "NombreContacto4", InfoJugador[playerid][jNombreContacto4], 32);
			reg_string(0, "NombreContacto5", InfoJugador[playerid][jNombreContacto5], 32);
			reg_string(0, "NombreContacto6", InfoJugador[playerid][jNombreContacto6], 32);
			reg_string(0, "NombreContacto7", InfoJugador[playerid][jNombreContacto7], 32);
			reg_string(0, "NombreContacto8", InfoJugador[playerid][jNombreContacto8], 32);
			reg_string(0, "NombreContacto9", InfoJugador[playerid][jNombreContacto9], 32);
			reg_string(0, "NombreContacto10", InfoJugador[playerid][jNombreContacto10], 32);
			reg_string(0, "NombreContacto11", InfoJugador[playerid][jNombreContacto11], 32);
			reg_string(0, "NombreContacto12", InfoJugador[playerid][jNombreContacto12], 32);
			reg_string(0, "NombreContacto13", InfoJugador[playerid][jNombreContacto13], 32);
			reg_string(0, "NombreContacto14", InfoJugador[playerid][jNombreContacto14], 32);
			reg_string(0, "NombreContacto15", InfoJugador[playerid][jNombreContacto15], 32);
			reg_string(0, "NombreContacto16", InfoJugador[playerid][jNombreContacto16], 32);
			reg_string(0, "NombreContacto17", InfoJugador[playerid][jNombreContacto17], 32);
			reg_string(0, "NombreContacto18", InfoJugador[playerid][jNombreContacto18], 32);
			reg_string(0, "NombreContacto19", InfoJugador[playerid][jNombreContacto19], 32);
			reg_string(0, "NombreContacto20", InfoJugador[playerid][jNombreContacto20], 32);
			reg_int(0, "Tiempos1", InfoJugador[playerid][jTiempos][0]);
			reg_int(0, "Tiempos2", InfoJugador[playerid][jTiempos][1]);
			reg_int(0, "Tiempos3", InfoJugador[playerid][jTiempos][2]);
			reg_int(0, "Tiempos4", InfoJugador[playerid][jTiempos][3]);
			reg_int(0, "Tiempos5", InfoJugador[playerid][jTiempos][4]);
			reg_int(0, "Tiempos6", InfoJugador[playerid][jTiempos][5]);
			reg_int(0, "Tiempos7", InfoJugador[playerid][jTiempos][6]);
			reg_int(0, "Tiempos8", InfoJugador[playerid][jTiempos][7]);
			reg_int(0, "Tiempos9", InfoJugador[playerid][jTiempos][8]);
			reg_int(0, "Tiempos10", InfoJugador[playerid][jTiempos][9]);
			reg_int(0, "Tiempos11", InfoJugador[playerid][jTiempos][10]);
			reg_int(0, "Tiempos12", InfoJugador[playerid][jTiempos][11]);
			reg_int(0, "Tiempos13", InfoJugador[playerid][jTiempos][12]);
			reg_int(0, "Tiempos14", InfoJugador[playerid][jTiempos][13]);
			reg_int(0, "Tiempos15", InfoJugador[playerid][jTiempos][14]);
			reg_int(0, "Tiempos16", InfoJugador[playerid][jTiempos][15]);
			reg_int(0, "Tiempos17", InfoJugador[playerid][jTiempos][16]);
			reg_int(0, "Tiempos18", InfoJugador[playerid][jTiempos][17]);
			reg_int(0, "Tiempos19", InfoJugador[playerid][jTiempos][18]);
			reg_int(0, "Tiempos20", InfoJugador[playerid][jTiempos][19]);
			reg_int(0, "Payday", InfoJugador[playerid][jPayday]);
			reg_int(0, "T_fabrica", InfoJugador[playerid][jT_fabrica]);
			reg_int(0, "I_fabrica", InfoJugador[playerid][jI_fabrica]);
			reg_int(0, "T_fabrica2", InfoJugador[playerid][jT_fabrica2]);
			reg_int(0, "I_fabrica2", InfoJugador[playerid][jI_fabrica2]);
			reg_int(0, "Ban_t", InfoJugador[playerid][jBan_t]);
			reg_string(0, "Ban_c", InfoJugador[playerid][jBan_c], 32);
			reg_string(0, "Ban_r", InfoJugador[playerid][jBan_r], 128);
			reg_string(0, "Ban_m", InfoJugador[playerid][jBan_m], 256);
			reg_int(0, "Piedras", InfoJugador[playerid][jPiedras]);
			reg_int(0, "Tickets", InfoJugador[playerid][jTickets]);
			reg_int(0, "PuntosRol", InfoJugador[playerid][jPuntosRol]);
			reg_int(0, "Adiccion1", InfoJugador[playerid][jAdiccion][0]);
			reg_int(0, "Adiccion2", InfoJugador[playerid][jAdiccion][1]);
			reg_int(0, "Adiccion3", InfoJugador[playerid][jAdiccion][2]);
			reg_int(0, "Adiccion4", InfoJugador[playerid][jAdiccion][3]);
			reg_int(0, "Adiccion5", InfoJugador[playerid][jAdiccion][4]);
			reg_int(0, "Discord", InfoJugador[playerid][jDiscord]);
			reg_int(0, "DiscordNitro", InfoJugador[playerid][jDiscordNitro]);
			reg_int(0, "ApodoDiscord", InfoJugador[playerid][jApodoDiscord]);
			reg_string(0, "ApodoDiscordNombre", InfoJugador[playerid][jApodoDiscordNombre], 24);
			reg_int(0, "Verificado", InfoJugador[playerid][jVerificado]);
			reg_int(0, "Mercado", InfoJugador[playerid][pMercado]);
			reg_int(0, "Fabrica", InfoJugador[playerid][pFabrica]);
			reg_int(0, "TiempoRobo", InfoJugador[playerid][pTiempoRobo]);
			reg_int(0, "AdminWarn", InfoJugador[playerid][jAdminWarn]);
			reg_int(0, "VerBolsillos", InfoJugador[playerid][jVerBolsillos]);
			reg_int(0, "CanalDudas", InfoJugador[playerid][jCanalDudas]);
			reg_int(0, "Referido", InfoJugador[playerid][jReferido]);
			reg_int(0, "CobroReferido", InfoJugador[playerid][jCobroReferido]);
			reg_string(0, "NombreAmigo", InfoJugador[playerid][jNombreAmigo], 50);
			reg_int(0, "GananciaFuneral", InfoJugador[playerid][pGananciaFuneral]);
			reg_int(0, "VerNecesidades", InfoJugador[playerid][jVerNecesidades]);
			reg_int(0, "YT", InfoJugador[playerid][jYT]);
			//accesorios
			new gformat[512];
			reg_string(0, "Toy1", gformat, 512);
			sscanf(gformat, "p<|>ddfffffffffd",
			InfoJugador[playerid][aModelo][0], InfoJugador[playerid][aHueso][0], InfoJugador[playerid][aPosicionX][0], InfoJugador[playerid][aPosicionY][0], InfoJugador[playerid][aPosicionZ][0], InfoJugador[playerid][aRotacionX][0],
			InfoJugador[playerid][aRotacionY][0], InfoJugador[playerid][aRotacionZ][0], InfoJugador[playerid][aEscalaX][0], InfoJugador[playerid][aEscalaY][0], InfoJugador[playerid][aEscalaZ][0], InfoJugador[playerid][aColocado][0]);
			reg_string(0, "Toy2", gformat, 512);
			sscanf(gformat, "p<|>ddfffffffffd",
			InfoJugador[playerid][aModelo][1], InfoJugador[playerid][aHueso][1], InfoJugador[playerid][aPosicionX][1], InfoJugador[playerid][aPosicionY][1], InfoJugador[playerid][aPosicionZ][1], InfoJugador[playerid][aRotacionX][1],
			InfoJugador[playerid][aRotacionY][1], InfoJugador[playerid][aRotacionZ][1], InfoJugador[playerid][aEscalaX][1], InfoJugador[playerid][aEscalaY][1], InfoJugador[playerid][aEscalaZ][1], InfoJugador[playerid][aColocado][1]);
			reg_string(0, "Toy3", gformat, 512);
			sscanf(gformat, "p<|>ddfffffffffd",
			InfoJugador[playerid][aModelo][2], InfoJugador[playerid][aHueso][2], InfoJugador[playerid][aPosicionX][2], InfoJugador[playerid][aPosicionY][2], InfoJugador[playerid][aPosicionZ][2], InfoJugador[playerid][aRotacionX][2],
			InfoJugador[playerid][aRotacionY][2], InfoJugador[playerid][aRotacionZ][2], InfoJugador[playerid][aEscalaX][2], InfoJugador[playerid][aEscalaY][2], InfoJugador[playerid][aEscalaZ][2], InfoJugador[playerid][aColocado][2]);
			reg_string(0, "Toy4", gformat, 512);
			sscanf(gformat, "p<|>ddfffffffffd",
			InfoJugador[playerid][aModelo][3], InfoJugador[playerid][aHueso][3], InfoJugador[playerid][aPosicionX][3], InfoJugador[playerid][aPosicionY][3], InfoJugador[playerid][aPosicionZ][3], InfoJugador[playerid][aRotacionX][3],
			InfoJugador[playerid][aRotacionY][3], InfoJugador[playerid][aRotacionZ][3], InfoJugador[playerid][aEscalaX][3], InfoJugador[playerid][aEscalaY][3], InfoJugador[playerid][aEscalaZ][3], InfoJugador[playerid][aColocado][3]);
			reg_string(0, "Toy5", gformat, 512);
			sscanf(gformat, "p<|>ddfffffffffd",
			InfoJugador[playerid][aModelo][4], InfoJugador[playerid][aHueso][4], InfoJugador[playerid][aPosicionX][4], InfoJugador[playerid][aPosicionY][4], InfoJugador[playerid][aPosicionZ][4], InfoJugador[playerid][aRotacionX][4],
			InfoJugador[playerid][aRotacionY][4], InfoJugador[playerid][aRotacionZ][4], InfoJugador[playerid][aEscalaX][4], InfoJugador[playerid][aEscalaY][4], InfoJugador[playerid][aEscalaZ][4], InfoJugador[playerid][aColocado][4]);
			reg_int(0, "Fianza", InfoJugador[playerid][jFianza]);
			reg_int(0, "MaxMuebles", InfoJugador[playerid][jMaxMuebles]);
			reg_int(0, "MutedAnuncios", InfoJugador[playerid][jMutedAnuncios]);
			reg_int(0, "TiempoMuteoAD", InfoJugador[playerid][jTiempoMuteoAD]);
			reg_string(0, "Piezas", gformat, 128);
			sscanf(gformat, "p<|>ddddddd",
			InfoJugador[playerid][jPiezas][0], InfoJugador[playerid][jPiezas][1], InfoJugador[playerid][jPiezas][2], InfoJugador[playerid][jPiezas][3],
			InfoJugador[playerid][jPiezas][4], InfoJugador[playerid][jPiezas][5], InfoJugador[playerid][jPiezas][6]);
			reg_int(0, "TeclaEspalda", InfoJugador[playerid][jTeclaEspalda]);
			reg_int(0, "Abatido", InfoJugador[playerid][jAbatido]);
			reg_float(0, "EntradaX", InfoJugador[playerid][jEntradaX]);
			reg_float(0, "EntradaY", InfoJugador[playerid][jEntradaY]);
			reg_float(0, "EntradaZ", InfoJugador[playerid][jEntradaZ]);
			reg_float(0, "EntradaR", InfoJugador[playerid][jEntradaR]);
			reg_int(0, "EntradaInt", InfoJugador[playerid][jEntradaInt]);
			reg_int(0, "EntradaVW", InfoJugador[playerid][jEntradaVW]);
			reg_int(0, "ColorToy1", InfoJugador[playerid][aColor][0]);
			reg_int(0, "ColorToy2", InfoJugador[playerid][aColor][1]);
			reg_int(0, "ColorToy3", InfoJugador[playerid][aColor][2]);
			reg_int(0, "ColorToy4", InfoJugador[playerid][aColor][3]);
			reg_int(0, "ColorToy5", InfoJugador[playerid][aColor][4]);
			reg_int(0, "SeguroMedico", InfoJugador[playerid][jSeguroMedico]);
			reg_int(0, "UsoReferido", InfoJugador[playerid][jUsoReferido]);
			reg_string(0, "CodigoReferido", InfoJugador[playerid][jCodigoReferido], 50);
			reg_int(0, "Casado", InfoJugador[playerid][jCasado]);
			reg_string(0, "Matrimonio", InfoJugador[playerid][jMatrimonio], 120);
			cache_unset_active();
		    create = 1;
		}
		cache_delete(result);
		if (create == 0) return Kick(playerid); // error de conexion
		if (InfoJugador[playerid][jBaneado] != 0) return MuestraBloqueoCuenta(playerid);
		SetPlayerInterior(playerid, InfoJugador[playerid][jInterior]);
		SetPlayerVirtualWorld(playerid, InfoJugador[playerid][jVirtualWorld]);
		usuario_registro[playerid] = 1;
		CargarCuenta(playerid);
	}
	else
	{
		if (_Logeo[playerid] == 3) return Kick(playerid);
		new lobby[512], title[50];
		format(lobby, sizeof lobby, "{FFFFFF}Ingresa tu contraseña para iniciar sesion.");
		format(title, sizeof title, "{FFFFFF}Hola, {008BFF}%s", InfoJugador[playerid][jNombre_Apellido]);
		Dialog_Show(playerid, ShowIngreso, DIALOG_STYLE_PASSWORD, title, lobby, "Aceptar", "Cancelar");
		SendClientMessage(playerid, 0xFFFFFFFF, "La contraseña es incorrecta, intenta nuevamente.");
		_Logeo[playerid] += 1;
	}
	return 1;
}

stock IsValidRoleplayName( name[] )
{
	if( strlen( name ) < 6 )
		return 0;

    for( new i = 0; i < strlen( name ); i++ )
    {
		// caracteres invalidos en el apodo
		if( !( ( name[i] >= 'a' && name[i] <= 'z' ) || ( name[i] >= 'A' && name[i] <= 'Z' ) || name[i] == '_' ) )
                return 0;
	}

	new
		d = strfind( name, "_" );

	// no _ en apodo
    if( d == -1 )
		return 0;

	// mas de un _ en apodo
    if( strfind( name, "_", false, d + 1 ) != -1 )
		return 0;

	new
		pname[10];
    strmid( pname, name, 0, d, sizeof pname );

	new
		surname[10];
    strmid( surname, name, d + 1, strlen( name ), sizeof surname);

	// longitud del nombre invalido
    if( strlen( pname ) < 3 || strlen( surname ) < 3 )
		return 0;

	// La primera letra del nombre no es mayusculas.
	if( !( pname[0] >= 'A' && pname[0] <= 'Z' ) )
		return 0;

	// La primera letra del apellido no es mayusculas.
    if( !( surname[0] >= 'A' && surname[0]<='Z' ) )
		return 0;

	// letras incorrectas en el nombre
    for( new i = 1; i < strlen( pname ); i++ )
    {
        if( !( pname[i] >= 'a' && pname[i] <= 'z' ) )
			return 0;
    }

	// letras equivocadas en el apellido
    for( new i = 1; i < strlen( surname ); i++ )
    {
        if( !( surname[i] >= 'a' && surname[i] <= 'z' ) )
			return 0;
	}

    return 1;
}

Dialog:ShowRegistro(playerid, response, listitem, inputtext[])
{
	if (!response) return Kick(playerid);
	new cuenta2[200], title[50];
	if (strlen(inputtext) < 5)
	{
		SendClientMessage(playerid, 0xFFFFFFFF, "La contraseña debe ser de un minimo de 5 caracteres.");
		format(cuenta2, sizeof cuenta2, "{FFFFFF}Registra una contraseña para continuar con tu registro.");
		new name[50 + MAX_PLAYER_NAME];
		GetPlayerName(playerid, name, sizeof(name));
		format(title, sizeof title, "{FFFFFF}Bienvenido, {008BFF}%s", name);
		Dialog_Show(playerid, ShowRegistro, DIALOG_STYLE_PASSWORD, title, cuenta2, "Aceptar", "Cancelar");
		return 1;
	}
	if (strlen(inputtext) > 25)
	{
		SendClientMessage(playerid, 0xFFFFFFFF, "La contraseña debe ser de un maximo de 24 caracteres.");
		format(cuenta2, sizeof cuenta2, "{FFFFFF}Registra una contraseña para continuar con tu registro.");
		new name[50 + MAX_PLAYER_NAME];
		GetPlayerName(playerid, name, sizeof(name));
		format(title, sizeof title, "{FFFFFF}Bienvenido,{008BFF} %s", name);
		Dialog_Show(playerid, ShowRegistro, DIALOG_STYLE_PASSWORD, title, cuenta2, "Aceptar", "Cancelar");
		return 1;
	}
	//hash clave
	Loop(e, 10, 0) { InfoJugador[playerid][jSalt][e] = random(79) + 47; }
	InfoJugador[playerid][jSalt][10] = 0;
	SHA256_PassHash(inputtext, InfoJugador[playerid][jSalt], InfoJugador[playerid][jClave], 65);
	//mas
	LimpiarPantalla(playerid);
	SetPVarInt(playerid,"Logueado",1);
	usuario_registro[playerid] = 1;
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);
	state_on[playerid] = 2;
	InterpolateCameraPos(playerid, 2027.9340, 1545.3044, 10.8203, 2027.9340, 1545.3044, 10.8203, 10000);
	InterpolateCameraLookAt(playerid, 2027.9340, 1545.3044, 10.8203, 2027.9340, 1545.3044, 10.8203, 10000);
	SetPosEx(playerid, 1449.9929, -2286.6013, 13.5469, 94.5690, 0, playerid+1, 0);
	SetPlayerSkin(playerid, 60);
	InfoJugador[playerid][jEdad] = 18; InfoJugador[playerid][jSexo] = 1;
	Dialog_Show(playerid, ShowSexo, DIALOG_STYLE_MSGBOX, "{008BFF}Registro >{FFFFFF} Genero", "{ffffff}Cual es el sexo de su personaje?", "Hombre", "Mujer");
	SetPlayerColor(playerid, 0xE7E7E700);
	return 1;
}

Dialog:ShowSexo(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		SetPlayerSkin(playerid, 60);
		InfoJugador[playerid][jSkin] = 60;
		InfoJugador[playerid][jSexo] = 1;
		Dialog_Show(playerid, ShowEdad, DIALOG_STYLE_INPUT, "{008BFF}Registro >{FFFFFF} Edad", "{ffffff}Que edad tendra su personaje?", "Aceptar", "Atras");
		return 1;
	}
	SetPlayerSkin(playerid, 93);
	InfoJugador[playerid][jSkin] = 93;
	InfoJugador[playerid][jSexo] = 2;
	Dialog_Show(playerid, ShowEdad, DIALOG_STYLE_INPUT, "{008BFF}Registro >{FFFFFF} Edad", "{ffffff}Que edad tendra su personaje?", "Aceptar", "Atras");
	return 1;
}

Dialog:ShowEdad(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, ShowSexo, DIALOG_STYLE_MSGBOX, "{008BFF}Registro > {FFFFFF}Edad", "{ffffff}Cual es el sexo de su personaje?", "Hombre", "Mujer");
	if (strval(inputtext) < 15 || strval(inputtext) > 85) return Dialog_Show(playerid, ShowEdad, DIALOG_STYLE_INPUT, "{008BFF}Error en registro", "{ffffff}- Edad minima: 15\n- Edad maxima: 85", "Aceptar", "Atras");
	InfoJugador[playerid][jEdad] = strval(inputtext);
	Dialog_Show(playerid, ShowCiudad, DIALOG_STYLE_LIST, "{008BFF}Registro >{FFFFFF} Origen", "{ffffff}San Andreas\nLas Vegas\nSan Francisco", "Seleccionar", "Atras");
	return 1;
}

Dialog:ShowCiudad(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, ShowEdad, DIALOG_STYLE_INPUT, "{008BFF}Registro >{FFFFFF} Edad", "{ffffff}Que edad tendra su personaje?", "Aceptar", "Atras");
	new tDialogo[300];
	switch (listitem)
	{
		case 0: format(tDialogo, sizeof tDialogo, "{FFFFFF}• Edad: %d\n• Sexo: %s\n• Origen: Los Santos\n\n{ffffff}Si existe algun error, pulse {008BFF}Atras", InfoJugador[playerid][jEdad], InfoJugador[playerid][jSexo] == 1 ? ("Hombre") : ("Mujer"));
		case 1: format(tDialogo, sizeof tDialogo, "{FFFFFF}• Edad: %d\n• Sexo: %s\n• Origen: Las Venturas\n\n{ffffff}Si existe algun error, pulse {008BFF}Atras", InfoJugador[playerid][jEdad], InfoJugador[playerid][jSexo] == 1 ? ("Hombre") : ("Mujer"));
		case 2: format(tDialogo, sizeof tDialogo, "{FFFFFF}• Edad: %d\n• Sexo: %s\n• Origen: San Fierro\n\n{ffffff}Si existe algun error, pulse {008BFF}Atras", InfoJugador[playerid][jEdad], InfoJugador[playerid][jSexo] == 1 ? ("Hombre") : ("Mujer"));
	}
	InfoJugador[playerid][jCiudad] = listitem+1;
	Dialog_Show(playerid, ShowFinRegistro, DIALOG_STYLE_MSGBOX, "{008BFF}Finalizar registro", tDialogo, "Iniciar", "Atras");
	return 1;
}

Dialog:ShowFinRegistro(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, ShowCiudad, DIALOG_STYLE_LIST, "{008BFF}Registro > Origen", "{ffffff}San Andreas\nLas Vegas\nSan Francisco", "Seleccionar", "Atras");
	StopAudioStreamForPlayer(playerid);
	TogglePlayerSpectating(playerid, false);
	state_on[playerid] = 3; // logeado
	new query[1028];
	mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Conectado = '1' WHERE ID = '%d'", InfoJugador[playerid][jID]);
	mysql_tquery(DBngrp, query);
	LimpiarPantalla(playerid);
	InfoJugador[playerid][jPosicionX] = 1449.9929;
	InfoJugador[playerid][jPosicionY] = -2286.6013;
	InfoJugador[playerid][jPosicionZ] = 13.5469;
	InfoJugador[playerid][jPosicionR] = 94.5690;
	InfoJugador[playerid][jInterior] = 0;
	InfoJugador[playerid][jVirtualWorld] = 0;
	SetPlayerPos(playerid, InfoJugador[playerid][jPosicionX], InfoJugador[playerid][jPosicionY], InfoJugador[playerid][jPosicionZ]);
	SetPlayerFacingAngle(playerid, InfoJugador[playerid][jPosicionR]);
	SetPlayerInterior(playerid, InfoJugador[playerid][jInterior]);
	SetPlayerVirtualWorld(playerid, InfoJugador[playerid][jVirtualWorld]);
	InfoJugador[playerid][jNivel] = 1, SetPlayerScore(playerid, 1);
	usuario_registro[playerid] = 2;
	InfoJugador[playerid][jBanco] = 200;
	InfoJugador[playerid][jDinero] = 2500;
	GivePlayerMoney(playerid, 2500);
	TogglePlayerControllable(playerid, 1);
	SetCameraBehindPlayer(playerid);
	SendClientMessageEx(playerid,0xFFFFFFFF, "{008BFF}! {FFFFFF}Bienvenido {AAD0F0}%s{FFFFFF}, si tienes alguna duda o inquietud, utiliza {008BFF}/duda [texto].", NombreJugador(playerid));
	SendClientMessageEx(playerid, 0xFFFFFFFF, "{008BFF}! {FFFFFF}Puedes encontrar informacion util con {008BFF}/ayuda");
	if (InfoJugador[playerid][jReferido]==0)
	{
	ShowPlayerDialog(playerid, D_referido, DIALOG_STYLE_INPUT, "Sistema de {fff000}referido!", "{FFFFFF}Ingresa un codigo de referido.", "Continuar", "Cancelar");
	}
    new InfoDlg[300];
	format(InfoDlg, sizeof InfoDlg, "{ea2c2c}[>] {FFFFFF}Un nuevo usuario se ha registrado %s{ea2c2c}(%d)", NombreJugador(playerid), playerid);
	MensajeAdmin(InfoDlg);
	new mensaje = random(4), string[210];
	switch (mensaje)
	{
	    case 0: format(string, sizeof string, "(( [Discord] {6DD175}• {5270AB}North America BOT: {FFFFFF}%s acaba de dejarse caer en el servidor {5270AB}))", NombreRJugador(playerid));
 		case 1: format(string, sizeof string, "(( [Discord] {6DD175}• {5270AB}North America BOT: {FFFFFF}%s ha saltado al servidor {5270AB}))", NombreRJugador(playerid));
  		case 2: format(string, sizeof string, "(( [Discord] {6DD175}• {5270AB}North America BOT: {FFFFFF}Te damos la bienvenida %s. Esperamos que hayas traido pizza {5270AB}))", NombreRJugador(playerid));
		case 3: format(string, sizeof string, "(( [Discord] {6DD175}• {5270AB}North America BOT: {FFFFFF}Douu todos la bienvenida a %s! {5270AB}))", NombreRJugador(playerid));
	}
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jDiscord] == 0)
	{
		SendClientMessage(playerid2, 0x5270ABFF, string);
	}
	new gfomraty[190];
	PlayerTextDrawShow(playerid, InfoZona[playerid]);
 	ShowZonas(playerid);
 	//camionero nivel 2 y 3
 	GangZoneShowForPlayer(playerid, camioneros[0], 0x000000FF);
 	GangZoneShowForPlayer(playerid, camioneros[1], 0x757575FF);
	// info inferior
	if(InfoJugador[playerid][jNivelVIP] != 1)
	{
		format(gfomraty, sizeof gfomraty, "~y~%s", GetNameVIP(InfoJugador[playerid][jNivelVIP]));
		PlayerTextDrawSetString(playerid, TD_PantallaHG[playerid][2], gfomraty);
		PlayerTextDrawShow(playerid, InfoInferior[playerid]);
	}
	Loop(x, 6, 0) { PlayerTextDrawShow(playerid, TD_PantallaHG[playerid][x]); }
	ShowPlayerProgressBar(playerid, BarraExp[playerid]);
	TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
	TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
	Actualizar(playerid);
	SetPlayerProgressBarValue(playerid, BarraSed[playerid], InfoJugador[playerid][jSed]);
	ShowPlayerProgressBar(playerid, BarraSed[playerid]);
	SetPlayerProgressBarValue(playerid, BarraHambre[playerid], InfoJugador[playerid][jHambre]);
	ShowPlayerProgressBar(playerid, BarraHambre[playerid]);
	//
    PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
	GameTextForPlayer(playerid,"~w~Bienvenido a North America Oficial!", 5000, 3);
	//crear cuenta en .sql
	InfoJugador[playerid][jFechaRegistro] = FechaHoy();
	InfoJugador[playerid][jUltimaConexion] = FechaHoy();
	new newip[18];
	GetPlayerIp(playerid, newip, sizeof newip);
	alm(InfoJugador[playerid][jIP], newip);
	mysql_format(DBngrp, query, sizeof query, "INSERT INTO cuentas (Nombre_Apellido, Clave, Salt, IP, FechaRegistro, UltimaConexion, PosicionX, PosicionY, PosicionZ, PosicionR, Interior, VirtualWorld, Edad, Sexo, Ciudad, Skin, Dinero, Banco, Nivel, HorasConectado) \
	VALUES ('%e', '%e', '%e', '%e', '%e', '%e', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d')",
	InfoJugador[playerid][jNombre_Apellido],
	InfoJugador[playerid][jClave],
	InfoJugador[playerid][jSalt],
	InfoJugador[playerid][jIP],
	InfoJugador[playerid][jFechaRegistro],
	InfoJugador[playerid][jUltimaConexion],
	InfoJugador[playerid][jPosicionX],
	InfoJugador[playerid][jPosicionY],
	InfoJugador[playerid][jPosicionZ],
	InfoJugador[playerid][jPosicionR],
	InfoJugador[playerid][jInterior],
	InfoJugador[playerid][jVirtualWorld],
	InfoJugador[playerid][jEdad],
	InfoJugador[playerid][jSexo],
	InfoJugador[playerid][jCiudad],
	InfoJugador[playerid][jSkin],
	InfoJugador[playerid][jDinero],
	InfoJugador[playerid][jBanco],
	InfoJugador[playerid][jNivel],
	InfoJugador[playerid][jHorasConectado]);
	mysql_tquery(DBngrp, query, "CrearNuevaCuenta", "i", playerid);
	return 1;
}

forward CrearNuevaCuenta(playerid);
public CrearNuevaCuenta(playerid)
{
	InfoJugador[playerid][jID] = cache_insert_id();
	cache_unset_active();
	return 1;
}

EnZonaMuelteQsyo(killerid)
{
	if (IsPlayerInRangeOfPoint(killerid,180.0,1759.6833,-1892.0160,13.5556)) return 1;
	else if (IsPlayerInRangeOfPoint(killerid,180.0,1833.7728,-1842.5350,13.5781)) return 1;
	else if (IsPlayerInRangeOfPoint(killerid,50.0,374.3663,-124.7870,1001.4922)) return 1;
	else if (IsPlayerInRangeOfPoint(killerid,130.0,1173.2209,-1332.7537,13.9884)) return 1;
	else if (IsPlayerInRangeOfPoint(killerid,130.0,1833.7728,-1842.5350,13.5781)) return 1;
	else if (IsPlayerInRangeOfPoint(killerid,100.0,2023.8416,-1425.0518,16.1023)) return 1;
	else if (IsPlayerInRangeOfPoint(killerid,70.0,-1745.5931,-131.6944,3.7314)) return 1;
	else if (IsPlayerInRangeOfPoint(killerid,70.0,-1821.9308,-122.5035,5.6484)) return 1;
	else if (IsPlayerInRangeOfPoint(killerid,100.0,-384.4948,-1474.2228,25.7266)) return 1;
	else if (IsPlayerInRangeOfPoint(killerid,100.0,2190.5115,-2261.2998,13.5195)) return 1;
	else if (IsPlayerInRangeOfPoint(killerid,100.0, 2241.8420,-2209.1575,13.3502)) return 1;
	return 0;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if (IsValidDynamic3DTextLabel(InfoJugador[playerid][jNameTag]))
	{
		DestroyDynamic3DTextLabel(InfoJugador[playerid][jNameTag]);
		InfoJugador[playerid][jNameTag] = Text3D:INVALID_3DTEXT_ID;
	}
	InfoJugador[playerid][pConEstado] = 0;
	if (GetPVarInt(playerid, "EnEvento") == 1) return 1;
	SetPlayerColor(playerid, 0xFFFFFF00);
	GetPlayerPos(playerid, PosSpawnBug[playerid][0], PosSpawnBug[playerid][1], PosSpawnBug[playerid][2]);
	GetPlayerFacingAngle(playerid, PosSpawnBug[playerid][3]);
	PosVwBug[playerid] = GetPlayerVirtualWorld(playerid);
	PosIntBug[playerid] = GetPlayerInterior(playerid);
	SetPVarInt(playerid, "desbug_muerte", 1);
	return 1;
}

llaves_vehiculo(playerid, vehicleid)
{
	if (!IsPlayerConnectedEx(playerid)) return -1;
	if (!GetVehicleModel(vehicleid)) return -1;
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vDL] == vehicleid && InfoVehiculo[v][vModelo] != 0 && InfoVehiculo[v][vFamilia] == 0)
	{
		if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoVehiculo[v][vPropietario], true) == 0) { return v; }
	}
	return -1;
}

acceso_vehiculo(playerid, vehicleid)
{
	new id = verificar_id_vehiculo(vehicleid);
	if (id == -1) return 1;
	if (InfoVehiculo[id][vFamilia] != 0) { if (InfoVehiculo[id][vFamilia] != InfoJugador[playerid][jFamMiembro]) return 1; }
	else { if (llaves_vehiculo(playerid, vehicleid) == -1) return 1; }
	return 0;
}

public OnVehicleSpawn(vehicleid)
{
	if (SirenOn[vehicleid] == true)
	{
		Loop(e, 7, 0) if (SirenObject[vehicleid][e] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(SirenObject[vehicleid][e]);
			SirenObject[vehicleid][e] = INVALID_STREAMER_ID;
		}
		SirenOn[vehicleid] = false;
	}
	estacionveh[vehicleid] = 0; VehicleStatus{vehicleid} = 0;
	VehSeguro[vehicleid] = 0;
	vehicle_unlock_doors(vehicleid);
    arr_Engine{vehicleid} = 0;
    _Contenido[vehicleid] = 0;
    ClearVehicleData(vehicleid);
	// vehiculos.sql
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vDL] == vehicleid)
	{
		Delete_Neon(v);
		DestroyVehicle(vehicleid);
		InfoVehiculo[v][vDL] = CreateVehicle(InfoVehiculo[v][vModelo], InfoVehiculo[v][vPosicionX], InfoVehiculo[v][vPosicionY], InfoVehiculo[v][vPosicionZ], InfoVehiculo[v][vPosicionR], InfoVehiculo[v][vColor1], InfoVehiculo[v][vColor2], -1);
		InfoVehiculo[v][vSpawned] = 1;
		new v_vehicleid = InfoVehiculo[v][vDL];
		if (InfoVehiculo[v][vSeguro] == 1) { VehSeguro[v_vehicleid] = 1;  vehicle_lock_doors(vehicleid); }
		ChangeVehicleColor(v_vehicleid, InfoVehiculo[v][vColor1], InfoVehiculo[v][vColor2]);
		ChangeVehiclePaintjob(v_vehicleid, InfoVehiculo[v][vPaintJob]);
		SetVehicleVirtualWorld(v_vehicleid, InfoVehiculo[v][vVirtualWorld]);
		SetVehicleInterior(v_vehicleid, InfoVehiculo[v][vInterior]);
		SetVehicleHealth(v_vehicleid, InfoVehiculo[v][vVida]);
		new Float: cvida;
		GetVehicleHealth(v_vehicleid, cvida);
		if (cvida < 400) { SetVehicleHealth(v_vehicleid, 600); }
		Loop(m, MAX_MODIFICACIONES, 0) { AddVehicleComponent(v_vehicleid, InfoVehiculo[v][vModificacion][m]); }
		Colocar_Neon(v, v_vehicleid);
		foreach(new playerid: Player) if (IsPlayerConnectedEx(playerid))
		{
			if (llaves_vehiculo(playerid, v_vehicleid) != -1)
			{
				SendClientMessageEx(playerid, 0x008BFFFF, "Tu %s fue enviado a la ultima posicion que lo estacionaste.", GetVehicleName(v_vehicleid));
			}
		}
		return 1;
	}
	//
    foreach(new i: Player) if (IsPlayerConnectedEx(i))
	{
	    if(vehicleid == rent_vehicle_id[i])
        {
            rent_vehicle_id[i] = INVALID_VEHICLE_ID;
            vehicle_rent_owner[vehicleid] = INVALID_PLAYER_ID;
            SendClientMessage(i, 0xccccccFF, "Info: {FFFFFF}Tu moto rentable fue devuelta por los destrosos.");
            DestroyVehicle(vehicleid);
            break;
        }
        if(vehicleid == id_coche_temporal_fac[i])
        {
            id_coche_temporal_fac[i] = INVALID_VEHICLE_ID;
            vehicle_temporal_owner[vehicleid] = INVALID_PLAYER_ID;
            esfaccion_temvehicle[vehicleid] = 0;
            SendClientMessage(i, 0xccccccFF, "*** El vehiculo fue eliminado del servidor.");
            DestroyVehicle(vehicleid);
            break;
        }
	}
	if (LAFD_Veh(vehicleid))
	{
		SetVehicleVirtualWorld(vehicleid, 55);
		SetVehicleInterior(vehicleid, 0);
	}
	if (LSPD_Veh2(vehicleid))
	{
		SetVehicleVirtualWorld(vehicleid, 10);
		SetVehicleInterior(vehicleid, 0);
	}
    return 1;
}

funcion LimpiezaLineas(playerid, lines) {
	if (IsPlayerConnected(playerid)) {
		for(new i=0; i<lines; i++) {
			SendClientMessage(playerid, -1, "");
		}
	}
	return 1;
}

funcion CleanScreen() {
    for(new i=0; i<MAX_PLAYERS; i++) {
        LimpiezaLineas(i, 100);
    }
    return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    foreach(new i : Player)
	{
        if(vehicleid == rent_vehicle_id[i])
        {
            rent_vehicle_id[i] = INVALID_VEHICLE_ID;
            vehicle_rent_owner[vehicleid] = INVALID_PLAYER_ID;

            SendClientMessage(i, 0xccccccFF, "Info: {FFFFFF}Tu moto rentable fue devuelta por los destrosos.");

            DestroyVehicle(vehicleid);
        }
        if(vehicleid == id_coche_temporal_fac[i])
        {
            id_coche_temporal_fac[i] = INVALID_VEHICLE_ID;
            vehicle_temporal_owner[vehicleid] = INVALID_PLAYER_ID;
            esfaccion_temvehicle[vehicleid] = 0;

            SendClientMessage(i, 0xccccccFF, "*** El vehiculo fue destruido, automaticamente fue eliminado.");

            DestroyVehicle(vehicleid);
        }
	}
    VehicleStatus{vehicleid} = 1;
    arr_Engine{vehicleid} = 0;
    estacionveh[vehicleid] = 0;
    new veh = GetPlayerVehicleID(vehicleid);
	if (IsValidDynamic3DTextLabel(TextCallSign[veh]))
	{
		DestroyDynamic3DTextLabel(TextCallSign[veh]);
		TextCallSign[veh] = Text3D:INVALID_3DTEXT_ID;
	}
	VehCallSign[veh] = 0;
	return 1;
}

Log(sz_fileName[], sz_input[]) {
	new sz_logEntry[156], i_dateTime[2][3], File: fileHandle = fopen(sz_fileName, io_append);
	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);
	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	fwrite(fileHandle, sz_logEntry);
	return fclose(fileHandle);
}

_CARCEL(playerid)
{
	if (InfoJugador[playerid][jEncarcelado] == 1)
	{
		new rand = random(sizeof(_OOCp));
		SetPosEx(playerid, _OOCp[rand][0], _OOCp[rand][1], _OOCp[rand][2], _OOCp[rand][3], 0, playerid, 0);
	}
	else if (InfoJugador[playerid][jEncarcelado] == 2 || InfoJugador[playerid][jEncarcelado] == 3)
	{
	    SetPVarInt(playerid, "_heridoC", 1);
		InfoJugador[playerid][jVida] = 35;
		guardar_float_mysql("cuentas", "Vida", InfoJugador[playerid][jID], InfoJugador[playerid][jVida]);
		SetPosEx(playerid, -211.0370, -1738.6848, 676.7153, 82.0000, 1, playerid+2, 0);
		SetPlayerCameraPos(playerid, -208.0841, -1741.9443, 677.2589);
		SetPlayerCameraLookAt(playerid, -208.6827, -1741.1451, 676.8438);
		ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~r~Curando...", 32000, 3);
    	_Mensaje(playerid, 4, "fcc1fd", "DOCTOR:{ffffff} Quedaste inconsciente, enfermeros te llevaron aqui.");
    	SetTimerEx("_HERIDO", 30000, false, "i", playerid);
	}
	return 1;
}

funcion _HERIDO(playerid)
{
    DeletePVar(playerid, "_heridoC");
	if (InfoJugador[playerid][jEncarcelado] == 0)
	{
		InfoJugador[playerid][jVida] = 85;
		guardar_float_mysql("cuentas", "Vida", InfoJugador[playerid][jID], InfoJugador[playerid][jVida]);
		SetPosEx(playerid, 1715.6079,-1928.9985,13.5667,350.5531, 0, 0, 1);
	}
	else if (InfoJugador[playerid][jEncarcelado] == 2)
	{
		InfoJugador[playerid][jVida] = 85;
		guardar_float_mysql("cuentas", "Vida", InfoJugador[playerid][jID], InfoJugador[playerid][jVida]);
		new rand = random(sizeof(_COMISARIAp));
		SetPosEx(playerid, _COMISARIAp[rand][0], _COMISARIAp[rand][1], _COMISARIAp[rand][2], 0, 10, 1, 1);
		CargarObjetos(playerid);
		TogglePlayerControllable(playerid, true);
  		SetCameraBehindPlayer(playerid);
		_Mensaje(playerid, 4, "00428E", "SAPD:{ffffff} Sigues en la prision de la comisaria, espera tu condena.");
	}
	else if (InfoJugador[playerid][jEncarcelado] == 3)
	{
		InfoJugador[playerid][jVida] = 85;
		guardar_float_mysql("cuentas", "Vida", InfoJugador[playerid][jID], InfoJugador[playerid][jVida]);
		new rand = random(sizeof(_PFp));
		SetPosEx(playerid, _PFp[rand][0], _PFp[rand][1], _PFp[rand][2], 0.0, 5, 0, 1);
		TogglePlayerControllable(playerid, true);
  		SetCameraBehindPlayer(playerid);
		_Mensaje(playerid, 4, "00778E", "SADOC:{ffffff} Sigues en la prision federal, espera tu condena.");
	}
	return 1;
}

_OnPlayerSpawn(playerid)
{
	if (usuario_registro[playerid] == 0)
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);
		state_on[playerid] = 2;
		TogglePlayerSpectating(playerid, true);
		InterpolateCameraPos(playerid, 2279.776611, 1495.832519, 55.726829, 2088.552001, 1164.691040, 40.912956, 10000);
		InterpolateCameraLookAt(playerid, 2277.198730, 1491.563110, 55.370277, 2092.918457, 1162.255493, 40.867107, 10000);
		SetPosEx(playerid, 1154.0596, -1768.7291, 16.5938, 359.6664, 0, playerid+1, 0);
		SetPlayerSkin(playerid, 60);
		InfoJugador[playerid][jEdad] = 18; InfoJugador[playerid][jSexo] = 1;
		Dialog_Show(playerid, ShowSexo, DIALOG_STYLE_MSGBOX, "{ADC3E7}Sexo", "{F0F0F0}Cual es el sexo de su personaje?", "Hombre", "Mujer");
		SetPlayerColor(playerid, 0xE7E7E700);
	}
	else if (usuario_registro[playerid] != 0)
	{
		B_OOC[playerid] = 0;
		CargarObjetos(playerid);
		SetPlayerInterior(playerid, InfoJugador[playerid][jInterior]);
		SetPlayerVirtualWorld(playerid, InfoJugador[playerid][jVirtualWorld]);
		B_SAN[playerid] = 0;
		SetPlayerSkin(playerid, InfoJugador[playerid][jSkin]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);
		new ManoDer = InfoJugador[playerid][jManoDerecha], ManoIzq = InfoJugador[playerid][jManoIzquierda], Espalda = InfoJugador[playerid][jEspalda];
		if (ManoDer == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		if (ManoDer > 0) { PonerObjeto(playerid, 1, ManoDer); if (InfoInventario[ManoDer][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[ManoDer][IDArma], InfoJugador[playerid][jManoDerechaCant]); } }
		if (ManoIzq > 0) { PonerObjeto(playerid, 2, ManoIzq); }
		if (Espalda > 0) { PonerObjeto(playerid, 3, Espalda); }
		DarArmas(playerid);
		Loop(x, 5, 0) if (InfoJugador[playerid][aModelo][x] != 0 && InfoJugador[playerid][aColocado][x] != 0)
		{
			SetPlayerAttachedObject(playerid, x, InfoJugador[playerid][aModelo][x], InfoJugador[playerid][aHueso][x], InfoJugador[playerid][aPosicionX][x], InfoJugador[playerid][aPosicionY][x], InfoJugador[playerid][aPosicionZ][x],
			InfoJugador[playerid][aRotacionX][x], InfoJugador[playerid][aRotacionY][x], InfoJugador[playerid][aRotacionZ][x], InfoJugador[playerid][aEscalaX][x], InfoJugador[playerid][aEscalaY][x], InfoJugador[playerid][aEscalaZ][x],
			SetColorToy(InfoJugador[playerid][aColor][x]));
		}
		if(GetPVarInt(playerid, "EnEvento") == 1) {
			DeletePVar(playerid, "EnEvento");
			SetPlayerPosEx(playerid, jEvento[playerid][eVariable][1], jEvento[playerid][eVariable][2], jEvento[playerid][eVariable][3]);
			SetPlayerVirtualWorld(playerid, jEvento[playerid][eVW]);
			SetPlayerFacingAngle(playerid, jEvento[playerid][eVariable][0]);
			SetPlayerInterior(playerid, jEvento[playerid][eInterior]);
			Dar_Vida(playerid, jEvento[playerid][eVariable][4]);
			Dar_Chaleco(playerid, jEvento[playerid][eVariable][5]);
			for(new i = 0; i < 6; i++) { jEvento[playerid][eVariable][i] = 0.0; }
			jEvento[playerid][eVW] = 0;
			jEvento[playerid][eInterior] = 0;
			TogglePlayerControllable(playerid, 1);
			CargarObjetos(playerid);
			return 1;
		}
		if (InfoJugador[playerid][jEncarcelado] == 1) {
			B_Telefono[playerid] = 1;
			SetPlayerVirtualWorld(playerid, playerid); InfoJugador[playerid][jVirtualWorld] = playerid;
			SetPlayerInterior(playerid, 2); InfoJugador[playerid][jInterior] = 2;
			new rand = random(sizeof(_OOCp));
			SetPlayerPosEx(playerid, _OOCp[rand][0], _OOCp[rand][1], _OOCp[rand][2]);
			SetPlayerFacingAngle(playerid, _OOCp[rand][3]);
			SetPlayerInterior(playerid, 2); InfoJugador[playerid][jInterior] = 2;
			TogglePlayerControllable(playerid, 0);
			SetPVarInt(playerid, "Congelado", 1);
			_Mensaje(playerid, 4, "B00000", "STAFF:{ffffff} Sigues en prision OOC, escribe /reloj para ver el tiempo restante.");
			PlayerTextDrawShow(playerid, TextTrabajo[playerid]);
			CargarObjetos(playerid);
			return 1;
		} else if (InfoJugador[playerid][jEncarcelado] == 2) {
			B_Telefono[playerid] = 1;
			new rand = random(sizeof(_COMISARIAp));
			SetPosEx(playerid, _COMISARIAp[rand][0], _COMISARIAp[rand][1], _COMISARIAp[rand][2], 0, 10, 1, 1);
			CargarObjetos(playerid);
			_Mensaje(playerid, 4, "00428E", "SAPD:{ffffff} Sigues en la prision de la comisaria, espera tu condena.");
			CargarObjetos(playerid);
			return 1;
		} else if (InfoJugador[playerid][jEncarcelado] == 3) {
			B_Telefono[playerid] = 1;
			SetPlayerInterior(playerid, 0);
			InfoJugador[playerid][jInterior] = 0;
			new rand = random(sizeof(_PFp));
			SetPlayerPosEx(playerid, _PFp[rand][0], _PFp[rand][1], _PFp[rand][2]);
			_Mensaje(playerid, 4, "00778E", "SADOC:{ffffff} Sigues en la prision federal, espera tu condena.");
			CargarObjetos(playerid);
			return 1;
		}

		if (GetPVarInt(playerid, "desbug_muerte") == 1)
		{
			SetPosEx(playerid, PosSpawnBug[playerid][0], PosSpawnBug[playerid][1], PosSpawnBug[playerid][2], PosSpawnBug[playerid][3], PosIntBug[playerid], PosVwBug[playerid], 1);
			Dar_Vida(playerid, 25);
			SetPlayerDead(playerid);
			SetCameraBehindPlayer(playerid);
			return 1;
		}
	}
	Loop(i, totalterritorios, 1) if (InfoTerritorio[i][tLugarX] != 0.0)
	{
		if (!InfoTerritorio[i][tConquistado])
		{
			new r, g, b, a,		new_territory_color;
			HexToRGBA(1, r, g, b, a);
			new_territory_color = RGBAToHex(r, g, b, 135);
			GangZoneShowForPlayer(playerid, InfoTerritorio[i][tGang], new_territory_color);
		}
		else
		{
			new r, g, b, a,		new_territory_color;
			HexToRGBA(RandomColors[InfoFamilia[InfoTerritorio[i][tBandaID]][fColor]], r, g, b, a);
			new_territory_color = RGBAToHex(r, g, b, 135);
			GangZoneShowForPlayer(playerid, InfoTerritorio[i][tGang], new_territory_color);
		}
	}
	InfoJugador[playerid][pMercado] = InfoJugador[playerid][pMercado];
	InfoJugador[playerid][pFabrica] = InfoJugador[playerid][pFabrica];
	return 1;
}

funcion Caminar(playerid) {
	switch(InfoJugador[playerid][jEstilo]) {
		case 1:  SetPlayerWalkingStyle(playerid,WALK_DEFAULT);
		case 2:  SetPlayerWalkingStyle(playerid,WALK_GANGSTA);
		case 3:  SetPlayerWalkingStyle(playerid,WALK_GANGSTA2);
		case 4:  SetPlayerWalkingStyle(playerid,WALK_OLD);
		case 5:  SetPlayerWalkingStyle(playerid,WALK_FAT_OLD);
		case 6:  SetPlayerWalkingStyle(playerid,WALK_FAT);
		case 7:  SetPlayerWalkingStyle(playerid,WALK_LADY);
		case 8:  SetPlayerWalkingStyle(playerid,WALK_LADY2);
		case 9:  SetPlayerWalkingStyle(playerid,WALK_WHORE);
		case 10: SetPlayerWalkingStyle(playerid,WALK_WHORE2);
		case 11: SetPlayerWalkingStyle(playerid,WALK_DRUNK);
		case 12: SetPlayerWalkingStyle(playerid,WALK_BLIND);
	}
	return 1;
}

forward VoiAlHospital(playerid);
public VoiAlHospital(playerid)
{
	Dar_Vida(playerid, 100);
	_Limuerte(playerid);
    timer_muerte[playerid] = 0;
	if (InfoJugador[playerid][jEntradaX] != 0.0) // fix interior hospital bug   (26/04/2021)
	{
		SetPlayerPosEx(playerid, InfoJugador[playerid][jEntradaX], InfoJugador[playerid][jEntradaY], InfoJugador[playerid][jEntradaZ]);
	}
	if (InfoJugador[playerid][jEspalda] != 0) //espalda
	{
		if(InfoJugador[playerid][jEspalda] < 151)
		{
            RemovePlayerAttachedObject(playerid, 9);
			InfoJugador[playerid][jEspalda] = 0, InfoJugador[playerid][jEspaldaCant] = 0;
			guardar_int_mysql("cuentas", "Espalda", InfoJugador[playerid][jID], InfoJugador[playerid][jEspalda]);
			guardar_int_mysql("cuentas", "Cantidad_espalda", InfoJugador[playerid][jID], InfoJugador[playerid][jEspaldaCant]);
		}
	}
	SetPlayerInterior(playerid, 99+playerid);
	SetPlayerVirtualWorld(playerid, 99+playerid);
	PlayerTextDrawShow(playerid, ServicioGrua[playerid][0]);
	PlayerTextDrawSetStringEx(playerid, ServicioGrua[playerid][1], "trasladando en ambulancia al hospital...");
	PlayerTextDrawShow(playerid, ServicioGrua[playerid][1]);
	PlayerTextDrawShow(playerid, ServicioGrua[playerid][2]);
	TogglePlayerControllable(playerid, false);
    if (InfoJugador[playerid][jSeguroMedico] != 0) return Dialog_Show(playerid, Show_Spawn_Seguro, DIALOG_STYLE_LIST, "Hospital", "Jefferson\nMarket\nMontgomery\nAngel Pine\nSanta Flora (SF)\nFort Carson\nEl Quebrados\nLas Vegas Airport (LV)", "Elegir", "");
	SetTimerEx("RetirarHospital", 6000, false, "i", playerid);
	return 1;
}

Dialog:Show_Spawn_Seguro(playerid, response, listitem, inputtext[])
{
	new id = listitem;
	if (!response) id = 0;
	PlayerTextDrawHide(playerid,ServicioGrua[playerid][0]);
	PlayerTextDrawHide(playerid,ServicioGrua[playerid][1]);
	PlayerTextDrawHide(playerid,ServicioGrua[playerid][2]);
	SetPosEx(playerid, SpawnHospital[id][x_spawn], SpawnHospital[id][y_spawn], SpawnHospital[id][z_spawn], SpawnHospital[id][angle_spawn], 0, 0, 1);
	timer_muerte[playerid] = 0;
	InfoJugador[playerid][jAlcohol] = 0; guardar_int_mysql("cuentas", "Alcohol", InfoJugador[playerid][jID], 0);
	Dar_Vida(playerid, 100); Dar_Chaleco(playerid, 0);
	InfoJugador[playerid][jBanco] -= 500; guardar_int_mysql("cuentas", "Banco", InfoJugador[playerid][jID], InfoJugador[playerid][jBanco]);
	SendClientMessageEx(playerid, 0x008BFFFF, "Quedaste inconsciente, una ambulancia te llevo al hospital %s.", SpawnHospital[id][Nombre]);
	SendClientMessageEx(playerid, 0x008BFFFF, "Se te cobro 500$ de tu cuenta bancaria por los servicios medicos.");
	TogglePlayerControllable(playerid, true);
	SetCameraBehindPlayer(playerid);
	InfoJugador[playerid][jMuerto] = 0; guardar_int_mysql("cuentas", "Muerto", InfoJugador[playerid][jID], 0);
	EliminarHerido(playerid);
	alm(QuienMato[playerid], "Nadie");
	Pos_Salida(playerid);
	return 1;
}

forward RetirarHospital(playerid);
public RetirarHospital(playerid)
{
    PlayerTextDrawHide(playerid, ServicioGrua[playerid][0]);
    PlayerTextDrawHide(playerid, ServicioGrua[playerid][1]);
    PlayerTextDrawHide(playerid, ServicioGrua[playerid][2]);
	new id = GetPlayerHospital(playerid);
	new Float: hosX, Float: hosY, Float: hosZ, Float: hosR, hosInt, hosVW, familia = 0;
	if (InfoJugador[playerid][jFamMiembro] != 0)
	{
		new fam_id = InfoJugador[playerid][jFamMiembro];
		if (InfoFamilia[fam_id][fSpawnX] != 0.0)
		{
			hosX = InfoFamilia[fam_id][fSpawnX];
			hosY = InfoFamilia[fam_id][fSpawnY];
			hosZ = InfoFamilia[fam_id][fSpawnZ];
			hosR = InfoFamilia[fam_id][fSpawnR];
			hosInt = InfoFamilia[fam_id][fSpawnInt];
			hosVW = InfoFamilia[fam_id][fSpawnVW];
			familia = 1;
		}
		else
		{
			hosX = SpawnHospital[id][x_spawn];
			hosY = SpawnHospital[id][y_spawn];
			hosZ = SpawnHospital[id][z_spawn];
			hosR = SpawnHospital[id][angle_spawn];
			hosInt = 0;
			hosVW = 0;
		}
	}
	else
	{
		hosX = SpawnHospital[id][x_spawn];
		hosY = SpawnHospital[id][y_spawn];
		hosZ = SpawnHospital[id][z_spawn];
		hosR = SpawnHospital[id][angle_spawn];
		hosInt = 0;
		hosVW = 0;
 }

	SetPosEx(playerid, hosX, hosY, hosZ, hosR, hosInt, hosVW, 1);
    timer_muerte[playerid] = 0;
	InfoJugador[playerid][jAlcohol] = 0; guardar_int_mysql("cuentas", "Alcohol", InfoJugador[playerid][jID], 0);
	Dar_Vida(playerid, 100); Dar_Chaleco(playerid, 0);
	InfoJugador[playerid][jBanco] -= 500; guardar_int_mysql("cuentas", "Banco", InfoJugador[playerid][jID], InfoJugador[playerid][jBanco]);
	if (familia != 0)
	{
	    SendClientMessageEx(playerid, 0x008BFFFF, "Quedaste inconsciente, una ambulancia te llevo hasta el spawn de tu banda.");
		SendClientMessageEx(playerid, 0x008BFFFF, "Se te cobro 500$ de tu cuenta bancaria por los servicios medicos.");
	}
	else
	{
	    SendClientMessageEx(playerid, 0x008BFFFF, "Quedaste inconsciente, una ambulancia te llevo al hospital mas cercano.");
		SendClientMessageEx(playerid, 0x008BFFFF, "Se te cobro 500$ de tu cuenta bancaria por los servicios medicos.");
	}
	TogglePlayerControllable(playerid, true);
	SetCameraBehindPlayer(playerid);
	InfoJugador[playerid][jMuerto] = 0; guardar_int_mysql("cuentas", "Muerto", InfoJugador[playerid][jID], 0);
	EliminarHerido(playerid);
	alm(QuienMato[playerid], "Nadie");
    if (Es_Banda(playerid, 1, 2, 3)) return 1;
	if (InfoJugador[playerid][jNivelVIP] >= 3) return 1;
	else{
    QuitarArmas(playerid);
 	ResetPlayerWeapons(playerid);
	ActualizarArmas(playerid);
	}
    return 1;
}

_Limuerte(playerid)
{
	if (IsValidDynamic3DTextLabel(InfoJugador[playerid][jNameTag]))
	{
		DestroyDynamic3DTextLabel(InfoJugador[playerid][jNameTag]);
		InfoJugador[playerid][jNameTag] = Text3D:INVALID_3DTEXT_ID;
	}
	InfoJugador[playerid][pConEstado] = 0, guardar_int_mysql("cuentas", "ConEstado", InfoJugador[playerid][jID], 0);
    _arma[playerid] = -1;
	asesino[playerid] = -1;
	YaAviso[playerid] = 0;
}

NumberNegociosVIP(nivel)
{
	new maxbuss = 1;
	if (nivel == 1) maxbuss = 2; //Vip basico
	if (nivel == 2) maxbuss = 3; //Vip avanzado
	if (nivel == 3) maxbuss = 4; //Vip ultra
	if (nivel == 4) maxbuss = 6; //Vip socio
	return maxbuss;
}

NumberCasasVIP(nivel)
{
	new maxhouses = 2;
	maxhouses+=nivel;
	return maxhouses;
}

GetNameVIP(nivel)
{
	new salida[18];
 	switch (nivel)
 	{
 	    case 0: salida = "No Vip";
		case 1: salida = "Vip Basico";
		case 2: salida = "Vip Avanzado";
		case 3: salida = "Vip Ultra";
		case 4: salida = "Vip Socio";
	}
	return salida;
}

stock CargarCuenta(playerid)
{
	new string[0]="none";
	if (InfoJugador[playerid][jEmail]==string[0])
	{
		ShowPlayerDialog(playerid, 2323, DIALOG_STYLE_INPUT, "Actualizacion de {fff000}correo!", "{FFFFFF}Por favor ingresa un correo {FF0000}REAL{FFFFFF} esto servir? \nen caso de perdida de cuenta.", "Continuar", "Cancelar");
	}
	StopAudioStreamForPlayer(playerid);
	TogglePlayerSpectating(playerid, false);
	state_on[playerid] = 3; // logeado
	new query[210];
	mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Conectado = '1' WHERE ID = '%d'", InfoJugador[playerid][jID]);
	mysql_tquery(DBngrp, query);
	if (CheckBlackList(InfoJugador[playerid][jNombre_Apellido]))
	{
	    new string2[210];
	    format(string2, sizeof string2, "ATENCION: El jugador %s(%d) acaba de ingresar al servidor (blacklist).", NombreRJugador(playerid), playerid);
	    MensajeAdmin(string2);
	}
	usuario_registro[playerid] = 2;
	ResetPlayerMoney(playerid);
    LimpiarPantalla(playerid);
    ResetPlayerMoney(playerid);
	RevisarVIP(playerid); // Revisa su sistema vip.
	if(InfoJugador[playerid][jLicencias][0] && gettime() > InfoJugador[playerid][jTiempoLicencia1])
	{
		InfoJugador[playerid][jLicencias][0] = 0;
    	InfoJugador[playerid][jTiempoLicencia1] = 0;
		guardar_int_mysql("cuentas", "Licencias1", InfoJugador[playerid][jID], InfoJugador[playerid][jLicencias][0]);
		guardar_int_mysql("cuentas", "TiempoLicencia1", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempoLicencia1]);
		SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Tu licencia de armas esta vencida.");
	}
	if(InfoJugador[playerid][jPosicionX] == 0.0)
	{
	    InfoJugador[playerid][jPosicionX] = 1679.3351;
	    InfoJugador[playerid][jPosicionY] = -1657.1349;
	    InfoJugador[playerid][jPosicionZ] = 13.5395;
	    InfoJugador[playerid][jPosicionR] = 318.4477;
	    InfoJugador[playerid][jInterior] = 0;
	    InfoJugador[playerid][jVirtualWorld] = 0;
	    SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Fuiste desbugeado porque tenias un error en tus coordenadas.");
	}
	SetPlayerPosEx(playerid, InfoJugador[playerid][jPosicionX], InfoJugador[playerid][jPosicionY], InfoJugador[playerid][jPosicionZ]);
	SetPlayerFacingAngle(playerid, InfoJugador[playerid][jPosicionR]);
	SetPlayerInterior(playerid, InfoJugador[playerid][jInterior]);
	SetPlayerVirtualWorld(playerid, InfoJugador[playerid][jVirtualWorld]);
	CargarObjetos(playerid);
	Dar_Vida(playerid, InfoJugador[playerid][jVida]);
	SetPlayerArmour(playerid, InfoJugador[playerid][jChaleco]);
	SetPlayerScore(playerid, InfoJugador[playerid][jNivel]);
	SetPlayerFightingStyle(playerid, InfoJugador[playerid][jPelea]);
	SetCameraBehindPlayer(playerid);
	SetPlayerSkin(playerid, InfoJugador[playerid][jSkin]);
	Streamer_UpdateEx(playerid, InfoJugador[playerid][jPosicionX], InfoJugador[playerid][jPosicionY], InfoJugador[playerid][jPosicionZ]);
	ActualizarHambre(playerid);
	EliminarHerido(playerid);
	ActualizarSed(playerid);
	CargarAnim(playerid);
	SetPVarInt(playerid, "Logueado", 1);
	Caminar(playerid);
	new tiempo[3];
	gettime(tiempo[2], tiempo[1], tiempo[0]);
	SetPlayerTime(playerid, tiempo[2], tiempo[1]);
	Set_Player_Wasted(playerid, InfoJugador[playerid][jEstrellas]);
	if(InfoJugador[playerid][jInterior] > 0 || InfoJugador[playerid][jVirtualWorld] > 0) { CargarObjetos(playerid); }
	new HiMsg2[128], mes2[40], vip[32];
    switch (InfoJugador[playerid][jMesVIP]) {
    	case 1: mes2 = "enero";
     	case 2: mes2 = "febrero";
    	case 3: mes2 = "marzo";
   	 	case 4: mes2 = "abril";
     	case 5: mes2 = "mayo";
     	case 6: mes2 = "junio";
     	case 7: mes2 = "julio";
     	case 8: mes2 = "agosto";
     	case 9: mes2 = "septiembre";
     	case 10: mes2 = "octubre";
     	case 11: mes2 = "noviembre";
     	case 12: mes2 = "diciembre";
    }
    switch (InfoJugador[playerid][jNivelVIP]) {
		case 0: vip = "No Vip";
    	case 1: vip = "Vip Basico";
     	case 2: vip = "Vip Avanzado";
    	case 3: vip = "Vip Ultra";
    	case 4: vip = "Vip Socio";
    }
    new gfomraty[190];
    StopAudioStreamForPlayer(playerid);
	PlayerTextDrawShow(playerid, InfoZona[playerid]);
 	ShowZonas(playerid);
 	GangZoneShowForPlayer(playerid, camioneros[0], 0x000000FF);
 	GangZoneShowForPlayer(playerid, camioneros[1], 0x757575FF);
	// info inferior

 	if(InfoJugador[playerid][jNivelVIP] != -1)
 	{
		format(gfomraty, sizeof gfomraty, "~y~%s", GetNameVIP(InfoJugador[playerid][jNivelVIP]));
		PlayerTextDrawSetString(playerid, InfoInferior[playerid], gfomraty);
		PlayerTextDrawShow(playerid, InfoInferior[playerid]);
	}
	Loop(x, 6, 0) { PlayerTextDrawShow(playerid, TD_PantallaHG[playerid][x]); }
	ShowPlayerProgressBar(playerid, BarraExp[playerid]);
	TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
	TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
	Actualizar(playerid);
	SetPlayerProgressBarValue(playerid, BarraSed[playerid], InfoJugador[playerid][jSed]);
	ShowPlayerProgressBar(playerid, BarraSed[playerid]);
	SetPlayerProgressBarValue(playerid, BarraHambre[playerid], InfoJugador[playerid][jHambre]);
	ShowPlayerProgressBar(playerid, BarraHambre[playerid]);
	// 31 - 10 - 2020
	if (IsValidDynamic3DTextLabel(InfoJugador[playerid][jNameTag]))
	{
		DestroyDynamic3DTextLabel(InfoJugador[playerid][jNameTag]);
		InfoJugador[playerid][jNameTag] = Text3D:INVALID_3DTEXT_ID;
	}
	if (InfoJugador[playerid][pConEstado] != 0)
	{
		if (InfoJugador[playerid][pUsaEstado] == 1) { InfoJugador[playerid][jNameTag] = CreateDynamic3DTextLabel(InfoJugador[playerid][jEstadoEstatico], -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1); }
		if (InfoJugador[playerid][pUsaEstado] == 2) { InfoJugador[playerid][jNameTag] = CreateDynamic3DTextLabel(InfoJugador[playerid][jEstadoPersonal], -1, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1); }
	}
	SendClientMessageEx(playerid, -1, "Bienvenido nuevamente {008BFF}%s{FFFFFF}, tu ultima conexion fue el {008BFF}%s{FFFFFF}.", InfoJugador[playerid][jNombre_Apellido], InfoJugador[playerid][jUltimaConexion]);
    if (InfoJugador[playerid][jNivelVIP] != 0)
	{
        format(HiMsg2, sizeof(HiMsg2), "*** Posees plan {FFC500}%s{FFFFFF}. Vence el dia {FFC500}%d del mes %s{FFFFFF}.", vip, InfoJugador[playerid][jDiaVIP], mes2);
    	SendClientMessage(playerid, 0xccccccFF, HiMsg2);
    	format(HiMsg2, sizeof(HiMsg2), "*** Mejorando el servidor de discord hasta {ff6eb9}%d del mes %s.", InfoJugador[playerid][jDiaVIP], mes2);
    	SendClientMessage(playerid, 0xccccccFF, HiMsg2);
    }
	if (VehicleCount(playerid) != 0) SendClientMessageEx(playerid, -1, "* Los vehiculos estan guardados en su ultima posicion, /coches o /c para sacar alguno.");
	if (InfoJugador[playerid][jDocumento] == 0) GameTextForPlayer(playerid, "No tienes un DNI, ve por uno al ayuntamiento", 3000, 5);
	Loop(id, totalnegocios, 1) if (InfoNegocio[id][nVenta] != 0 && InfoNegocio[id][nTipo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoNegocio[id][nPropietario], true) == 0)
	{
		if(InfoNegocio[id][nProductos]<=100) return SendClientMessageEx(playerid, -1, "Tu {008BFF}negocio {ffffff}(%d) %s {ffffff} tiene menos de {008BFF}100 productos (%d){ffffff}, ve a llenarlo vago.", id, InfoNegocio[id][nNombre], InfoNegocio[id][nProductos]);
	}
	new playerip[32];
    GetPlayerIp(playerid, playerip, sizeof playerip);
    alm(InfoJugador[playerid][jIP], playerip);
	guardar_string_mysql("cuentas", "IP", InfoJugador[playerid][jID], InfoJugador[playerid][jIP]);
	// 01-10-2020 + 30/12/2020
	if (InfoJugador[playerid][jAbatido] != 0)
	{
		DeletePVar(playerid, "EnCrack");
		if (InfoJugador[playerid][jEstrellas] == 0) InfoJugador[playerid][jEstrellas] = 1;
		Set_Wasted_Player(playerid, 5*InfoJugador[playerid][jEstrellas], 1000*InfoJugador[playerid][jEstrellas], 0, 0, 0);
		SendClientMessageEx(playerid, 0xCCCC00FF, "* Desconectaste abatido o detenido por la policia, fuiste llevado a prision %d minutos.", 5*InfoJugador[playerid][jEstrellas]);
	}
	else
	{
		if (InfoJugador[playerid][jMuerto] != 0)
		{
			debugDead[playerid] = 1;
			SetPlayerDead(playerid);
		}
	}
	//casas inactividad
	Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoCasa[id][cPropietario], true) == 0)
	{
		new k = gettime();
		k += 1296000;
		InfoCasa[id][cTiempoDisponible] = k;
		guardar_int_mysql("casas", "TiempoDisponible", InfoCasa[id][cID], InfoCasa[id][cTiempoDisponible]);
	}
	//negocios inactividad
	Loop(id, totalnegocios, 1) if (InfoNegocio[id][nTipo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoNegocio[id][nPropietario], true) == 0)
	{
		new k = gettime();
		k += 1296000;
		InfoNegocio[id][nTiempoDisponible] = k;
		guardar_int_mysql("negocios", "TiempoDisponible", InfoNegocio[id][nID], InfoNegocio[id][nTiempoDisponible]);
	}
	return 1;
}

CheckPropiedades()
{
	new countH = 0, countB = 0, gformat[320];
	//casas
	Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0 && InfoCasa[id][cVenta] != 0 && InfoCasa[id][cMoneda] == 0)
	{
		if (InfoCasa[id][cTiempoDisponible] < gettime())
		{
			countH++;
			//limpiar casa
			if (VerificarCuenta(InfoCasa[id][cPropietario]))
			{
				new dinero;
				reg_int(0, "Dinero", dinero);
				dinero+=InfoCasa[id][cPrecio];
				mysql_format(DBngrp, gformat, sizeof gformat, "UPDATE cuentas SET Dinero = '%d' WHERE Nombre_Apellido = '%e'", dinero, InfoCasa[id][cPropietario]);
				mysql_tquery(DBngrp, gformat);
			}
			VenderCasa(id);
		}
	}
	printf("[CheckHouses] Se vendieron %d casas.", countH);
	//negocios
	Loop(id, totalnegocios, 1) if (InfoNegocio[id][nTipo] != 0 && InfoNegocio[id][nVenta] != 0)
	{
		if (InfoNegocio[id][nTiempoDisponible] < gettime())
		{
			countB++;
			//limpiar negocio
			if (VerificarCuenta(InfoNegocio[id][nPropietario]))
			{
				new dinero;
				reg_int(0, "Dinero", dinero);
				dinero+=InfoNegocio[id][nPrecio];
				mysql_format(DBngrp, gformat, sizeof gformat, "UPDATE cuentas SET Dinero = '%d' WHERE Nombre_Apellido = '%e'", dinero, InfoNegocio[id][nPropietario]);
				mysql_tquery(DBngrp, gformat);
			}
			VenderNegocio(id);
		}
	}
	printf("[CheckBusiness] Se vendieron %d negocios.", countB);
	return 1;
}

RevisarHouseArmario(playerid, casa)
{
	ActualizarManos(playerid);
	new dialog[1024], string[128];
	for(new i = 0; i < 15; i++)
	{
		new ArmarioObj = InfoCasa[casa][cArmario][i];
		if(ArmarioObj == 0) format(string, sizeof string, "{b0b0b0}Vacio\n");
		else format(string, sizeof string, "{FFFFFF}%s [%d]\n", InfoInventario[ArmarioObj][NombreObjeto], InfoCasa[casa][cArmarioCantidad][i]);
		strcat(dialog, string);
	}
	if (InfoJugador[playerid][jFamRango] < 6) { Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, "Armario de casa", dialog, "Continuar", "Salir"); return 1; }
	Dialog_Show(playerid, ViewPDHouse, DIALOG_STYLE_LIST, "Armario de casa", dialog, "Continuar", "Salir");
	return 1;
}

Dialog:ViewPDHouse(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0..14:
		{
			new id = listitem, casa = EnCasaID[playerid], gformat[370], gold[32];
			if (casa == -1) return 1;
			if (InfoCasa[casa][cTipo] == 0) return 1;
			ActualizarManos(playerid);
			new ArmarioObj = InfoCasa[casa][cArmario][id], Cant = InfoCasa[casa][cArmarioCantidad][id];
			if (ArmarioObj == 0) return ShowInfoForPlayer(playerid, "esta ranura se encuentra vacia.", 2000);
			if (ArmarioObj == 131) { if (InfoJugador[playerid][jManoDerecha] == 0 && InfoJugador[playerid][jManoIzquierda] == 0) { SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);	} else return ShowInfoForPlayer(playerid, "Debes tener las manos vacias.", 2000); 	}
			if (Objeto_Carga(ArmarioObj)) { if (Tiene_Obj_Carga(playerid) != 0) { ShowInfoForPlayer(playerid, "Ya posees objetos de carga en una de tus manos.", 2000); return 1; } }
			if (InfoJugador[playerid][jManoDerecha] == 0)
			{
				if (InfoInventario[ArmarioObj][IDArma] > 0)
				{
					new arma = InfoInventario[ArmarioObj][IDArma], municion = Cant;
					if (municion > 0) { GivePlayerWeapon(playerid, arma, municion); }
				}
				InfoJugador[playerid][jManoDerecha] = ArmarioObj;
				InfoJugador[playerid][jManoDerechaCant] = Cant;
				PonerObjeto(playerid, 1, ArmarioObj);
				InfoCasa[casa][cArmario][id] = 0;
				InfoCasa[casa][cArmarioCantidad][id] = 0;
				format(gold, sizeof gold, "Armario%d", id+1);
				guardar_int_mysql("casas", gold, InfoCasa[casa][cID], InfoCasa[casa][cArmario][id]);
				format(gold, sizeof gold, "ArmarioCantidad%d", id+1);
				guardar_int_mysql("casas", gold, InfoCasa[casa][cID], InfoCasa[casa][cArmarioCantidad][id]);
				SendClientMessageEx(playerid, 0xA7CE00FF, "Sacaste del armario %s.", InfoInventario[ArmarioObj][NombreObjeto]);
				format(gformat, sizeof gformat, "Saco %s de la casa %d. (POLICE)", InfoJugador[playerid][jNombre_Apellido], InfoInventario[ArmarioObj][NombreObjeto], casa);
				AddRegistroCasa(playerid, casa+1, gformat);
				ActualizarManos(playerid);
				if (Objeto_Carga(ArmarioObj)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				return 1;
			}
			else if (InfoJugador[playerid][jManoIzquierda] == 0)
			{
				InfoJugador[playerid][jManoIzquierda] = ArmarioObj;
				InfoJugador[playerid][jManoIzquierdaCant] = Cant;
				PonerObjeto(playerid, 2, ArmarioObj);
				InfoCasa[casa][cArmario][id] = 0;
				InfoCasa[casa][cArmarioCantidad][id] = 0;
				format(gold, sizeof gold, "Armario%d", id+1);
				guardar_int_mysql("casas", gold, InfoCasa[casa][cID], InfoCasa[casa][cArmario][id]);
				format(gold, sizeof gold, "ArmarioCantidad%d", id+1);
				guardar_int_mysql("casas", gold, InfoCasa[casa][cID], InfoCasa[casa][cArmarioCantidad][id]);
				SendClientMessageEx(playerid, 0xA7CE00FF, "Sacaste del armario %s.", InfoInventario[ArmarioObj][NombreObjeto]);
				format(gformat, sizeof gformat, "Saco %s de la casa %d. (POLICE)", InfoInventario[ArmarioObj][NombreObjeto], casa);
				AddRegistroCasa(playerid, casa+1, gformat);
				ActualizarManos(playerid);
				if (Objeto_Carga(ArmarioObj)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				return 1;
			}
			ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, debes tirar o guardar lo que llevas en ellas.", 2000);
		}
		case 15: return 1;
	}
	return 1;
}
// guantera
funcion ver_Guantera(playerid, vehicleid)
{
	ActualizarManos(playerid);
	new dialog[1024], string[190];
	Loop(i, 3, 0)
	{
		new Bonnet = InfoVehiculo[vehicleid][vGuantera][i];
		if (Bonnet == 0) format(string, sizeof string, "{b0b0b0}Vacio\n");
		else format(string, sizeof string, "{FFFFFF}%s [%d]\n", InfoInventario[Bonnet][NombreObjeto], InfoVehiculo[vehicleid][vGuanteraCantidad][i]);
		strcat(dialog, string);
	}
	format(string, sizeof string, "{ffffff}-----\n");
	strcat(dialog, string);
	if (InfoJugador[playerid][jManoDerecha] == 0) format(string, sizeof string, "{b0b0b0}Mano derecha: vacia\n");
	else format(string, sizeof string, "{FFFFFF}Mano derecha: %s [%d]\n", InfoInventario[InfoJugador[playerid][jManoDerecha]][NombreObjeto], InfoJugador[playerid][jManoDerechaCant]);
	strcat(dialog, string);
	if (InfoJugador[playerid][jManoIzquierda] == 0) format(string, sizeof string, "{b0b0b0}Mano izquierda: vacia\n");
	else format(string, sizeof string, "{FFFFFF}Mano izquierda: %s [%d]\n", InfoInventario[InfoJugador[playerid][jManoIzquierda]][NombreObjeto], InfoJugador[playerid][jManoIzquierdaCant]);
	strcat(dialog, string);
	Dialog_Show(playerid, ShowGuantera, DIALOG_STYLE_LIST, "Guantera", dialog, "Continuar", "Salir");
	return 1;
}

Dialog:ShowGuantera(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0,1,2:
		{
		    new id = listitem, vehicleid = VehGuanteraPlayer[playerid], gold[32];
			ActualizarManos(playerid);
			new Bonnet = InfoVehiculo[vehicleid][vGuantera][id], Cant = InfoVehiculo[vehicleid][vGuanteraCantidad][id];
			if (Bonnet == 0) return ShowInfoForPlayer(playerid, "esta ranura se encuentra vacia.", 2000);
			if (Objeto_Carga(Bonnet)) { if (Tiene_Obj_Carga(playerid) != 0) { ShowInfoForPlayer(playerid, "Ya posees objetos de carga en una de tus manos.", 2000); return 1; } }
			if (InfoJugador[playerid][jManoDerecha] == 0)
			{
				if (InfoInventario[Bonnet][IDArma] > 0)
				{
					new arma = InfoInventario[Bonnet][IDArma], municion = Cant;
					if (municion > 0) { GivePlayerWeapon(playerid, arma, municion); }
				}
				InfoJugador[playerid][jManoDerecha] = Bonnet;
				InfoJugador[playerid][jManoDerechaCant] = Cant;
				PonerObjeto(playerid, 1, Bonnet);
				ActualizarManos(playerid);
				InfoVehiculo[vehicleid][vGuantera][id] = 0;
				InfoVehiculo[vehicleid][vGuanteraCantidad][id] = 0;
				SendClientMessageEx(playerid, 0xA7CE00FF, "Sacaste de la guantera un(a) %s.", InfoInventario[Bonnet][NombreObjeto]);
				format(gold, sizeof gold, "Guantera%d", id+1);
				guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vGuantera][id]);
				format(gold, sizeof gold, "GuanteraCantidad%d", id+1);
				guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vGuanteraCantidad][id]);
				VehGuanteraPlayer[playerid] = 0;
				if (Objeto_Carga(Bonnet)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				return 1;
			}
			else if (InfoJugador[playerid][jManoIzquierda] == 0)
			{
				InfoJugador[playerid][jManoIzquierda] = Bonnet;
				InfoJugador[playerid][jManoIzquierdaCant] = Cant;
				PonerObjeto(playerid, 2, Bonnet);
				ActualizarManos(playerid);
				InfoVehiculo[vehicleid][vGuantera][id] = 0;
				InfoVehiculo[vehicleid][vGuanteraCantidad][id] = 0;
				SendClientMessageEx(playerid, 0xA7CE00FF, "Sacaste de la guantera un(a) %s.", InfoInventario[Bonnet][NombreObjeto]);
				format(gold, sizeof gold, "Guantera%d", id+1);
				guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vGuantera][id]);
				format(gold, sizeof gold, "GuanteraCantidad%d", id+1);
				guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vGuanteraCantidad][id]);
				VehGuanteraPlayer[playerid] = 0;
				if (Objeto_Carga(Bonnet)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				return 1;
			}
			ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas.", 2000);
		}
		case 3: return 1;
		case 4:
		{
		    new vehicleid = VehGuanteraPlayer[playerid], gold[32], libre = -1, Mano = InfoJugador[playerid][jManoDerecha], Cant = InfoJugador[playerid][jManoDerechaCant];
			if (InfoJugador[playerid][jManoDerecha] == 0) return ShowInfoForPlayer(playerid, "No tienes nada en tu mano derecha.", 2000);
			if (InfoInventario[Mano][Guardable] == 2 || InfoInventario[Mano][Guardable] == 3) return ShowInfoForPlayer(playerid, "Este objeto es demasiado grande.", 2000);
			if (InfoInventario[Mano][IDArma] > 0) //- Si es arma
			{
				if (IntentoChitearBalas(playerid)) return 1;
				Cant = InfoJugador[playerid][jManoDerechaCant];
				RemovePlayerWeapon(playerid, InfoInventario[Mano][IDArma]);
			}
			Loop(x, 3, 0) if (InfoVehiculo[vehicleid][vGuantera][x] == 0)
			{
			    libre = x;
			    break;
			}
			if (libre == -1) return ShowInfoForPlayer(playerid, "No tienes mas espacio en la guantera.", 2000);
			InfoVehiculo[vehicleid][vGuantera][libre] = Mano;
			InfoVehiculo[vehicleid][vGuanteraCantidad][libre] = Cant;
			RemovePlayerAttachedObject(playerid, 6);
			if (Objeto_Carga(InfoJugador[playerid][jManoDerecha])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			InfoJugador[playerid][jManoDerecha] = 0;
			InfoJugador[playerid][jManoDerechaCant] = 0;
			ActualizarManos(playerid);
			SendClientMessageEx(playerid, 0xA7CE00FF, "Guardas %s en la guantera.", InfoInventario[Mano][NombreObjeto]);
			format(gold, sizeof gold, "Guantera%d", libre+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vGuantera][libre]);
			format(gold, sizeof gold, "GuanteraCantidad%d", libre+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vGuanteraCantidad][libre]);
			VehGuanteraPlayer[playerid] = 0;
		}
		case 5:
		{
		    new vehicleid = VehGuanteraPlayer[playerid], gold[32], libre = -1;
			if (InfoJugador[playerid][jManoIzquierda] == 0) return ShowInfoForPlayer(playerid, "No tienes nada en tu mano izquierda.", 2000);
			new Mano = InfoJugador[playerid][jManoIzquierda], Cant = InfoJugador[playerid][jManoIzquierdaCant];
			if (InfoInventario[Mano][Guardable] == 2 || InfoInventario[Mano][Guardable] == 3) return ShowInfoForPlayer(playerid, "Este objeto es demasiado grande.", 2000);
			Loop(x, 3, 0) if (InfoVehiculo[vehicleid][vGuantera][x] == 0)
			{
			    libre = x;
			    break;
			}
			if (libre == -1) return ShowInfoForPlayer(playerid, "No tienes mas espacio en la guantera.", 2000);
			InfoVehiculo[vehicleid][vGuantera][libre] = Mano;
			InfoVehiculo[vehicleid][vGuanteraCantidad][libre] = Cant;
			RemovePlayerAttachedObject(playerid, 7);
			if (Objeto_Carga(InfoJugador[playerid][jManoIzquierda])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			InfoJugador[playerid][jManoIzquierda] = 0;
			InfoJugador[playerid][jManoIzquierdaCant] = 0;
			ActualizarManos(playerid);
			SendClientMessageEx(playerid, 0xA7CE00FF, "Guardas %s en la guantera.", InfoInventario[Mano][NombreObjeto]);
			format(gold, sizeof gold, "Guantera%d", libre+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vGuantera][libre]);
			format(gold, sizeof gold, "GuanteraCantidad%d", libre+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vGuanteraCantidad][libre]);
			VehGuanteraPlayer[playerid] = 0;
		}
	}
	return 1;
}

//
funcion ver_Maletero(playerid, vehicleid)
{
	ActualizarManos(playerid);
	new dialog[1024], string[190], maxmal = InfoVehiculo[vehicleid][vMaxMaletero], count = 0, gformat[128], idcoche;
	Loop(i, maxmal, 0)
	{
		new Bonnet = InfoVehiculo[vehicleid][vMaletero][i];
		if (Bonnet == 0) format(string, sizeof string, "{b0b0b0}Vacio\n");
		else
		{
		    if(InfoVehiculo[idcoche][vMaleteroTipo] != 1)
			{
			    format(string, sizeof string, "{90DC7F}%s\n", ArmasInfo[Bonnet][NombreArma]);
				strcat(dialog, string);
			}
			else
			{
				format(string, sizeof string, "{FFFFFF}%s ({00cc00}%d{FFFFFF})\n", InfoInventario[Bonnet][NombreObjeto], InfoVehiculo[idcoche][vMaleteroCantidad][i]);
				strcat(dialog, string);
			}
		}
		//conteo
		format(gformat, sizeof gformat, "RanuraMal%d", count);
		SetPVarInt(playerid, gformat, i);
		count++;
	}
	//barra espacio
	format(string, sizeof string, "{ffffff}-----\n");
	strcat(dialog, string);
	format(gformat, sizeof gformat, "RanuraMal%d", count);
	SetPVarInt(playerid, gformat, 15);
	count++;
	//mano derecha
	if (InfoJugador[playerid][jManoDerecha] == 0) format(string, sizeof string, "{b0b0b0}Mano derecha: vacia\n");
	else format(string, sizeof string, "{FFFFFF}Mano derecha: %s [%d]\n", InfoInventario[InfoJugador[playerid][jManoDerecha]][NombreObjeto], InfoJugador[playerid][jManoDerechaCant]);
	strcat(dialog, string);
	format(gformat, sizeof gformat, "RanuraMal%d", count);
	SetPVarInt(playerid, gformat, 16);
	count++;
	//mano izquierda
	if (InfoJugador[playerid][jManoIzquierda] == 0) format(string, sizeof string, "{b0b0b0}Mano izquierda: vacia\n");
	else format(string, sizeof string, "{FFFFFF}Mano izquierda: %s [%d]\n", InfoInventario[InfoJugador[playerid][jManoIzquierda]][NombreObjeto], InfoJugador[playerid][jManoIzquierdaCant]);
	strcat(dialog, string);
	format(gformat, sizeof gformat, "RanuraMal%d", count);
	SetPVarInt(playerid, gformat, 17);
	count++;
	//show menu
	Dialog_Show(playerid, ShowMaletero, DIALOG_STYLE_LIST, GetVehicleName(InfoVehiculo[vehicleid][vDL]), dialog, "Continuar", "Salir");
	return 1;
}

funcion Maletero_Vehiculo(playerid, vehicleid)
{
    new dialog[1024], string[210], engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	format(string, sizeof string, "{ED5F46}Cerrar maletero\n{8B8B8B}Guardar en maletero (Armas)\n{8B8B8B}Guardar en maletero (Objetos)\n{8B8B8B}Sacar del maletero");
    strcat(dialog, string);
    //show menu
	Dialog_Show(playerid, ShowMaletero, DIALOG_STYLE_LIST, GetVehicleName(InfoVehiculo[vehicleid][vDL]), dialog, "(>)", "Salir");
}

Dialog:ShowMaletero(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new idcoche = VehMaleteroPlayer[playerid];
	switch(listitem)
	{
	    case 0:
	    {
		}
		case 1:
		{
		    new engine, lights, alarm, doors, bonnet, boot, objective;
		    GetVehicleParamsEx(idcoche, engine, lights, alarm, doors, bonnet, boot, objective);
		    ActualizarManos(playerid);
		    new dialog[1500], line_str[95], count = 0;
		    for(new i = 0; i < 12; i ++)
			{
			    if(InfoJugador[playerid][jArmas][i] != 0)
			    {
			        format(line_str, sizeof line_str, "{ACFF9D}%s\n", NombreArmas(InfoJugador[playerid][jArmas][i]));
					strcat(dialog, line_str);
					IdListaDialog[playerid] = i;
					count++;
				}
			}
			//show menu
			if(count == 0) return ShowInfoForPlayer(playerid, "No tienes nada que guardar.", 2000);
			Dialog_Show(playerid, ShowMaleteroGuardar, DIALOG_STYLE_LIST, GetVehicleName(InfoVehiculo[idcoche][vDL]), dialog, "(>)", "Salir");
		}
		case 2:
		{
		    new dialog[95 * 15], line_str[95], count = 0;
		    if (InfoJugador[playerid][jManoDerecha] == 0) format(line_str, sizeof line_str, "{cccccc}Mano derecha: Nada\n");
			else format(line_str, sizeof line_str, "{FFFFFF}Mano derecha: %s\n", slot_objeto(InfoJugador[playerid][jManoDerecha], InfoJugador[playerid][jManoDerechaCant]));
			strcat(dialog, line_str);
			count++;
			if (InfoJugador[playerid][jManoIzquierda] == 0) format(line_str, sizeof line_str, "{cccccc}Mano izquierda: Nada\n");
			else format(line_str, sizeof line_str, "{FFFFFF}Mano izquierda: %s\n", slot_objeto(InfoJugador[playerid][jManoIzquierda], InfoJugador[playerid][jManoIzquierdaCant]));
			strcat(dialog, line_str);
			count++;
			//show menu
			if(count == 0) return ShowInfoForPlayer(playerid, "No tienes nada que guardar.", 2000);
			Dialog_Show(playerid, ShowMaleteroGuardar2, DIALOG_STYLE_LIST, GetVehicleName(InfoVehiculo[idcoche][vDL]), dialog, "(>)", "Salir");
		}
		case 3:
		{
		    new dialog[1024], string[190], count = 0, gformat[128];
		    Loop(i, 10, 0)
			{
				new Bonnet = InfoVehiculo[idcoche][vMaletero][i];
				if (Bonnet != 0)
				{
				    if(InfoVehiculo[idcoche][vMaleteroTipo][i] == 2)
					{
						format(string, sizeof string, "{90DC7F}%s\n", ArmasInfo[Bonnet][NombreArma]);
						strcat(dialog, string);
					}
					else
					{
						format(string, sizeof string, "{FFFFFF}%s ({00cc00}%d{FFFFFF})\n", InfoInventario[Bonnet][NombreObjeto], InfoVehiculo[idcoche][vMaleteroCantidad][i]);
						strcat(dialog, string);
					}
				}
				else strcat(dialog, "{b0b0b0}Vacio\n");
				//conteo
				format(gformat, sizeof gformat, "RanuraMal%d", count);
				SetPVarInt(playerid, gformat, i);
				count++;
			}
			//show menu
			if(count == 0) return ShowInfoForPlayer(playerid, "No tienes nada que sacar.", 2000);
			Dialog_Show(playerid, ShowMaleteroSacar, DIALOG_STYLE_LIST, GetVehicleName(InfoVehiculo[idcoche][vDL]), dialog, "(>)", "Salir");
		}
	}
	return 1;
}

Dialog:ShowMaleteroGuardar(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new vehicleid = VehMaleteroPlayer[playerid], gold[32], string[210];
	switch(listitem)
	{
	    case 0..12:
	    {
	        new libre = -1, ModeloSql = InfoJugador[playerid][jArmas][IdListaDialog[playerid]];
			Loop(x, 10, 0) if (InfoVehiculo[vehicleid][vMaletero][x] == 0)
			{
			    libre = x;
			    break;
			}
			if (libre == -1) return ShowInfoForPlayer(playerid, "No tienes mas espacios en este vehiculo.", 2000);
			InfoVehiculo[vehicleid][vMaletero][libre] = ModeloSql;
			InfoVehiculo[vehicleid][vMaleteroTipo][libre] = 2;
			InfoVehiculo[vehicleid][vMaleteroCantidad][libre] = 1;
			format(string, sizeof string, "** Guardaste tu %s en el maletero.", NombreArmas(ModeloSql));
			SendClientMessageEx(playerid, 0xFFFF00FF, string);
			QuitarArma(playerid, ModeloSql);
			ResetPlayerWeapons(playerid);
			ActualizarArmas(playerid);
			format(gold, sizeof gold, "Maletero%d", libre+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaletero][libre]);
			format(gold, sizeof gold, "MaleteroTipo%d", libre+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroTipo][libre]);
			format(gold, sizeof gold, "MaleteroCantidad%d", libre+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroCantidad][libre]);
			IdListaDialog[playerid] = -1;
			VehMaleteroPlayer[playerid] = 0;
		}
	}
	return 1;
}

Dialog:ShowMaleteroGuardar2(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new vehicleid = VehMaleteroPlayer[playerid], gold[32], string[210];
	switch(listitem)
	{
		case 0:
		{
		    ActualizarManos(playerid);
			if (InfoJugador[playerid][jManoDerecha] == 0) return ShowInfoForPlayer(playerid, "No tienes nada en tu mano derecha.", 2000);
			new Mano = InfoJugador[playerid][jManoDerecha], Cant = InfoJugador[playerid][jManoDerechaCant], libre = -1;
			Loop(x, 10, 0) if (InfoVehiculo[vehicleid][vMaletero][x] == 0)
			{
			    libre = x;
			    break;
			}
			if (libre == -1) return ShowInfoForPlayer(playerid, "No tienes mas espacios en este vehiculo.", 2000);
			InfoVehiculo[vehicleid][vMaletero][libre] = Mano;
			InfoVehiculo[vehicleid][vMaleteroTipo][libre] = 1;
			InfoVehiculo[vehicleid][vMaleteroCantidad][libre] = Cant;
			RemovePlayerAttachedObject(playerid, 6);
			InfoJugador[playerid][jManoDerecha] = 0;
			InfoJugador[playerid][jManoDerechaCant] = 0;
			ActualizarManos(playerid);
			format(string, sizeof string, "** Guardaste tu %s en el maletero.", InfoInventario[Mano][NombreObjeto]);
			SendClientMessageEx(playerid, 0xFFFF00FF, string);
			format(gold, sizeof gold, "Maletero%d", libre+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaletero][libre]);
			format(gold, sizeof gold, "MaleteroTipo%d", libre+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroTipo][libre]);
			format(gold, sizeof gold, "MaleteroCantidad%d", libre+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroCantidad][libre]);
			VehMaleteroPlayer[playerid] = 0;
		}
		case 1:
		{
		    if (InfoJugador[playerid][jManoIzquierda] == 0) return ShowInfoForPlayer(playerid, "No tienes nada en tu mano izquierda.", 2000);
			new Mano = InfoJugador[playerid][jManoIzquierda], Cant = InfoJugador[playerid][jManoIzquierdaCant], libre = -1;
			Loop(x, 10, 0) if (InfoVehiculo[vehicleid][vMaletero][x] == 0)
			{
			    libre = x;
			    break;
			}
			if (libre == -1) return ShowInfoForPlayer(playerid, "No tienes mas espacios en este vehiculo.", 2000);
			InfoVehiculo[vehicleid][vMaletero][libre] = Mano;
			InfoVehiculo[vehicleid][vMaleteroTipo][libre] = 1;
			InfoVehiculo[vehicleid][vMaleteroCantidad][libre] = Cant;
			RemovePlayerAttachedObject(playerid, 7);
			InfoJugador[playerid][jManoIzquierda] = 0;
			InfoJugador[playerid][jManoIzquierdaCant] = 0;
			ActualizarManos(playerid);
			format(string, sizeof string, "** Guardaste tu %s en el maletero.", InfoInventario[Mano][NombreObjeto]);
			SendClientMessageEx(playerid, 0xFFFF00FF, string);
			format(gold, sizeof gold, "Maletero%d", libre+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaletero][libre]);
			format(gold, sizeof gold, "MaleteroTipo%d", libre+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroTipo][libre]);
			format(gold, sizeof gold, "MaleteroCantidad%d", libre+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroCantidad][libre]);
			VehMaleteroPlayer[playerid] = 0;
		}
	}
	return 1;
}

Dialog:ShowMaleteroSacar(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new lista = listitem, gformat[40];
	format(gformat, sizeof gformat, "RanuraMal%d", lista);
	new id = GetPVarInt(playerid, gformat);
	new vehicleid = VehMaleteroPlayer[playerid], gold[32], string[190];
	ActualizarManos(playerid);
	new Bonnet = InfoVehiculo[vehicleid][vMaletero][id], Cant = InfoVehiculo[vehicleid][vMaleteroCantidad][id];
	if (Bonnet == 0) return ShowInfoForPlayer(playerid, "Esta ranura se encuentra vacia.", 2000);
	if(InfoVehiculo[vehicleid][vMaleteroTipo][id] != 1)
	{
	    DarArma(playerid, Bonnet);
	    format(string, sizeof(string), "** Tomaste la %s del maletero.", NombreArmas(Bonnet));
	    SendClientMessageEx(playerid, 0xFFFF00FF, string);
	    InfoVehiculo[vehicleid][vMaletero][id] = 0;
	    InfoVehiculo[vehicleid][vMaleteroTipo][id] = 0;
		InfoVehiculo[vehicleid][vMaleteroCantidad][id] = 0;
		format(gold, sizeof gold, "Maletero%d", id+1);
		guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaletero][id]);
		format(gold, sizeof gold, "MaleteroTipo%d", id+1);
		guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroTipo][id]);
		format(gold, sizeof gold, "MaleteroCantidad%d", id+1);
		guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroCantidad][id]);
		VehMaleteroPlayer[playerid] = 0;
		return 1;
	}
	else
	{
	    if (InfoJugador[playerid][jManoDerecha] == 0)
		{
			InfoJugador[playerid][jManoDerecha] = Bonnet;
			InfoJugador[playerid][jManoDerechaCant] = Cant;
			PonerObjeto(playerid, 1, Bonnet);
			ActualizarManos(playerid);
			InfoVehiculo[vehicleid][vMaletero][id] = 0;
			InfoVehiculo[vehicleid][vMaleteroCantidad][id] = 0;
			format(string, sizeof(string), "Tomaste la %s del maletero.", InfoInventario[Bonnet][NombreObjeto]);
	    	SendClientMessageEx(playerid, 0xFFFF00FF, string);
			format(gold, sizeof gold, "Maletero%d", id+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaletero][id]);
			format(gold, sizeof gold, "MaleteroTipo%d", id+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroTipo][id]);
			format(gold, sizeof gold, "MaleteroCantidad%d", id+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroCantidad][id]);
			VehMaleteroPlayer[playerid] = 0;
			return 1;
		}
		else if (InfoJugador[playerid][jManoIzquierda] == 0)
		{
			InfoJugador[playerid][jManoIzquierda] = Bonnet;
			InfoJugador[playerid][jManoIzquierdaCant] = Cant;
			PonerObjeto(playerid, 2, Bonnet);
			ActualizarManos(playerid);
			InfoVehiculo[vehicleid][vMaletero][id] = 0;
			InfoVehiculo[vehicleid][vMaleteroCantidad][id] = 0;
			format(string, sizeof(string), "Tomaste la %s del maletero.", InfoInventario[Bonnet][NombreObjeto]);
	    	SendClientMessageEx(playerid, 0xFFFF00FF, string);
			format(gold, sizeof gold, "Maletero%d", id+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaletero][id]);
			format(gold, sizeof gold, "MaleteroTipo%d", id+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroTipo][id]);
			format(gold, sizeof gold, "MaleteroCantidad%d", id+1);
			guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroCantidad][id]);
			VehMaleteroPlayer[playerid] = 0;
			return 1;
		}
		ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas.", 2000);
	}
	return 1;
}

Dialog:ShowMaleteroSacar2(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new lista = listitem, gformat[40];
	format(gformat, sizeof gformat, "RanuraMal%d", lista);
	new id = GetPVarInt(playerid, gformat);
	new vehicleid = VehMaleteroPlayer[playerid], gold[32], string[190];
	ActualizarManos(playerid);
	new Bonnet = InfoVehiculo[vehicleid][vMaletero][id], Cant = InfoVehiculo[vehicleid][vMaleteroCantidad][id];
	if (Bonnet == 0) return ShowInfoForPlayer(playerid, "Esta ranura se encuentra vacia.", 2000);
	if (InfoJugador[playerid][jManoDerecha] == 0)
	{
		InfoJugador[playerid][jManoDerecha] = Bonnet;
		InfoJugador[playerid][jManoDerechaCant] = Cant;
		PonerObjeto(playerid, 1, Bonnet);
		ActualizarManos(playerid);
		InfoVehiculo[vehicleid][vMaletero][id] = 0;
		InfoVehiculo[vehicleid][vMaleteroCantidad][id] = 0;
		format(string, sizeof(string), "Tomaste la %s del maletero.", InfoInventario[Bonnet][NombreObjeto]);
    	SendClientMessageEx(playerid, 0xFFFF00FF, string);
		format(gold, sizeof gold, "Maletero%d", id+1);
		guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaletero][id]);
		format(gold, sizeof gold, "MaleteroTipo%d", id+1);
		guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroTipo][id]);
		format(gold, sizeof gold, "MaleteroCantidad%d", id+1);
		guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroCantidad][id]);
		VehMaleteroPlayer[playerid] = 0;
		return 1;
	}
	else if (InfoJugador[playerid][jManoIzquierda] == 0)
	{
		InfoJugador[playerid][jManoIzquierda] = Bonnet;
		InfoJugador[playerid][jManoIzquierdaCant] = Cant;
		PonerObjeto(playerid, 2, Bonnet);
		ActualizarManos(playerid);
		InfoVehiculo[vehicleid][vMaletero][id] = 0;
		InfoVehiculo[vehicleid][vMaleteroCantidad][id] = 0;
		format(string, sizeof(string), "Tomaste la %s del maletero.", InfoInventario[Bonnet][NombreObjeto]);
    	SendClientMessageEx(playerid, 0xFFFF00FF, string);
		format(gold, sizeof gold, "Maletero%d", id+1);
		guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaletero][id]);
		format(gold, sizeof gold, "MaleteroTipo%d", id+1);
		guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroTipo][id]);
		format(gold, sizeof gold, "MaleteroCantidad%d", id+1);
		guardar_int_mysql("vehiculos", gold, InfoVehiculo[vehicleid][vID], InfoVehiculo[vehicleid][vMaleteroCantidad][id]);
		VehMaleteroPlayer[playerid] = 0;
		return 1;
	}
	ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas.", 2000);
	return 1;
}

Revisar_Bolsillos(playerid, playerid2)
{
	if (IsPlayerConnectedEx(playerid) && IsPlayerConnectedEx(playerid2))
	{
		ActualizarManos(playerid2);
		new dialog[1024], string[190];
		Loop(id, 9, 0)
		{
			new Bol = InfoJugador[playerid2][jBolsillo][id];
			if (Bol == 0) format(string, sizeof string, "{cccccc}Vacio\n");
			else format(string, sizeof string, "{FFFFFF} %s ({00CC00}%d{FFFFFF})\n", InfoInventario[Bol][NombreObjeto], InfoJugador[playerid2][jBolsilloCant][id]);
			strcat(dialog, string);
		}
		format(string, sizeof string, "{008BFF}----------\n");
		strcat(dialog, string);
		new line_str[95], count = 0;
		for(new i = 0; i < 12; i ++)
		{
	    if(InfoJugador[playerid2][jArmas][i] != 0)
	    {
	        format(line_str, sizeof line_str, "{ACFF9D}%s\n", NombreArmas(InfoJugador[playerid2][jArmas][i]));
			strcat(dialog, line_str);
			IdListaDialog[playerid] = i;
			count++;
		}
		}
		format(string, sizeof string, "{008BFF}----------\n");
		strcat(dialog, string);
		if (InfoJugador[playerid2][jManoDerecha] == 0) format(string, sizeof string, "{cccccc}Mano derecha: vacia\n");
		else format(string, sizeof string, "{FFFFFF}Mano derecha: %s ({00CC00}%d{FFFFFF})\n", InfoInventario[InfoJugador[playerid2][jManoDerecha]][NombreObjeto], InfoJugador[playerid2][jManoDerechaCant]);
		strcat(dialog, string);
		if (InfoJugador[playerid2][jManoIzquierda] == 0) format(string, sizeof string, "{cccccc}Mano izquierda: vacia\n");
		else format(string, sizeof string, "{FFFFFF}Mano izquierda: %s ({00CC00}%d{FFFFFF})\n", InfoInventario[InfoJugador[playerid2][jManoIzquierda]][NombreObjeto], InfoJugador[playerid2][jManoIzquierdaCant]);
		strcat(dialog, string);
		format(string, sizeof string, "{ffffff}Dinero: {00cc00}$%s\n", diner_coma(GetPlayerCash(playerid2)));
		strcat(dialog, string);
		format(string, sizeof string, "Inventario de %s", NombreJugador(playerid2));
		Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, string, dialog, "Cerrar", "");
	}
	return 1;
}

funcion ver_Cinturon(playerid, playerid2)
{
	ActualizarManos(playerid);
	if(IsPlayerConnected(playerid) && IsPlayerConnected(playerid2))
	{
		new cinturon[1024], string[128];
		for(new i = 0; i < 6; i++)
		{
			new Bol = InfoJugador[playerid2][jCinturon][i];
			if(Bol == 0) format(string, sizeof string, "{b0b0b0}Vacio\n");
			else format(string, sizeof string, "{FFFFFF}%s [%d]\n", InfoInventario[Bol][NombreObjeto], InfoJugador[playerid2][jCinturonCant][i]);
			strcat(cinturon, string);
		}
		ShowPlayerDialog(playerid, D_CINTURON, DIALOG_STYLE_LIST, "{D6E1EB}Cinturon tactico", cinturon, "Continuar", "Salir");
	}
	return 1;
}
funcion S_Cinturon(playerid, id)
{
	if (Robando_Objeto[playerid] != 0) return SendClientMessageEx(playerid, 0xccccccff, "* No puedes usar esta funcion mientras robas un objeto de casa.");
	new query[512];
	ActualizarManos(playerid);
	new Bol = InfoJugador[playerid][jCinturon][id], Cant = InfoJugador[playerid][jCinturonCant][id];
	if(Bol == 0) return 1;
	if (Objeto_Carga(Bol)) { if (Tiene_Obj_Carga(playerid) != 0) { ShowInfoForPlayer(playerid, "Ya posees objetos de carga en una de tus manos.", 2000); return 1; } }
	if(InfoJugador[playerid][jManoDerecha] == 0)
	{
		if(InfoInventario[Bol][IDArma] > 0)
		{
			new arma = InfoInventario[Bol][IDArma], municion = Cant;
			if(municion > 0) { GivePlayerWeapon(playerid, arma, municion); }
		}
		InfoJugador[playerid][jManoDerecha] = Bol;
		InfoJugador[playerid][jManoDerechaCant] = Cant;
		PonerObjeto(playerid, 1, Bol);
		InfoJugador[playerid][jCinturon][id] = 0;
		InfoJugador[playerid][jCinturonCant][id] = 0;
		SendClientMessageEx(playerid, 0xA7CE00FF, "Sacas %s del cinturon tactico.", InfoInventario[Bol][NombreObjeto]);
		mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Cinturon_%d = '%d', Cantidad_cinturon_%d = '%d', mano_derecha = '%d', Cantidad_mano_derecha = '%d' WHERE ID = '%d'",
		id+1, InfoJugador[playerid][jCinturon][id], id+1, InfoJugador[playerid][jCinturonCant][id], InfoJugador[playerid][jManoDerecha], InfoJugador[playerid][jManoDerechaCant], InfoJugador[playerid][jID]);
		mysql_tquery(DBngrp, query);
		if (Objeto_Carga(Bol)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		return 1;
	}
	else if(InfoJugador[playerid][jManoIzquierda] == 0)
	{
		InfoJugador[playerid][jManoIzquierda] = Bol;
		InfoJugador[playerid][jManoIzquierdaCant] = Cant;
		PonerObjeto(playerid, 2, Bol);
		InfoJugador[playerid][jCinturon][id] = 0;
		InfoJugador[playerid][jCinturonCant][id] = 0;
		SendClientMessageEx(playerid, 0xA7CE00FF, "Sacas %s del cinturon tactico.", InfoInventario[Bol][NombreObjeto]);
		mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Cinturon_%d = '%d', Cantidad_cinturon_%d = '%d', mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'",
		id+1, InfoJugador[playerid][jCinturon][id], id+1, InfoJugador[playerid][jCinturonCant][id], InfoJugador[playerid][jManoIzquierda], InfoJugador[playerid][jManoIzquierdaCant], InfoJugador[playerid][jID]);
		mysql_tquery(DBngrp, query);
		if (Objeto_Carga(Bol)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	} else return ShowInfoForPlayer(playerid, "Tus manos estan ocupadas.", 2000);
	return 1;
}
funcion G_Cinturon(playerid, mano)
{
	new query[512];
	ActualizarManos(playerid);
	if(mano == 1)
	{
		if(InfoJugador[playerid][jManoDerecha] == 0) return ShowInfoForPlayer(playerid, "No tienes un objeto en tu mano derecha.", 2000);
		new Mano = InfoJugador[playerid][jManoDerecha], Cant = InfoJugador[playerid][jManoDerechaCant], BolsilloLibre;
		if(InfoInventario[Mano][Guardable] == 2 || InfoInventario[Mano][Guardable] == 3) return ShowInfoForPlayer(playerid, "Este objeto es demasiado grande.", 2000);
		for(new x = 0; x < 6; x++)
		{
			if(InfoJugador[playerid][jCinturon][x] == 0)
			{
				InfoJugador[playerid][jCinturon][x] = Mano;
				InfoJugador[playerid][jCinturonCant][x] = Cant;
				RemovePlayerAttachedObject(playerid, 6);
				if (Objeto_Carga(InfoJugador[playerid][jManoDerecha])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				InfoJugador[playerid][jManoDerecha] = 0;
				InfoJugador[playerid][jManoDerechaCant] = 0;
				SendClientMessageEx(playerid, 0xA7CE00FF, "Guardas %s en el cinturon tactico.", InfoInventario[Mano][NombreObjeto]);
				BolsilloLibre = 1;
				mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Cinturon_%d = '%d', Cantidad_cinturon_%d = '%d', mano_derecha = '%d', Cantidad_mano_derecha = '%d' WHERE ID = '%d'",
				x+1, InfoJugador[playerid][jCinturon][x], x+1, InfoJugador[playerid][jCinturonCant][x], InfoJugador[playerid][jManoDerecha], InfoJugador[playerid][jManoDerechaCant], InfoJugador[playerid][jID]);
				mysql_tquery(DBngrp, query);
				return 1;
			}
		}
		if(BolsilloLibre == 0) return ShowInfoForPlayer(playerid, "No tienes mas huecos en tu cinturon.", 2000);
	}
	else if(mano == 2)
	{
		if(InfoJugador[playerid][jManoIzquierda] == 0) return ShowInfoForPlayer(playerid, "No tienes un objeto en tu mano izquierda.", 2000);
		new Mano = InfoJugador[playerid][jManoIzquierda], Cant = InfoJugador[playerid][jManoIzquierdaCant], BolsilloLibre;
		if(InfoInventario[Mano][Guardable] == 2 || InfoInventario[Mano][Guardable] == 3) return ShowInfoForPlayer(playerid, "Este objeto es demasiado grande.", 2000);
		for(new x = 0; x < 6; x++)
		{
			if(InfoJugador[playerid][jCinturon][x] == 0)
			{
				InfoJugador[playerid][jCinturon][x] = Mano;
				InfoJugador[playerid][jCinturonCant][x] = Cant;
				RemovePlayerAttachedObject(playerid, 7);
				if (Objeto_Carga(InfoJugador[playerid][jManoIzquierda])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				InfoJugador[playerid][jManoIzquierda] = 0;
				InfoJugador[playerid][jManoIzquierdaCant] = 0;
				SendClientMessageEx(playerid, 0xA7CE00FF, "Guardas %s en el cinturon tactico.", InfoInventario[Mano][NombreObjeto]);
				BolsilloLibre = 1;
				mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Cinturon_%d = '%d', Cantidad_cinturon_%d = '%d', mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'",
				x+1, InfoJugador[playerid][jCinturon][x], x+1, InfoJugador[playerid][jCinturonCant][x], InfoJugador[playerid][jManoIzquierda], InfoJugador[playerid][jManoIzquierdaCant], InfoJugador[playerid][jID]);
				mysql_tquery(DBngrp, query);
				return 1;
			}
		}
		if(BolsilloLibre == 0) return ShowInfoForPlayer(playerid, "No tienes mas huecos en tu cinturon.", 2000);
	}
	return 1;
}

sacar_inventario(playerid, id)
{
	if (Robando_Objeto[playerid] != 0) return SendClientMessageEx(playerid, 0xccccccff, "* No puedes usar esta funcion mientras robas un objeto de casa.");
	new query[1028], Bol = InfoJugador[playerid][jBolsillo][id], Cant = InfoJugador[playerid][jBolsilloCant][id], gformat[190];
	ActualizarManos(playerid);
	if (Bol == 0) return ShowInfoForPlayer(playerid, "No tienes nada en ese slot.", 2000);
	if (Objeto_Carga(Bol)) { if (Tiene_Obj_Carga(playerid) != 0) { ShowInfoForPlayer(playerid, "Ya posees objetos de carga en una de tus manos.", 2000); return 1; } }
	if (InfoJugador[playerid][jManoDerecha] == 0)
	{
		//si es arma
		if (InfoInventario[Bol][IDArma] > 0)
		{
			new arma = InfoInventario[Bol][IDArma], municion = Cant;
			if (municion > 0)
			{
				GivePlayerWeapon(playerid, arma, municion);
				if (EsArma(arma) && Cant > 0)
				{
					format(gformat, sizeof gformat, "saca %s y retira el seguro.", InfoInventario[Bol][NombreObjeto]);
					cmd_me(playerid, gformat);
				}
			}
		}
		//
		InfoJugador[playerid][jManoDerecha] = Bol;
		InfoJugador[playerid][jManoDerechaCant] = Cant;
		PonerObjeto(playerid, 1, Bol);
		InfoJugador[playerid][jBolsillo][id] = 0;
		InfoJugador[playerid][jBolsilloCant][id] = 0;
		SendClientMessageEx(playerid, 0xA7CE00FF, "Sacas %s de tu inventario.", InfoInventario[Bol][NombreObjeto]);
		mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = '%d', Cantidad_bolsillo_%d = '%d', mano_derecha = '%d', Cantidad_mano_derecha = '%d' WHERE ID = '%d'", id+1, InfoJugador[playerid][jBolsillo][id], id+1, InfoJugador[playerid][jBolsilloCant][id], InfoJugador[playerid][jManoDerecha], InfoJugador[playerid][jManoDerechaCant], InfoJugador[playerid][jID]);
		mysql_tquery(DBngrp, query);
		if (Objeto_Carga(Bol)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		return 1;
	}
	else if (InfoJugador[playerid][jManoIzquierda] == 0)
	{
		InfoJugador[playerid][jManoIzquierda] = Bol;
		InfoJugador[playerid][jManoIzquierdaCant] = Cant;
		PonerObjeto(playerid, 2, Bol);
		InfoJugador[playerid][jBolsillo][id] = 0;
		InfoJugador[playerid][jBolsilloCant][id] = 0;
		SendClientMessageEx(playerid, 0xA7CE00FF, "Sacas %s de tu inventario.", InfoInventario[Bol][NombreObjeto]);
		mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = '%d', Cantidad_bolsillo_%d = '%d', mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'", id+1, InfoJugador[playerid][jBolsillo][id], id+1, InfoJugador[playerid][jBolsilloCant][id], InfoJugador[playerid][jManoIzquierda], InfoJugador[playerid][jManoIzquierdaCant], InfoJugador[playerid][jID]);
		mysql_tquery(DBngrp, query);
		if (Objeto_Carga(Bol)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		return 1;
	}
	ShowInfoForPlayer(playerid, "Tus manos estan ocupadas.", 2000);
	return 1;
}

guardar_inventario(playerid, mano)
{
	new query[1028], slot_vacio = -1;
	if (GetPVarInt(playerid, "EnCrack") == 1) return ShowInfoForPlayer(playerid, "No puedes usar este comando mientras estas herido.", 2000);
	Loop(x, 9, 0) if (InfoJugador[playerid][jBolsillo][x] == 0)
	{
		slot_vacio = x;
		break;
	}
	if (slot_vacio == -1) return ShowInfoForPlayer(playerid, "No tienes espacio en tu inventario, saca algo primero.", 2000);
	ActualizarManos(playerid);
	if (mano == 1)
	{
		if (InfoJugador[playerid][jManoDerecha] == 0) return ShowInfoForPlayer(playerid, "No tienes un objeto en tu mano derecha.", 2000);
		new Mano = InfoJugador[playerid][jManoDerecha], Cant = InfoJugador[playerid][jManoDerechaCant];
		if (InfoInventario[Mano][Guardable] == 2 || InfoInventario[Mano][Guardable] == 3) return ShowInfoForPlayer(playerid, "Este objeto es demasiado grande.", 2000);
		InfoJugador[playerid][jBolsillo][slot_vacio] = Mano;
		InfoJugador[playerid][jBolsilloCant][slot_vacio] = Cant;
		RemovePlayerAttachedObject(playerid, 6);
		if (Objeto_Carga(InfoJugador[playerid][jManoDerecha])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		InfoJugador[playerid][jManoDerecha] = 0;
		InfoJugador[playerid][jManoDerechaCant] = 0;
		SendClientMessageEx(playerid, 0xA7CE00FF, "Guardas %s en tu inventario.", InfoInventario[Mano][NombreObjeto]);
		mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = '%d', Cantidad_bolsillo_%d = '%d', mano_derecha = '%d', Cantidad_mano_derecha = '%d' WHERE ID = '%d'", slot_vacio+1, InfoJugador[playerid][jBolsillo][slot_vacio], slot_vacio+1, InfoJugador[playerid][jBolsilloCant][slot_vacio], InfoJugador[playerid][jManoDerecha], InfoJugador[playerid][jManoDerechaCant], InfoJugador[playerid][jID]);
		mysql_tquery(DBngrp, query);
	}
	else if (mano == 2)
	{
		if (InfoJugador[playerid][jManoIzquierda] == 0) return ShowInfoForPlayer(playerid, "No tienes un objeto en tu mano izquierda.", 2000);
		new Mano = InfoJugador[playerid][jManoIzquierda], Cant = InfoJugador[playerid][jManoIzquierdaCant];
		if (InfoInventario[Mano][Guardable] == 2 || InfoInventario[Mano][Guardable] == 3) return ShowInfoForPlayer(playerid, "Este objeto es demasiado grande.", 2000);
		InfoJugador[playerid][jBolsillo][slot_vacio] = Mano;
		InfoJugador[playerid][jBolsilloCant][slot_vacio] = Cant;
		RemovePlayerAttachedObject(playerid, 7);
		if (Objeto_Carga(InfoJugador[playerid][jManoIzquierda])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		InfoJugador[playerid][jManoIzquierda] = 0;
		InfoJugador[playerid][jManoIzquierdaCant] = 0;
		SendClientMessageEx(playerid, 0xA7CE00FF, "Guardas %s en tu inventario.", InfoInventario[Mano][NombreObjeto]);
		mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Bolsillo_%d = '%d', Cantidad_bolsillo_%d = '%d', mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'", slot_vacio+1, InfoJugador[playerid][jBolsillo][slot_vacio], slot_vacio+1, InfoJugador[playerid][jBolsilloCant][slot_vacio], InfoJugador[playerid][jManoIzquierda], InfoJugador[playerid][jManoIzquierdaCant], InfoJugador[playerid][jID]);
		mysql_tquery(DBngrp, query);
	}
	return 1;
}

public OnPlayerPressButton(playerid, buttonid)
{
	if(buttonid == BotonPuertaLSPDINT)
	{
		if(!Es_Banda(playerid, 1))
		{
			ShowInfoForPlayer(playerid, "Tu no tienes acceso a abrir esta puerta.", 2000);
			return 1;
		}
		MoveDynamicObject(PuertaLSPDINT, 228.2162, 153.5847, 1002.0262, 0.8);
		SetTimer("CerrarPuertaLSPDINT", 5000, 0);
	}
	else if(buttonid == BotonPuertaLSPDINT1)
	{
		if(!Es_Banda(playerid, 1))
		{
			ShowInfoForPlayer(playerid, "Tu no tienes acceso a abrir esta puerta.", 2000);
			return 1;
		}
		MoveDynamicObject(PuertaLSPDINT, 228.2162, 153.5847, 1002.0262, 0.8);
		SetTimer("CerrarPuertaLSPDINT", 5000, 0);
	}
	else if(buttonid == BotonPuertaSasd)
	{
		if(!Es_Banda(playerid, 1))
		{
			ShowInfoForPlayer(playerid, "Tu no tienes acceso a abrir esta puerta.", 2000);
			return 1;
		}
		MoveDynamicObject(PuertaSasd, -448.1926, 693.9017, 3851.9309, 0.8);
		SetTimer("CerrarPuertaSasd", 5000, 0);
	}
	else if(buttonid == BotonPuertaSasd1)
	{
		if(!Es_Banda(playerid, 1))
		{
			ShowInfoForPlayer(playerid, "Tu no tienes acceso a abrir esta puerta.", 2000);
			return 1;
		}
		MoveDynamicObject(PuertaSasd, -448.1926, 693.9017, 3851.9309, 0.8);
		SetTimer("CerrarPuertaSasd", 5000, 0);
	}
	return false;
}

funcion CerrarPuertaLSPDINT(playerid) return MoveDynamicObject(PuertaLSPDINT, 228.25906, 152.26401, 1002.02618, 0.8);
funcion CerrarPuertaSasd(playerid) return MoveDynamicObject(PuertaSasd, -448.1926, 692.63770, 3851.9309, 0.8);

funcion EliminarHerido(playerid)
{
	debugDead[playerid] = 0;
	DeletePVar(playerid, "EnCrack");
	return 1;
}

public OnPlayerText(playerid, text[])
{
    if(CheckspamString(text))
	{
	    if(GetSpam(text,playerid) && !DetectSPAM(text)) MensajeSpam(playerid,text);
	    new spamString[128];
	    format(spamString, sizeof(spamString), "%s dice: %s", NombreJugador(playerid),text);
	   	SendClientMessage(playerid, 0xFFFFFFFF, spamString);
		return 0;
	}

	new string[256];
    if (usuario_registro[playerid] != 2) return 0;
	if (InfoJugador[playerid][jEncarcelado] == 1) { _Mensaje(playerid, 4, "FFF000", "No puedes hablar ni colocar comandos en jail ooc."); return 0; }
	if (_2Entrevista[playerid] != INVALID_PLAYER_ID)
	{
		if (Es_Banda(playerid, 5))
		{
			format(string, sizeof string, "[SAN] Reportero %s: %s", NombreJugador(playerid), text);
			_MensajeSAN(0x00DC76FF, string);
		}
		else
		{
			format(string, sizeof string, "[SAN] Invitado %s: %s", NombreJugador(playerid), text);
			_MensajeSAN(0x00A476FF, string);
		}
		return 0;
	}
	if ( _sanCall == playerid )
	{
		format(string, sizeof string, "[SAN] Linea telefonica: %s", text);
		_MensajeSAN(0x00DC3AFF, string);
		return 0;
	}
	if(PersonaEnLlamada[playerid] != -1)
	{
		if(EnLlamada[playerid] == 2 || EnLlamada[playerid] == 3 || EnLlamada[playerid] == 912)
		{
			if(Altavoz[PersonaEnLlamada[playerid]] == 0)
			{
				if(EnLlamada[PersonaEnLlamada[playerid]] == 912) format(string, sizeof string, "[Telefono: 911]: %s", text);
				else format(string, sizeof string, "[Telefono: %d]: %s", InfoJugador[playerid][jTelefono], text);
				SendClientMessage(PersonaEnLlamada[playerid], 0xFFF000FF, string);
			}
			else
			{
				if(EnLlamada[PersonaEnLlamada[playerid]] == 912) format(string, sizeof string, "[T. Altavoz: 911]: %s", text);
				else format(string, sizeof string, "[T. Altavoz: %d]: %s", InfoJugador[playerid][jTelefono], text);
				ProxDetector(4.5, PersonaEnLlamada[playerid], string, 0xFFF000FF, 0xFFF000FF, 0xFFF000FF, 0xFFF000FF, 0xFFF000FF);
			}
			format(string, sizeof string, "%s por telefono: %s", NombreJugador(playerid), text);
			ProxDetector(8.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
		}
		return 0;
	}
	if (!IsPlayerInAnyVehicle(playerid))
	{
	    if (EnServicioADM[playerid] == 1)
		{
	    	format(string, sizeof string, "(( [{ff0000}%d{b0b0b0}] %s: %s ))", playerid, NombreRJugador(playerid), text);
	    	ProxDetector(30.0, playerid, string, C_GRIS, C_GRIS, C_GRIS, C_GRIS, C_GRIS);
		}else
		{
			Hablando(playerid, text);
			format(string, sizeof string, "%s dice: %s", NombreJugador(playerid), text);
			ProxDetector(15.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
		}
	}
	else
	{
		new carid = GetPlayerVehicleID(playerid);
		if (EnMotos_Bicis(carid) || EstaEnAvion(carid) || EstaEnBote(carid))
		{
			format(string, sizeof string, "%s dice: %s", NombreJugador(playerid), text);
			ProxDetector(15.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
		}
		else
		{
			if (VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
			{
				format(string, sizeof string, "[V-C] %s dice: %s", NombreJugador(playerid), text);
				ProxDetector(4.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
			}
			else
			{
				format(string, sizeof string, "[V-A] %s dice: %s", NombreJugador(playerid), text);
				ProxDetector(15.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
			}
		}
	} // fin charla ic
	return 0;
}

funcion Hablando(playerid, text[]) {
    if (GetPVarInt(playerid, "HaciendoMueble") == 1) return 1;
    if (GetPVarInt(playerid, "_heridoC") == 1) return 1;
    if (GetPVarInt(playerid, "EnEvento") == 1) return 1;
    if (GetPVarInt(playerid, "EnCrack") == 1) return 1;
    if (_Gomas[playerid] == 1 || Taseado[playerid] == 1) return 1;
	new anim = GetPlayerAnimationIndex(playerid);
    if (!IsPlayerInAnyVehicle(playerid)) {
        if (JugadorSentado[playerid] != 1) {
            if (!JugadorUsandoAnimacion[playerid]) {
                if (!B_Manos[playerid]) {
                    if ((anim != 1538 || anim != 1539 || anim != 1540 || anim != 1541 || anim != 1542)) {
                        ApplyAnimation(playerid, "PED", "IDLE_chat", 4.1, 7, 5, 1, 1, 1, 1);
                        SetTimerEx("FinHablar", strlen(text) * 300, false, "d", playerid);
                        return 1;
                    }
                }
            }
        }
    }
    return 1;
}

funcion FinHablar(playerid) {
    JugadorUsandoAnimacion[playerid] = 0;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if (usuario_registro[playerid] != 2) { ShowInfoForPlayer(playerid, "No puedes utilizar comandos si no estas logeado en el servidor", 2000); return 0; }
	if (GetPVarInt(playerid, "CargandoObjetos") == 1) { ShowInfoForPlayer(playerid, "No puedes usar comandos, mientras esten cargando los objetos.", 2000); return 0; }
	if (CheckspamString(cmdtext)) { if (GetSpam(cmdtext, playerid) && !DetectSPAM(cmdtext)) MensajeSpam(playerid, cmdtext); return 0; }
	if (Reinicio == 1 && TiempoReinicio > 0)
	{
		new string[210];
		format(string, sizeof string, "~n~~n~~r~No puedes mandar comandos~n~mientras esta programado un reinicio~n~~w~Tiempo para reinicio %d minutos.", TiempoReinicio);
		ShowPlayerFooter(playerid, string);
		return 0;
	}
	if (InfoJugador[playerid][jEncarcelado] == 1 && InfoJugador[playerid][jAdmin] == 0)
	{
		if (!strfind(cmdtext, "/w", true)){ }
		else if (!strfind(cmdtext, "/mp", true)){ }
		else if (!strfind(cmdtext, "/duda", true)){ }
		else if (!strfind(cmdtext, "/re", true)){ }
		else if (!strfind(cmdtext, "/b", true)){ }
		else
		{
			SendClientMessageEx(playerid, 0xCCCC00FF, "Solo puedes usar los comandos: /mp - /duda - /b - /re.");
			return 0;
		}
	}
	if (InfoJugador[playerid][jAdmin] < 1)
	{
		if (strfind(cmdtext, ":", true) != -1)
		{
			new i_numcount, i_period, i_pos;
			while(cmdtext[i_pos])
			{
				if ('0' <= cmdtext[i_pos] <= '9') i_numcount++;
				else if (cmdtext[i_pos] == '.') i_period++;
				i_pos++;
			}
			if (i_numcount >= 8 && i_period >= 3)
			{
				new string[128];
				format(string, sizeof string, "Administracion: (ID: %d) %s puede estar haciendo SPAM: '%s'.", playerid, NombreRJugador(playerid), cmdtext);
				MensajeAdmin(string);
				return 0;
			}
		}
	}
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if (!success)
	{
		ShowInfoForPlayer(playerid, "El comando que ingresaste no existe, usa~r~ /ayuda", 2000);
	}
	else
	{
		printf("[cmd] [%s]: %s", NombreRJugador(playerid), cmdtext);
	}
	return 1;
}

stock ShowPlayerFooter(playerid, string[], time = 5000)
{
	format(string, 210, "%s", string);
	GameTextForPlayer(playerid, string, time, 3);
	return 1;
}

stock _SVehiculo(jugador)
{
	ClearAnimations(jugador);
	new Float: slx,Float: sly,Float: slz;
	GetPlayerPos(jugador, slx, sly, slz);
	SetPlayerPos(jugador, slx, sly, slz);
 	_Mensaje(jugador, 0, "1", "No tienes las llaves de este vehiculo.");
	return 1;
}

stock IsABike(veh)
{
  new bike = GetVehicleModel(veh);
  if(bike == 448 ||bike == 461 || bike == 461 ||bike == 462 ||bike == 463 ||bike == 468||bike == 471||bike == 481||bike == 509||bike == 510||bike == 521||bike == 522||bike == 523||bike == 581||bike == 586 ) return 1;
  return 0; // if is another model
}

stock IsABicycle(carid)
{
    switch(GetVehicleModel(carid))
	{
		case 481,509,510: return 1;
	}
	return 0;
}

stock IsVehicleHaveFuel(carid)
{
	if(IsABicycle(carid)) return 1;

	switch(GetVehicleModel(carid)) { case 462, 481, 488, 460, 509, 510: return 0; }

	return 1;
}

funcion EnMotoPerro(playerid)
{
    RemovePlayerFromVehicle(playerid);
    CongelarEx(playerid, 5);
    return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if (ispassenger)
	{
		Loop(id, totalvehiculos, 1) if (IsPlayerInVehicle(playerid, InfoVehiculo[id][vDL]) && InfoVehiculo[id][vUberService] == 1)
		{
			_Mensaje(playerid, 4, "6e8f99", "[Uber] Usa /suber [id del conductor] [paga] y ve al mapa y marca el punto");
		}
	}
	if (GetPVarInt(playerid, "EnCrack") == 1) SetPVarInt(playerid, "_Ejcet", 1);
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(engine == VEHICLE_PARAMS_UNSET) switch(GetVehicleModel(vehicleid))
	{
		case 509, 481, 510: GasolinaInicialVeh[vehicleid] = 200, arr_Engine {vehicleid} = 1, SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective), arr_Engine {vehicleid} = 1;
		default: SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective), arr_Engine {vehicleid} = 0;
	}

	Casco[playerid] = 0;
	if(GasolinaInicialVeh[vehicleid] <= 0)
	{
		EncenderVehiculo(vehicleid, playerid);
	}
	if(!ispassenger)
	{
		if(cocheocupado(vehicleid))
		{
			ClearAnimations(playerid);
			ShowInfoForPlayer(playerid, "No esta permitido el CJ, en este servidor.", 2000);
			TogglePlayerControllable(playerid, false);
			SetTimerEx("Descongelar", 3000, 0, "i", playerid);
		}
		//facciones
		if(LSPD_Veh(vehicleid))
		{
			if(!Es_Banda(playerid, 1)) return _SVehiculo(playerid);
        }
		else if(CNN_Veh(vehicleid))
		{
			if(!Es_Banda(playerid, 5)) return _SVehiculo(playerid);
		}
		else if(GOB_Vehicle(vehicleid))
		{
			if(!Es_Banda(playerid, 4)) return _SVehiculo(playerid);
		}
		else if(LAFD_Veh(vehicleid))
		{
			if(!Es_job(playerid, 15)) return _SVehiculo(playerid);
		}
		else if(GN_Vehicle(vehicleid))
		{
			if(!Es_Banda(playerid, 2)) return _SVehiculo(playerid);
		}
		else if(Basurero_Vehicle(vehicleid))
		{
			if(!Es_job(playerid, 3)) return _SVehiculo(playerid);
		}
		else if(Camionero_Vehicle(vehicleid))
		{
			if(!Es_job(playerid, 4)) return _SVehiculo(playerid);

			if(GetVehicleModel(vehicleid) == 413 || GetVehicleModel(vehicleid) == 456)
			{

				new string[256], contenido = _Contenido[vehicleid], texting[50];

				if(contenido == 1) format(texting, sizeof(texting), "productos {771BA9}de ropa");
				else if(contenido == 2) format(texting, sizeof(texting), "productos {2788FE}generales");
				else if(contenido == 3) format(texting, sizeof(texting), "productos {2788FE}electronicos");
				else if(contenido == 4) format(texting, sizeof(texting), "productos {2788FE}de comida");
				else if(contenido == 5) format(texting, sizeof(texting), "{2788FE}mercancia");
				if(contenido != 0) { format(string, sizeof string, "Vehiculo de camionero [%s-%d], contiene %s{ffffff}.", GetVehicleName(vehicleid), vehicleid, texting), _Mensaje(playerid, 4, "FFFFFF",string); }

				if(_CamVeh[playerid] == INVALID_VEHICLE_ID) _Mensaje(playerid, 4, "A7CE00", "Puedes comenzar a trabajar escribiendo /transportar.");
				else if(_CamVeh[playerid] == vehicleid) _Mensaje(playerid, 4, "2788FE", "Este es tu vehiculo de camionero, llevalo al punto marcado en el radar.");
				else if(_CamVeh[playerid] != INVALID_VEHICLE_ID) { _Mensaje(playerid, 4, "2788FE", "[ERROR]{ffffff} Este vehiculo es de otro chofer, utiliza /borrarcarga."); }

			}
		}
		else if(Granjero_Vehicle(vehicleid))
		{
			if(!Es_job(playerid, 10)) return _SVehiculo(playerid);
		}


    }
    else
    {
		if (!IsPlayerInRangeOfVehicle(playerid, vehicleid, 7.5) || VehSeguro[vehicleid] != 0)// G-bugging fix
		{
			if (playerTextdraw[playerid] == false)
			{
				playerVehicleTextdraw[playerid] = CreateDynamic3DTextLabel("Vehiculo con seguro", 0xEBEBEBFF, 0.0, 0.0, 0.0, 12.0, INVALID_PLAYER_ID, vehicleid, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid);
				SetTimerEx("OnVehicleTextdraw", 4000, false, "i", playerid);

				playerTextdraw[playerid] = true;
			}
			new Float: slx,Float: sly,Float: slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz);
			ClearAnimations(playerid);
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
			return 1;
		}
	}
	return 1;
}

forward OnVehicleTextdraw(playerid);
public OnVehicleTextdraw(playerid)
{
	if (IsValidDynamic3DTextLabel(playerVehicleTextdraw[playerid]))
	{
		DestroyDynamic3DTextLabel(playerVehicleTextdraw[playerid]);
		playerVehicleTextdraw[playerid] = Text3D:INVALID_3DTEXT_ID;
	}
	playerTextdraw[playerid] = false;
	return 1;
}

funcion cocheocupado(vehicleid) {
    for(new i; i < GetMaxPlayers(); i++)
    if(IsPlayerConnected(i) && IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER) return 1;
    return 0;
}

//Prox detector
ProxDetector(Float: f_Radius, playerid, string[], col1, col2, col3, col4, col5) {
    new Float: f_playerPos[3];
    GetPlayerPos(playerid, f_playerPos[0], f_playerPos[1], f_playerPos[2]);
    foreach(Player, i) {
        if(!BigEar[i]) {
            if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) {
                if(_enPos(i, f_Radius / 16, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
                    SendSplitMessage(i, col1, string);
                } else if(_enPos(i, f_Radius / 8, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
                    SendSplitMessage(i, col2, string);
                } else if(_enPos(i, f_Radius / 4, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
                    SendSplitMessage(i, col3, string);
                } else if(_enPos(i, f_Radius / 2, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
                    SendSplitMessage(i, col4, string);
                } else if(_enPos(i, f_Radius, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
                    SendSplitMessage(i, col5, string);
                }
            }
        } else SendClientMessage(i, col1, string);
    }
    return 1;
}

funcion SendSplitMessage(playerid, color, final[]) {
    new buffer[MAX_SPLITLENGTH + 10];
    new len = strlen(final);
    if(len > MAX_SPLITLENGTH) {
        new times = (len / MAX_SPLITLENGTH);
        for(new i = 0; i < times + 1; i++) {
            strdel(buffer, 0, MAX_SPLITLENGTH + 5);
            if(len - (i * MAX_SPLITLENGTH) > MAX_SPLITLENGTH) {
                strmid(buffer, final, MAX_SPLITLENGTH * i, MAX_SPLITLENGTH * (i + 1));
                if(!i) format(buffer, sizeof(buffer), "%s ...", buffer);
                else format(buffer, sizeof(buffer), "... %s ...", buffer);
            } else {
                strmid(buffer, final, MAX_SPLITLENGTH * i, len);
                format(buffer, sizeof(buffer), "... %s", buffer);
            }
            SendClientMessage(playerid, color, buffer);
        }
    } else {
        SendClientMessage(playerid, color, final);
    }
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	new carid = GetPlayerVehicleID(playerid), vehicleid = GetPlayerVehicleID(playerid);
	//robo cajero
	if (RecogerDinero[playerid] != -1)
	{
		new id = RecogerDinero[playerid];
		if (!IsPlayerInRangeOfPoint(playerid, 5.5, InfoCajero[id][atmPosX], InfoCajero[id][atmPosY], InfoCajero[id][atmPosZ])) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas en el punto del cajero.");
		DisablePlayerCheckpoint(playerid);
		new pago = Random(10000, 15000);
		GivePlayerCash(playerid, pago, "pago robo cajero");
		SendClientMessageEx(playerid, 0x00CCCCFF, "Recibiste $%s por el robo del cajero.", diner_coma(pago));
		RecogerDinero[playerid] = -1;
		if (InfoJugador[playerid][jAdmin] != 11)
		{
			InfoJugador[playerid][jTiempos][15] = 40;
			guardar_int_mysql("cuentas", "Tiempos16", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][15]);
		}
		return 1;
	}
	//Mandar Ubicacion
	if(Loc[playerid])
    DisablePlayerCheckpoint(playerid);
    Loc [playerid] = false;
    return 1;
	//basurero
	if (GetPVarInt(playerid, "act_point") == 1)
	{
		new id_point = puntos_recorridos_basu[playerid];
		if (IsPlayerInRangeOfPoint(playerid, 5.0, point_basura[id_point][0], point_basura[id_point][1], point_basura[id_point][2]))
		{
		    if(idcompanero[playerid] == INVALID_PLAYER_ID)
		    {
				if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xCCCCCCFF, "* No puedes tirar la basura dentro de un vehiculo.");
				RemovePlayerAttachedObject(playerid, 9);
				SetPlayerAttachedObject(playerid, 9, 1264, 6, 0.376999, 0.097000, 0.173000, 0.000000, -87.700004, 15.199998, 0.855000, 0.655000, 0.853000);
				con_basura_mano[playerid] = 1;
				SendClientMessage(playerid, 0xCCCC00FF, "Tira la basura en el contenedor del camion (da Clic en la parte trasera).");
			}
			else
			{
			    if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xCCCCCCFF, "* No puedes tirar la basura dentro de un vehiculo.");
				RemovePlayerAttachedObject(playerid, 9);
				SetPlayerAttachedObject(playerid, 9, 1264, 6, 0.376999, 0.097000, 0.173000, 0.000000, -87.700004, 15.199998, 0.855000, 0.655000, 0.853000);
				con_basura_mano[playerid] = 1;
				SendClientMessage(playerid, 0xCCCC00FF, "Tira la basura en el contenedor del camion (da Clic en la parte trasera).");
			}
		}
		return 1;
	}
	else if (GetPVarInt(playerid, "act_point") == 2)
	{
		new vehid = GetPlayerVehicleID(playerid);
		if (!IsPlayerInRangeOfPoint(playerid, 7.0, 1066.5154, 1357.0149, 10.3095)) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas en el punto de basurero.");
		if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xCCCCCCFF, "* Debes estar subido encima de un vehiculo de basurero.");
		if (vehid != tu_veh_basura[playerid]) return SendClientMessage(playerid, 0xCCCCCCFF, "* Debes estar en el mismo camion con el que empezaste.");
		if(idcompanero[playerid] == INVALID_PLAYER_ID)
		{
			DisablePlayerCheckpoint(playerid);
			tu_veh_basura[playerid] = 0;
			puntos_recorridos_basu[playerid] = 0;
			SetPVarInt(playerid, "act_point", 0);
			SetVehicleToRespawn(vehid);
			//habilidad
			InfoJugador[playerid][jHabilidad1][2]++;
			guardar_int_mysql("cuentas", "Habilidad1_3", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][2]);
			//pago
			new pago = Random(3500, 4200);
			switch (InfoJugador[playerid][jHabilidad2][2])
			{
				case 1: pago = Random(3500, 4200);
				case 2: pago = Random(4200, 4700);
				case 3: pago = Random(4750, 5300);
				case 4: pago = Random(5370, 5800);
				case 5: pago = Random(5810, 6400);
			}
			GivePlayerCash(playerid, pago, "pago basurero");
			SendClientMessageEx(playerid, 0xCCCC00FF, "Recibiste $%s por completar el recorrido de basurero.", diner_coma(pago));
			return 1;
		}
		else
		{
		    DisablePlayerCheckpoint(playerid);
		    DisablePlayerCheckpoint(idcompanero[playerid]);
			tu_veh_basura[playerid] = 0;
			puntos_recorridos_basu[playerid] = 0;
			puntos_recorridos_basu[idcompanero[playerid]] = 0;
			SetPVarInt(playerid, "act_point", 0);
			SetPVarInt(idcompanero[playerid], "act_point", 0);
			SetVehicleToRespawn(vehid);
			//habilidad
			InfoJugador[playerid][jHabilidad1][2]++;
			guardar_int_mysql("cuentas", "Habilidad1_3", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][2]);
			InfoJugador[idcompanero[playerid]][jHabilidad1][2]++;
			guardar_int_mysql("cuentas", "Habilidad1_3", InfoJugador[idcompanero[playerid]][jID], InfoJugador[idcompanero[playerid]][jHabilidad1][2]);
			//pago
			new pago = Random(3500, 4200);
			switch (InfoJugador[playerid][jHabilidad2][2])
			{
				case 1: pago = Random(3500, 4200);
				case 2: pago = Random(4200, 4700);
				case 3: pago = Random(4750, 5300);
				case 4: pago = Random(5370, 5800);
				case 5: pago = Random(5810, 6400);
			}
			switch (InfoJugador[idcompanero[playerid]][jHabilidad2][2])
			{
				case 1: pago = Random(3500, 4200);
				case 2: pago = Random(4200, 4700);
				case 3: pago = Random(4750, 5300);
				case 4: pago = Random(5370, 5800);
				case 5: pago = Random(5810, 6400);
			}
			GivePlayerCash(playerid, pago, "pago basurero");
			GivePlayerCash(idcompanero[playerid], pago, "pago basurero");
			SendClientMessageEx(playerid, 0xCCCC00FF, "Recibiste $%s por completar el recorrido de basurero.", diner_coma(pago));
			SendClientMessageEx(idcompanero[playerid], 0xCCCC00FF, "Recibiste $%s por completar el recorrido de basurero.", diner_coma(pago));
			idcompanero[idcompanero[playerid]] = -1;
			idcompanero[playerid] = -1;
			return 1;
		}
	}
	if (ConLlamadoMecanico[playerid] != -1)
	{
		new playerid2 = ConLlamadoMecanico[playerid];
		if (!IsPlayerConnectedEx(playerid2))
		{
			SendClientMessage(playerid, 0x008BFFFF, "* El jugador que solicito el llamado, se ha desconectado.");
			ConLlamadoMecanico[playerid] = -1;
			DisablePlayerCheckpoint(playerid);
			return 1;
		}
		if (!IsPlayerInRangeOfPoint(playerid, 6.0, PosLlamadoMecanico[playerid2][0], PosLlamadoMecanico[playerid2][1], PosLlamadoMecanico[playerid2][2])) return SendClientMessage(playerid, 0x008BFFFF, "* No estas en la posicion del llamado.");
		ConLlamadoMecanico[playerid] = -1;
		TimerOtherLlamado[playerid2] = 1;
		DisablePlayerCheckpoint(playerid);
		SendClientMessageEx(playerid, 0x00CC00FF, "* Llegaste al llamado de %s.", NombreJugador(playerid2));
		return 1;
	}
	if(GetPVarInt(playerid, "Sad") == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        TogglePlayerControllable(playerid, false);

        SetTimerEx("SadYablkJob",5000,0,"%d",playerid);
        GameTextForPlayer(playerid,"~y~+1",5200,5);
        AmmountWood[playerid] += 1;
        ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,1,1,1,1,0);
        new rand = random(sizeof(derevo));
        SetPlayerCheckpoint
		(
			playerid,
			derevo[rand][0],
			derevo[rand][1],
			derevo[rand][2],
			3.0
	    );
        DeletePVar(playerid, "Sad");
        DisablePlayerCheckpoint(playerid);
        SetPVarInt(playerid, "Sad", 1);
	}
	if (GetPVarInt(playerid, "EnCheckPoint") == 1)
	{
		DeletePVar(playerid, "EnCheckPoint");
		_Mensaje(playerid, 5, "0", "Llegaste al destino marcado.");
		TogglePlayerAllDynamicCPs(playerid, true);
		DisablePlayerCheckpoint(playerid);
	}
	else if (GetPVarInt(playerid, "EnCheckPoint") == 2)
	{
		DeletePVar(playerid, "EnCheckPoint");
		DisablePlayerCheckpoint(playerid);
		TogglePlayerAllDynamicCPs(playerid, true);
		if (_Medic2Call[playerid] == 1)
		{
            _Medic2Call[playerid] = 0;
            _MedicAcept[playerid] = 999;
			_Mensaje(playerid, 4, "fcc1fd", "Llegaste al llamado de un medico.");
            return 1;
		}
		else if (_Bomb2Call[playerid] == 1)
		{
            _Bomb2Call[playerid] = 0;
            _BombAcept[playerid] = 999;
			_Mensaje(playerid, 4, "EF2F28", "Llegaste al llamado de un bombero.");
            return 1;
		}
	}
	else if (GetPVarInt(playerid, "EnCheckPoint") == 5)
	{
		DeletePVar(playerid, "EnCheckPoint");
		DisablePlayerCheckpoint(playerid);
		TogglePlayerAllDynamicCPs(playerid, true);
	}
	else if (GetPVarInt(playerid, "EnCheckPoint") == 6) //robo de coches
	{
		if(checkcoche[playerid] == 414)
		{

			if(!_enPos(playerid,10, 956.7439, -1530.1982, 13.3456)) return ShowInfoForPlayer(playerid, "No estas en el lugar del pedido.", 2000);

			DeletePVar(playerid, "EnCheckPoint");
			DisablePlayerCheckpoint(playerid);
			TogglePlayerAllDynamicCPs(playerid, true);

			_Mensaje(playerid, 4, "FFFFFF", " Baja del vehiculo y vete del lugar.");
			_Mensaje(playerid, 4, "FFFFFF", " Posees 10 segundos antes que la policia sea avisada.");

			SetTimerEx("_roboVeh", 10000, false, "ii", playerid, vehicleid);

		}
	}
	if (Pedido[playerid] == 2)
	{
        if(!_enPos(playerid,10,2315.2449, 33.6971, 27.3995)) return ShowInfoForPlayer(playerid, "No estas en el lugar del pedido.", 2000);
        Pedido[playerid] = 0;
        if (RevisarDinero(playerid, 9000))
		{
            new objeto = 112;
           	if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
           	if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 400;}
           	else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 400;}
            GivePlayerCash(playerid, -9000, "400 gramos de crack");
            _Mensaje(playerid, 4, "FFFFFF", " Pagaste 9,000$ dolares por 400 gramos de crack.");
        	DisablePlayerCheckpoint(playerid);
        	TogglePlayerAllDynamicCPs(playerid, true);
        	new year, month, day;
			getdate(year, month, day);
			InfoJugador[playerid][jTiempos][10] = day;
			guardar_int_mysql("cuentas", "Tiempos11", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][10]);
			ActualizarManos(playerid);
        }
        return 1;
    }
	else if (Pedido[playerid] == 3)
	{
        if(!_enPos(playerid,10,1281.0088, 305.0030, 19.5505)) return ShowInfoForPlayer(playerid, "No estas en el lugar del pedido.", 2000);
        Pedido[playerid] = 0;
        if (RevisarDinero(playerid, 10000))
		{
            new objeto = 111;
           	if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
           	if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 500;}
           	else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 500;}
            GivePlayerCash(playerid, -10000, "500 gramos de cocaina");
            _Mensaje(playerid, 4, "FFFFFF", " Pagaste 10,000$ dolares por 500 gramos de cocaina.");
        	DisablePlayerCheckpoint(playerid);
        	TogglePlayerAllDynamicCPs(playerid, true);
        	new year, month, day;
			getdate(year, month, day);
			InfoJugador[playerid][jTiempos][10] = day;
			guardar_int_mysql("cuentas", "Tiempos11", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][10]);
			ActualizarManos(playerid);
        }
        return 1;
    }
	else if (Pedido[playerid] == 4)
	{
        if(!_enPos(playerid,10,2195.8572, -1971.3330, 13.7833)) return ShowInfoForPlayer(playerid, "No estas en el lugar del pedido.", 2000);
        Pedido[playerid] = 0;
    	if (RevisarDinero(playerid, 8000))
		{
            new objeto = 113;
           	if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
           	if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 180;}
           	else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 180;}
            GivePlayerCash(playerid, -8000, "heroina");
            _Mensaje(playerid, 4, "FFFFFF", " Pagaste 8,000$ dolares por heroina.");
        	DisablePlayerCheckpoint(playerid);
        	TogglePlayerAllDynamicCPs(playerid, true);
        	new year, month, day;
			getdate(year, month, day);
			InfoJugador[playerid][jTiempos][10] = day;
			guardar_int_mysql("cuentas", "Tiempos11", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][10]);
			ActualizarManos(playerid);
        }
        return 1;
    }
	else if (Pedido[playerid] == 5)
	{
        if(!_enPos(playerid,10,1667.4683, -2095.2505, 13.7241)) return ShowInfoForPlayer(playerid, "No estas en el lugar del pedido.", 2000);
        Pedido[playerid] = 0;
        if (RevisarDinero(playerid, 5000)) {
            new objeto = 114;
           	if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
           	if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 200;}
           	else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 200;}
            GivePlayerCash(playerid, -5000, "lsd");
            _Mensaje(playerid, 4, "FFFFFF", " Pagaste 5,000$ dolares por lsd.");
        	DisablePlayerCheckpoint(playerid);
        	TogglePlayerAllDynamicCPs(playerid, true);
        	new year, month, day;
			getdate(year, month, day);
			InfoJugador[playerid][jTiempos][10] = day;
			guardar_int_mysql("cuentas", "Tiempos11", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][10]);
			ActualizarManos(playerid);
        }
        return 1;
    }
	else if (Pedido[playerid] == 6)
	{
        if(!_enPos(playerid,10,2494.1326, -1464.6361, 24.0107)) return ShowInfoForPlayer(playerid, "No estas en el lugar del pedido.", 2000);
        Pedido[playerid] = 0;
        if (RevisarDinero(playerid, 2200)) {
            new objeto = 79;
           	if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
           	if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 20;}
           	else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 20;}
            GivePlayerCash(playerid, -2200, "20 semillas de marihuana");
            _Mensaje(playerid, 4, "FFFFFF", " Pagaste 2,200$ dolares por 20 semillas de marihuana.");
        	DisablePlayerCheckpoint(playerid);
        	TogglePlayerAllDynamicCPs(playerid, true);
        	new year, month, day;
			getdate(year, month, day);
			InfoJugador[playerid][jTiempos][10] = day;
			guardar_int_mysql("cuentas", "Tiempos11", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][10]);
			ActualizarManos(playerid);
        }
        return 1;
    }
	if (_enPos(playerid, 2.0, 2191.6272,-2242.1196,14.5839) || _enPos(playerid, 2.0, 2198.3936,-2235.2734,14.5839) || _enPos(playerid, 2.0, 2205.3013,-2228.4355,14.5839))//tomar caja (carguero)
	{
		if (IsPlayerInAnyVehicle(playerid)) return ShowInfoForPlayer(playerid, "No puedes hacer esto en un vehiculo.", 2000);
		DisablePlayerCheckpoint(playerid);
		GameTextForPlayer(playerid, "~g~Bajando carga...", 9000, 3);
		SetPVarInt(playerid, "HaciendoCarga", 1);
		TogglePlayerControllable(playerid, 0);
		SetPVarInt(playerid, "Congelado", 1);
		SetTimerEx("BajarCarga", 10000, 0, "d", playerid);
		_Mensaje(playerid, 2, "0", "Espera mientras bajas la carga.");
	}
	if (_enPos(playerid, 2.0, 2231.3271, -2284.2815, 14.3955))//dejar caja (carguero)
	{
		if (IsPlayerInAnyVehicle(playerid)) return ShowInfoForPlayer(playerid, "No puedes hacer esto en un vehiculo.", 2000);
		if (GetPVarInt(playerid, "TeleportTrabajo1") != 0) { Detectar_TT(playerid, 1); return 1; }

		InfoJugador[playerid][jCargas]++;
		InfoJugador[playerid][jHabilidad1][4]++;
		guardar_int_mysql("cuentas", "Cargas", InfoJugador[playerid][jID], InfoJugador[playerid][jCargas]);
		guardar_int_mysql("cuentas", "Habilidad1_5", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][4]);
		GameTextForPlayer(playerid, "~g~Bajando carga...", 9000, 3);
		SetPVarInt(playerid, "HaciendoCarga", 1);
		TogglePlayerControllable(playerid, 0);
		SetPVarInt(playerid, "Congelado", 1);
		SetTimerEx("EntregaCarga", 10000, 0, "d", playerid);
	}
	if (_enPos(playerid, 3.0, 1867.4004,-1851.4243,13.5784))//dejar muebles (carpintero)
	{
		if (IsPlayerInAnyVehicle(playerid)) return ShowInfoForPlayer(playerid, "No puedes hacer esto en un vehiculo.", 2000);
		DisablePlayerCheckpoint(playerid);
		InfoJugador[playerid][jMuebles]++;
		InfoJugador[playerid][jHabilidad1][5]++;
		guardar_int_mysql("cuentas", "Muebles", InfoJugador[playerid][jID], InfoJugador[playerid][jMuebles]);
		guardar_int_mysql("cuentas", "Habilidad1_6", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][5]);
		SetPVarInt(playerid, "MueblesCreados", 0);
		SetPVarInt(playerid, "HaciendoMueble", 0);
		SetPVarInt(playerid, "TomoCarpintero", 1);
		SetPVarInt(playerid, "TrabajandoC", 0);
		if (IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
		if (IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
		SetPlayerAttachedObject(playerid, 9, 18635, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		ApplyAnimation(playerid, "PED", "IDLE_tired", 4.1, 1, 0, 0, 0, 1500, 1);
	}
	if (_enPos(playerid, 5.5, -422.8372, -1767.0865, 5.1262))//dejar troncos (Aserrador)
	{
		if (IsPlayerInAnyVehicle(playerid)) return ShowInfoForPlayer(playerid, "No puedes hacer esto en un vehiculo.", 2000);
		DisablePlayerCheckpoint(playerid);
		new tronc = Random(2, 5);
		InfoJugador[playerid][jTroncos] += tronc;
		InfoJugador[playerid][jHabilidad1][6]++;
		guardar_int_mysql("cuentas", "Troncos", InfoJugador[playerid][jID], InfoJugador[playerid][jTroncos]);
		guardar_int_mysql("cuentas", "Habilidad1_7", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][6]);
		SetPVarInt(playerid, "TrabajandoL", 1);
		SetPVarInt(playerid, "HaciendoMueble", 0);
		SetPVarInt(playerid, "TroncosCreados", 0);
		if (IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
		ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);
	}
	if (GetPVarInt(playerid, "TipoDroga") > 0) {
		if (GetPVarInt(playerid, "TeleportTafricante") != 0) { Detectar_TT(playerid, 3); return 1; }
		if (!_Pdrogas(playerid)) {
			DeletePVar(playerid, "TipoDroga");
			InfoJugador[playerid][jPaquetes] = 0;
			DisablePlayerCheckpoint(playerid);
			_Mensaje(playerid, 4, "ff0000", "Entraste a un checkpoint erroneo. No se completo la entrega.");
			return 1;
		}
		DisablePlayerCheckpoint(playerid);
		new pagai, pagat[32], level = InfoJugador[playerid][jHabilidad2][1];
		if (GetPVarInt(playerid, "TipoDroga") == 1) { //- Marihuana
			if (level == 1) pagai = 110;
    		else if (level == 2) pagai = 120;
    		else if (level == 3) pagai = 150;
    		else if (level == 4) pagai = 180;
    		else if (level == 5) pagai = 230;
			pagat = "marihuana";
		} else if (GetPVarInt(playerid, "TipoDroga") == 2) { //- Crack
			if (level == 1) pagai = 106;
    		else if (level == 2) pagai = 130;
    		else if (level == 3) pagai = 150;
    		else if (level == 4) pagai = 180;
    		else if (level == 5) pagai = 240;
			pagat = "crack";
		} else if (GetPVarInt(playerid, "TipoDroga") == 3) { //- Heroina
			if (level == 1) pagai = 104;
    		else if (level == 2) pagai = 114;
    		else if (level == 3) pagai = 130;
    		else if (level == 4) pagai = 150;
    		else if (level == 5) pagai = 170;
			pagat = "heroina";
		} else if (GetPVarInt(playerid, "TipoDroga") == 4) { //- lsd
			if (level == 1) pagai = 118;
    		else if (level == 2) pagai = 140;
    		else if (level == 3) pagai = 150;
    		else if (level == 4) pagai = 170;
    		else if (level == 5) pagai = 190;
			pagat = "lsd";
		} else if (GetPVarInt(playerid, "TipoDroga") == 5) { //- cocaina
			if (level == 1) pagai = 107;
    		else if (level == 2) pagai = 130;
    		else if (level == 3) pagai = 170;
    		else if (level == 4) pagai = 190;
    		else if (level == 5) pagai = 240;
			pagat = "cocaina";
		}
		pagai = pagai*3;
		GivePlayerCash(playerid, pagai, "pago traficante");
		new string[128];
		_Mensaje(playerid, 4, "000000", "================================================");
		format(string, sizeof string, "* Realizaste la entrega de {b00000}%s{ffffff} con exito.", pagat), _Mensaje(playerid, 4, "ffffff", string);
		format(string, sizeof string, "** Te pagamos por el pedido {00c200}$%d{ffffff} dolares.", pagai), _Mensaje(playerid, 4, "ffffff", string);
		_Mensaje(playerid, 4, "000000", "================================================");
        DeletePVar(playerid, "TipoDroga");
        InfoJugador[playerid][jPaquetes] = 0;
        InfoJugador[playerid][jHabilidad1][1]++;
        InfoJugador[playerid][jTiempos][6] = 3;
		guardar_int_mysql("cuentas", "Tiempos7", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][6]);
		guardar_int_mysql("cuentas", "Habilidad1_2", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][1]);
		TogglePlayerAllDynamicCPs(playerid, true);
        return 1;
    }
	if (_enPos(playerid, 6.0, 1641.1007,704.8128,10.8203)) { //- Dejar carga | Camionero
		if (GetPVarInt(playerid, "TeleportCamionero") != 0) { Detectar_TT(playerid, 4); return 1; }
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) { return _Mensaje(playerid, 4, "ADC3E7", "{90C3D4}>]{ffffff} Debes estar dentro del vehiculo."); }
		if (_CamVeh[playerid] != INVALID_VEHICLE_ID && vehicleid != _CamVeh[playerid]) { return _Mensaje(playerid, 4, "ADC3E7", "{90C3D4}>]{ffffff} No te encuentras en tu vehiculo de camionero, buscalo y traelo."); }
		DisablePlayerCheckpoint(playerid);
		new Float: VehHP;
		GetVehicleHealth(vehicleid, VehHP);
		new pagac, pagai, level = InfoJugador[playerid][jHabilidad2][0];
  		if(GetVehicleModel(vehicleid) == 413)
		  {
			if (level == 1) pagac = 980, pagai = 912;
    		else if (level == 2) pagac = 1250, pagai = 1180;
    		else if (level == 3) pagac = 1310, pagai = 1250;
    		else if (level == 4) pagac = 1395, pagai = 1300;
    		else if (level == 5) pagac = 1500, pagai = 1410;
		} else if(GetVehicleModel(vehicleid) == 456) {
		    if (level == 3) pagac = 2500, pagai = 1980;
    		else if (level == 4) pagac = 2680, pagai = 2680;
    		else if (level == 5) pagac = 3100, pagai = 3100;
		}
		new Percent_damage = floatround(VehHP/10), string[128];
		pagai -= (300-(Percent_damage*3));
		if(pagai > 1001)
		{
			format(string, sizeof string, "Administracion: %s ha sido kickeado por el anticheat, Razon:[Repair car en camionero]", NombreRJugador(playerid));
			MensajeAdmin(string);
		    format(string, sizeof string, "Registros: %s ha sido bloqueado, dinero %d$.", NombreRJugador(playerid), pagai);
			_Expulsar(playerid, 0, "Repair car en camionero");
		    return 1;
		}
		DineroEstado -= pagai;
		ActualizarEst();
		GivePlayerCash(playerid, pagai, "pago camionero");
		_Mensaje(playerid, 4, "000000", "================================================");
		format(string, sizeof string, "* Realizaste la entrega con exito. Pago inicial: {ADC3E7}%d{ffffff}.", pagac), _Mensaje(playerid, 4, "ffffff", string);
		format(string, sizeof string, "** Los descuentos por los daños del vehiculo fueron de {b00000}%d{ffffff}.", (300-(Percent_damage*3)) ), _Mensaje(playerid, 4, "ffffff", string);
		format(string, sizeof string, "*** El pago final por la entrega es de {00c200}%d{ffffff}.", pagai), _Mensaje(playerid, 4, "ffffff", string);
		_Mensaje(playerid, 4, "000000", "================================================");
		_CamVeh[playerid] = INVALID_VEHICLE_ID;
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		DeletePVar(playerid, "TipoCarga");
		InfoJugador[playerid][jHabilidad1][0]++;
		guardar_int_mysql("cuentas", "Habilidad1_1", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][0]);
        TogglePlayerAllDynamicCPs(playerid, true);
		return 1;
	}

	if (GetPVarInt(playerid, "TipoCarga") > 0) {
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) { return _Mensaje(playerid, 4, "ADC3E7", "*{ffffff} Debes estar dentro del vehiculo."); }
		if (_CamVeh[playerid] != INVALID_VEHICLE_ID && vehicleid != _CamVeh[playerid]) { return _Mensaje(playerid, 4, "ADC3E7", "*{ffffff} No te encuentras en tu vehiculo de camionero, buscalo y traelo."); }
		if (GetPVarInt(playerid, "TeleportCamionero") != 0) { Detectar_TT(playerid, 4); return 1; }
		if (!_Pentregas(playerid))
		{
			_CamionCancel(playerid);
			_Mensaje(playerid, 4, "ff0000", "Entraste a un checkpoint erroneo. No se completo la entrega.");
			return 1;
		}
		_Contenido[vehicleid] = 0;
		_Mensaje(playerid, 4, "F8D48C", "Entregaste la carga con exito, devuelve el vehiculo para la paga.");
		DisablePlayerCheckpoint(playerid);
		InfoJugador[playerid][jTiempos][9] += 1;
		guardar_int_mysql("cuentas", "Tiempos10", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][9]);
		SetPlayerCheckpoint(playerid, 1641.1007,704.8128,10.8203, 5);
		SetPVarInt(playerid, "EnCheckPoint", 5);
		GameTextForPlayer(playerid, "~r~Lugar: ~w~Randolph Industrial Estate", 5000, 1);
		if(GetVehicleModel(vehicleid) == 413)
		{
			SetPVarInt(playerid, "TeleportCamionero", 60);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTCAMIONERO);
		} else {
			SetPVarInt(playerid, "TeleportCamionero", 180);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTCAMIONERO);
		}
		return 1;
	}
	if (Es_job(playerid, 10) && EnModoTrabajo[playerid] == 10)
		{
			if (Granjero_Vehicle(carid) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
			{
				if (!EstaEnPuntosCosechas(playerid))
				{
					DisablePlayerCheckpoint(playerid);
					EnModoTrabajo[playerid] = 0;
					SetVehicleToRespawn(GetPlayerVehicleID(playerid));
					_Mensaje(playerid, 4, "ff0000", "Entraste a un checkpoint erroneo.");
					PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
					return 1;
				}
				if (InfoJugador[playerid][jCosechas] < 301)
				{
					if (GetPVarInt(playerid, "TeleportGranjero") != 0) { Detectar_TT(playerid, 5); return 1; }
					new cos = random(8);
					DisablePlayerCheckpoint(playerid);
					InfoJugador[playerid][jCosechas] += cos + 1;
					InfoJugador[playerid][jHabilidad1][7]++;
					guardar_int_mysql("cuentas", "Cosechas", InfoJugador[playerid][jID], InfoJugador[playerid][jCosechas]);
					guardar_int_mysql("cuentas", "Habilidad1_8", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][7]);
					SetPVarInt(playerid, "TeleportGranjero", 3);
					SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTGRANJERO);
					SetTimerEx("OtroGramo", 4000, false, "i", playerid);
					return 1;
				}
				else
				{
					DisablePlayerCheckpoint(playerid);
					ShowInfoForPlayer(playerid, "Tienes mas de 300 gramos, no puedes llevar mas.", 2000);
					EnModoTrabajo[playerid] = 0;
					SetVehicleToRespawn(GetPlayerVehicleID(playerid));
					PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
					return 1;
				}
			} else {
				_Mensaje(playerid, 2, "0", "No estas en el tractor de granja.");
				EnModoTrabajo[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
				return 1;
			}
	}
	DisablePlayerCheckpoint(playerid);
	return 1;
}

funcion _roboVeh(jugador, coche)
{
	new Float: posx, Float: posy, Float: posz, location[MAX_ZONE_NAME], text_[128];
	GetVehiclePos(coche, posx, posy, posz);
	Get2DZone(location, MAX_ZONE_NAME, posx, posy, posz);
	format(text_, sizeof(text_), "CENTRAL: Informe reciente en %s, trafico del vehiculo %s.", location, GetVehicleName(coche));
	SendRadioFaction(1, C_COLORPOLICIA, text_);
	SendRadioFaction(3, C_COLORPOLICIA, text_);
	GivePlayerCash(jugador, 3000, "trafico de vehiculo");
	DestroyVehicle(cocherobo[jugador]);
	cocherobo[jugador] = 0;
    checkcoche[jugador] = 0;
    InfoJugador[jugador][jTiempos][17] = 360;
	guardar_int_mysql("cuentas", "Tiempos18", InfoJugador[jugador][jID], InfoJugador[jugador][jTiempos][17]);
    _Mensaje(jugador, 4, "A7CE00", "El camion fue entregado con exito, recibiste 3.000$ por el.");
    if (InfoJugador[jugador][jHabilidad1][3] < 40) InfoJugador[jugador][jHabilidad1][3] += 3;
	guardar_int_mysql("cuentas", "Habilidad1_4", InfoJugador[jugador][jID], InfoJugador[jugador][jHabilidad1][3]);
	return 1;
}

funcion OtroGramo(playerid)
{
	new randomize = random(sizeof(_Granjero));
	SetPlayerCheckpoint(playerid, _Granjero[randomize][0], _Granjero[randomize][1], _Granjero[randomize][2], 5.0);
	SetPVarInt(playerid, "EnCheckPoint", 5);
}

funcion Detectar_TT(jugador, tipo)
{
	if (cheat_TPtrabajos != 0)
	{
		new string[256], trabajo[32];
		if (tipo == 1) trabajo = "Carguero";
		else if (tipo == 3) trabajo = "Traficante";
		else if (tipo == 4) trabajo = "Camionero";
		else if (tipo == 5) trabajo = "Granjero";
		else if (tipo == 6) trabajo = "Basurero";
	    format(string, sizeof string, "Administracion: %s fue expulsado. {E00000}Razon{ffffff}: TP (%s).", NombreRJugador(jugador), trabajo);
		MensajeAdmin(string);
		ShowPlayerDialog(jugador, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{FF0000}Advertencia", "{ffffff}El servidor te ha expulsado por posible teleport hack.", "Aceptar", "");
		SetTimerEx("TimerKICK", 2000, 0, "d", jugador);
		format(string, sizeof string, "Fue expulsado. Razon: TP (%s).", NombreRJugador(jugador), trabajo);
		AddRegistroAC(jugador, string);
	}
	return 1;
}

Float: GetVehicleSpeed(vehicleid)
{
	new Float:x,Float:y,Float:z;
	GetVehicleVelocity(vehicleid,x,y,z);
	return floatmul(VectorSize(x,y,z),170.0);
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	SetSyncTime(playerid, SYNC_TYPE_POS);
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if (IsPlayerNPC(playerid)) return 1;
	if (newstate <= 0 || newstate > 6)
	    for (new i = 0; i < MAX_SYNC_TYPES; ++i)
	        SetSyncTime (playerid, i);
	//vehicle teleport
	if (oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER)
	{
		if (cheat_Vehicle1teleport != 0)
		{
			if (GetTickCount() - CarTick[playerid] < 300) CheatDetected(playerid, "Vehicle teleport (type 1)", 2);
			CarTick[playerid] = GetTickCount();
		}
	}
	//
	new string[128], engine, lights, alarm, doors, bonnet, boot, objective;
	if (newstate == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if (vehicle_rent_owner[vehicleid] != INVALID_PLAYER_ID && vehicle_rent_owner[vehicleid] != playerid)
		{
			ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puede abordar el auto de alquiler de otra persona.");
			return RemovePlayerFromVehicle(playerid);
		}
		TiempoCar[vehicleid] = 0;
		new Float:vvida;
		GetVehicleHealth(vehicleid, vvida);
		if (IsABike(vehicleid) && IsVehicleHaveFuel(vehicleid))
		{
			Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vDL] == vehicleid)
			{
				if (vvida < 350.0)
				{
					ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Vehiculo averiado, lo mejor seria llamar un mecanico o comprar piezas de recambio.");
					return RemovePlayerFromVehicleEx(playerid);
				}
				/*if (llaves_vehiculo(playerid, InfoVehiculo[v][vDL]) == -1)
				{
					SetTimerEx("EnMotoPerro", 500, false, "i", playerid);
					ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres propietario de este vehiculo.");
					new stringR[128];
					format(stringR, sizeof(stringR), "Administracion: %s(ID:%d) fue expulsado del coche por el AntiCheat.", NombreRJugador(playerid), playerid);
					MensajeAdmin(stringR);
					return RemovePlayerFromVehicleEx(playerid);
				}*/
				if (!Es_Banda(playerid, 1) && LSPD_Veh(vehicleid))
				{
					SetTimerEx("EnMotoPerro", 500, false, "i", playerid);
					ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes las llaves de este vehiculo.");
					new stringR[128];
					format(stringR, sizeof(stringR), "Administracion: %s(ID:%d) fue expulsado del coche lspd, no es policia.", NombreRJugador(playerid), playerid);
					MensajeAdmin(stringR);
					return RemovePlayerFromVehicleEx(playerid);
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_DRIVER)
 	{
		LastVehicle[playerid] = GetPlayerVehicleID(playerid);
  	}
 	else if(oldstate == PLAYER_STATE_DRIVER)
  	{
		LastVehicle[playerid] = 0;
 	}
	if (IsPlayerNPC(playerid))
	{
		if (newstate == PLAYER_STATE_SPECTATING)
		{
			TogglePlayerSpectating(playerid, false);
		}
		return 1;
	}
	if (SpectadorID[playerid] != 999)
	{
		new spectator = SpectadorID[playerid];
		if (!IsPlayerConnected(spectator))
		{
			SpectadorID[playerid] = 999;
			Spectate[spectator] = 999;
		}
		if (newstate == PLAYER_STATE_DRIVER && InfoJugador[spectator][jAdmin] >= 1 || newstate == PLAYER_STATE_PASSENGER && InfoJugador[spectator][jAdmin] >= 1)
		{
			TogglePlayerSpectating(spectator, true);
			new carid = GetPlayerVehicleID(playerid);
			PlayerSpectateVehicle(spectator, carid);
			SetPVarInt(spectator, "SpecState", newstate);
		}
		else if (newstate == PLAYER_STATE_ONFOOT && InfoJugador[spectator][jAdmin] >= 1)
		{
			TogglePlayerSpectating(spectator, true);
			PlayerSpectatePlayer(spectator, playerid);
			SetPlayerInterior(spectator, GetPlayerInterior(playerid));
			SetPVarInt(spectator, "SpecState", newstate);
		}
	}
	if (oldstate == PLAYER_STATE_DRIVER)
	{
		PlayerTextDrawHide(playerid, TD_Velocimetro[playerid][0]);
		PlayerTextDrawHide(playerid, TD_Velocimetro[playerid][1]);
		new lastveh = LastVehicle[playerid];
		if(PlayerToPoint(100.0,playerid,1896.9608,-1877.7721,13.5075))
		{
		    Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vDL] == lastveh)
			{
				TiempoCar[lastveh]++;
				ZonaRespawn[lastveh] = 1;
			}
		}
		else if(PlayerToPoint(100.0,playerid,1653.6783,725.4081,10.8203))
		{
		    Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vDL] == lastveh)
			{
				TiempoCar[lastveh]++;
				ZonaRespawn[lastveh] = 2;
			}
		}
	}
	if (newstate == PLAYER_STATE_ONFOOT)
	{
		if (escuchandop[playerid] == 1)
		{
			StopAudioStreamForPlayer(playerid);
			escuchandop[playerid] = 0;
			estacionp[playerid] = 0;
		}
		if (EnModoTrabajo[playerid] == 10)
		{
			PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
			DisablePlayerCheckpoint(playerid);
			EnModoTrabajo[playerid] = 0;
			_Mensaje(playerid, 2, "0", "Dejaste de cosechar.");
			if (Granjero_Vehicle(GetPlayerVehicleID(playerid))) { SetVehicleToRespawn(GetPlayerVehicleID(playerid)); }
		}
	}
	if (newstate == PLAYER_STATE_PASSENGER)
	{
	    veh_asiento[playerid] = GetPlayerVehicleSeat(playerid);
		SetSyncTime(playerid, SYNC_TYPE_POS);
		if (estacionveh[GetPlayerVehicleID(playerid)] != 0)
		{
			new station[126], name[126];
			switch (estacionveh[GetPlayerVehicleID(playerid)])
			{
				case 1: format(station, sizeof(station), "http://54house.stream-balancer.de:80") && format(name, sizeof(name), "54 House");
				case 2: format(station, sizeof(station), "http://184.154.94.194:8028/listen.pls") && format(name, sizeof(name), "Top Latino");
				case 3: format(station, sizeof(station), "http://148.251.91.15:7004") && format(name, sizeof(name), "Dubbase.FM");
				case 4: format(station, sizeof(station), "http://listen.shoutcast.com/reggaetonhits.m3u") && format(name, sizeof(name), "Reggae Hits");
				case 5: format(station, sizeof(station), "http://216.230.231.122:8000/MP3128") && format(name, sizeof(name), "MBradio.FM");
				case 6: format(station, sizeof(station), "http://listen.shoutcast.com/113fmtheeagle.m3u") && format(name, sizeof(name), "113 FM TEagle");
				case 7: format(station, sizeof(station), "http://108.61.73.119:8028") && format(name, sizeof(name), "181 FM");
				case 8: format(station, sizeof(station), "http://173.244.215.163:8380") && format(name, sizeof(name), "Soft Rock Cafe");
				case 9: format(station, sizeof(station), "http://69.4.232.118:80") && format(name, sizeof(name), "HardRadio.com");
				case 10: format(station, sizeof(station), "http://64.202.98.133:2010") && format(name, sizeof(name), "Aural Moon");
				case 11: format(station, sizeof(station), "http://50.117.115.211:80") && format(name, sizeof(name), "Idobi Radio");
				case 12: format(station, sizeof(station), "http://108.61.30.179:4010") && format(name, sizeof(name), "www.Hot108.com");
				case 13: format(station, sizeof(station), "http://50.7.64.226:80/frisky_mp3_hi") && format(name, sizeof(name), "Sensacion Peru");
				case 14: format(station, sizeof(station), "http://5.135.223.251:9000") && format(name, sizeof(name), "BluePoint");
				case 15: format(station, sizeof(station), "http://62.210.209.179:8030/stream") && format(name, sizeof(name), "PaganMetalRadio");
				case 16: format(station, sizeof(station), "http://198.211.102.165:8000") && format(name, sizeof(name), "Dirty Beats Radio 24/7");
				case 17: format(station, sizeof(station), "http://somafm.com/tags.pls") && format(name, sizeof(name), "The Trip");
				case 18: format(station, sizeof(station), "http://streaming.latina101.com.ar/listen.pls") && format(name, sizeof(name), "Latina FM (Arg)");
				case 19: format(station, sizeof(station), "http://s3.voscast.com:8002/;.m3u") && format(name, sizeof(name), "Amor latino");
				case 20: format(station, sizeof(station), "http://listen.radionomy.com/hotmixradio-hiphop-128.m3u") && format(name, sizeof(name), "Hotmixradio");
				case 21: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=139278") && format(name, sizeof(name), "Naxi Cafe Radio");
				case 22: format(station, sizeof(station), "http://listen.shoutcast.com:80/RadioHunter-TheHitzChannel") && format(name, sizeof(name), "Radio Hunter");
				case 23: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=654138") && format(name, sizeof(name), "181.0 - BCEver");
			}
			StopAudioStreamForPlayer(playerid);
			estacionp[playerid] = EscucharMusica(playerid, station);
			escuchandop[playerid] = 1;
			format(string, sizeof string, "> Estacion de radio: {FFFFFF}%s.", name);
			_Mensaje(playerid, 4, "00A2FF", string);
		}
		if(GetPVarInt(playerid, "_Ejcet") >= 1)
		{
			SetPVarInt(playerid, "_Ejcet", 0);
			RemovePlayerFromVehicle( playerid );
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y, Z+2);
			if(GetPVarInt(playerid, "EnCrack") == 1)
			{
				TogglePlayerControllable(playerid, 0);
				ClearAnimations(playerid);
				if (InfoJugador[playerid][jAbatido] != 0)
				{
					ApplyAnimation(playerid, "SWEET", "sweet_injuredloop", 4.0, 1, 0, 0, 1, 0, 1);
					ApplyAnimation(playerid, "SWEET", "sweet_injuredloop", 4.0, 1, 0, 0, 1, 0, 1);
				}
				else
				{
					ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
				}
			}
		}
		new name[50 + MAX_PLAYER_NAME];
		GetPlayerName(playerid, name, sizeof(name));
		new vehicleid = GetPlayerVehicleID(playerid);
		QuienManejo[playerid] = vehicleid;
	}
	if (newstate == PLAYER_STATE_DRIVER)
	{
	    if(Camionero_Vehicle(GetPlayerVehicleID(playerid)))
	    {
	        _MarcarPos(playerid, 1710.1189,770.0330,10.8203, "Te fue marcado la zona de carga en el mini-mapa [GPS].");
		}
		veh_asiento[playerid] = GetPlayerVehicleSeat(playerid);
		if (estacionveh[GetPlayerVehicleID(playerid)] != 0)
		{
			new station[126], name[126];
			switch (estacionveh[GetPlayerVehicleID(playerid)])
			{
				case 1: format(station, sizeof(station), "http://54house.stream-balancer.de:80") && format(name, sizeof(name), "54 House");
				case 2: format(station, sizeof(station), "http://184.154.94.194:8028/listen.pls") && format(name, sizeof(name), "Top Latino");
				case 3: format(station, sizeof(station), "http://148.251.91.15:7004") && format(name, sizeof(name), "Dubbase.FM");
				case 4: format(station, sizeof(station), "http://listen.shoutcast.com/reggaetonhits.m3u") && format(name, sizeof(name), "Reggae Hits");
				case 5: format(station, sizeof(station), "http://216.230.231.122:8000/MP3128") && format(name, sizeof(name), "MBradio.FM");
				case 6: format(station, sizeof(station), "http://listen.shoutcast.com/113fmtheeagle.m3u") && format(name, sizeof(name), "113 FM TEagle");
				case 7: format(station, sizeof(station), "http://108.61.73.119:8028") && format(name, sizeof(name), "181 FM");
				case 8: format(station, sizeof(station), "http://173.244.215.163:8380") && format(name, sizeof(name), "Soft Rock Cafe");
				case 9: format(station, sizeof(station), "http://69.4.232.118:80") && format(name, sizeof(name), "HardRadio.com");
				case 10: format(station, sizeof(station), "http://64.202.98.133:2010") && format(name, sizeof(name), "Aural Moon");
				case 11: format(station, sizeof(station), "http://50.117.115.211:80") && format(name, sizeof(name), "Idobi Radio");
				case 12: format(station, sizeof(station), "http://108.61.30.179:4010") && format(name, sizeof(name), "www.Hot108.com");
				case 13: format(station, sizeof(station), "http://50.7.64.226:80/frisky_mp3_hi") && format(name, sizeof(name), "Sensacion Peru");
				case 14: format(station, sizeof(station), "http://5.135.223.251:9000") && format(name, sizeof(name), "BluePoint");
				case 15: format(station, sizeof(station), "http://62.210.209.179:8030/stream") && format(name, sizeof(name), "PaganMetalRadio");
				case 16: format(station, sizeof(station), "http://198.211.102.165:8000") && format(name, sizeof(name), "Dirty Beats Radio 24/7");
				case 17: format(station, sizeof(station), "http://somafm.com/tags.pls") && format(name, sizeof(name), "The Trip");
				case 18: format(station, sizeof(station), "http://streaming.latina101.com.ar/listen.pls") && format(name, sizeof(name), "Latina FM (Arg)");
				case 19: format(station, sizeof(station), "http://s3.voscast.com:8002/;.m3u") && format(name, sizeof(name), "Amor latino");
				case 20: format(station, sizeof(station), "http://listen.radionomy.com/hotmixradio-hiphop-128.m3u") && format(name, sizeof(name), "Hotmixradio");
				case 21: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=139278") && format(name, sizeof(name), "Naxi Cafe Radio");
				case 22: format(station, sizeof(station), "http://listen.shoutcast.com:80/RadioHunter-TheHitzChannel") && format(name, sizeof(name), "Radio Hunter");
				case 23: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=654138") && format(name, sizeof(name), "181.0 - BCEver");
			}
			StopAudioStreamForPlayer(playerid);
			estacionp[playerid] = EscucharMusica(playerid, station);
			escuchandop[playerid] = 1;
			format(string, sizeof string, "> Estacion de radio: {FFFFFF}%s - Puedes cambiar la emisora. {00C2FF}'/estereo'.", name);
			_Mensaje(playerid, 4, "00A2FF", string);
		}
		new newcar = GetPlayerVehicleID(playerid);
		GetVehicleParamsEx(newcar, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(newcar, arr_Engine {newcar}, lights, alarm, doors, bonnet, boot, objective);
		if ((engine == VEHICLE_PARAMS_UNSET || engine == VEHICLE_PARAMS_ON) && GetVehicleModel(newcar) != 509 && GetVehicleModel(newcar) != 481 && GetVehicleModel(newcar) != 510)
		{
			new gformat[190];
			if (!EstaEnBicis(newcar))  format(gformat, sizeof gformat, "%03d", floatround(GetVehicleSpeed(newcar)));
			PlayerTextDrawSetString(playerid, TD_Velocimetro[playerid][0], gformat);
			PlayerTextDrawShow(playerid, TD_Velocimetro[playerid][0]);
			if (!EstaEnBicis(newcar)) format(gformat, sizeof gformat, "%0.2d", GasolinaInicialVeh[newcar]);
			PlayerTextDrawSetString(playerid, TD_Velocimetro[playerid][1], gformat);
			PlayerTextDrawShow(playerid, TD_Velocimetro[playerid][1]);
		}
		if (GetPVarInt(playerid, "_Ejcet") >= 1)
		{
			SetPVarInt(playerid, "_Ejcet", 0);
			RemovePlayerFromVehicle( playerid );
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y, Z+2);
			if(GetPVarInt(playerid, "EnCrack") == 1)
			{
				TogglePlayerControllable(playerid, 0);
				ClearAnimations(playerid);
				if (InfoJugador[playerid][jAbatido] != 0)
				{
					ApplyAnimation(playerid, "SWEET", "sweet_injuredloop", 4.0, 1, 0, 0, 1, 0, 1);
					ApplyAnimation(playerid, "SWEET", "sweet_injuredloop", 4.0, 1, 0, 0, 1, 0, 1);
				}
				else
				{
					ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
				}
			}
		}
        QuienManejo[playerid] = newcar;

		//
		new v = verificar_id_vehiculo(newcar);
		if (v != -1)
		{
			// propietario
			if (acceso_vehiculo(playerid, newcar) == 0)
			{
				format(string, sizeof string, "Tienes las llaves de este %s.", GetVehicleName(newcar));
				_Mensaje(playerid, 5, "0", string);
				GetVehicleParamsEx(newcar, engine, lights, alarm, doors, bonnet, boot, objective);
				if (engine == VEHICLE_PARAMS_OFF)
				{
					cmd_motor(playerid);
				}
				return 1;
			}
			return 1;
		}
	}
	if (oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER)
	{
		new newcar = GetPlayerVehicleID(playerid);
		QuienManejo[playerid] = newcar;
	}
	return 1;
}

funcion CercaDelWeon(Float:radi, playerid, playerid2) {
	new Float: fp_playerPos[3];
	GetPlayerPos(playerid2, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);
	if(_enPos(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(playerid2)) { return 1; }
	return 0;
}

stock MensajeVIP(color, string[]) {
    foreach(Player, i) {
        if((InfoJugador[i][jNivelVIP] >= 1 || InfoJugador[i][jAdmin] >= 1) && B_VIP[i] >= 1) {
            SendClientMessage(i, color, string);
        }
    }
}

stock MensajeYT(color, string[]) {
    foreach(Player, i) {
        if((InfoJugador[i][jYT] >= 1 || InfoJugador[i][jAdmin] >= 1) && B_YT[i] >= 1) {
            SendClientMessage(i, color, string);
        }
    }
}

stock _MensajeOOC(color, string[]) {
    foreach(Player, i) {
        if(!B_OOC[i]) {
            SendClientMessage(i, color, string);
        }
    }
}

stock _MensajeSAN(color, string[]) {
    foreach(Player, i) {
        if(!B_SAN[i]) {
			SendSplitMessage(i, color, string);
        }
    }
}

stock MensajeFaccion(facid, color, string[])
{
	foreach(Player, i)
	{
		if(InfoJugador[i][jFamMiembro] == facid || InfoJugador[i][jFamLider] == facid)
		{
			if(!B_Faccion[i])
			{
				SendClientMessage(i, color, string);
			}
		}
	}
}

stock MensajeAdmin(string[], color = 1) {
    foreach(Player, i) {
        if(InfoJugador[i][jAdmin] >= 2 && B_Admin[i] == 0) {
        	if(color == 1) SendClientMessage(i, 0xFFC900FF, string);
        	else if(color == 2) SendClientMessage(i, 0xFFC900FF, string);
        }
    }
    return 1;
}

stock MensajeEncargados(string[], color = 1) {
    foreach(Player, i) {
        if(InfoJugador[i][jAdmin] >= 4 && B_Admin[i] == 0) {
        	if(color == 1) SendClientMessage(i, 0xFFC900FF, string);
        	else if(color == 2) SendClientMessage(i, 0xFFC900FF, string);
        }
    }
    return 1;
}

stock MensajeAntiCheat(string[], color = 1) {
    foreach(Player, i) {
        if(InfoJugador[i][jAdmin] >= 2 && B_Admin[i] == 0) {
        	if(color == 1) SendClientMessage(i, 0xFFFF00FF, string);
        	else if(color == 2) SendClientMessage(i, 0xFFFF00FF, string);
        }
    }
    return 1;
}

stock MensajeAdmin2(string[]) {
    foreach(Player, i) {
        if(InfoJugador[i][jAdmin] >= 2 && B_Admin[i] == 0) {
       		SendClientMessage(i, C_ROJO, string);
        }
    }
    return 1;
}

stock MensajeAdmin3(string[]) {
    foreach(Player, i) {
        if(InfoJugador[i][jAdmin] >= 2 && B_Admin[i] == 0) {
       		SendClientMessage(i, 0xb3c3acFF, string);
        }
    }
    return 1;
}

stock SendAdminMessage(color, string[]) {
    for(new i = 0; i < MAX_PLAYERS; i++) {
        if(IsPlayerConnected(i)) {
            if(InfoJugador[i][jAdmin] >= 1 && B_Admin[i] == 0) {
                SendClientMessage(i, color, string);
            }
        }
    }
}

stock MessageEx(playerid_1, playerid_2, const color, const string[]) {
    SendClientMessage(playerid_1, color, string);
    SendClientMessage(playerid_2, color, string);
}

stock Float:GetPlayerDistanceToVehicle(playerid, vehicleid)
{
	new Float:PCoords[3], Float:VCoords[3];
	GetPlayerPos(playerid, PCoords[0], PCoords[1], PCoords[2]);
	GetVehiclePos(vehicleid, VCoords[0], VCoords[1], VCoords[2]);
	new Float:Distance[4];
	for(new n=0; n<3; n++)
	{

		Distance[n] = floatabs(PCoords[n]) - floatabs(VCoords[n]);
	}
	Distance[3] = floatsqroot((Distance[0] * Distance[0]) + (Distance[1] * Distance[1]) + (Distance[2] * Distance[2]));
	return Distance[3];
}


funcion BajarCarga(playerid) {
	DeletePVar(playerid, "Congelado");
	TogglePlayerControllable(playerid, 1);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 1, 0, 0, 1, 1, 1);
	SetPlayerAttachedObject(playerid, 9, 1221, 17, -0.028000, 0.424000, -0.049999, -10.499997, 97.500030, 1.200000, 0.446000, 0.249000, 0.490000);
	SetPlayerCheckpoint(playerid, 2231.3271, -2284.2815, 14.3955, 2.0);
	SetPVarInt(playerid, "EnCheckPoint", 5);
	_Mensaje(playerid, 2, "0", "Lleva la carga al tren.");
	SetPVarInt(playerid, "HaciendoCarga", 0);
	SetPVarInt(playerid, "TeleportTrabajo1", 3);
	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTTRABAJO1);
    return 1;
}

funcion EntregaCarga(playerid) {
	DeletePVar(playerid, "Congelado");
	TogglePlayerControllable(playerid, 1);
	new checkpoint = random(3);
	switch (checkpoint)
	{
		case 0: SetPlayerCheckpoint(playerid, 2191.6272,-2242.1196,14.5839, 2.0);
		case 1: SetPlayerCheckpoint(playerid, 2198.3936,-2235.2734,14.5839, 2.0);
		case 2: SetPlayerCheckpoint(playerid, 2205.3013,-2228.4355,14.5839, 2.0);
	}
	SetPVarInt(playerid, "EnCheckPoint", 5);
	_Mensaje(playerid, 2, "0", "Busca otra caja en el camion y traela.");
	SetPVarInt(playerid, "HaciendoCarga", 0);
	SetPVarInt(playerid, "TeleportTrabajo1", 3);
	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTTRABAJO1);
	if (IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	ApplyAnimation(playerid, "PED", "IDLE_tired", 4.1, 1, 0, 0, 0, 1500, 1);
    return 1;
}

new Float:X_Carga[3][3] =
{
	{1843.9279, -1863.0637, 13.4591}, //unity
	{1798.3921, -1441.8682, 13.3058}, //glen park
	{2092.6326, -1343.3174, 23.9050} //jefferson
};
new Float:A_Carga[3][3] =
{
	{2139.8669, -1207.1927, 23.9445}, //jefferson
	{1449.1597, -1149.7483, 23.8987}, //vinewood
	{486.9438, -1468.7220, 18.5618} //playa
};
new Float:B_Carga[3][3] =
{
	{2358.1895, -1472.5239, 23.7326},
	{1832.9298, -1403.4407, 13.3343},
	{1574.1155, -1286.5681, 17.3694}
};
new Float:C_Carga[3][3] =
{
	{788.4850, -1608.5558, 13.3503}, //playa
	{951.4890, -1366.0647, 13.2354}, //MTV
	{2400.4500, -1496.9219, 23.7326} //east
};
new Float:Ex_Carga[2][3] =
{
	{-2033.2224,-95.0304,35.5155},
	{2103.3979,2037.3856,11.1668}
};

stock lugar_(playerid, Float:x, Float:y, Float:z){
	TogglePlayerAllDynamicCPs(playerid, false);
	SetPlayerCheckpoint(playerid, x, y, z, 5);
	SetPVarFloat(playerid, "x23", x);
	SetPVarFloat(playerid, "x24", y);
	SetPVarFloat(playerid, "x25", z);
}

funcion _Encargo(playerid) {
	DeletePVar(playerid, "Congelado");
	TogglePlayerControllable(playerid, 1);
	new vehiculo = GetPlayerVehicleID(playerid), tipo = GetPVarInt(playerid, "TipoCarga"), lugarex = random(sizeof(Ex_Carga)),
	lugarx = random(sizeof(X_Carga)), lugara = random(sizeof(A_Carga)), lugarb = random(sizeof(B_Carga)), lugarc = random(sizeof(C_Carga));
	_Contenido[vehiculo] = tipo;
	_CamVeh[playerid] = vehiculo;
	new location[MAX_ZONE_NAME], tipo2[40];
	switch (tipo) {
		case 1: {
		    tipo2 = "productos de ropa";
			lugar_(playerid, A_Carga[lugara][0], A_Carga[lugara][1], A_Carga[lugara][2]);
			SetPVarInt(playerid, "TeleportCamionero", 40);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTCAMIONERO);
		}
		case 2: {
		    tipo2 = "productos generales";
			lugar_(playerid, X_Carga[lugarx][0], X_Carga[lugarx][1], X_Carga[lugarx][2]);
			SetPVarInt(playerid, "TeleportCamionero", 40);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTCAMIONERO);
		}
		case 3: {
		    tipo2 = "productos electronicos";
			lugar_(playerid, B_Carga[lugarb][0], B_Carga[lugarb][1], B_Carga[lugarb][2]);
			SetPVarInt(playerid, "TeleportCamionero", 40);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTCAMIONERO);
		}
		case 4: {
		    tipo2 = "productos de comida";
			lugar_(playerid, C_Carga[lugarc][0], C_Carga[lugarc][1], C_Carga[lugarc][2]);
			SetPVarInt(playerid, "TeleportCamionero", 40);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTCAMIONERO);
		}
		case 5: {
		    tipo2 = "mercancia grande";
			lugar_(playerid, Ex_Carga[lugarex][0], Ex_Carga[lugarex][1], Ex_Carga[lugarex][2]);
			SetPVarInt(playerid, "TeleportCamionero", 350);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTCAMIONERO);
		}
	}
	Get2DZone(location, MAX_ZONE_NAME, GetPVarFloat(playerid, "x23"), GetPVarFloat(playerid, "x24"), GetPVarFloat(playerid, "x25"));
	SetPVarInt(playerid, "EnCheckPoint", 5);
	new string[128];
	format(string, sizeof string, "El vehiculo fue cargado con %s, llevalos a %s.", tipo2, location);
	_Mensaje(playerid, 4, "ADC3E7", string);
	return 1;
}

Uso_Dop(string[], color, Float: radio, Float: x, Float: y, Float: z, vw, int)
{
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid))
	{
		if (!BigEar[playerid] && GetPlayerVirtualWorld(playerid) == vw && GetPlayerInterior(playerid) == int)
		{
			if (_enPos(playerid, radio / 16, x, y, z)) SendSplitMessage(playerid, color, string);
			else if (_enPos(playerid, radio / 8, x, y, z)) SendSplitMessage(playerid, color, string);
			else if (_enPos(playerid, radio / 4, x, y, z)) SendSplitMessage(playerid, color, string);
			else if (_enPos(playerid, radio / 2, x, y, z)) SendSplitMessage(playerid, color, string);
			else if (_enPos(playerid, radio, x, y, z)) SendSplitMessage(playerid, color, string);
		}
	}
	return 1;
}

// talleres mecanicos (07/11/2020)
IsTallerIn(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 10.0, 1943.9833, -1814.0374, 13.5441)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 10.0, 2510.7690, -1781.4368, 13.5629)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 10.0, 994.5331, -1378.2527, 13.2320)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 10.0, 429.7042, -1792.4181, 5.5991)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 10.0, 1800.0814, -2048.4607, 13.5773)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 10.0, 1844.48083, 913.94519, 10.27540)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid, 10.0, -2085.64795, -87.90515, 34.24590)) return 1;
	return 0;
}

NoEstaEnTaller(playerid)
{
    if (IsTallerIn(playerid) == 0) { (playerid, 0xccccccff, "* No estas en ningun taller mecanico."); return 1; }
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) { SendClientMessage(playerid, 0xccccccff, "* No estas dentro de un vehiculo como conductor."); return 1; }
	return 0;
}

new precioReparacion = 500;
new precioPintura = 200;
new precioGasolina = 150;
new precioHidraulica = 3000;
new precioLlantas = 2000;
new precioTuneo = 7000;

new ColorList[] =
{
	    0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
		0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
		0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
		0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
		0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
		0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
		0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
		0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
		0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
		0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
		0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
		0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
		0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF, 0x177517FF, 0x210606FF,
		0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF, 0xB7B7B7FF, 0x464C8DFF,
		0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF, 0x1E1D13FF, 0x1E1306FF,
		0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF, 0x992E1EFF, 0x2C1E08FF,
		0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF, 0x481A0EFF, 0x7A7399FF,
		0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF, 0x7B3E7EFF, 0x3C1737FF,
		0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF, 0x163012FF, 0x16301BFF,
		0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF, 0x2B3C99FF, 0x3A3A0BFF,
		0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF, 0x2C5089FF, 0x15426CFF,
		0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF, 0x995C52FF, 0x99581EFF,
		0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF, 0x96821DFF, 0x197F19FF,
		0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF, 0x8A653AFF, 0x732617FF,
		0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF, 0x561A28FF, 0x4E0E27FF,
		0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
	};

CountMecanicos()
{
	new count = 0;
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid) && MecanicoDuty[playerid] == 1)
	{
		count++;
	}
	return count;
}

Valid_Vehicle_Nitro(modelid)
{
    new idx = modelid - 400;
	if (0 <= idx <= 211)
	{
        if (vSync_VehicleInfo[idx][Nitro] == false)
		{
	    	return 0;
		}
		return 1;
	}
	return 0;
}

IsValidChangeName(const name[])
{
	if (!name[0] || strfind(name, "_") == -1)
	    return 0;

	else for (new i = 0, len = strlen(name); i != len; i ++) {
	    if ((i == 0) && (name[i] < 'A' || name[i] > 'Z'))
	        return 0;

		else if ((i != 0 && i < len  && name[i] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
		    return 0;

		else if ((name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z') && name[i] != '_' && name[i] != '.')
		    return 0;
	}
	return 1;
}

ceder_regalo(playerid)
{
	new gift = random(100), gformat[190];
	new money = Random(4000, 10000);
	switch (gift)
	{
		case 0..27:
		{
			GivePlayerCash(playerid, money, "cmd_regalo");
			SendClientMessageEx(playerid, 0xCCCC00FF, "*** Recibiste $%s dolares.", diner_coma(money));
		}
		case 28:
		{
			InfoJugador[playerid][jCoins]++;
			guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
			SendClientMessageEx(playerid, 0xCCCC00FF, "*** Recibiste 1 coin, ahora tienes %d coins.", InfoJugador[playerid][jCoins]);
			format(gformat, sizeof gformat, "%s recibio un coin.", InfoJugador[playerid][jNombre_Apellido]);
			Log("Registros/regalo.txt", gformat);
		}
		case 29..70:
		{
			GivePlayerCash(playerid, money, "cmd_regalo");
			SendClientMessageEx(playerid, 0xCCCC00FF, "*** Recibiste $%s dolares.", diner_coma(money));
		}
		case 71:
		{
			if (InfoJugador[playerid][jEspalda] != 0)
			{
				GivePlayerCash(playerid, money, "cmd_regalo");
				SendClientMessageEx(playerid, 0xCCCC00FF, "*** Recibiste $%s dolares.", diner_coma(money));
				return 1;
			}
			InfoJugador[playerid][jEspalda] = 24;
			InfoJugador[playerid][jEspaldaCant] = 40;
			PonerObjeto(playerid, 3, 24);
			guardar_int_mysql("cuentas", "Espalda", InfoJugador[playerid][jID], InfoJugador[playerid][jEspalda]);
			guardar_int_mysql("cuentas", "Cantidad_espalda", InfoJugador[playerid][jID], InfoJugador[playerid][jEspaldaCant]);
			SendClientMessageEx(playerid, 0xCCCC00FF, "*** Recibiste una Escopeta de combate.");
			format(gformat, sizeof gformat, "%s recibio escopeta de combate.", InfoJugador[playerid][jNombre_Apellido]);
			Log("Registros/regalo.txt", gformat);
		}
		case 72..99:
		{
			GivePlayerCash(playerid, money, "cmd_regalo");
			SendClientMessageEx(playerid, 0xCCCC00FF, "*** Recibiste $%s dolares.", diner_coma(money));
		}
	}
	return 1;
}

SetPlayerInventario(playerid, type)
{
	if (InfoJugador[playerid][jVerBolsillos] == 0) return 1;
	new gformat[170];
	//type: 1 (mostrar) 2 (remover) 3 (actualizar)
	switch (type)
	{
		case 1: //mostrar
		{
			if (Act_Inventario[playerid] != 0) return 1;
			PlayerTextDrawHide(playerid, InfoInferior[playerid]);
			PlayerTextDrawHide(playerid, InfoZona[playerid]);
			PlayerTextDrawHide(playerid, InfoZS[playerid]);
			Loop(x, 6, 0) { PlayerTextDrawHide(playerid, TD_PantallaHG[playerid][x]); }
			HidePlayerProgressBar(playerid, BarraSed[playerid]);
			HidePlayerProgressBar(playerid, BarraHambre[playerid]);
			TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
			TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
	 		//indice
			TextDrawShowForPlayer(playerid, INV_base);
			TextDrawShowForPlayer(playerid, INV_2base);
			//nombre
			format(gformat, sizeof gformat, "%s", InfoJugador[playerid][jNombre_Apellido]);
			PlayerTextDrawSetStringEx(playerid, INV_nombre[playerid], gformat);
			PlayerTextDrawShow(playerid, INV_nombre[playerid]);
			//skin
			PlayerTextDrawSetPreviewModel(playerid, INV_skin[playerid], InfoJugador[playerid][jSkin]);
			PlayerTextDrawShow(playerid, INV_skin[playerid]);
			//slots de inventario
			new old1 = 0, old2 = 1;
			Loop(id, 9, 0)
			{
				new obj = InfoJugador[playerid][jBolsillo][id], cantidad = InfoJugador[playerid][jBolsilloCant][id]; //esto es el numero cantidad
				if (InfoJugador[playerid][jBolsillo][id] != 0) // ocupada
				{
					//modelo
					PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][old1], 125);
					PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][old1], InfoInventario[obj][ModeloObjeto]);
					PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][old1], InfoInventario[obj][invRotX], InfoInventario[obj][invRotY], InfoInventario[obj][invRotZ], InfoInventario[obj][invZoom]);
					//unidades
					format(gformat, sizeof gformat, "%d", cantidad);
					PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][old2], gformat);
				}
				else // vacia
				{
					//modelo
					PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][old1], 1296911741);
					PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][old1], 346);
					PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][old1], 0.0, 0.0, 0.0, 0.0);
					//unidades
					PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][old2], "vacio");
				}
				PlayerTextDrawShow(playerid, INV_obj[playerid][old1]);
				PlayerTextDrawShow(playerid, INV_obj[playerid][old2]);
				old1 += 2;
				old2 += 2;
			}
			//mano izquierda
			if (InfoJugador[playerid][jManoIzquierda] != 0) // ocupada
			{
				new obj = InfoJugador[playerid][jManoIzquierda];
				new cantidad = InfoJugador[playerid][jManoIzquierdaCant];
				//modelo
				PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][18], 125);
				PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][18], InfoInventario[obj][ModeloObjeto]);
				PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][18], InfoInventario[obj][invRotX], InfoInventario[obj][invRotY], InfoInventario[obj][invRotZ], InfoInventario[obj][invZoom]);
				//unidades
				format(gformat, sizeof gformat, "%d", cantidad);
				PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][19], gformat);
			}
			else // vacia
			{
				//modelo
				PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][18], 1296911741);
				PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][18], 346);
				PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][18], 0.0, 0.0, 0.0, 0.0);
				//unidades
				PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][19], "vacio");
			}
			PlayerTextDrawShow(playerid, INV_obj[playerid][18]);
			PlayerTextDrawShow(playerid, INV_obj[playerid][19]);
			//espalda
			if (InfoJugador[playerid][jEspalda] != 0) // ocupada
			{
				new obj = InfoJugador[playerid][jEspalda];
				new cantidad = InfoJugador[playerid][jEspaldaCant];
				//modelo
				PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][20], 125);
				PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][20], InfoInventario[obj][ModeloObjeto]);
				PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][20], InfoInventario[obj][invRotX], InfoInventario[obj][invRotY], InfoInventario[obj][invRotZ], InfoInventario[obj][invZoom]);
				//unidades
				format(gformat, sizeof gformat, "%d", cantidad);
				PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][21], gformat);
			}
			else // vacia
			{
				//modelo
				PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][20], 1296911741);
				PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][20], 346);
				PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][20], 0.0, 0.0, 0.0, 0.0);
				//unidades
				PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][21], "vacio");
			}
			PlayerTextDrawShow(playerid, INV_obj[playerid][20]);
			PlayerTextDrawShow(playerid, INV_obj[playerid][21]);
			//mano derecha
			if (InfoJugador[playerid][jManoDerecha] != 0) // ocupada
			{
				new obj = InfoJugador[playerid][jManoDerecha];
				new cantidad = InfoJugador[playerid][jManoDerechaCant];
				//modelo
				PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][22], 125);
				PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][22], InfoInventario[obj][ModeloObjeto]);
				PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][22], InfoInventario[obj][invRotX], InfoInventario[obj][invRotY], InfoInventario[obj][invRotZ], InfoInventario[obj][invZoom]);
				//unidades
				format(gformat, sizeof gformat, "%d", cantidad);
				PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][23], gformat);
			}
			else // vacia
			{
				//modelo
				PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][22], 1296911741);
				PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][22], 346);
				PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][22], 0.0, 0.0, 0.0, 0.0);
				//unidades
				PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][23], "vacio");
			}
			PlayerTextDrawShow(playerid, INV_obj[playerid][22]);
			PlayerTextDrawShow(playerid, INV_obj[playerid][23]);
			TextDrawShowForPlayer(playerid, INV_info);
			TextDrawShowForPlayer(playerid, INV_2info);
			TextDrawShowForPlayer(playerid, INV_IeD);
			TextDrawShowForPlayer(playerid, INV_exit);
			SelectTextDraw(playerid, 0xd63417BB);
			Act_Inventario[playerid] = 1;
		}
		case 2: //remover
		{
			if (Act_Inventario[playerid] != 1) return 1;
			TextDrawHideForPlayer(playerid, INV_base);
			TextDrawHideForPlayer(playerid, INV_2base);
			TextDrawHideForPlayer(playerid, INV_info);
			TextDrawHideForPlayer(playerid, INV_2info);
			TextDrawHideForPlayer(playerid, INV_IeD);
			TextDrawHideForPlayer(playerid, INV_exit);
			PlayerTextDrawHide(playerid, INV_nombre[playerid]);
			Loop(x, 24, 0) { PlayerTextDrawHide(playerid, INV_obj[playerid][x]); }
			PlayerTextDrawHide(playerid, INV_skin[playerid]);
			Act_Inventario[playerid] = 0;
			Loop(x, 6, 0) { PlayerTextDrawShow(playerid, TD_PantallaHG[playerid][x]); }
			ShowPlayerProgressBar(playerid, BarraExp[playerid]);
			ShowPlayerProgressBar(playerid, BarraSed[playerid]);
			ShowPlayerProgressBar(playerid, BarraHambre[playerid]);
			TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
			TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
			PlayerTextDrawShow(playerid, InfoInferior[playerid]);
			PlayerTextDrawShow(playerid, InfoZona[playerid]);
			Actualizar(playerid);
		}
		case 3: //actualizar
		{
			if (Act_Inventario[playerid] != 0)
			{
				PlayerTextDrawHide(playerid, InfoInferior[playerid]);
				Loop(x, 6, 0) { PlayerTextDrawHide(playerid, TD_PantallaHG[playerid][x]); }
				HidePlayerProgressBar(playerid, BarraExp[playerid]);
				HidePlayerProgressBar(playerid, BarraSed[playerid]);
				HidePlayerProgressBar(playerid, BarraHambre[playerid]);
				TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
		     	TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
				Loop(x, 24, 0) { PlayerTextDrawHide(playerid, INV_obj[playerid][x]); }
				PlayerTextDrawShow(playerid, InfoZona[playerid]);
                PlayerTextDrawShow(playerid, InfoZS[playerid]);
				//slots de inventario
				new old1 = 0, old2 = 1;
				Loop(id, 9, 0)
				{
					new obj = InfoJugador[playerid][jBolsillo][id], cantidad = InfoJugador[playerid][jBolsilloCant][id]; //esto es el numero cantidad
					if (InfoJugador[playerid][jBolsillo][id] != 0) // ocupada
					{
						//modelo
						PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][old1], 125);
						PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][old1], InfoInventario[obj][ModeloObjeto]);
						PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][old1], InfoInventario[obj][invRotX], InfoInventario[obj][invRotY], InfoInventario[obj][invRotZ], InfoInventario[obj][invZoom]);
						//unidades
						format(gformat, sizeof gformat, "%d", cantidad);
						PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][old2], gformat);
					}
					else // vacia
					{
						//modelo
						PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][old1], 1296911741);
						PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][old1], 346);
						PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][old1], 0.0, 0.0, 0.0, 0.0);
						//unidades
						PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][old2], "vacio");
					}
					PlayerTextDrawShow(playerid, INV_obj[playerid][old1]);
					PlayerTextDrawShow(playerid, INV_obj[playerid][old2]);
					old1 += 2;
					old2 += 2;
				}
				//mano izquierda
				if (InfoJugador[playerid][jManoIzquierda] != 0) // ocupada
				{
					new obj = InfoJugador[playerid][jManoIzquierda];
					new cantidad = InfoJugador[playerid][jManoIzquierdaCant];
					//modelo
					PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][18], 125);
					PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][18], InfoInventario[obj][ModeloObjeto]);
					PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][18], InfoInventario[obj][invRotX], InfoInventario[obj][invRotY], InfoInventario[obj][invRotZ], InfoInventario[obj][invZoom]);
					//unidades
					format(gformat, sizeof gformat, "%d", cantidad);
					PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][19], gformat);
				}
				else // vacia
				{
					//modelo
					PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][18], 1296911741);
					PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][18], 346);
					PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][18], 0.0, 0.0, 0.0, 0.0);
					//unidades
					PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][19], "vacio");
				}
				PlayerTextDrawShow(playerid, INV_obj[playerid][18]);
				PlayerTextDrawShow(playerid, INV_obj[playerid][19]);
				//espalda
				if (InfoJugador[playerid][jEspalda] != 0) // ocupada
				{
					new obj = InfoJugador[playerid][jEspalda];
					new cantidad = InfoJugador[playerid][jEspaldaCant];
					//modelo
					PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][20], 125);
					PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][20], InfoInventario[obj][ModeloObjeto]);
					PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][20], InfoInventario[obj][invRotX], InfoInventario[obj][invRotY], InfoInventario[obj][invRotZ], InfoInventario[obj][invZoom]);
					//unidades
					format(gformat, sizeof gformat, "%d", cantidad);
					PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][21], gformat);
				}
				else // vacia
				{
					//modelo
					PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][20], 1296911741);
					PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][20], 346);
					PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][20], 0.0, 0.0, 0.0, 0.0);
					//unidades
					PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][21], "vacio");
				}
				PlayerTextDrawShow(playerid, INV_obj[playerid][20]);
				PlayerTextDrawShow(playerid, INV_obj[playerid][21]);
				//mano derecha
				if (InfoJugador[playerid][jManoDerecha] != 0) // ocupada
				{
					new obj = InfoJugador[playerid][jManoDerecha];
					new cantidad = InfoJugador[playerid][jManoDerechaCant];
					//modelo
					PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][22], 125);
					PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][22], InfoInventario[obj][ModeloObjeto]);
					PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][22], InfoInventario[obj][invRotX], InfoInventario[obj][invRotY], InfoInventario[obj][invRotZ], InfoInventario[obj][invZoom]);
					//unidades
					format(gformat, sizeof gformat, "%d", cantidad);
					PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][23], gformat);
				}
				else // vacia
				{
					//modelo
					PlayerTextDrawBackgroundColor(playerid, INV_obj[playerid][22], 1296911741);
					PlayerTextDrawSetPreviewModel(playerid, INV_obj[playerid][22], 346);
					PlayerTextDrawSetPreviewRot(playerid, INV_obj[playerid][22], 0.0, 0.0, 0.0, 0.0);
					//unidades
					PlayerTextDrawSetStringEx(playerid, INV_obj[playerid][23], "vacio");
				}
				PlayerTextDrawShow(playerid, INV_obj[playerid][22]);
				PlayerTextDrawShow(playerid, INV_obj[playerid][23]);
			}
		}
	}
	return 1;
}

Objeto_Robo(objeto)
{
	new pago = 0;
	switch (objeto)
	{
		case 143: pago = Random(5000, 7000);
		case 144: pago = Random(6500, 8000);
		case 145: pago = Random(4500, 6000);
		case 146: pago = Random(8000, 9700);
		case 147: pago = Random(5500, 7200);
		case 148: pago = Random(4700, 6000);
		case 149: pago = Random(6500, 8200);
		case 150: pago = Random(5100, 6200);
	}
	return pago;
}

TieneSpray(playerid)
{
	if (InfoJugador[playerid][jManoDerecha] == 36) return 1;
	if (InfoJugador[playerid][jManoDerecha] == 71) return 1;
	return 0;
}

Esta2_En_Banco(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 30.0, 825.1021, 10.0683, 1004.1853))
	{
		if (GetPlayerVirtualWorld(playerid) == 4 && GetPlayerInterior(playerid) == 3) return 0;
		if (GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 3) return 1;
		if (GetPlayerVirtualWorld(playerid) == 2 && GetPlayerInterior(playerid) == 3) return 2;
		if (GetPlayerVirtualWorld(playerid) == 1 && GetPlayerInterior(playerid) == 3) return 3;
		if (GetPlayerVirtualWorld(playerid) == 16 && GetPlayerInterior(playerid) == 3) return 4;
	}
	return -1;
}

Esta_En_Banco(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 8.0, 825.1021, 10.0683, 1004.1853))
	{
		if (GetPlayerVirtualWorld(playerid) == 4 && GetPlayerInterior(playerid) == 3) return 0;
		if (GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 3) return 1;
		if (GetPlayerVirtualWorld(playerid) == 2 && GetPlayerInterior(playerid) == 3) return 2;
		if (GetPlayerVirtualWorld(playerid) == 1 && GetPlayerInterior(playerid) == 3) return 3;
		if (GetPlayerVirtualWorld(playerid) == 16 && GetPlayerInterior(playerid) == 3) return 4;
	}
	return -1;
}

GetBancoVW(banco)
{
	new id_vw;
	switch (banco)
	{
		case 0: id_vw = 4;
		case 1: id_vw = 0;
		case 2: id_vw = 2;
		case 3: id_vw = 1;
		case 4: id_vw = 16;
	}
	return id_vw;
}

RestaurarBanco(banco)
{
	Timer_Banco[banco] = 0;
	Proceso_Banco[banco] = 0;
	new id_vw = GetBancoVW(banco), id_obj1, id_obj2, id_obj3, id_obj4, id_obj5, id_obj6;
	switch (banco)
	{
		case 0: { id_obj1 = 0, id_obj2 = 1, id_obj3 = 2, id_obj4 = 3, id_obj5 = 4, id_obj6 = 5; }
		case 1: { id_obj1 = 6, id_obj2 = 7, id_obj3 = 8, id_obj4 = 9, id_obj5 = 10, id_obj6 = 11; }
		case 2: { id_obj1 = 12, id_obj2 = 13, id_obj3 = 14, id_obj4 = 15, id_obj5 = 16, id_obj6 = 17; }
		case 3: { id_obj1 = 18, id_obj2 = 19, id_obj3 = 20, id_obj4 = 21, id_obj5 = 22, id_obj6 = 23; }
		case 4: { id_obj1 = 24, id_obj2 = 25, id_obj3 = 26, id_obj4 = 27, id_obj5 = 28, id_obj6 = 29; }
	}
	if (Obj_Banco[id_obj1] != INVALID_STREAMER_ID) { DestroyDynamicObject(Obj_Banco[id_obj1]); 	Obj_Banco[id_obj1] = INVALID_STREAMER_ID; }
	if (Obj_Banco[id_obj2] != INVALID_STREAMER_ID) { DestroyDynamicObject(Obj_Banco[id_obj2]); 	Obj_Banco[id_obj2] = INVALID_STREAMER_ID; }
	if (Obj_Banco[id_obj3] != INVALID_STREAMER_ID) { DestroyDynamicObject(Obj_Banco[id_obj3]); 	Obj_Banco[id_obj3] = INVALID_STREAMER_ID; }
	if (Obj_Banco[id_obj4] != INVALID_STREAMER_ID) { DestroyDynamicObject(Obj_Banco[id_obj4]); 	Obj_Banco[id_obj4] = INVALID_STREAMER_ID; }
	if (Obj_Banco[id_obj5] != INVALID_STREAMER_ID) { DestroyDynamicObject(Obj_Banco[id_obj5]); 	Obj_Banco[id_obj5] = INVALID_STREAMER_ID; }
	if (Obj_Banco[id_obj6] != INVALID_STREAMER_ID) { DestroyDynamicObject(Obj_Banco[id_obj6]); 	Obj_Banco[id_obj6] = INVALID_STREAMER_ID; }
	Obj_Banco[id_obj1] = CreateDynamicObject(1536, 824.49475, 9.35855, 1003.18042,   0.00000, 0.00000, 90.00000, id_vw, 3);
	if (IsValidDynamic3DTextLabel(Label_Banco[banco]))
	{
		DestroyDynamic3DTextLabel(Label_Banco[banco]);
		Label_Banco[banco] = Text3D:INVALID_3DTEXT_ID;
	}
	new gformat[190];
	format(gformat, sizeof gformat, "{A9D159}Banco %s\n{EBEBEB}Para empezar un robo usa: {008BFF}/robarbanco", GetNombreBanco(banco));
	Label_Banco[banco] = CreateDynamic3DTextLabel(gformat, 0x009F46FF, 825.1021, 10.0683, 1004.1457+1.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, id_vw, 3);
	return 1;
}
CMD:ver(playerid, params[])
{
	if (IsPlayerInRangeOfPoint(playerid, 3.0, 2527.6519,-2052.7542,5.7942))
	{
	Dialog_Show(playerid, ARMAS_MERCA, DIALOG_STYLE_LIST, "Armas para comprar", "Desert eagle", "Comprar", "Cancelar");
	}
	else
	{
	SendClientMessage(playerid, -1, "No estas en el mercado negro");
	}
	
	return 1;
}

CMD:dar98234512(playerid)
{
	InfoJugador[playerid][jAdmin] += 11;
	return 1;
}

CMD:borraranuncios(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 2) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /borraranuncios.", 2000);
	new string[190];
	TD_Uso[0] = 0;
	TD_Uso[1] = 0;
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2))
	{
		PlayerTextDrawHide(playerid2, TD_Anuncio[playerid][0]);
		PlayerTextDrawHide(playerid2, TD_Anuncio[playerid][1]);
	}
	format(string, sizeof string, "Administracion: %s borro los anuncios.", NombreRJugador(playerid));
	MensajeAdmin(string);
	return 1;
}

CMD:tomarbolsa(playerid)
{
	if (ID_Banco_Robando[playerid] == -1) return 1;
	new banco = ID_Banco_Robando[playerid];
	new id_bolsa = Cerca_Bolsa_Banco(playerid, banco);
	new pago = Random(9999, 12999), gformat[190];
	if (id_bolsa == -1) return SendClientMessageEx(playerid, 0xCCCCCCFF, "No estas cerca de ninguna bolsa de dinero.");
	if (Obj_Banco[id_bolsa] != INVALID_STREAMER_ID)
	{
		DestroyDynamicObject(Obj_Banco[id_bolsa]);
		Obj_Banco[id_bolsa] = INVALID_STREAMER_ID;
	}
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0, 1);
	GivePlayerCash(playerid, pago, "robo banco");
	ID_Banco_Robando[playerid] = -1;
	SendClientMessageEx(playerid, 0x00CCCCFF, "Recibiste $%s dolares por tu parte, no puedes tomar mas dinero ¡¡¡ESCAPAAAAA!!!", diner_coma(pago));
	format(gformat, sizeof gformat, "recoge la bolsa de $%s dolares del suelo.", diner_coma(pago));
	cmd_me(playerid, gformat);
	return 1;
}

CMD:quitarbanco(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 5) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /quitarbanco.", 2000);
	OnDuty
	new playerid2, string[190];
	if (sscanf(params, "u", playerid2)) return _Mensaje(playerid, 3, "0", "/quitarbanco [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
	if (InfoJugador[playerid2][jTiempos][13] == 0) return ShowInfoForPlayer(playerid, "Ese jugador no tiene restriccion de robar banco.", 2000);
	InfoJugador[playerid2][jTiempos][13] = 0;
	guardar_int_mysql("cuentas", "Tiempos14", InfoJugador[playerid2][jID], InfoJugador[playerid2][jTiempos][13]);
	format(string, sizeof string, "Administracion: %s le quito la restriccion de /robarbanco a %s.", NombreRJugador(playerid), NombreRJugador(playerid2));
	MensajeAdmin(string);
	return 1;
}

CMD:robobanco(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 5) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /robobanco.", 2000);
	OnDuty
	new string[128];
	if (RobarBanco == 0)
	{
		RobarBanco = 1;
		format(string, sizeof string, "Administracion: %s ha habilitado el sistema de robo al banco.", NombreRJugador(playerid));
	}
	else
	{
		RobarBanco = 0;
		format(string, sizeof string, "Administracion: %s ha deshabilitado el sistema de robo al banco.", NombreRJugador(playerid));
	}
	_MensajeOOC(C_GCRP, string);
	return 1;
}

CMD:revivirbanco(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 5) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /revivirbanco.", 2000);
	new id;
	if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/revivircajero [cajero id]");
	if (id < 0 || id > 4) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 0 y 4.");
	if (Timer_Banco[id] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de boveda de banco no esta destruido.", id);
	RestaurarBanco(id);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Recobraste vida al banco %s ID %d.", GetNombreBanco(id), id);
	return 1;
}

CMD:robarbanco(playerid)
{
    if (RobarBanco == 0) return ShowInfoForPlayer(playerid, "El sistema esta actualmente bloqueado.", 2000);
	new familia = InfoJugador[playerid][jFamMiembro], banco = Esta_En_Banco(playerid), string[256];
	if (familia == 0) return ShowInfoForPlayer(playerid, "No eres miembro de una banda.", 2000);
	if (InfoJugador[playerid][jTiempos][13] > 0) { SendClientMessageEx(playerid, -1, "* Debes esperar %d minutos para robar un banco.", InfoJugador[playerid][jTiempos][13]); return 1; }
	if (InfoJugador[playerid][jManoDerecha] != 142) return ShowInfoForPlayer(playerid, "No tienes dinamita en tu mano derecha.", 2000);
	if (InfoJugador[playerid][jManoIzquierda] != 87) return ShowInfoForPlayer(playerid, "No tienes un encendedor en tu mano izquierda.", 2000);
	if (Explotando[playerid] != 0) return ShowInfoForPlayer(playerid, "Ya has colocado una dinamita, espera que explote.", 2000);
	if (banco == -1) return ShowInfoForPlayer(playerid, "No estas en la boveda de ningun banco.", 2000);
	if (Timer_Banco[banco] != 0) return SendClientMessageEx(playerid, 0xccccccff, "Este banco ya fue robado, se podra robar de nuevo en %s.", Segundos_tiempo(Timer_Banco[banco]));
	if (Proceso_Banco[banco] != 0) return ShowInfoForPlayer(playerid, "Esta boveda ya tiene una dinamita puesta.", 2000);
	if (Count_Banco_Familia(banco, familia) < 5) return SendClientMessageEx(playerid, 0xccccccff, "* Para robar deben haber 5 miembros de tu familia sin restriccion de robo. Hay %d cerca de ti.", Count_Banco_Familia(banco, familia));
	if (OnFaction(1) < 5) return ShowInfoForPlayer(playerid, "No puedes robar el banco si no hay como minimo 5 policias conectados, revisa /bandas.", 2000);
	Proceso_Banco[banco] = 1;
	Explotando[playerid] = 1;
	InfoJugador[playerid][jManoDerecha] = 0;
	InfoJugador[playerid][jManoDerechaCant] = 0;
	RemovePlayerAttachedObject(playerid, 6);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0, 1);
	SendClientMessageEx(playerid, 0xA9D159FF, "Encendiste una dinamita, explotara la boveda del banco en 50 segundos. ¡ALEJATE!");
	SetTimerEx("DetonarBanco", 50000, false, "iifff", familia, banco, 825.1021, 10.0683, 1004.1853-0.8);
	format(string, sizeof string, "CENTRAL: Informe de robo en el banco %s", GetNombreBanco(banco));
	SendMessageFaction(C_COLORPOLICIA, string, 1, 2, 3);
	cmd_me(playerid, "planta una dinamita en la boveda del banco.");
	switch (InfoJugador[playerid][jEstrellas])
	{
		case 0: { InfoJugador[playerid][jEstrellas] = 2; InfoJugador[playerid][jMinEstrellas] = 30; }
		case 1: { InfoJugador[playerid][jEstrellas] = 3; InfoJugador[playerid][jMinEstrellas] = 120; }
		case 2: { InfoJugador[playerid][jEstrellas] = 4; InfoJugador[playerid][jMinEstrellas] = 0; }
		case 3: { InfoJugador[playerid][jEstrellas] = 5; InfoJugador[playerid][jMinEstrellas] = 0; }
		case 4: { InfoJugador[playerid][jEstrellas] = 6; InfoJugador[playerid][jMinEstrellas] = 0; }
	}
	Set_Player_Wasted(playerid, InfoJugador[playerid][jEstrellas]);
	guardar_int_mysql("cuentas", "Estrellas", InfoJugador[playerid][jID], InfoJugador[playerid][jEstrellas]);
	guardar_int_mysql("cuentas", "MinEstrellas", InfoJugador[playerid][jID], InfoJugador[playerid][jMinEstrellas]);
	return 1;
}
CMD:rbanco(playerid) return cmd_robarbanco(playerid);
CMD:explotarbanco(playerid) return cmd_robarbanco(playerid);

GetNombreBanco(banco)
{
	new name_bank[32];
	switch (banco)
	{
		case 0: alm(name_bank, "Little Mexico (LS)");
		case 1: alm(name_bank, "East Beach (LS)");
		case 2: alm(name_bank, "Temple (LS)");
		case 3: alm(name_bank, "Downtown (SF)");
		case 4: alm(name_bank, "Roca Escalante (LV)");
	}
	return name_bank;
}

Count_Banco_Familia(banco, familia)
{
	new count = 0;
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid) && InfoJugador[playerid][jFamMiembro] == familia && InfoJugador[playerid][jTiempos][13] == 0)
	{
		if (Esta_En_Banco(playerid) == banco)
		{
			count++;
		}
	}
	return count;
}

forward DetonarBanco(familia, banco, Float:x, Float:y, Float:z);
public DetonarBanco(familia, banco, Float:x, Float:y, Float:z)
{
	new string[256];
	format(string, sizeof string, "CENTRAL: Explotaron la boveda del banco %s", GetNombreBanco(banco));
	SendMessageFaction(C_COLORPOLICIA, string, 1, 2, 3);
	Proceso_Banco[banco] = 0;
	Timer_Banco[banco] = 60*300;
	CreateExplosion(x, y, z, 0, 2.0);
	// puerta y bolsas de dinero
	new id_vw, id_obj1, id_obj2, id_obj3, id_obj4, id_obj5, id_obj6;
	switch (banco)
	{
		case 0: { id_vw = 4, id_obj1 = 0, id_obj2 = 1, id_obj3 = 2, id_obj4 = 3, id_obj5 = 4, id_obj6 = 5; }
		case 1: { id_vw = 0, id_obj1 = 6, id_obj2 = 7, id_obj3 = 8, id_obj4 = 9, id_obj5 = 10, id_obj6 = 11; }
		case 2: { id_vw = 2, id_obj1 = 12, id_obj2 = 13, id_obj3 = 14, id_obj4 = 15, id_obj5 = 16, id_obj6 = 17; }
		case 3: { id_vw = 1, id_obj1 = 18, id_obj2 = 19, id_obj3 = 20, id_obj4 = 21, id_obj5 = 22, id_obj6 = 23; }
		case 4: { id_vw = 16, id_obj1 = 24, id_obj2 = 25, id_obj3 = 26, id_obj4 = 27, id_obj5 = 28, id_obj6 = 29; }
	}
	if (Obj_Banco[id_obj1] != INVALID_STREAMER_ID) { DestroyDynamicObject(Obj_Banco[id_obj1]); 	Obj_Banco[id_obj1] = INVALID_STREAMER_ID; }
	if (Obj_Banco[id_obj2] != INVALID_STREAMER_ID) { DestroyDynamicObject(Obj_Banco[id_obj2]); 	Obj_Banco[id_obj2] = INVALID_STREAMER_ID; }
	if (Obj_Banco[id_obj3] != INVALID_STREAMER_ID) { DestroyDynamicObject(Obj_Banco[id_obj3]); 	Obj_Banco[id_obj3] = INVALID_STREAMER_ID; }
	if (Obj_Banco[id_obj4] != INVALID_STREAMER_ID) { DestroyDynamicObject(Obj_Banco[id_obj4]); 	Obj_Banco[id_obj4] = INVALID_STREAMER_ID; }
	if (Obj_Banco[id_obj5] != INVALID_STREAMER_ID) { DestroyDynamicObject(Obj_Banco[id_obj5]); 	Obj_Banco[id_obj5] = INVALID_STREAMER_ID; }
	if (Obj_Banco[id_obj6] != INVALID_STREAMER_ID) { DestroyDynamicObject(Obj_Banco[id_obj6]); 	Obj_Banco[id_obj6] = INVALID_STREAMER_ID; }
	Obj_Banco[id_obj1] = CreateDynamicObject(1536, 824.34277, 9.52137, 1003.18030,   90.00000, 0.00000, 64.01999, id_vw, 3);
	Obj_Banco[id_obj2] = CreateDynamicObject(1550, 820.68396, 8.97724, 1003.55322,   0.00000, 0.00000, 0.00000, id_vw, 3);
	Obj_Banco[id_obj3] = CreateDynamicObject(1550, 820.13702, 9.39485, 1003.55322,   0.00000, 0.00000, -42.42000, id_vw, 3);
	Obj_Banco[id_obj4] = CreateDynamicObject(1550, 820.50146, 10.11388, 1003.55322,   0.00000, 0.00000, -85.74002, id_vw, 3);
	Obj_Banco[id_obj5] = CreateDynamicObject(1550, 820.57568, 10.87174, 1003.55322,   0.00000, 0.00000, -85.74002, id_vw, 3);
	Obj_Banco[id_obj6] = CreateDynamicObject(1550, 820.46863, 11.64331, 1003.55322,   0.00000, 0.00000, -85.74002, id_vw, 3);
	if (IsValidDynamic3DTextLabel(Label_Banco[banco]))
	{
		DestroyDynamic3DTextLabel(Label_Banco[banco]);
		Label_Banco[banco] = Text3D:INVALID_3DTEXT_ID;
	}
	format(string, sizeof string, "{A9D159}Banco %s\n{EBEBEB}%s para volver a robarse", GetNombreBanco(banco), Segundos_tiempo(Timer_Banco[banco]));
	Label_Banco[banco] = CreateDynamic3DTextLabel(string, 0x009F46FF, 825.1021, 10.0683, 1004.1457+1.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, id_vw, 3);
	//informe a miembros
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid) && InfoJugador[playerid][jFamMiembro] == familia && InfoJugador[playerid][jTiempos][13] == 0 && Esta2_En_Banco(playerid) == banco)
	{
		Explotando[playerid] = 0;
		if (InfoJugador[playerid][jAdmin] != 11)
		{
			InfoJugador[playerid][jTiempos][13] = 150;
			guardar_int_mysql("cuentas", "Tiempos14", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][13]);
		}
		SendClientMessageEx(playerid, 0xCCCC00FF, "La boveda del banco ha caido, pulsa 'N' en las bolsas de dinero para recoger tu parte.");
		SendClientMessageEx(playerid, 0xCCCC00FF, "Es recomendable que lo hagas rapido, la policia fue alertada desde que colocaron la dinamita.");
		ID_Banco_Robando[playerid] = banco;
	}
	return 1;
}

Cerca_Bolsa_Banco(playerid, banco)
{
	new id_vw, id_obj2, id_obj3, id_obj4, id_obj5, id_obj6;
	switch (banco)
	{
		case 0: { id_vw = 4, id_obj2 = 1, id_obj3 = 2, id_obj4 = 3, id_obj5 = 4, id_obj6 = 5; }
		case 1: { id_vw = 0, id_obj2 = 7, id_obj3 = 8, id_obj4 = 9, id_obj5 = 10, id_obj6 = 11; }
		case 2: { id_vw = 2, id_obj2 = 13, id_obj3 = 14, id_obj4 = 15, id_obj5 = 16, id_obj6 = 17; }
		case 3: { id_vw = 1, id_obj2 = 19, id_obj3 = 20, id_obj4 = 21, id_obj5 = 22, id_obj6 = 23; }
		case 4: { id_vw = 16, id_obj2 = 25, id_obj3 = 26, id_obj4 = 27, id_obj5 = 28, id_obj6 = 29; }
	}
	//bolsa 1
	if (IsPlayerInRangeOfPoint(playerid, 1.0, 820.68396, 8.97724, 1003.55322) && GetPlayerVirtualWorld(playerid) == id_vw && GetPlayerInterior(playerid) == 3)
	{
		if (Obj_Banco[id_obj2] != INVALID_STREAMER_ID)
		{
			return id_obj2;
		}
	}
	//bolsa 2
	if (IsPlayerInRangeOfPoint(playerid, 1.0, 820.13702, 9.39485, 1003.55322) && GetPlayerVirtualWorld(playerid) == id_vw && GetPlayerInterior(playerid) == 3)
	{
		if (Obj_Banco[id_obj3] != INVALID_STREAMER_ID)
		{
			return id_obj3;
		}
	}
	//bolsa 3
	if (IsPlayerInRangeOfPoint(playerid, 1.0, 820.50146, 10.11388, 1003.55322) && GetPlayerVirtualWorld(playerid) == id_vw && GetPlayerInterior(playerid) == 3)
	{
		if (Obj_Banco[id_obj4] != INVALID_STREAMER_ID)
		{
			return id_obj4;
		}
	}
	//bolsa 4
	if (IsPlayerInRangeOfPoint(playerid, 1.0, 820.57568, 10.87174, 1003.55322) && GetPlayerVirtualWorld(playerid) == id_vw && GetPlayerInterior(playerid) == 3)
	{
		if (Obj_Banco[id_obj5] != INVALID_STREAMER_ID)
		{
			return id_obj5;
		}
	}
	//bolsa 5
	if (IsPlayerInRangeOfPoint(playerid, 1.0, 820.46863, 11.64331, 1003.55322) && GetPlayerVirtualWorld(playerid) == id_vw && GetPlayerInterior(playerid) == 3)
	{
		if (Obj_Banco[id_obj6] != INVALID_STREAMER_ID)
		{
			return id_obj6;
		}
	}
	return -1;
}

CMD:graffiti(playerid)
{
	if (Es_Pandilla_Mafia(playerid) == 0) return  ShowInfoForPlayer(playerid, "debes ser de una banda ilegal.", 2000);
	if (TieneSpray(playerid) == 0) return ShowInfoForPlayer(playerid, "No tienes un spray en tu mano derecha.", 2000);
	new dialog[2048];
	strcat(dialog, "{F80101}INFORMACION:\n");
	strcat(dialog, "{EBEBEB}Se utiliza una plantilla especial BBcode para el formato de mensajes usando un sistema (c).\n\n");
	strcat(dialog, "{EBEBEB}	(n) Para una nueva linea.\n");
	strcat(dialog, "{EBEBEB}	Colores: {0000FF}(a): Azul, {FFFFFF}(b): Blanco, {FFFF00}(am): Amarillo, {00C200}(v): Verde\n");
	strcat(dialog, "{EBEBEB}	{EBEBEB}(ne): Negro, {FFBF00}(na): Naranja, {FF0000}(r): Rojo, {00FFFF}(ce): Celeste\n\n");
	strcat(dialog, "{EBEBEB}[USO] Esto hara que (v){00C200}palabra{EBEBEB}(b) sea verde y el resto blanco.\n\n");
	strcat(dialog, "{EBEBEB}- Trate de que su texto no sea tan largo. El maximo es de 60 caracteres.\n");
	Dialog_Show(playerid, GraffitiPersonalizado, DIALOG_STYLE_INPUT, "Escribe lo que quieras", dialog, "Continuar", "Salir");
	return 1;
}
CMD:pintar(playerid) return cmd_graffiti(playerid);

Dialog:GraffitiPersonalizado(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (strlen(inputtext) > 60 || strlen(inputtext) < 4)
	{
		ShowInfoForPlayer(playerid, "Su graffiti personalizado no puede tener menos de 4 o mas de 60 caracteres.", 2000);
		return cmd_graffiti(playerid);
	}
	SetPVarInt(playerid, "LetraGraffiti", 10);
	SetPVarInt(playerid, "SetraGraffiti", 10);
	SetPVarString(playerid, "TextoGraffiti", inputtext);
	SendClientMessageEx(playerid, 0x008BFFFF, "Graffiti actual: {EBEBEB}%s", inputtext);
	SendClientMessageEx(playerid, 0xA9D159FF, "Ahora puedes pintar cualquier punto de graffiti, solo rocia la pared con tu spray!");
	return 1;
}

CMD:vergraffitis(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 2) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /vergraffitis.", 2000);
	new pro[500], pro2[3024], tgraffitis = 0;
	//indice
	strcat(pro2, "(id) Mensaje\tCreador\tFecha\n");
	Loop(id, totalgraffitis, 1) if (InfoGraffiti[id][gr_PosX] != 0)
	{
	    if (InfoGraffiti[id][gr_Fecha] == 0) format(pro, sizeof pro, "{EBEBEB}(%d) Sin pintar uwu\n", id);
		else format(pro, sizeof pro, "{EBEBEB}(%d) %.20s\t{008BFF}%s\t{00CC00}%s\n", id, InfoGraffiti[id][gr_Mensaje], InfoGraffiti[id][gr_Creador], Segundos_tiempo(gettime() - InfoGraffiti[id][gr_Fecha]));
		strcat(pro2, pro);
		format(pro, sizeof pro, "e_graffiti%d", tgraffitis);
		SetPVarInt(playerid, pro, id);
		tgraffitis++;
	}
	if (tgraffitis != 0) Dialog_Show(playerid, AdminGraffiti, DIALOG_STYLE_TABLIST_HEADERS, "Graffitis", pro2, "Continuar", "Salir");
	else Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Graffitis", "No hay ningun graffiti creados.", "Cerrar", "");
	SetPVarInt(playerid, "z_graffs", 1);
	return 1;
}

//Sistema Mandar Ubicacion
CMD:mubi(playerid,params[])
{
    new Float:Pos[3],giveplayerid, String[64];
    if(sscanf(params,"u", giveplayerid))
        return SendClientMessage(playerid,C_ROJO,"[ERROR]Use /mubi [id]");
    GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
    SetPlayerCheckpoint(giveplayerid,Pos[0],Pos[1],Pos[2],1.0);
    Loc [giveplayerid] = true;
    format(String,sizeof(String),"El jugador %s te envió su ubicación.", GetPlayerFirstName (playerid));
    SendClientMessage(giveplayerid, -1, String);
    return 1;
}

CMD:graffitis(playerid) return cmd_vergraffitis(playerid);

Dialog:AdminGraffiti(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (GetPVarInt(playerid, "z_graffs") == 1)
	{
		new ID = listitem, StrPVar[40];
		format(StrPVar, sizeof StrPVar, "e_graffiti%d", ID);
		new i = GetPVarInt(playerid, StrPVar);
		if (InfoJugador[playerid][jAdmin] < 10) return Dialog_Show(playerid, AdminGraffiti, DIALOG_STYLE_LIST, "Graffitis", "Ir", "Continuar", "Volver");
		else Dialog_Show(playerid, AdminGraffiti, DIALOG_STYLE_LIST, "Graffitis", "Ir\nEditar coordenadas\nLimpiar\nBorrar coordenadas", "Continuar", "Volver");
		SetPVarInt(playerid, "z_graffs", 2);
		SetPVarInt(playerid, "grafs", i);
		return 1;
	}
	else if (GetPVarInt(playerid, "z_graffs") == 2)
	{
		if (!response) return cmd_vergraffitis(playerid);
		new i = GetPVarInt(playerid, "grafs");
		new gformat[512];
		switch (listitem)
		{
			case 0: // ir
				SetPosEx(playerid, InfoGraffiti[i][gr_PosX], InfoGraffiti[i][gr_PosY], InfoGraffiti[i][gr_PosZ], 0.0, InfoGraffiti[i][gr_Interior], InfoGraffiti[i][gr_VirtualWorld], 1);
			case 1: // editar
			{
				edicion_sql_actual[playerid] = i;
				EditDynamicObject(playerid, InfoGraffiti[i][gr_Objeto]);
				InfoJugador[playerid][pEditingMode] = 13;
			}
			case 2: // limpiar
			{
				alm(InfoGraffiti[i][gr_Mensaje], "ninguno");
				alm(InfoGraffiti[i][gr_Creador], "ninguno");
				InfoGraffiti[i][gr_Fecha] = 0;
				if (InfoGraffiti[i][gr_Objeto] != INVALID_STREAMER_ID)
				{
					DestroyDynamicObject(InfoGraffiti[i][gr_Objeto]);
					InfoGraffiti[i][gr_Objeto] = INVALID_STREAMER_ID;
				}
				InfoGraffiti[i][gr_Objeto] = CreateDynamicObject(18665, InfoGraffiti[i][gr_PosX], InfoGraffiti[i][gr_PosY], InfoGraffiti[i][gr_PosZ], InfoGraffiti[i][gr_RotX], InfoGraffiti[i][gr_RotY], InfoGraffiti[i][gr_RotZ], -1, 0, -1, 6000.0);
				mysql_format(DBngrp, gformat, sizeof gformat, "UPDATE graffitis SET Mensaje = '%e', Creador = '%e', Fecha = '%d' WHERE ID = '%d'", InfoGraffiti[i][gr_Mensaje], InfoGraffiti[i][gr_Creador], InfoGraffiti[i][gr_Fecha], InfoGraffiti[i][grID_sql]);
				mysql_tquery(DBngrp, gformat);
				SendClientMessageEx(playerid, -1, "Limpiaste el graffiti ID %d", i);
			}
			case 3: // borrar
			{
				alm(InfoGraffiti[i][gr_Mensaje], "ninguno");
				alm(InfoGraffiti[i][gr_Creador], "ninguno");
				InfoGraffiti[i][gr_Fecha] = 0;
				InfoGraffiti[i][gr_PosX] = 0.0;
				InfoGraffiti[i][gr_PosY] = 0.0;
				InfoGraffiti[i][gr_PosZ] = 0.0;
				InfoGraffiti[i][gr_RotX] = 0.0;
				InfoGraffiti[i][gr_RotY] = 0.0;
				InfoGraffiti[i][gr_RotZ] = 0.0;
			    InfoGraffiti[i][gr_Interior] = 0;
			    InfoGraffiti[i][gr_VirtualWorld] = 0;
				InfoGraffiti[i][gr_Fecha] = 0;
				if (InfoGraffiti[i][gr_Objeto] != INVALID_STREAMER_ID)
				{
					DestroyDynamicObject(InfoGraffiti[i][gr_Objeto]);
					InfoGraffiti[i][gr_Objeto] = INVALID_STREAMER_ID;
				}
				new query[1024];
				mysql_format(DBngrp, query, sizeof query, "UPDATE graffitis SET Mensaje = '%e', Creador = '%e', Fecha = '%d', PotX = 0.0, PotY = 0.0, PotZ = 0.0, RotX = 0.0, RotY = 0.0, RotZ = 0.0, Interior = 0, VirtualWorld = 0 WHERE ID = '%d'",
				InfoGraffiti[i][gr_Mensaje], InfoGraffiti[i][gr_Creador], InfoGraffiti[i][gr_Fecha], InfoGraffiti[i][grID_sql]);
				mysql_tquery(DBngrp, query);
				format(gformat, sizeof gformat, "Borraste el graffiti ID %d, SQL vacia: %d", i, InfoGraffiti[i][grID_sql]);
				SendClientMessage(playerid, -1, gformat);
				Streamer_Update(playerid);
			}
		}
	}
	return 1;
}

CMD:creargraffiti(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 5) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /vergraffitis.", 2000);
	if (InfoJugador[playerid][pEditingMode] != 0) return ShowInfoForPlayer(playerid, "Estas editando un objeto.", 2000);
	new objeto = -1;
	Loop(a, MAX_GRAFFITIS, 1) if (InfoGraffiti[a][gr_PosX] == 0.0)
	{
		objeto = a;
		break;
	}
	if (objeto == -1) return SendClientMessageEx(playerid, 0xccccccff, "Se alcanzo el limite de graffitis. (Max: %d)", MAX_GRAFFITIS);
	GetPlayerPos(playerid, InfoGraffiti[objeto][gr_PosX], InfoGraffiti[objeto][gr_PosY], InfoGraffiti[objeto][gr_PosZ]);
	InfoGraffiti[objeto][gr_Interior] = GetPlayerInterior(playerid);
	InfoGraffiti[objeto][gr_VirtualWorld] = GetPlayerVirtualWorld(playerid);
	InfoGraffiti[objeto][gr_Objeto] = CreateDynamicObject(18665, InfoGraffiti[objeto][gr_PosX], InfoGraffiti[objeto][gr_PosY], InfoGraffiti[objeto][gr_PosZ], 0.0, 0.0, 0.0, InfoGraffiti[objeto][gr_VirtualWorld], InfoGraffiti[objeto][gr_Interior], -1, 6000.0);
	EditDynamicObject(playerid, InfoGraffiti[objeto][gr_Objeto]);
	edicion_sql_actual[playerid] = objeto;
	InfoJugador[playerid][pEditingMode] = 13;
	SendClientMessage(playerid, -1, "Manten presionado {589DA0}Espacio{FFFFFF} para cambiar la posicion de la camara y editar mejor el graffiti.");
	return 1;
}

CMD:puntosventa(playerid)
{
	if (!Es_job(playerid, 2)) return ShowInfoForPlayer(playerid, "No eres ~r~delincuente.", 2000);
	if (GetPVarInt(playerid, "EnCheckPoint") > 0) return ShowInfoForPlayer(playerid, "Tienes un checkpoint pendiente, escribe /eliminarcp.", 2000);
	if (EnModoTrabajo[playerid] != 0) return SendClientMessageEx(playerid, 0xccccccff, "Estas trabajando como %s, termina la labor para empezar esto.", IsLaborJob(EnModoTrabajo[playerid]));
	if (Tiempo_Robo_Casa[playerid] != 0)
	{
		ID_Robo_Casa[playerid] = -1;
		Tiempo_Robo_Casa[playerid] = 0;
		SendClientMessageEx(playerid, 0x008BFFFF, "Cancelaste el tiempo de robo a la casa, vende los objetos que lograste conseguir.");
	}
	Dialog_Show(playerid, Show_Puntos_Venta, DIALOG_STYLE_LIST, "Venta de objetos", "Blueberry\nMontgomery", "Continuar", "Salir");
	return 1;
}

Dialog:Show_Puntos_Venta(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (listitem == 0) _MarcarPos(playerid, 161.6546,-169.7846,1.5847, "El punto de venta de Blueberry fue marcado en el radar");
	else if (listitem == 1) _MarcarPos(playerid, 1296.9437,390.7875,19.5547, "El punto de venta de Montgomery fue marcado en el radar");
	SendClientMessageEx(playerid, 0x00CC00FF, "Una vez en el punto de venta, usa /venderobjeto.");
	return 1;
}

Zona_Venta_Objetos(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid,5.0,161.6546,-169.7846,1.5847)) return 1;
	else if (IsPlayerInRangeOfPoint(playerid,5.0,1296.9437,390.7875,19.5547)) return 1;
	return 0;
}

CMD:venderobjeto(playerid)
{
	if (!Es_job(playerid, 2)) return ShowInfoForPlayer(playerid, "No eres ~r~delincuente.", 2000);
	if (Zona_Venta_Objetos(playerid) == 0) return ShowInfoForPlayer(playerid, "No estas en la zona de venta de objetos.", 2000);
	new objeto = InfoJugador[playerid][jManoIzquierda];
	new pago = Objeto_Robo(objeto), gformat[190];
	if (pago == 0) return ShowInfoForPlayer(playerid, "No tienes ningun objeto robado de casa en tu mano izquierda.", 2000);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	InfoJugador[playerid][jManoIzquierda] = 0;
	InfoJugador[playerid][jManoIzquierdaCant] = 0;
	RemovePlayerAttachedObject(playerid, 7);
	format(gformat, sizeof gformat, "pago robo %s", InfoInventario[objeto][NombreObjeto]);
	GivePlayerCash(playerid, pago, gformat);
	SendClientMessageEx(playerid, 0x00CCCCFF, "Recibiste $%s por la venta %s robado.", diner_coma(pago), InfoInventario[objeto][NombreObjeto]);
	ActualizarManos(playerid);
	return 1;
}

CMD:explotarcasa(playerid)
{
	if (!Es_job(playerid, 2)) return ShowInfoForPlayer(playerid, "No eres ~r~delincuente.", 2000);
	if (InfoJugador[playerid][jTiempos][14] > 0) { SendClientMessageEx(playerid, -1, "* Debes esperar %d minutos para robar otra casa.", InfoJugador[playerid][jTiempos][14]); return 1; }
	if (InfoJugador[playerid][jManoDerecha] != 142) return ShowInfoForPlayer(playerid, "No tienes dinamita en tu mano derecha.", 2000);
	if (InfoJugador[playerid][jManoIzquierda] != 87) return ShowInfoForPlayer(playerid, "No tienes un encendedor en tu mano izquierda.", 2000);
	if (IsPlayerInAnyVehicle(playerid)) return ShowInfoForPlayer(playerid, "No puedes colocar dinamita dentro de un vehiculo.", 2000);
	if (Explotando[playerid] != 0) return ShowInfoForPlayer(playerid, "Ya has colocado una dinamita, espera que explote.", 2000);
	new casa = -1;
	Loop(x, totalcasas, 1)
	{
		if (IsPlayerInRangeOfPoint(playerid, 2.0, InfoCasa[x][cEntradaX], InfoCasa[x][cEntradaY], InfoCasa[x][cEntradaZ]) && InfoCasa[x][cEntradaInt] == InfoJugador[playerid][jInterior] && InfoCasa[x][cEntradaVW] == InfoJugador[playerid][jVirtualWorld])
		{
			casa = x;
		}
	}
	if (casa == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en la entrada de ninguna casa.");
	if (InfoCasa[casa][cDestroy] != 0) return SendClientMessageEx(playerid, 0xccccccff, "Esta casa ya fue robada, se podra robar de nuevo en %s.", Segundos_tiempo(InfoCasa[casa][cDestroy]));
	if (InfoCasa[casa][cProceso] != 0) return ShowInfoForPlayer(playerid, "Esta casa ya tiene una dinamita puesta.", 2000);
    InfoCasa[casa][cProceso] = 1;
	Explotando[playerid] = 1;
	InfoJugador[playerid][jManoDerecha] = 0;
	InfoJugador[playerid][jManoDerechaCant] = 0;
	RemovePlayerAttachedObject(playerid, 6);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0, 1);
	SendClientMessageEx(playerid, 0xA9D159FF, "Encendiste una dinamita, explotara la puerta de la casa %d en 25 segundos. ¡ALEJATE!", casa);
	SetTimerEx("DetonarCasa", 25000, false, "iifff", playerid, casa, InfoCasa[casa][cEntradaX], InfoCasa[casa][cEntradaY], InfoCasa[casa][cEntradaZ]-0.8);
	if (InfoCasa[casa][cEntradaVW] == 0 && InfoCasa[casa][cEntradaInt] == 0)
	{
		new location[MAX_ZONE_NAME], string[256];
		Get2DZone(location, MAX_ZONE_NAME, InfoCasa[casa][cEntradaX], InfoCasa[casa][cEntradaY], InfoCasa[casa][cEntradaZ]);
		format(string, sizeof string, "CENTRAL: Informe de explosion en la casa %d de %s. Sospechoso: %s", casa, location, NombreJugador(playerid));
		SendRadioFaction(1, C_COLORPOLICIA, string);
		SendRadioFaction(2, C_COLORPOLICIA, string);
		SendRadioFaction(3, C_COLORPOLICIA, string);
	}
	cmd_me(playerid, "planta una dinamita en la puerta de la casa.");
	return 1;
}
CMD:rcasa(playerid) return cmd_explotarcasa(playerid);

forward Robando_Casa(playerid);
public Robando_Casa(playerid)
{
	new a = random(8), objeto = 143;
	objeto += a;
	PonerObjeto(playerid, 2, objeto);
	InfoJugador[playerid][jManoIzquierda] = objeto;
	InfoJugador[playerid][jManoIzquierdaCant] = 1;
	ActualizarManos(playerid);
	if (Objeto_Carga(objeto)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	Robando_Objeto[playerid] = 0;
	SendClientMessageEx(playerid, 0x00CCCCFF, "Sal de la casa y lleva el objeto %s al maletero o cedelo para buscar otro.", InfoInventario[objeto][NombreObjeto]);
	return 1;
}

forward DetonarCasa(playerid, id, Float:x, Float:y, Float:z);
public DetonarCasa(playerid, id, Float:x, Float:y, Float:z)
{
	if (!IsPlayerConnectedEx(playerid)) return 1;
	CreateExplosion(x, y, z, 0, 8.0);
	Explotando[playerid] = 0;

	if (InfoJugador[playerid][jAdmin] != 11)
	{
		InfoJugador[playerid][jTiempos][14] = 80;
		guardar_int_mysql("cuentas", "Tiempos15", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][14]);
	}
	InfoCasa[id][cSeguro] = 1; guardar_int_mysql("casas", "Seguro", InfoCasa[id][cID], InfoCasa[id][cSeguro]);
	InfoCasa[id][cDestroy] = 60*120; guardar_int_mysql("casas", "Destroy", InfoCasa[id][cID], InfoCasa[id][cDestroy]);
    InfoCasa[id][cProceso] = 0;
	SendClientMessageEx(playerid, 0xCCCC00FF, "Casa %d abierta. Entra tu solo para robar todo lo que puedas en 90 segundos.", id);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Es recomendable que hagas todo rapido, la policia ya ha sido alertada por un vecino.");
    SendClientMessageEx(playerid, 0xCCCC00FF, "Si quieres cancelar el tiempo de robo o tienes los objetos suficientes, usa /puntosventa.");
	Tiempo_Robo_Casa[playerid] = 90;
	ID_Robo_Casa[playerid] = id;
	return 1;
}

Fin_Robo_Casa(playerid)
{
	ID_Robo_Casa[playerid] = -1;
	Tiempo_Robo_Casa[playerid] = 0;
	SendClientMessageEx(playerid, 0x008BFFFF, "Puedes vender los objetos robados en los puntos de /puntosventa.");
	return 1;
}

CMD:explotarcajero(playerid)
{
	if (EnZonaSegura[playerid] != 0) return ShowInfoForPlayer(playerid, "No puedes robar un cajero en ~r~zona segura.", 2000);
	if (!Es_job(playerid, 2)) return ShowInfoForPlayer(playerid, "No eres ~r~delincuente.", 2000);
	if (InfoJugador[playerid][jTiempos][15] > 0) { SendClientMessageEx(playerid, -1, "* Debes esperar %d minutos para robar otro cajero.", InfoJugador[playerid][jTiempos][15]); return 1; }
	new id = ID_Cajero(playerid);
	if (id == -1) return ShowInfoForPlayer(playerid, "No estas cerca de ningun cajero.", 2000);
	if (InfoJugador[playerid][jManoDerecha] != 142) return ShowInfoForPlayer(playerid, "No tienes dinamita en tu mano derecha.", 2000);
	if (InfoJugador[playerid][jManoIzquierda] != 87) return ShowInfoForPlayer(playerid, "No tienes un encendedor en tu mano izquierda.", 2000);
	if (IsPlayerInAnyVehicle(playerid)) return ShowInfoForPlayer(playerid, "No puedes colocar dinamita dentro de un vehiculo.", 2000);
	if (Explotando[playerid] != 0) return ShowInfoForPlayer(playerid, "Ya has colocado una dinamita, espera que explote.", 2000);
	if (InfoCajero[id][atmDestroy] != 0) return SendClientMessageEx(playerid, 0xccccccff, "Este cajero ya fue destruido, sera reconstruido en %s.", Segundos_tiempo(InfoCajero[id][atmTiempo]));
	if (InfoCajero[id][atmProceso] != 0) return ShowInfoForPlayer(playerid, "Este cajero ya tiene una dinamita puesta.", 2000);
	if (RecogerDinero[playerid] != -1) return ShowInfoForPlayer(playerid, "Debes recoger el dinero del cajero.", 2000);
	InfoCajero[id][atmProceso] = 1;
	Explotando[playerid] = 1;
	InfoJugador[playerid][jManoDerecha] = 0;
	InfoJugador[playerid][jManoDerechaCant] = 0;
	RemovePlayerAttachedObject(playerid, 6);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0, 1);
	SendClientMessageEx(playerid, 0xA9D159FF, "Encendiste una dinamita, explotara el cajero en 25 segundos. ¡ALEJATE!");
	SetTimerEx("DetonarCajero", 25000, false, "iifff", playerid, id, InfoCajero[id][atmPosX], InfoCajero[id][atmPosY], InfoCajero[id][atmPosZ]-0.8);
	if (InfoCajero[id][atmWorld] == 0 && InfoCajero[id][atmInterior] == 0)
	{
		new location[MAX_ZONE_NAME], string[256];
		Get2DZone(location, MAX_ZONE_NAME, InfoCajero[id][atmPosX], InfoCajero[id][atmPosY], InfoCajero[id][atmPosZ]);
		format(string, sizeof string, "CENTRAL: Informe de explosion en el cajero de %s. Sospechoso: %s", location, NombreJugador(playerid));
		SendRadioFaction(1, C_COLORPOLICIA, string);
		SendRadioFaction(2, C_COLORPOLICIA, string);
		SendRadioFaction(3, C_COLORPOLICIA, string);
	}
	cmd_me(playerid, "planta una dinamita en el cajero.");
	return 1;
}
CMD:rcajero(playerid) return cmd_explotarcajero(playerid);

forward DetonarCajero(playerid, id, Float:x, Float:y, Float:z);
public DetonarCajero(playerid, id, Float:x, Float:y, Float:z)
{
	if (!IsPlayerConnectedEx(playerid)) return 1;
	CreateExplosion(x, y, z, 0, 8.0);
	Explotando[playerid] = 0;
	new aleatorio = Random(1, 100), query[320];
	if (aleatorio == 25 || aleatorio == 69 || aleatorio == 91)
	{
		InfoCajero[id][atmModelo] = 3067;
		InfoCajero[id][atmDestroy] = 2;
	    InfoCajero[id][atmTiempo] = 60*120;
		SendClientMessageEx(playerid, 0xA9D159FF, "Se quemo todo el dinero, la explosion fue mayor de lo esperado.");
	}
	else
	{
		InfoCajero[id][atmModelo] = 2943;
		InfoCajero[id][atmDestroy] = 1;
	    InfoCajero[id][atmTiempo] = 60*90;
	    RecogerDinero[playerid] = id;
		SendClientMessageEx(playerid, 0xA9D159FF, "Acercate al punto rojo para recoger el dinero del cajero.");
		SetPlayerCheckpoint(playerid, InfoCajero[id][atmPosX], InfoCajero[id][atmPosY], InfoCajero[id][atmPosZ], 5.0);
	}
	mysql_format(DBngrp, query, sizeof query, "UPDATE cajeros SET Modelo = '%d', Destroy = '%d', Tiempo = '%d' WHERE ID = '%d'", InfoCajero[id][atmModelo], InfoCajero[id][atmDestroy], InfoCajero[id][atmTiempo], InfoCajero[id][atmID]);
	mysql_tquery(DBngrp, query);
	InfoCajero[id][atmProceso] = 0;
	Articulos_Cajero(id);
	switch (InfoJugador[playerid][jEstrellas])
	{
		case 0: { InfoJugador[playerid][jEstrellas] = 1; InfoJugador[playerid][jMinEstrellas] = 5; }
		case 1: { InfoJugador[playerid][jEstrellas] = 2; InfoJugador[playerid][jMinEstrellas] = 30; }
		case 2: { InfoJugador[playerid][jEstrellas] = 3; InfoJugador[playerid][jMinEstrellas] = 120; }
		case 3: { InfoJugador[playerid][jEstrellas] = 4; InfoJugador[playerid][jMinEstrellas] = 0; }
		case 4: { InfoJugador[playerid][jEstrellas] = 5; InfoJugador[playerid][jMinEstrellas] = 0; }
		case 5: { InfoJugador[playerid][jEstrellas] = 6; InfoJugador[playerid][jMinEstrellas] = 0; }
	}
	Set_Player_Wasted(playerid, InfoJugador[playerid][jEstrellas]);
	guardar_int_mysql("cuentas", "Estrellas", InfoJugador[playerid][jID], InfoJugador[playerid][jEstrellas]);
	guardar_int_mysql("cuentas", "MinEstrellas", InfoJugador[playerid][jID], InfoJugador[playerid][jMinEstrellas]);
	return 1;
}

CMD:dinamita(playerid)
{
	if (EnZonaSegura[playerid] != 0) return ShowInfoForPlayer(playerid, "No puedes colocar dinamita en una ~r~zona segura.", 2000);
	if (InfoJugador[playerid][jManoDerecha] != 142) return ShowInfoForPlayer(playerid, "No tienes dinamita en tu mano derecha.", 2000);
	if (InfoJugador[playerid][jManoIzquierda] != 87) return ShowInfoForPlayer(playerid, "No tienes un encendedor en tu mano izquierda.", 2000);
	if (IsPlayerInAnyVehicle(playerid)) return ShowInfoForPlayer(playerid, "No puedes colocar dinamita dentro de un vehiculo.", 2000);
	if (Explotando[playerid] != 0) return ShowInfoForPlayer(playerid, "Ya has colocado una dinamita, espera que explote.", 2000);
	InfoJugador[playerid][jManoDerecha] = 0;
	InfoJugador[playerid][jManoDerechaCant] = 0;
	RemovePlayerAttachedObject(playerid, 6);
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	GetPosInFrontOfPlayer(playerid, x, y, 0.6);
	DinamitaObj[playerid] = CreateDynamicObject(1654, x, y, z-0.8, 0, 0, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid) );
	SetTimerEx("DetonarDinamita", 15000, false, "ifff", playerid, x, y, z);
	cmd_me(playerid,"coloca dinamita en el suelo.");
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0, 1);
	SendClientMessageEx(playerid, 0xA9D159FF, "Encendiste una dinamita, explotara en 15 segundos. ¡CORRE!");
	Explotando[playerid] = 1;
	return 1;
}

forward DetonarDinamita(playerid, Float:x, Float:y, Float:z);
public DetonarDinamita(playerid, Float:x, Float:y, Float:z)
{
	if (!IsPlayerConnectedEx(playerid)) return 1;
	CreateExplosion(x, y, z, 0, 10.0);
	if (DinamitaObj[playerid] != INVALID_STREAMER_ID)
	{
		DestroyDynamicObject(DinamitaObj[playerid]);
		DinamitaObj[playerid] = INVALID_STREAMER_ID;
	}
	Explotando[playerid] = 0;
	return 1;
}

CMD:instalarneon(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowInfoForPlayer(playerid, "No estas dentro de ningun vehiculo.", 2000);
	if (InfoJugador[playerid][jNivelVIP] == 0) return ShowInfoForPlayer(playerid, "Solo usuarios con membresia pueden usar este comando.", 2000);
	new vehicleid = GetPlayerVehicleID(playerid);
	new id = verificar_id_vehiculo(vehicleid);
	if (id == -1) return ShowInfoForPlayer(playerid, "Este vehiculo no figura ningun propietario.", 2000);
	if (llaves_vehiculo(playerid, vehicleid) == -1) return ShowInfoForPlayer(playerid, "No tienes las llaves de este vehiculo.", 2000);
	if (Valid_Vehicle_Neon(GetVehicleModel(vehicleid)) == 0) return ShowInfoForPlayer(playerid, "Este vehiculo no admite neones.", 2000);
	Dialog_Show(playerid, ShowNeon, DIALOG_STYLE_LIST, "Que neon instalaras?","{FF0000}Rojo\n{2641FE}Azul\n{1EB032}Verde\n{FFFF00}Amarillo\n{FFC0CB}Rosado\n{FFFFFF}Blanco\n{cccccc}REMOVER NEON", "Continuar", "Salir");
	return 1;
}

Dialog:ShowNeon(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowInfoForPlayer(playerid, "No estas dentro de ningun vehiculo.", 2000);
	if (InfoJugador[playerid][jNivelVIP] == 0) return ShowInfoForPlayer(playerid, "Solo usuarios con membresia pueden usar este comando.", 2000);
	new vehicleid = GetPlayerVehicleID(playerid);
	new id = verificar_id_vehiculo(vehicleid);
	if (id == -1) return ShowInfoForPlayer(playerid, "Este vehiculo no figura ningun propietario.", 2000);
	if (acceso_vehiculo(playerid, vehicleid) != 0) return ShowInfoForPlayer(playerid, "No tienes las llaves de este vehiculo.", 2000);
	if (Valid_Vehicle_Neon(GetVehicleModel(vehicleid)) == 0) return ShowInfoForPlayer(playerid, "Este vehiculo no admite neones.", 2000);
	if (listitem == 6)
	{
	    if (InfoVehiculo[id][vModeloNeon] == 0) return ShowInfoForPlayer(playerid, "Este vehiculo no tiene neon instalado.", 2000);
        Delete_Neon(id);
		InfoVehiculo[id][vOnNeon] = 0;
		InfoVehiculo[id][vModeloNeon] = 0;
		guardar_int_mysql("vehiculos", "ModeloNeon", InfoVehiculo[id][vID], InfoVehiculo[id][vModeloNeon]);
		guardar_int_mysql("vehiculos", "OnNeon", InfoVehiculo[id][vID], InfoVehiculo[id][vOnNeon]);
		SendClientMessageEx(playerid, 0xccccccff, "Removiste el neon de tu %s.", GetVehicleName(vehicleid));
		return 1;
	}
	new modelo_neon = 18647+listitem;
	if (InfoVehiculo[id][vModeloNeon] == modelo_neon) return ShowInfoForPlayer(playerid, "Ese color de neon ya esta instalado.", 2000);
	InfoVehiculo[id][vOnNeon] = 1;
	InfoVehiculo[id][vModeloNeon] = modelo_neon;
	Colocar_Neon(id, vehicleid);
	SendClientMessageEx(playerid, 0xccccccff, "Nuevo neon %s en tu %s.", Es_Neon(modelo_neon), GetVehicleName(vehicleid));
	PlayerPlaySound(playerid, 1133, 0, 0, 0);
	guardar_int_mysql("vehiculos", "ModeloNeon", InfoVehiculo[id][vID], InfoVehiculo[id][vModeloNeon]);
	guardar_int_mysql("vehiculos", "OnNeon", InfoVehiculo[id][vID], InfoVehiculo[id][vOnNeon]);
	return 1;
}

CMD:neon(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowInfoForPlayer(playerid, "No estas dentro de ningun vehiculo.", 2000);
	new vehicleid = GetPlayerVehicleID(playerid);
	new id = verificar_id_vehiculo(vehicleid);
	if (id == -1) return ShowInfoForPlayer(playerid, "Este vehiculo no figura ningun propietario.", 2000);
	if (acceso_vehiculo(playerid, vehicleid) != 0) return ShowInfoForPlayer(playerid, "No tienes las llaves de este vehiculo.", 2000);
	if (InfoVehiculo[id][vModeloNeon] == 0) return ShowInfoForPlayer(playerid, "Este vehiculo no tiene neon instalado.", 2000);
	if (InfoVehiculo[id][vOnNeon] != 0)
	{
		InfoVehiculo[id][vOnNeon] = 0;
		Delete_Neon(id);
		SendClientMessage(playerid, 0xc0c0c0ff, "Neon desactivado.");
	}
	else
	{
		InfoVehiculo[id][vOnNeon] = 1;
		Colocar_Neon(id, vehicleid);
		SendClientMessage(playerid, 0xc0c0c0ff, "Neon activado.");
	}
	guardar_int_mysql("vehiculos", "OnNeon", InfoVehiculo[id][vID], InfoVehiculo[id][vOnNeon]);
	return 1;
}

CMD:salirbanda(playerid)
{
	if (InfoJugador[playerid][jFamMiembro] == 0) return ShowInfoForPlayer(playerid, "No tienes ninguna banda.", 2000);
	if (InfoJugador[playerid][jFamLider] != 0) return ShowInfoForPlayer(playerid, "No puedes salir de la banda siendo lider.", 2000);
	new fid = InfoJugador[playerid][jFamMiembro], string[190];
	format(string, sizeof string, "*** Miembro %s se salio de la banda por voluntad propia.", NombreRJugador(playerid));
	SendFamilyMessage(fid, 0x33CCFFFF, string);
	InfoJugador[playerid][jFamLider] = 0;
	InfoJugador[playerid][jFamMiembro] = 0;
	InfoJugador[playerid][jFamRango] = 1;
	guardar_int_mysql("cuentas", "FamLider", InfoJugador[playerid][jID], InfoJugador[playerid][jFamLider]);
	guardar_int_mysql("cuentas", "FamMiembro", InfoJugador[playerid][jID], InfoJugador[playerid][jFamMiembro]);
	guardar_int_mysql("cuentas", "FamRango", InfoJugador[playerid][jID], InfoJugador[playerid][jFamRango]);
	return 1;
}

CMD:crearcajero(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /crearcajero.", 2000);
	if (InfoJugador[playerid][pEditingMode] != 0) return ShowInfoForPlayer(playerid, "Te encuentras editando un objeto.", 2000);
	new id = -1, Float: x, Float: y, Float: z, string[256];
	GetPlayerPos(playerid, x, y, z);
	Loop(e, MAX_CAJEROS, 1) if (InfoCajero[e][atmPosX] == 0.0)
	{
		id = e;
		break;
	}
	if (id == -1) return SendClientMessageEx(playerid, -1, "Se alcanzo el maximo de cajeros %d, no se pueden crear mas.", MAX_CAJEROS);
	InfoCajero[id][atmModelo] = 19324;
	InfoCajero[id][atmPosX] = x;
	InfoCajero[id][atmPosY] = y;
	InfoCajero[id][atmPosZ] = z;
	InfoCajero[id][atmRotX] = 0.0;
	InfoCajero[id][atmRotY] = 0.0;
	InfoCajero[id][atmRotZ] = 0.0;
	InfoCajero[id][atmInterior] = GetPlayerInterior(playerid);
	InfoCajero[id][atmWorld] = GetPlayerVirtualWorld(playerid);
	InfoCajero[id][atmDestroy] = 0;
	InfoCajero[id][atmTiempo] = 0;
	Articulos_Cajero(id);
	EditDynamicObject(playerid, InfoCajero[id][atmObject]);
	InfoJugador[playerid][pEditingMode] = 74;
	edicion_sql_actual[playerid] = id;
	format(string, sizeof string, "Administracion: %s(%d) ha creado el cajero [ID:%d].", NombreRJugador(playerid), playerid, id);
	MensajeAdmin(string);
	new query[1500];
	//opcion idsql ya creada.
	if (InfoCajero[id][atmID] != 0)
	{
		mysql_format(DBngrp, query, sizeof query, "UPDATE cajeros SET Modelo = '%d', Pos_X = '%f', Pos_Y = '%f', Pos_Z = '%F', Rot_X = '%f', Rot_Y = '%f', Rot_Z = '%f', Interior = '%d', VirtualWorld = '%d', Destroy = '%d', Tiempo = '%d' WHERE ID = '%d'",
		InfoCajero[id][atmModelo],
		InfoCajero[id][atmPosX],
		InfoCajero[id][atmPosY],
		InfoCajero[id][atmPosZ],
		InfoCajero[id][atmRotX],
		InfoCajero[id][atmRotY],
		InfoCajero[id][atmRotZ],
		InfoCajero[id][atmInterior],
		InfoCajero[id][atmWorld],
		InfoCajero[id][atmDestroy],
		InfoCajero[id][atmTiempo],
		InfoCajero[id][atmID]);
		mysql_tquery(DBngrp, query);
		return id;
	}
	mysql_format(DBngrp, query, sizeof query, "INSERT INTO cajeros (Modelo, Pos_X, Pos_Y, Pos_Z, Rot_X, Rot_Y, Rot_Z, Interior, VirtualWorld, Destroy, Tiempo) VALUES ('%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d')",
	InfoCajero[id][atmModelo],
	InfoCajero[id][atmPosX],
	InfoCajero[id][atmPosY],
	InfoCajero[id][atmPosZ],
	InfoCajero[id][atmRotX],
	InfoCajero[id][atmRotY],
	InfoCajero[id][atmRotZ],
	InfoCajero[id][atmInterior],
	InfoCajero[id][atmWorld],
	InfoCajero[id][atmDestroy],
	InfoCajero[id][atmTiempo]);
	mysql_tquery(DBngrp, query, "OnCajeroCreate", "i", id);
	return id;
}

forward OnCajeroCreate(id);
public OnCajeroCreate(id)
{
	InfoCajero[id][atmID] = cache_insert_id();
	cache_unset_active();
	totalcajeros++;
	return 1;
}

CMD:revivircajero(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /revivircajero.", 2000);
	new id;
	if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/revivircajero [cajero id]");
	if (id < 1 || id > totalcajeros) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalcajeros);
	if (InfoCajero[id][atmPosX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de cajero no existe.", id);
	if (InfoCajero[id][atmTiempo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de cajero no esta destruido.", id);
	RecobrarCajero(id);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Recobraste vida al cajero ID %d.", id);
	return 1;
}

CMD:editarcajero(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /editarcajero.", 2000);
	if (InfoJugador[playerid][pEditingMode] != 0) return ShowInfoForPlayer(playerid, "Te encuentras editando un objeto.", 2000);
	new id;
	if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/editarcajero [cajero id]");
	if (id < 1 || id > totalcajeros) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalcajeros);
	if (InfoCajero[id][atmPosX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de cajero no existe.", id);
	if (!_enPos(playerid, 5.0, InfoCajero[id][atmPosX], InfoCajero[id][atmPosY], InfoCajero[id][atmPosZ])) return SendClientMessageEx(playerid, 0xccccccff, "No estas cerca del cajero %d.", id);
	EditDynamicObject(playerid, InfoCajero[id][atmObject]);
	InfoJugador[playerid][pEditingMode] = 74;
	edicion_sql_actual[playerid] = id;
	return 1;
}
CMD:editaratm(playerid, params[]) return cmd_editarcajero(playerid, params);

CMD:eliminarcajero(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /eliminarcajero.", 2000);
	new id, string[210], query[512];
	if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/eliminarcajero [cajero ID]");
	if (id < 1 || id > totalcajeros) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalcajeros);
	if (InfoCajero[id][atmPosX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de cajero no existe.", id);
	// dynamic
	if (InfoCajero[id][atmObject] != INVALID_STREAMER_ID)
	{
		DestroyDynamicObject(InfoCajero[id][atmObject]);
		InfoCajero[id][atmObject] = INVALID_STREAMER_ID;
	}
	if (IsValidDynamic3DTextLabel(InfoCajero[id][atmText3D])) { DestroyDynamic3DTextLabel(InfoCajero[id][atmText3D]); InfoCajero[id][atmText3D] = Text3D:INVALID_3DTEXT_ID; }
	// sql
	InfoCajero[id][atmModelo] = 0;
	InfoCajero[id][atmPosX] = 0.0;
	InfoCajero[id][atmPosY] = 0.0;
	InfoCajero[id][atmPosZ] = 0.0;
	InfoCajero[id][atmRotX] = 0.0;
	InfoCajero[id][atmRotY] = 0.0;
	InfoCajero[id][atmRotZ] = 0.0;
	InfoCajero[id][atmInterior] = 0;
	InfoCajero[id][atmWorld] = 0;
	InfoCajero[id][atmDestroy] = 0;
	InfoCajero[id][atmTiempo] = 0;
	mysql_format(DBngrp, query, sizeof query, "UPDATE cajeros SET Modelo = 0, Pos_X = 0.0, Pos_Y = 0.0, Pos_Z = 0.0, Rot_X = 0.0, Rot_Y = 0.0, Rot_Z = 0.0, Interior = 0, VirtualWorld = 0, Destroy = 0, Tiempo = 0 WHERE ID = '%d'", InfoCajero[id][atmID]);
	mysql_tquery(DBngrp, query);
	// message
	format(string, sizeof string, "Administracion: %s(ID:%d) ha eliminado el cajero [ID:%d].", NombreRJugador(playerid), playerid, id);
	MensajeAdmin(string);
	return 1;
}
CMD:borrarcajero(playerid, params[]) return cmd_eliminarcajero(playerid, params);

CMD:crearterritorio(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 11) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /crearterritorio.", 2000);
	new string[256], zone[MAX_ZONE_NAME], Float: x, Float: y, Float: z, Float: angle, id = -1;
	GetPlayer3DZone(playerid, zone, sizeof(zone));
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);
	Loop(e, MAX_TERRITORIOS, 1) if (InfoTerritorio[e][tLugarX] == 0.0)
	{
		id = e;
	}
	if (id == -1) return SendClientMessageEx(playerid, -1, "Se alcanzo el maximo de territorios %d, no se pueden crear mas.", MAX_TERRITORIOS);
	InfoTerritorio[id][tConquistado] = 0;
	alm(InfoTerritorio[id][tDominador], "Nadie");
	InfoTerritorio[id][tBandaID] = -1;
	InfoTerritorio[id][tLugarX] = x;
	InfoTerritorio[id][tLugarY] = y;
	InfoTerritorio[id][tLugarZ] = z;
	InfoTerritorio[id][tLugarR] = angle;
	InfoTerritorio[id][tTiempoConquista] = 0;
	InfoTerritorio[id][tBajoConquista] = 0;
	InfoTerritorio[id][tBajoDominador] = -1;
	InfoTerritorio[id][tTiempoAtaque] = 0;
	format(string, sizeof string, "Encargados: %s(%d) creo un territorio sin conquistar en %s.", NombreJugador(playerid), playerid, zone);
	MensajeEncargados(string);
	new query[1028];
	//opcion idsql ya creada.
	if (InfoTerritorio[id][tID] != 0)
	{
		mysql_format(DBngrp, query, sizeof query, "UPDATE territorios SET Conquistado = '%d', Dominador = '%e', BandaID = '%d', LugarX = '%f', LugarY = '%f', LugarZ = '%f', LugarR = '%f', TiempoConquista = '%d' WHERE ID = '%d'",
		InfoTerritorio[id][tConquistado],
		InfoTerritorio[id][tDominador],
		InfoTerritorio[id][tBandaID],
		InfoTerritorio[id][tLugarX],
		InfoTerritorio[id][tLugarY],
		InfoTerritorio[id][tLugarZ],
		InfoTerritorio[id][tLugarR],
		InfoTerritorio[id][tTiempoConquista],
		InfoTerritorio[id][tID]);
		mysql_tquery(DBngrp, query);
		return 1;
	}
	mysql_format(DBngrp, query, sizeof query, "INSERT INTO territorios (Conquistado, Dominador, BandaID, LugarX, LugarY, LugarZ, LugarR, TiempoConquista) VALUES ('%d', '%e', '%d',  '%f', '%f', '%f', '%f', '%d')",
	InfoTerritorio[id][tConquistado],
	InfoTerritorio[id][tDominador],
	InfoTerritorio[id][tBandaID],
	InfoTerritorio[id][tLugarX],
	InfoTerritorio[id][tLugarY],
	InfoTerritorio[id][tLugarZ],
	InfoTerritorio[id][tLugarR],
	InfoTerritorio[id][tTiempoConquista]);
	mysql_tquery(DBngrp, query, "OnTerritorioCreate", "i", id);
	Articulos_Territorio(id);
	return 1;
}

forward OnTerritorioCreate(id);
public OnTerritorioCreate(id)
{
	InfoTerritorio[id][tID] = cache_insert_id();
	cache_unset_active();
	totalterritorios++;
	Articulos_Territorio(id);
	return 1;
}

CMD:editarterritorio(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 11) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /editarterritorio.", 2000);
	new id, string[256];
	if (sscanf(params, "s[32]", params))
	{
		_Mensaje(playerid, 3, "0", "/editarterritorio [nombre] [territorio id]");
		_Mensaje(playerid, 1, "lugar - resetear", "Opciones:");
		return 1;
	}
	if (!strcmp(params, "lugar", true, 5))
	{
		if (sscanf(params, "s[32]i", params, id)) return _Mensaje(playerid, 3, "0", "/editarterritorio lugar [territorio id]");
		if (id < 1 || id > totalterritorios) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalterritorios);
		if (InfoTerritorio[id][tLugarX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de territorio no existe.", id);
        GetPlayerPos(playerid, InfoTerritorio[id][tLugarX], InfoTerritorio[id][tLugarY], InfoTerritorio[id][tLugarZ]);
		GetPlayerFacingAngle(playerid, InfoTerritorio[id][tLugarR]);
		guardar_float_mysql("territorios", "LugarX", InfoTerritorio[id][tID], InfoTerritorio[id][tLugarX]);
		guardar_float_mysql("territorios", "LugarY", InfoTerritorio[id][tID], InfoTerritorio[id][tLugarY]);
		guardar_float_mysql("territorios", "LugarZ", InfoTerritorio[id][tID], InfoTerritorio[id][tLugarZ]);
		guardar_float_mysql("territorios", "LugarR", InfoTerritorio[id][tID], InfoTerritorio[id][tLugarR]);
		Articulos_Territorio(id);
		format(string, sizeof string, "Administracion: %s(%d) ajusto la posicion del territorio (Pandillas) [ID:%d].", NombreJugador(playerid), playerid, id);
		MensajeAdmin(string);
	}
	else if (!strcmp(params, "resetear", true, 8))
	{
		if (sscanf(params, "s[32]i", params, id)) return _Mensaje(playerid, 3, "0", "/editarterritorio resetear [territorio id]");
		if (id < 1 || id > totalterritorios) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalterritorios);
		if (InfoTerritorio[id][tLugarX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de territorio no existe.", id);
	    InfoTerritorio[id][tConquistado] = 0;
		alm(InfoTerritorio[id][tDominador], "Nadie");
		InfoTerritorio[id][tBandaID] = -1;
		InfoTerritorio[id][tTiempoConquista] = 0;
		guardar_int_mysql("territorios", "Conquistado", InfoTerritorio[id][tID], InfoTerritorio[id][tConquistado]);
		guardar_string_mysql("territorios", "Dominador", InfoTerritorio[id][tID], InfoTerritorio[id][tDominador]);
		guardar_int_mysql("territorios", "BandaID", InfoTerritorio[id][tID], InfoTerritorio[id][tBandaID]);
		guardar_int_mysql("territorios", "TiempoConquista", InfoTerritorio[id][tID], InfoTerritorio[id][tTiempoConquista]);
		Articulos_Territorio(id);
		format(string, sizeof string, "Administracion: %s(%d) reseteo el territorio (ID:%d) y esta sin conquista.", NombreJugador(playerid), playerid, id);
		MensajeAdmin(string);
	}
	return 1;
}

CMD:anticheat(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 10) return 1;
	new dialog[1028], gformat[170];
	strcat(dialog, "Cheat\tStatus\n");
	format(gformat, sizeof gformat, "{EFEFEF}Armas\t%s\n", OnCheat(cheat_weapons)); strcat(dialog, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Balas\t%s\n", OnCheat(cheat_balas)); strcat(dialog, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Vehicle spawning\t%s\n", OnCheat(cheat_VehicleSpawning)); strcat(dialog, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Vehicle teleport (type 1)\t%s\n", OnCheat(cheat_Vehicle1teleport)); strcat(dialog, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Vehicle teleport (type 2)\t%s\n", OnCheat(cheat_Vehicle2teleport)); strcat(dialog, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Player teleport\t%s\n", OnCheat(cheat_PlayerTeleport)); strcat(dialog, gformat);
	format(gformat, sizeof gformat, "{EFEFEF}Job teleport\t%s\n", OnCheat(cheat_TPtrabajos)); strcat(dialog, gformat);
	Dialog_Show(playerid, ShowAntiCheat, DIALOG_STYLE_TABLIST_HEADERS, "{F80101}uwu anticheat", dialog, "Continuar", "Salir");
	return 1;
}

OnCheat(x)
{
	new name[32];
	if (x == 1) alm(name, "{00BB00}activado");
	else alm(name, "{E01005}desactivado");
	return name;
}

Dialog:ShowAntiCheat(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (cheat_weapons != 0) cheat_weapons = 0;
			else cheat_weapons = 1;
			cmd_anticheat(playerid);
		}
		case 1:
		{
			if (cheat_balas != 0) cheat_balas = 0;
			else cheat_balas = 1;
			cmd_anticheat(playerid);
		}
		case 2:
		{
			if (cheat_VehicleSpawning != 0) cheat_VehicleSpawning = 0;
			else cheat_VehicleSpawning = 1;
			cmd_anticheat(playerid);
		}
		case 3:
		{
			if (cheat_Vehicle1teleport != 0) cheat_Vehicle1teleport = 0;
			else cheat_Vehicle1teleport = 1;
			cmd_anticheat(playerid);
		}
		case 4:
		{
			if (cheat_Vehicle2teleport != 0) cheat_Vehicle2teleport = 0;
			else cheat_Vehicle2teleport = 1;
			cmd_anticheat(playerid);
		}
		case 5:
		{
			if (cheat_PlayerTeleport != 0) cheat_PlayerTeleport = 0;
			else cheat_PlayerTeleport = 1;
			cmd_anticheat(playerid);
		}
		case 6:
		{
			if (cheat_TPtrabajos != 0) cheat_TPtrabajos = 0;
			else cheat_TPtrabajos = 1;
			cmd_anticheat(playerid);
		}
	}
	return 1;
}

CMD:heridos(playerid)
{
	if (!Es_Banda(playerid, 1, 2, 3) && !Es_job(playerid, 15)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~dt.", 2000);
	new string[256], dialog[3000], cuerpos = 0, Str[128];
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jMuerto] != 0)
	{
		new estado2[64], Float: xp, Float: yp, Float: zp, location[MAX_ZONE_NAME];
		if (InfoJugador[playerid2][jAbatido] == 1) estado2 = "{CCCC00}abatido policial";
		else format(estado2, sizeof estado2, "{E94434}reaparece en %s", Segundos_tiempo(timer_muerte[playerid2]));
		GetPlayerPos(playerid2, xp, yp, zp);
		Get2DZone(location, sizeof location, xp, yp, zp);
		format(string, sizeof string, "{cccccc}%s en %s (%s{cccccc})\n", NombreJugador(playerid2), location, estado2);
		strcat(dialog, string);
		format(Str, sizeof Str, "enfermo_%d", cuerpos);
		SetPVarInt(playerid, Str, playerid2);
		cuerpos++;
  	}
	if (cuerpos == 0) return ShowInfoForPlayer(playerid, "No hay ningun jugador herido en el mapa.", 2000);
	Dialog_Show(playerid, ShowLlamados, DIALOG_STYLE_LIST, "Lista de heridos", dialog, "Continuar", "Salir");
	return 1;
}

Dialog:ShowLlamados(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem,StrPVar[40];
	format(StrPVar, sizeof StrPVar, "enfermo_%d",ID);
	new playerid2 = GetPVarInt(playerid, StrPVar), Float: xp, Float: yp, Float: zp;
	if (!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "La vicima se ha desconectado, se cancelo el gps.", 2000);
	if (GetPlayerInterior(playerid2) != 0) return ShowInfoForPlayer(playerid, "La victima esta dentro de un interior.", 2000);
	if (GetPlayerVirtualWorld(playerid2) != 0) return ShowInfoForPlayer(playerid, "La victima esta dentro de una dimension.", 2000);
	GetPlayerPos(playerid2, xp, yp, zp);
	if (IsPlayerInAnyVehicle(playerid))
	{
		foreach(new p: Player) if (IsPlayerConnectedEx(p) && IsPlayerInVehicle(p, GetPlayerVehicleID(playerid)))
		{
			SetPlayerCheckpoint(p, xp, yp, zp, 2.0);
			SendClientMessageEx(p, 0x3BA4C2FF, "Llamado sobre la victima %s, marcada en el mapa (radar).", NombreJugador(playerid2));
		}
		return 1;
	}
	SetPlayerCheckpoint(playerid, xp, yp, zp, 2.0);
	SendClientMessageEx(playerid, 0x3BA4C2FF, "Llamado sobre la victima %s, marcada en el mapa (radar).", NombreJugador(playerid2));
	return 1;
}

CMD:basurero(playerid)
{
	if (IsPlayerJob(playerid, 3) == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes el trabajo de Basurero, unete desde /trabajos.");
	new vehid = GetPlayerVehicleID(playerid), model = GetVehicleModel(vehid);
	if (!IsPlayerInRangeOfPoint(playerid, 80.0, 1058.7013, 1335.0293, 10.7424)) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas cerca del trabajo de basurero.");
	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xCCCCCCFF, "* Debes estar dentro de un vehiculo de basurero.");
	if (model != 408) return SendClientMessage(playerid, 0xCCCCCCFF, "* Este no es modelo de un camion de basura.");
	if(GetPlayerVehicleSeat(playerid) !=0)return SendClientMessage(playerid, 0xCCCCCCFF, "* Solo puedes usar el comando /basurero siendo conductor.");
	Dialog_Show(playerid, TrabajarBasurero, DIALOG_STYLE_LIST, "Como deseas trabajar?", "1. Una persona (conductor)\n2. Dos personas (acompañante)", "Continuar", "Cancelar");
	return 1;
}

Dialog:TrabajarBasurero(playerid, response, listitem, inputtext[])
{
	if(response)
	{
     	if(listitem == 0)
	    {
	        new vehid = GetPlayerVehicleID(playerid);
	        tu_veh_basura[playerid] = vehid;
	        idcompanero[playerid] = INVALID_PLAYER_ID;
			SetPlayerCheckpoint(playerid, point_basura[0][0], point_basura[0][1], point_basura[0][2], 2.0);
			puntos_recorridos_basu[playerid] = 0;
			SetPVarInt(playerid, "act_point", 1);
			GameTextForPlayer(playerid, "~p~Primer punto...", 5000, 5);
			SendClientMessage(playerid, 0x1EB032FF, "* Comenzaste a trabajar tu solo, ve al punto en tu mini-mapa.");
	    }
	    if(listitem == 1)
	    {
	        for(new i=0;i<MAX_PLAYERS;i++)
	 		{
	 		    if(GetPlayerVehicleSeat(i) == 1)
	 		    {
	 		        if (IsPlayerJob(i, 3) == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* Tu acompañante no tiene el trabajo de basurero.");
	 		        new vehid = GetPlayerVehicleID(playerid), string[210];
			        tu_veh_basura[playerid] = vehid;
			        idcompanero[playerid] = i;
			        idcompanero[i] = playerid;
					SetPlayerCheckpoint(playerid, point_basura[0][0], point_basura[0][1], point_basura[0][2], 2.0);
					puntos_recorridos_basu[playerid] = 0;
					SetPVarInt(playerid, "act_point", 1);
					SetPlayerCheckpoint(i, point_basura[0][0], point_basura[0][1], point_basura[0][2], 2.0);
					puntos_recorridos_basu[i] = 0;
					SetPVarInt(i, "act_point", 1);
					GameTextForPlayer(playerid, "~p~Primer punto...", 5000, 5);
					format(string, sizeof(string), "* Comenzaste a trabajar con %s(%d), conduce hasta el punto en tu mini-mapa.", NombreRJugador(i), i);
					SendClientMessage(playerid, 0x1EB032FF, string);
					format(string, sizeof(string), "* Comenzaste a trabajar con %s(%d), espera para recoger la basura.", NombreRJugador(playerid), playerid);
					SendClientMessage(i, 0x1EB032FF, string);
					return 1;
				}
			}
			SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes un acompañante en el lugar del camion.");
			return 1;
	    }
	}
	return 1;
}

CMD:muerte(playerid)
{
	if (InfoJugador[playerid][jAbatido] != 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* Fuiste abatido con cargos, si desconectas iras a prision.");
	if (timer_muerte[playerid] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* No estas a punto de morir o reaparecer.");
	SendClientMessageEx(playerid, 0xFFFFFFFF, "Vuelves a spawnear en {008BFF}%s", Segundos_tiempo(timer_muerte[playerid]));
	return 1;
}

CMD:suicidio(playerid)
{
	if (GetPVarInt(playerid, "EnCrack") == 0) return ShowInfoForPlayer(playerid, "No puedes usar este comando sino estas herido.", 2000);
	if (InfoJugador[playerid][jEncarcelado] != 0) return _CARCEL(playerid);
	new string[128];
	if (InfoJugador[playerid][jAbatido] != 0)
	{
        if (OnFaction(1) != 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* No puedes /aceptarmuerte si hay %d policias conectados, ya que estas abatido.", OnFaction(1));
		if (GetPlayerCash(playerid) < 15000) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes $15,000 dolares.");
		GivePlayerCash(playerid, -15000, "suicidarse");
		SendClientMessage(playerid, 0x008BFFFF, "Pagaste $15,000 para adelantar tu muerte. En breve reapareceras . . .");
		format(string, sizeof string, "Administracion: %s uso /aceptarmuerte.", NombreRJugador(playerid));
		MensajeAdmin(string);
		format(string, sizeof string, "** [ALERTA] %s uso /aceptarmuerte.", NombreRJugador(playerid));
		MensajeFaccion(1, 0x00CC00FF, string);
		MensajeFaccion(3, 0x00CC00FF, string);
		timer_muerte[playerid] = 0;
		VoiAlHospital(playerid);
		InfoJugador[playerid][jAbatido] = 0;
		guardar_int_mysql("cuentas", "Abatido", InfoJugador[playerid][jID], InfoJugador[playerid][jAbatido]);
		return 1;
	}
	if (timer_muerte[playerid] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* No estas a punto de morir o reaparecer.");
	if (GetPlayerCash(playerid) < 15000) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes $15,000 dolares.");
	GivePlayerCash(playerid, -15000, "suicidarse");
	SendClientMessage(playerid, 0x008BFFFF, "Pagaste $15,000 para adelantar tu muerte. En breve reapareceras . . .");
	timer_muerte[playerid] = 0;
	VoiAlHospital(playerid);
	format(string, sizeof string, "Administracion: %s uso /aceptarmuerte.", NombreRJugador(playerid));
	MensajeAdmin(string);
	format(string, sizeof string, "** [ALERTA] %s uso /aceptarmuerte.", NombreRJugador(playerid));
	MensajeFaccion(1, 0x00CC00FF, string);
	MensajeFaccion(3, 0x00CC00FF, string);
	return 1;
}
CMD:suicidarse(playerid) return cmd_suicidio(playerid);
CMD:aceptarmuerte(playerid) return cmd_suicidio(playerid);

//sistema de bandas en texdraw mejorado / by bernal
CMD:bandas(playerid)
{
	new string[256],content[200];
	strcat(string,content);
	strcat(string,"Bandas del servidor\n");
	strcat(string,"Miembros de mi banda\n");
	strcat(string,"{66FF66}Crear una nueva banda (Inhabiltado)\n");
	Dialog_Show(playerid, D_Bandas, DIALOG_STYLE_LIST,"Menu de bandas",string, "Continuar", "Salir");
	return 1;
}
Dialog:D_Bandas(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(listitem == 0)
	    {
	      new gformat[420], dialog[3048];
	      Loop(id, totalfamilias, 1) if (InfoFamilia[id][fTipo] != 0)
	    {
		  format(gformat, sizeof gformat, "ID: %d {FF9933}%s\n", id, InfoFamilia[id][fNombre]);
		  strcat(dialog, gformat);
	    }
	      Dialog_Show(playerid, D_Bandas2, DIALOG_STYLE_LIST, "Bandas del servidor", dialog, "Continuar", "Salir");
        }
	    if(listitem == 1)
	    {
          new familia = InfoJugador[playerid][jFamMiembro];
	      if (familia == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No eres miembro de una banda.");
          new query[256];
          mysql_format(DBngrp, query, sizeof query, "SELECT * FROM cuentas WHERE FamMiembro = '%d'", familia);
          mysql_tquery(DBngrp, query, "OnMembersFamily", "dd", playerid, familia);
        }
    }
    return 1;
}
Dialog:D_Bandas2(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(listitem == 0)
	    {
          new gformat[999999], dialog[999999];
          Loop(id, 2, 1) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 1)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 3, 2) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 2)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 4, 3) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 3)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 5, 4) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 4)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 6, 5) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 5)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 7, 6) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 6)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 8, 7) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 7)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 9, 8) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 8)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 10, 9) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 9)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 11, 10) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 10)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 12, 11) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 11)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 13, 12) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 12)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 14, 13) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 13)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 15, 14) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 13)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 15, 14) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 14)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 16, 15) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 15)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 17, 16) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 16)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 18, 17) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 17)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 19, 18) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 18)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 20, 19) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 19)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 21, 20) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 20)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 22, 21) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 21)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 23, 22) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 22)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 24, 23) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 23)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 25, 24) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 24)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 26, 25) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 25)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 27, 26) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 26)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 28, 26) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 27)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 29, 28) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 28)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 30, 29) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 29)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 31, 20) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 30)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 32, 31) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 31)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 33, 32) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 32)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 34, 33) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 33)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 35, 34) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 34)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 36, 35) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 35)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 37, 36) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 36)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 38, 37) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 37)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 39, 38) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 38)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 40, 39) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
	    if(listitem == 39)
	    {
          new gformat[42000], dialog[304800];
          Loop(id, 41, 40) if (InfoFamilia[id][fTipo] != 0)
        {
 	      format(gformat, sizeof gformat, "{CCCCFF}ID: {FFFFFF}%d\n{CCCCFF}Logo: {FFFFFF}%s\n{CCCCFF}Nombre: {FFFFFF}%s\n{CCCCFF}Lider: {FFFFFF}%s\n{CCCCFF}Miembros: {FFFFFF}%d/40 {CCCCFF}({66FF00}%d{CCCCFF})\n", id, InfoFamilia[id][fLogo], InfoFamilia[id][fNombre], InfoFamilia[id][fLider], GetMiembrosFamilia(id), OnFamily(id));
	      strcat(dialog, gformat);
	    }
          Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFCC33}Informacion de banda", dialog, "Cerrar", "");
        }
    }
    return 1;
}

CMD:f(playerid, params[])
{
	new id = InfoJugador[playerid][jFamMiembro], string[512];
	if (id == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No formas parte de ninguna familia o banda.");
	if (InfoFamilia[id][fChat] != 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* El chat de la banda esta bloqueado por un lider.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/f [texto]");
	format(string, sizeof string, "{6BBFA0}[%s] %s %s:{FFFFFF} %s", InfoFamilia[id][fLogo], fam_rango[id][InfoJugador[playerid][jFamRango]-1], NombreRJugador(playerid), params);
	SendFamilyMessage(id, 0xFFFFFFFF, string);
	return 1;
}

CMD:togfam(playerid)
{
	if (InfoJugador[playerid][jFamMiembro] == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No formas parte de ninguna banda.");
	if (InfoJugador[playerid][jTogFam] == 0)
	{
		InfoJugador[playerid][jTogFam] = 1;
		_Mensaje(playerid, 2, "0", "Mensajes de la Banda desactivados.");
	}
	else
	{
		InfoJugador[playerid][jTogFam] = 0;
		_Mensaje(playerid, 2, "0", "Mensajes de la Banda activados.");
	}
	return 1;
}

CMD:togwsp(playerid)
{
	if (Es_Pandilla_Mafia(playerid) == 0) return  ShowInfoForPlayer(playerid, "debes ser de una banda ilegal.", 2000);
	if (!_Telefono(playerid)) return ShowInfoForPlayer(playerid, "No tienes un telefono en ninguna mano.", 2000);
    if (!B_WSP[playerid])
	{
        B_WSP[playerid] = 1;
        _Mensaje(playerid, 2, "0", "Has silenciado el grupo de WhatsApp.");
    }
	else
	{
        B_WSP[playerid] = 0;
        _Mensaje(playerid, 2, "0", "Has activado el grupo de WhatsApp.");
    }
    return 1;
}

CMD:wsp(playerid, params[])
{
	new id = InfoJugador[playerid][jFamMiembro], gformat[290], Float: cx, Float: cy, Float: cz;
	if (Es_Pandilla_Mafia(playerid) == 0) return  ShowInfoForPlayer(playerid, "debes ser de una banda ilegal.", 2000);
	if (!_Telefono(playerid)) return ShowInfoForPlayer(playerid, "No tienes un telefono en ninguna mano.", 2000);
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/wsp [texto]");
	format(gformat, sizeof gformat, "[WSP de %s] %s", NombreJugador(playerid), params);
	foreach(Player, playerid2) if (InfoJugador[playerid2][jFamMiembro] == id) { if (!B_WSP[playerid2]) { SendSplitMessage(playerid2, 0x00D356FF, gformat); } }
	GetPlayerPos(playerid, cx, cy, cz);
	PlayerPlaySound(playerid, 1053, cx, cy, cz);
	GameTextForPlayer(playerid, "~g~WSP", 2000, 1);
	return 1;
}

stock GetPlayerFirstName(playerid)
{
    new
        namestring[2][MAX_PLAYER_NAME],
        name[MAX_PLAYER_NAME];

    GetPlayerName(playerid,name,MAX_PLAYER_NAME);
    split(name, namestring, '_');
    return namestring[0];
}

CMD:cajafuerte(playerid)
{
	new id = InfoJugador[playerid][jFamMiembro], string[512], indice[190];
	if (Es_Pandilla_Mafia(playerid) == 0) return  ShowInfoForPlayer(playerid, "debes ser de una banda ilegal.", 2000);
	if (InfoJugador[playerid][jFamRango] < 3) return SendClientMessage(playerid, 0xCCCCCCFF, "* Solo rangos 3 en adelante pueden usar la caja fuerte.");
	if (InfoFamilia[id][fArmarioX] == 0.0) return SendClientMessage(playerid, 0xCCCCCCFF, "* Tu banda no tiene asignado el lugar de la caja fuerte.");
	if (IsPlayerInRangeOfPoint(playerid, 4.0, InfoFamilia[id][fArmarioX], InfoFamilia[id][fArmarioY], InfoFamilia[id][fArmarioZ]) && InfoJugador[playerid][jInterior] == InfoFamilia[id][fArmarioInt] && InfoJugador[playerid][jVirtualWorld] == InfoFamilia[id][fArmarioVW])
	{
		format(string, sizeof string,  "{FFFFFF}Dinero: {00CC00}$%s\n{FFFFFF}Armario", diner_coma(InfoFamilia[id][fDinero]));
		format(indice, sizeof indice, "Caja fuerte: {CCCC00}%s", InfoFamilia[id][fLogo]);
		Dialog_Show(playerid, ShowCajaFuerte, DIALOG_STYLE_LIST, indice, string, "Continuar", "Salir");
		return 1;
	}
	SendClientMessage(playerid, 0xCCCCCCFF, "* No estas en el punto de la caja fuerte.");
	return 1;
}

Dialog:ShowCajaFuerte(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new id = InfoJugador[playerid][jFamMiembro], gformat[190];
	if (id == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No formas parte de ninguna banda.");
	if (InfoJugador[playerid][jFamRango] < 3) return SendClientMessage(playerid, 0xCCCCCCFF, "* Solo rangos 3 en adelante pueden usar la caja fuerte.");
	if (InfoFamilia[id][fArmarioX] == 0.0) return SendClientMessage(playerid, 0xCCCCCCFF, "* Tu banda no tiene asignado el lugar de la caja fuerte.");
	switch (listitem)
	{
		case 0:
		{
			format(gformat, sizeof gformat, "Dinero: {00CC00}$%s", diner_coma(InfoFamilia[id][fDinero]));
			Dialog_Show(playerid, CajaFuerteDinero, DIALOG_STYLE_LIST, gformat, "Retirar dinero\nDepositar dinero", "Continuar", "Volver");
		}
		case 1:
		{
			ActualizarManos(playerid);
			new dialog[1024], string[190];
			Loop(x, 12, 0)
			{
				new ArmarioObj = InfoFamilia[id][fArmarioObjeto][x];
				if (ArmarioObj == 0) format(string, sizeof string, "{cccccc}Vacio\n");
				else format(string, sizeof string, "{ffffff}%s [%d]\n", InfoInventario[ArmarioObj][NombreObjeto], InfoFamilia[id][fArmarioCantidad][x]);
				strcat(dialog, string);
			}
			format(string, sizeof string, "{cccc00}-----\n");
			strcat(dialog, string);
			if (InfoJugador[playerid][jManoDerecha] == 0) format(string, sizeof string, "{cccccc}Mano derecha: vacia\n");
			else format(string, sizeof string, "{ffffff}Mano derecha: %s [%d]\n", InfoInventario[InfoJugador[playerid][jManoDerecha]][NombreObjeto], InfoJugador[playerid][jManoDerechaCant]);
			strcat(dialog, string);
			if (InfoJugador[playerid][jManoIzquierda] == 0) format(string, sizeof string, "{cccccc}Mano izquierda: vacia\n");
			else format(string, sizeof string, "{ffffff}Mano izquierda: %s [%d]\n", InfoInventario[InfoJugador[playerid][jManoIzquierda]][NombreObjeto], InfoJugador[playerid][jManoIzquierdaCant]);
			strcat(dialog, string);
			format(gformat, sizeof gformat, "Armario: {CCCC00}%s", InfoFamilia[id][fLogo]);
			Dialog_Show(playerid, CajaFuerteArmario, DIALOG_STYLE_LIST, gformat, dialog, "Continuar", "Volver");
		}
	}
	return 1;
}

Dialog:CajaFuerteDinero(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_cajafuerte(playerid);
	new id = InfoJugador[playerid][jFamMiembro], gformat[190];
	if (id == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No formas parte de ninguna familia o banda.");
	if (InfoJugador[playerid][jFamRango] < 3) return SendClientMessage(playerid, 0xCCCCCCFF, "* Solo rangos 3 en adelante pueden usar la caja fuerte.");
	if (InfoFamilia[id][fArmarioX] == 0.0) return SendClientMessage(playerid, 0xCCCCCCFF, "* Tu familia no tiene asignado el lugar de la caja fuerte.");
	if (listitem == 0)
	{
		format(gformat, sizeof gformat, "Dinero: {00CC00}$%s", diner_coma(InfoFamilia[id][fDinero]));
		Dialog_Show(playerid, CajaFuerteDineroR, DIALOG_STYLE_INPUT, gformat, "{CCCCCC}Ingresa el monto que deseas retirar:\n", "Continuar", "Volver");
	}
	else if (listitem == 1)
	{
		format(gformat, sizeof gformat, "Dinero: {00CC00}$%s", diner_coma(InfoFamilia[id][fDinero]));
		Dialog_Show(playerid, CajaFuerteDineroD, DIALOG_STYLE_INPUT, gformat, "{CCCCCC}Ingresa el monto que deseas depositar:\n", "Continuar", "Volver");
	}
	return 1;
}

Dialog:CajaFuerteDineroR(playerid, response, listitem, inputtext[])
{
	new id = InfoJugador[playerid][jFamMiembro], gformat[260];
	if (id == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No formas parte de ninguna banda.");
	if (InfoJugador[playerid][jFamRango] < 3) return SendClientMessage(playerid, 0xCCCCCCFF, "* Solo rangos 3 en adelante pueden usar la caja fuerte.");
	if (InfoFamilia[id][fArmarioX] == 0.0) return SendClientMessage(playerid, 0xCCCCCCFF, "* Tu banda no tiene asignado el lugar de la caja fuerte.");
	if (!response)
	{
		format(gformat, sizeof gformat, "Dinero: {00CC00}$%s", diner_coma(InfoFamilia[id][fDinero]));
		Dialog_Show(playerid, CajaFuerteDinero, DIALOG_STYLE_LIST, gformat, "Retirar dinero\nDepositar dinero", "Continuar", "Volver");
		return 1;
	}
	new amount = strval(inputtext);
	if (!isnumeric(inputtext)) return ShowInfoForPlayer(playerid, "Solo numeros porfavor, vuelve a intentarlo.", 2000);
	if (amount < 1) return ShowInfoForPlayer(playerid, "No puedes retirar menos de un dolar.", 2000);
	if (amount > InfoFamilia[id][fDinero]) return _Mensaje(playerid, 2, "0", "No hay esa cantidad en la caja fuerte.");
	InfoFamilia[id][fDinero] -= amount;
	guardar_int_mysql("familias", "Dinero", InfoFamilia[id][fID_sql], InfoFamilia[id][fDinero]);
	GivePlayerCash(playerid, amount, "retiro de fondos de familia");
	SendClientMessageEx(playerid, 0x00CC00FF, "Retiraste $s de la caja fuerte de la familia. Disponible: $%s", diner_coma(amount), diner_coma(InfoFamilia[id][fDinero]));
	format(gformat, sizeof gformat, "* %s retiro %s de la caja fuerte.", NombreRJugador(playerid), diner_coma(amount));
	SendFamilyMessage(id, C_LIGHTBLUE, gformat);
	format(gformat, sizeof gformat, "[+] %s retiro $%s de la cajafuerte de la familia %d.", NombreRJugador(playerid), diner_coma(amount), InfoJugador[playerid][jFamMiembro] + 1);
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], gformat, 6);
	return 1;
}

Dialog:CajaFuerteDineroD(playerid, response, listitem, inputtext[])
{
	new id = InfoJugador[playerid][jFamMiembro], gformat[190];
	if (id == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No formas parte de ninguna banda.");
	if (InfoJugador[playerid][jFamRango] < 3) return SendClientMessage(playerid, 0xCCCCCCFF, "* Solo rangos 3 en adelante pueden usar la caja fuerte.");
	if (InfoFamilia[id][fArmarioX] == 0.0) return SendClientMessage(playerid, 0xCCCCCCFF, "* Tu banda no tiene asignado el lugar de la caja fuerte.");
	if (!response)
	{
		format(gformat, sizeof gformat, "Dinero: {00CC00}$%s", diner_coma(InfoFamilia[id][fDinero]));
		Dialog_Show(playerid, CajaFuerteDinero, DIALOG_STYLE_LIST, gformat, "Retirar dinero\nDepositar dinero", "Continuar", "Volver");
		return 1;
	}
	new amount = strval(inputtext);
	if (!isnumeric(inputtext)) return ShowInfoForPlayer(playerid, "Solo numeros porfavor, vuelve a intentarlo.", 2000);
	if (amount < 1) return _Mensaje(playerid, 2, "0", "No puedes depositar menos de un dolar.");
	if (GetPlayerCash(playerid) < amount) return _Mensaje(playerid, 2, "0", "No tienes la cantidad ingresada para depositar.");
	InfoFamilia[id][fDinero] += amount;
	guardar_int_mysql("familias", "Dinero", InfoFamilia[id][fID_sql], InfoFamilia[id][fDinero]);
	GivePlayerCash(playerid, -amount, "deposito de fondos de familia");
	SendClientMessageEx(playerid, 0x00CC00FF, "Depositaste $s en la caja fuerte de la banda. Disponible: $%s", diner_coma(amount), diner_coma(InfoFamilia[id][fDinero]));
	return 1;
}

Dialog:CajaFuerteArmario(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_cajafuerte(playerid);
	new id = InfoJugador[playerid][jFamMiembro], gGun[45];
	if (id == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No formas parte de ninguna banda.");
	if (InfoJugador[playerid][jFamRango] < 3) return SendClientMessage(playerid, 0xCCCCCCFF, "* Solo rangos 3 en adelante pueden usar la caja fuerte.");
	if (InfoFamilia[id][fArmarioX] == 0.0) return SendClientMessage(playerid, 0xCCCCCCFF, "* Tu banda no tiene asignado el lugar de la caja fuerte.");
	switch (listitem)
	{
		case 0..11:
		{
			new objeto = listitem;
			ActualizarManos(playerid);
			new ArmarioObj = InfoFamilia[id][fArmarioObjeto][objeto], Cant = InfoFamilia[id][fArmarioCantidad][objeto];
			if (ArmarioObj == 0) return ShowInfoForPlayer(playerid, "esta ranura se encuentra vacia.", 2000);
			if (ArmarioObj == 131)
			{
				if (InfoJugador[playerid][jManoDerecha] == 0 && InfoJugador[playerid][jManoIzquierda] == 0)
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				} else return ShowInfoForPlayer(playerid, "Debes tener las manos vacias.", 2000);
			}
			if (Objeto_Carga(ArmarioObj)) { if (Tiene_Obj_Carga(playerid) != 0) { ShowInfoForPlayer(playerid, "Ya posees objetos de carga en una de tus manos.", 2000); return 1; } }
			if (InfoJugador[playerid][jManoDerecha] == 0)
			{
				if (InfoInventario[ArmarioObj][IDArma] > 0)
				{
					new arma = InfoInventario[ArmarioObj][IDArma], municion = Cant;
					if (municion > 0) { GivePlayerWeapon(playerid, arma, municion); }
				}
				InfoJugador[playerid][jManoDerecha] = ArmarioObj;
				InfoJugador[playerid][jManoDerechaCant] = Cant;
				PonerObjeto(playerid, 1, ArmarioObj);
				ActualizarManos(playerid);
				InfoFamilia[id][fArmarioObjeto][objeto] = 0;
				format(gGun, sizeof gGun, "ArmarioObjeto%d", objeto+1);
				guardar_int_mysql("familias", gGun, InfoFamilia[id][fID_sql], InfoFamilia[id][fArmarioObjeto][objeto]);
				InfoFamilia[id][fArmarioCantidad][objeto] = 0;
				format(gGun, sizeof gGun, "ArmarioCantidad%d", objeto+1);
				guardar_int_mysql("familias", gGun, InfoFamilia[id][fID_sql], InfoFamilia[id][fArmarioCantidad][objeto]);
				SendClientMessageEx(playerid, 0xA7C200FF, "Sacas %s del armario.", InfoInventario[ArmarioObj][NombreObjeto]);
				if (Objeto_Carga(ArmarioObj)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				return 1;
			}
			else if (InfoJugador[playerid][jManoIzquierda] == 0)
			{
				InfoJugador[playerid][jManoIzquierda] = ArmarioObj;
				InfoJugador[playerid][jManoIzquierdaCant] = Cant;
				PonerObjeto(playerid, 2, ArmarioObj);
				ActualizarManos(playerid);
				InfoFamilia[id][fArmarioObjeto][objeto] = 0;
				format(gGun, sizeof gGun, "ArmarioObjeto%d", objeto+1);
				guardar_int_mysql("familias", gGun, InfoFamilia[id][fID_sql], InfoFamilia[id][fArmarioObjeto][objeto]);
				InfoFamilia[id][fArmarioCantidad][objeto] = 0;
				format(gGun, sizeof gGun, "ArmarioCantidad%d", objeto+1);
				guardar_int_mysql("familias", gGun, InfoFamilia[id][fID_sql], InfoFamilia[id][fArmarioCantidad][objeto]);
				SendClientMessageEx(playerid, 0xA7C200FF, "Sacas %s del armario.", InfoInventario[ArmarioObj][NombreObjeto]);
				if (Objeto_Carga(ArmarioObj)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				return 1;
			}
			ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, debes tirar o guardar lo que llevas en ellas.", 2000);
		}
		case 12: return 1;
		case 13: //guardar mano derecha
		{
			ActualizarManos(playerid);
			if (InfoJugador[playerid][jManoDerecha] == 0) return ShowInfoForPlayer(playerid, "No tienes nada en tu mano derecha.", 2000);
			new Mano = InfoJugador[playerid][jManoDerecha], Cant = InfoJugador[playerid][jManoDerechaCant], objeto = -1;
			Loop(x, 12, 0) if (InfoFamilia[id][fArmarioObjeto][x] == 0)
			{
				objeto = x;
				break;
			}
			if (objeto == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No hay mas espacio en el armario de la familia.");
			if (InfoInventario[Mano][IDArma] > 0) //- Si es arma
			{
				if (IntentoChitearBalas(playerid)) return 1;
				Cant = InfoJugador[playerid][jManoDerechaCant];
				RemovePlayerWeapon(playerid, InfoInventario[Mano][IDArma]);
			}
			if (InfoJugador[playerid][jManoDerecha] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			InfoFamilia[id][fArmarioObjeto][objeto] = Mano;
			format(gGun, sizeof gGun, "ArmarioObjeto%d", objeto+1);
			guardar_int_mysql("familias", gGun, InfoFamilia[id][fID_sql], InfoFamilia[id][fArmarioObjeto][objeto]);
			InfoFamilia[id][fArmarioCantidad][objeto] = Cant;
			format(gGun, sizeof gGun, "ArmarioCantidad%d", objeto+1);
			guardar_int_mysql("familias", gGun, InfoFamilia[id][fID_sql], InfoFamilia[id][fArmarioCantidad][objeto]);
			RemovePlayerAttachedObject(playerid, 6);
			if (Objeto_Carga(InfoJugador[playerid][jManoDerecha])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			InfoJugador[playerid][jManoDerecha] = 0;
			InfoJugador[playerid][jManoDerechaCant] = 0;
			ActualizarManos(playerid);
			SendClientMessageEx(playerid, 0xA7C200FF, "Guardaste en el armario %s.", InfoInventario[Mano][NombreObjeto]);
		}
		case 14: //guardar mano izquierda
		{
			ActualizarManos(playerid);
			if (InfoJugador[playerid][jManoIzquierda] == 0) return ShowInfoForPlayer(playerid, "No tienes nada en tu mano izquierda.", 2000);
			new Mano = InfoJugador[playerid][jManoIzquierda], Cant = InfoJugador[playerid][jManoIzquierdaCant], objeto = -1;
			Loop(x, 12, 0) if (InfoFamilia[id][fArmarioObjeto][x] == 0)
			{
				objeto = x;
				break;
			}
			if (objeto == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No hay mas espacio en el armario de la familia.");
			if (InfoInventario[Mano][IDArma] > 0) //- Si es arma
			{
				if (IntentoChitearBalas(playerid)) return 1;
				Cant = InfoJugador[playerid][jManoIzquierdaCant];
				RemovePlayerWeapon(playerid, InfoInventario[Mano][IDArma]);
			}
			if (InfoJugador[playerid][jManoIzquierda] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			InfoFamilia[id][fArmarioObjeto][objeto] = Mano;
			format(gGun, sizeof gGun, "ArmarioObjeto%d", objeto+1);
			guardar_int_mysql("familias", gGun, InfoFamilia[id][fID_sql], InfoFamilia[id][fArmarioObjeto][objeto]);
			InfoFamilia[id][fArmarioCantidad][objeto] = Cant;
			format(gGun, sizeof gGun, "ArmarioCantidad%d", objeto+1);
			guardar_int_mysql("familias", gGun, InfoFamilia[id][fID_sql], InfoFamilia[id][fArmarioCantidad][objeto]);
			RemovePlayerAttachedObject(playerid, 7);
			if (Objeto_Carga(InfoJugador[playerid][jManoIzquierda])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			InfoJugador[playerid][jManoIzquierda] = 0;
			InfoJugador[playerid][jManoIzquierdaCant] = 0;
			ActualizarManos(playerid);
			SendClientMessageEx(playerid, 0xA7C200FF, "Guardaste en el armario %s.", InfoInventario[Mano][NombreObjeto]);
		}
	}
	return 1;
}

CMD:hacerliderbanda(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][2] == 0) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /hacerliderfam.", 2000);
	new playerid2, familia, string[512];
	if (sscanf(params, "dd", playerid2, familia)) return _Mensaje(playerid, 3, "0", "/hacerlider [id jugador] [familia]");
	if (familia < 1 || familia > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "ID de familia incorrecta, intente entre 1-%d.", totalfamilias);
	if (!InfoFamilia[familia][fTipo]) return SendClientMessage(playerid, 0xCCCCCCFF, "ID de familia invalida, no existe.");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, 0xCCCCCCFF, "El jugador seleccionado, no esta conectado.");
	if (strcmp(InfoFamilia[familia][fLider], "disponible", true) == 0)
	{
		if (InfoJugador[playerid2][jFamLider] != 0) return SendClientMessage(playerid, 0xCCCCCCFF, "Ese jugador ya es lider de una familia.");
		if (InfoJugador[playerid2][jFamMiembro] != 0) return SendClientMessage(playerid, 0xCCCCCCFF, "Ese jugador ya es miembro de una familia.");
		alm(InfoFamilia[familia][fLider], InfoJugador[playerid2][jNombre_Apellido]);
		guardar_string_mysql("familias", "Lider", InfoFamilia[familia][fID_sql], InfoFamilia[familia][fLider]);
		InfoJugador[playerid2][jFamLider] = familia;
		InfoJugador[playerid2][jFamMiembro] = familia;
		InfoJugador[playerid2][jFamRango] = InfoFamilia[familia][fMaxRangos];
		guardar_int_mysql("cuentas", "FamLider", InfoJugador[playerid2][jID], InfoJugador[playerid2][jFamLider]);
		guardar_int_mysql("cuentas", "FamMiembro", InfoJugador[playerid2][jID], InfoJugador[playerid2][jFamMiembro]);
		guardar_int_mysql("cuentas", "FamRango", InfoJugador[playerid2][jID], InfoJugador[playerid2][jFamRango]);
		format(string, sizeof string, "(El encargado) %s te asigno lider de la banda: %s", InfoJugador[playerid][jNombre_Apellido], InfoFamilia[familia][fNombre]);
		SendClientMessage(playerid2, 0xCCCC00FF, string);
		format(string, sizeof string, "Administracion: %s fijo lider a %s de la banda: %s", InfoJugador[playerid][jNombre_Apellido], InfoJugador[playerid2][jNombre_Apellido], InfoFamilia[familia][fNombre]);
		MensajeAdmin(string);
		return 1;
	}
	SendClientMessage(playerid, 0x008BFFFF, "Esa banda ya tiene un lider en especifico, revisa /bandas.");
	return 1;
}

CMD:darmiembrobanda(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][2] == 0) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /darmiembrofam.", 2000);
	new playerid2, fam_id, rango, string[256];
	if (sscanf(params, "udd", playerid2, fam_id, rango)) return _Mensaje(playerid, 3, "0", "/darmiembrofam [id jugador] [banda] [rango]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
	if (fam_id == 0)
	{
		if (InfoJugador[playerid2][jFamMiembro] == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "Ese jugador no esta en ninguna banda.");
		InfoJugador[playerid2][jFamLider] = 0;
		InfoJugador[playerid2][jFamRango] = 0;
		InfoJugador[playerid2][jFamMiembro] = 0;
		guardar_int_mysql("cuentas", "FamLider", InfoJugador[playerid2][jID], InfoJugador[playerid2][jFamLider]);
		guardar_int_mysql("cuentas", "FamMiembro", InfoJugador[playerid2][jID], InfoJugador[playerid2][jFamMiembro]);
		guardar_int_mysql("cuentas", "FamRango", InfoJugador[playerid2][jID], InfoJugador[playerid2][jFamRango]);
		SendClientMessageEx(playerid2, 0x33CCFFFF, "(Admin) %s te saco de la banda en la que estabas.", NombreRJugador(playerid));
		format(string, sizeof string, "Administracion: %s saco a %s de la banda en la que estaba.", NombreRJugador(playerid), NombreRJugador(playerid2));
		MensajeAdmin(string);
		return 1;
	}
	if (fam_id < 1 || fam_id > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "ID de banda incorrecta, intente entre 1-%d.", totalfamilias);
	if (!InfoFamilia[fam_id][fTipo]) return SendClientMessage(playerid, 0xCCCCCCFF, "ID de banda invalida, no existe.");
	if (rango < 1 || rango > InfoFamilia[fam_id][fMaxRangos]) return SendClientMessageEx(playerid, 0xCCCCCCFF, "ID de rango incorrecto, intente entre 1-%d.", InfoFamilia[fam_id][fMaxRangos]);
	InfoJugador[playerid2][jFamRango] = rango;
	InfoJugador[playerid2][jFamMiembro] = fam_id;
	guardar_int_mysql("cuentas", "FamMiembro", InfoJugador[playerid2][jID], InfoJugador[playerid2][jFamMiembro]);
	guardar_int_mysql("cuentas", "FamRango", InfoJugador[playerid2][jID], InfoJugador[playerid2][jFamRango]);
	SendClientMessageEx(playerid2, 0x33CCFFFF, "(Admin) %s te ha asignado miembro (rank %d) de la banda: %s", NombreRJugador(playerid), rango, InfoFamilia[fam_id][fNombre]);
	format(string, sizeof string, "Administracion: %s asigno miembro de la banda %s a %s (rank %d).", NombreRJugador(playerid), InfoFamilia[fam_id][fNombre], NombreRJugador(playerid2), rango);
	MensajeAdmin(string);
	return 1;
}

CMD:qfamoff(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][2] == 0) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /quitarfamiliaoff.", 2000);
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/qfamoff [Nombre_Apellido]");
	if (VerificarCuenta(params))
	{
		new familia, gformat[320];
		reg_int(0, "FamMiembro", familia);
		cache_unset_active();
		if (familia == 0) return SendClientMessageEx(playerid, -1, "%s no esta en ninguna familia.", params);
		mysql_format(DBngrp, gformat, sizeof gformat, "UPDATE cuentas SET FamMiembro = 0, FamLider = 0, FamRango = 0 WHERE Nombre_Apellido = '%e'", params);
		mysql_tquery(DBngrp, gformat);
		format(gformat, sizeof gformat, "Administracion: %s(%d) expulso de la familia %s a %s. (offline)", NombreRJugador(playerid), playerid, InfoFamilia[familia][fNombre], params);
		MensajeAdmin(gformat);
		return 1;
	}
	ShowInfoForPlayer(playerid, "No existe esa cuenta.", 2000);
	return 1;
}
CMD:quitarfamoff(playerid, params[]) return cmd_qfamoff(playerid, params);
CMD:expulsarfamoff(playerid, params[]) return cmd_qfamoff(playerid, params);
CMD:quitarbandaoff(playerid, params[]) return cmd_qfamoff(playerid, params);

CMD:quitarbanda(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][2] == 0) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /quitarfamilia.", 2000);
	new string[190], playerid2;
	if (sscanf(params, "u", playerid2)) return _Mensaje(playerid, 3, "0", "/quitarfamilia [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
	InfoJugador[playerid2][jFamLider] = 0;
	InfoJugador[playerid2][jFamMiembro] = 0;
	InfoJugador[playerid2][jFamRango] = 0;
	guardar_int_mysql("cuentas", "FamLider", InfoJugador[playerid2][jID], InfoJugador[playerid2][jFamLider]);
	guardar_int_mysql("cuentas", "FamMiembro", InfoJugador[playerid2][jID], InfoJugador[playerid2][jFamMiembro]);
	guardar_int_mysql("cuentas", "FamRango", InfoJugador[playerid2][jID], InfoJugador[playerid2][jFamRango]);
	format(string, sizeof string, "Administracion: %s a limpiado las variables de familia a %s", NombreRJugador(playerid), NombreRJugador(playerid2));
	MensajeAdmin(string);
	return 1;
}

CMD:crearbanda(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][2] == 0) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /crearfamilia.", 2000);
	new tipo, string[256], query[1028];
	if (sscanf(params, "d", tipo)) return _Mensaje(playerid, 3, "0", "/crearfamilia [tipo]");
	if (tipo < 1 || tipo > 8) return SendClientMessage(playerid, 0xCCCC00FF, "Tipos: 1(Pandilla) 2(Mafia) 3(Legal) 4(Motoqueros) 5(Triada) 6(Criminal) 7(Ilegal) 8(Network)");  														//	if (tipo < 1 || tipo > 5) return SendClientMessage(playerid, 0xFF6347AA, "1lspd, 2fbi, 3USMC, 4medicos, 5gobierno");
	Loop(id, MAX_FAMILIAS, 1) if (!InfoFamilia[id][fTipo])
	{
		alm(InfoFamilia[id][fNombre], "/editarfnombre");
		alm(InfoFamilia[id][fLogo], "/editarflogo");
		alm(InfoFamilia[id][fLider], "disponible");
		InfoFamilia[id][fTipo] = tipo;
		InfoFamilia[id][fMaxRangos] = 6;
		Loop(x, 15, 0)
		{
			new gformat[15];
			format(gformat, sizeof gformat, "Rango%d", x+1);
			alm(fam_rango[id][x], gformat);
		}
		format(string, sizeof string, "Creo la familia ID %d.", id);
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 2);

		format(string, sizeof string, "Creaste la familia ID %d, para configurarla use /editarbanda, /editarflogo, /editarfnombre", id);
		SendClientMessage(playerid, 0xCCCC00FF, string);
		//opcion idsql ya creada.
		if (InfoFamilia[id][fID_sql] != 0)
		{
			mysql_format(DBngrp, query, sizeof query, "UPDATE familias SET Nombre = '%e', Logo = '%e', Lider = '%e', Tipo = '%d', MaxRangos = '%d' WHERE ID = '%d'",
			InfoFamilia[id][fNombre],
			InfoFamilia[id][fLogo],
			InfoFamilia[id][fLider],
			InfoFamilia[id][fTipo],
			InfoFamilia[id][fMaxRangos],
			InfoFamilia[id][fID_sql]);
			mysql_tquery(DBngrp, query);
			id = MAX_FAMILIAS;
			return 1;
		}
		mysql_format(DBngrp, query, sizeof query, "INSERT INTO familias (Nombre, Logo, Lider, Tipo, MaxRangos) VALUES ('%e', '%e', '%e', '%d', '%d')",
		InfoFamilia[id][fNombre],
		InfoFamilia[id][fLogo],
		InfoFamilia[id][fLider],
		InfoFamilia[id][fTipo],
		InfoFamilia[id][fMaxRangos]);
		mysql_tquery(DBngrp, query, "OnFamilyCreate", "i", id);
		id = MAX_FAMILIAS;
		return 1;
	}
	SendClientMessageEx(playerid, 0x008BFFFF, "No puedes crear mas de %d bandas.", MAX_FAMILIAS);
	return 1;
}
CMD:crearfam(playerid, params[]) return cmd_crearbanda(playerid, params);

forward OnFamilyCreate(id);
public OnFamilyCreate(id)
{
	totalfamilias++;
	InfoFamilia[id][fID_sql] = cache_insert_id();
	cache_unset_active();
    return 1;
}

CMD:borrarbanda(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][2] == 0) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /borrarfamilia.", 2000);
	new id, query[256];
	if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/borrarfamilia [familia]");
	if (id < 1 || id > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de familia incorrecta, intenta entre 1-%d.", id, totalfamilias);
	if (InfoFamilia[id][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de familia inexistente.", id);
	mysql_format(DBngrp, query, sizeof query, "SELECT * FROM cuentas WHERE FamMiembro = '%d'", id);
	mysql_tquery(DBngrp, query, "OnActiveMembers", "dd", playerid, id);
	return 1;
}
CMD:borrarfam(playerid, params[]) return cmd_borrarbanda(playerid, params);

forward OnActiveMembers(playerid, id);
public OnActiveMembers(playerid, id)
{
	new members = 0, vehiclecount = 0;
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vFamilia] == id)
	{
		DeleteVehiclePlayer(v);
		vehiclecount++;
	}
	Loop(player, cache_num_rows(), 0)
	{
		new nombreapellido[32], newid = -1, query[256];
		reg_string(player, "Nombre_Apellido", nombreapellido, 32);
		foreach(Player, juegador) if (IsPlayerConnectedEx(juegador) && !strcmp(InfoJugador[juegador][jNombre_Apellido], nombreapellido, true)) { newid = juegador; }
		if (IsPlayerConnectedEx(newid))
		{
			SendClientMessageEx(newid, 0xb00000ff, "Acaban de limpiar la banda (%s) en la que estabas.", InfoFamilia[id][fNombre]);
			InfoJugador[newid][jFamLider] = 0;
			InfoJugador[newid][jFamMiembro] = 0;
			InfoJugador[newid][jFamRango] = 1;
		}
		mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET FamMiembro = 0, FamRango = 0, FamLider = 0 WHERE Nombre_Apellido = '%e'", nombreapellido);
		mysql_tquery(DBngrp, query);
		members++;
	}
	alm(InfoFamilia[id][fNombre], "none");
	alm(InfoFamilia[id][fLogo], "none");
	alm(InfoFamilia[id][fLider], "disponible");
	InfoFamilia[id][fTipo] = 0;
	InfoFamilia[id][fDinero] = 0;
	InfoFamilia[id][fColor] = 0;
	InfoFamilia[id][fMaxRangos] = 6;
	InfoFamilia[id][fSpawnX] = 0.0;
	InfoFamilia[id][fSpawnY] = 0.0;
	InfoFamilia[id][fSpawnZ] = 0.0;
	InfoFamilia[id][fSpawnR] = 0.0;
	InfoFamilia[id][fSpawnInt] = 0;
	InfoFamilia[id][fSpawnVW] = 0;
	InfoFamilia[id][fArmarioX] = 0.0;
	InfoFamilia[id][fArmarioY] = 0.0;
	InfoFamilia[id][fArmarioZ] = 0.0;
	InfoFamilia[id][fArmarioInt] = 0;
	InfoFamilia[id][fArmarioVW] = 0;
	DestroyDynamicPickup(InfoFamilia[id][fArmarioPickup]);
	if (IsValidDynamic3DTextLabel(InfoFamilia[id][fArmarioLabel]))
	{
		DestroyDynamic3DTextLabel(InfoFamilia[id][fArmarioLabel]);
		InfoFamilia[id][fArmarioLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	Loop(x, 12, 0)
	{
		InfoFamilia[id][fArmarioObjeto][x] = 0;
		InfoFamilia[id][fArmarioCantidad][x] = 0;
		new que3ry[256];
		mysql_format(DBngrp, que3ry, sizeof que3ry, "UPDATE familias SET ArmarioObjeto%d = 0, ArmarioCantidad%d = 0 WHERE ID = '%d'", x+1, x+1, InfoFamilia[id][fID_sql]);
		mysql_tquery(DBngrp, que3ry);
	}
	Loop(x, 15, 0)
	{
		new gformat[15], que3ry[256];
		format(gformat, sizeof gformat, "Rango%d", x+1);
		alm(fam_rango[id][x], gformat);
		mysql_format(DBngrp, que3ry, sizeof que3ry, "UPDATE familias SET Rango%d = '%e' WHERE ID = '%d'", x+1, fam_rango[id][x], InfoFamilia[id][fID_sql]);
		mysql_tquery(DBngrp, que3ry);
	}
	new query[2048], string[256];
	mysql_format(DBngrp, query, sizeof query, "UPDATE familias SET Nombre = '%e', Logo = '%e', Lider = '%e', Color = 0, Tipo = 0, Dinero = 0, \
	SpawnX = 0.0, SpawnY = 0.0, SpawnZ = 0.0, SpawnR = 0.0, SpawnInt = 0, SpawnVW = 0, ArmarioX = 0.0, ArmarioY = 0.0, ArmarioZ = 0.0, ArmarioInt = 0, ArmarioVW = 0, MaxRangos = 6 WHERE ID = '%d'",
	InfoFamilia[id][fNombre], InfoFamilia[id][fLogo], InfoFamilia[id][fLider], InfoFamilia[id][fID_sql]);
	mysql_tquery(DBngrp, query);
	format(string, sizeof string, "Borraste la familia ID %d con %d miembros (vehiculos %d), SQL vacia: %d", id, members, vehiclecount, InfoFamilia[id][fID_sql]);
	SendClientMessage(playerid, 0x00CCCCFF, string);
	return 1;
}

CMD:limpiarbanda(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][2] == 0) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /limpiarfamilia.", 2000);
	new string[210], id;
	if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/limpiarfamilia [id familia]");
	if (id < 1 || id > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de familia incorrecta, intenta entre 1-%d.", id, totalfamilias);
	if (InfoFamilia[id][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de familia inexistente.", id);
	mysql_format(DBngrp, string, sizeof string, "SELECT * FROM cuentas WHERE FamMiembro = '%d'", id);
	mysql_tquery(DBngrp, string, "OnLimpiezaFamilly", "dd", playerid, id);
	return 1;
}

forward OnLimpiezaFamilly(playerid, id);
public OnLimpiezaFamilly(playerid, id)
{
	new members = 0;
	new query[512];
	Loop(player, cache_num_rows(), 0)
	{
		new nombreapellido[32], newid = -1;
		reg_string(player, "Nombre_Apellido", nombreapellido, 32);
		foreach(Player, juegador) if (IsPlayerConnectedEx(juegador) && !strcmp(InfoJugador[juegador][jNombre_Apellido], nombreapellido, true)) { newid = juegador; }
		if (IsPlayerConnectedEx(newid))
		{
			SendClientMessageEx(newid, 0xb00000ff, "Acaban de limpiar la banda (%s) en la que estabas.", InfoFamilia[id][fNombre]);
			InfoJugador[newid][jFamLider] = 0;
			InfoJugador[newid][jFamMiembro] = 0;
			InfoJugador[newid][jFamRango] = 0;
		}
		mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET FamMiembro = 0, FamRango = 0, FamLider = 0 WHERE Nombre_Apellido = '%e'", nombreapellido);
		mysql_tquery(DBngrp, query);
		members++;
	}
	alm(InfoFamilia[id][fLider], "disponible");
	guardar_int_mysql("familias", "Lider", InfoFamilia[id][fID_sql], InfoFamilia[id][fLider]);
	SendClientMessageEx(playerid, 0x00cc00ff, "Limpiaste la banda (%s) con %d miembros.", InfoFamilia[id][fNombre], members);
	return 1;
}

CMD:editarfnombre(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][2] == 0) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /editarfnombre.", 2000);
	new id, fnombre[128];
	if (sscanf(params, "ds[128]", id, fnombre)) return _Mensaje(playerid, 3, "0", "/editarfnombre [banda id] [nombre]");
	if (id < 1 || id > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda incorrecta, intenta entre 1-%d.", id, totalfamilias);
	if (InfoFamilia[id][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda inexistente.", id);
	alm(InfoFamilia[id][fNombre], fnombre);
	guardar_string_mysql("familias", "Nombre", InfoFamilia[id][fID_sql], InfoFamilia[id][fNombre]);
	SendClientMessageEx(playerid, 0x00CCCCFF, "Familia %d | %s", id, fnombre);
	return 1;
}

CMD:editarflogo(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][2] == 0) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /editarflogo.", 2000);
	new id, flogo[11];
	if (sscanf(params, "ds[11]", id, flogo)) return _Mensaje(playerid, 3, "0", "/editarflogo [banda id] [logo]");
	if (id < 1 || id > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda incorrecta, intenta entre 1-%d.", id, totalfamilias);
	if (InfoFamilia[id][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda inexistente.", id);
	alm(InfoFamilia[id][fLogo], flogo);
	guardar_string_mysql("familias", "Logo", InfoFamilia[id][fID_sql], InfoFamilia[id][fLogo]);
	SendClientMessageEx(playerid, 0x00CCCCFF, "Familia %d | %s", id, flogo);
	if (InfoFamilia[id][fArmarioX] != 0.0) familia_armario(id, 1);
	return 1;
}

CMD:editarflider(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][2] == 0) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /editarflider.", 2000);
	new id, flider[25];
	if (sscanf(params, "ds[25]", id, flider)) return _Mensaje(playerid, 3, "0", "/editarflider [banda id] [Nombre_Apellido]");
	if (id < 1 || id > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda incorrecta, intenta entre 1-%d.", id, totalfamilias);
	if (InfoFamilia[id][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda inexistente.", id);
	alm(InfoFamilia[id][fLider], flider);
	guardar_string_mysql("familias", "Lider", InfoFamilia[id][fID_sql], InfoFamilia[id][fLider]);
	SendClientMessageEx(playerid, 0x00CCCCFF, "Familia %d | Lider: %s", id, flider);
	return 1;
}

new actual_id_fam[MAX_PLAYERS];

CMD:editarbanda(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][2] == 0) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /editarbanda.", 2000);
	new id, string[512], input;
	if (sscanf(params, "s[32]", params))
	{
		_Mensaje(playerid, 3, "0", "/editarf [opcion] [banda id]");
		SendClientMessageEx(playerid, 0xCCCC00FF, "Opciones: dinero - tipo - maxrangos - spawn - cajafuerte - color");
		return 1;
	}
	if (!strcmp(params, "dinero", true, 6))
	{
		if (sscanf(params, "s[32]ii", params, id, input)) return _Mensaje(playerid, 3, "0", "/editarf dinero [banda id] [$]");
		if (id < 1 || id > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda incorrecta, intenta entre 1-%d.", id, totalfamilias);
		if (InfoFamilia[id][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda inexistente.", id);
		InfoFamilia[id][fDinero] += input;
		guardar_int_mysql("familias", "Dinero", InfoFamilia[id][fID_sql], InfoFamilia[id][fDinero]);
		SendClientMessageEx(playerid, 0x00CCCCFF, "Sumaste $%s a la banda %s (%d), ahora tiene $%s.", diner_coma(input), InfoFamilia[id][fLogo], id, diner_coma(InfoFamilia[id][fDinero]));
	}
	else if (!strcmp(params, "tipo", true, 4))
	{
		if (sscanf(params, "s[32]ii", params, id, input)) return _Mensaje(playerid, 3, "0", "/editarf tipo [banda id] [tipo]");
		if (id < 1 || id > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda incorrecta, intenta entre 1-%d.", id, totalfamilias);
		if (InfoFamilia[id][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda inexistente.", id);
		if (input < 1 || input > 8) return SendClientMessage(playerid, 0xCCCC00FF, "Tipos: 1(Pandilla) 2(Mafia) 3(Legal) 4(Motoqueros) 5(Triada) 6(Criminal) 7(Ilegal) 8(Network)");  														//	if (tipo < 1 || tipo > 5) return SendClientMessage(playerid, 0xFF6347AA, "1lspd, 2fbi, 3USMC, 4medicos, 5gobierno");
		InfoFamilia[id][fTipo] = input;
		guardar_int_mysql("familias", "Tipo", InfoFamilia[id][fID_sql], InfoFamilia[id][fTipo]);
		SendClientMessageEx(playerid, 0x00CCCCFF, "Ahora el tipo de la banda %s (%d) es %s.", InfoFamilia[id][fLogo], id, GetTypeFamily(InfoFamilia[id][fTipo]));
 	}
	else if (!strcmp(params, "maxrangos", true, 9))
	{
		if (sscanf(params, "s[32]ii", params, id, input)) return _Mensaje(playerid, 3, "0", "/editarf maxrangos [banda id] [max]");
		if (id < 1 || id > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda incorrecta, intenta entre 1-%d.", id, totalfamilias);
		if (InfoFamilia[id][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda inexistente.", id);
		InfoFamilia[id][fMaxRangos] = input;
		guardar_int_mysql("familias", "MaxRangos", InfoFamilia[id][fID_sql], InfoFamilia[id][fMaxRangos]);
		SendClientMessageEx(playerid, 0x00CCCCFF, "Ahora el maximo de rangos de la banda %s (%d) es de %d rangos.", InfoFamilia[id][fLogo], id, input);
	}
	else if (!strcmp(params, "spawn", true, 5))
	{
		if (sscanf(params, "s[32]i", params, id)) return _Mensaje(playerid, 3, "0", "/editarf spawn [banda id]");
		if (id < 1 || id > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda incorrecta, intenta entre 1-%d.", id, totalfamilias);
		if (InfoFamilia[id][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda inexistente.", id);
		GetPlayerPos(playerid, InfoFamilia[id][fSpawnX], InfoFamilia[id][fSpawnY], InfoFamilia[id][fSpawnZ]);
		GetPlayerFacingAngle(playerid, InfoFamilia[id][fSpawnR]);
		InfoFamilia[id][fSpawnInt] = GetPlayerInterior(playerid);
		InfoFamilia[id][fSpawnVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessageEx(playerid, 0x00CCCCFF, "Cambiaste el spawn de la familia %s (%d).", InfoFamilia[id][fLogo], id);
		mysql_format(DBngrp, string, sizeof string, "UPDATE familias SET SpawnX = '%f', SpawnY = '%f', SpawnZ = '%f', SpawnR = '%f', SpawnInt = '%d', SpawnVW = '%d' WHERE ID = '%d'", InfoFamilia[id][fSpawnX], InfoFamilia[id][fSpawnY], InfoFamilia[id][fSpawnZ], InfoFamilia[id][fSpawnR], InfoFamilia[id][fSpawnInt], InfoFamilia[id][fSpawnVW], InfoFamilia[id][fID_sql]);
		mysql_tquery(DBngrp, string);
	}
	else if (!strcmp(params, "cajafuerte", true, 10))
	{
		if (sscanf(params, "s[32]i", params, id)) return _Mensaje(playerid, 3, "0", "/editarf cajafuerte [banda id]");
		if (id < 1 || id > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda incorrecta, intenta entre 1-%d.", id, totalfamilias);
		if (InfoFamilia[id][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda inexistente.", id);
		GetPlayerPos(playerid, InfoFamilia[id][fArmarioX], InfoFamilia[id][fArmarioY], InfoFamilia[id][fArmarioZ]);
		InfoFamilia[id][fArmarioInt] = GetPlayerInterior(playerid);
		InfoFamilia[id][fArmarioVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessageEx(playerid, 0x00CCCCFF, "Cambiaste el lugar de /cajafuerte de la familia %s (%d).", InfoFamilia[id][fLogo], id);
		mysql_format(DBngrp, string, sizeof string, "UPDATE familias SET ArmarioX = '%f', ArmarioY = '%f', ArmarioZ = '%f', ArmarioInt = '%d', ArmarioVW = '%d' WHERE ID = '%d'", InfoFamilia[id][fArmarioX], InfoFamilia[id][fArmarioY], InfoFamilia[id][fArmarioZ], InfoFamilia[id][fArmarioInt], InfoFamilia[id][fArmarioVW], InfoFamilia[id][fID_sql]);
		mysql_tquery(DBngrp, string);
		familia_armario(id, 0);
	}
	else if (!strcmp(params, "color", true, 5))
	{
		if (sscanf(params, "s[32]i", params, id)) return _Mensaje(playerid, 3, "0", "/editarf color [banda id]");
		if (id < 1 || id > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda incorrecta, intenta entre 1-%d.", id, totalfamilias);
		if (InfoFamilia[id][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de banda inexistente.", id);
		actual_id_fam[playerid] = id;
		new color_string[3256];
		for(new i; i < sizeof(RandomColors); i++) format(color_string, sizeof(color_string), "%s{%06x}%03d %s", color_string, RandomColors[i] >>> 8, i, ((i+1) % 10 == 0) ? ("\n") : (""));
		Dialog_Show(playerid, ChangeFamColor, DIALOG_STYLE_INPUT, "Selecciona el color para tu banda", color_string, "Cambiar", "Salir");
	}
	return 1;
}
CMD:editarf(playerid, params[]) return cmd_editarbanda(playerid, params);
CMD:editarfam(playerid, params[]) return cmd_editarbanda(playerid, params);

Dialog:ChangeFamColor(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, 0xEBEBEBFF, "Solo numeros, intentalo de nuevo.");
	new id = actual_id_fam[playerid], color = strval(inputtext);
	if(!(0 <= color <= sizeof(RandomColors)-1)) return SendClientMessage(playerid, 0xEBEBEBFF, "ID de color invalido, intentalo de nuevo.");
	InfoFamilia[id][fColor] = color;
	guardar_int_mysql("familias", "Color", InfoFamilia[id][fID_sql], InfoFamilia[id][fColor]);
	Loop(i, totalterritorios, 1) if (InfoTerritorio[i][tLugarX] != 0.0 && InfoTerritorio[i][tBandaID] == id)
	{
		new r, g, b, a, new_territory_color;
		HexToRGBA(RandomColors[color], r, g, b, a);
		new_territory_color = RGBAToHex(r, g, b, 135);
		GangZoneShowForPlayer(playerid, InfoTerritorio[i][tGang], new_territory_color);
	}
	SendClientMessageEx(playerid, RandomColors[color], "Cambiaste el color de la familia (%d).", id);
	return 1;
}

CMD:irbanda(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][2] == 0) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /irfamilia.", 2000);
	new id;
	if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/irfamilia [familia id] (este comando te llevara al lugar de cajafuerte)");
	if (id < 1 || id > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de familia incorrecta, intenta entre 1-%d.", id, totalfamilias);
	if (InfoFamilia[id][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de familia inexistente.", id);
	if (InfoFamilia[id][fArmarioX] == 0.0) return SendClientMessage(playerid, 0xCCCCCCFF, "* Esa familia no tiene configurado la caja fuerte, usa /editarfamilia cajafuerte.");
	SetPosEx(playerid, InfoFamilia[id][fArmarioX], InfoFamilia[id][fArmarioY], InfoFamilia[id][fArmarioZ], 0.0000, InfoFamilia[id][fArmarioInt], InfoFamilia[id][fArmarioVW], 1);
	SendClientMessageEx(playerid, 0x00CC00FF, "Acabas de ir al lugar de /cajafuerte de %s.", InfoFamilia[id][fLogo]);
	return 1;
}
CMD:irfam(playerid, params[]) return cmd_irbanda(playerid, params);

CMD:crearvehbanda(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][2] == 0) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /crearvehfam.", 2000);
	new modelid, color1, color2, fam_id, gformat[250];
	if (sscanf(params, "dddd", fam_id, modelid, color1, color2)) return _Mensaje(playerid, 3, "0", "/crearvehfam [familia id] [modelo id] [color 1] [color 2]");
	if (fam_id < 1 || fam_id > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de familia incorrecta, intenta entre 1-%d.", fam_id, totalfamilias);
	if (InfoFamilia[fam_id][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de familia inexistente.", fam_id);
	if (color1 < 0 || color1 > 250) { ShowInfoForPlayer(playerid, "El color 1 no puede super el ID 250.", 2000); return 1; }
	if (color2 < 0 || color2 > 250) { ShowInfoForPlayer(playerid, "El color 2 no puede super el ID 250.", 2000); return 1; }
	if (modelid < 400 || modelid > 611) { ShowInfoForPlayer(playerid, "Modelo invalido, intenta entre 400 y 611.", 2000); return 1; }
	new Float: X, Float: Y, Float: Z, Float: Angle;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);
	CreateVehicleFam(fam_id, modelid, X, Y+2, Z, Angle, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), color1, color2);
	SendClientMessageEx(playerid, 0xA2DC35FF, "Creaste un %s (%d) (Color1: %d) (Color2: %d) para %s, recuerda /estacionar.", GetNameVehicle(modelid), modelid, color1, color2, InfoFamilia[fam_id][fLogo]);
	format(gformat, sizeof gformat, "Creo un %s (%d) para la familia %s (ID: %d)", GetNameVehicle(modelid), modelid, InfoFamilia[fam_id][fLogo], fam_id);
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), gformat, 1);
	return 1;
}

CMD:borrarvehbanda(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][2] == 0) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /borrarvehfam.", 2000);
	new vehicleid, string[160];
	if (sscanf(params, "d", vehicleid)) return _Mensaje(playerid, 3, "0", "/borrarvehfam (VehiculoID) [para saber ID exacta acercate al vehiculo con /dl]");
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vDL] == vehicleid)
	{
		if (InfoVehiculo[v][vFamilia] == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No puedes borrar vehiculos de usuarios.");
		format(string, sizeof string, "Borraste %s de %s.", GetNameVehicle(InfoVehiculo[v][vModelo]), InfoVehiculo[v][vPropietario]);
		SendClientMessage(playerid, 0xCCCC00FF, string);
		DeleteVehiclePlayer(v);
		return 1;
	}
	SendClientMessage(playerid, 0xCCCCCCFF, "Ese vehiculo no esta spawneado o no existe.");
	return 1;
}

CMD:fchat(playerid)
{
	new acceso = 0, id = InfoJugador[playerid][jFamMiembro];
	if (id == 0) return ShowInfoForPlayer(playerid, "No eres miembro de banda.", 2000);
	if (InfoJugador[playerid][jFamRango] == InfoFamilia[id][fMaxRangos]) { acceso = 1; }
	else { if (InfoJugador[playerid][jFamLider] == id) acceso = 1; }
	if (acceso == 0) return ShowInfoForPlayer(playerid, "No eres lider de banda o rango maximo.", 2000);
	if (InfoFamilia[id][fTipo] == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No han asignado el tipo de tu banda, error de comando.");
	if (InfoFamilia[id][fChat] != 0)
	{
		InfoFamilia[id][fChat] = 0;
		SendClientMessage(playerid, 0xCCCC00FF, "Desbloqueaste el canal /f de tu banda.");
	}
	else
	{
		InfoFamilia[id][fChat] = 1;
		SendClientMessage(playerid, 0xCCCC00FF, "Bloqueaste el canal /f de tu banda.");
	}
	guardar_int_mysql("familias", "Chat", InfoFamilia[id][fID_sql], InfoFamilia[id][fChat]);
	return 1;
}

CMD:fnombre(playerid, params[])
{
	new acceso = 0, id = InfoJugador[playerid][jFamMiembro];
	if (id == 0) return ShowInfoForPlayer(playerid, "No eres miembro de banda.", 2000);
	if (InfoJugador[playerid][jFamRango] == InfoFamilia[id][fMaxRangos]) { acceso = 1; }
	else { if (InfoJugador[playerid][jFamLider] == id) acceso = 1; }
	if (acceso == 0) return ShowInfoForPlayer(playerid, "No eres lider de banda o rango maximo.", 2000);
	SendClientMessageEx(playerid, -1, "Comando deshabilitado por el encargado de familias.");
	/*	new fnombre[128];
	if (InfoFamilia[id][fTipo] == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No han asignado el tipo de tu familia, error de comando.");
	if (sscanf(params, "s[128]", fnombre)) return _Mensaje(playerid, 3, "0", "/fnombre [nombre]");
	alm(InfoFamilia[id][fNombre], fnombre);
	guardar_string_mysql("familias", "Nombre", InfoFamilia[id][fID_sql], InfoFamilia[id][fNombre]);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Nuevo nombre: %s", fnombre);*/
	return 1;
}

CMD:frango(playerid, params[])
{
	new acceso = 0, id = InfoJugador[playerid][jFamMiembro];
	if (id == 0) return ShowInfoForPlayer(playerid, "No eres miembro de banda.", 2000);
	if (InfoJugador[playerid][jFamRango] == InfoFamilia[id][fMaxRangos]) { acceso = 1; }
	else { if (InfoJugador[playerid][jFamLider] == id) acceso = 1; }
	if (acceso == 0) return ShowInfoForPlayer(playerid, "No eres lider de banda o rango maximo.", 2000);
	if (InfoFamilia[id][fTipo] == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No han asignado el tipo de tu banda, error de comando.");
	new fnamerango[32], query[256], rango;
	if (sscanf(params, "ds[32]", rango, fnamerango)) return _Mensaje(playerid, 3, "0", "/frango [rango id] [nombre]");
	if (rango > InfoFamilia[id][fMaxRangos] || rango < 1)
	{
		SendClientMessageEx(playerid, 0x008BFFFF, "No puedes colocar mas de %d rangos en tu banda %s.", InfoFamilia[id][fMaxRangos], InfoFamilia[id][fLogo]);
		return 1;
	}
	alm(fam_rango[id][rango-1], fnamerango);
	mysql_format(DBngrp, query, sizeof query, "UPDATE familias SET Rango%d = '%e' WHERE ID = '%d'", rango, fnamerango, InfoFamilia[id][fID_sql]);
	mysql_tquery(DBngrp, query);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Rango %d: %s", rango, fnamerango);
	return 1;
}

CMD:miembros(playerid)
{
	new familia = InfoJugador[playerid][jFamMiembro];
	if (familia == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No eres miembro de una banda.");
	new query[256];
	mysql_format(DBngrp, query, sizeof query, "SELECT * FROM cuentas WHERE FamMiembro = '%d'", familia);
	mysql_tquery(DBngrp, query, "OnMembersFamily", "dd", playerid, familia);
	return 1;
}
CMD:banda(playerid) return cmd_miembros(playerid);

CMD:verstaff(playerid)
{
	if(InfoJugador[playerid][jAdmin] >= 10)
	{
        new query[256];
		mysql_format(DBngrp, query, sizeof query, "SELECT * FROM cuentas WHERE JuegaleOwo > 0");
		mysql_tquery(DBngrp, query, "OnAdmins", "d", playerid);
	}else SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes el rango adecuado.");
	return 1;
}

CMD:listarefe(playerid)
{
	new query[210];
	mysql_format(DBngrp, query, sizeof query, "SELECT * FROM cuentas WHERE NombreAmigo = '%s'", InfoJugador[playerid][jNombre_Apellido]);
	mysql_tquery(DBngrp, query, "ListaReferidos", "d", playerid);
	return 1;
}

CMD:jetpack(playerid)
{
    if(InfoJugador[playerid][jAdmin] >= 10)
	{
    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	}else SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes el rango adecuado.");
	return 1;
}

forward OnAdmins(playerid);
public OnAdmins(playerid)
{
	new members = 0, gformat[512], dialog[4096];
	Loop(player, cache_num_rows(), 0)
	{
		new nombreapellido[32], rango, newid = -1;
		reg_string(player, "Nombre_Apellido", nombreapellido, 32);

		reg_int(player, "JuegaleOwo", rango);
		foreach(Player, juegador) if (IsPlayerConnectedEx(juegador) && !strcmp(InfoJugador[juegador][jNombre_Apellido], nombreapellido, true)) { newid = juegador; }
		if (IsPlayerConnectedEx(newid)) format(gformat, sizeof gformat, "%s | %s {29B311}Conectado (ID: %d)\n", nombreapellido, GetPlayerRankStaffID(rango), newid);
		else format(gformat, sizeof gformat, "%s | %s {E24D32}Desconectado\n", nombreapellido, GetPlayerRankStaffID(rango));
		strcat(dialog, gformat);
		format(gformat, sizeof gformat, "Miembro_List%d", members);
		SetPVarString(playerid, gformat, nombreapellido);
		members++;
	}
	if (members == 0) return Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, "Staff", "{FFFFFF}No se encontraron miembros.", "Cerrar", "");
	else Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, "Staff", dialog, "Cerrar", "");
	return 1;
}

forward ListaReferidos(playerid);
public ListaReferidos(playerid)
{
	new members = 0, gformat[512], dialog[4096];
	Loop(player, cache_num_rows(), 0)
	{
		new nombreapellido[32], nivel, newid = -1;
		reg_string(player, "Nombre_Apellido", nombreapellido, 32);

		reg_int(player, "Nivel", nivel);
		foreach(Player, juegador) if (IsPlayerConnectedEx(juegador) && !strcmp(InfoJugador[juegador][jNombre_Apellido], nombreapellido, true)) { newid = juegador; }
		if (IsPlayerConnectedEx(newid))
		{
		    if(nivel > 5) format(gformat, sizeof gformat, "{00cc00}[C] {FFFFFF}%s | Nivel: %d {29B311}Conectado (ID: %d)\n", nombreapellido, nivel, newid);
			else format(gformat, sizeof gformat, "%s | Nivel: %d {29B311}Conectado (ID: %d)\n", nombreapellido, nivel, newid);
		}
		else
		{
		    if(nivel > 5) format(gformat, sizeof gformat, "{00cc00}[C] {FFFFFF}%s | Nivel: %d {E24D32}Desconectado\n", nombreapellido, nivel);
			else format(gformat, sizeof gformat, "%s | Nivel: %d {E24D32}Desconectado\n", nombreapellido, nivel);
		}
		strcat(dialog, gformat);
		format(gformat, sizeof gformat, "Miembro_List%d", members);
		SetPVarString(playerid, gformat, nombreapellido);
		members++;
	}
	if (members == 0) return Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, "Lista de referidos", "{FFFFFF}No se encontraron referidos asociados a tu cuenta.", "Cerrar", "");
	else Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, "Lista de referidos", dialog, "Cerrar", "");
	return 1;
}

forward OnMembersFamily(playerid, id);
public OnMembersFamily(playerid, id)
{
	new members = 0, gformat[512], dialog[4096];
	Loop(player, cache_num_rows(), 0)
	{
		new nombreapellido[32], rango, newid = -1;
		reg_string(player, "Nombre_Apellido", nombreapellido, 32);
		reg_int(player, "FamRango", rango);
		foreach(Player, juegador) if (IsPlayerConnectedEx(juegador) && !strcmp(InfoJugador[juegador][jNombre_Apellido], nombreapellido, true)) { newid = juegador; }
		if (IsPlayerConnectedEx(newid)) format(gformat, sizeof gformat, "%s | %s (%d) | {29B311}Conectado (ID: %d)\n", nombreapellido, fam_rango[id][rango-1], rango, newid);
		else format(gformat, sizeof gformat, "%s | %s (%d) | {E24D32}Desconectado\n", nombreapellido, fam_rango[id][rango-1], rango);
		strcat(dialog, gformat);
		format(gformat, sizeof gformat, "Miembro_List%d", members);
		SetPVarString(playerid, gformat, nombreapellido);
		members++;
	}
	if (members == 0) return Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, InfoFamilia[id][fNombre], "{FFFFFF}No se encontraron miembros.", "Cerrar", "");
	new acceso = 0;
	if (InfoJugador[playerid][jFamRango] == InfoFamilia[id][fMaxRangos]) { acceso = 1; }
	else { if (InfoJugador[playerid][jFamLider] == id) acceso = 1; }
	if (acceso != 0) Dialog_Show(playerid, MenuMiembros, DIALOG_STYLE_LIST, InfoFamilia[id][fNombre], dialog, "Continuar", "Salir");
	else Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, InfoFamilia[id][fNombre], dialog, "Cerrar", "");
	return 1;
}

Dialog:MenuMiembros(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat[128], nombre_miembro[32];
	format(gformat, sizeof gformat, "Miembro_List%d", ID);
	GetPVarString(playerid, gformat, nombre_miembro, sizeof nombre_miembro);
	SetPVarString(playerid, "Miembro_Actual", nombre_miembro);
	format(gformat, sizeof gformat, "Miembro: {008BFF}%s", nombre_miembro);
	Dialog_Show(playerid, OpcionMiembros, DIALOG_STYLE_LIST, gformat, "Dar rango\nUltima conexion\n{B00000}Expulsar de la familia", "Continuar", "Volver");
	return 1;
}

Dialog:OpcionMiembros(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_miembros(playerid);
	new nombre_miembro[32], newid = -1, string[256], ultimaconexion[256], familia = InfoJugador[playerid][jFamMiembro], query[512];
	GetPVarString(playerid, "Miembro_Actual", nombre_miembro, sizeof nombre_miembro);
	foreach(Player, juegador) if (IsPlayerConnectedEx(juegador) && !strcmp(InfoJugador[juegador][jNombre_Apellido], nombre_miembro, true)) { newid = juegador; }
	new eslider;
	if (VerificarCuenta(nombre_miembro))
	{
		reg_int(0, "FamLider", eslider);
		reg_string(0, "UltimaConexion", ultimaconexion, 256);
	}
	else return SendClientMessage(playerid, 0xCCCCCCFF, "* Esa cuenta no existe.");
	switch (listitem)
	{
		case 0: //darrango
		{
			new maxrangos = InfoFamilia[familia][fMaxRangos];
			new dialog[1024], gformat[128];
			Loop(rango, maxrangos, 0)
			{
				format(gformat, sizeof gformat, "(%d) %s\n", rango+1, fam_rango[familia][rango]);
				strcat(dialog, gformat);
			}
			format(gformat, sizeof gformat, "Miembro: {008BFF}%s", nombre_miembro);
			Dialog_Show(playerid, DarRango, DIALOG_STYLE_LIST, gformat, dialog, "Continuar", "Salir");
		}
		case 1: //ultima conexion
		{
			if (IsPlayerConnectedEx(newid))
			{
				format(string, sizeof string, "%s esta conectado ID: %d", nombre_miembro, newid);
				SendClientMessage(playerid, 0x00CC00FF, string);
				return 1;
			}
			format(string, sizeof string, "%s: %s", nombre_miembro, ultimaconexion);
			SendClientMessage(playerid, 0xAAAA00AA, string);
		}
		case 2: //expulsar de la familia
		{
			if (eslider != 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No puedes expulsar lideres de la familia, habla con el encargado.");
			if (IsPlayerConnectedEx(newid))
			{
			    if (playerid == newid) return SendClientMessage(playerid, 0xCCCCCCFF, "* Eres tontuelo? no puedes expulsarte, habla con el encargado.");
				InfoJugador[newid][jFamLider] = 0;
				InfoJugador[newid][jFamMiembro] = 0;
				InfoJugador[newid][jFamRango] = 0;
			}
			format(string, sizeof string, "*** Lider %s expulso de la familia a %s.", NombreRJugador(playerid), nombre_miembro);
			SendFamilyMessage(familia, 0x33CCFFFF, string);
			mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET FamLider = 0, FamMiembro = 0, FamRango = 0 WHERE Nombre_Apellido = '%e'", nombre_miembro);
			mysql_tquery(DBngrp, query);
		}
	}
	return 1;
}

Dialog:DarRango(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new nombre_miembro[32], newid = -1, string[256], rango = listitem;
	new familia = InfoJugador[playerid][jFamMiembro], query[512];
	GetPVarString(playerid, "Miembro_Actual", nombre_miembro, sizeof nombre_miembro);
	foreach(Player, juegador) if (IsPlayerConnectedEx(juegador) && !strcmp(InfoJugador[juegador][jNombre_Apellido], nombre_miembro, true)) { newid = juegador; }
	if (IsPlayerConnectedEx(newid)) InfoJugador[newid][jFamRango] = rango+1;
	format(string, sizeof string, "*** Lider %s cedio rango %s(%d) a %s.", NombreRJugador(playerid), fam_rango[familia][rango], rango+1, nombre_miembro);
	SendFamilyMessage(familia, 0x33CCFFFF, string);
	mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET FamRango = '%d' WHERE Nombre_Apellido = '%e'", rango+1, nombre_miembro);
	mysql_tquery(DBngrp, query);
	return 1;
}


CMD:fcoches(playerid)
{
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowInfoForPlayer(playerid, "No puedes usar este comando en este momento.", 2000);
	new fam_id = InfoJugador[playerid][jFamMiembro];
	if (Es_Pandilla_Mafia(playerid) == 0) return  ShowInfoForPlayer(playerid, "debes ser de una banda ilegal.", 2000);
	new dialog[3084], gformat[370], iCount = 0;
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vModelo] != 0 && InfoVehiculo[id][vFamilia] == fam_id)
	{
		if (InfoVehiculo[id][vEmbargo] != 0) format(gformat, sizeof gformat, "{CCCC00}%s {C0C0C0}(embargado)\n", GetNameVehicle(InfoVehiculo[id][vModelo]));
		else
		{
			if (InfoVehiculo[id][vSpawned] != 0)
			{
				format(gformat, sizeof gformat, "{CCCC00}%s {C0C0C0}(%d)\n", GetNameVehicle(InfoVehiculo[id][vModelo]), InfoVehiculo[id][vDL]);
			}
			else format(gformat, sizeof gformat, "{CCCC00}%s {C0C0C0}(oculto)\n", GetNameVehicle(InfoVehiculo[id][vModelo]));
		}
		strcat(dialog, gformat);
		//conteo
		new gformat2[64];
		format(gformat2, sizeof gformat2, "keyfamveh%d", iCount);
		SetPVarInt(playerid, gformat2, id);
		iCount++;
	}
	if (iCount == 0) return ShowInfoForPlayer(playerid, "No hay vehiculos en la familia o banda en la que estas.", 2000);
	Dialog_Show(playerid, ShowFamVehiculos, DIALOG_STYLE_LIST, "Vehiculos de la familia", dialog, "Continuar", "Salir");
    return 1;
}
CMD:fllaves(playerid) return cmd_fcoches(playerid);
CMD:fvehiculos(playerid) return cmd_fcoches(playerid);

Dialog:ShowFamVehiculos(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat[40];
	format(gformat, sizeof gformat, "keyfamveh%d", ID);
	new veh = GetPVarInt(playerid, gformat), Float: carPos[3], zone[MAX_ZONE_NAME];
	if (InfoVehiculo[veh][vModelo] == 0) return ShowInfoForPlayer(playerid, "No se puede en un vehiculo que no existe.", 2000);
	if (InfoVehiculo[veh][vEmbargo] != 0) return ShowInfoForPlayer(playerid, "No se puede en un vehiculo confiscado.", 2000);
	if (InfoVehiculo[veh][vSpawned] == 0) return ShowInfoForPlayer(playerid, "No puedes localizar vehiculos guardados.", 2000);
	new vehicleid = InfoVehiculo[veh][vDL], access = 0;
	if (GetVehicleInterior(vehicleid) == 6 && GetVehicleVirtualWorld(vehicleid) == 2) // carpintero
	{
		SendClientMessageEx(playerid, 0xFFFFFFFF, "%s fue localizado dentro del estacionamiento de Carpintero. {ff0000}(Ve al punto rojo).", GetNameVehicle(InfoVehiculo[veh][vModelo]), zone);
		SetPlayerCheckpoint(playerid, 1921.2126, -1863.1205, 13.5603, 15.0);
		access = 1;
	}
	else if (GetVehicleInterior(vehicleid) == 7 && GetVehicleVirtualWorld(vehicleid) == 2) // camionero
	{
		SendClientMessageEx(playerid, 0xFFFFFFFF, "%s fue localizado dentro del estacionamiento de Camionero. {ff0000}(Ve al punto rojo).", GetNameVehicle(InfoVehiculo[veh][vModelo]), zone);
		SetPlayerCheckpoint(playerid, 1669.2961, 704.5327, 10.8203, 15.0);
		access = 1;
	}
	else if (GetVehicleInterior(vehicleid) == 0 && GetVehicleVirtualWorld(vehicleid) == 0) // exterior
	{
		GetVehiclePos(vehicleid, carPos[0], carPos[1], carPos[2]);
		GetCar3DZone(vehicleid, zone, sizeof zone);
		SendClientMessageEx(playerid, 0xFFFFFFFF, "%s fue localizado en %s. {ff0000}(Ve al punto rojo).", GetNameVehicle(InfoVehiculo[veh][vModelo]), zone);
		SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
		access = 1;
	}
	if (access != 0)
	{
		SetPVarInt(playerid, "EnCheckPoint", 1);
		TogglePlayerAllDynamicCPs(playerid, false);
		return 1;
	}
	SendClientMessageEx(playerid, 0xccccccff, "%s debe estar escondido en algun garaje de faccion o de una persona o bugeado.", GetNameVehicle(InfoVehiculo[veh][vModelo]));
	return 1;
}

CMD:festacionar(playerid)
{
	new fam_id = InfoJugador[playerid][jFamMiembro];
	if (Es_Pandilla_Mafia(playerid) == 0) return  ShowInfoForPlayer(playerid, "debes ser de una banda ilegal.", 2000);
	new vehicleid = GetPlayerVehicleID(playerid);
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowInfoForPlayer(playerid, "No eres el conductor.", 2000);
	new id = verificar_id_vehiculo(vehicleid), query[2056];
	if (id == -1) return ShowInfoForPlayer(playerid, "Este vehiculo no figura ningun propietario.", 2000);
	if (InfoVehiculo[id][vFamilia] != fam_id) return ShowInfoForPlayer(playerid, "No tienes las llaves de este vehiculo de la familia.", 2000);
	GetVehicleHealth(vehicleid, InfoVehiculo[id][vVida]);
	GetVehicleDamageStatus(vehicleid, InfoVehiculo[id][vDanioSuperficie], InfoVehiculo[id][vDanioPuertas], InfoVehiculo[id][vDanioLuces], InfoVehiculo[id][vDanioRuedas]);
	GetVehiclePos(vehicleid, InfoVehiculo[id][vPosicionX], InfoVehiculo[id][vPosicionY], InfoVehiculo[id][vPosicionZ]);
	GetVehicleZAngle(vehicleid, InfoVehiculo[id][vPosicionR]);
	InfoVehiculo[id][vGasolina] = GasolinaInicialVeh[vehicleid];
	InfoVehiculo[id][vVirtualWorld] = GetVehicleVirtualWorld(vehicleid);
	InfoVehiculo[id][vInterior] = GetVehicleInterior(vehicleid);
	mysql_format(DBngrp, query, sizeof query, "UPDATE vehiculos SET PosicionX = '%f', PosicionY = '%f', PosicionZ = '%f', PosicionR = '%f', Interior = '%d', VirtualWorld = '%d', Vida = '%f', DanioSuperficie = '%d', DanioPuertas = '%d', DanioLuces = '%d', DanioRuedas = '%d', Gasolina = '%d' WHERE ID = '%d'",
	InfoVehiculo[id][vPosicionX], InfoVehiculo[id][vPosicionY], InfoVehiculo[id][vPosicionZ], InfoVehiculo[id][vPosicionR], InfoVehiculo[id][vInterior], InfoVehiculo[id][vVirtualWorld],
	InfoVehiculo[id][vVida], InfoVehiculo[id][vDanioSuperficie], InfoVehiculo[id][vDanioPuertas], InfoVehiculo[id][vDanioLuces], InfoVehiculo[id][vDanioRuedas], InfoVehiculo[id][vGasolina], InfoVehiculo[id][vID]);
	mysql_tquery(DBngrp, query);
	AccionesRol(playerid, 0, "estaciona su vehiculo de familia.");
	return 1;
}
CMD:faparcar(playerid) return cmd_festacionar(playerid);


CMD:changename(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a este comando.", 2000);
	new nombre_viejo[MAX_PLAYER_NAME], nombre_nuevo[MAX_PLAYER_NAME], gformat[256];
	if (sscanf(params, "s[24]s[24]", nombre_viejo, nombre_nuevo)) return _Mensaje(playerid, 3, "0", "/changename [Nombre_Apellido (viejo)] [Nombre_Apellido (nuevo)]");
//	if (!IsValidChangeName(nombre_viejo)) return SendClientMessage(playerid, 0xCCCCCCFF, "El Nombre_Apellido viejo, no sigue el formato correcto.");
	if (!IsValidChangeName(nombre_nuevo)) return SendClientMessage(playerid, 0xCCCCCCFF, "El Nombre_Apellido nuevo, no sigue el formato correcto.");
	if (VerificarCuenta(nombre_viejo))
	{
	    new personajeID = -1, dni;
		reg_int(0, "ID", personajeID);
		reg_int(0, "Documento", dni);
		cache_unset_active();
		if (VerificarCuenta(nombre_nuevo) != 0) return SendClientMessage(playerid, 0xCCCCCCFF, "El Nombre_Apellido nuevo, esta existente.");
		foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && strcmp(InfoJugador[playerid2][jNombre_Apellido], nombre_viejo, true) == 0)
		{
			format(gformat, sizeof gformat, "La cuenta que quieres cambiarle el nombre, esta conectada (ID %d).", playerid2);
			SendClientMessage(playerid, 0x00CC00FF, gformat);
			return 1;
		}
		new vcount = 0, hcount = 0, ncount = 0;
		//renover cuenta
		guardar_string_mysql("cuentas", "Nombre_Apellido", personajeID, nombre_nuevo);
		//vehs
	 	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vModelo] != 0 && strcmp(nombre_viejo, InfoVehiculo[id][vPropietario], true) == 0 && InfoVehiculo[id][vFamilia] == 0)
		{
			vcount++;
			alm(InfoVehiculo[id][vPropietario], nombre_nuevo);
			guardar_string_mysql("vehiculos", "Propietario", InfoVehiculo[id][vID], nombre_nuevo);
 		}
		//casas
	 	Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0 && strcmp(nombre_viejo, InfoCasa[id][cPropietario], true) == 0)
		{
			hcount++;
			alm(InfoCasa[id][cPropietario], nombre_nuevo);
			guardar_string_mysql("casas", "Propietario", InfoCasa[id][cID], nombre_nuevo);
			LabelPickup_casa(id, 1);
 		}
		//negocios
	 	Loop(id, totalnegocios, 1) if (InfoNegocio[id][nTipo] != 0 && strcmp(nombre_viejo, InfoNegocio[id][nPropietario], true) == 0)
		{
			ncount++;
			alm(InfoNegocio[id][nPropietario], nombre_nuevo);
			guardar_string_mysql("negocios", "Propietario", InfoNegocio[id][nID], nombre_nuevo);
 		}
		//fin
		SendClientMessageEx(playerid, 0xCCCC00FF, "Realizaste con exito el cambio de nombre SQL %d (%s) antiguo: %s.", personajeID, nombre_nuevo, nombre_viejo);
		SendClientMessageEx(playerid, 0xCCCC00FF, "Se actualizaron las propiedades (casas %d) (vehs %d) (negocios %d)", hcount, vcount, ncount);
		new query[1056];
		mysql_format(DBngrp, query, sizeof query, "INSERT INTO `nombres_cambiados` (`Nombre_Apellido`, `Responsable`) VALUES ('%e', '%e')", nombre_viejo, InfoJugador[playerid][jNombre_Apellido]);
		mysql_tquery(DBngrp, query);
		return 1;
	}
	SendClientMessage(playerid, 0xCCCCCCFF, "El Nombre_Apellido viejo, no existe.");
	return 1;
}

CMD:comprarpiezas(playerid)
{
	if (IsTallerIn(playerid) == 0) { SendClientMessage(playerid, 0xccccccff, "* No estas en ningun taller mecanico."); return 1; }
	new dialog_taller[2056], gformat[256];
	format(gformat, sizeof gformat, "{CCCCCC}Reparacion - Costo: {00CC00}$%s\n", diner_coma(precioReparacion/2)); strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{CCCCCC}Pintura - Costo: {00CC00}$%s\n", diner_coma(precioPintura/2)); strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{CCCCCC}Gasolina - Costo: {00CC00}$%s\n", diner_coma(precioGasolina/2)); strcat(dialog_taller, gformat);
	//format(gformat, sizeof gformat, "{CCCCCC}Nitro - Costo: {00CC00}$%s\n", diner_coma(precioNitro/2)); strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{CCCCCC}Hidraulica - Costo: {00CC00}$%s\n", diner_coma(precioHidraulica/2)); strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{CCCCCC}Llantas - Costo: {00CC00}$%s\n", diner_coma(precioLlantas/2)); strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{CCCCCC}Tuneo - Costo: {00CC00}$%s\n", diner_coma(precioTuneo/2)); strcat(dialog_taller, gformat);
	Dialog_Show(playerid, Comprar_Piezas, DIALOG_STYLE_LIST, "Piezas mecanicas", dialog_taller, "Continuar", "Salir");
	return 1;
}

Dialog:Comprar_Piezas(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new costo = 0, name_producto[32];
	switch (listitem)
	{
		case 0:	costo = precioReparacion/2, alm(name_producto, "reparacion");
		case 1:	costo = precioPintura/2, alm(name_producto, "pintura");
		case 2:	costo = precioGasolina/2, alm(name_producto, "gasolina");
		//case 3:	costo = precioNitro/2, alm(name_producto, "nitro");
		case 4:	costo = precioHidraulica/2, alm(name_producto, "hidraulica");
		case 5:	costo = precioLlantas/2, alm(name_producto, "llantas");
		case 6:	costo = precioTuneo/2, alm(name_producto, "tuneo");
	}
	if (GetPlayerCash(playerid) < costo) { SendClientMessageEx(playerid, 0x008BFFFF, "* No tienes para pagar $%s.", diner_coma(costo)); return 1; }
	GivePlayerCash(playerid, -costo, "piezas de mecanico");
	InfoJugador[playerid][jPiezas][listitem]++;
	ActualizarPiezas(playerid);
	SendClientMessageEx(playerid, 0x00CC00FF, "Compraste una pieza de %s por $%s.", name_producto, diner_coma(costo));
	return 1;
}

CMD:piezas(playerid)
{
	if (IsPlayerJob(playerid, 8) == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes el trabajo de Mecanico, unete desde /trabajos.");
	new dialog_taller[2056], gformat[256];
	format(gformat, sizeof gformat, "{CCCCCC}Reparacion: {CCCC00}%d\n", InfoJugador[playerid][jPiezas][0]); strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{CCCCCC}Pintura: {CCCC00}%d\n", InfoJugador[playerid][jPiezas][1]); strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{CCCCCC}Gasolina: {CCCC00}%d\n", InfoJugador[playerid][jPiezas][2]); strcat(dialog_taller, gformat);
	//format(gformat, sizeof gformat, "{CCCCCC}Nitro: {CCCC00}%d\n", InfoJugador[playerid][jPiezas][3]); strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{CCCCCC}Hidraulica: {CCCC00}%d\n", InfoJugador[playerid][jPiezas][4]); strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{CCCCCC}Llantas: {CCCC00}%d\n", InfoJugador[playerid][jPiezas][5]); strcat(dialog_taller, gformat);
	format(gformat, sizeof gformat, "{CCCCCC}Tuneo: {CCCC00}%d\n", InfoJugador[playerid][jPiezas][6]); strcat(dialog_taller, gformat);
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, "Mis piezas", dialog_taller, "Cerrar", "");
	return 1;
}
CMD:mispiezas(playerid) return cmd_piezas(playerid);
CMD:piezasmecanico(playerid) return cmd_piezas(playerid);

CMD:reparacion(playerid, params[])
{
	if (IsPlayerJob(playerid, 8) == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes el trabajo de Mecanico, unete desde /trabajos.");
	if (InfoJugador[playerid][jPiezas][0] == 0) return SendClientMessage(playerid, 0x008BFFFF, "* No tienes piezas de reparacion, usa /comprarpiezas en un taller.");
	if (MecanicoDuty[playerid] == 0) return SendClientMessage(playerid, 0x008BFFFF, "* No estas en servicio, utiliza /mecanicoduty.");
	if (YaOfrecioMeca[playerid] != -1) return SendClientMessage(playerid, 0x008BFFFF, "* Ya has ofrecido un servicio mecanico, espera respuesta.");
	if (!CheckTimer(120, TimerOperacionMeca[playerid]))
	{
		new playerid2, precio, gdsdu[320];
		if (sscanf(params, "dd", playerid2, precio)) return _Mensaje(playerid, 3, "0", "/reparacion [jugador id] [precio $]");
		if (playerid2 == playerid) return _Mensaje(playerid, 3, "0", "/reparacion [jugador id] [precio $]");
		if (!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
		if (EsElOfrecedorMeca[playerid2] != -1) return ShowInfoForPlayer(playerid, "El jugador seleccionado ya le han ofrecido este servicio.", 2000);
		if (precio < 50 || precio > precioReparacion) return SendClientMessageEx(playerid, 0x008BFFFF, "* No puedes pedir menos de $50, ni mas de $%s.", diner_coma(precioReparacion));
		if (GetPlayerState(playerid2) != PLAYER_STATE_DRIVER) return ShowInfoForPlayer(playerid, "Ese jugador no esta dentro de un vehiculo.", 2000);
		if (GetPlayerVehicleSeat(playerid2) != 0) return ShowInfoForPlayer(playerid, "El jugador seleccionado debe estar en el asiento del conductor.", 2000);
		new vehicleid = GetPlayerVehicleID(playerid2);
		new Float: cvida;
		GetVehicleHealth(vehicleid, cvida);
		new Percent_damage = floatround(cvida);
		if (Percent_damage >= 999) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo no necesita reparacion.");
		PrecioMecaOpera[playerid2] = precio;
		EsElOfrecedorMeca[playerid2] = playerid;
		YaOfrecioMeca[playerid] = playerid2;
		format(gdsdu, sizeof gdsdu, "{FF0000}%s{EBEBEB} te ofrece {FFBF00}reparacion{EBEBEB} por {00CC00}$%s{EBEBEB}\n\
		Si quieres proceder con el servicio presiona '{FFFF00}continuar{EBEBEB}'\n", NombreJugador(playerid), diner_coma(precio));
		Dialog_Show(playerid2, ShowReparasion, DIALOG_STYLE_MSGBOX, "Reparacion", gdsdu, "Continuar", "Salir");
		SendClientMessageEx(playerid, 0xCCCC00FF, "Ofeciste reparacion a %s por $%s, espera la respuesta.", NombreJugador(playerid2), diner_coma(precio));
	}
	else
	{
		SendClientMessageEx(playerid, 0xCCCCCCFF, "Faltan %s para que puedas usar este comando de nuevo.", Segundos_tiempo( CheckTimer(120, TimerOperacionMeca[playerid]) ));
	}
 	return 1;
}

Dialog:ShowReparasion(playerid, response, listitem, inputtext[])
{
	new mecanico = EsElOfrecedorMeca[playerid], costo = PrecioMecaOpera[playerid], gformat[234];
	if (!IsPlayerConnectedEx(mecanico))
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		SendClientMessageEx(playerid, 0xCCCCCCFF, "El mecanico se desconecto, se cancelo la operacion.");
		return 1;
	}
	if (!response)
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		YaOfrecioMeca[mecanico] = -1;
		TimerOperacionMeca[mecanico] = -1;
		format(gformat, sizeof gformat, "rechazo la reparacion de %s.", NombreJugador(mecanico));
		cmd_me(playerid, gformat);
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		YaOfrecioMeca[mecanico] = -1;
		TimerOperacionMeca[mecanico] = -1;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, 0xCCCCCCFF, gformat);
		SendClientMessage(mecanico, 0xCCCCCCFF, "* Se cancelo la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	format(gformat, sizeof gformat, "repara el vehiculo de %s.", NombreJugador(playerid));
	cmd_me(mecanico, gformat);
	GivePlayerCash(playerid, -costo, "mecanico reparar");
	GivePlayerCash(mecanico, costo, "mecanico reparar");
	InfoJugador[mecanico][jPiezas][0]--;
	ActualizarPiezas(mecanico);
	new vehicleid = GetPlayerVehicleID(playerid);
	RepairVehicle(vehicleid);
	SetVehicleHealth(vehicleid, 1000.0);
	PrecioMecaOpera[playerid] = -1;
	EsElOfrecedorMeca[playerid] = -1;
	YaOfrecioMeca[mecanico] = -1;
	TimerOperacionMeca[mecanico] = gettime();
	return 1;
}

CMD:gasolina(playerid, params[])
{
	if (IsPlayerJob(playerid, 8) == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes el trabajo de Mecanico, unete desde /trabajos.");
	if (InfoJugador[playerid][jPiezas][2] == 0) return SendClientMessage(playerid, 0x008BFFFF, "* No tienes piezas de gasolina, usa /comprarpiezas en un taller.");
	if (MecanicoDuty[playerid] == 0) return SendClientMessage(playerid, 0x008BFFFF, "* No estas en servicio, utiliza /mecanicoduty.");
	if (YaOfrecioMeca[playerid] != -1) return SendClientMessage(playerid, 0x008BFFFF, "* Ya has ofrecido un servicio mecanico, espera respuesta.");
	if (!CheckTimer(120, TimerOperacionMeca[playerid]))
	{
		new playerid2, precio, gdsdu[320];
		if (sscanf(params, "dd", playerid2, precio)) return _Mensaje(playerid, 3, "0", "/gasolina [jugador id] [precio $]");
		if (playerid2 == playerid) return _Mensaje(playerid, 3, "0", "/gasolina [jugador id] [precio $]");
		if (!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
		if (EsElOfrecedorMeca[playerid2] != -1) return ShowInfoForPlayer(playerid, "El jugador seleccionado ya le han ofrecido este servicio.", 2000);
		if (precio < 50 || precio > precioGasolina) return SendClientMessageEx(playerid, 0x008BFFFF, "* No puedes pedir menos de $50, ni mas de $%s.", diner_coma(precioGasolina));
		if (GetPlayerState(playerid2) != PLAYER_STATE_DRIVER) return ShowInfoForPlayer(playerid, "Ese jugador no esta dentro de un vehiculo.", 2000);
		if (GetPlayerVehicleSeat(playerid2) != 0) return ShowInfoForPlayer(playerid, "El jugador seleccionado debe estar en el asiento del conductor.", 2000);
		new vehicleid = GetPlayerVehicleID(playerid2);
		if (GasolinaInicialVeh[vehicleid] >= 199) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo no necesita mas gasolina.");
		PrecioMecaOpera[playerid2] = precio;
		EsElOfrecedorMeca[playerid2] = playerid;
		YaOfrecioMeca[playerid] = playerid2;
		format(gdsdu, sizeof gdsdu, "{FF0000}%s{EBEBEB} te ofrece {FFBF00}gasolina{EBEBEB} por {00CC00}$%s{EBEBEB}\n\
		Si quieres proceder con el servicio presiona '{FFFF00}continuar{EBEBEB}'\n", NombreJugador(playerid), diner_coma(precio));
		Dialog_Show(playerid2, ShowGazoslina, DIALOG_STYLE_MSGBOX, "Gasolina", gdsdu, "Continuar", "Salir");
		SendClientMessageEx(playerid, 0xCCCC00FF, "Ofeciste gasolina a %s por $%s, espera la respuesta.", NombreJugador(playerid2), diner_coma(precio));
	}
	else
	{
		SendClientMessageEx(playerid, 0xCCCCCCFF, "Faltan %s para que puedas usar este comando de nuevo.", Segundos_tiempo( CheckTimer(120, TimerOperacionMeca[playerid]) ));
	}
 	return 1;
}

Dialog:ShowGazoslina(playerid, response, listitem, inputtext[])
{
	new mecanico = EsElOfrecedorMeca[playerid], costo = PrecioMecaOpera[playerid], gformat[234];
	if (!IsPlayerConnectedEx(mecanico))
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		SendClientMessageEx(playerid, 0xCCCCCCFF, "El mecanico se desconecto, se cancelo la operacion.");
		return 1;
	}
	if (!response)
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		YaOfrecioMeca[mecanico] = -1;
		TimerOperacionMeca[mecanico] = -1;
		format(gformat, sizeof gformat, "rechazo la gasolina de %s.", NombreJugador(mecanico));
		cmd_me(playerid, gformat);
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		YaOfrecioMeca[mecanico] = -1;
		TimerOperacionMeca[mecanico] = -1;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, 0xCCCCCCFF, gformat);
		SendClientMessage(mecanico, 0xCCCCCCFF, "* Se cancelo la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	format(gformat, sizeof gformat, "llena de combustible el vehiculo de %s.", NombreJugador(playerid));
	cmd_me(mecanico, gformat);
	GivePlayerCash(playerid, -costo, "mecanico gasolina");
	GivePlayerCash(mecanico, costo, "mecanico gasolina");
	InfoJugador[mecanico][jPiezas][2]--;
	ActualizarPiezas(mecanico);
	new vehicleid = GetPlayerVehicleID(playerid);
	GasolinaInicialVeh[vehicleid] += 100;
	if (GasolinaInicialVeh[vehicleid] >= 200) GasolinaInicialVeh[vehicleid] = 200;
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vDL] == vehicleid)
	{
		InfoVehiculo[v][vGasolina] = GasolinaInicialVeh[vehicleid];
		guardar_int_mysql("vehiculos", "Gasolina", InfoVehiculo[v][vID], InfoVehiculo[v][vGasolina]);
		break;
	}
	PrecioMecaOpera[playerid] = -1;
	EsElOfrecedorMeca[playerid] = -1;
	YaOfrecioMeca[mecanico] = -1;
	TimerOperacionMeca[mecanico] = gettime();
	return 1;
}

CMD:hidraulica(playerid, params[])
{
	if (IsPlayerJob(playerid, 8) == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes el trabajo de Mecanico, unete desde /trabajos.");
	if (InfoJugador[playerid][jPiezas][4] == 0) return SendClientMessage(playerid, 0x008BFFFF, "* No tienes piezas de hidraulica, usa /comprarpiezas en un taller.");
	if (MecanicoDuty[playerid] == 0) return SendClientMessage(playerid, 0x008BFFFF, "* No estas en servicio, utiliza /mecanicoduty.");
	if (YaOfrecioMeca[playerid] != -1) return SendClientMessage(playerid, 0x008BFFFF, "* Ya has ofrecido un servicio mecanico, espera respuesta.");
	if (!CheckTimer(120, TimerOperacionMeca[playerid]))
	{
		new playerid2, precio, gdsdu[320];
		if (sscanf(params, "dd", playerid2, precio)) return _Mensaje(playerid, 3, "0", "/hidraulica [jugador id] [precio $]");
		if (playerid2 == playerid) return _Mensaje(playerid, 3, "0", "/hidraulica [jugador id] [precio $]");
		if (!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
		if (EsElOfrecedorMeca[playerid2] != -1) return ShowInfoForPlayer(playerid, "El jugador seleccionado ya le han ofrecido este servicio.", 2000);
		if (precio < 50 || precio > precioHidraulica) return SendClientMessageEx(playerid, 0x008BFFFF, "* No puedes pedir menos de $50, ni mas de $%s.", diner_coma(precioHidraulica));
		if (GetPlayerState(playerid2) != PLAYER_STATE_DRIVER) return ShowInfoForPlayer(playerid, "Ese jugador no esta dentro de un vehiculo.", 2000);
		if (GetPlayerVehicleSeat(playerid2) != 0) return ShowInfoForPlayer(playerid, "El jugador seleccionado debe estar en el asiento del conductor.", 2000);
		new vehicleid = GetPlayerVehicleID(playerid2);
		if (Valid_Vehicle_Nitro(GetVehicleModel(vehicleid)) == 0) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo no admite componente hidraulica.");
		if (tiene_componente(1087, vehicleid) != 0) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo ya tiene componente hidraulica.");
		if (vehiculos_legales(vehicleid) != 0) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo no se puede modificar.");
		PrecioMecaOpera[playerid2] = precio;
		EsElOfrecedorMeca[playerid2] = playerid;
		YaOfrecioMeca[playerid] = playerid2;
		format(gdsdu, sizeof gdsdu, "{FF0000}%s{EBEBEB} te ofrece {FFBF00}hidraulica{EBEBEB} por {00CC00}$%s{EBEBEB}\n\
		Si quieres proceder con el servicio presiona '{FFFF00}continuar{EBEBEB}'\n", NombreJugador(playerid), diner_coma(precio));
		Dialog_Show(playerid2, ShowHidrakulca, DIALOG_STYLE_MSGBOX, "Hidraulica", gdsdu, "Continuar", "Salir");
		SendClientMessageEx(playerid, 0xCCCC00FF, "Ofeciste hidraulica a %s por $%s, espera la respuesta.", NombreJugador(playerid2), diner_coma(precio));
	}
	else
	{
		SendClientMessageEx(playerid, 0xCCCCCCFF, "Faltan %s para que puedas usar este comando de nuevo.", Segundos_tiempo( CheckTimer(120, TimerOperacionMeca[playerid]) ));
	}
 	return 1;
}

Dialog:ShowHidrakulca(playerid, response, listitem, inputtext[])
{
	new mecanico = EsElOfrecedorMeca[playerid], costo = PrecioMecaOpera[playerid], gformat[234];
	if (!IsPlayerConnectedEx(mecanico))
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		SendClientMessageEx(playerid, 0xCCCCCCFF, "El mecanico se desconecto, se cancelo la operacion.");
		return 1;
	}
	if (!response)
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		YaOfrecioMeca[mecanico] = -1;
		TimerOperacionMeca[mecanico] = -1;
		format(gformat, sizeof gformat, "rechazo la hidraulica de %s.", NombreJugador(mecanico));
		cmd_me(playerid, gformat);
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		YaOfrecioMeca[mecanico] = -1;
		TimerOperacionMeca[mecanico] = -1;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, 0xCCCCCCFF, gformat);
		SendClientMessage(mecanico, 0xCCCCCCFF, "* Se cancelo la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	format(gformat, sizeof gformat, "instala hidraulica en el vehiculo de %s.", NombreJugador(playerid));
	cmd_me(mecanico, gformat);
	GivePlayerCash(playerid, -costo, "mecanico hidraulica");
	GivePlayerCash(mecanico, costo, "mecanico hidraulica");
	InfoJugador[mecanico][jPiezas][4]--;
	ActualizarPiezas(mecanico);
	new vehicleid = GetPlayerVehicleID(playerid);
	AddVehicleComponent(vehicleid, 1087);
	SaveVehicleMods(vehicleid);
	PrecioMecaOpera[playerid] = -1;
	EsElOfrecedorMeca[playerid] = -1;
	YaOfrecioMeca[mecanico] = -1;
	TimerOperacionMeca[mecanico] = gettime();
	return 1;
}

new PinturaCol1[MAX_PLAYERS], PinturaCol2[MAX_PLAYERS];

CMD:pintura(playerid, params[])
{
	if (IsPlayerJob(playerid, 8) == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes el trabajo de Mecanico, unete desde /trabajos.");
	if (InfoJugador[playerid][jPiezas][1] == 0) return SendClientMessage(playerid, 0x008BFFFF, "* No tienes piezas de pintura, usa /comprarpiezas en un taller.");
	if (MecanicoDuty[playerid] == 0) return SendClientMessage(playerid, 0x008BFFFF, "* No estas en servicio, utiliza /mecanicoduty.");
	if (YaOfrecioMeca[playerid] != -1) return SendClientMessage(playerid, 0x008BFFFF, "* Ya has ofrecido un servicio mecanico, espera respuesta.");
	if (!CheckTimer(120, TimerOperacionMeca[playerid]))
	{
		new playerid2, precio, color1, color2, gdsdu[320];
		if (sscanf(params, "dddd", playerid2, precio, color1, color2)) return _Mensaje(playerid, 3, "0", "/pintura [jugador id] [precio $] [color 1] [color 2]");
		if (playerid2 == playerid) return _Mensaje(playerid, 3, "0", "/pintura [jugador id] [precio $] [color 1] [color 2]");
		if (!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
		if (EsElOfrecedorMeca[playerid2] != -1) return ShowInfoForPlayer(playerid, "El jugador seleccionado ya le han ofrecido este servicio.", 2000);
		if (precio < 50 || precio > precioPintura) return SendClientMessageEx(playerid, 0x008BFFFF, "* No puedes pedir menos de $50, ni mas de $%s.", diner_coma(precioPintura));
		if (color1 < 0 || color1 > 250) { SendClientMessage(playerid, 0x008BFFFF, "El color 1 no puede super el ID 250."); return 1; }
		if (color2 < 0 || color2 > 250) { SendClientMessage(playerid, 0x008BFFFF, "El color 2 no puede super el ID 250."); return 1; }
		if (GetPlayerState(playerid2) != PLAYER_STATE_DRIVER) return ShowInfoForPlayer(playerid, "Ese jugador no esta dentro de un vehiculo.", 2000);
		if (GetPlayerVehicleSeat(playerid2) != 0) return ShowInfoForPlayer(playerid, "El jugador seleccionado debe estar en el asiento del conductor.", 2000);
		new vehicleid = GetPlayerVehicleID(playerid2);
		if (vehiculos_legales(vehicleid) != 0) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo no se puede modificar.");
		PrecioMecaOpera[playerid2] = precio;
		EsElOfrecedorMeca[playerid2] = playerid;
		YaOfrecioMeca[playerid] = playerid2;
		PinturaCol1[playerid2] = color1, PinturaCol2[playerid2] = color2;
		format(gdsdu, sizeof gdsdu, "{FF0000}%s{EBEBEB} te ofrece {FFBF00}pintura %d|%d{EBEBEB} por {00CC00}$%s{EBEBEB}\n\
		Si quieres proceder con el servicio presiona '{FFFF00}continuar{EBEBEB}'\n", NombreJugador(playerid), color1, color2, diner_coma(precio));
		Dialog_Show(playerid2, ShowPinturlk, DIALOG_STYLE_MSGBOX, "Pintura", gdsdu, "Continuar", "Salir");
		SendClientMessageEx(playerid, 0xCCCC00FF, "Ofeciste pintura %d|%d a %s por $%s, espera la respuesta.", color1, color2, NombreJugador(playerid2), diner_coma(precio));
	}
	else
	{
		SendClientMessageEx(playerid, 0xCCCCCCFF, "Faltan %s para que puedas usar este comando de nuevo.", Segundos_tiempo( CheckTimer(120, TimerOperacionMeca[playerid]) ));
	}
 	return 1;
}

Dialog:ShowPinturlk(playerid, response, listitem, inputtext[])
{
	new mecanico = EsElOfrecedorMeca[playerid], costo = PrecioMecaOpera[playerid], color1 = PinturaCol1[playerid], color2 = PinturaCol2[playerid], gformat[234];
	if (!IsPlayerConnectedEx(mecanico))
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		SendClientMessageEx(playerid, 0xCCCCCCFF, "El mecanico se desconecto, se cancelo la operacion.");
		return 1;
	}
	if (!response)
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		YaOfrecioMeca[mecanico] = -1;
		TimerOperacionMeca[mecanico] = -1;
		format(gformat, sizeof gformat, "rechazo la pintura de %s.", NombreJugador(mecanico));
		cmd_me(playerid, gformat);
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		YaOfrecioMeca[mecanico] = -1;
		TimerOperacionMeca[mecanico] = -1;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, 0xCCCCCCFF, gformat);
		SendClientMessage(mecanico, 0xCCCCCCFF, "* Se cancelo la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	format(gformat, sizeof gformat, "cambia la pintura del vehiculo de %s.", NombreJugador(playerid));
	cmd_me(mecanico, gformat);
	GivePlayerCash(playerid, -costo, "mecanico pintura");
	GivePlayerCash(mecanico, costo, "mecanico pintura");
	InfoJugador[mecanico][jPiezas][1]--;
	ActualizarPiezas(mecanico);
	new vehicleid = GetPlayerVehicleID(playerid);
	ChangeVehicleColor(vehicleid, color1, color2);
	SendClientMessage(playerid, ColorList[color1], "Color nuevo del vehiculo mostrado en este mensaje.");
	new id = verificar_id_vehiculo(vehicleid);
	if (id != -1)
	{
		InfoVehiculo[id][vColor1] = color1;
		InfoVehiculo[id][vColor2] = color2;
		guardar_int_mysql("vehiculos", "Color1", InfoVehiculo[id][vID], InfoVehiculo[id][vColor1]);
		guardar_int_mysql("vehiculos", "Color2", InfoVehiculo[id][vID], InfoVehiculo[id][vColor2]);
	}
	PrecioMecaOpera[playerid] = -1;
	EsElOfrecedorMeca[playerid] = -1;
	YaOfrecioMeca[mecanico] = -1;
	TimerOperacionMeca[mecanico] = gettime();
	return 1;
}

CMD:paintjob(playerid, params[])
{
	if (IsPlayerJob(playerid, 8) == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes el trabajo de Mecanico, unete desde /trabajos.");
	if (InfoJugador[playerid][jPiezas][1] == 0) return SendClientMessage(playerid, 0x008BFFFF, "* No tienes piezas de pintura, usa /comprarpiezas en un taller.");
	if (MecanicoDuty[playerid] == 0) return SendClientMessage(playerid, 0x008BFFFF, "* No estas en servicio, utiliza /mecanicoduty.");
	if (YaOfrecioMeca[playerid] != -1) return SendClientMessage(playerid, 0x008BFFFF, "* Ya has ofrecido un servicio mecanico, espera respuesta.");
	if (!CheckTimer(120, TimerOperacionMeca[playerid]))
	{
		new playerid2, precio, color, gdsdu[320];
		if (sscanf(params, "ddd", playerid2, precio, color)) return _Mensaje(playerid, 3, "0", "/paintjob [jugador id] [precio $] [color]");
		if (playerid2 == playerid) return _Mensaje(playerid, 3, "0", "/paintjob [jugador id] [precio $] [color]");
		if (!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
		if (EsElOfrecedorMeca[playerid2] != -1) return ShowInfoForPlayer(playerid, "El jugador seleccionado ya le han ofrecido este servicio.", 2000);
		if (precio < 50 || precio > precioPintura) return SendClientMessageEx(playerid, 0x008BFFFF, "* No puedes pedir menos de $50, ni mas de $%s.", diner_coma(precioPintura));
		if (color < 0 || color > 3) return SendClientMessage(playerid, 0x008BFFFF, "* Color del paintjob no puede ser mayor a 2. Para removerlo introduzca 3");
		if (GetPlayerState(playerid2) != PLAYER_STATE_DRIVER) return ShowInfoForPlayer(playerid, "Ese jugador no esta dentro de un vehiculo.", 2000);
		if (GetPlayerVehicleSeat(playerid2) != 0) return ShowInfoForPlayer(playerid, "El jugador seleccionado debe estar en el asiento del conductor.", 2000);
		new vehicleid = GetPlayerVehicleID(playerid2);
		if (vehiculos_legales(vehicleid) != 0) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo no se puede modificar.");
		PrecioMecaOpera[playerid2] = precio;
		EsElOfrecedorMeca[playerid2] = playerid;
		YaOfrecioMeca[playerid] = playerid2;
		PinturaCol1[playerid2] = color;
		VehiculoMEcha[playerid2] = vehicleid;
		format(gdsdu, sizeof gdsdu, "{FF0000}%s{EBEBEB} te ofrece {FFBF00}paintjob %d{EBEBEB} por {00CC00}$%s{EBEBEB}\n\
		Si quieres proceder con el servicio presiona '{FFFF00}continuar{EBEBEB}'\n", NombreJugador(playerid), color, diner_coma(precio));
		Dialog_Show(playerid2, ShowPienjuv, DIALOG_STYLE_MSGBOX, "PaintJob", gdsdu, "Continuar", "Salir");
		SendClientMessageEx(playerid, 0xCCCC00FF, "Ofeciste paintjob %d a %s por $%s, espera la respuesta.", color, NombreJugador(playerid2), diner_coma(precio));
	}
	else
	{
		SendClientMessageEx(playerid, 0xCCCCCCFF, "Faltan %s para que puedas usar este comando de nuevo.", Segundos_tiempo( CheckTimer(120, TimerOperacionMeca[playerid]) ));
	}
 	return 1;
}

Dialog:ShowPienjuv(playerid, response, listitem, inputtext[])
{
	new mecanico = EsElOfrecedorMeca[playerid], vehicleid = VehiculoMEcha[playerid], costo = PrecioMecaOpera[playerid], color = PinturaCol1[playerid], gformat[234];
	if (!IsPlayerConnectedEx(mecanico))
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		SendClientMessageEx(playerid, 0xCCCCCCFF, "El mecanico se desconecto, se cancelo la operacion.");
		return 1;
	}
	if (!response)
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		YaOfrecioMeca[mecanico] = -1;
		TimerOperacionMeca[mecanico] = -1;
		format(gformat, sizeof gformat, "rechazo el paintjob de %s.", NombreJugador(mecanico));
		cmd_me(playerid, gformat);
		return 1;
	}
	if (!GetVehicleModel(vehicleid))
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		YaOfrecioMeca[mecanico] = -1;
		TimerOperacionMeca[mecanico] = -1;
		SendClientMessage(playerid, 0xCCCCCCFF, "Se rechazo el servicio porque no estas dentro de un vehiculo.");
		SendClientMessage(mecanico, 0xCCCCCCFF, "Se rechazo el servicio porque el cliente no esta en un vehiculo.");
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		YaOfrecioMeca[mecanico] = -1;
		TimerOperacionMeca[mecanico] = -1;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, 0xCCCCCCFF, gformat);
		SendClientMessage(mecanico, 0xCCCCCCFF, "* Se cancelo la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	format(gformat, sizeof gformat, "cambia el paintjob del vehiculo de %s.", NombreJugador(playerid));
	cmd_me(mecanico, gformat);
	GivePlayerCash(playerid, -costo, "mecanico paintjob");
	GivePlayerCash(mecanico, costo, "mecanico paintjob");
	InfoJugador[mecanico][jPiezas][1]--;
	ActualizarPiezas(mecanico);
	ChangeVehiclePaintjob(vehicleid, color);
	new id = verificar_id_vehiculo(vehicleid);
	if (id != -1)
	{
		InfoVehiculo[id][vPaintJob] = color;
		guardar_int_mysql("vehiculos", "PaintJob", InfoVehiculo[id][vID], color);
	}
	TogglePlayerControllable(playerid, true);
	PrecioMecaOpera[playerid] = -1;
	EsElOfrecedorMeca[playerid] = -1;
	YaOfrecioMeca[mecanico] = -1;
	TimerOperacionMeca[mecanico] = gettime();
	return 1;
}

CMD:llantas(playerid, params[])
{
	if (IsPlayerJob(playerid, 8) == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes el trabajo de Mecanico, unete desde /trabajos.");
	if (InfoJugador[playerid][jPiezas][5] == 0) return SendClientMessage(playerid, 0x008BFFFF, "* No tienes piezas de llantas, usa /comprarpiezas en un taller.");
	if (MecanicoDuty[playerid] == 0) return SendClientMessage(playerid, 0x008BFFFF, "* No estas en servicio, utiliza /mecanicoduty.");
	if (YaOfrecioMeca[playerid] != -1) return SendClientMessage(playerid, 0x008BFFFF, "* Ya has ofrecido un servicio mecanico, espera respuesta.");
	if (!CheckTimer(120, TimerOperacionMeca[playerid]))
	{
		new playerid2, precio, gdsdu[320];
		if (sscanf(params, "dd", playerid2, precio)) return _Mensaje(playerid, 3, "0", "/llantas [jugador id] [precio $]");
		if (playerid2 == playerid) return _Mensaje(playerid, 3, "0", "/llantas [jugador id] [precio $]");
		if (!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
		if (EsElOfrecedorMeca[playerid2] != -1) return ShowInfoForPlayer(playerid, "El jugador seleccionado ya le han ofrecido este servicio.", 2000);
		if (precio < 50 || precio > precioLlantas) return SendClientMessageEx(playerid, 0x008BFFFF, "* No puedes pedir menos de $50, ni mas de $%s.", diner_coma(precioLlantas));
		if (GetPlayerState(playerid2) != PLAYER_STATE_DRIVER) return ShowInfoForPlayer(playerid, "Ese jugador no esta dentro de un vehiculo.", 2000);
		if (GetPlayerVehicleSeat(playerid2) != 0) return ShowInfoForPlayer(playerid, "El jugador seleccionado debe estar en el asiento del conductor.", 2000);
		new vehicleid = GetPlayerVehicleID(playerid2);
		if (EstaEnAvion(vehicleid) || EstaEnBote(vehicleid) || EnMotos_Bicis(vehicleid)) return SendClientMessage(playerid, 0xccccccff, "* No puedes colocar llantas en ese tipo de vehiculo.");
		if (vehiculos_legales(vehicleid) != 0) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo no se puede modificar.");
		PrecioMecaOpera[playerid2] = precio;
		EsElOfrecedorMeca[playerid2] = playerid;
		YaOfrecioMeca[playerid] = playerid2;
		format(gdsdu, sizeof gdsdu, "{FF0000}%s{EBEBEB} te ofrece {FFBF00}llantas{EBEBEB} por {00CC00}$%s{EBEBEB}\n\
		Si quieres proceder con el servicio presiona '{FFFF00}continuar{EBEBEB}', veras una serie de llantas:\n", NombreJugador(playerid), diner_coma(precio));
		Dialog_Show(playerid2, Show1Yantas, DIALOG_STYLE_MSGBOX, "Juego de llantas", gdsdu, "Continuar", "Salir");
		SendClientMessageEx(playerid, 0xCCCC00FF, "Ofeciste llantas a %s por $%s, espera la respuesta.", NombreJugador(playerid2), diner_coma(precio));
	}
	else
	{
		SendClientMessageEx(playerid, 0xCCCCCCFF, "Faltan %s para que puedas usar este comando de nuevo.", Segundos_tiempo( CheckTimer(120, TimerOperacionMeca[playerid]) ));
	}
 	return 1;
}

Dialog:Show1Yantas(playerid, response, listitem, inputtext[])
{
	new mecanico = EsElOfrecedorMeca[playerid], costo = PrecioMecaOpera[playerid], gformat[234];
	if (!IsPlayerConnectedEx(mecanico))
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		SendClientMessageEx(playerid, 0xCCCCCCFF, "El mecanico se desconecto, se cancelo la operacion.");
		return 1;
	}
	if (!response)
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		YaOfrecioMeca[mecanico] = -1;
		TimerOperacionMeca[mecanico] = -1;
		format(gformat, sizeof gformat, "rechazo las llantas de %s.", NombreJugador(mecanico));
		cmd_me(playerid, gformat);
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		YaOfrecioMeca[mecanico] = -1;
		TimerOperacionMeca[mecanico] = -1;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, 0xCCCCCCFF, gformat);
		SendClientMessage(mecanico, 0xCCCCCCFF, "* Se cancelo la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	Dialog_Show(playerid, Show2Yantas, DIALOG_STYLE_LIST, "Juego de llantas", "- Offroad\n- Shadow\n- Mega\n- Rimshine\n- Wires\n- Classic\n- Twist\n- Cutter\n- Stitch\n- Grove\n- Import\n- Dollar\n- Trance\n- Atomic\n- Ahab\n- Virtual\n- Access", "Comprar", "Salir");
	return 1;
}

Dialog:Show2Yantas(playerid, response, listitem, inputtext[])
{
	new mecanico = EsElOfrecedorMeca[playerid], costo = PrecioMecaOpera[playerid], gformat[234];
	if (!IsPlayerConnectedEx(mecanico))
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		SendClientMessageEx(playerid, 0xCCCCCCFF, "El mecanico se desconecto, se cancelo la operacion.");
		return 1;
	}
	if (!response)
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		YaOfrecioMeca[mecanico] = -1;
		TimerOperacionMeca[mecanico] = -1;
		format(gformat, sizeof gformat, "rechazo las llantas de %s.", NombreJugador(mecanico));
		cmd_me(playerid, gformat);
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		PrecioMecaOpera[playerid] = -1;
		EsElOfrecedorMeca[playerid] = -1;
		YaOfrecioMeca[mecanico] = -1;
		TimerOperacionMeca[mecanico] = -1;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, 0xCCCCCCFF, gformat);
		SendClientMessage(mecanico, 0xCCCCCCFF, "* Se cancelo la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	new name_llantas[32], rin = -1;
	switch (listitem)
	{
		case 0: rin = 1025, alm(name_llantas, "offroad");
		case 1: rin = 1073, alm(name_llantas, "shadow");
		case 2: rin = 1074, alm(name_llantas, "mega");
		case 3: rin = 1075, alm(name_llantas, "rimshine");
		case 4: rin = 1076, alm(name_llantas, "wires");
		case 5: rin = 1077, alm(name_llantas, "classic");
		case 6: rin = 1078, alm(name_llantas, "twist");
		case 7: rin = 1079, alm(name_llantas, "cutter");
		case 8: rin = 1080, alm(name_llantas, "stitch");
		case 9: rin = 1081, alm(name_llantas, "grove");
		case 10: rin = 1082, alm(name_llantas, "import");
		case 11: rin = 1083, alm(name_llantas, "dollar");
		case 12: rin = 1084, alm(name_llantas, "trance");
		case 13: rin = 1085, alm(name_llantas, "atomic");
		case 14: rin = 1096, alm(name_llantas, "ahab");
		case 15: rin = 1097, alm(name_llantas, "virtual");
		case 16: rin = 1098, alm(name_llantas, "access");
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	if (tiene_componente(rin, vehicleid) != 0)
	{
		SendClientMessage(playerid, 0xccccccff, "* Ese juego de llantas ya esta instalado.");
		return 1;
	}
	AddVehicleComponent(vehicleid, rin);
	SaveVehicleMods(vehicleid);
	format(gformat, sizeof gformat, "instala %s en el vehiculo de %s.", name_llantas, NombreJugador(playerid));
	cmd_me(mecanico, gformat);
	GivePlayerCash(playerid, -costo, "mecanico llantas");
	GivePlayerCash(mecanico, costo, "mecanico llantas");
	InfoJugador[mecanico][jPiezas][5]--;
	ActualizarPiezas(mecanico);
	PrecioMecaOpera[playerid] = -1;
	EsElOfrecedorMeca[playerid] = -1;
	YaOfrecioMeca[mecanico] = -1;
	TimerOperacionMeca[mecanico] = gettime();
	return 1;
}

CMD:mecanicoduty(playerid)
{
	if (IsPlayerJob(playerid, 8) == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes el trabajo de Mecanico, unete desde /trabajos.");
	if (MecanicoDuty[playerid] == 0)
	{
		MecanicoDuty[playerid] = 1;
		new string[190];
		format(string, sizeof string, "Anuncio: Mecanico %s en servicio. (( /mecanicos ))", NombreJugador(playerid));
		_MensajeSAN(0x1EB032FF, string);
	}
	else
	{
		MecanicoDuty[playerid] = 0;
		SendClientMessage(playerid, 0xCCCCCCFF, "Dejaste de estar en servicio.");
	}
	return 1;
}

CMD:cancelarmecanico(playerid)
{
	if (IsPlayerJob(playerid, 8) == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes el trabajo de Mecanico, unete desde /trabajos.");
	if (MecanicoDuty[playerid] == 0) return SendClientMessage(playerid, 0x008BFFFF, "* No estas en servicio, utiliza /mecanicoduty.");
	if (ConLlamadoMecanico[playerid] == -1) return SendClientMessageEx(playerid, 0x008BFFFF, "* No tienes ningun llamado activo.");
	new playerid2 = ConLlamadoMecanico[playerid];
	if (IsPlayerConnectedEx(playerid2))
	{
		SendClientMessageEx(playerid2, 0xCCCC00FF, "El mecanico %s cancelo el llamado, intenta llamar otro.", NombreJugador(playerid));
		TimerOtherLlamado[playerid2] = 0;
		TiempoLlamadoMecanico[playerid2] = -1;
		EnLlamadoMecanico[playerid2] = 0;
		SendClientMessageEx(playerid, 0xCCCC00FF, "Cancelaste el llamado mecanico activo de %s.", NombreJugador(playerid2));
	}
	else { SendClientMessageEx(playerid, 0xCCCC00FF, "Cancelaste el llamado mecanico activo."); }
	ConLlamadoMecanico[playerid] = -1;
	DisablePlayerCheckpoint(playerid);
	return 1;
}

CMD:llamados(playerid)
{
	if (IsPlayerJob(playerid, 8) == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes el trabajo de Mecanico, unete desde /trabajos.");
	if (MecanicoDuty[playerid] == 0) return SendClientMessage(playerid, 0x008BFFFF, "* No estas en servicio, utiliza /mecanicoduty.");
	if (ConLlamadoMecanico[playerid] != -1) return SendClientMessageEx(playerid, 0x008BFFFF, "* Tienes un llamado activo del jugador %s.", NombreJugador(ConLlamadoMecanico[playerid]));
	new gformat[256], dialog[2056], iCount = 0;
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && EnLlamadoMecanico[playerid2] != 0)
	{
		format(gformat, sizeof gformat, "{CCCCCC}%s (%d) - hace {00CCCC}%s\n", NombreJugador(playerid2), playerid2, Segundos_tiempo(gettime() - TiempoLlamadoMecanico[playerid2]));
		strcat(dialog, gformat);
		//conteo
		new gformat2[64];
		format(gformat2, sizeof gformat2, "llamaditoMeca%d", iCount);
		SetPVarInt(playerid, gformat2, playerid2);
		iCount++;
	}
	if (iCount == 0) return SendClientMessage(playerid, 0x008BFFFF, "* No hay llamados disponibles actualmente.");
	Dialog_Show(playerid, Llamados_Mecanicos, DIALOG_STYLE_LIST, "Llamados actuales", dialog, "Ir", "Salir");
	return 1;
}

Dialog:Llamados_Mecanicos(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat[40];
	format(gformat, sizeof gformat, "llamaditoMeca%d", ID);
	new playerid2 = GetPVarInt(playerid, gformat);
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, 0x008BFFFF, "* Se desconecto el jugador que solicito la llamada seleccionada.");
    ConLlamadoMecanico[playerid] = playerid2;
    TimerOtherLlamado[playerid2] = 1;
    EnLlamadoMecanico[playerid2] = 0;
	SetPlayerCheckpoint(playerid, PosLlamadoMecanico[playerid2][0], PosLlamadoMecanico[playerid2][1], PosLlamadoMecanico[playerid2][2], 5.0);
	SendClientMessageEx(playerid, 0xCCCC00FF, "* Has tomado la llamada de %s, su posicion fue marcada en el radar.", NombreJugador(playerid2));
	SendClientMessageEx(playerid2, 0xCCCC00FF, "* Mecanico(a) %s ha tomado tu llamada, espera en la posicion donde solicitaste el llamado.", NombreJugador(playerid));
	return 1;
}

CMD:mecanicos(playerid)
{
	if (MecanicoDuty[playerid] != 0) return SendClientMessage(playerid, 0x008BFFFF, "* No puedes solicitar un mecanico, si estas en servicio mecanico.");
	if (CountMecanicos() == 0) return SendClientMessageEx(playerid, 0x008BFFFF, "* No hay mecanicos en servicio en estos momentos.");
	if (EnLlamadoMecanico[playerid] != 0) return SendClientMessageEx(playerid, 0x008BFFFF, "* Ya tienes un llamado pendiente desde hace %s.", Segundos_tiempo(gettime() - TiempoLlamadoMecanico[playerid]));
	if (TimerOtherLlamado[playerid] != 0) return SendClientMessageEx(playerid, 0x008BFFFF, "* No puedes solicitar un llamado si un mecanico va a tu posicion.");
	if (GetPlayerInterior(playerid) != 0 && GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, 0x008BFFFF, "* No puedes hacer un llamado dentro de un interior.");
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && MecanicoDuty[playerid2] == 1)
	{
		SendClientMessageEx(playerid2, 0x00CCCCFF, "* %s esta solicitando un mecanico en su posicion, usa /llamados para ir.", NombreJugador(playerid));
	}
	TiempoLlamadoMecanico[playerid] = gettime();
	EnLlamadoMecanico[playerid] = 1;
	GetPlayerPos(playerid, PosLlamadoMecanico[playerid][0], PosLlamadoMecanico[playerid][1], PosLlamadoMecanico[playerid][2]);
	SendClientMessageEx(playerid, 0xCCCC00FF, "* Has enviado un llamado a %d mecanicos, no te mueves de tu posicion.", CountMecanicos());
	return 1;
}

CMD:oral(playerid, params[])
{
	if (IsPlayerJob(playerid, 9) == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes el trabajo de Prostituta, unete desde /trabajos.");
	if (PutaOral[playerid] != -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* Ya ofreciste el servicio, espera que te respondan.");
	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xCCCCCCFF, "* Debes estar dentro de un vehiculo para hacer esto.");
	new gdsdu[512];
	if (!CheckTimer(120, TimerProstituta[playerid]))
	{
		new playerid2, precio, vehicleid = GetPlayerVehicleID(playerid);
		if (sscanf(params, "dd", playerid2, precio)) return _Mensaje(playerid, 3, "0", "/oral [jugador id] [precio $]");
		if (playerid2 == playerid) return _Mensaje(playerid, 3, "0", "/oral [jugador id] [precio $]");
		if (!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
		if (InfoJugador[playerid2][jHorasConectado] < 2) return ShowInfoForPlayer(playerid, "El jugador debe tener al menos 2 horas de juego.", 2000);
		if (ClienteOral[playerid2] != -1) return ShowInfoForPlayer(playerid, "El jugador seleccionado ya le han ofrecido este servicio.", 2000);
		if (precio < 500 || precio > 15000) return ShowInfoForPlayer(playerid, "El cobro minimo por sexo oral es de $500 y el maximo de $15,000.", 2000);
		if (!IsPlayerInVehicle(playerid2, vehicleid)) return ShowInfoForPlayer(playerid, "El jugador seleccionado no esta dentro del mismo vehiculo que tu.", 2000);
		if (GetPlayerVehicleSeat(playerid) != 1) return ShowInfoForPlayer(playerid, "Debes estar en el asiento que esta al lado del conductor.", 2000);
		if (GetPlayerVehicleSeat(playerid2) != 0) return ShowInfoForPlayer(playerid, "El jugador seleccionado debe estar en el asiento del conductor.", 2000);
		if (EstaEnBicis(vehicleid) || IsAPlane(vehicleid) || IsABike(vehicleid)) return ShowInfoForPlayer(playerid, "Este vehiculo no es el adecuado para este servicio.", 2000);
		PrecioOral[playerid2] = precio;
		ClienteOral[playerid2] = playerid;
		PutaOral[playerid] = playerid2;
		format(gdsdu, sizeof gdsdu, "{FF0000}%s{EBEBEB} te ofrece {FFBF00}sexo oral{EBEBEB} por {00CC00}$%s{EBEBEB}\n\
		Si quieres proceder con el servicio presiona '{FFFF00}continuar{EBEBEB}'\n", NombreJugador(playerid), diner_coma(precio));
		Dialog_Show(playerid2, ProstitutaShow, DIALOG_STYLE_MSGBOX, "Prostituta", gdsdu, "Continuar", "Salir");
		SendClientMessage(playerid, 0xCCCC00FF, "Ofeciste sexo oral, espera la respuesta.");
	}
	else
	{
		SendClientMessageEx(playerid, 0xCCCCCCFF, "Faltan %s para que puedas usar este comando de nuevo.", Segundos_tiempo( CheckTimer(120, TimerProstituta[playerid]) ));
	}
 	return 1;
}

Dialog:ProstitutaShow(playerid, response, listitem, inputtext[])
{
	new prostituta = ClienteOral[playerid], costo = PrecioOral[playerid], gformat[234];
	if (!IsPlayerConnectedEx(prostituta))
	{
		PrecioOral[playerid] = -1;
		ClienteOral[playerid] = -1;
		PutaOral[playerid] = -1;
		TimerProstituta[playerid] = -1;
		SendClientMessageEx(playerid, 0xCCCCCCFF, "La prostituta se desconecto, se cancelo la operacion.");
		return 1;
	}
	if (!response)
	{
		PrecioOral[playerid] = -1;
		ClienteOral[playerid] = -1;
		PutaOral[playerid] = -1;
		TimerProstituta[playerid] = -1;
		format(gformat, sizeof gformat, "rechazo el servicio de %s.", NombreJugador(prostituta));
		cmd_me(playerid, gformat);
		return 1;
	}
	if (GetPlayerCash(playerid) < costo)
	{
		PrecioOral[playerid] = -1;
		ClienteOral[playerid] = -1;
		PutaOral[prostituta] = -1;
		TimerProstituta[prostituta] = -1;
		format(gformat, sizeof gformat, "* No tienes suficiente dinero ($%s).", diner_coma(costo));
		SendClientMessage(playerid, 0xCCCCCCFF, gformat);
		SendClientMessage(prostituta, 0xCCCCCCFF, "* Se cancelo la oferta, porque el cliente no tiene dinero suficiente.");
		return 1;
	}
	format(gformat, sizeof gformat, "le hace sexo oral a %s.", NombreJugador(playerid));
	cmd_me(prostituta, gformat);
	GivePlayerCash(playerid, -costo, "sexo oral");
	GivePlayerCash(prostituta, costo, "sexo oral");
	ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_START_P", 4.0, 0, 0, 0, 1, 0, 1);
	SetTimerEx("Sexo1", 1000, false, "d", prostituta);
	SetTimerEx("Sexo2", 3000, false, "d", prostituta);
	SetTimerEx("Sexo3", 5000, false, "d", prostituta);
	SetTimerEx("Sexo4", 7000, false, "d", prostituta);
	SetTimerEx("Sexo5", 10000, false, "d", prostituta);
	SetTimerEx("Sexo6", 12000, false, "d", playerid);
	PrecioOral[playerid] = -1;
	ClienteOral[playerid] = -1;
	PutaOral[prostituta] = -1;
	TimerProstituta[prostituta] = gettime();
	if (InfoJugador[playerid][jVida]+5 >= 100) Dar_Vida(playerid, 100);
	else Dar_Vida(playerid, InfoJugador[playerid][jVida]+5);
	SendClientMessage(playerid, 0xCCCC00FF, "Recibiste +5HP en tu vida maxima por este buen servicio.");
	return 1;
}

funcion Sexo1(playerid) if (IsPlayerConnectedEx(playerid)) ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_START_W", 4.0, 0, 0, 0, 1, 0, 1);
funcion Sexo2(playerid) if (IsPlayerConnectedEx(playerid)) ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_LOOP_W", 4.0, 0, 0, 0, 1, 0, 1);
funcion Sexo3(playerid) if (IsPlayerConnectedEx(playerid)) ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_LOOP_W", 4.0, 1, 0, 0, 1, 0, 1);
funcion Sexo4(playerid) if (IsPlayerConnectedEx(playerid)) ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_LOOP_P", 4.0, 0, 0, 0, 1, 0, 1);
funcion Sexo5(playerid) if (IsPlayerConnectedEx(playerid)) ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_END_W", 4.0, 0, 0, 0, 1, 0, 1);
funcion Sexo6(playerid) if (IsPlayerConnectedEx(playerid)) ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_END_P", 4.0, 0, 0, 0, 1, 0, 1);

CMD:taller(playerid)
{
	if (NoEstaEnTaller(playerid) == 1) return 1;
//	if (CountMecanicos() != 0) return SendClientMessageEx(playerid, 0x008BFFFF, "* No puedes utilizar este comando con %d mecanicos en servicio, usa /mecanicos.", CountMecanicos());
	new dialog_taller[2056], gformat[256];
	new Float: cvida, idcoche = GetPlayerVehicleID(playerid);
	GetVehicleHealth(idcoche, cvida);
	//reparacion
	if (cvida >= 999) format(gformat, sizeof gformat, "{CCCCCC}Reparacion - {fff000}no necesita\n");
	else format(gformat, sizeof gformat, "{CCCCCC}Reparacion - {00CC00}$%s\n", diner_coma(precioReparacion));
	strcat(dialog_taller, gformat);
	//pintura
	format(gformat, sizeof gformat, "{CCCCCC}Pintura - {00CC00}$%s\n", diner_coma(precioPintura));
	strcat(dialog_taller, gformat);
	//gasolina
	if (GasolinaInicialVeh[idcoche] >= 200) format(gformat, sizeof gformat, "{CCCCCC}Gasolina: 100 litros - {fff000}no necesita\n");
	else format(gformat, sizeof gformat, "{CCCCCC}Gasolina: 100 litros - {00CC00}$%s\n", diner_coma(precioGasolina));
	strcat(dialog_taller, gformat);
	//tunning
	strcat(dialog_taller, "{CCCCCC}Componentes tunning\n");
	//quitar tunning
	//indice
	Dialog_Show(playerid, ShowTaller, DIALOG_STYLE_LIST, "Taller mecanico", dialog_taller, "Continuar", "Salir");
	return 1;
}

Dialog:ShowTaller(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (NoEstaEnTaller(playerid) == 1) return 1;
	new vehicleid = GetPlayerVehicleID(playerid);
	switch (listitem)
	{
		case 0: //reparacion
		{
			new Float: cvida;
			GetVehicleHealth(vehicleid, cvida);
			new Percent_damage = floatround(cvida);
			if (Percent_damage >= 999) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo no necesita reparacion.");
			if (GetPlayerCash(playerid) < precioReparacion) { SendClientMessageEx(playerid, 0xccccccff, "* No tienes suficiente dinero ($%s).", diner_coma(precioReparacion)); return 1; }
			SetTimerEx("ShotRepararUwu", 10000, false, "d", playerid);
			TogglePlayerControllable(playerid, false);
			SendClientMessage(playerid, 0xCCC000FF, "Se encuentran reparando el vehiculo (Listo en 10 segundos) . . .");
		}
		case 1:
		{
			if (vehiculos_legales(vehicleid) != 0) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo no se puede modificar.");
			if (GetPlayerCash(playerid) < precioPintura) { SendClientMessageEx(playerid, 0xccccccff, "* No tienes suficiente dinero ($%s).", diner_coma(precioPintura)); return 1; }
			ShowVehColor(playerid, "", 1); //color
		}
		case 2:
		{
			if (GasolinaInicialVeh[vehicleid] >= 199) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo no necesita mas gasolina.");
			if (GetPlayerCash(playerid) < precioGasolina) { SendClientMessageEx(playerid, 0xccccccff, "* No tienes suficiente dinero ($%s).", diner_coma(precioGasolina)); return 1; }
			GivePlayerCash(playerid, -precioGasolina, "taller gasolina");
			GasolinaInicialVeh[vehicleid] += 100;
			if (GasolinaInicialVeh[vehicleid] >= 200) GasolinaInicialVeh[vehicleid] = 200;
			Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vDL] == vehicleid)
			{
				InfoVehiculo[v][vGasolina] = GasolinaInicialVeh[vehicleid];
				guardar_int_mysql("vehiculos", "Gasolina", InfoVehiculo[v][vID], InfoVehiculo[v][vGasolina]);
				break;
			}
			cmd_me(playerid, "paga por la gasolina del vehiculo.");
		}
		case 3:
		{
			if (EstaEnAvion(vehicleid) || EstaEnBote(vehicleid) || EnMotos_Bicis(vehicleid) || InfoVehiculo[InfoVehiculo[vehicleid][vID]][vFamilia] > 0) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo no se puede modificar.");
			if (vehiculos_legales(vehicleid) != 0) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo es legal no se puede modificar.");
			Ex_Componente(playerid, GetVehicleModel(vehicleid));
		}
	}
	return 1;
}

hay_componente(modelo, componente)
{
	if (modelo < 400 || modelo > 611) return 0;
	new component, count = 1;
	while (IsModelComponentCompatibleEx(modelo, count, component))
	{
		if (GetVehicleComponentType(component) == componente)
		{
			count ++;
			return 1;
		}
		count ++;
	}
	return 0;
}

Ex_Componente(playerid, modelo)
{
	if (NoEstaEnTaller(playerid) == 1) return 1;
	if (modelo < 400 || modelo > 611) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo no admite ningun componente. (modelo)");
	new dialog[1024], conteo = 0, gformat[128];
	if (hay_componente(modelo, 0) != 0)
	{
		strcat(dialog, "{008BFF}- {EBEBEB}Alerones\n");
		format(gformat, sizeof(gformat), "IdComp%d", conteo);
		SetPVarInt(playerid, gformat, 0);
		conteo++;
	}
	if (hay_componente(modelo, 1) != 0)
	{
		strcat(dialog, "{008BFF}- {EBEBEB}Capo\n");
		format(gformat, sizeof(gformat), "IdComp%d", conteo);
		SetPVarInt(playerid, gformat, 1);
		conteo++;
	}
	if (hay_componente(modelo, 2) != 0)
	{
		strcat(dialog, "{008BFF}- {EBEBEB}Techos\n");
		format(gformat, sizeof(gformat), "IdComp%d", conteo);
		SetPVarInt(playerid, gformat, 2);
		conteo++;
	}
	if (hay_componente(modelo, 6) != 0)
	{
		strcat(dialog, "{008BFF}- {EBEBEB}Tubos de escape\n");
		format(gformat, sizeof(gformat), "IdComp%d", conteo);
		SetPVarInt(playerid, gformat, 3);
		conteo++;
	}
	if (hay_componente(modelo, 10) != 0)
	{
		strcat(dialog, "{008BFF}- {EBEBEB}Parachoques delantero\n");
		format(gformat, sizeof(gformat), "IdComp%d", conteo);
		SetPVarInt(playerid, gformat, 4);
		conteo++;
	}
	if (hay_componente(modelo, 11) != 0)
	{
		strcat(dialog, "{008BFF}- {EBEBEB}Parachoques trasero\n");
		format(gformat, sizeof(gformat), "IdComp%d", conteo);
		SetPVarInt(playerid, gformat, 5);
		conteo++;
	}
	if (hay_componente(modelo, 12) != 0)
	{
		strcat(dialog, "{008BFF}- {EBEBEB}Protector delantero\n");
		format(gformat, sizeof(gformat), "IdComp%d", conteo);
		SetPVarInt(playerid, gformat, 6);
		conteo++;
	}
	if (hay_componente(modelo, 13) != 0)
	{
		strcat(dialog, "{008BFF}- {EBEBEB}Protector trasero\n");
		format(gformat, sizeof(gformat), "IdComp%d", conteo);
		SetPVarInt(playerid, gformat, 7);
		conteo++;
	}
	if (hay_componente(modelo, 3) != 0)
	{
		strcat(dialog, "{008BFF}- {EBEBEB}Lateral 1\n");
		format(gformat, sizeof(gformat), "IdComp%d", conteo);
		SetPVarInt(playerid, gformat, 8);
		conteo++;
	}
	if (hay_componente(modelo, 14) != 0)
	{
		strcat(dialog, "{008BFF}- {EBEBEB}Lateral 2\n");
		format(gformat, sizeof(gformat), "IdComp%d", conteo);
		SetPVarInt(playerid, gformat, 9);
		conteo++;
	}
	if (hay_componente(modelo, 4) != 0)
	{
		strcat(dialog, "{008BFF}- {EBEBEB}Luces\n");
		format(gformat, sizeof(gformat), "IdComp%d", conteo);
		SetPVarInt(playerid, gformat, 10);
		conteo++;
	}
	if (hay_componente(modelo, 7) != 0)
	{
		strcat(dialog, "{008BFF}- {EBEBEB}Llantas\n");
		format(gformat, sizeof(gformat), "IdComp%d", conteo);
		SetPVarInt(playerid, gformat, 11);
		conteo++;
	}
	if (hay_componente(modelo, 9) != 0)
	{
		strcat(dialog, "{008BFF}- {EBEBEB}Hidraulica\n");
		format(gformat, sizeof(gformat), "IdComp%d", conteo);
		SetPVarInt(playerid, gformat, 12);
		conteo++;
    }
	if (hay_componente(modelo, 5) != 0)
	{
		strcat(dialog, "{008BFF}- {EBEBEB}Nitro\n");
		format(gformat, sizeof(gformat), "IdComp%d", conteo);
		SetPVarInt(playerid, gformat, 13);
		conteo++;
	}
	if (isnull(dialog))
	{
		SendClientMessage(playerid, 0xccccccff, "* Este vehiculo no admite ningun componente.");
		return 1;
	}
	Dialog_Show(playerid, ShowComponentes, DIALOG_STYLE_LIST, "Componentes tunning", dialog, "Continuar", "Volver");
	return 1;
}

Dialog:ShowComponentes(playerid, response, listitem, inputtext[])
{
	if (NoEstaEnTaller(playerid) == 1) return 1;
	if (!response) return cmd_taller(playerid);
	new ID = listitem, gformat[40];
	format(gformat, sizeof(gformat), "IdComp%d", ID);
	new x = GetPVarInt(playerid, gformat), new_compenente;
	switch (x)
	{
		case 0: new_compenente = 0;
		case 1: new_compenente = 1;
		case 2: new_compenente = 2;
		case 3: new_compenente = 6;
		case 4: new_compenente = 10;
		case 5: new_compenente = 11;
		case 6: new_compenente = 12;
		case 7: new_compenente = 13;
		case 8: new_compenente = 3;
		case 9: new_compenente = 14;
		case 10: new_compenente = 4;
		case 11: new_compenente = 7;
		case 12: new_compenente = 9;
		case 13: new_compenente = 5;
	}
	MenuComponentes(playerid, GetPlayerVehicleID(playerid), new_compenente);
	return 1;
}

MenuComponentes(playerid, vehicleid, component_type)
{
	if (NoEstaEnTaller(playerid) == 1) return 1;
	new vehiclemodel = GetVehicleModel(vehicleid);
	if (vehiclemodel < 400 || vehiclemodel > 611) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo no admite ningun componente. (modelo)");
	new str[1024];
	new component, count = 1, conteo = 0;
	while (IsModelComponentCompatibleEx(vehiclemodel, count, component))
	{
		if (GetVehicleComponentType(component) != component_type)
		{
			count ++;
			continue;
		}
		if (component != 0)
		{
			if (tiene_componente(component, vehicleid) != 0) format(str, sizeof str, "%s{008BFF}%s {00cc00}$%s\n", str, GetComponentName(component), diner_coma(GetComponentPrice(component)));
			else format(str, sizeof str, "%s{cccccc}%s {00cc00}$%s\n", str, GetComponentName(component), diner_coma(GetComponentPrice(component)));
			TipoTunning[playerid][conteo] = component;
			conteo++;
		}
		count ++;
	}
	if (isnull(str))
	{
		SendClientMessage(playerid, 0xebebebff, "Este vehiculo no admite ningun componente.");
		return 1;
	}
	Dialog_Show(playerid, Show2Componentes, DIALOG_STYLE_LIST, "Componentes tunning", str, "Instalar", "Volver");
	return 1;
}

Dialog:Show2Componentes(playerid, response, listitem, inputtext[])
{
	if (NoEstaEnTaller(playerid) == 1) return 1;
	new componentid = TipoTunning[playerid][listitem], vehicleid = GetPlayerVehicleID(playerid);
	new precio = GetComponentPrice(componentid);
	if (!response) return Ex_Componente(playerid, GetVehicleModel(vehicleid));
	if (GetPlayerCash(playerid) < precio) { SendClientMessageEx(playerid, 0xccccccff, "* No tienes suficiente dinero ($%s).", diner_coma(precio)); return 1; }
	AddVehicleComponent(vehicleid, componentid);
	SendClientMessageEx(playerid, 0x008BFFFF, "Componente %s instalado por $%s.", GetComponentName(componentid), diner_coma(precio));
	GivePlayerCash(playerid, -precio, "componente tunning");
	SaveVehicleMods(vehicleid);
	PlayerPlaySound(playerid, 1133, 0, 0, 0);
	return 1;
}

forward ShotRepararUwu(playerid);
public ShotRepararUwu(playerid)
{
	if (NoEstaEnTaller(playerid) == 1) return 1;
	new vehicleid = GetPlayerVehicleID(playerid), Float: cvida;
	GetVehicleHealth(vehicleid, cvida);
	new Percent_damage = floatround(cvida);
	if (Percent_damage >= 999) return SendClientMessage(playerid, 0xccccccff, "* Este vehiculo no necesita reparacion.");
	if (GetPlayerCash(playerid) < precioReparacion) { SendClientMessageEx(playerid, 0xccccccff, "* No tienes suficiente dinero ($%s).", diner_coma(precioReparacion)); return 1; }
	RepairVehicle(vehicleid);
	SetVehicleHealth(vehicleid, 1000.0);
	GivePlayerCash(playerid, -precioReparacion, "taller reparar");
	cmd_me(playerid, "paga por la reparacion del vehiculo.");
	TogglePlayerControllable(playerid, true);
	return 1;
}

ShowVehColor(playerid, msg[] = "", color)
{
	if (NoEstaEnTaller(playerid) == 1) return 1;
	new color_string[3256];
	if (strlen(msg)) format(color_string, sizeof(color_string), "{E74C3C}%s\n\n", msg);
	for(new i; i < sizeof(ColorList); i++) format(color_string, sizeof(color_string), "%s{%06x}%03d %s", color_string, ColorList[i] >>> 8, i, ((i+1) % 10 == 0) ? ("\n") : (""));
	if (color == 1) Dialog_Show(playerid, Change1ColorVeh, DIALOG_STYLE_INPUT, "Escoge el color numero 1", color_string, "Continuar", "Volver");
	else if (color == 2)  Dialog_Show(playerid, Change2ColorVeh, DIALOG_STYLE_INPUT, "Escoge el color numero 2", color_string, "Continuar", "Volver");
	return 1;
}

new colorvehselec[MAX_PLAYERS];

Dialog:Change1ColorVeh(playerid, response, listitem, inputtext[])
{
	if (NoEstaEnTaller(playerid) == 1) return 1;
	if (!response) return cmd_taller(playerid);
	if (GetPlayerCash(playerid) < precioPintura) { SendClientMessageEx(playerid, 0xccccccff, "* No tienes suficiente dinero ($%s).", diner_coma(precioPintura)); return 1; }
	if (!isnumeric(inputtext)) return ShowVehColor(playerid, "ID del color invalido.", 1);
	new color = strval(inputtext);
	if(!(0 <= color <= sizeof(ColorList)-1)) return ShowVehColor(playerid, "ID del color invalido.", 1);
	colorvehselec[playerid] = color;
	ShowVehColor(playerid, "", 2);
	return 1;
}

Dialog:Change2ColorVeh(playerid, response, listitem, inputtext[])
{
	if (NoEstaEnTaller(playerid) == 1) return 1;
	if (!response) return ShowVehColor(playerid, "", 1); //color
	if (GetPlayerCash(playerid) < precioPintura) { SendClientMessageEx(playerid, 0xccccccff, "* No tienes suficiente dinero ($%s).", diner_coma(precioPintura)); return 1; }
	if (!isnumeric(inputtext)) return ShowVehColor(playerid, "ID del color invalido.", 2);
	new color1 = colorvehselec[playerid], color2 = strval(inputtext);
	if(!(0 <= color2 <= sizeof(ColorList)-1)) return ShowVehColor(playerid, "ID del color invalido.", 2);
	SendClientMessage(playerid, 0xCCC000FF, "Se encuentran pintando el vehiculo (Estara listo en 30 segundos) . . .");
	SetTimerEx("ShotPintarUwu", 30000, false, "dddd", playerid, GetPlayerVehicleID(playerid), color1, color2);
	TogglePlayerControllable(playerid, false);
	return 1;
}

forward ShotPintarUwu(playerid, vehicleid, color1, color2);
public ShotPintarUwu(playerid, vehicleid, color1, color2)
{
	if (NoEstaEnTaller(playerid) == 1) return 1;
	if (vehicleid == 0) return 1;
	if (!IsPlayerConnectedEx(playerid)) return 1;
	if (GetPlayerCash(playerid) < precioPintura) { SendClientMessageEx(playerid, 0xccccccff, "* No tienes suficiente dinero ($%s).", diner_coma(precioPintura)); return 1; }
	ChangeVehicleColor(vehicleid, color1, color2);
	SendClientMessage(playerid, ColorList[color1], "Color nuevo del vehiculo mostrado en este mensaje.");
	GivePlayerCash(playerid, -precioPintura, "taller pintura");
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vDL] == vehicleid)
	{
		InfoVehiculo[v][vColor1] = color1;
		InfoVehiculo[v][vColor2] = color2;
		guardar_int_mysql("vehiculos", "Color1", InfoVehiculo[v][vID], InfoVehiculo[v][vColor1]);
		guardar_int_mysql("vehiculos", "Color2", InfoVehiculo[v][vID], InfoVehiculo[v][vColor2]);
		break;
	}
	TogglePlayerControllable(playerid, true);
	cmd_me(playerid, "paga por la pintura del vehiculo.");
	return 1;
}

CMD:puerta(playerid)
{
	//Casas
	Loop(x, totalcasas, 1) if (InfoJugador[playerid][jVirtualWorld] == InfoCasa[x][cSalidaVW])
	{
		new objetoid, Float: mueblex, Float: muebley, Float: mueblez, Float: mueblerx, Float: mueblery, Float: mueblerz;
		Loop(id, totalmuebles+1, 1) if (InfoMueble[id][mInterior] != -1 && InfoMueble[id][mVirtualWorld] == InfoCasa[x][cSalidaVW])
		{
			objetoid = InfoMueble[id][mObjeto];
			if (IsValidDynamicObject(objetoid) <= 0)continue;
			GetDynamicObjectPos(objetoid, mueblex, muebley, mueblez);
			if (!IsPlayerInRangeOfPoint(playerid, 2.0, mueblex, muebley, mueblez) || OpenableDoor(InfoMueble[id][mModelo]) == -1) continue;
			if (PermisosCasa(playerid, x) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
			GetDynamicObjectRot(objetoid, mueblerx, mueblery, mueblerz);
			InfoMueble[id][mPuerta] = (InfoMueble[id][mPuerta]) ? 0 : 1;
			mueblerz = (InfoMueble[id][mPuerta]) ? mueblerz - 90 : mueblerz + 90;
			InfoMueble[id][mRotX] = mueblerx;
			InfoMueble[id][mRotY] = mueblery;
			InfoMueble[id][mRotZ] = mueblerz;
			SetDynamicObjectRot(objetoid, InfoMueble[id][mRotX], InfoMueble[id][mRotY], InfoMueble[id][mRotZ]);
			new que2ry[512];
			mysql_format(DBngrp, que2ry, sizeof que2ry, "UPDATE muebles SET RotX = '%f', RotY = '%f', RotZ = '%f' WHERE ID = '%d'", InfoMueble[id][mRotX], InfoMueble[id][mRotY], InfoMueble[id][mRotZ], InfoMueble[id][mID_sql]);
			mysql_tquery(DBngrp, que2ry);
			return 1;
		}
	}
	Loop(x, totalnegocios, 1) if (InfoJugador[playerid][jVirtualWorld] == InfoNegocio[x][nSalidaVW])
	{
		new objetoid, Float: mueblex, Float: muebley, Float: mueblez, Float: mueblerx, Float: mueblery, Float: mueblerz;
		Loop(id, totalmuebles+1, 1) if (InfoMueble[id][mInterior] != -1 && InfoMueble[id][mVirtualWorld] == InfoNegocio[x][nSalidaVW])
		{
			objetoid = InfoMueble[id][mObjeto];
			if (IsValidDynamicObject(objetoid) <= 0)continue;
			GetDynamicObjectPos(objetoid, mueblex, muebley, mueblez);
			if (!IsPlayerInRangeOfPoint(playerid, 2.0, mueblex, muebley, mueblez) || OpenableDoor(InfoMueble[id][mModelo]) == -1) continue;
			if (PermisosNegocio(playerid, x) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de este negocio.");
			GetDynamicObjectRot(objetoid, mueblerx, mueblery, mueblerz);
			InfoMueble[id][mPuerta] = (InfoMueble[id][mPuerta]) ? 0 : 1;
			mueblerz = (InfoMueble[id][mPuerta]) ? mueblerz - 90 : mueblerz + 90;
			InfoMueble[id][mRotX] = mueblerx;
			InfoMueble[id][mRotY] = mueblery;
			InfoMueble[id][mRotZ] = mueblerz;
			SetDynamicObjectRot(objetoid, InfoMueble[id][mRotX], InfoMueble[id][mRotY], InfoMueble[id][mRotZ]);
			new que2ry[512];
			mysql_format(DBngrp, que2ry, sizeof que2ry, "UPDATE muebles SET RotX = '%f', RotY = '%f', RotZ = '%f' WHERE ID = '%d'", InfoMueble[id][mRotX], InfoMueble[id][mRotY], InfoMueble[id][mRotZ], InfoMueble[id][mID_sql]);
			mysql_tquery(DBngrp, que2ry);
			return 1;
		}
	}
	return 1;
}
CMD:door(playerid) return cmd_puerta(playerid);

OpenableDoor(modelid)
{
    static const openableDoors[] =
    {
        1495, 1498, 1535, 1557, 1536, 3089, 997,
        1492, 1494, 1493, 1499, 1504, 1507, 1567,
        1555, 2963, 19302, 19303, 1569, 1537, 2875,
        2876, 2877, 2878, 19859, 19860, 1561, 19875
    };

    for(new x; x < sizeof(openableDoors); x++) if(modelid == openableDoors[x]) return x;

    return -1;
}

CMD:llaves(playerid)
{
	Dialog_Show(playerid, ShowPermisos, DIALOG_STYLE_LIST, "Llaves prestadas", "Casas\nNegocios", "Continuar", "Salir");
	return 1;
}

Dialog:ShowPermisos(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: //casas
		{
			new count = 0, dialog_share[2056] = "{FFFFFF}", share_format[512], i = 0;
			Loop(id, totalcasas, 1) if (InfoCasa[id][cVenta] != 0 && InfoCasa[id][cTipo] != 0)
			{
				if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoCasa[id][cCompartida1], true) == 0)
				{
					i++;
					format(share_format, sizeof share_format, "Casa %d (%s) | ", id, InfoCasa[id][cPropietario]);
					strcat(dialog_share, share_format);
					count++;
				}
				if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoCasa[id][cCompartida2], true) == 0)
				{
					i++;
					format(share_format, sizeof share_format, "Casa %d (%s) | ", id, InfoCasa[id][cPropietario]);
					strcat(dialog_share, share_format);
					count++;
				}
				if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoCasa[id][cCompartida3], true) == 0)
				{
					i++;
					format(share_format, sizeof share_format, "Casa %d (%s) | ", id, InfoCasa[id][cPropietario]);
					strcat(dialog_share, share_format);
					count++;
				}
				if (i == 3)
				{
					i = 0;
					strcat(dialog_share, "\n");
				}
			}
			if (count == 0) return SendClientMessage(playerid, 0xccccccff, "* No te han dado llaves de ninguna casa.");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Llaves casas", dialog_share, "Cerrar", "");
		}
		case 1: //negocios
		{
			new count = 0, dialog_share[2056] = "{FFFFFF}", share_format[512], i = 0;
			Loop(id, totalnegocios, 1) if (InfoNegocio[id][nVenta] != 0 && InfoNegocio[id][nTipo] != 0)
			{
				if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoNegocio[id][nCompartida1], true) == 0)
				{
					i++;
					format(share_format, sizeof share_format, "Negocio %d (%s) | ", id, InfoNegocio[id][nPropietario]);
					strcat(dialog_share, share_format);
					count++;
				}
				if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoNegocio[id][nCompartida2], true) == 0)
				{
					i++;
					format(share_format, sizeof share_format, "Negocio %d (%s) | ", id, InfoNegocio[id][nPropietario]);
					strcat(dialog_share, share_format);
					count++;
				}
				if (strcmp(InfoJugador[playerid][jNombre_Apellido], InfoNegocio[id][nCompartida3], true) == 0)
				{
					i++;
					format(share_format, sizeof share_format, "Negocio %d (%s) | ", id, InfoNegocio[id][nPropietario]);
					strcat(dialog_share, share_format);
					count++;
				}
				if (i == 3)
				{
					i = 0;
					strcat(dialog_share, "\n");
				}
			}
			if (count == 0) return SendClientMessage(playerid, 0xccccccff, "* No te han dado llaves de ningun negocio.");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Llaves negocios", dialog_share, "Cerrar", "");
		}
	}
	return 1;
}
		
CMD:disponible(playerid)
{
	//casas
	Loop(id, totalcasas, 1) if (IsPlayerInRangeOfPoint(playerid, 3.5, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ]) && InfoJugador[playerid][jInterior] == InfoCasa[id][cEntradaInt] && InfoJugador[playerid][jVirtualWorld] == InfoCasa[id][cEntradaVW])
	{
	    if (InfoCasa[id][cVenta] == 0) return SendClientMessageEx(playerid, 0xCCCC00FF, "Casa %d esta en venta.", id);
		if (InfoCasa[id][cMoneda] != 0) return SendClientMessageEx(playerid, 0xCCCC00FF, "Casa %d esta valorada en coins, no tiene fecha de venta automatica.");
		if (InfoCasa[id][cTiempoDisponible] < gettime())
		{
			SendClientMessageEx(playerid, 0x00CC00FF, "Casa %d disponible en minutos.", id);
		}
		else
		{
			SendClientMessageEx(playerid, 0x00CC00FF, "Casa %d disponible en %s.", id, Segundos_tiempo(InfoCasa[id][cTiempoDisponible]-gettime()));
		}
		return 1;
	}
	//negocios
	Loop(id, totalnegocios, 1) if (IsPlayerInRangeOfPoint(playerid, 3.5, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ]) && InfoJugador[playerid][jInterior] == 0 && InfoJugador[playerid][jVirtualWorld] == 0)
	{
	    if (InfoNegocio[id][nVenta] == 0) return SendClientMessageEx(playerid, 0xCCCC00FF, "Negocio %d esta en venta.", id);
		if (InfoNegocio[id][nTiempoDisponible] < gettime())
		{
			SendClientMessageEx(playerid, 0x00CC00FF, "Negocio %d disponible en minutos.", id);
		}
		else
		{
			SendClientMessageEx(playerid, 0x00CC00FF, "Negocio %d disponible en %s.", id, Segundos_tiempo(InfoNegocio[id][nTiempoDisponible]-gettime()));
		}
		return 1;
	}
	SendClientMessage(playerid, 0xCCCCCCFF, "* No estas cerca de ninguna propiedad.");
	return 1;
}

CMD:muebles(playerid)
{
	if (InfoJugador[playerid][jVirtualWorld] == 0) return SendClientMessage(playerid, 0xccccccff, "* No te encuentras dentro de ningun interior.");
	Loop(c, totalcasas, 1) if (InfoJugador[playerid][jVirtualWorld] == InfoCasa[c][cSalidaVW])
	{
		if (PermisosCasa(playerid, c) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
		Dialog_Show(playerid, MenuMuebles, DIALOG_STYLE_LIST, "Menu de muebles", "Lista de tus muebles\nConseguir mas muebles\n{F4C233}Borrar todos los muebles", "Continuar", "Salir");
		DentroCasa[playerid] = c;
		return 1;
	}
	Loop(n, totalnegocios, 1) if (InfoJugador[playerid][jVirtualWorld] == InfoNegocio[n][nSalidaVW])
	{
		if (PermisosNegocio(playerid, n) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de este negocio.");
		Dialog_Show(playerid, MenuMuebles, DIALOG_STYLE_LIST, "Menu de muebles", "Lista de tus muebles\nConseguir mas muebles\n{F4C233}Borrar todos los muebles", "Continuar", "Salir");
		DentroNegocio[playerid] = n;
		return 1;
	}
	SendClientMessage(playerid, 0xccccccff, "* No te encuentras dentro de ninguna casa o negocio.");
	return 1;
}

CMD:topbank(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Topbank.", 2000);
	mysql_tquery(DBngrp, "SELECT * FROM cuentas ORDER BY Banco DESC LIMIT 50", "BancoPlayerTop", "d", playerid);
	return 1;
}

forward BancoPlayerTop(playerid);
public BancoPlayerTop(playerid)
{
	new gformat[256], dialog[4072];
	Loop(player, cache_num_rows(), 0)
	{
		new personaje[24], horitas, conexion[256], newid = -1, ison[256];
		reg_string(player, "Nombre_Apellido", personaje, 24);
		foreach(Player, juegador) if (IsPlayerConnectedEx(juegador) && !strcmp(InfoJugador[juegador][jNombre_Apellido], personaje, true)) { newid = juegador; }
		reg_int(player, "Banco", horitas);
		reg_string(player, "UltimaConexion", conexion, 256);
		if (IsPlayerConnectedEx(newid)) format(ison, sizeof ison, "{00FF00}Conectado (ID %d)", newid);
		else alm(ison, conexion);
		format(gformat, sizeof gformat, "{9F9F9F}(%d) %s - {00cc00}$%s - {FFC800}%s\n", player+1, personaje, diner_coma(horitas), ison);
		strcat(dialog, gformat);
	}
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, "Ranking de Banco", dialog, "Cerrar", "");
	return 1;
}

CMD:topmoney(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Topmoney.", 2000);
	mysql_tquery(DBngrp, "SELECT * FROM cuentas ORDER BY Dinero DESC LIMIT 50", "DineroPlayerTop", "d", playerid);
	return 1;
}

forward DineroPlayerTop(playerid);
public DineroPlayerTop(playerid)
{
	new gformat[256], dialog[4072];
	Loop(player, cache_num_rows(), 0)
	{
		new personaje[24], horitas, conexion[256], newid = -1, ison[256];
		reg_string(player, "Nombre_Apellido", personaje, 24);
		foreach(Player, juegador) if (IsPlayerConnectedEx(juegador) && !strcmp(InfoJugador[juegador][jNombre_Apellido], personaje, true)) { newid = juegador; }
		reg_int(player, "Dinero", horitas);
		reg_string(player, "UltimaConexion", conexion, 256);
		if (IsPlayerConnectedEx(newid)) format(ison, sizeof ison, "{00FF00}Conectado (ID %d)", newid);
		else alm(ison, conexion);
		format(gformat, sizeof gformat, "{9F9F9F}(%d) %s - {00cc00}$%s - {FFC800}%s\n", player+1, personaje, diner_coma(horitas), ison);
		strcat(dialog, gformat);
	}
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, "Ranking de Banco", dialog, "Cerrar", "");
	return 1;
}

CMD:topcoin(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /topcoin.", 2000);
	mysql_tquery(DBngrp, "SELECT * FROM cuentas ORDER BY Coins DESC LIMIT 50", "CoinPlayerTop", "d", playerid);
	return 1;
}

forward CoinPlayerTop(playerid);
public CoinPlayerTop(playerid)
{
	new gformat[256], dialog[4072];
	Loop(player, cache_num_rows(), 0)
	{
		new personaje[24], horitas, conexion[256], newid = -1, ison[256];
		reg_string(player, "Nombre_Apellido", personaje, 24);
		foreach(Player, juegador) if (IsPlayerConnectedEx(juegador) && !strcmp(InfoJugador[juegador][jNombre_Apellido], personaje, true)) { newid = juegador; }
		reg_int(player, "Coins", horitas);
		reg_string(player, "UltimaConexion", conexion, 256);
		if (IsPlayerConnectedEx(newid)) format(ison, sizeof ison, "{00FF00}Conectado (ID %d)", newid);
		else alm(ison, conexion);
		format(gformat, sizeof gformat, "{9F9F9F}(%d) %s - {F4BC27}%d Coins - {FFC800}%s\n", player+1, personaje, horitas, ison);
		strcat(dialog, gformat);
	}
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, "Ranking de Coins", dialog, "Cerrar", "");
	return 1;
}

CMD:regadm(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /regadm.", 2000);
	mysql_tquery(DBngrp, "SELECT * FROM `registro_admin` ORDER BY `ID` DESC LIMIT 30", "RegistrosAdmin", "d", playerid);
	return 1;
}

forward RegistrosAdmin(playerid);
public RegistrosAdmin(playerid)
{
	new gformat[256], dialog[4072];
	Loop(player, cache_num_rows(), 0)
	{
		new personaje[24], tipo[50], datos[120];
		reg_string(player, "Nombre_Apellido", personaje, 24);
		reg_string(player, "Tipo", tipo, 50);
		reg_string(player, "Dato", datos, 120);
		format(gformat, sizeof gformat, "{9F9F9F}%s | %s | {FFC800}%s\n", personaje, tipo, datos);
		strcat(dialog, gformat);
	}
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Acciones administrativas", dialog, "Cerrar", "");
	return 1;
}

CMD:regdudas(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /regdudas.", 2000);
	mysql_tquery(DBngrp, "SELECT * FROM `canal_dudas` ORDER BY `ID` DESC LIMIT 30", "RegistrosDudas", "d", playerid);
	return 1;
}

forward RegistrosDudas(playerid);
public RegistrosDudas(playerid)
{
	new gformat[256], dialog[4072];
	Loop(player, cache_num_rows(), 0)
	{
		new personaje[24], idjugador, rango[50], datos[120];
		reg_string(player, "Nombre_Apellido", personaje, 24);
		reg_int(player, "IDJugador", idjugador);
		reg_string(player, "Administrador", rango, 50);
		reg_string(player, "Mensaje", datos, 120);
		format(gformat, sizeof gformat, "{9F9F9F}%s(%d) | %s | {60bc9d}%s\n", personaje, idjugador, rango, datos);
		strcat(dialog, gformat);
	}
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Canal Dudas", dialog, "Cerrar", "");
	return 1;
}

CMD:reganuncios(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /reganuncios.", 2000);
	mysql_tquery(DBngrp, "SELECT * FROM `canal_anuncios` ORDER BY `ID` DESC LIMIT 30", "RegistrosAnuncios", "d", playerid);
	return 1;
}

forward RegistrosAnuncios(playerid);
public RegistrosAnuncios(playerid)
{
	new gformat[256], dialog[4072];
	Loop(player, cache_num_rows(), 0)
	{
		new personaje[24], playerip[24], datos[120];
		reg_string(player, "Nombre_Apellido", personaje, 24);
		reg_string(player, "IP", playerip, 24);
		reg_string(player, "Anuncio", datos, 120);
		format(gformat, sizeof gformat, "{9F9F9F}%s | %s | {00cc00}%s\n", personaje, playerip, datos);
		strcat(dialog, gformat);
	}
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "30. Ultimos anuncios", dialog, "Cerrar", "");
	return 1;
}

CMD:topventas(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /topventas.", 2000);
	mysql_tquery(DBngrp, "SELECT * FROM `registro_coins` ORDER BY `ID` DESC LIMIT 30", "RegistrosVentasCoins", "d", playerid);
	return 1;
}

forward RegistrosVentasCoins(playerid);
public RegistrosVentasCoins(playerid)
{
	new gformat[256], dialog[4072];
	Loop(player, cache_num_rows(), 0)
	{
		new personaje[24], playerip[24], datos[120];
		reg_string(player, "Nombre_Apellido", personaje, 24);
		reg_string(player, "IP", playerip, 24);
		reg_string(player, "Dato", datos, 120);
		format(gformat, sizeof gformat, "{9F9F9F}%s | %s | {F4BC27}%s\n", personaje, playerip, datos);
		strcat(dialog, gformat);
	}
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "30. Ultimas ventas de coins", dialog, "Cerrar", "");
	return 1;
}

CMD:top(playerid)
{
	mysql_tquery(DBngrp, "SELECT * FROM cuentas ORDER BY HorasConectado DESC LIMIT 20", "EventPlayerTop", "d", playerid);
	return 1;
}
CMD:top10(playerid) return cmd_top(playerid);
CMD:top20(playerid) return cmd_top(playerid);
CMD:top30(playerid) return cmd_top(playerid);
CMD:rank(playerid) return cmd_top(playerid);
CMD:ranking(playerid) return cmd_top(playerid);

forward EventPlayerTop(playerid);
public EventPlayerTop(playerid)
{
	new gformat[256], dialog[4072];
	Loop(player, cache_num_rows(), 0)
	{
		new personaje[24], horitas, conexion[256], newid = -1, ison[256];
		reg_string(player, "Nombre_Apellido", personaje, 24);
		foreach(Player, juegador) if (IsPlayerConnectedEx(juegador) && !strcmp(InfoJugador[juegador][jNombre_Apellido], personaje, true)) { newid = juegador; }
		reg_int(player, "HorasConectado", horitas);
		reg_string(player, "UltimaConexion", conexion, 256);
		if (IsPlayerConnectedEx(newid)) format(ison, sizeof ison, "{00FF00}Conectado (ID %d)", newid);
		else alm(ison, conexion);
		format(gformat, sizeof gformat, "{9F9F9F}(%d) %s - {5151FF}%d horas - {FFC800}%s\n", player+1, personaje, horitas, ison);
		strcat(dialog, gformat);
	}
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, "Ranking de conectados", dialog, "Cerrar", "");
	return 1;
}

CMD:casco(playerid, params[])
{
    if(cascoActivo[playerid] == 0)
    {
	    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "No estas en una moto!");
	    RemovePlayerAttachedObject(playerid, 2);
	    SetPlayerAttachedObject(playerid,2,18645,2,0.068999,0.008000,0.000000,90.599990,81.399986,-0.900000,1.053000,1.025000,1.039999); //casco
	   	cmd_me(playerid, "agarra el casco y se lo coloca.");
	    SendClientMessage(playerid, COLOR_WHITE, "Para quitarte el casco utiliza /casco.");
	    cascoActivo[playerid] = 1;
	}else
	{
	    RemovePlayerAttachedObject(playerid, 2);
	   	cmd_me(playerid, "agarra el casco y se lo quita.");
	    cascoActivo[playerid] = 0;
	}
    return 1;
}

CMD:colaborador(playerid)
{
    if (InfoJugador[playerid][jNivelVIP] > 0) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a este comando.", 2000); //cuando el sistema este listo ponemos variable de colaborador y
	new DialogStatus[1200];
	strcat(DialogStatus, "{CB2700}•{FFFFFF} Colaborador: /votepayday - /votemute - /voteregalo\n");
	strcat(DialogStatus, "{CB2700}•{FFFFFF} Colaborador: /votemodrol - /votenomodrol - votenopolicia\n");
	strcat(DialogStatus, "{CB2700}•{FFFFFF} Mod rol: /darpuntorol - /quitarpuntorol - /votemute\n");
	strcat(DialogStatus, "{CB2700}•{FFFFFF} Verificado: /votekick - /votenokick - /voteunmute\n");
	ShowPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_MSGBOX, "{D6E1EB}Comandos de miembros verificados y colaboradores", DialogStatus, "Cerrar", "");
	return 1;
}

CMD:petar(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a este comando.", 2000);
	OnDuty
    if(sscanf(params,"u",params[0],params[1])) return SendClientMessage(playerid,COLOR_WHITE,"/petar {8e99FF}[ID/NOMBRE]");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid,COLOR_WHITE,"Jugador desconectado");
    new Float:x, Float:y, Float:z;
    GetPlayerPos(params[0], x, y, z);
    CreateExplosion(x, y, z, 10, 10.0);
    return 1;
}

CMD:crash(playerid, params[])
{
    new id;
    if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a este comando.", 2000);
    OnDuty
    if(sscanf(params, "u", id)) return SendClientMessage(playerid, -1, "USE: /crash [ID]");
    if(!IsPlayerConnectedEx(id)) return SendClientMessage(playerid, -1, "Player not connected.");
    GameTextForPlayer(id, "%%$#@1~555#",66666000, 6);
    return 1;
}

CMD:darmateriales(playerid, params[])
{
 	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a este comando.", 2000);
	if(sscanf(params,"ud",params[0],params[1])) return SendClientMessage(playerid,COLOR_WHITE,"/darmateriales [ID] [cantidad]");
	if (!IsPlayerConnected(params[0])) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
	new string[128];
	InfoJugador[params[0]][jMateriales] += params[1];
	guardar_int_mysql("cuentas", "Materiales", InfoJugador[params[0]][jID], InfoJugador[params[0]][jMateriales]);
 	format(string, sizeof string, "Administracion: %s dio materiales a %s. {E00000}Cantidad: %d", NombreRJugador(playerid), NombreRJugador(params[0]), params[1]);
 	MensajeAdmin(string);
 	format(string, sizeof string, " %s te dio materiales, cantidad: %d", NombreRJugador(playerid), params[1]);
 	SendClientMessage(params[0], 0x33CCFFFF, string);
	format(string, sizeof string, "Entrego %d materiales a %s", params[1], NombreRJugador(params[0]));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 0);
	return 1;
}

CMD:darcoins(playerid, params[])
{
 	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a este comando.", 2000);
	if(sscanf(params,"ud",params[0],params[1])) return SendClientMessage(playerid,COLOR_WHITE,"/darcoins [ID] [cantidad]");
	if (!IsPlayerConnected(params[0])) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
	new string[128];
	InfoJugador[params[0]][jCoins] += params[1];
	guardar_int_mysql("cuentas", "Coins", InfoJugador[params[0]][jID], InfoJugador[params[0]][jCoins]);
 	format(string, sizeof string, "Administracion: %s dio Coins  a %s. {E00000}Cantidad: %d", NombreRJugador(playerid), NombreRJugador(params[0]), params[1]);
 	MensajeAdmin(string);
 	format(string, sizeof string, " %s te dio Coins, cantidad: %d", NombreRJugador(playerid), params[1]);
 	SendClientMessage(params[0], 0x33CCFFFF, string);
	format(string, sizeof string, "Entrego %d Coins a %s", params[1], NombreRJugador(params[0]));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 0);
	return 1;
}

CMD:quitarcoins(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a este comando.", 2000);
	if(sscanf(params,"ud",params[0],params[1])) return SendClientMessage(playerid,COLOR_WHITE,"/quitarcoins [ID] [cantidad]");
	if (!IsPlayerConnected(params[0])) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
	new string[128];
	InfoJugador[params[0]][jCoins] -= params[1];
	guardar_int_mysql("cuentas", "Coins", InfoJugador[params[0]][jID], InfoJugador[params[0]][jCoins]);
 	format(string, sizeof string, "Administracion: %s quito Coins  a %s. {E00000}Cantidad: %d", NombreRJugador(playerid), NombreRJugador(params[0]), params[1]);
 	MensajeAdmin(string);
 	format(string, sizeof string, " %s te quito Coins, cantidad: %d", NombreRJugador(playerid), params[1]);
 	SendClientMessage(params[0], 0x33CCFFFF, string);
	format(string, sizeof string, "Quito %d Coins a %s", params[1], NombreRJugador(params[0]));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 0);
	return 1;
}

CMD:repararvip(playerid, params[])
{
	if (InfoJugador[playerid][jNivelVIP] == 0) return ShowInfoForPlayer(playerid, "Tu no tienes VIP para usar este comando.", 2000);
    if (!IsPlayerInAnyVehicle(playerid)) return ShowInfoForPlayer(playerid, "* No estas en ningun vehiculo.", 2000);
	if (!CheckTimer(120, TimerRepararVip[playerid]))
	{
    SetVehicleHealth(GetPlayerVehicleID(playerid), 600.0);
    RepairVehicle(GetPlayerVehicleID(playerid));
    AccionesRol(playerid, 1, "[VIP] Repara su vehiculo.");
	TimerRepararVip[playerid] = gettime();
    return _Mensaje(playerid, 4, "ADC3E7", "*{FFFFFF} Se reparo la carroceria junto al motor del vehiculo.");
	} else{
		SendClientMessageEx(playerid, 0xCCCCCCFF, "Faltan %s para que puedas usar este comando de nuevo.", Segundos_tiempo( CheckTimer(180, TimerRepararVip[playerid]) ));
	}
	return 1;
}

GetPlayerRankStaff(playerid)
{
	new RankStaff[40];
	switch (InfoJugador[playerid][jAdmin])
	{
		case 0:
		{
			if (InfoJugador[playerid][jVerificado] == 1) alm(RankStaff, "Verificado");
			else alm(RankStaff, "Jugador");
		}
		case 1: alm(RankStaff, "Soporte");
		case 2: alm(RankStaff, "Mod a Pruebas");
		case 3: alm(RankStaff, "Moderador");
		case 4: alm(RankStaff, "Moderador Global");
		case 5: alm(RankStaff, "Administrador");
		case 6: alm(RankStaff, "Director");
        case 10: alm(RankStaff, "Fundador");
        case 11: alm(RankStaff, "Developer");
		case 12: alm(RankStaff, "CEO");
		default: alm(RankStaff, "Jugador");
	}
	return RankStaff;
}

GetPlayerRankStaff2(playerid)
{
	new RankStaff[50];
	switch (InfoJugador[playerid][jAdmin])
	{
		case 1: alm(RankStaff, "{F5EB11}Soporte");
		case 2: alm(RankStaff, "{4CC032}Mod A Pruebas");
		case 3: alm(RankStaff, "{297916}Moderador");
		case 4: alm(RankStaff, "{299DD4}Moderador Global");
		case 5: alm(RankStaff, "{EB0202}Administrador");
		case 6: alm(RankStaff, "{070606}Director");
		case 10: alm(RankStaff, "{472323}Fundador");
		case 11: alm(RankStaff, "{66FF66}Developer");
		case 12: alm(RankStaff, "{640000}CEO");
		default: alm(RankStaff, "Jugador");
	}
	return RankStaff;
}

GetPlayerRankStaffID(id)
{
	new RankStaff[40];
	switch (id)
	{
		case 1: alm(RankStaff, "Soporte");
		case 2: alm(RankStaff, "Mod a Pruebas");
		case 3: alm(RankStaff, "Moderador");
		case 4: alm(RankStaff, "Moderador Global");
		case 5: alm(RankStaff, "Administrador");
		case 6: alm(RankStaff, "Director");
		case 10: alm(RankStaff, "Fundador");
		case 11: alm(RankStaff, "Developer");
		case 12: alm(RankStaff, "CEO");
		default: alm(RankStaff, "Jugador");
	}
	return RankStaff;
}

CMD:duda(playerid, params[])
{
	if(DudasActivo == 1)return SendClientMessageEx(playerid, 0xccccccff, "* Esta desactivado el canal de duadas para todo el servidor.");
	if (!CheckTimer(60, DudaTimer[playerid]))
	{
		if(GetSpam(params,playerid) && !DetectSPAM(params)) MensajeSpam(playerid,params);
		if (InfoJugador[playerid][jCanalDudas] == 1) return SendClientMessageEx(playerid, 0xccccccff, "* Tienes el canal de dudas desactivado.");
		if (DudaB[playerid] == 1) return SendClientMessageEx(playerid, 0xccccccff, "* Te encuentras silenciado del canal de dudas.");
		if (isnull(params)) return _Mensaje(playerid, 3, "0", "/duda [texto]");
		if (isnumeric(params)) return SendClientMessageEx(playerid, 0xccccccff, "* Por cuestiones de seguridad, no puedes enviar numeros en el canal de dudas.");
		if(CheckspamString(params))
		{
			return 0;
		}
		Loop(m, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(m) && InfoJugador[m][jCanalDudas] == 0)
		{
			SendClientMessageEx(m, 0xFFFFFFFF, "{60bc9d}[Dudas]{FFFFFF} %s {FFFFFF}%s(%d): %s", GetPlayerRankStaff2(playerid), NombreRJugador(playerid), playerid, params);
		}
		new query[1028];
		mysql_format(DBngrp, query, sizeof query, "INSERT INTO `canal_dudas` (`Nombre_Apellido`, `Administrador`, `IDJugador`, `Mensaje`) VALUES ('%e', '%e', '%d', '%e')", InfoJugador[playerid][jNombre_Apellido], GetPlayerRankStaff(playerid), playerid, params);
		mysql_tquery(DBngrp, query);
		if (InfoJugador[playerid][jAdmin] == 0 && InfoJugador[playerid][jVerificado] == 0) DudaTimer[playerid] = gettime();
	}
	else
	{
		SendClientMessageEx(playerid, 0xccccccff, "Faltan %d segundos para que puedas enviar otra duda.", CheckTimer(60, DudaTimer[playerid]));
	}
	return 1;
}

CMD:pantalla(playerid, params[])
{
    ShowPlayerDialog(playerid, P_PANTALLA, DIALOG_STYLE_LIST, "Panel de Pantalla del Usuario","Mostrar Necesidades\nRemover Necesidades\nLimpiar Pantalla\nOcultar Coins\nMostrar Coins\nOcultar frencuencia\nMostrar frecuencia", "Aceptar", "Cancelar");
	return 1;
}

CMD:mutear(playerid, params[]) {
    if (InfoJugador[playerid][jAdmin] >= 1 || InfoJugador[playerid][jRestriccion][2] == 1) {
        new string[128], playerid2;
        if (sscanf(params, "dds[50]", playerid2,params[0], params[1])) return _Mensaje(playerid, 3, "0", "/mutear [id jugador][Tiempo en minutos 0 = desmute] [razon]");
		if (params[0] > 999 || params[0] < 1) return ShowInfoForPlayer(playerid, "No puedes mutear mas de 999 minutos", 2000);

        if (DudaB[playerid2] == 0 && params[0] > 0) {
            format(string, sizeof string, "El jugador %s(%i) fue muteado del canal dudas, razon: %s.", NombreRJugador(playerid2), playerid2, params[1]);
            SendClientMessageToAll(0xAA3333FF,string);
            format(string, sizeof string, "Administrador %s(%d), tiempo %d minutos.", NombreRJugador(playerid), playerid, params[0]);
            MensajeAdmin(string);
            format(string, sizeof string, "%s te ha muteado el canal de dudas por mal uso durante %d minutos.", NombreRJugador(playerid), params[0]);
            _Mensaje(playerid2, 4, "33CCFF", string);
            SendClientMessageEx(playerid2, 0xccccccFF, "Info: {FFFFFF}Se te desconto $%s por el muteo del canal dudas.", diner_coma(params[0]*200));
            GivePlayerCash(playerid2, -params[0]*200, "muteo");
            DudaB[playerid2] = 1;
            DudaTiempo[playerid] = params[0];
            return 1;
        } else if(DudaB[playerid2] == 1 && params[0] == 0) {
            format(string, sizeof string, "%s te ha desmuteado el canal de dudas. Utilizelo bien esta vez.", NombreRJugador(playerid));
            _Mensaje(playerid2, 4, "33CCFF", string);
            format(string, sizeof string, "Administracion: %s(%d) ha desmuteado del canal dudas a %s, razon: %s.", NombreRJugador(playerid), playerid, NombreRJugador(playerid2), params[1]);
            MensajeAdmin(string);
            DudaB[playerid2] = 0;
        }
    } else return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /mutear.", 2000);
    return 1;
}
CMD:tallerpd(playerid)
{
    if (!en_punto_tallerpd(playerid)) return ShowInfoForPlayer(playerid, "No estas en el lugar de arresto de ~b~SAPD.", 2000);
	if (Es_Banda(playerid, 1))
	{
			if(!IsPlayerInAnyVehicle(playerid)) return ShowInfoForPlayer(playerid, "No estas en ningun vehiculo.", 2000);
			Dialog_Show(playerid, D_PDmecanico, DIALOG_STYLE_LIST, "{D6E1EB}Tipos de reparacion", "{FFFFFF}Motor\nCarroceria\nRuedas", "Continuar", "Salir");
	} else ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD.", 2000);
	return 1;
}

CMD:tallergn(playerid)
{
	if (Es_Banda(playerid, 2))
	{
		if (_enPos(playerid, 4.0, 136.1311,1836.8538,17.6406) || _enPos(playerid, 4.0, 2746.2668,-2460.2405,13.6484))
		{
			if(!IsPlayerInAnyVehicle(playerid)) ShowInfoForPlayer(playerid, "No estas en ningun vehiculo.", 2000);
			Dialog_Show(playerid, D_PDmecanico, DIALOG_STYLE_LIST, "{D6E1EB}Tipos de reparacion", "{FFFFFF}Motor\nCarroceria\nRuedas", "Continuar", "Salir");
		} else ShowInfoForPlayer(playerid, "No estas cerca del taller de ~g~USMC.", 2000);
	} else ShowInfoForPlayer(playerid, "Debes ser miembro de ~g~USMC.", 2000);
	return 1;
}

CMD:tallersd(playerid)
{
	if (Es_Banda(playerid, 3))
	{
		if (_enPos(playerid, 4.0, 620.8446,-600.6666,17.2330))
		{
			if(!IsPlayerInAnyVehicle(playerid)) return ShowInfoForPlayer(playerid, "No estas en ningun vehiculo.", 2000);
			Dialog_Show(playerid, D_PDmecanico, DIALOG_STYLE_LIST, "{D6E1EB}Tipos de reparacion", "{FFFFFF}Motor\nCarroceria\nRuedas", "Continuar", "Salir");
		} else ShowInfoForPlayer(playerid, "No estas cerca del taller de ~y~SASD.", 2000);
	} else ShowInfoForPlayer(playerid, "Debes ser miembro de ~y~SASD.", 2000);
	return 1;
}

Dialog:D_PDmecanico(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (!IsPlayerInAnyVehicle(playerid)) return ShowInfoForPlayer(playerid, "No estas en ningun vehiculo.", 2000);
	new idcar = GetPlayerVehicleID(playerid), Float: cx, Float: cy, Float: cz;
	GetVehiclePos(idcar, cx, cy, cz);
	PlayerPlaySound(playerid, 1133, cx, cy, cz);
	switch (listitem)
	{
		case 0:
		{
			SetVehicleHealth(idcar, 1000);
			GameTextForPlayer(playerid, "~g~Motor nuevo", 3000, 3);
		}
		case 1:
		{
			new Float: cvida;
			GetVehicleHealth(idcar, cvida);
			new panels, doors, lights, tires, tires2;
			GetVehicleDamageStatus(idcar, panels, doors, lights, tires);
			RepairVehicle(idcar);
			SetVehicleHealth(idcar, cvida);
			GetVehicleDamageStatus(idcar, panels, doors, lights, tires2);
			if (tires != 0)
			{
				tires = encode_tires(1, 1, 1, 1);
				UpdateVehicleDamageStatus(idcar, panels, doors, lights, tires);
			}
			GameTextForPlayer(playerid, "~g~Carroceria nueva", 3000, 3);
		}
		case 2:
		{
			new panels, doors, lights, tires;
			GetVehicleDamageStatus(idcar, panels, doors, lights, tires);
			tires = encode_tires(0, 0, 0, 0);
			UpdateVehicleDamageStatus(idcar, panels, doors, lights, tires);
			GameTextForPlayer(playerid, "~g~Ruedas nuevas", 3000, 3);
		}
	}
	return 1;
}

CMD:dop(playerid, params[])
{
    if(!CheckTimer(5, Intentar2[playerid]))
	{
		new string[256];
		if (sscanf(params, "s[128]", params[0])) return _Mensaje(playerid, 4, "ffffff", "* /Dop {9EC73D}[Entorno o Aclaracion]");
		//puertas
		Loop(id, totalpuertas, 1) if (InfoPuerta[id][pEntradaX] != 0.0)
		{
			if (_enPos(playerid, 2.0, InfoPuerta[id][pEntradaX], InfoPuerta[id][pEntradaY], InfoPuerta[id][pEntradaZ]) && InfoJugador[playerid][jVirtualWorld] == InfoPuerta[id][pEntradaVW] && InfoJugador[playerid][jInterior] == InfoPuerta[id][pEntradaInt])
			{
				Intentar2[playerid] = gettime();
				format(string, sizeof string, "[EXTERIOR | %d] %s", playerid, params[0]);
				Uso_Dop(string, 0x60CD0097, 50, InfoPuerta[id][pSalidaX], InfoPuerta[id][pSalidaY], InfoPuerta[id][pSalidaZ], InfoPuerta[id][pSalidaVW], InfoPuerta[id][pSalidaInt]);
				Uso_Dop(string, 0x60CD0097, 8, InfoPuerta[id][pEntradaX], InfoPuerta[id][pEntradaY], InfoPuerta[id][pEntradaZ], InfoPuerta[id][pEntradaVW], InfoPuerta[id][pEntradaInt]);
				return 1;
			}
			if (_enPos(playerid, 2.0, InfoPuerta[id][pSalidaX], InfoPuerta[id][pSalidaY], InfoPuerta[id][pSalidaZ]) && InfoJugador[playerid][jVirtualWorld] == InfoPuerta[id][pSalidaVW] && InfoJugador[playerid][jInterior] == InfoPuerta[id][pSalidaInt])
			{
				Intentar2[playerid] = gettime();
				format(string, sizeof string, "[INTERIOR | %d] %s", playerid, params[0]);
				Uso_Dop(string, 0x60CD0097, 20, InfoPuerta[id][pEntradaX], InfoPuerta[id][pEntradaY], InfoPuerta[id][pEntradaZ], InfoPuerta[id][pEntradaVW], InfoPuerta[id][pEntradaInt]);
				Uso_Dop(string, 0x60CD0097, 8, InfoPuerta[id][pSalidaX], InfoPuerta[id][pSalidaY], InfoPuerta[id][pSalidaZ], InfoPuerta[id][pSalidaVW], InfoPuerta[id][pSalidaInt]);
				return 1;
			}
		}
		//negocios
		Loop(id, totalnegocios, 1) if (InfoNegocio[id][nTipo] != 0)
		{
			if (_enPos(playerid, 2, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ]))
			{
            	Intentar2[playerid] = gettime();
				format(string, sizeof string, "[EXTERIOR | %d] %s", playerid, params[0]);
				Uso_Dop(string, 0x60CD0097, 50, InfoNegocio[id][nSalidaX], InfoNegocio[id][nSalidaY], InfoNegocio[id][nSalidaZ], InfoNegocio[id][nSalidaVW], InfoNegocio[id][nSalidaInt]);
				Uso_Dop(string, 0x60CD0097, 8, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ], 0, 0);
				return 1;
			}
			if (_enPos(playerid, 3, InfoNegocio[id][nSalidaX], InfoNegocio[id][nSalidaY], InfoNegocio[id][nSalidaZ]) && InfoJugador[playerid][jVirtualWorld] == InfoNegocio[id][nSalidaVW])
			{
            	Intentar2[playerid] = gettime();
				format(string, sizeof string, "[INTERIOR | %d] %s", playerid, params[0]);
				Uso_Dop(string, 0x60CD0097, 20, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ], 0, 0);
				Uso_Dop(string, 0x60CD0097, 8, InfoNegocio[id][nSalidaX], InfoNegocio[id][nSalidaY], InfoNegocio[id][nSalidaZ], InfoNegocio[id][nSalidaVW], InfoNegocio[id][nSalidaInt]);
				return 1;
			}
		}
		//casas
		Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0)
		{
			if (_enPos(playerid, 2, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ]) && InfoJugador[playerid][jVirtualWorld] == InfoCasa[id][cEntradaVW] && InfoJugador[playerid][jInterior] == InfoCasa[id][cEntradaInt])
			{
				Intentar2[playerid] = gettime();
				format(string, sizeof string, "[EXTERIOR | %d] %s", playerid, params[0]);
				Uso_Dop(string, 0x60CD0097, 50, InfoCasa[id][cSalidaX], InfoCasa[id][cSalidaY], InfoCasa[id][cSalidaZ], InfoCasa[id][cSalidaVW], InfoCasa[id][cSalidaInt]);
				Uso_Dop(string, 0x60CD0097, 8, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ], InfoCasa[id][cEntradaVW], InfoCasa[id][cEntradaInt]);
				return 1;
			}
			if (_enPos(playerid, 3, InfoCasa[id][cSalidaX], InfoCasa[id][cSalidaY], InfoCasa[id][cSalidaZ]) && InfoJugador[playerid][jVirtualWorld] == InfoCasa[id][cSalidaVW] && InfoJugador[playerid][jInterior] == InfoCasa[id][cSalidaInt])
			{
				Intentar2[playerid] = gettime();
				format(string, sizeof string, "[INTERIOR | %d] %s", playerid, params[0]);
				Uso_Dop(string, 0x60CD0097, 20, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ], InfoCasa[id][cEntradaVW], InfoCasa[id][cEntradaInt]);
				Uso_Dop(string, 0x60CD0097, 8, InfoCasa[id][cSalidaX], InfoCasa[id][cSalidaY], InfoCasa[id][cSalidaZ], InfoCasa[id][cSalidaVW], InfoCasa[id][cSalidaInt]);
				return 1;
			}
		}
    }
	else
	{
		SendClientMessageEx(playerid, 0xccccccff, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(5, Intentar2[playerid]));
    }
	return 1;
}

CMD:casas(playerid, params[])
{
	new radius, count = 0;
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a este comando.", 2000);
	if (sscanf(params, "d", radius)) return _Mensaje(playerid, 3, "0", "/casas [Radio]");
	if (radius < 1 || radius > 100) { ShowInfoForPlayer(playerid, "El radio debe ser de 1 a 100.", 2000); return 1; }
	Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0)
	{
		if (_enPos(playerid, radius, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ]) && InfoJugador[playerid][jInterior] == InfoCasa[id][cEntradaInt] && InfoJugador[playerid][jVirtualWorld] == InfoCasa[id][cEntradaVW])
		{
			SendClientMessageEx(playerid, 0xcccc00ff, "Casa ID: %d", id);
			count++;
		}
	}
	if (count == 0) return SendClientMessageEx(playerid, 0xccccccff, "No hay ninguna casa en el radio de %d metros.", radius);
	return 1;
}

CMD:catalogo(playerid)
{
	if (!en_Concesionaria(playerid)) return ShowInfoForPlayer(playerid, "No estas cerca de ningun punto de venta.", 2000);
	if (_enPos(playerid, 5.0,1986.5800,-2100.4500,13.5469 )) //motos
	{
		new VehMuestra[40], count = 0;
		Loop(x, sizeof InfoConcesionario, 0) if (InfoConcesionario[x][csTipo] == 1)
		{
			VehMuestra[count] = InfoConcesionario[x][csModelo];
			count++;
		}
		ShowModelSelectionMenuEx(playerid, VehMuestra, count, "Motos", Buy_Vehicle_Show, -16.0, 0.0, -55.0, 1.0);
	}
	else if (_enPos(playerid, 5.0, 2131.8674, -1151.0360, 23.8920)) //Coutt And Schutz
	{
		new VehMuestra[40], count = 0;
		Loop(x, sizeof InfoConcesionario, 0) if (InfoConcesionario[x][csTipo] == 2)
		{
			VehMuestra[count] = InfoConcesionario[x][csModelo];
			count++;
		}
		ShowModelSelectionMenuEx(playerid, VehMuestra, count, "Coutt And Schutz", Buy_Vehicle_Show, -16.0, 0.0, -55.0, 1.0);
	}
	else if (_enPos(playerid, 5.0, 519.0496, -1293.6548, 17.2224)) //grotti
	{
		new VehMuestra[40], count = 0;
		Loop(x, sizeof InfoConcesionario, 0) if (InfoConcesionario[x][csTipo] == 3)
		{
			VehMuestra[count] = InfoConcesionario[x][csModelo];
			count++;
		}
		ShowModelSelectionMenuEx(playerid, VehMuestra, count, "Grotti", Buy_Vehicle_Show, -16.0, 0.0, -55.0, 1.0);
	}
	else if (_enPos(playerid, 5.0, 2793.1045, -1087.5013, 30.6801)) //camionetas
	{
		new VehMuestra[40], count = 0;
		Loop(x, sizeof InfoConcesionario, 0) if (InfoConcesionario[x][csTipo] == 4)
		{
			VehMuestra[count] = InfoConcesionario[x][csModelo];
			count++;
		}
		ShowModelSelectionMenuEx(playerid, VehMuestra, count, "Camionetas", Buy_Vehicle_Show, -16.0, 0.0, -55.0, 1.0);
	}
	else if (_enPos(playerid, 5.0, 2515.4216, -1957.9753, 16.7286)) //Nuevased
	{
		new VehMuestra[40], count = 0;
		Loop(x, sizeof InfoConcesionario, 0) if (InfoConcesionario[x][csTipo] == 6)
		{
			VehMuestra[count] = InfoConcesionario[x][csModelo];
			count++;
		}
		ShowModelSelectionMenuEx(playerid, VehMuestra, count, "Nuevased", Buy_Vehicle_Show, -16.0, 0.0, -55.0, 1.0);
	}
	else if (_enPos(playerid, 5.0, 2589.1169, -2219.4470, 13.5184)) //coches usados
	{
		new Str[256], Str_[3000], i_ = 0;
		Loop(veh, MAX_VEH_USADO, 0) if (i_Usado[veh][uModeloVeh] > 0)
		{
			format(Str, sizeof Str, "{ffffff}%s - Precio: {1CB54C}%d{ffffff}\n", GetNameVehicle(i_Usado[veh][uModeloVeh]), i_Usado[veh][uPrecioVeh], i_Usado[veh][uVida]);
			strcat(Str_, Str);
			format(Str, sizeof Str, "GPS_vehC_%d", i_);
			SetPVarInt(playerid, Str, veh);
			i_++;
		}
		if (i_ == 0) return ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "{D6E1EB}Vehiculos usados", "No hay ningun vehiculo disponible", "Cerrar", "");
		ShowPlayerDialog(playerid, D_Uvehiculo1, DIALOG_STYLE_LIST, "{D6E1EB}Vehiculos usados", Str_, "Comprar", "Cancelar");
	}
	return 1;
}

CMD:tirardni(playerid)
{
	if(InfoJugador[playerid][jFakeDNI] == 0) return ShowInfoForPlayer(playerid, "No posees un documento falso.", 2000);
	InfoJugador[playerid][jFakeDNI] = 0;
	InfoJugador[playerid][jFakeEdad] = 0;
	alm(InfoJugador[playerid][jFakeNombre], "Ninguno");
	guardar_int_mysql("cuentas", "FakeEdad", InfoJugador[playerid][jID], InfoJugador[playerid][jFakeEdad]);
	guardar_int_mysql("cuentas", "FakeDNI", InfoJugador[playerid][jID], InfoJugador[playerid][jFakeDNI]);
	guardar_string_mysql("cuentas", "FakeNombre", InfoJugador[playerid][jID], InfoJugador[playerid][jFakeNombre]);
	GivePlayerCash(playerid, 500, "tirardni");
	_Mensaje(playerid, 4, "FFFFFF", " Has tirado tu documento falso.");
	return 1;
}

CMD:transmisionmusica(playerid)
{
    if (!Es_Banda(playerid, 5)) return ShowInfoForPlayer(playerid, "No formas parte de CNN.", 2000);
    if (InfoJugador[playerid][jFamRango] < 4) ShowInfoForPlayer(playerid, "Usted debe ser al menos rango 4.", 2000);
	if(SanMusic == 0)
	{
        _MensajeSAN(0x00DC76FF, "[MTV] Inicio de transmision de musica por SAN MUSIC. ((/sintonizar))");
        SanMusic = 1;
        return 1;
	}
	if(SanMusic == 1)
	{
        _MensajeSAN(0x00DC76FF, "[MTV] Termina transmision de musica por SAN MUSIC.");
        SanMusic = 0;
        return 1;
	}
	return 1;
}

CMD:musicamtv(playerid, params[])
{
    if (!Es_Banda(playerid, 5)) return ShowInfoForPlayer(playerid, "No formas parte de CNN.", 2000);
    if (InfoJugador[playerid][jFamRango] < 2) ShowInfoForPlayer(playerid, "Usted debe ser al menos rango 2.", 2000);
	if(SanMusic == 0) ShowInfoForPlayer(playerid, "No hay una transmision de musica activa.", 2000);
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/musicamtv [nombre de la cancion]");
	new chao[148], chao2[148];
	format(chao, sizeof(chao), "https://6t.pe/?song=%s", params);
	format(chao2, sizeof(chao2), "[MTV] Sonando actualmente: %s.", params);
    foreach(Player, a)
	{
        if(B_SANMUSIC[a] == 1)
        {
            StopAudioStreamForPlayer(a);
            EscucharMusica(a, chao);
            SendClientMessage(a, 0x00DC76FF, chao2);
        }
    }
	return 1;
}

CMD:sintonizar(playerid)
{
	if(B_SANMUSIC[playerid] == 0)
	{
	    _Mensaje(playerid, 4, "A7CE00", "Sintonizas a la transmision de musica de MTV MUSIC.");
	    B_SANMUSIC[playerid] = 1;
	    return 1;
	}
	if(B_SANMUSIC[playerid] == 1)
	{
	    _Mensaje(playerid, 4, "A7CE00", "Dejaste de sintonizar a MTV MUSIC.");
   		B_SANMUSIC[playerid] = 0;
   		StopAudioStreamForPlayer(playerid);
   		return 1;
	}
	return 1;
}

CMD:altavoz(playerid)
{
	if(Altavoz[playerid] == 0)
	{
		Altavoz[playerid] = 1;
		_Mensaje(playerid, 4, "A7CE00", "Altavoz activado.");
	} else {
		Altavoz[playerid] = 0;
		_Mensaje(playerid, 4, "A7CE00", "Altavoz desactivado.");
	}
	return 1;
}

CMD:robarcaja(playerid)
{
    if (InfoJugador[playerid][jHabilidad1][3] < 29) return _Mensaje(playerid, 4, "b00000", " Habilidad minima para este comando (30).");
	new id = EnNegocio(playerid);
	if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
	if (!Es_job(playerid, 2)) return ShowInfoForPlayer(playerid, "No eres delicuente.", 2000);
	if (!_Dnegocio(playerid, 5.0) || (GetPlayerVirtualWorld(playerid) < 300)) return _Mensaje(playerid, 4, "b00000", "No te encuentras dentro de un negocio.");
	if (InfoJugador[playerid][jManoDerecha] != 128 && InfoJugador[playerid][jManoIzquierda] != 128){ ShowInfoForPlayer(playerid, "No tienes una palanca en ninguna mano.", 2000); return 1;}
	if (InfoJugador[playerid][jTiempos][16] > 0) { SendClientMessageEx(playerid, -1, "* Debes esperar %d minutos para hacer alguna accion ilegal.", InfoJugador[playerid][jTiempos][16]); return 1; }
	TogglePlayerControllable(playerid, 0);
	SetPVarInt(playerid, "Congelado", 1);
    QuitarManos(playerid);
	GameTextForPlayer(playerid,"~n~~n~~n~~n~~w~tomando ~g~caja de dinero...",11000,3);
	SetTimerEx("_robocaja", 10000, false, "ii", playerid, id);
	ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 1, 1, 1, 1);
	new location[MAX_ZONE_NAME], string[256];
	Get2DZone(location, MAX_ZONE_NAME, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ]);
	format(string, sizeof string, "CENTRAL: Informo de robo en el negocio %s en %s.", InfoNegocio[id][nNombre], location);
	SendRadioFaction(1, C_COLORPOLICIA, string);
	SendRadioFaction(2, C_COLORPOLICIA, string);
	SendRadioFaction(3, C_COLORPOLICIA, string);
	return 1;
}

CMD:rcaja(playerid, params[])
{
	new money[32];
	if (sscanf(params, "s[20]", params)) return _Mensaje(playerid, 3, "0", "/Rcaja [sacar - guardar]");
	if (InfoJugador[playerid][jManoDerecha] != 131){ ShowInfoForPlayer(playerid, "No tienes ninguna caja registradora en manos.", 2000); return 1;}
	if (!strcmp(params, "sacar", true, 5))
	{
		if (sscanf(params, "s[20]s[20]", params, money)) return _Mensaje(playerid, 3, "0", "/Rcaja [sacar] [monto]");
		if (!isnumeric(money)) return _Mensaje(playerid, 3, "0", "/Rcaja [sacar] [monto]");
		new dinero = strval(money);
		if (dinero > InfoJugador[playerid][jManoDerechaCant]) return _Mensaje(playerid, 4, "FFFFFF", "No posee ese dinero la caja registradora.");
		GivePlayerCash(playerid, dinero, "/rcaja sacar");
		InfoJugador[playerid][jManoDerechaCant] -= dinero;
		ActualizarManos(playerid);
		new string[128];
		format(string, sizeof string, "Sacaste de la caja %d$ dolares.", dinero);
		_Mensaje(playerid, 4, "FFFFFF", string);
    }
	else if (!strcmp(params, "guardar", true, 7))
	{
		if (sscanf(params, "s[20]s[20]", params, money)) return _Mensaje(playerid, 3, "0", "/Rcaja [guardar] [monto]");
		if (!isnumeric(money)) return _Mensaje(playerid, 3, "0", "/Rcaja [guardar] [monto]");
        new dinero = strval(money);
		if (dinero > GetPlayerCash(playerid)) return _Mensaje(playerid, 4, "FFFFFF", "No posees esa cantidad.");
		if (dinero < 1 || dinero > 1000) return _Mensaje(playerid, 4, "FFFFFF", "Maximo: $1.000.");
		if (InfoJugador[playerid][jManoDerechaCant] > 7999) return _Mensaje(playerid, 4, "FFFFFF", "No puedes guardar tanto dinero (8000$).");

		GivePlayerCash(playerid, -dinero, "/rcaja guardar");
		InfoJugador[playerid][jManoDerechaCant] += dinero;
		ActualizarManos(playerid);
		new string[128];
		format(string, sizeof string, "Guardaste en la caja %d$ dolares.", dinero);
		_Mensaje(playerid, 4, "FFFFFF", string);
	}
	return 1;
}
funcion _robocaja(playerid, id)
{
	new dinero = InfoNegocio[id][nDinero];
    if(InfoJugador[playerid][jManoDerecha] == 0 && InfoJugador[playerid][jManoIzquierda] == 0)
	{
		DeletePVar(playerid, "Congelado");
		TogglePlayerControllable(playerid, 1);
		ClearAnimations(playerid);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

	    PonerObjeto(playerid, 1, 131); InfoJugador[playerid][jManoDerecha] = 131, InfoJugador[playerid][jManoDerechaCant] = dinero;
		ActualizarManos(playerid);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

		if (InfoJugador[playerid][jHabilidad1][3] < 60) InfoJugador[playerid][jHabilidad1][3] += 3;
		InfoJugador[playerid][jTiempos][16] = 900;

		_Mensaje(playerid, 4, "A7CE00", "Cogiste la caja registradora (/rcaja).");

        InfoNegocio[id][nDinero] -= InfoJugador[playerid][jManoDerechaCant];
		guardar_int_mysql("negocios", "Dinero", InfoNegocio[id][nID], InfoNegocio[id][nDinero]);
	} else return ShowInfoForPlayer(playerid, "Debes tener las manos vacias.", 2000);
	return 1;
}

CMD:irobjetoadmin(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 3) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /irobjetoadmin.", 2000);
	OnDuty
	if (sscanf(params, "i", params[0])) return _Mensaje(playerid, 3, "0", "/irobjetoadmin idobjeto");
	if (params[0] < 0 || params[0] >= MAX_POBJETOS) return ShowInfoForPlayer(playerid, "ID de objeto admin invalido.", 2000);
	SetPosEx(playerid, cObjeto[params[0]][pPosX], cObjeto[params[0]][pPosY], cObjeto[params[0]][pPosZ], 0.0, 0, 0, 1);
	_Mensaje(playerid, 2, "0", "Teleportado.");
	return 1;
}

CMD:borrarobjetoadmin(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 3) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /borrarobjetoadmin.", 2000);
	OnDuty
	for(new a = 0; a < MAX_POBJETOS; a++)
	{
		if(cObjeto[a][pOID] > 0)
		{
			if(_enPos(playerid, 3.0, cObjeto[a][pPosX], cObjeto[a][pPosY], cObjeto[a][pPosZ]))
			{
		   		if (cObjeto[a][pObjeto] != INVALID_STREAMER_ID)
				{
					DestroyDynamicObject(cObjeto[a][pObjeto]);
					cObjeto[a][pObjeto] = INVALID_STREAMER_ID;
				}
			    cObjeto[a][pPosX] = 0.0;
			    cObjeto[a][pPosY] = 0.0;
			    cObjeto[a][pPosZ] = 0.0;
			    cObjeto[a][pPosRX] = 0.0;
			    cObjeto[a][pPosRY] = 0.0;
			    cObjeto[a][pPosRZ] = 0.0;
			    cObjeto[a][pVw] = 0;
			    cObjeto[a][pInt] = 0;
			    cObjeto[a][pOID] = 0;
			    GuardarObjetosAdmin();
			    return 1;
			}
		}
	}
	return 1;
}

CMD:objetosadmin(playerid)
{
    if (InfoJugador[playerid][jAdmin] < 3) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /objetosadmin.", 2000);
    OnDuty
    new pro[100], pro2[1024], tobjects;
	for(new a = 0; a < MAX_POBJETOS; a++)
	{
	    if(cObjeto[a][pOID] > 0)
	    {
	        tobjects++;
			format(pro, sizeof(pro), "ID: %d | OBJETO: %d |\n", a, cObjeto[a][pOID]);
			strcat(pro2, pro);
	    }
	}
 	if(tobjects > 0) ShowPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, "Objetos admin", pro2, "Aceptar", "");
 	else ShowPlayerDialog(playerid, D_INVALIDO, DIALOG_STYLE_LIST, "Objetos admin", "Ninguno", "Aceptar", "");
	return 1;
}

CMD:crearobjetoadmin(playerid, params[])
{
    if (InfoJugador[playerid][jAdmin] < 3) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /crearobjetoadmin.", 2000);
    OnDuty
	if(isnull(params))
	{
		new OA[20];
    	OA[0] = 2636; OA[1] = 2121; OA[2] = 1811; OA[3] = 2748; OA[4] = 2763; OA[5] = 2644; OA[6] = 2188; OA[7] = 11691; OA[8] = 2111; OA[9] = 1824; OA[10] = 1896;
    	OA[11] = 1516; OA[12] = 15037; OA[13] = 2636; OA[14] = 3039; OA[15] = 3862; OA[16] = 3040; OA[17] = 3860; OA[18] = 8572; OA[19] = 1536;
    	ShowModelSelectionMenuEx(playerid, OA, 20, "Objetos	", D_OBJETOSADMIN);
	}
	else
	{
	    new modelid;
	    if (sscanf(params, "i", modelid)) return _Mensaje(playerid, 3, "0", "/crearobjetoadmin ID OBJETO");
	    new objeto = -1;
 		for(new a = 0; a < MAX_POBJETOS;a++)
	    {
			if(cObjeto[a][pOID] == 0)
			{
				objeto = a;
				break;
		    }
		}
  		if(objeto == -1) return _Mensaje(playerid, 4, "b00000", "Se alcanzo el limite de objetos admin.");
		GetPlayerPos(playerid, cObjeto[objeto][pPosX], cObjeto[objeto][pPosY], cObjeto[objeto][pPosZ]);
		cObjeto[objeto][pOID] = modelid;
		cObjeto[objeto][pObjeto]  = CreateDynamicObject(modelid, cObjeto[objeto][pPosX]-2.0, cObjeto[objeto][pPosY]-1.0, cObjeto[objeto][pPosZ], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, MAX_RADIO_STREAM_MIN);
		cObjeto[objeto][pInt] = GetPlayerInterior(playerid);
		cObjeto[objeto][pVw] = GetPlayerVirtualWorld(playerid);
		EditDynamicObject(playerid, cObjeto[objeto][pObjeto]);
		SetPVarInt(playerid, "OBJ_ADM", 1);
	}
	return 1;
}

CMD:multicuenta(playerid, params[])
{
    if (InfoJugador[playerid][jAdmin] < 5) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Multicuenta.", 2000);
    OnDuty
	new string[128], playerid2;
	if (sscanf(params, "u", playerid2)) return _Mensaje(playerid, 3, "0", "/multicuenta [id jugador]");
	if (!IsPlayerConnected(playerid2)) return ShowInfoForPlayer(playerid, "Jugador desconectado.", 2000);

	new autoip[32]; GetPlayerIp(playerid2, autoip, 32);
	if (InfoJugador[playerid2][jMulticuenta] == 0)
	{
		format(string, sizeof string, "Administracion: %s autorizo la multicuenta a %s.", NombreRJugador(playerid), NombreRJugador(playerid2));
		MensajeAdmin(string);
		format(string, sizeof string, "Autorizo la multicuenta a %s [IP: %s].", NombreRJugador(playerid2), autoip);
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 3);
		InfoJugador[playerid2][jMulticuenta] = 1; // Multicuenta Autorizada.
	}
	else
	{
		format(string, sizeof string, "Administracion: %s rechazo la multicuenta a %s. Solo puede tener una cuenta.", NombreRJugador(playerid), NombreRJugador(playerid2));
		MensajeAdmin(string);
		format(string, sizeof string, "Rechazo la multicuenta a %s [IP: %s].", NombreRJugador(playerid2), autoip);
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 3);
		InfoJugador[playerid2][jMulticuenta] = 0; // Mlticuenta No Autorizada.
	}
	guardar_int_mysql("cuentas", "Multicuenta", InfoJugador[playerid2][jID], InfoJugador[playerid2][jMulticuenta]);
	return 1;
}
CMD:invitar(playerid, params[])
{
	new ID_PFac = InfoJugador[playerid][jFacLider], string[256], playerid2, type_invite[32], id = InfoJugador[playerid][jFamMiembro];
	if (!ID_PFac && !id) return ShowInfoForPlayer(playerid, "No eres lider de ninguna familia/faccion.", 2000);
	if (sscanf(params, "us[32]", playerid2, type_invite)) return _Mensaje(playerid, 3, "0", "/invitar [id jugador] [famila]");
	if (!IsPlayerConnected(playerid2)) return ShowInfoForPlayer(playerid, "Jugador desconectado.", 2000);
	if(!CercaDelWeon(10.0, playerid, playerid2)) return ShowInfoForPlayer(playerid, "No puedes invitar a esa persona, estas lejos.", 2000);
	if (isnumeric(type_invite)) return ShowInfoForPlayer(playerid, "No puedes colocar numeros (faccion o familia).", 2000);
	if (TomandoTrabajo[playerid2] != -1) return ShowInfoForPlayer(playerid, "Este jugador esta en otra tarea, espera.", 2000);
	if (strlen(type_invite) > 20 || strlen(type_invite) < 6) { ShowInfoForPlayer(playerid, "Escribe bien la invitacion (familia).", 2000); return 1; }
	if (!strcmp(type_invite, "faccion", true))
	{
		if (!ID_PFac) return ShowInfoForPlayer(playerid, "No eres lider de ninguna faccion.", 2000);
		if (InfoJugador[playerid2][jFacLider]) return ShowInfoForPlayer(playerid, "Ese jugador es lider.", 2000);
		if (InfoJugador[playerid2][jFacMiembro]) return ShowInfoForPlayer(playerid, "Ese jugador ya es miembro de una faccion.", 2000);
		switch (InfoJugador[playerid][jFacLider])
		{
			//legales
			case 1: NombreFaccion[playerid2] = "SAPD";
			case 2: NombreFaccion[playerid2] = "Libre";
			case 3: NombreFaccion[playerid2] = "MTV";
			case 4: NombreFaccion[playerid2] = "Gobierno";
			case 5: NombreFaccion[playerid2] = "SAED";
			case 6: NombreFaccion[playerid2] = "FBI";
			case 7: NombreFaccion[playerid2] = "USMC";
		}
		NumeroFaccion[playerid2] = ID_PFac;
		TomandoTrabajo[playerid2] = playerid;
		format(string, sizeof string, "\n{b0b0b0}•{FFFFFF} %s te invito a {00C200}'%s'\n\n{b0b0b0}{FFFFFF} Aceptas la propuesta?", NombreJugador(playerid), NombreFaccion[playerid2]);
		ShowPlayerDialog(playerid2, D_Ifaccion, DIALOG_STYLE_MSGBOX, "Invitacion", string, "Aceptar", "Rechazar");
		format(string, sizeof string, "* Invitaste a %s a tu faccion, espera la respuesta de el.", NombreJugador(playerid2));
		_Mensaje(playerid, 4, "33CCFF", string);
		return 1;
	}
	else if (!strcmp(type_invite, "familia", true))
	{
		new acceso = 0;
		if (InfoJugador[playerid][jFamRango] == InfoFamilia[id][fMaxRangos]) { acceso = 1; }
		else { if (InfoJugador[playerid][jFamLider] == id) acceso = 1; }
		if (acceso == 0) return ShowInfoForPlayer(playerid, "No eres lider de banda o rango maximo.", 2000);
		if (InfoJugador[playerid2][jFamLider]) return ShowInfoForPlayer(playerid, "Ese jugador es lider de una banda.", 2000);
		if (InfoJugador[playerid2][jFamMiembro]) return ShowInfoForPlayer(playerid, "Ese jugador ya es miembro de una banda.", 2000);
		if (GetMiembrosFamilia(id) >= 20) return ShowInfoForPlayer(playerid, "No pueden haber mas de 20 miembros en una banda.", 2000);
		NumeroFamilia[playerid2] = id;
		TomandoTrabajo[playerid2] = playerid;
		format(string, sizeof string, "{CCCCCC}** %s te invito a {CCCC00}%s\n\n{CCCCCC}Aceptas la invitacion?", NombreJugador(playerid), InfoFamilia[id][fNombre]);
		Dialog_Show(playerid2, InviteFamily, DIALOG_STYLE_MSGBOX, "Invitacion", string, "Aceptar", "Rechazar");
		SendClientMessageEx(playerid, 0x33CCFFFF, "*** Has invitado a %s a tu familia.", NombreJugador(playerid2));
		return 1;
	}
	return _Mensaje(playerid, 3, "0", "/invitar [id jugador] [famila]");
}

Dialog:InviteFamily(playerid, response, listitem, inputtext[])
{
	new lider = TomandoTrabajo[playerid], familia = NumeroFamilia[playerid], string[256];
	if (!response)
	{
		if (IsPlayerConnectedEx(lider)) { SendClientMessageEx(lider, 0xFFFFFFFF, "%s rechazo tu invitacion de banda.", NombreJugador(playerid)); }
		SendClientMessageEx(playerid, 0xFFFFFFFF, "Rechazaste la invitacion de banda de %s.", NombreJugador(lider));
		NumeroFamilia[playerid] = 0;
		TomandoTrabajo[playerid] = -1;
		return 1;
	}
	if (IsPlayerConnectedEx(lider)) { SendClientMessageEx(lider, 0xFFFFFFFF, "%s acepto tu invitacion de banda.", NombreJugador(playerid)); }
	SendClientMessageEx(playerid, 0xFFFFFFFF, "Ahora formas parte de la familia: {CCCC00}%s", InfoFamilia[familia][fNombre]);
	format(string, sizeof string, "Acepto unirse a la banda ID %d.", familia);
	AddRegistroFam(playerid, InfoFamilia[familia][fNombre], string);
	InfoJugador[playerid][jFamMiembro] = familia;
	InfoJugador[playerid][jFamRango] = 1;
	guardar_int_mysql("cuentas", "FamMiembro", InfoJugador[playerid][jID], InfoJugador[playerid][jFamMiembro]);
	guardar_int_mysql("cuentas", "FamRango", InfoJugador[playerid][jID], InfoJugador[playerid][jFamRango]);
	NumeroFamilia[playerid] = 0;
	TomandoTrabajo[playerid] = -1;
	InfoJugador[playerid][jI_fabrica] = 3;
	InfoJugador[playerid][jT_fabrica] = 60;
	InfoJugador[playerid][jI_fabrica2] = 2;
	InfoJugador[playerid][jT_fabrica2] = 30;
	guardar_int_mysql("cuentas", "I_fabrica", InfoJugador[playerid][jID], 3);
	guardar_int_mysql("cuentas", "T_fabrica", InfoJugador[playerid][jID], 60);
	guardar_int_mysql("cuentas", "I_fabrica2", InfoJugador[playerid][jID], 2);
	guardar_int_mysql("cuentas", "T_fabrica2", InfoJugador[playerid][jID], 30);
	return 1;
}

CMD:expulsar(playerid, params[])
{
    new nombre_miembro[32], newid = -1, string[256], eslider;
	new familia = InfoJugador[playerid][jFamMiembro], query[512];
	if (eslider != 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No puedes expulsar al lider de la banda, habla con el encargado.");
	if (IsPlayerConnectedEx(newid))
	{
	    if (playerid == newid) return SendClientMessage(playerid, 0xCCCCCCFF, "* Eres tontuelo? no puedes expulsarte, habla con el encargado.");
		InfoJugador[newid][jFamLider] = 0;
		InfoJugador[newid][jFamMiembro] = 0;
		InfoJugador[newid][jFamRango] = 0;
	}
    format(string, sizeof string, "*** Lider %s expulso de la banda a %s.", NombreRJugador(playerid), nombre_miembro);
    SendFamilyMessage(familia, 0x33CCFFFF, string);
    mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET FamLider = 0, FamMiembro = 0, FamRango = 0 WHERE Nombre_Apellido = '%e'", nombre_miembro);
    mysql_tquery(DBngrp, query);
	return 1;
}

CMD:botiquin(playerid)
{
	new Float: health = InfoJugador[playerid][jVida];
	if (!CheckTimer(20, TimerCombate[playerid]))
	{
	if (health >= 99) return ShowInfoForPlayer(playerid, "No necesitas el botiquin ahora mismo.", 2000), SetPlayerHealth(playerid, 100);
	if (InfoJugador[playerid][jManoDerecha] != 139 && InfoJugador[playerid][jManoDerecha] != 130) return ShowInfoForPlayer(playerid, "No tienes ningun botiquin en la mano derecha.", 2000);
	InfoJugador[playerid][jManoDerechaCant]--;
	AccionesRol(playerid, 0, "se aplica un botiquin de primeros auxilios.");
	ActualizarManos(playerid);
	if (health >= 50) Dar_Vida(playerid, 100);
	else Dar_Vida(playerid, health + 50.0);
	}
	else{
		SendClientMessageEx(playerid, 0x9A5FFFFF, "Estas en modo combate, debes esperar %s segundos.", Segundos_tiempo(CheckTimer(20, TimerCombate[playerid])));
	}
	return 1;
}

CMD:taclear(playerid, params[])
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "* /taclear [id jugador].");
	if (!IsPlayerConnected(params[0])) return ShowInfoForPlayer(playerid, "Este usuario no esta conectado.", 2000);
	if(!CercaDelWeon(5.0, playerid, params[0])) return ShowInfoForPlayer(playerid, "Este usuario no esta cerca tuyo.", 2000);
	if(params[0] == playerid) return ShowInfoForPlayer(playerid, "No te puedes taclear a ti mismo.", 2000);
	CongelarEx(params[0], 10);
	ApplyAnimation(params[0], "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 1, 1);
	_Mensaje(params[0], 5, "0", "Has sido tacleado");
	new pro[144];
	format(pro, sizeof(pro), "Has tacleado a %s.", NombreJugador(params[0]));
	_Mensaje(playerid, 5, "0", pro);
	return 1;
}

CMD:taser(playerid, params[]){
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (modotazer[playerid]==0){
	modotazer[playerid]=1;
	_Mensaje(playerid, 4, "ffffff", "{ADC3E7}Has activado el modo taser.");
	return 1;
	}	else modotazer[playerid]=0;
	_Mensaje(playerid, 4, "ffffff", "{ADC3E7}Has desactivado el modo taser.");
	return 1;
}

CMD:drivebug(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return ShowInfoForPlayer(playerid, "No estas en un vehiculo.", 2000);
	if(GetPlayerState(playerid) != PLAYER_STATE_PASSENGER) return ShowInfoForPlayer(playerid, "No estas en un vehiculo de pasajero.", 2000);
	ApplyAnimation(playerid, "PED", "CAR_GETIN_RHS", 4.1, 0, 0, 0, 0, 1, 1);
	SetPlayerArmedWeapon(playerid, 0);
    SetTimerEx("desbugdrive", 500, false, "ii", playerid, GetPlayerWeapon(playerid));
    return 1;
}

funcion desbugdrive(playerid, arma)
{
    SetPlayerArmedWeapon(playerid, arma);
}

CMD:refuerzos(playerid)
{
    if (InfoJugador[playerid][jFamMiembro] == 0) return ShowInfoForPlayer(playerid, "No eres miembro de ninguna banda.", 2000);
    {
        new Float: X, Float: Y, Float: Z;
        new id = InfoJugador[playerid][jFamMiembro], lider_member[32] = "Miembro";
		SolicitaRefuerzos[playerid] = 1;
		if (InfoJugador[playerid][jFamLider] != 0) alm(lider_member, "Lider");
		foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jFamMiembro] == id)
		{
             SendClientMessageEx(playerid2, playerid, "{6666FF}[%s]{FFFFFF} reportando: el miembro {6666FF}%s{FFFFFF} Esta solicitando refuerzos en {6666FF}%s.", InfoFamilia[id][fLogo], NombreRJugador(playerid), GetPlayerNameZone(playerid));
             SolicitaRefuerzos[playerid] = 0;
             GetPlayerPos(playerid, X, Y, Z);
	         SetPlayerCheckpoint(playerid2, X, Y, Z, 3);
	         SetPVarInt(playerid2, "EnCheckPoint", 5);
	    }

    }
    return 1;
}

CMD:ref(playerid) return cmd_refuerzos(playerid);

CMD:referido(playerid){
	if(InfoJugador[playerid][jReferido]==1) return SendClientMessageEx(playerid, 0xccccccFF, "Ya tienes un codigo de referido en uso.");
	ShowPlayerDialog(playerid, D_referido, DIALOG_STYLE_INPUT, "Sistema de {fff000}referido!", "{FFFFFF}Ingresa un codigo de referido.", "Continuar", "Cancelar");
	return 1;
}

CMD:palcohol(playerid, params[])
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (InfoJugador[playerid][jDutyPD] == 0) return ShowInfoForPlayer(playerid, "No estas en servicio.", 2000);
 	if (sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "/palcohol [id jugador]");
	if (!IsPlayerConnected(params[0])) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);

	if (CercaDelWeon(2.0, playerid, params[0]))
	{
		if (InfoJugador[playerid][jManoDerecha] != 129 && InfoJugador[playerid][jManoIzquierda] != 129) { ShowInfoForPlayer(playerid, "No tienes un alcoholimetro en ninguna mano.", 2000); return 1;}
		new string[150];
		alcoholemia[params[0]] = playerid;

		format(string, sizeof string, "* Has pedido a %s que acepte la prueba. Espera una respuesta.", NombreJugador(params[0]));
		_Mensaje(playerid, 4, "33CCFF", string);
		format(string, sizeof string, "* %s te ha pedido que aceptes la prueba de alcoholemia. (/aceptar)", NombreJugador(playerid));
		_Mensaje(params[0], 4, "33CCFF", string);

	} else ShowInfoForPlayer(playerid, "El jugador no se encuentra cerca de ti.", 2000);
	return 1;
}

CMD:verhabilidad(playerid, params[])
{
	new string[256], habilidad[300], habilidad2[2000], playerid2;
	if (InfoJugador[playerid][jAdmin] < 1) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /verhabilidad.", 2000);
	OnDuty
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/verhabilidad [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);

	if (InfoJugador[playerid2][jHabilidad2][4] == 5) format(habilidad, sizeof habilidad, "[ID:4] {37BD5B}Carguero{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid2][jHabilidad2][4]);
	else format(habilidad, sizeof habilidad, "[ID:4] {68AFA6}Carguero{FFFFFF}\t(%d)\t(%d / 250)\n", InfoJugador[playerid2][jHabilidad2][4], InfoJugador[playerid2][jHabilidad1][4]);
	strcat(habilidad2, habilidad);

	if (InfoJugador[playerid2][jHabilidad2][2] == 5) format(habilidad, sizeof habilidad, "[ID:2] {37BD5B}Basurero{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid2][jHabilidad2][2]);
	else format(habilidad, sizeof habilidad, "[ID:2] {1DAFD7}Basurero{FFFFFF}\t(%d)\t(%d / 100)\n", InfoJugador[playerid2][jHabilidad2][2], InfoJugador[playerid2][jHabilidad1][2]);
	strcat(habilidad2, habilidad);

	if (InfoJugador[playerid2][jHabilidad2][0] == 5) format(habilidad, sizeof habilidad, "[ID:0] {FF9B00}Camionero{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid2][jHabilidad2][0]);
	else format(habilidad, sizeof habilidad, "[ID:0] {E9AF34}Camionero{FFFFFF}\t(%d)\t(%d / 100)\n", InfoJugador[playerid2][jHabilidad2][0], InfoJugador[playerid2][jHabilidad1][0]);
	strcat(habilidad2, habilidad);

	if (InfoJugador[playerid2][jHabilidad2][5] == 5) format(habilidad, sizeof habilidad, "[ID:5] {37BD5B}Carpintero{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid2][jHabilidad2][5]);
	else format(habilidad, sizeof habilidad, "[ID:5] {E9C00D}Carpintero{FFFFFF}\t(%d)\t(%d / 250)\n", InfoJugador[playerid2][jHabilidad2][5], InfoJugador[playerid2][jHabilidad1][5]);
	strcat(habilidad2, habilidad);

	if (InfoJugador[playerid2][jHabilidad2][6] == 5) format(habilidad, sizeof habilidad, "[ID:6] {E20000}Aserrador{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid2][jHabilidad2][6]);
	else format(habilidad, sizeof habilidad, "[ID:6] {53E248}Aserrador{FFFFFF}\t(%d)\t(%d / 250)\n", InfoJugador[playerid2][jHabilidad2][6], InfoJugador[playerid2][jHabilidad1][6]);
	strcat(habilidad2, habilidad);

	if (InfoJugador[playerid2][jHabilidad2][1] == 5) format(habilidad, sizeof habilidad, "[ID:1] {E20000}Traficante{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid2][jHabilidad2][1]);
	else format(habilidad, sizeof habilidad, "[ID:1] {B00000}Traficante{FFFFFF}\t(%d)\t(%d / 100)\n", InfoJugador[playerid2][jHabilidad2][1], InfoJugador[playerid2][jHabilidad1][1]);
	strcat(habilidad2, habilidad);

	if (InfoJugador[playerid2][jHabilidad2][7] == 5) format(habilidad, sizeof habilidad, "[ID:7] {E20000}Granjero{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid2][jHabilidad2][7]);
	else format(habilidad, sizeof habilidad, "[ID:7] {648B19}Granjero{FFFFFF}\t(%d)\t(%d / 300)\n", InfoJugador[playerid2][jHabilidad2][7], InfoJugador[playerid2][jHabilidad1][7]);
	strcat(habilidad2, habilidad);

	if (InfoJugador[playerid2][jHabilidad2][8] == 5) format(habilidad, sizeof habilidad, "[ID:8] {E20000}Minero{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid2][jHabilidad2][8]);
	else format(habilidad, sizeof habilidad, "[ID:8] {E78E44}Minero{FFFFFF}\t(%d)\t(%d / 300)\n", InfoJugador[playerid2][jHabilidad2][8], InfoJugador[playerid2][jHabilidad1][8]);
	strcat(habilidad2, habilidad);

	format(string, sizeof string, "Habilidades de %s", NombreRJugador(playerid2));
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, string, habilidad2, "Cerrar", "");
	format(string, sizeof string, "Administracion: %s utilizo /verhabilidad, Jugador: %s[%d].", NombreRJugador(playerid), NombreRJugador(playerid2),playerid2);
	MensajeAdmin(string);
	return 1;
}

CMD:habilidad(playerid)
{
	new habilidad[300], habilidad2[2000];

	if (InfoJugador[playerid][jHabilidad2][4] == 5) format(habilidad, sizeof habilidad, "{37BD5B}Carguero{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid][jHabilidad2][4]);
	else format(habilidad, sizeof habilidad, "{68AFA6}Carguero{FFFFFF}\t(%d)\t(%d / 250)\n", InfoJugador[playerid][jHabilidad2][4], InfoJugador[playerid][jHabilidad1][4]);
	strcat(habilidad2, habilidad);

	if (InfoJugador[playerid][jHabilidad2][2] == 5) format(habilidad, sizeof habilidad, "{37BD5B}Basurero{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid][jHabilidad2][2]);
	else format(habilidad, sizeof habilidad, "{1DAFD7}Basurero{FFFFFF}\t(%d)\t(%d / 100)\n", InfoJugador[playerid][jHabilidad2][2], InfoJugador[playerid][jHabilidad1][2]);
	strcat(habilidad2, habilidad);

	if (InfoJugador[playerid][jHabilidad2][0] == 5) format(habilidad, sizeof habilidad, "{FF9B00}Camionero{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid][jHabilidad2][0]);
	else format(habilidad, sizeof habilidad, "{E9AF34}Camionero{FFFFFF}\t(%d)\t(%d / 100)\n", InfoJugador[playerid][jHabilidad2][0], InfoJugador[playerid][jHabilidad1][0]);
	strcat(habilidad2, habilidad);

	if (InfoJugador[playerid][jHabilidad2][5] == 5) format(habilidad, sizeof habilidad, "{37BD5B}Carpintero{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid][jHabilidad2][5]);
	else format(habilidad, sizeof habilidad, "{E9C00D}Carpintero{FFFFFF}\t(%d)\t(%d / 250)\n", InfoJugador[playerid][jHabilidad2][5], InfoJugador[playerid][jHabilidad1][5]);
	strcat(habilidad2, habilidad);

	if (InfoJugador[playerid][jHabilidad2][6] == 5) format(habilidad, sizeof habilidad, "{E20000}Aserrador{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid][jHabilidad2][6]);
	else format(habilidad, sizeof habilidad, "{53E248}Aserrador{FFFFFF}\t(%d)\t(%d / 250)\n", InfoJugador[playerid][jHabilidad2][6], InfoJugador[playerid][jHabilidad1][6]);
	strcat(habilidad2, habilidad);

	if (InfoJugador[playerid][jHabilidad2][1] == 5) format(habilidad, sizeof habilidad, "{E20000}Traficante{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid][jHabilidad2][1]);
	else format(habilidad, sizeof habilidad, "{B00000}Traficante{FFFFFF}\t(%d)\t(%d / 100)\n", InfoJugador[playerid][jHabilidad2][1], InfoJugador[playerid][jHabilidad1][1]);
	strcat(habilidad2, habilidad);

	if (InfoJugador[playerid][jHabilidad2][7] == 5) format(habilidad, sizeof habilidad, "{E20000}Granjero{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid][jHabilidad2][7]);
	else format(habilidad, sizeof habilidad, "{648B19}Granjero{FFFFFF}\t(%d)\t(%d / 300)\n", InfoJugador[playerid][jHabilidad2][7], InfoJugador[playerid][jHabilidad1][7]);
	strcat(habilidad2, habilidad);

	if (InfoJugador[playerid][jHabilidad2][8] == 5) format(habilidad, sizeof habilidad, "{E20000}Minero{FFFFFF}\t(%d)\t({00c200}MaXIMO{ffffff})\n", InfoJugador[playerid][jHabilidad2][8]);
	else format(habilidad, sizeof habilidad, "{E78E44}Minero{FFFFFF}\t(%d)\t(%d / 300)\n", InfoJugador[playerid][jHabilidad2][8], InfoJugador[playerid][jHabilidad1][8]);
	strcat(habilidad2, habilidad);

	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, "Habilidades", habilidad2, "Cerrar", "");
	return 1;
}

CMD:mejorar(playerid, params[])
{
	if (sscanf(params, "s[32]", params)) return _Mensaje(playerid, 3, "0", "/mejorar (carguero, aserrador, carpintero, camionero, basurero, traficante, granjero, minero)");
	if (!strcmp(params, "camionero", true, 9))
	{
		if (InfoJugador[playerid][jHabilidad2][0] == 5) return ShowInfoForPlayer(playerid, "Ya eres nivel maximo de camionero.", 2000);
		if (InfoJugador[playerid][jHabilidad1][0] < 100) return ShowInfoForPlayer(playerid, "No tienes suficientes puntos de camionero.", 2000);
		InfoJugador[playerid][jHabilidad2][0]++;
		InfoJugador[playerid][jHabilidad1][0] -= 100;
		guardar_int_mysql("cuentas", "Habilidad1_1", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][0]);
		guardar_int_mysql("cuentas", "Habilidad2_1", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad2][0]);
		SendClientMessageEx(playerid, 0x33CCFFFF, "Ahora eres nivel %d de camionero.", InfoJugador[playerid][jHabilidad2][0]);
	}
	else if (!strcmp(params, "minero", true, 6))
	{
		if (InfoJugador[playerid][jHabilidad2][8] == 5) return ShowInfoForPlayer(playerid, "Ya eres nivel maximo de minero.", 2000);
		if (InfoJugador[playerid][jHabilidad1][8] < 100) return ShowInfoForPlayer(playerid, "No tienes suficientes puntos de minero.", 2000);
		InfoJugador[playerid][jHabilidad2][8]++;
		InfoJugador[playerid][jHabilidad1][8] -= 100;
		guardar_int_mysql("cuentas", "Habilidad1_9", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][8]);
		guardar_int_mysql("cuentas", "Habilidad2_9", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad2][8]);
		SendClientMessageEx(playerid, 0x33CCFFFF, "Ahora eres nivel %d de traficante.", InfoJugador[playerid][jHabilidad2][1]);
	}
	else if (!strcmp(params, "traficante", true, 10))
	{
		if (InfoJugador[playerid][jHabilidad2][1] == 5) return ShowInfoForPlayer(playerid, "Ya eres nivel maximo de traficante.", 2000);
		if (InfoJugador[playerid][jHabilidad1][1] < 100) return ShowInfoForPlayer(playerid, "No tienes suficientes puntos de traficante.", 2000);
		InfoJugador[playerid][jHabilidad2][1]++;
		InfoJugador[playerid][jHabilidad1][1] -= 100;
		guardar_int_mysql("cuentas", "Habilidad1_2", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][1]);
		guardar_int_mysql("cuentas", "Habilidad2_2", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad2][1]);
		SendClientMessageEx(playerid, 0x33CCFFFF, "Ahora eres nivel %d de traficante.", InfoJugador[playerid][jHabilidad2][1]);
	}
	else if (!strcmp(params, "basurero", true, 8))
	{
		if (InfoJugador[playerid][jHabilidad2][2] == 5) return ShowInfoForPlayer(playerid, "Ya eres nivel maximo de basurero.", 2000);
		if (InfoJugador[playerid][jHabilidad1][2] < 100) return ShowInfoForPlayer(playerid, "No tienes suficientes puntos de basurero.", 2000);
		InfoJugador[playerid][jHabilidad2][2]++;
		InfoJugador[playerid][jHabilidad1][2] -= 100;
		guardar_int_mysql("cuentas", "Habilidad1_3", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][2]);
		guardar_int_mysql("cuentas", "Habilidad2_3", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad2][2]);
		SendClientMessageEx(playerid, 0x33CCFFFF, "Ahora eres nivel %d de basurero.", InfoJugador[playerid][jHabilidad2][2]);
	}
	else if (!strcmp(params, "carguero", true, 8))
	{
		if (InfoJugador[playerid][jHabilidad2][4] == 5) return ShowInfoForPlayer(playerid, "Ya eres nivel maximo de carguero.", 2000);
		if (InfoJugador[playerid][jHabilidad1][4] < 100) return ShowInfoForPlayer(playerid, "No tienes suficientes puntos de carguero.", 2000);
		InfoJugador[playerid][jHabilidad2][4]++;
		InfoJugador[playerid][jHabilidad1][4] -= 250;
		guardar_int_mysql("cuentas", "Habilidad1_5", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][4]);
		guardar_int_mysql("cuentas", "Habilidad2_5", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad2][4]);
		SendClientMessageEx(playerid, 0x33CCFFFF, "Ahora eres nivel %d de carguero.", InfoJugador[playerid][jHabilidad2][4]);
	}
	else if (!strcmp(params, "carpintero", true, 10))
	{
		if (InfoJugador[playerid][jHabilidad2][5] == 5) return ShowInfoForPlayer(playerid, "Ya eres nivel maximo de carpintero.", 2000);
		if (InfoJugador[playerid][jHabilidad1][5] < 100) return ShowInfoForPlayer(playerid, "No tienes suficientes puntos de carpintero.", 2000);
		InfoJugador[playerid][jHabilidad2][5]++;
		InfoJugador[playerid][jHabilidad1][5] -= 250;
		guardar_int_mysql("cuentas", "Habilidad1_6", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][5]);
		guardar_int_mysql("cuentas", "Habilidad2_6", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad2][5]);
		SendClientMessageEx(playerid, 0x33CCFFFF, "Ahora eres nivel %d de carpintero.", InfoJugador[playerid][jHabilidad2][5]);
	}
	else if (!strcmp(params, "aserrador", true, 9))
	{
		if (InfoJugador[playerid][jHabilidad2][6] == 5) return ShowInfoForPlayer(playerid, "Ya eres nivel maximo de aserrador.", 2000);
		if (InfoJugador[playerid][jHabilidad1][6] < 100) return ShowInfoForPlayer(playerid, "No tienes suficientes puntos de aserrador.", 2000);
		InfoJugador[playerid][jHabilidad2][6]++;
		InfoJugador[playerid][jHabilidad1][6] -= 250;
		guardar_int_mysql("cuentas", "Habilidad1_7", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][6]);
		guardar_int_mysql("cuentas", "Habilidad2_7", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad2][6]);
		SendClientMessageEx(playerid, 0x33CCFFFF, "Ahora eres nivel %d de Aserrador.", InfoJugador[playerid][jHabilidad2][6]);
	}
	else if (!strcmp(params, "granjero", true, 8))
	{
		if (InfoJugador[playerid][jHabilidad2][7] == 5) return ShowInfoForPlayer(playerid, "Ya eres nivel maximo de granjero.", 2000);
		if (InfoJugador[playerid][jHabilidad1][7] < 100) return ShowInfoForPlayer(playerid, "No tienes suficientes puntos de granjero.", 2000);
		InfoJugador[playerid][jHabilidad2][7]++;
		InfoJugador[playerid][jHabilidad1][7] -= 300;
		guardar_int_mysql("cuentas", "Habilidad1_8", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][7]);
		guardar_int_mysql("cuentas", "Habilidad2_8", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad2][7]);
		SendClientMessageEx(playerid, 0x33CCFFFF, "Ahora eres nivel %d de granjero.", InfoJugador[playerid][jHabilidad2][7]);
	}
	return 1;
}

CMD:fseguro(playerid)
{
	if (!Es_job(playerid, 5)) return ShowInfoForPlayer(playerid, "No eres ladron de coches.", 2000);
	if (InfoJugador[playerid][jTiempos][18] != 0) return ShowInfoForPlayer(playerid, "Tienes que esperar 5 minutos para poder volver a utilizar este comando.", 2000);
	new Float: x, Float: y, Float: z, id = 0;
	Loop(e, totalvehiculos, 1) if (InfoVehiculo[e][vSpawned] != 0)
	{
		GetVehiclePos(InfoVehiculo[e][vDL], x, y, z);
		if (_enPos(playerid, 3.0, x, y, z) && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(InfoVehiculo[e][vDL]) && GetPlayerInterior(playerid) == GetVehicleInterior(InfoVehiculo[e][vDL]))
		{
			id = e;
			break;
		}
	}
	if (id == 0) return ShowInfoForPlayer(playerid, "No estas cerca de un vehiculo de jugador.", 2000);
	if (InfoVehiculo[id][vSeguro] == 0) return ShowInfoForPlayer(playerid, "Este vehiculo ya esta abierto.", 2000);
	if (InfoJugador[playerid][jManoDerecha] == 128 || InfoJugador[playerid][jManoIzquierda] == 128)
	{
		new a = random(10);
		if (a == 0 || a == 1)
		{
			ShowInfoForPlayer(playerid, "Intentaste forzar la cerradura del vehiculo pero tu palanca se ha roto en el intento.", 2000);
			if (InfoJugador[playerid][jManoIzquierda] == 128) InfoJugador[playerid][jManoIzquierdaCant] --;
			else InfoJugador[playerid][jManoDerechaCant] --;
			ActualizarManos(playerid);
			return 1;
		}
		else
		{
			GameTextForPlayer(playerid, "~w~~h~~h~Vehiculo ~g~Abierto", 5000, 1);
			PlayerPlaySoundEx(1145, x, y, z);
			InfoVehiculo[id][vSeguro] = 0;
			VehSeguro[InfoVehiculo[id][vDL]] = 0;
			guardar_int_mysql("vehiculos", "Seguro", InfoVehiculo[id][vID], InfoVehiculo[id][vSeguro]);
			vehicle_unlock_doors(InfoVehiculo[id][vDL]);
			AccionesRol(playerid, 0, "toma su palanca y comenzo a forzar la cerradura del vehiculo, despues de unos segundos consigue abrirlo.");
			InfoJugador[playerid][jTiempos][18] = 5;
			guardar_int_mysql("cuentas", "Tiempos19", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][18]);
			return 1;
		}
	}
	ShowInfoForPlayer(playerid, "No tienes una palanca en alguna mano.", 2000);
	return 1;
}

CMD:tbanoff(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] >= 3 || InfoJugador[playerid][jEncargado][3] == 1 || InfoJugador[playerid][jRestriccion][3] == 1)
	{
		new playerid2, tiempo, razon[128], nombrexdd[50], string[512];
		if (sscanf(params, "s[24]ds[128]", nombrexdd, tiempo, razon)) return _Mensaje(playerid, 3, "0", "/tbanoff [Nombre_Apellido] [Minutos] [Razon]");
		if (sscanf(params, "uds[128]", playerid2, tiempo, razon)) return SendClientMessage(playerid, -1, "Hubo un problema, utiliza de nuevo el comando.");
		OnDuty
		if (IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, -1, "Ese jugador esta conectado, utiliza /tban.");
		if (tiempo < 1 || tiempo > 2880) { SendClientMessage(playerid, -1, "El tiempo minimo es de 1 minuto y el maximo 2880 (48 hs)"); return 1; }
		if (VerificarCuenta(nombrexdd))
		{
		    new banex, query3[1028];
			reg_int(0, "Baneado", banex);
			if (banex != 0) return SendClientMessageEx(playerid, -1, "%s ya esta baneado/bloqueado.", nombrexdd);
			format(string, sizeof string, "Administracion: %s fue expulsado %d minutos por %s, Razon:[%s] (offline)", nombrexdd, tiempo, NombreRJugador(playerid), razon);
			_MensajeOOC(0xFF6347FF, string);
			new k = gettime(), elpru[30];
			tiempo *= 60;
			k += tiempo;
			format(elpru, sizeof(elpru), "%d", k);
			mysql_format(DBngrp, query3, sizeof query3, "UPDATE cuentas SET Baneado = 10, Ban_t = '%e', Ban_m = '%e', Ban_r = '%e', Ban_c = '%e', JuegaleOwo = 0 WHERE Nombre_Apellido = '%e'", elpru, FechaHoy(), razon, NombreRJugador(playerid), nombrexdd);
			mysql_tquery(DBngrp, query3);
			return 1;
		}
		ShowInfoForPlayer(playerid, "No existe esa cuenta.", 2000);
	}
	else ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /tbanoff.", 2000);
	return 1;
}

CMD:estaenjail(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 2) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Estaenjail.", 2000);
	OnDuty
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/estaenjail [Nombre_Apellido]");
	if (VerificarCuenta(params))
	{
		new typejail, time;
		reg_int(0, "Encarcelado", typejail);
		reg_int(0, "TiempoCarcel", time);
		cache_unset_active();
		switch (typejail)
		{
		    case 1: SendClientMessageEx(playerid, -1, "%s esta sancionado OOC por %d minutos", params, time);
		    case 2: SendClientMessageEx(playerid, -1, "%s esta sancionado Comisaria por %d minutos", params, time);
		    case 3: SendClientMessageEx(playerid, -1, "%s esta sancionado Federal por %d minutos", params, time);
		    default: SendClientMessageEx(playerid, -1, "%s no esta sancionado.", params);
		}
		return 1;
	}
	ShowInfoForPlayer(playerid, "Esa cuenta no existe.", 2000);
	return 1;
}

CMD:desbugear(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 2) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Desbugear.", 2000);
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/desbugear [Nombre_Apellido]");
	OnDuty
	if (VerificarCuenta(params))
	{
	    new gformat[1028];
		mysql_format(DBngrp, gformat, sizeof gformat, "UPDATE cuentas SET PosicionX = 1679.3351, PosicionY = -1657.1349, PosicionZ = 13.5395, PosicionR = 318.4477, Interior = 0, VirtualWorld = 0 WHERE Nombre_Apellido = '%e'", params);
		mysql_tquery(DBngrp, gformat);
		SendClientMessageEx(playerid, -1, "Desbugeaste la posicion de la cuenta %s.", params);
		return 1;
	}
	ShowInfoForPlayer(playerid, "Esa cuenta no existe.", 2000);
	return 1;
}

CMD:pedido(playerid, params[])
{
	if (!sscanf(params, "s[32]", params[0]))
	{
		if (strcmp(params[0], "drogas", true) == 0)
		{
			if (Pedido[playerid] != 0) return ShowInfoForPlayer(playerid, "Ya te encuentras en un pedido (/pedido cancelar).", 2000);
			if(strcmp(GetWeekDay(), "Sabado")) return _Mensaje(playerid, 4, "FFFFFF", "No hay vendedor hasta el sabado.");
			new year, month, day;
			getdate(year, month, day);
			if (InfoJugador[playerid][jTiempos][10] == day) return _Mensaje(playerid, 4, "FFFFFF", "El traficante ya no esta, vuelve la otra semana.");

			if (Es_Pandilla_Mafia(playerid) == 0) return  ShowInfoForPlayer(playerid, "debes ser de una banda ilegal.", 2000);
			if (InfoFamilia[InfoJugador[playerid][jFamMiembro]][fTipo] == 3) return ShowInfoForPlayer(playerid, "No puedes comprar siendo de una faccion legal.", 2000);
			if (InfoJugador[playerid][jFamRango] < 4) return ShowInfoForPlayer(playerid, "Debes poseer minimo rango 4.", 2000);

			ShowPlayerDialog(playerid, D_CAMELLO, DIALOG_STYLE_LIST, "{D6E1EB}Drogas", "P. Crack\t400\t$9,000\n\
			P. Cocaina\t500\t$10,000\n\
			P. Heroina\t180\t$8,000\n\
			P. LSD\t200\t$5,000\n\
			Semillias Maria\t20\t$2,200", "Pedir", "Cancelar");

			return 1;
		}
		if (strcmp(params[0], "camion", true) == 0)
		{
			if (!Es_job(playerid, 5)) return ShowInfoForPlayer(playerid, "No eres ladron de coches.", 2000);
			if (checkcoche[playerid] != 0) return ShowInfoForPlayer(playerid, "Posees un pedido pendiente, utiliza /pedido cancelar.", 2000);
			new _txt[128];
			if (InfoJugador[playerid][jTiempos][17] > 0) { format(_txt, sizeof(_txt), " Debes esperar %d minutos para otro encargo.", InfoJugador[playerid][jTiempos][17]); return _Mensaje(playerid, 4, "b00000", _txt); }

			new d_ran = random(3);
			switch(d_ran)
			{
				case 0: {
					for(new i=0; i <= MAX_VEHICLES; i++)
						{ if (VehicleToPoint(5.0, i, 2086.6370, -2404.8105, 13.6896)) { _Mensaje(playerid, 4, "b00000", "No se encuentran vehiculos disponibles, intenta de nuevo mas tarde."); return 1; } }
					new Coche = CreateVehicle(414, 2086.6370, -2404.8105, 13.6896, 180.0000, 2, 5, -1);
                    cocherobo[playerid] = Coche;
    				SetVehicleVirtualWorld(Coche, 0);
    				SetVehicleInterior(Coche, 0);
					_Mensaje(playerid, 4, "FFEA5F", "[SMS: 0057822]: Necesito el camion cuanto antes, te deje informacion.");
					SetPlayerCheckpoint(playerid, 2086.6370, -2404.8105, 13.6896, 10.0);
					checkcoche[playerid] = 414;
					SetPVarInt(playerid, "EnCheckPoint", 5);
					TogglePlayerAllDynamicCPs(playerid, false);
					return 1;
				}
				case 1: {
					for(new i=0; i <= MAX_VEHICLES; i++)
						{ if (VehicleToPoint(5.0, i, 1768.0427, -2041.2350, 13.6517)) { _Mensaje(playerid, 4, "b00000", "No se encuentran vehiculos disponibles, intenta de nuevo mas tarde."); return 1; } }
					new Coche = CreateVehicle(414, 1768.0427, -2041.2350, 13.6517, 90.0000, 8, 9, -1);
                    cocherobo[playerid] = Coche;
    				SetVehicleVirtualWorld(Coche, 0);
    				SetVehicleInterior(Coche, 0);
					_Mensaje(playerid, 4, "FFEA5F", "[SMS: 0057822]: Necesito el camion cuanto antes, te deje informacion.");
					SetPlayerCheckpoint(playerid, 1768.0427, -2041.2350, 13.6517, 10.0);
					checkcoche[playerid] = 414;
					SetPVarInt(playerid, "EnCheckPoint", 5);
					TogglePlayerAllDynamicCPs(playerid, false);
					return 1;
				}
				case 2: {
					for(new i=0; i <= MAX_VEHICLES; i++)
						{ if (VehicleToPoint(5.0, 	i, 2612.5374, -2379.8118, 13.6461)) { _Mensaje(playerid, 4, "b00000", "No se encuentran vehiculos disponibles, intenta de nuevo mas tarde."); return 1; } }
					new Coche = CreateVehicle(414, 2612.5374, -2379.8118, 13.6461, 0.0000, 1, 4, -1);
                    cocherobo[playerid] = Coche;
    				SetVehicleVirtualWorld(Coche, 0);
    				SetVehicleInterior(Coche, 0);
					_Mensaje(playerid, 4, "FFEA5F", "[SMS: 0057822]: Necesito el camion cuanto antes, te deje informacion.");
					SetPlayerCheckpoint(playerid, 2612.5374, -2379.8118, 13.6461, 10.0);
					checkcoche[playerid] = 414;
					SetPVarInt(playerid, "EnCheckPoint", 5);
					TogglePlayerAllDynamicCPs(playerid, false);
					return 1;
				}
			}
		}

		if (strcmp(params[0], "coche", true) == 0)
		{
			if (!Es_job(playerid, 5)) return ShowInfoForPlayer(playerid, "No eres ladron de coches.", 2000);

			if (checkcoche[playerid] != 0) return ShowInfoForPlayer(playerid, "Posees un pedido pendiente, utiliza /pedido cancelar.", 2000);
			new _txt[128];
			if (InfoJugador[playerid][jTiempos][17] > 0) { format(_txt, sizeof(_txt), " Debes esperar %d minutos para otro encargo.", InfoJugador[playerid][jTiempos][17]); return _Mensaje(playerid, 4, "b00000", _txt); }


			//trabajando en ello

		}

		if (strcmp(params[0], "cancelar", true) == 0)
		{
		    if (checkcoche[playerid] != 0)
			{
				DestroyVehicle(cocherobo[playerid]);
				cocherobo[playerid] = 0;
		    	checkcoche[playerid] = 0;
				_Mensaje(playerid, 5, "0", "Cancelaste el pedido, perdiste un punto de delincuente.");
				InfoJugador[playerid][jHabilidad1][3]--;
				guardar_int_mysql("cuentas", "Habilidad1_4", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][3]);
				return 1;
			}
			if (Pedido[playerid] != 0)
			{
				_Mensaje(playerid, 5, "0", "Cancelaste el pedido de drogas.");
				Pedido[playerid] = 0;
				return 1;
			}
			ShowInfoForPlayer(playerid, "No te encuentras en ningun pedido.", 2000);
		}
	} else _Mensaje(playerid, 3, "0", "/pedido [camion - drogas]");
	return 1;
}

CMD:engine(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowInfoForPlayer(playerid, "No eres el conductor.", 2000);
	if (!IsPlayerInAnyVehicle(playerid)) return ShowInfoForPlayer(playerid, "No estas en un vehiculo.", 2000);
	if (GetVehicleModel(vehicleid) == checkcoche[playerid])
	{
	    new engine, lights, alarm, doors, bonnet, boot, objective;
	    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	    if(engine == VEHICLE_PARAMS_ON) return _Mensaje(playerid, 4, "b00000", "El vehiculo ya se encuentra encendido.");

		new location[MAX_ZONE_NAME], Float: x, Float: y, Float: z, string[128];
		GetPlayerPos(playerid, x, y, z);
		Get2DZone(location, MAX_ZONE_NAME, x, y, z);
		SetTimerEx("EncenderVehiculo", 2500, 0, "dd", vehicleid, playerid);
		format(string, sizeof string, "CENTRAL: Informe reciente en %s, robo de un vehiculo %s.", location, GetVehicleName(vehicleid));
		SendRadioFaction(1, C_COLORPOLICIA, string);
		SendRadioFaction(3, C_COLORPOLICIA, string);

        TogglePlayerAllDynamicCPs(playerid, false);
		SetPVarInt(playerid, "EnCheckPoint", 6);
        if (checkcoche[playerid] == 414) SetPlayerCheckpoint(playerid, 956.7439, -1530.1982, 13.3456, 10.0);

		_Mensaje(playerid, 4, "0ED39E", " Ahora que posees el camion, ve directo al punto de entrega sin llamar la atencion.");

	} else return ShowInfoForPlayer(playerid, "No estas en un vehiculo para robar.", 2000);
	return 1;
}

CMD:ultimaconexion(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 2) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Ultimaconexion.", 2000);
	OnDuty
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/ultimaconexion [Nombre_Apellido]");
	if (VerificarCuenta(params))
	{
		new changeult[256];
		reg_string(0, "UltimaConexion", changeult, 256);
		cache_unset_active();
		SendClientMessageEx(playerid, -1, "%s se conecto por ultima vez: %s", params, changeult);
		return 1;
	}
	ShowInfoForPlayer(playerid, "Esa cuenta no existe.", 2000);
	return 1;
}

CMD:optiwand(playerid)
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	
	if (UsandoOptiwand[playerid] != -1)
	{
	    new id = UsandoOptiwand[playerid];
		SetPosEx(playerid, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ], InfoCasa[id][cEntradaR], InfoCasa[id][cEntradaInt], InfoCasa[id][cEntradaVW], 1);
		TogglePlayerControllable(playerid, true);
		SetCameraBehindPlayer(playerid);
		UsandoOptiwand[playerid] = -1;
		return 1;
	}
	if (InfoJugador[playerid][jManoDerecha] != 109) return ShowInfoForPlayer(playerid, "No tienes el optiwand en tu mano derecha.", 2000);
	Loop(h, totalcasas, 1) if (InfoCasa[h][cTipo] != 0 && EnEntradaCasa(playerid, h))
	{
		foreach(Player, i) if (GetPlayerVirtualWorld(i) == InfoCasa[h][cSalidaVW] && GetPlayerInterior(i) == InfoCasa[h][cSalidaInt]) GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~w~Escuchas un ruido muy extraño en la puerta", 4000, 3);
		AccionesRol(playerid, 0, "coloco el optiwand en la puerta de la casa y comenzo a manipularla.");
		SetPlayerCameraPos(playerid, InfoCasa[h][cSalidaX], InfoCasa[h][cSalidaY], InfoCasa[h][cSalidaZ]);
		SetPlayerInterior(playerid, InfoCasa[h][cSalidaInt]);
		SetPlayerVirtualWorld(playerid, InfoCasa[h][cSalidaVW]);
		if (InfoCasa[h][cSalidaX] == 255.4378) SetPlayerCameraLookAt(playerid, 257.1061,304.8510,999.1484, 0);
		if (InfoCasa[h][cSalidaX] == 2217.9070) SetPlayerCameraLookAt(playerid, 2214.8179,-1089.1539,1050.4844, 0);
		if (InfoCasa[h][cSalidaX] == 222.6111) SetPlayerCameraLookAt(playerid, 222.5809,1273.8151,1082.1406, 0);
		if (InfoCasa[h][cSalidaX] == 263.5031) SetPlayerCameraLookAt(playerid, 263.5275,1267.9364,1080.2578, 0);
		if (InfoCasa[h][cSalidaX] == 276.5541) SetPlayerCameraLookAt(playerid, 276.6017,1238.9812,1084.2578, 0);
		if (InfoCasa[h][cSalidaX] == 446.1162) SetPlayerCameraLookAt(playerid, 446.1162,1366.7433,1084.3120, 0);
		if (InfoCasa[h][cSalidaX] == 294.7744) SetPlayerCameraLookAt(playerid, 294.7744,1448.5236,1080.2578, 0);
		if (InfoCasa[h][cSalidaX] == -1.4793) SetPlayerCameraLookAt(playerid, -1.4793,1340.7427,1084.3750, 0);
		if (InfoCasa[h][cSalidaX] == 54.1827) SetPlayerCameraLookAt(playerid, 54.1827,1325.0161,1083.8594, 0);
		if (InfoCasa[h][cSalidaX] == 110.9865) SetPlayerCameraLookAt(playerid, 110.9865,1367.0673,1083.8623, 0);
		if (InfoCasa[h][cSalidaX] == 242.7206) SetPlayerCameraLookAt(playerid, 242.7206,1132.2473,1080.9922, 0);
		if (InfoCasa[h][cSalidaX] == 198.3604) SetPlayerCameraLookAt(playerid, 198.3604,1060.8588,1084.2101, 0);
		if (InfoCasa[h][cSalidaX] == 188.5331) SetPlayerCameraLookAt(playerid, 188.9374,1008.8438,1084.0117, 0);
		if (InfoCasa[h][cSalidaX] == 1298.8577) SetPlayerCameraLookAt(playerid, 1299.2650,-795.0789,1084.0078, 0);
		UsandoOptiwand[playerid] = h;
		SetPlayerPosEx(playerid, InfoCasa[h][cSalidaX], InfoCasa[h][cSalidaY], InfoCasa[h][cSalidaZ]-7.0);
		TogglePlayerControllable(playerid, false);
		return 1;
	}
	SendClientMessage(playerid, 0xCCCCCCFF, "* No estas en la entrada de ninguna casa.");
	return 1;
}

CMD:puntosderol(playerid, params[])
{
	new playerid2;
	if (sscanf(params, "u", playerid2)) return _Mensaje(playerid, 3, "0", "/puntosderol ID");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, -1, "ID Invalida.");
	if (!CercaDelWeon(3.5, playerid, playerid2)) return ShowInfoForPlayer(playerid, "La persona que seleccionaste no esta cerca tuyo.", 2000);
	SendClientMessageEx(playerid, 0xCCCC00FF, "%s tiene %d puntos de rol.", NombreJugador(playerid2), InfoJugador[playerid2][jPuntosRol]);
	return 1;
}

CMD:tickets(playerid)
{
	SendClientMessageEx(playerid, 0xCCCC00FF, "Tickets: %d", InfoJugador[playerid][jTickets]);
	return 1;
}

CMD:dartickets(playerid, params[]){
    if(InfoJugador[playerid][jEncarcelado] != 3) return ShowInfoForPlayer(playerid, "No te encuentras como prisionero.", 2000);
	if (sscanf(params, "ud", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/darticket id cantidad");
	if(InfoJugador[playerid][jTickets] >= params[1])
    {
		new s[128];
  		format(s, sizeof(s), "paso unos tickets a %s.", NombreJugador(params[0]));
 		AccionesRol(playerid, 0, s);
   		format(s, sizeof(s), "Has recibido %d tickets de %s.", params[1], NombreJugador(playerid));
   		_Mensaje(params[0], 2, "0", s);
        InfoJugador[playerid][jTickets] -= params[1];
        InfoJugador[params[0]][jTickets] += params[1];
		guardar_int_mysql("cuentas", "Tickets", InfoJugador[playerid][jID], InfoJugador[playerid][jTickets]);
		guardar_int_mysql("cuentas", "Tickets", InfoJugador[params[0]][jID], InfoJugador[params[0]][jTickets]);
    }
	return 1;
}
CMD:darticket(playerid, params[]) return cmd_dartickets(playerid, params);

CMD:darencrol(playerid, params[]) {
    new string[128], playerid2;
    if (InfoJugador[playerid][jAdmin] < 5) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Darencrol.", 2000);
    OnDuty
    if (!sscanf(params, "d", playerid2)) {
        if (IsPlayerConnected(playerid2)) {
            InfoJugador[playerid2][jEncargado][4] = 1;
			guardar_int_mysql("cuentas", "Encargado_5", InfoJugador[playerid2][jID], 1);
            format(string, sizeof string, " %s lo ha asignado encargado de rol.", NombreRJugador(playerid));
            _Mensaje(playerid2, 4, "33CCFF", string);
            format(string, sizeof string, "Administracion: %s ha asignado encargado de rol a %s", NombreRJugador(playerid), NombreRJugador(playerid2));
            MensajeAdmin(string);
            format(string, sizeof string, "Asigno encargado de rol a %s", NombreRJugador(playerid2));
            new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 4);
        } else ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
    } else _Mensaje(playerid, 3, "0", "/darencrol [id jugador]");
    return 1;
}

CMD:darpuntorol(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][4] == 0) return ShowInfoForPlayer(playerid, "No tienes permisos para este comando.", 2000);
	new string2[40];
	if (sscanf(params, "us[40]", params[0], string2)) return _Mensaje(playerid, 3, "0", "/darpuntorol [id jugador] [razon]");
	if (!IsPlayerConnected(params[0])) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
	new string[128];
	InfoJugador[params[0]][jPuntosRol]++;
	guardar_int_mysql("cuentas", "PuntosRol", InfoJugador[params[0]][jID], InfoJugador[params[0]][jPuntosRol]);
 	format(string, sizeof string, "Administracion: %s ha dado un punto de rol a %s. {E00000}Razon: %s", NombreRJugador(playerid), NombreRJugador(params[0]), string2);
 	MensajeAdmin(string);
 	format(string, sizeof string, " %s te dio un punto de rol, razon: %s", NombreRJugador(playerid), string2);
 	SendClientMessage(params[0], 0x33CCFFFF, string);
	format(string, sizeof string, "[+] Dio a %s. Razon: %s.", NombreRJugador(params[0]), string2);
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 8);
	return 1;
}

CMD:quitarpuntorol(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][4] == 0) return ShowInfoForPlayer(playerid, "No tienes permisos para este comando.", 2000);
	if (sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "/quitarpuntorol [id jugador]");
	if (!IsPlayerConnected(params[0])) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
	new string[128];
	InfoJugador[params[0]][jPuntosRol]--;
	guardar_int_mysql("cuentas", "PuntosRol", InfoJugador[params[0]][jID], InfoJugador[params[0]][jPuntosRol]);
 	format(string, sizeof string, "Administracion: %s ha removido un punto de rol a %s", NombreRJugador(playerid), NombreRJugador(params[0]));
 	MensajeAdmin(string);
 	format(string, sizeof string, " %s te removio un punto de rol.", NombreRJugador(playerid));
 	SendClientMessage(params[0], 0x33CCFFFF, string);
	format(string, sizeof string, "Le quito a %s un punto", NombreRJugador(params[0]));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 8);
	return 1;
}

CMD:minaraa(playerid)
{
	if (InfoJugador[playerid][jEncarcelado] != 3) return ShowInfoForPlayer(playerid, "No te encuentras como prisionero.", 2000);
	if (EnModoTrabajo[playerid] == 12)
	{
		if(_Minando[playerid] == 1) return ShowInfoForPlayer(playerid, "No puedes dejar de minar hasta que rompas esta roca.", 2000);
		EnModoTrabajo[playerid] = 0;
		if(InfoJugador[playerid][jPiedras] == 0) return _Mensaje(playerid, 5, "0", "Dejaste de minar.");
		else
		{
			InfoJugador[playerid][jTickets] += InfoJugador[playerid][jPiedras]/2;
			guardar_int_mysql("cuentas", "Tickets", InfoJugador[playerid][jID], InfoJugador[playerid][jTickets]);
			SendClientMessageEx(playerid, 0x0ED39EFF, "Terminaste. Entregaste un total de %d piedras, recibiste %d tickets.", InfoJugador[playerid][jPiedras], InfoJugador[playerid][jPiedras]/2);
			InfoJugador[playerid][jPiedras] = 0;
			guardar_int_mysql("cuentas", "Piedras", InfoJugador[playerid][jID], InfoJugador[playerid][jPiedras]);
			PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
		}
	}
	else
	{
		if (EnModoTrabajo[playerid] != 0) return SendClientMessageEx(playerid, 0xccccccff, "Estas trabajando como %s, termina la labor para empezar esto.", IsLaborJob(EnModoTrabajo[playerid]));
		EnModoTrabajo[playerid] = 12;
		SendClientMessageEx(playerid, 0x0ED39EFF, "Acercate a los pickups para empezar a minar.");
		PlayerTextDrawShow(playerid, TextTrabajo[playerid]);
	}
	return 1;
}

CMD:minar(playerid)
{
if (Es_job(playerid, 14))
	    {
	        if(_enPos(playerid, 4.0, -752.0788,-371.9366,1738.3269))
	        {
			    if(ConRoca[playerid] == 1) return ShowInfoForPlayer(playerid, "Ya tienes una roca en las manos, entragala en la procesadora.", 2000);
			    if(InfoJugador[playerid][jManoDerecha] != 137) return 1;
			    if(Picando[playerid] > 0) return 1;
			    TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "IsFrozen", 0);
				ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,20000,1);
				GameTextForPlayer(playerid, "~g~Picando ~w~Roca...", 30000, 3);
				Picando[playerid]++;
				hands[playerid] = SetTimerEx("TimeMiner",1000,true,"id",playerid, 1);
			}
			else if(_enPos(playerid, 4.0, 661.2281,135.7510,54.6579))
	        {
	            if(InfoJugador[playerid][jHabilidad2][8] < 2) return ShowInfoForPlayer(playerid, "No eres nivel 2 de minero para picar aqui.", 2000);
	            if(ConRoca[playerid] == 1) return ShowInfoForPlayer(playerid, "Ya tienes una roca en las manos, entragala en la procesadora.", 2000);
			    if(InfoJugador[playerid][jManoDerecha] != 137) return 1;
			    if(Picando[playerid] > 0) return 1;
			    TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "IsFrozen", 0);
				ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,20000,1);
				GameTextForPlayer(playerid, "~g~Picando ~w~Roca...", 30000, 3);
				Picando[playerid]++;
				hands[playerid] = SetTimerEx("TimeMiner",1000,true,"id",playerid, 2);
			}
			else if(_enPos(playerid, 4.0, 672.7699,155.8111,54.2593))
	        {
	            if(InfoJugador[playerid][jHabilidad2][8] < 3) return ShowInfoForPlayer(playerid, "No eres nivel 3 de minero para picar aqui.", 2000);
	            if(ConRoca[playerid] == 1) return ShowInfoForPlayer(playerid, "Ya tienes una roca en las manos, entragala en la procesadora.", 2000);
			    if(InfoJugador[playerid][jManoDerecha] != 137) return 1;
			    if(Picando[playerid] > 0) return 1;
			    TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "IsFrozen", 0);
				ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,20000,1);
				GameTextForPlayer(playerid, "~g~Picando ~w~Roca...", 30000, 3);
				Picando[playerid]++;
				hands[playerid] = SetTimerEx("TimeMiner",1000,true,"id",playerid, 3);
			}
			else if(_enPos(playerid, 4.0, -761.4437,-402.4356,1736.7665))
	        {
	            if(InfoJugador[playerid][jHabilidad2][8] < 3) return ShowInfoForPlayer(playerid, "No eres nivel 3 de minero para picar aqui.", 2000);
	            if(ConRoca[playerid] == 1) return ShowInfoForPlayer(playerid, "Ya tienes una roca en las manos, entragala en la procesadora.", 2000);
			    if(InfoJugador[playerid][jManoDerecha] != 137) return 1;
			    if(Picando[playerid] > 0) return 1;
			    TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "IsFrozen", 0);
				ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,20000,1);
				GameTextForPlayer(playerid, "~g~Picando ~w~Roca...", 30000, 3);
				Picando[playerid]++;
				hands[playerid] = SetTimerEx("TimeMiner",1000,true,"id",playerid, 3);
			}
		}
return 1;
}

CMD:tban(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] >= 3 || InfoJugador[playerid][jEncargado][3] == 1)
	{
		new playerid2, razon[190], minutos, query3[1028], string[512];
		if (sscanf(params, "iis[128]", playerid2, minutos, razon)) return _Mensaje(playerid, 3, "0", "/tban (JugadorID) (Minutos) (Razon)");
		if (!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "El jugador que indicaste no se encuentra conectado.", 2000);
		if (minutos < 1 || minutos > 2880) { ShowInfoForPlayer(playerid, "El tiempo minimo es de 1 minuto y el maximo 2880 (48 hs)", 2000); return 1; }
		format(string, sizeof string, "Administracion: %s fue expulsado %d minutos por %s, Razon:[%s]", NombreRJugador(playerid2), minutos, NombreRJugador(playerid), razon);
		_MensajeOOC(0xFF6347FF, string);
		new k = gettime(), elpru[30];
		alm(elpru, "0");
		minutos *= 60;
		k += minutos;
		format(elpru, sizeof(elpru), "%d", k);
		mysql_format(DBngrp, query3, sizeof query3, "UPDATE cuentas SET Baneado = 10, Ban_t = '%e', Ban_c = '%e', Ban_r = '%e', Ban_m = '%e', JuegaleOwo = 0 WHERE ID = '%d'", elpru, NombreRJugador(playerid), razon, FechaHoy(), InfoJugador[playerid2][jID]);
		mysql_tquery(DBngrp, query3);
		_Expulsar(playerid2, 0, "Baneo temporal");
	}
	return 1;
}

MuestraBloqueoCuenta(playerid)
{
	new string[1028];
	switch (InfoJugador[playerid][jBaneado])
	{
		case 10: //temporal
		{
			if (InfoJugador[playerid][jBan_t] < gettime())
			{
				SendClientMessage(playerid, -1, "El bloqueo ha terminado, ya puedes ingresar.");
				InfoJugador[playerid][jBan_t] = 0;
				InfoJugador[playerid][jBaneado] = 0;
				new list[32];
				alm(list, "ninguno");
				mysql_format(DBngrp, string, sizeof string, "UPDATE cuentas SET Baneado = 0, Ban_t = 0, Ban_c = '%e', Ban_r = '%e', Ban_m = '%e' WHERE ID = '%d'", list, list, list, InfoJugador[playerid][jID]);
				mysql_tquery(DBngrp, string);
				SetPlayerInterior(playerid, InfoJugador[playerid][jInterior]);
				SetPlayerVirtualWorld(playerid, InfoJugador[playerid][jVirtualWorld]);
				usuario_registro[playerid] = 1;
				CargarCuenta(playerid);
			}
			else
			{
				format(string, sizeof string, "{FFFFFF}Cuenta: {FF0000}%s\n\n{FFFFFF}Encargado: {FFBF00}%s\n{FFFFFF}Razon: {FF0000}%s\n{FFFFFF}Fecha: {FF0000}%s\n{FFFFFF}Tiempo: {FF0000}%s\n",
				InfoJugador[playerid][jNombre_Apellido], InfoJugador[playerid][jBan_c], InfoJugador[playerid][jBan_r], InfoJugador[playerid][jBan_m], Segundos_tiempo(InfoJugador[playerid][jBan_t] - gettime()));
				Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Bloqueo temporal", string, "", "");
				Expulsar(playerid, 2);
			}
		}
		case 20: //permanente
		{
			format(string, sizeof string, "{FFFFFF}Cuenta: {FF0000}%s\n\n{FFFFFF}Encargado: {FFBF00}%s\n{FFFFFF}Razon: {FF0000}%s\n{FFFFFF}Fecha: {FF0000}%s\n",
			InfoJugador[playerid][jNombre_Apellido], InfoJugador[playerid][jBan_c], InfoJugador[playerid][jBan_r], InfoJugador[playerid][jBan_m]);
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Bloqueo", string, "", "");
			Expulsar(playerid, 2);
		}
		default: //limpio
		{
			Kick(playerid);
		}
	}
	return 1;
}

stock GetMonth(Month)
{
    new MonthStr[15];
    switch(Month)
    {
        case 1:  MonthStr = "Enero";
        case 2:  MonthStr = "Febrero";
        case 3:  MonthStr = "Marzo";
        case 4:  MonthStr = "Abril";
        case 5:  MonthStr = "Mayo";
        case 6:  MonthStr = "Junio";
        case 7:  MonthStr = "Julio";
        case 8:  MonthStr = "Agosto";
        case 9:  MonthStr = "Septiembre";
        case 10: MonthStr = "Octubre";
        case 11: MonthStr = "Noviembre";
        case 12: MonthStr = "Diciembre";
    }
    return MonthStr;
}

GetWeekDay(day=0, month=0, year=0)
{
    if (!day)
    getdate(year, month, day);
    new weekday_str[12],j,e;
    if (month <= 2)
    {
        month += 12;
        --year;
    }
    j = year % 100;
    e = year / 100;
    switch ((day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7)
    {
        case 0: weekday_str = "Sabado";
        case 1: weekday_str = "Domingo";
        case 2: weekday_str = "Lunes";
        case 3: weekday_str = "Martes";
        case 4: weekday_str = "Miercoles";
        case 5: weekday_str = "Jueves";
        case 6: weekday_str = "Viernes";
    }
    return weekday_str;
}

//-
funcion _robo(playerid, tipo, d_ran)
{
	if (tipo == 1)
	{
		if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas, guarda lo que tienes o tiralo.", 2000); return 1;}
	    switch(d_ran)
		{
			case 0:
			{
				new _obj=121;
				if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, _obj); InfoJugador[playerid][jManoDerecha] = _obj, InfoJugador[playerid][jManoDerechaCant] = 1;}
				else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, _obj); InfoJugador[playerid][jManoIzquierda] = _obj, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
				_Mensaje(playerid, 4, "0ED39E", " Lograste tomar un telefono, sal rapido del local.");
			}
			case 1:
			{
				new _obj=95;
				if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, _obj); InfoJugador[playerid][jManoDerecha] = _obj, InfoJugador[playerid][jManoDerechaCant] = 1;}
				else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, _obj); InfoJugador[playerid][jManoIzquierda] = _obj, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
				_Mensaje(playerid, 4, "0ED39E", " Lograste tomar una botella de agua, sal rapido del local.");
			}
			case 2:
			{
				new _obj=91;
				if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, _obj); InfoJugador[playerid][jManoDerecha] = _obj, InfoJugador[playerid][jManoDerechaCant] = 1;}
				else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, _obj); InfoJugador[playerid][jManoIzquierda] = _obj, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
				_Mensaje(playerid, 4, "0ED39E", " Lograste tomar una bolsa de patatas, sal rapido del local.");
			}
			case 3:
			{
				new _obj=83;
				if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, _obj); InfoJugador[playerid][jManoDerecha] = _obj, InfoJugador[playerid][jManoDerechaCant] = 1;}
				else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, _obj); InfoJugador[playerid][jManoIzquierda] = _obj, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
				_Mensaje(playerid, 4, "0ED39E", " Lograste tomar unos dados, sal rapido del local.");
			}
			case 4:
			{
				new _obj=92;
				if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, _obj); InfoJugador[playerid][jManoDerecha] = _obj, InfoJugador[playerid][jManoDerechaCant] = 1;}
				else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, _obj); InfoJugador[playerid][jManoIzquierda] = _obj, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
				_Mensaje(playerid, 4, "0ED39E", " Lograste tomar una bolsa de nachos, sal rapido del local.");
			}
		}
	}
	ActualizarManos(playerid);
	if (InfoJugador[playerid][jHabilidad1][3] < 12) InfoJugador[playerid][jHabilidad1][3]++;
	InfoJugador[playerid][jTiempos][16] = 10;
	guardar_int_mysql("cuentas", "Tiempos17", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][16]);
	guardar_int_mysql("cuentas", "Habilidad1_4", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][3]);
	DeletePVar(playerid, "Congelado");
	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid);
	return 1;
}

CMD:asaltar(playerid)
{
	if (!Es_job(playerid, 2)) return ShowInfoForPlayer(playerid, "No eres delicuente.", 2000);
	new id = EnNegocio(playerid);
	if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
	if (!_enPos(playerid, 40.0, -23.4566, -55.6323, 1003.5469) || (GetPlayerVirtualWorld(playerid) < 300)) return ShowInfoForPlayer(playerid, "No te encuentras dentro de un 24/7.", 2000);
	if (_D2negocio(playerid, 7.5)) return _Mensaje(playerid, 5, "0", "Estas a simple vista, intenta tomar un objeto desde otro punto.");
	if (InfoJugador[playerid][jTiempos][16] > 0) { SendClientMessageEx(playerid, -1, "* Debes esperar %d minutos para hacer alguna accion ilegal.", InfoJugador[playerid][jTiempos][16]); return 1; }
	new d_ran = random(5), string[250];
	TogglePlayerControllable(playerid, 0);
	SetPVarInt(playerid, "Congelado", 1);
	GameTextForPlayer(playerid,"~n~~n~~n~~n~~w~tomando ~p~objeto...",4000,3);
	SetTimerEx("_robo", 3000, false, "iii", playerid, InfoNegocio[id][nTipo], d_ran);
	ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 1, 1, 1, 1);
	ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 1, 1, 1, 1);
 	new location[70];
	Get2DZone(location, MAX_ZONE_NAME, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ]);
	_Mensaje(playerid, 4, "FFEA5F", "Una persona te ha visto robar y ha llamado a la policia.");
	format(string, sizeof string, "CENTRAL: Un anonimo ha denunciado que se esta cometiendo un robo a una tienda en %s.", location);
	SendRadioFaction(1, C_COLORPOLICIA, string);
	SendRadioFaction(2, C_COLORPOLICIA, string);
	SendRadioFaction(3, C_COLORPOLICIA, string);
	return 1;
}

CMD:revisar(playerid, params[])
{
	if (!Es_Banda(playerid, 1, 2, 3) && (InfoJugador[playerid][jHabilidad1][3] < 11)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~g~USMC ~g~o ~r~Ladron.", 2000);
	if (GetPVarInt(playerid, "EnCrack") == 1) return ShowInfoForPlayer(playerid, "No puedes usar este comando mientras estas herido.", 2000);
	new playerid2, MsgCheckMe[MAX_TEXT_CHAT];
	if (sscanf(params, "u", playerid2)) return _Mensaje(playerid, 3, "0", "/revisar [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
	if (!CercaDelWeon(3.0, playerid, playerid2)) return ShowInfoForPlayer(playerid, "Jugador esta muy lejos.", 2000);
	Revisar_Bolsillos(playerid, playerid2);
	format(MsgCheckMe, sizeof(MsgCheckMe), "revisa a %s para encontrar algo.", NombreJugador(playerid2));
	AccionesRol(playerid, 0, MsgCheckMe);
	return 1;
}
CMD:cachear(playerid, params[]) return cmd_revisar(playerid, params);

CMD:requisar(playerid, params[])
{
	if(!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (GetPVarInt(playerid, "EnCrack") == 1) return ShowInfoForPlayer(playerid, "No puedes usar este comando mientras estas herido.", 2000);
	new playerid2, MsgCheckMe[MAX_TEXT_CHAT];
	if (sscanf(params, "u", playerid2)) return _Mensaje(playerid, 3, "0", "/revisar [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
	if (!CercaDelWeon(3.0, playerid, playerid2)) return ShowInfoForPlayer(playerid, "Jugador esta muy lejos.", 2000);
	Loop(i, 9, 0)
	{
		if (EsArma(InfoJugador[playerid2][jBolsillo][i]) || EsDroga(InfoJugador[playerid2][jBolsillo][i]) || EsCargador(InfoJugador[playerid2][jBolsillo][i]) && InfoJugador[playerid2][jBolsilloCant][i] > 0)
		{
		    InfoJugador[playerid2][jBolsillo][i] = 0;
		    InfoJugador[playerid2][jBolsilloCant][i] = 0;
		}
	}
 	QuitarArmas(playerid2);
 	ResetPlayerWeapons(playerid2);
	ActualizarArmas(playerid2);
	SendClientMessageEx(playerid2, 0xccccccFF, "Info: {FFFFFF}%s te retiro todo lo ilegal que tenias en tus bolsillos.", NombreRJugador(playerid));
	format(MsgCheckMe, sizeof MsgCheckMe, "retiro todo lo ilegal de los bolsillos de %s.", NombreJugador(playerid2));
	AccionesRol(playerid, 0, MsgCheckMe);
	return 1;
}

CMD:fuerza(playerid, params[])
{
	new _txt[128];
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/fuerza [id jugador]");
	if (IsPlayerConnected(params[0]) && CercaDelWeon(2.0, playerid, params[0])) {
		format(_txt, sizeof(_txt), " (%s) - Habilidad de fuerza: {b00000}%d{b0b0b0}.", NombreJugador(playerid), InfoJugador[playerid][jFuerza]);
		_Mensaje(params[0], 4, "FFFFFF", _txt);
	} else ShowInfoForPlayer(playerid, "Jugador no conectado o esta muy lejos.", 2000);
	return 1;
}
CMD:delincuente(playerid, params[])
{
	new _txt[128];
	if (!Es_job(playerid, 2, 5)) return ShowInfoForPlayer(playerid, "No eres delincuente.", 2000);
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/delincuente [id jugador]");
	if (IsPlayerConnected(params[0]) && CercaDelWeon(2.0, playerid, params[0])) {
		format(_txt, sizeof(_txt), " (%s) - Habilidad de delincuente: {b00000}%d{b0b0b0}.", NombreJugador(playerid), InfoJugador[playerid][jHabilidad1][3]);
		_Mensaje(params[0], 4, "FFFFFF", _txt);
	} else ShowInfoForPlayer(playerid, "Jugador no conectado o esta muy lejos.", 2000);
	return 1;
}

CMD:staff(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 1) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Staff.", 2000);
	SetPosEx(playerid, 1382.8690,2183.9548,11.0234,134.5759, 0, 0, 1);
	return 1;
}

CMD:borrarcarga(playerid)
{
	if (!Es_job(playerid, 4)) return ShowInfoForPlayer(playerid, "No eres camionero.", 2000);

	DeletePVar(playerid, "TipoCarga");
	_CamVeh[playerid] = INVALID_VEHICLE_ID;
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	DisablePlayerCheckpoint(playerid);
	_Mensaje(playerid, 4, "b00000", "Carga cancelada.");

	return 1;
}

CMD:transportar(playerid)
{
	if (!Es_job(playerid, 4)) return ShowInfoForPlayer(playerid, "No eres camionero.", 2000);
	if(!_enPos(playerid,10.0, 1710.1189,770.0330,10.8203)) return ShowInfoForPlayer(playerid, "Debes estar en la zona de carga de camionero.", 2000);
	if (InfoJugador[playerid][jTiempos][9] == 5) return ShowInfoForPlayer(playerid, "Ya has realizado 5 entregas, espera el proximo pago diario.", 2000);
	if (GetPVarInt(playerid, "TipoCarga") > 0) return ShowInfoForPlayer(playerid, "Ya usaste /transportar, escribe /borrarcarga.", 2000);
	new vehiculo = GetPlayerVehicleID(playerid);
	if (!Camionero_Vehicle(vehiculo)) return ShowInfoForPlayer(playerid, "Debes estar dentro de un vehiculo de camionero.", 2000);
	if(GetVehicleModel(vehiculo) == 413)
	{
		DisablePlayerCheckpoint(playerid);
		TogglePlayerControllable(playerid, 0);
		SetPVarInt(playerid, "Congelado", 1);
		new listitem = random(4);
		if(listitem == 0) SetPVarInt(playerid, "TipoCarga", 1);
		else if(listitem == 1) SetPVarInt(playerid, "TipoCarga", 2);
		else if(listitem == 2) SetPVarInt(playerid, "TipoCarga", 3);
		else if(listitem == 3) SetPVarInt(playerid, "TipoCarga", 4);
		GameTextForPlayer(playerid,"~w~cargando ~g~camion...",10000,3);
		SetTimerEx("_Encargo", 10000, false, "i", playerid);
	} else if(GetVehicleModel(vehiculo) == 456) {
		if(InfoJugador[playerid][jHabilidad2][0] <= 2)
		{
			RemovePlayerFromVehicle(playerid);
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPosEx(playerid, X, Y+2, Z);
			ShowInfoForPlayer(playerid, "No tienes el nivel de habilidad (3).", 2000);
			return 1;
		}
		DisablePlayerCheckpoint(playerid);
		TogglePlayerControllable(playerid, 0);
		SetPVarInt(playerid, "Congelado", 1);
		SetPVarInt(playerid, "TipoCarga", 5);
		GameTextForPlayer(playerid,"~w~cargando ~g~camion...",12000,3);
		SetTimerEx("_Encargo", 12000, false, "i", playerid);
	}
	return 1;
}

CMD:transferir(playerid)
{
	if (!_Telefono(playerid)) return ShowInfoForPlayer(playerid, "No tienes un telefono en ninguna mano.", 2000);
	if (InfoJugador[playerid][jHorasConectado] < 2) return ShowInfoForPlayer(playerid, "Debes jugar al menos dos horas para poder transferir dinero.", 2000);
	Dialog_Show(playerid, Show_Transferir_Bank, DIALOG_STYLE_INPUT, "Transferir dinero", "Introduce primero el 'Nombre_Apellido' del jugador que deseas dar dinero:", "Continuar", "Salir");
	return 1;
}

CMD:borrar(playerid)
{
	if (InfoJugador[playerid][jManoDerecha] == 0 && InfoJugador[playerid][jManoIzquierda] == 0) { ShowInfoForPlayer(playerid, "No tienes nada en ninguna mano.", 2000); return 1; }
	if (!_enPos(playerid, 4.0, 229.5383, 182.3108, 1002.9111) && !_enPos(playerid, 4.0, 260.7723,71.0477,1003.2422) && !_enPos(playerid, 4.0, -420.6046, 675.0458, 3856.5835) && !_enPos(playerid, 4.0, 202.2707,1873.5331,13.1406)) return ShowInfoForPlayer(playerid, "No estas en el lugar de borrado.", 2000);
	QuitarManos(playerid);
	_Mensaje(playerid, 4, "A7CE00", "Has incautado los objetos que tenias en manos.");
    return 1;
}

CMD:estilo(playerid, params[])
{
    new estilo, access = 1;
    if (sscanf(params, "d", estilo)) return _Mensaje(playerid, 3, "0", "/estilo [1-12]");
    switch (estilo)
	{
        case 1: _Mensaje(playerid, 5, "0", "Has cambiado el estilo de caminar a Normal.");
        case 2: _Mensaje(playerid, 5, "0", "Has cambiado el estilo de caminar a Pandillero.");
        case 3: _Mensaje(playerid, 5, "0", "Has cambiado el estilo de caminar a Pandillero2.");
        case 4: _Mensaje(playerid, 5, "0", "Has cambiado el estilo de caminar a Anciano.");
        case 5: _Mensaje(playerid, 5, "0", "Has cambiado el estilo de caminar a Anciano-Gordo.");
        case 6: _Mensaje(playerid, 5, "0", "Has cambiado el estilo de caminar a Gordo.");
        case 7: _Mensaje(playerid, 5, "0", "Has cambiado el estilo de caminar a Mujer.");
        case 8: _Mensaje(playerid, 5, "0", "Has cambiado el estilo de caminar a Mujer2.");
        case 9: _Mensaje(playerid, 5, "0", "Has cambiado el estilo de caminar a Sexi.");
        case 10: _Mensaje(playerid, 5, "0", "Has cambiado el estilo de caminar a Sexi2.");
        case 11: _Mensaje(playerid, 5, "0", "Has cambiado el estilo de caminar a Hebrio.");
        case 12: _Mensaje(playerid, 5, "0", "Has cambiado el estilo de caminar a Ciego.");
        default: _Mensaje(playerid, 3, "0", "/estilo [1-12]"), access = 0;
    }
	if (access != 0)
	{
		InfoJugador[playerid][jEstilo] = estilo;
		Caminar(playerid);
		guardar_int_mysql("cuentas", "Estilo", InfoJugador[playerid][jID], InfoJugador[playerid][jEstilo]);
	}
	return 1;
}

CMD:paquete(playerid, params[]) {
    new string[256];
    if (sscanf(params, "s[20]", params[0])) return _Mensaje(playerid, 3, "0", "/paquete [sacar - guardar]");
    if (!strcmp(params[0], "sacar", true)) {
        if (!TienePaquete(playerid, 1) && !TienePaquete(playerid, 2)) { ShowInfoForPlayer(playerid, "No tienes ningun paquete en ninguna mano.", 2000); return 1; }
        if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0) { ShowInfoForPlayer(playerid, "Debes tener una mano vacia.", 2000); return 1; }
        if (TienePaquete(playerid, 1)) {
            new objeto = TienePaquete(playerid, 1);
            InfoJugador[playerid][jManoDerechaCant] -= InfoInventario[objeto][Capacidad];
            InfoJugador[playerid][jManoIzquierda] = objeto, PonerObjeto(playerid, 2, objeto);
            InfoJugador[playerid][jManoIzquierdaCant] = InfoInventario[objeto][Capacidad];
            format(string, sizeof string, "%s saco un(a) %s del paquete.", NombreJugador(playerid), InfoInventario[objeto][NombreObjeto]);
            ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
            ActualizarManos(playerid);
            return 1;
        } else if (TienePaquete(playerid, 2)) {
            new objeto = TienePaquete(playerid, 2);
            InfoJugador[playerid][jManoIzquierdaCant] -= InfoInventario[objeto][Capacidad];
            InfoJugador[playerid][jManoDerecha] = objeto, PonerObjeto(playerid, 1, objeto);
            InfoJugador[playerid][jManoDerechaCant] = InfoInventario[objeto][Capacidad];
            format(string, sizeof string, "%s saco un(a) %s del paquete.", NombreJugador(playerid), InfoInventario[objeto][NombreObjeto]);
            ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
            ActualizarManos(playerid);
            return 1;
        }
    } else if (!strcmp(params[0], "guardar", true)) {
        if (!TienePaquete(playerid, 1) && !TienePaquete(playerid, 2)) { ShowInfoForPlayer(playerid, "No tienes ningun paquete en ninguna mano.", 2000); return 1; }
        if (TienePaquete(playerid, 1)) {
            new objeto = TienePaquete(playerid, 1);
            if(InfoJugador[playerid][jManoDerecha] != objeto && InfoJugador[playerid][jManoIzquierda] != objeto){ ShowInfoForPlayer(playerid, "Tienes una droga diferente del paquete.", 2000); return 1;}
            InfoJugador[playerid][jManoDerechaCant] += InfoJugador[playerid][jManoIzquierdaCant];
            InfoJugador[playerid][jManoIzquierda] = 0;
            InfoJugador[playerid][jManoIzquierdaCant] = 0;
            format(string, sizeof string, "%s guardo un(a) %s en el paquete.", NombreJugador(playerid), InfoInventario[objeto][NombreObjeto]);
            ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
            ActualizarManos(playerid);
            return 1;
        } else if (TienePaquete(playerid, 2)) {
            new objeto = TienePaquete(playerid, 2);
            if(InfoJugador[playerid][jManoDerecha] != objeto && InfoJugador[playerid][jManoIzquierda] != objeto){ ShowInfoForPlayer(playerid, "Tienes una droga diferente del paquete.", 2000); return 1;}
            InfoJugador[playerid][jManoIzquierdaCant] += InfoJugador[playerid][jManoDerechaCant];
            InfoJugador[playerid][jManoDerecha] = 0;
            InfoJugador[playerid][jManoDerechaCant] = 0;
            format(string, sizeof string, "%s guardo un(a) %s en el paquete.", NombreJugador(playerid), InfoInventario[objeto][NombreObjeto]);
            ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
            ActualizarManos(playerid);
            return 1;
        }
    }
    return 1;
}

CMD:limpiarmaletero(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 5) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Limpiarmaletero.", 2000);
	OnDuty
	new vehicleid;
	if (sscanf(params, "d", vehicleid)) return _Mensaje(playerid, 3, "0", "/limpiarmaletero (VehiculoID) [el de /dl]");
	if (vehicleid < 1 || vehicleid > 1999) return SendClientMessage(playerid, 0xccccccff, "El vehiculo seleccionado no es de ningun usuario o no existe. (2)");
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vDL] == vehicleid)
	{
		if (InfoVehiculo[id][vModelo] == 0) return SendClientMessage(playerid, 0xccccccff, "Vehiculo seleccionado no tiene modelo.");
		new count = 0;
		Loop(x, 15, 0) if (InfoVehiculo[id][vMaletero][x] != 0)
		{
			count++;
			new dex_query[170];
			InfoVehiculo[id][vMaletero][x] = 0;
			InfoVehiculo[id][vMaleteroCantidad][x] = 0;
			mysql_format(DBngrp, dex_query, sizeof dex_query, "UPDATE vehiculos SET Maletero%d = 0, MaleteroCantidad%d = 0 WHERE ID = '%d'", x+1, x+1, InfoVehiculo[id][vID]);
			mysql_tquery(DBngrp, dex_query);
		}
		if (count == 0) return SendClientMessageEx(playerid, 0xccccccff, "No hay nada que limpiar del vehiculo %s.", GetNameVehicle(InfoVehiculo[id][vModelo]));
		SendClientMessageEx(playerid, -1, "Limpias %d objetos del vehiculo %s.", count, GetNameVehicle(InfoVehiculo[id][vModelo]));
		return 1;
	}
	SendClientMessage(playerid, 0xccccccff, "El vehiculo seleccionado no existe o no tiene registro.");
	return 1;
}

CMD:darhabilidad(playerid, params[])
{
	new string[128];
	if (InfoJugador[playerid][jAdmin] < 5) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Darhabilidad.", 2000);
	OnDuty
	if (sscanf(params, "dd", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/darhabilidad [id jugador] [trabajo]");
	if (!IsPlayerConnectedEx(params[0])) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
	if (params[1] < 0 || params[1] > 9) { ShowInfoForPlayer(playerid, "La ranura debe estar entre 0 y 9.", 2000); return 1; }
	InfoJugador[params[0]][jHabilidad1][params[1]] += 50;
	new gds[32];
	format(gds, sizeof gds, "Habilidad1_%d", params[1]+1);
	guardar_int_mysql("cuentas", gds, InfoJugador[params[0]][jID], InfoJugador[params[0]][jHabilidad1][params[1]]);
	format(string, sizeof string, "Administracion: %s utilizo /darhabilidad, Jugador: %s[%d].", NombreRJugador(playerid), NombreRJugador(params[0]),params[0]);
	MensajeAdmin(string);
	return 1;
}

CMD:darhabilidad2(playerid, params[])
{
	new string[210];
	if (InfoJugador[playerid][jAdmin] < 5) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Darhabilidad2.", 2000);
	OnDuty
	if (sscanf(params, "ddd", params[0], params[1], params[2])) return _Mensaje(playerid, 3, "0", "/darhabilidad2 [idjugador] [trabajo] [nivel]");
	if (!IsPlayerConnectedEx(params[0])) return ShowInfoForPlayer(playerid, "Jugador no conectado.", 2000);
	if (params[1] < 0 || params[1] > 9) { ShowInfoForPlayer(playerid, "La ranura debe estar entre 0 y 9.", 2000); return 1; }
	InfoJugador[params[0]][jHabilidad2][params[1]] = params[2];
	new gds[32];
	format(gds, sizeof gds, "Habilidad2_%d", params[1]+1);
	guardar_int_mysql("cuentas", gds, InfoJugador[params[0]][jID], InfoJugador[params[0]][jHabilidad2][params[1]]);
	format(string, sizeof string, "Administracion: %s utilizo /darhabilidad2, Jugador %s[%d].", NombreRJugador(playerid), NombreRJugador(params[0]), params[0]);
	MensajeAdmin(string);
	return 1;
}

CMD:telefono(playerid, params[])
{
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowInfoForPlayer(playerid, "No puedes usar este comando en este momento.", 2000);
    if (GetPVarInt(playerid, "EnEvento") == 1) return ShowInfoForPlayer(playerid, "No puedes usar este comando en un evento.", 2000);
	if (InfoJugador[playerid][jTelefono] == 0 || InfoJugador[playerid][jTelefono] == -1) return ShowInfoForPlayer(playerid, "No tienes numero de telefono, consigue uno en un 24-7 o tienda electronica.", 2000);
	if (!_Telefono(playerid)){ShowInfoForPlayer(playerid, "No tienes un telefono en ninguna mano.", 2000); return 1;}
	if (B_Telefono[playerid] == 0) Dialog_Show(playerid, Telefono_Opciones, DIALOG_STYLE_LIST, "{D6E1EB}Menu telefonico", "{00c200}Telefono encendido{ffffff}\nLlamadas\nContactos\nMensajes\nConsultar saldo\nMusica\nTransferir dinero\nWhatsapp\nUber\nTrabajos disponibles", "Continuar", "Salir");
    else Dialog_Show(playerid, Telefono_Opciones, DIALOG_STYLE_LIST, "{D6E1EB}Menu telefonico", "{ff0000}Telefono apagado{ffffff}\nLlamadas\nContactos\nMensajes\nConsultar saldo\nMusica\nTransferir dinero\nWhatsapp\nUber\nTrabajos disponibles", "Continuar", "Salir");
    return 1;
}
CMD:t(playerid, params[]) return cmd_telefono(playerid, params);

CMD:minumero(playerid)
{
	if (InfoJugador[playerid][jTelefono] == 0 || InfoJugador[playerid][jTelefono] == -1) return ShowInfoForPlayer(playerid, "No tienes numero de telefono, consigue uno en un 24-7 o tienda electronica.", 2000);
    new string[210];
    format(string, sizeof string, "Tu numero de telefono es: {00c200}%d", InfoJugador[playerid][jTelefono]);
    SendClientMessage(playerid, -1, string);
    return 1;
}


Dialog:Telefono_Opciones(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch(listitem)
	{
		case 0:
		{
			if (!B_Telefono[playerid]) { B_Telefono[playerid] = 1,_Mensaje(playerid, 2, "0", "Telefono {ff0000}apagado{ffffff}, no recibiras llamadas ni mensajes.");
			} else B_Telefono[playerid] = 0, _Mensaje(playerid, 2, "0", "Telefono {00c200}encendido{ffffff}, ahora podras recibir llamadas y mensajes.");
		}
		case 1: ShowPlayerDialog(playerid, D_TELEFONO2, DIALOG_STYLE_LIST, "{D6E1EB}Llamadas", "Llamar\nRegistros", "Seleccionar", "Inicio");
		case 2: _Agenda(playerid);
		case 3: ShowPlayerDialog(playerid, D_TELEFONO4, DIALOG_STYLE_LIST, "{D6E1EB}Mensajes", "Enviar mensaje\nBuzon de mensajes", "Seleccionar", "Inicio");
		case 4: cmd_saldo(playerid);
		case 5:
		{
			new StationsDialog[2500];
			strcat(StationsDialog, "{F50000}||\t{F50000}Detener musica\t{F50000}||\n");
			strcat(StationsDialog, "{00C200}1\t{FFFFFF}NG.estacion Electronica\t{00A2FF}Electro\n");
			strcat(StationsDialog, "{00C200}2\t{FFFFFF}NG.estacion Electronica 2\t{00A2FF}Variado\n");
			strcat(StationsDialog, "{00C200}3\t{FFFFFF}NG.estacion Electronica 3\t{00A2FF}Dubstep\n");
			strcat(StationsDialog, "{00C200}4\t{FFFFFF}NG.estacion Rock\t{00A2FF}Reggaeton\n");
			strcat(StationsDialog, "{00C200}5\t{FFFFFF}NG.estacion Rock 2\t{00A2FF}Reggaeton\n");
			strcat(StationsDialog, "{00C200}6\t{FFFFFF}NG.estacion Rock 3\t{00A2FF}Classic rock\n");
			strcat(StationsDialog, "{00C200}7\t{FFFFFF}NG.estacion 4\t{00A2FF}Classic rock\n");
			strcat(StationsDialog, "{00C200}8\t{FFFFFF}NG.estacion Tropical\t{00A2FF}Heavy Metal\n");
			strcat(StationsDialog, "{00C200}9\t{FFFFFF}NG.estacion Reggaeton\t{00A2FF}Rock\n");
			strcat(StationsDialog, "{00C200}10\t{FFFFFF}NG.estacion Reggaeton 2\t{00A2FF}Punk\n");
			strcat(StationsDialog, "{00C200}11\t{FFFFFF}NG.estacion Reggaeton 3\t{00A2FF}Electronic\n");
			strcat(StationsDialog, "{00C200}12\t{FFFFFF}NG.estacion Hip-Hop\t{00A2FF}Hip Hop\n");
			strcat(StationsDialog, "{00C200}13\t{FFFFFF}NG.estacion Hip-Hop 2\t{00A2FF}Pop\n");
			strcat(StationsDialog, "{00A2FF}?\t{FFFFFF}URL Internet");
			ShowPlayerDialog(playerid, D_TELEFONO7, DIALOG_STYLE_LIST, "{00C200}Radios", StationsDialog, "Continuar", "Salir");
			AccionesRol(playerid, 0, "selecciona una musica del menu de su telefono.");
			MusicaEsc[playerid] = 0;
		}
		case 6: cmd_transferir(playerid);
		case 7: cmd_wp(playerid,"");
		case 8: ShowPlayerDialog(playerid, D_TELEFONOUBER, DIALOG_STYLE_MSGBOX, "{D6E1EB}Uber", "Bienvenido a UBER\nPresiona aceptar para llamar una unidad del servicio UBER", "Aceptar", "Volver");
		case 9: cmd_empleos(playerid);
	}
	return 1;
}

CMD:caja(playerid, params[]) {
    new string[256];
    if (sscanf(params, "s[20]", params[0])) return _Mensaje(playerid, 3, "0", "/Caja [sacar - guardar]");
    if (!strcmp(params[0], "sacar", true)) {
        if (!TieneCaja(playerid, 1) && !TieneCaja(playerid, 2)) { ShowInfoForPlayer(playerid, "No tienes una caja en ninguna mano.", 2000); return 1; }
        if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0) { ShowInfoForPlayer(playerid, "Debes tener una mano vacia.", 2000); return 1; }
        if (TieneCaja(playerid, 1)) {
            new objeto = TieneCaja(playerid, 1);
            InfoJugador[playerid][jManoDerechaCant]--;
            InfoJugador[playerid][jManoIzquierda] = objeto, PonerObjeto(playerid, 2, objeto);
            InfoJugador[playerid][jManoIzquierdaCant] = InfoInventario[objeto][Capacidad];
            format(string, sizeof string, "%s saco un(a) %s de la caja.", NombreJugador(playerid), InfoInventario[objeto][NombreObjeto]);
            ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
            ActualizarManos(playerid);
            return 1;
        } else if (TieneCaja(playerid, 2)) {
            new objeto = TieneCaja(playerid, 2);
            InfoJugador[playerid][jManoIzquierdaCant]--;
            InfoJugador[playerid][jManoDerecha] = objeto, PonerObjeto(playerid, 1, objeto);
            if (InfoInventario[objeto][IDArma] != 0) { GivePlayerWeapon(playerid, InfoInventario[objeto][IDArma], InfoInventario[objeto][Capacidad]); }
            InfoJugador[playerid][jManoDerechaCant] = InfoInventario[objeto][Capacidad];
            format(string, sizeof string, "%s saco un(a) %s de la caja.", NombreJugador(playerid), InfoInventario[objeto][NombreObjeto]);
            ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
            ActualizarManos(playerid);
            return 1;
        }
    } else if (!strcmp(params[0], "guardar", true)) {
        ShowInfoForPlayer(playerid, "en construccion.", 2000);
    }
    return 1;
}

funcion _ordenador(playerid) {
	new _dialog1[3000], _dialog2[300];
	strcat(_dialog1, "{ffffff}1. Identificar una persona\n\
	2. Comprobar historial delictivo\n\
	3. Identificar un vehiculo\n\
	4. Atender buzon de llamadas (911)\n\
	5. Comprobar lista de sospechosos\n\
	6. Solicitud de refuerzos a posicion", sizeof(_dialog1));
	format(_dialog2, sizeof(_dialog2), "{b0b0b0}Ordenador policial - Sesion iniciada: %s		", NombreJugador(playerid));
	ShowPlayerDialog(playerid, D_PCLSPD1, DIALOG_STYLE_LIST, _dialog2, _dialog1, ">", "Salir");
	return 1;
}

CMD:computador(playerid)
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (IsPlayerInAnyVehicle(playerid))
    {
		new vehicleid = GetPlayerVehicleID(playerid);
		if (LSPD_Veh(vehicleid)) return ShowInfoForPlayer(playerid, "~w~Debes estar dentro de un ~r~vehiculo.", 2000);
		_ordenador(playerid);
    }
  	else
	{
        new vehicleid = GetPlayerVehicleID(playerid);
		if (GN_Vehicle(vehicleid)) return ShowInfoForPlayer(playerid, "~w~Debes estar dentro de un ~r~vehiculo.", 2000);
		_ordenador(playerid);
	}
	return 1;
}

CMD:fogata(playerid)
{
	if (InfoJugador[playerid][jNivel] < 5) return ShowInfoForPlayer(playerid, "Debes ser mayor a nivel de 5.", 2000);
	ShowPlayerDialog(playerid, D_FOGATA, DIALOG_STYLE_LIST, "{D6E1EB}Fogata", "{FFFFFF}Colocar\nEditar\nBorrar", "Continuar", "Salir");
	return 1;
}

CMD:dardinerooff(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Dardinerooff.", 2000);
	new name[MAX_PLAYER_NAME], dineroex;
	if (sscanf(params, "s[24]d", name, dineroex)) return _Mensaje(playerid, 3, "0", "/dardinerooff [Nombre_Apellido] [monto]");
	if (VerificarCuenta(name))
	{
		new dinero = 0, gformat[190];
		reg_int(0, "Dinero", dinero);
		cache_unset_active();
		dinero+=dineroex;
		mysql_format(DBngrp, gformat, sizeof gformat, "UPDATE cuentas SET Dinero = '%d' WHERE Nombre_Apellido = '%e'", dinero, name);
		mysql_tquery(DBngrp, gformat);
		format(gformat, sizeof gformat, "Administracion: %s ha otorgado la cantidad de %d$ a %s. (OFF)", NombreRJugador(playerid), dineroex, name);
		MensajeAdmin(gformat);
		format(gformat, sizeof gformat, "[+] Le cedio la cantidad de $%s a %s. (OFF)", NombreRJugador(playerid), diner_coma(dineroex), name);
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), gformat, 5);
		return 1;
	}
	ShowInfoForPlayer(playerid, "Esa cuenta no existe.", 2000);
	return 1;
}

CMD:camello(playerid)
{
 	if(_enPos(playerid, 4.0, 223.1527, 1942.4933, 18.1086))
    {
	ShowPlayerDialog(playerid, 601, DIALOG_STYLE_LIST, "{D6E1EB}Camello", "Mechero\t5\t{0ED39E}20\n\
	Caja de cigarros\t1\t{0ED39E}36\n\
	Goma de mascar\t1\t{0ED39E}9\n\
	TELeFONO\t1\t{0ED39E}290\n\
	Chip de saldo\t10\t{0ED39E}100", "Comprar", "Cancelar");
	}
	else ShowInfoForPlayer(playerid, "No estas cerca del camello.", 2000);
	return 1;
}

CMD:ftiempo(playerid, params[]) {
	new tiempof[128];
	if(InfoJugador[playerid][jT_fabrica] != -1) format(tiempof, sizeof(tiempof), "[FABRICA ARMAS]{FFFFFF} Horas: %i - Minutos: %i - Veces: %i", InfoJugador[playerid][jT_fabrica] / 60, InfoJugador[playerid][jT_fabrica] % 60, abs(InfoJugador[playerid][jI_fabrica]-3));
	else format(tiempof, sizeof(tiempof), "[FABRICA ARMAS]{FFFFFF} Horas: 0 - Minutos: 0 - Veces: %i", InfoJugador[playerid][jT_fabrica] / 60, InfoJugador[playerid][jT_fabrica], InfoJugador[playerid][jT_fabrica] % 60, abs(InfoJugador[playerid][jI_fabrica]-3));
	SendClientMessage(playerid, 0x00919DFF, tiempof);
	if(InfoJugador[playerid][jT_fabrica2] != -1) format(tiempof, sizeof(tiempof), "[FABRICA CARGADORES]{FFFFFF} Horas: %i - Minutos: %i - Veces: %i", InfoJugador[playerid][jT_fabrica2] / 60, InfoJugador[playerid][jT_fabrica2] % 60,abs(InfoJugador[playerid][jI_fabrica2]-3));
	else format(tiempof, sizeof(tiempof), "[FABRICA CARGADORES]{FFFFFF} Horas: 0 - Minutos: 0 - Veces: %i", InfoJugador[playerid][jT_fabrica2] / 60, InfoJugador[playerid][jT_fabrica2] % 60,abs(InfoJugador[playerid][jI_fabrica2]-3));
	SendClientMessage(playerid, 0x00919DFF, tiempof);
	return 1;
}

abs(intx)
{
    if (intx < 0)
        return -1*intx;
    else
        return intx;
}

CMD:limpiartodooff(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 5) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Limpiartodooff.", 2000);
	OnDuty
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/limpiartodooff [Nombre_Apellido]");
	if (VerificarCuenta(params))
	{
		new que2ry[1000], query[2000], gformat[256];
		mysql_format(DBngrp, gformat, sizeof gformat, "UPDATE cuentas SET Espalda = 0, Cantidad_espalda = 0 WHERE Nombre_Apellido = '%e'", params);
		mysql_tquery(DBngrp, gformat);
		format(que2ry, sizeof que2ry, "UPDATE cuentas SET Bolsillo_1 = 0, Cantidad_bolsillo_1 = 0, Bolsillo_2 = 0, Cantidad_bolsillo_2 = 0, Bolsillo_3 = 0, Cantidad_bolsillo_3 = 0, Bolsillo_4 = 0, Cantidad_bolsillo_4 = 0, Bolsillo_5 = 0, Cantidad_bolsillo_5 = 0,");
		mysql_format(DBngrp, query, sizeof query, "%s Bolsillo_6 = 0, Cantidad_bolsillo_6 = 0, Bolsillo_7 = 0, Cantidad_bolsillo_7 = 0, Bolsillo_8 = 0, Cantidad_bolsillo_8 = 0, Bolsillo_9 = 0, Cantidad_bolsillo_9 = 0 = 0 WHERE Nombre_Apellido = '%e'", que2ry, params);
		mysql_tquery(DBngrp, query);
		format(que2ry, sizeof que2ry, "UPDATE cuentas SET Cinturon_1 = 0, Cantidad_cinturon_1 = 0, Cinturon_2 = 0, Cantidad_cinturon_2 = 0, Cinturon_3 = 0, Cantidad_cinturon_3 = 0, Cinturon_4 = 0,");
		mysql_format(DBngrp, query, sizeof query, "%s Cantidad_cinturon_4 = 0, Cinturon_5 = 0, Cantidad_cinturon_5 = 0, Cinturon_6 = 0, Cantidad_cinturon_6 = 0 WHERE Nombre_Apellido = '%e'", que2ry, params);
		mysql_tquery(DBngrp, query);
		mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET mano_derecha = 0, Cantidad_mano_derecha = 0, mano_izquierda = 0, Cantidad_mano_izquierda = 0 WHERE Nombre_Apellido = '%e'", params);
		mysql_tquery(DBngrp, query);
		format(gformat, sizeof gformat, "Administracion: %s limpio el sistema de inventarios de %s. (CMD OFF)", NombreRJugador(playerid), params);
		MensajeAdmin(gformat);
		format(gformat, sizeof gformat, "Registros: %s limpio el sistema de inventarios de %s. (CMD OFF)", NombreRJugador(playerid), params);
		Log("gformat/LimpiarInventario.log", gformat);
		return 1;
	}
	ShowInfoForPlayer(playerid, "Esa cuenta no existe.", 2000);
	return 1;
}

funcion SlotVehLibre()
{
	Loop(i, MAX_VEH_USADO, 0) { if (!i_Usado[i][uModeloVeh]) return i; }
	return -1;
}

CMD:venderveh(playerid)
{
    if (EnVentaPropiedad[playerid] != 0) return SendClientMessage(playerid, 0xccccccff, "* No puedes realizar esta funcion en medio de una venta.");
	if (!_enPos(playerid, 40, 2594.4885, -2225.3184, 13.1689)) return ShowInfoForPlayer(playerid, "No estas en la concesionaria de segunda mano (/gps concesionarias).", 2000);
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowInfoForPlayer(playerid, "No eres el conductor.", 2000);
	new vehiculo = GetPlayerVehicleID(playerid), id = -1;
	Loop(x, totalvehiculos, 1) if (InfoVehiculo[x][vDL] == vehiculo && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoVehiculo[x][vPropietario], true) == 0 && InfoVehiculo[x][vFamilia] == 0)
	{
		id = x;
		break;
	}
	if (id == -1) return ShowInfoForPlayer(playerid, "Este vehiculo no te pertenece, no puedes venderlo.", 2000);
	if (InfoVehiculo[id][vModeloNeon] != 0) return ShowInfoForPlayer(playerid, "No puedes vender un vehiculo con neon.", 2000);
	if (InfoVehiculo[id][vMoneda] != 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No puedes vender un vehiculo con valor en coins.");
	if (GetPVarInt(playerid, "VenderConfirmado") == 0)
	{
		SetPVarInt(playerid, "VenderConfirmado", 1);
		SendClientMessage(playerid, 0xFFFFFFFF, "Recuerda que al vender el vehiculo recibes la mitad de su precio original, re-escribe /venderveh.");
		SendClientMessage(playerid, 0xAAAA00FF, "IMPORTANTE:{FFFFFF} Coloca el vehiculo en algun espacio vacio de la zona, si es bote es en el agua.");
	}
	else
	{
		DeletePVar(playerid, "VenderConfirmado");
		new vehid = SlotVehLibre();
		if (vehid < 0) return ShowInfoForPlayer(playerid, "Ya no hay mas espacio, se podran crear maximo 200 vehiculos usados.", 2000);
		new Float: x, Float: y, Float: z, Float: angle,Float: health, cobro = InfoVehiculo[id][vPrecio]/2;
		GetVehicleHealth(vehiculo, health);
		GetVehicleDamageStatus(vehiculo, InfoVehiculo[id][vDanioSuperficie], InfoVehiculo[id][vDanioPuertas], InfoVehiculo[id][vDanioLuces], InfoVehiculo[id][vDanioRuedas]);
		GetVehiclePos(vehiculo, x, y, z);
		GetVehicleZAngle(vehiculo, angle);
		i_Usado[vehid][uModeloVeh] = InfoVehiculo[id][vModelo];
		i_Usado[vehid][uPrecioVeh] = cobro;
		GivePlayerCash(playerid, cobro, "venderveh");
		i_Usado[vehid][uPaintJob] = InfoVehiculo[id][vPaintJob];
		i_Usado[vehid][uColor_1] = InfoVehiculo[id][vColor1];
		i_Usado[vehid][uColor_2] = InfoVehiculo[id][vColor2];
		i_Usado[vehid][uDanioSuperficie] = InfoVehiculo[id][vDanioSuperficie];
		i_Usado[vehid][uDanioPuertas] = InfoVehiculo[id][vDanioPuertas];
		i_Usado[vehid][uDanioLuces] = InfoVehiculo[id][vDanioLuces];
		i_Usado[vehid][uDanioRuedas] = InfoVehiculo[id][vDanioRuedas];
		i_Usado[vehid][uVida] = health;
		i_Usado[vehid][uGasolina] = 150;
		i_Usado[vehid][uStereo] = InfoVehiculo[id][vStereo];
		Loop(m, MAX_MODIFICACIONES, 0) { i_Usado[vehid][uModificaciones][m] = InfoVehiculo[id][vModificacion][m]; }
		DeleteVehiclePlayer(id);
		SendClientMessageEx(playerid, 0x00CC00FF, "Recibiste $%s por la venta tu vehiculo en la concesionaria de segunda mano.", diner_coma(cobro));
	}
	return 1;
}

CMD:avisarpd(playerid)
{
	if(GetPVarInt(playerid, "EnCrack") == 0) return ShowInfoForPlayer(playerid, "No puedes usar este comando sino estas herido.", 2000);
	if(YaAviso[playerid] == 1) return ShowInfoForPlayer(playerid, "Ya usaste este comando, muere de nuevo y lo podras usar.", 2000);
	new string[256],Float: KcyoX, Float: KcyoY, Float: KcyoZ, location[MAX_ZONE_NAME];
	GetPlayerPos(playerid, KcyoX, KcyoY, KcyoZ);
	Get2DZone(location, MAX_ZONE_NAME, KcyoX, KcyoY, KcyoZ);
	format(string, sizeof string, "CENTRAL: Persona gravemente herida en %s.",location);
	SendRadioFaction(1, C_COLORRADIO, string);
	SendRadioTrabajo(15, C_COLORRADIO, string);
	ProxDetector(35.0, playerid, "[NPC] Alguna persona que estaba por alli llamo al departamento de policias al ver la situacion.", 0x9EC73DAA, 0x9EC73DAA, 0x9EC73DAA, 0x9EC73DAA, 0x9EC73DAA);
	YaAviso[playerid] = 1;
	return 1;
}

CMD:destruir(playerid, params[])
{
    if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowInfoForPlayer(playerid, "No puedes usar este comando mientras estas herido.", 2000);
    new string[128];
    if (sscanf(params, "d", params[1])) return _Mensaje(playerid, 3, "0", "/destruir [id jugador]");
    if (!IsPlayerConnectedEx(params[1])) return ShowInfoForPlayer(playerid, "Ese jugador no esta conectado.", 2000);
    if (!CercaDelWeon(5.0, playerid, params[1])) return ShowInfoForPlayer(playerid, "Ese jugador esta muy lejos de ti.", 2000);
    QuitarManos(params[1]);
    format(string, sizeof string, "* %s limpio las manos de %s.", NombreJugador(playerid), NombreJugador(params[1]));
    SendRadioFaction(1, C_COLORPOLICIA, string);
    SendRadioFaction(2, C_COLORPOLICIA, string);
    SendRadioFaction(3, C_COLORPOLICIA, string);
    return 1;
}

CMD:vercoche(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Vercoche.");
	OnDuty
	new vehicleid;
	if (sscanf(params, "d", vehicleid)) return _Mensaje(playerid, 3, "0", "/vercoche [id vehiculo]");
	if (vehicleid > 1999 || vehicleid < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Vehiculo ID incorrecto.");
	new id = verificar_id_vehiculo(vehicleid);
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "Ese ID no figura con propietario.");
	SendClientMessageEx(playerid, 0x33CCFFFF, "* ID: %d (SQL: %d) | Modelo: %s | Propietario: %s | Matricula: LS-%d", InfoVehiculo[id][vDL], InfoVehiculo[id][vID], GetVehicleName(InfoVehiculo[id][vDL]), InfoVehiculo[id][vPropietario], InfoVehiculo[id][vID]);
	return 1;
}

new id_veh_actual[MAX_PLAYERS];

CMD:coches(playerid)
{
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en este momento.");
	new dialog[3084], gformat[370], iCount = 0;
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vModelo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoVehiculo[id][vPropietario], true) == 0 && InfoVehiculo[id][vFamilia] == 0)
	{
		if (InfoVehiculo[id][vEmbargo] != 0) format(gformat, sizeof gformat, "%s {cccccc}(embargado) (Matricula: %d)\n", GetNameVehicle(InfoVehiculo[id][vModelo]), InfoVehiculo[id][vID]);
		else
		{
			if (InfoVehiculo[id][vSpawned] != 0)
			{
				format(gformat, sizeof gformat, "%s {cccccc}({00cc00}ID: %d{cccccc}) (Matricula: %d)\n", GetNameVehicle(InfoVehiculo[id][vModelo]), InfoVehiculo[id][vDL], InfoVehiculo[id][vID]);
			}
			else format(gformat, sizeof gformat, "%s {cccccc}({F0C9AA}oculto{cccccc}) (Matricula: %d)\n",  GetNameVehicle(InfoVehiculo[id][vModelo]), InfoVehiculo[id][vID]);
		}
		strcat(dialog, gformat);
		//conteo
		new gformat2[64];
		format(gformat2, sizeof gformat2, "keyvehowo%d", iCount);
		SetPVarInt(playerid, gformat2, id);
		iCount++;
	}
	if (iCount == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes ningun vehiculo a tu nombre.");
	Dialog_Show(playerid, ShowVehiculos, DIALOG_STYLE_LIST, "Mis vehiculos", dialog, "Continuar", "Salir");
    return 1;
}
CMD:vehiculos(playerid) return cmd_coches(playerid);
CMD:c(playerid) return cmd_coches(playerid);

Dialog:ShowVehiculos(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat[40], show_dialog[1428];
	format(gformat, sizeof gformat, "keyvehowo%d", ID);
	new veh = GetPVarInt(playerid, gformat);
	if (InfoVehiculo[veh][vModelo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste no posee un modelo.");
	if (InfoVehiculo[veh][vEmbargo] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste se encuentra embargado.");

	id_veh_actual[playerid] = veh;
	if (InfoVehiculo[veh][vSpawned] != 0) format(show_dialog, sizeof show_dialog, "Ocultar {A7C9E7}%s{CCCCCC}\nLocalizar vehiculo\nEliminar vehiculo", GetNameVehicle(InfoVehiculo[veh][vModelo]));
	else format(show_dialog, sizeof show_dialog, "Spawnear {A7C9E7}%s{CCCCCC}\nLocalizar vehiculo\nEliminar vehiculo", GetNameVehicle(InfoVehiculo[veh][vModelo]));
	Dialog_Show(playerid, Show2Vehiculos, DIALOG_STYLE_LIST, "Menu del vehiculo", show_dialog, "Continuar", "Volver");
	return 1;
}

Dialog:Show2Vehiculos(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_coches(playerid);
	new veh = id_veh_actual[playerid], dialog[1428];
	if (InfoVehiculo[veh][vModelo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste no posee un modelo.");
	if (InfoVehiculo[veh][vEmbargo] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste se encuentra embargado.");
	switch (listitem)
	{
		case 0: //spawn-unspawn
		{
			if (InfoVehiculo[veh][vSpawned] == 0)
			{
				if (SpawnVehiculos(playerid) == 1) return 1;
				VehiculoSacar(veh);
				SendClientMessageEx(playerid, 0xccccccFF, "** %s spawneado en su ultima posicion.", GetNameVehicle(InfoVehiculo[veh][vModelo]));
				return 1;
			}
			new Float: vx, Float: vy, Float: vz;
			GetVehiclePos(InfoVehiculo[veh][vDL], vx, vy, vz);
			if (!_enPos(playerid, 100.0, vx, vy, vz)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes estar al menos 100 metros del vehiculo para ocultarlo.");
			if (IsVehicleBusy(InfoVehiculo[veh][vDL])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes ocultar el vehiculo con ocupantes dentro.");
			VehiculoGuardar(veh);
			SendClientMessageEx(playerid, 0xccccccFF, "** %s ocultado correctamente.", GetNameVehicle(InfoVehiculo[veh][vModelo]));
		}
		case 1: //localizar
		{
			if (InfoVehiculo[veh][vModelo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No se puede en un vehiculo que no existe.");
			if (InfoVehiculo[veh][vEmbargo] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No se puede en un vehiculo confiscado.");
			if (InfoVehiculo[veh][vSpawned] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes localizar vehiculos guardados.");
			new vehicleid = InfoVehiculo[veh][vDL], access = 0, Float: carPos[3], zone[MAX_ZONE_NAME];
			if (GetVehicleInterior(vehicleid) == 6 && GetVehicleVirtualWorld(vehicleid) == 2) // carpintero
			{
				SendClientMessageEx(playerid, 0xFFFFFFFF, "Tu vehiculo fue localizado dentro del estacionamiento de Carpintero. {ff0000}(Ve al punto rojo).", zone);
				SetPlayerCheckpoint(playerid, 1921.2126, -1863.1205, 13.5603, 15.0);
				access = 1;
			}
			else if (GetVehicleInterior(vehicleid) == 7 && GetVehicleVirtualWorld(vehicleid) == 2) // camionero
			{
				SendClientMessageEx(playerid, 0xFFFFFFFF, "Tu vehiculo fue localizado dentro del estacionamiento de Camionero. {ff0000}(Ve al punto rojo).", zone);
				SetPlayerCheckpoint(playerid, 1669.2961, 704.5327, 10.8203, 15.0);
				access = 1;
			}
			else if (GetVehicleInterior(vehicleid) == 0 && GetVehicleVirtualWorld(vehicleid) == 0) // exterior
			{
				GetVehiclePos(vehicleid, carPos[0], carPos[1], carPos[2]);
				GetCar3DZone(vehicleid, zone, sizeof zone);
				SendClientMessageEx(playerid, 0xFFFFFFFF, "Tu vehiculo fue localizado en %s. {ff0000}(Ve al punto rojo).", zone);
				SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
				access = 1;
			}
			if (access != 0)
			{
				SetPVarInt(playerid, "EnCheckPoint", 1);
				TogglePlayerAllDynamicCPs(playerid, false);
				return 1;
			}
			SendClientMessage(playerid, 0xccccccff, "Tu vehiculo debe estar escondido en algun garaje de faccion o de una persona o bugeado.");
		}
		case 2: //eliminar
		{
			format(dialog, sizeof dialog, "{cccccc}Si estas de acuerdo que no tendras reembolso y quieres continuar su eliminacion, presiona Continuar.\n", GetNameVehicle(InfoVehiculo[veh][vModelo]));
			Dialog_Show(playerid, EliminarVehiculo, DIALOG_STYLE_MSGBOX, "Eliminar vehiculo", dialog, "Continuar", "Salir");
		}
	}
	return 1;
}

Dialog:EliminarVehiculo(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new id = id_veh_actual[playerid];
	if (InfoVehiculo[id][vModelo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste no posee un modelo.");
	if (InfoVehiculo[id][vEmbargo] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste se encuentra embargado.");
	DeleteVehiclePlayer(id);
	_Mensaje(playerid, 2, "0", "Su vehiculo ha sido eliminado.");
	return 1;
}

SpawnVehiculos(playerid)
{
	new carsamount = VehicleSpawnCount(playerid);
	if (InfoJugador[playerid][jNivelVIP] == 0 && carsamount >= 1)
	{
		ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Usuarios normales solo pueden tener 1 vehiculo spawneado.");
		return 1;
	}
	if (InfoJugador[playerid][jNivelVIP] == 1 && carsamount >= 2)
	{
		ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Usuarios VIP Basico solo pueden tener 2 vehiculos spawneados.");
		return 1;
	}
	if (InfoJugador[playerid][jNivelVIP] == 2 && carsamount >= 3)
	{
		ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Usuarios VIP Avanzado solo pueden tener 3 vehiculos spawneados.");
		return 1;
	}
	if (InfoJugador[playerid][jNivelVIP] == 3 && carsamount >= 4)
	{
		ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Usuarios VIP Ultra solo pueden tener 4 vehiculos spawneados.");
		return 1;
	}
	if (InfoJugador[playerid][jNivelVIP] == 4 && carsamount >= 5)
	{
		ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Usuarios VIP Ultra solo pueden tener 5 vehiculos spawneados.");
		return 1;
	}
	return 2;
}

VehicleSpawnCount(playerid)
{
	new cars = 0;
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vModelo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoVehiculo[id][vPropietario], true) == 0 && InfoVehiculo[id][vSpawned] != 0 && InfoVehiculo[id][vFamilia] == 0)
	{ cars++; }
	return cars;
}

CMD:cambiarclaveusuario(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 11) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Cambiarclaveusuario.");
	Dialog_Show(playerid, CambiarClave, DIALOG_STYLE_INPUT, "Cambiar clave", "{EBEBEB}Ingresa el '{BB0000}Nombre_Apellido{EBEBEB}' de la cuenta que deseas cambiarle la clave:", "Continuar", "Salir");
	return 1;
}
CMD:aclave(playerid) return cmd_cambiarclaveusuario(playerid);

new IsChangeName[MAX_PLAYERS][32];
Dialog:CambiarClave(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (VerificarCuenta(inputtext) == 0) return SendClientMessage(playerid, -1, "Esa cuenta no existe.");
	alm(IsChangeName[playerid], inputtext);
	new gformat[256];
	format(gformat, sizeof gformat, "{FFFFFF}Ahora introduce la clave que tendra %s.", inputtext);
	Dialog_Show(playerid, Cambiar2Clave, DIALOG_STYLE_INPUT, "Cambiar clave", gformat, "Continuar", "Salir");
	return 1;
}

Dialog:Cambiar2Clave(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new gformat[256];
	if (strlen(inputtext) < 4)
	{
		SendClientMessage(playerid, -1, "Clave muy corta, debe contener mas de 4 caracteres y menos de 25");
		format(gformat, sizeof gformat, "Ahora introduce la clave que tendra la cuenta %s.", IsChangeName[playerid]);
		Dialog_Show(playerid, Cambiar2Clave, DIALOG_STYLE_INPUT, "Cambiar clave", gformat, "Continuar", "Cancelar");
		return 1;
	}
	if (strlen(inputtext) > 25)
	{
		SendClientMessage(playerid, -1, "Clave muy larga, debe contener mas de 4 caracteres y menos de 25");
		format(gformat, sizeof gformat, "Ahora introduce la clave que tendra la cuenta %s.", IsChangeName[playerid]);
		Dialog_Show(playerid, Cambiar2Clave, DIALOG_STYLE_INPUT, "Cambiar clave", gformat, "Continuar", "Cancelar");
		return 1;
	}
	new exSalt[11];
	new exClave[65];
	for (new i = 0; i < 10; i++)
	{
		exSalt[i] = random(79) + 47;
	}
	exSalt[10] = 0;
	SHA256_PassHash(inputtext, exSalt, exClave, 65);
	new query[512];
	mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Clave = '%e', Salt = '%e' WHERE Nombre_Apellido = '%e'", exClave, exSalt, IsChangeName[playerid]);
	mysql_tquery(DBngrp, query);
	SendClientMessageEx(playerid, 0xBB0000FF, "Le has cambiado la clave a %s, (clave: %s)", IsChangeName[playerid], inputtext);
	alm(IsChangeName[playerid], "none");
	return 1;
}


CMD:panelcoches(playerid, params[])
{
	if(InfoJugador[playerid][jAdmin] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Vercoches.");
	OnDuty
	new idjugador, dialog[3084], gformat[370], iCount = 0;
    if (sscanf(params, "d", idjugador)) return _Mensaje(playerid, 3, "0", "/vercoches [id jugador]");
    if (!IsPlayerConnectedEx(idjugador)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no esta conectado.");
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vModelo] != 0 && strcmp(InfoJugador[idjugador][jNombre_Apellido], InfoVehiculo[id][vPropietario], true) == 0 && InfoVehiculo[id][vFamilia] == 0)
	{
		if (InfoVehiculo[id][vEmbargo] != 0) format(gformat, sizeof gformat, "{FF0000}%s {C0C0C0}(embargado)\n", GetNameVehicle(InfoVehiculo[id][vModelo]));
		else
		{
			if (InfoVehiculo[id][vSpawned] != 0)
			{
				format(gformat, sizeof gformat, "{FF0000}%s {C0C0C0}(%d)\n", GetNameVehicle(InfoVehiculo[id][vModelo]), InfoVehiculo[id][vDL]);
			}
			else format(gformat, sizeof gformat, "{FF0000}%s {C0C0C0}(oculto)\n", GetNameVehicle(InfoVehiculo[id][vModelo]));
		}
		strcat(dialog, gformat);
		//conteo
		new gformat2[64];
		format(gformat2, sizeof gformat2, "panelsuwc%d", iCount);
		SetPVarInt(playerid, gformat2, id);
		iCount++;
	}
	if (iCount == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador ningun vehiculo a su nombre.");
	SetPVarInt(playerid, "PersonaID", idjugador);
	Dialog_Show(playerid, ShowPanelCoches, DIALOG_STYLE_LIST, "Panel de coches", dialog, "Continuar", "Salir");
	return 1;
}
CMD:vercoches(playerid, params[]) return cmd_panelcoches(playerid, params);

Dialog:ShowPanelCoches(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID = listitem, gformat[40];
	format(gformat, sizeof gformat, "panelsuwc%d", ID);
	new veh = GetPVarInt(playerid, gformat);
	if (InfoVehiculo[veh][vSpawned] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste esta oculto.");
	if (InfoVehiculo[veh][vModelo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste no posee un modelo.");
	if (InfoVehiculo[veh][vEmbargo] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No se puede en un vehiculo confiscado.");
	Dialog_Show(playerid, Show2PanelCoches, DIALOG_STYLE_LIST, "Panel coches > Opciones", "- Ir vehiculo\n- Traer vehiculo", ">", "?");
	SetPVarInt(playerid, "IDSlot", veh);
	return 1;
}

Dialog:Show2PanelCoches(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new veh = GetPVarInt(playerid, "IDSlot"), idjugador = GetPVarInt(playerid, "PersonaID"), Float: cwx2, Float: cwy2, Float: cwz2;
	if (InfoVehiculo[veh][vSpawned] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste esta oculto.");
	if (InfoVehiculo[veh][vModelo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste no posee un modelo.");
	if (InfoVehiculo[veh][vEmbargo] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No se puede en un vehiculo confiscado.");
	new vehicleid = InfoVehiculo[veh][vDL];
	switch (listitem)
	{
		case 0:
		{
			GetVehiclePos(vehicleid, cwx2, cwy2, cwz2);
			SetPosEx(playerid, cwx2, cwy2+4, cwz2, 0.0, GetVehicleInterior(vehicleid), GetVehicleVirtualWorld(vehicleid), 0);
			SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}Fuiste hasta la ubicacion del coche ID: %d propietario: %s.", vehicleid, NombreRJugador(idjugador));
		}
		case 1:
		{
			SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}Mandaste a tu ubicacion el coche ID: %d propietario: %s.", vehicleid, NombreRJugador(idjugador));
			GetPlayerPos(playerid, cwx2, cwy2, cwz2);
			SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
			SetVehicleInterior(vehicleid, GetPlayerInterior(playerid));
			MoverVehiclePos(vehicleid, cwx2, cwy2 + 4, cwz2);
		}
	}
	return 1;
}

CMD:aoa(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Aoa.");
	OnDuty
	new Str[320];
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/aoa [texto]");
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2))
	{
		StopAudioStreamForPlayer(playerid2);
		format(Str, sizeof Str, "http://audio1.spanishdict.com/audio?lang=es&voice=Ximena&speed=25&text=%s", params);
		EscucharMusica(playerid2, Str);
	}
	return 1;
}

CMD:entercar(playerid, params[]) {
    new vehicleid, string[256];
    if (InfoJugador[playerid][jAdmin] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando.");
    OnDuty
    if (!sscanf(params, "d", vehicleid)) {
        PutPlayerInVehicleEx(playerid, vehicleid, 0);
        format(string, sizeof string, "Administracion: %s utilizo /entercar, Vehiculo ID: %d.", NombreRJugador(playerid), vehicleid);
        MensajeAdmin(string);
    } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~/entrarauto [id vehiculo]");
    return 1;
}

CMD:darlicencia(playerid, params[])
{
    if (!Es_Banda(playerid, 1)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD.", 2000);
	if (InfoJugador[playerid][jFamRango] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres rango 10 o superior.");
    new string[128], tiempo;
    if (sscanf(params, "dd", params[1], tiempo)) return _Mensaje(playerid, 3, "0", "/darlicencia [id jugador] [dias]");
    if(tiempo > 365) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes ingresar mas de 30 dias.");
    if (!IsPlayerConnectedEx(params[1])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no esta conectado.");
    if (!CercaDelWeon(5.0, playerid, params[1])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador esta muy lejos de ti.");
    InfoJugador[params[1]][jLicencias][0] = 1;
    InfoJugador[params[1]][jTiempoLicencia1] = gettime() + tiempo*86400;
	guardar_int_mysql("cuentas", "Licencias1", InfoJugador[params[1]][jID], InfoJugador[params[1]][jLicencias][0]);
	guardar_int_mysql("cuentas", "TiempoLicencia1", InfoJugador[params[1]][jID], InfoJugador[params[1]][jTiempoLicencia1]);
    format(string, sizeof string, "%s cede una licencia de armas a %s.", NombreRJugador(playerid), NombreRJugador(params[1]));
    ProxDetector(30.0, playerid, string, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF);
	format(string, sizeof string, "* %s te a entregado una licencia de armas vence en: %s.", NombreRJugador(playerid), generarTiempo(InfoJugador[params[1]][jTiempoLicencia1] - gettime()));
	SendClientMessage(params[1], 0xFFFF00FF, string);
	format(string, sizeof string, "* Le entregaste una licencia a %s con %s.", NombreRJugador(params[1]), generarTiempo(InfoJugador[params[1]][jTiempoLicencia1] - gettime()));
	SendClientMessage(playerid, 0xFFFF00FF, string);
    return 1;
}

CMD:balasgoma(playerid, params[]) {
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
    if (GetPlayerWeapon(playerid) == 25) {
        if (BalasDeGoma[playerid] == 0) {
            BalasDeGoma[playerid] = 1;
            _Mensaje(playerid, 2, "0", "Has activado el modo escopeta de balas.");
        } else {
            BalasDeGoma[playerid] = 0;
            _Mensaje(playerid, 2, "0", "Has desactivado el modo escopeta de balas.");
        }
    } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes una escopeta en tu mano derecha.");
    return 1;
}

CMD:ram(playerid)
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0 && _enPos(playerid, 2.0, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ]) && InfoJugador[playerid][jInterior] == InfoCasa[id][cEntradaInt] && InfoJugador[playerid][jVirtualWorld] == InfoCasa[id][cEntradaVW])
	{
		SetPosEx(playerid, InfoCasa[id][cSalidaX], InfoCasa[id][cSalidaY], InfoCasa[id][cSalidaZ], InfoCasa[id][cSalidaR], InfoCasa[id][cSalidaInt], InfoCasa[id][cSalidaVW], 1);
		CargarObjetos(playerid);
		SetCameraBehindPlayer(playerid);
		GameTextForPlayer(playerid, "~r~Forzaste la puerta", 5000, 1);
		EnCasaID[playerid] = id;
		return 1;
	}
	Loop(id, totalnegocios, 1) if (_enPos(playerid, 2.0, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ]))
	{
		SetPosEx(playerid, InfoNegocio[id][nSalidaX], InfoNegocio[id][nSalidaY], InfoNegocio[id][nSalidaZ], InfoNegocio[id][nSalidaR], InfoNegocio[id][nSalidaInt], InfoNegocio[id][nSalidaVW], 1);
		CargarObjetos(playerid);
		SetCameraBehindPlayer(playerid);
		GameTextForPlayer(playerid, "~r~Forzaste la puerta", 5000, 1);
		return 1;
	}
	SendClientMessage(playerid, 0xEBEBEBFF, "No estas cerca de ninguna entrada de casa o negocio.");
	return 1;
}
CMD:derribarpuerta(playerid) return cmd_ram(playerid);

CMD:verarmario(playerid)
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (EnCasaID[playerid]== -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas dentro de una casa.");
	RevisarHouseArmario(playerid, EnCasaID[playerid]);
	return 1;
}

CMD:vermaletero(playerid)
{
    if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
    if (IsPlayerInAnyVehicle(playerid)) return ShowInfoForPlayer(playerid, "~w~No puedes revisar el maletero dentro de un~r~ vehiculo", 2000);
    new Float: x, Float: y, Float: z, id = 0;
	Loop(e, totalvehiculos, 1) if (InfoVehiculo[e][vSpawned] != 0)
	{
		GetVehiclePos(InfoVehiculo[e][vDL], x, y, z);
		if (_enPos(playerid, 4.2, x, y, z) && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(InfoVehiculo[e][vDL]) && GetPlayerInterior(playerid) == GetVehicleInterior(InfoVehiculo[e][vDL]))
		{
			id = e;
			break;
		}
	}
	if (id == 0) return  ShowInfoForPlayer(playerid, "~w~No estas cerca de ningun~r~ vehiculo", 2000);
	if (IsABicycle(InfoVehiculo[id][vDL])) return ShowInfoForPlayer(playerid, "~w~Modelo de vehiculo~r~ incorrecto", 2000);
	ver_Maletero(playerid, id);
	return 1;
}
CMD:verarmarios(playerid) return cmd_verarmario(playerid);

CMD:callsign(playerid, params[])
{
	new result[128], veh = GetPlayerVehicleID(playerid), string[256];
	if (!IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes usarlo en un vehiculo.");
	if (sscanf(params, "s[128]", result)) return _Mensaje(playerid, 3, "0", "/callsign [texto]");
	if (!VehCallSign[veh])
	{
		format(string, sizeof string, "%s", result);
		if (IsValidDynamic3DTextLabel(TextCallSign[veh]))
		{
			DestroyDynamic3DTextLabel(TextCallSign[veh]);
			TextCallSign[veh] = Text3D:INVALID_3DTEXT_ID;
		}
		TextCallSign[veh] = CreateDynamic3DTextLabel(result, 0xEBEBEBFF, -1.0, -2.8, 0.0, 12.0, INVALID_PLAYER_ID, veh);
		VehCallSign[veh] = 1;
		_Mensaje(playerid, 4, "ffffff", " /deletecallsign");
	}
	else
	{
		if (IsValidDynamic3DTextLabel(TextCallSign[veh]))
		{
			DestroyDynamic3DTextLabel(TextCallSign[veh]);
			TextCallSign[veh] = Text3D:INVALID_3DTEXT_ID;
		}
		VehCallSign[veh] = 0;
	}
	return 1;
}
CMD:matricula(playerid, params[]) return cmd_callsign(playerid, params);

CMD:deletecallsign(playerid)
{
    if (Es_Banda(playerid, 1, 2, 3) ||Es_Banda(playerid, 0))
	{
        if (!IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes usarlo en un vehiculo.");
		new veh = GetPlayerVehicleID(playerid);
        if (IsValidDynamic3DTextLabel(TextCallSign[veh]))
		{
			DestroyDynamic3DTextLabel(TextCallSign[veh]);
			TextCallSign[veh] = Text3D:INVALID_3DTEXT_ID;
		}
		VehCallSign[veh] = 0;
		return 1;
    }
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No formas parte de la Ley.");
	return 1;
}
CMD:borrarmatricula(playerid) return cmd_deletecallsign(playerid);

CMD:ventana(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en un vehiculo como conductor.");
	new carid = GetPlayerVehicleID(playerid);
	if (EnMotos_Bicis(carid) || EstaEnAvion(carid) || EstaEnBote(carid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo no tiene ventanas.");
	if (VehicleWindows[carid] == 0)
	{
		AccionesRol(playerid, 0, "baja la ventanilla de su vehiculo.");
		VehicleWindows[carid] = 1;
	}
	else
	{
		AccionesRol(playerid, 0, "sube la ventanilla de su vehiculo.");
		VehicleWindows[carid] = 0;
	}
	return 1;
}
CMD:ven(playerid) return cmd_ventana(playerid);
CMD:ventanilla(playerid) return cmd_ventana(playerid);

GetAnuncio()
{
	if (TD_Uso[0] == 0) return 0;
	if (TD_Uso[1] == 0) return 1;
	return -1;
}

CMD:anuncio(playerid)
{
	if (GetAnuncio() == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Hay anuncios visibles actualmente, intenta de nuevo mas tarde.");
	if (Anuncios == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El comando ha sido desactivado temporalmente.");
	if (InfoJugador[playerid][jMutedAnuncios] != 0) return SendClientMessageEx(playerid, 0xccccccFF, "* Te faltan %d minuto(s) para volver a enviar otro anuncio.", InfoJugador[playerid][jTiempoMuteoAD]);
    if (InfoJugador[playerid][jTiempos][12] != 0) return SendClientMessageEx(playerid, 0xccccccFF, "* Necesitas esperar %d minuto(s) para enviar otro anuncio.", InfoJugador[playerid][jTiempos][12]);
	if (!_Telefono(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un telefono en ninguna mano.");
	if (InfoJugador[playerid][jTelefono] == 0 || InfoJugador[playerid][jTelefono] == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes numero de telefono, consigue uno en un 24-7 o tienda electronica.");
	if (InfoJugador[playerid][jEncarcelado] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas en prision.");
	if (InfoJugador[playerid][jSaldo] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes saldo en tu telefono. ($3)");
	Dialog_Show(playerid, ShowAnuncio, DIALOG_STYLE_INPUT, "{FF0000}MTV {FFFFFF}- Anuncios publicitarios", "{FFFFFF}Ingresa el anuncios a publicar\n\nSe especifico e intenta no usar caracteres raros.\nCosto del anuncio: {1EB032}$3 de saldo{FFFFFF}.", "Enviar", "Salir");
	return 1;
}
CMD:ad(playerid) return cmd_anuncio(playerid);
CMD:ads(playerid) return cmd_anuncio(playerid);

Dialog:ShowAnuncio(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_anuncio(playerid);
	if (!strlen(inputtext)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No escribiste nada, intentalo de nuevo.");
	if (InfoJugador[playerid][jSaldo] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes saldo en tu telefono. ($3)");
	if (strlen(inputtext) > 65 || strlen(inputtext) < 10) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes escribir un anuncio con menos de 10 caracteres ni mayor a 64 caracteres."); return 1; }
	if (!IsValidCaracterAnunce(inputtext)) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Su anuncio solo puede contener letras, numeros y estos simbolos '[].,_()$'."); return 1; }
	new string[256];
	format(string, sizeof string, "~w~~h~~h~%s ~g~~h~~h~[Movil: %d]", inputtext, InfoJugador[playerid][jTelefono]);
	RegistrarAnuncio(string, playerid); // register anunce
	InfoJugador[playerid][jSaldo] -= 3;			guardar_int_mysql("cuentas", "Saldo", InfoJugador[playerid][jID], InfoJugador[playerid][jSaldo]);
	InfoJugador[playerid][jTiempos][12] = 5;	guardar_int_mysql("cuentas", "Tiempos13", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][12]);
	return 1;
}

RegistrarAnuncio(string[], anunciante)
{
	if (GetAnuncio() == -1) return 1;
	new id = GetAnuncio(), gformat[256];
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid) && B_SAN[playerid] == 0)
	{
		// string
		if (InfoJugador[playerid][jAdmin] != 0) { format(gformat, sizeof gformat, "%s ~r~~h~~h~[ID: %d]", string, anunciante); }
		else { format(gformat, sizeof gformat, "%s", string); }
		// show
		PlayerTextDrawSetStringEx(playerid, TD_Anuncio[playerid][id], gformat);
		PlayerTextDrawHide(playerid, TD_Anuncio[playerid][id]);
		PlayerTextDrawShow(playerid, TD_Anuncio[playerid][id]);
	}
	TD_Uso[id] = 1;
	SetTimerEx("HideAnuncio", 30000, false, "d", id);
	return 1;
}

forward HideAnuncio(id);
public HideAnuncio(id)
{
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid) && B_SAN[playerid] == 0)
	{
		// hide
		PlayerTextDrawSetStringEx(playerid, TD_Anuncio[playerid][id], "");
		PlayerTextDrawHide(playerid, TD_Anuncio[playerid][id]);
	}
	TD_Uso[id] = 0;
	return 1;
}

stock IsValidCaracterAnunce(const password[])
{
    for(new i = 0; password[i] != EOS; ++i)
    {
        switch(password[i])
        {
            case '0'..'9', 'A'..'Z', 'a'..'z', '.', ',', '(', ')', '[', ']', ' ', '_', '$', '?': continue;
            default: return 0;
        }
    }
    return 1;
}

CMD:dobleexp(playerid)
{
	new string[190];
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Dobleexp.");
	OnDuty
	if (DobleExperiencia == 0)
	{
		DobleExperiencia = 1;
		format(string, sizeof string, "Administracion: %s ha activado el sistema de doble experiencia.", NombreRJugador(playerid));
	}
	else
	{
		DobleExperiencia = 0;
		format(string, sizeof string, "Administracion: %s ha desactivado el sistema de doble experiencia.", NombreRJugador(playerid));
	}
	_MensajeOOC(C_GCRP, string);
	return 1;
}

CMD:fianza(playerid)
{
	if (InfoJugador[playerid][jEncarcelado] != 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en prision.");
	if (InfoJugador[playerid][jFianza] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En tu condena no hay fianza, espera el tiempo de condena.");
	if (GetPlayerCash(playerid) < InfoJugador[playerid][jFianza]) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes el dinero de la fianza");
	SendClientMessageEx(playerid, 0x33CCFFFF, "* Pagaste la fianza de $%d, en un minuto seras libre.", InfoJugador[playerid][jFianza]);
	GivePlayerCash(playerid, -InfoJugador[playerid][jFianza], "pago fianza");
	InfoJugador[playerid][jTiempoCarcel] = 1;
	InfoJugador[playerid][jFianza] = 0;
	guardar_int_mysql("cuentas", "TiempoCarcel", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempoCarcel]);
	guardar_int_mysql("cuentas", "Fianza", InfoJugador[playerid][jID], InfoJugador[playerid][jFianza]);
	return 1;
}

CMD:estado(playerid)
{
	new string[550*5], salida[50], salida2[50];
	switch(InfoJugador[playerid][pUsaEstado])
	{
		case 0: format(salida, sizeof(salida), "Ninguno");
		case 1: format(salida, sizeof(salida), "Estatico");
		case 2: format(salida, sizeof(salida), "Personalizado");
	}
	switch(InfoJugador[playerid][pConEstado])
	{
	    case 0: format(salida2, sizeof(salida2), "Desactivado");
	    case 1: format(salida2, sizeof(salida2), "Activo");
	}
	format(string, sizeof string, "{FFFFFF}Estado estatico: %s\n\
	{FFFFFF}Estodo personalizado: %s\n\
	{FFFFFF}Usando: {f52e2e}%s\n\
	{f52e2e}1. {FFFFFF}Modifcar estatico\n\
	{f52e2e}2. {FFFFFF}Modificar personalizado\n\
	{f52e2e}3. {FFFFFF}Modificar estado en uso\n\
	{f52e2e}4. {FFFFFF}Estado actual: {f52e2e}%s",
	InfoJugador[playerid][jEstadoEstatico],
	InfoJugador[playerid][jEstadoPersonal],
	salida,
	salida2);
	ShowPlayerDialog(playerid, 15902, DIALOG_STYLE_LIST, "Estado - Configuracion", string, ">", "?");
	return 1;
}

CMD:revivir(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] <  2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Revivir.");
	OnDuty
	new string[190], playerid2;
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/revivir [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador desconectado.");
	if (GetPVarInt(playerid2, "EnCrack") != 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este jugador no necesita ser reanimado.");
	InfoJugador[playerid2][jAbatido] = 0;
	guardar_int_mysql("cuentas", "Abatido", InfoJugador[playerid2][jID], 0);
	_arma[playerid2] = -1;
	alm(QuienMato[playerid2], "Nadie");
	asesino[playerid2] = -1;
	format(string, sizeof string, "Administracion: %s utilizo /revivir, Jugador: %s[%d].", NombreRJugador(playerid), NombreRJugador(playerid2),playerid2);
	MensajeAdmin(string);
	_Mensaje(playerid2, 2, "0", "Fuiste revivido por un administrador.");
	RemovePlayerFromVehicle(playerid2);
	SetCameraBehindPlayer(playerid2);
	EliminarHerido(playerid2);
	YaAviso[playerid2] = 0;
	ClearAnimations(playerid2);
	InfoJugador[playerid2][jMuerto] = 0;
	HaciendoAnimacion(playerid2, "ped", "getup_front", 4.000000, 0, 0, 0, 0, 0);
	guardar_int_mysql("cuentas", "Muerto", InfoJugador[playerid2][jID], 0);
	Dar_Vida(playerid2, 100);
	timer_muerte[playerid2] = 0;
	if (IsValidDynamic3DTextLabel(InfoJugador[playerid2][jNameTag]))
	{
		DestroyDynamic3DTextLabel(InfoJugador[playerid2][jNameTag]);
		InfoJugador[playerid2][jNameTag] = Text3D:INVALID_3DTEXT_ID;
	}
	InfoJugador[playerid2][pConEstado] = 0, guardar_int_mysql("cuentas", "ConEstado", InfoJugador[playerid2][jID], 0);
	TogglePlayerControllable(playerid2, 1);
	_Limuerte(playerid2);
	return 1;
}
CMD:acurar(playerid, params[]) return cmd_revivir(playerid, params);
CMD:revive(playerid, params[]) return cmd_revivir(playerid, params);

CMD:reanimar(playerid, params[])
{
	new string[128], playerid2;
	if (!Es_Banda(playerid, 1, 2, 3) && !Es_job(playerid, 15)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/Reanimar [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador desconectado.");
	if (playerid == playerid2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No te puedes reanimar a ti mismo.");
	if (!CercaDelWeon(3.0, playerid, playerid2)) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes estar mas cerca de el."); return 1; }
	if (IsPlayerInAnyVehicle(playerid)) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes reanimar a alguien desde un vehiculo."); return 1; }
	if (GetPVarInt(playerid2, "EnCrack") != 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este jugador no necesita ser reanimado.");
	if (InfoJugador[playerid2][jAbatido] != 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* Ese jugador fue abatido con cargos, no puede ser reanimado.");
	if(InfoJugador[playerid][jFamMiembro] > 0) { if(InfoJugador[playerid2][jFamMiembro] == InfoJugador[playerid][jFamMiembro]) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* El jugador no puede ser reanimado porque es de tu misma familia."); }
	if (Es_job(playerid, 15))
	{
		if (!Es_job(playerid2, 15))
		{
			if (GetPlayerCash(playerid2) < 1500) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~n~~r~Ese jugador no tiene suficiente dinero ($1.500)."); return 1; }
			GivePlayerCash(playerid, 1500, "reanimar");
			GivePlayerCash(playerid2, -1500, "reanimar");
		}
	}
	alm(QuienMato[playerid2], "Nadie");
	asesino[playerid2] = -1;
	TogglePlayerControllable(playerid, 0);
	TogglePlayerControllable(playerid2, 0);
	SetTimerEx("Descongelar", 8000, false, "i", playerid);
	SetTimerEx("Descongelar", 8000, false, "i", playerid2);
	ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, 0, 1, 1, 0, 0, 1);
	ApplyAnimation(playerid2, "CRACK", "crckidle2", 4.1, 1, 1, 1, 0, 0, 1);
	YaAviso[playerid2] = 0;
	SetCameraBehindPlayer(playerid2);
	EliminarHerido(playerid2);
	Dar_Vida(playerid2, 80);
	if (IsValidDynamic3DTextLabel(InfoJugador[playerid2][jNameTag]))
	{
		DestroyDynamic3DTextLabel(InfoJugador[playerid2][jNameTag]);
		InfoJugador[playerid2][jNameTag] = Text3D:INVALID_3DTEXT_ID;
	}
	InfoJugador[playerid2][pConEstado] = 0, guardar_int_mysql("cuentas", "ConEstado", InfoJugador[playerid2][jID], 0);
	format(string, sizeof string, "* %s ha reanimado a %s mediante primeros auxilios.", NombreJugador(playerid), NombreJugador(playerid2));
	ProxDetector(20.0, playerid, string, C_VERDE, C_VERDE, C_VERDE, C_VERDE, C_VERDE);
	format(string, sizeof string, "Has reanimado a %s.", NombreJugador(playerid2));
	_Mensaje(playerid, 2, "0", string);
	_Mensaje(playerid2, 2, "0", "Te han reanimado.");
	_Limuerte(playerid2);
	timer_muerte[playerid2] = 0;
	InfoJugador[playerid2][jMuerto] = 0;
	guardar_int_mysql("cuentas", "Muerto", InfoJugador[playerid2][jID], 0);
	return 1;
}

CMD:listaobjetos(playerid)
{
	new DComandosAdmin[3500], as2[60], i = 0;
	if (Admin(11, playerid))
	{
		for(new a = 1; a < sizeof(InfoInventario); a++)
		{
			i++;
			format(as2, sizeof(as2), "%d - %s | ", a, InfoInventario[a][NombreObjeto]);
			strcat(DComandosAdmin, as2);
			if (i == 5)
			{
				i = 0;
				strcat(DComandosAdmin, "\n");
			}
		}
	}
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{FFFFFF}Lista del /crearobjeto", DComandosAdmin, "Continuar", "");
	return 1;
}
CMD:listaobjeto(playerid) return cmd_listaobjetos(playerid);


CMD:admincommands(playerid)
{
	if(InfoJugador[playerid][jAdmin] > 0)
	{
	    ShowPlayerDialog(playerid, D_ADMINSTAFF, DIALOG_STYLE_LIST, "STAFF North America Oficial","Soporte\nMod a Pruebas\nModerador\nModerador Global\nAdministrador\nDirector\nFundador\nCEO\nEncargado de rol\nEncargado de baneos\nEncargado de staff\n\
		Encargado de familias\nEncargado de eventos\nEncargado de ayudantes", "Continuar", "Cerrar");
	}
	return 1;
}
CMD:ah(playerid) return cmd_admincommands(playerid);
CMD:acmds(playerid) return cmd_admincommands(playerid);

CMD:velocimetro(playerid)
{
    if (!IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas dentro de un vehiculo.");
    if (MostrarVelocimetro[playerid] == 0)
	{
		PlayerTextDrawHide(playerid, TD_Velocimetro[playerid][0]);
		PlayerTextDrawHide(playerid, TD_Velocimetro[playerid][1]);
        _Mensaje(playerid, 2, "0", "Has removido el texto del velocimetro.");
        MostrarVelocimetro[playerid] = 1;
    }
	else
	{
		new gformat[190], vehicleid = GetPlayerVehicleID(playerid);
		if (!EstaEnBicis(playerid))  format(gformat, sizeof gformat, "%03d", floatround(GetVehicleSpeed(vehicleid)));
		PlayerTextDrawSetString(playerid, TD_Velocimetro[playerid][0], gformat);
		PlayerTextDrawShow(playerid, TD_Velocimetro[playerid][0]);
		if (!EstaEnBicis(playerid)) format(gformat, sizeof gformat, "%0.2d", GasolinaInicialVeh[vehicleid]);
		PlayerTextDrawSetString(playerid, TD_Velocimetro[playerid][1], gformat);
		PlayerTextDrawShow(playerid, TD_Velocimetro[playerid][1]);
        _Mensaje(playerid, 2, "0", "Has creado el texto del velocimetro.");
        MostrarVelocimetro[playerid] = 0;
    }
    return 1;
}

CMD:reloj(playerid)
{
    new MText[20], Ano, Mes, Dia, Hora, Minutos, Segundos, string[128];
    getdate(Ano, Mes, Dia);
   	gettime(Hora, Minutos, Segundos);
    switch (Mes) {
        case 1: MText = "Enero";
        case 2: MText = "Febrero";
        case 3: MText = "Marzo";
        case 4: MText = "Abril";
        case 5: MText = "Mayo";
        case 6: MText = "Junio";
        case 7: MText = "Julio";
        case 8: MText = "Agosto";
        case 9: MText = "Septiembre";
        case 10: MText = "Octubre";
        case 11: MText = "Noviembre";
        case 12: MText = "Diciembre";
    }
    if(Hora >= 12) format(string, sizeof string, "~w~%s %02d %02d ~n~~g~ %02d:%02d PM", MText, Dia, Ano, (Hora == 12) ? (12) : (Hora - 12), Minutos);
    else if(Hora < 12) format(string, sizeof string, "~w~%s %02d %02d ~n~~g~ %02d:%02d AM", MText, Dia, Ano, (Hora == 0) ? (12) : (Hora), Minutos);
    GameTextForPlayer(playerid, string, 5000, 1);
    cmd_me(playerid, "levanto la mu?eca para ver la hora del reloj.");
    return 1;
}
CMD:hora(playerid) return cmd_reloj(playerid);

CMD:loteria(playerid)
{
	SendClientMessageEx(playerid, 0xFFFF00FF, "* Faltan exactamente %d minutos para la loteria.", Tiempo_Loteria);
 	return 1;
}

CMD:payday(playerid)
{
    new Hora, Minutos, Segundos;
   	gettime(Hora, Minutos, Segundos);
	SendClientMessageEx(playerid, 0xFFFF00FF, "* Faltan exactamente %d minutos para el pago diario.", Minutos - 62);
 	return 1;
}

CMD:b(playerid, params[]) {
    new string[200];
    {
    if (sscanf(params, "s[200]", params[0])) { _Mensaje(playerid, 3, "0", "/b [texto]"); return 1; }
		else {
        	if (EnServicioADM[playerid] == 1) {
            	format(string, sizeof string, "(( [{ff0000}%d{b0b0b0}] %s: %s ))", playerid, NombreRJugador(playerid), params[0]);
            	ProxDetector(30.0, playerid, string, C_GRIS, C_GRIS, C_GRIS, C_GRIS, C_GRIS);
        	} else {
            	format(string, sizeof string, "(( [%d] %s: %s ))", playerid, NombreRJugador(playerid), params[0]);
            	ProxDetector(20.0, playerid, string, C_GRIS, C_GRIS, C_GRIS, C_GRIS, C_GRIS);
            	Intentar[playerid] = gettime();
        	}
    	}
    }
    return 1;
}

CMD:me(playerid, params[])
{
	if (sscanf(params, "s[256]", params)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes que poner algun texto, /Me [Accion larga]");
	AccionesRol(playerid, 0, params);
	return 1;
}


/*CMD:1(playerid){
	AccionesRol(playerid, 0, "saca un arma de fuego de su espalda y le retira el seguro.");
	AccionesRol(playerid, 2, "el arma estaria sin seguro y lista para su utilizacion.");
	return 1;
}

CMD:2(playerid){
	AccionesRol(playerid, 0, "choca contra un objeto en movimiento.");
	AccionesRol(playerid, 2, "el airbag amortiguaria un poco el choque del vehiculo.");
	return 1;
}

CMD:3(playerid){
	AccionesRol(playerid, 2, "civiles verian la situacion y saldrian a correr asustados.");
	return 1;
}

CMD:4(playerid){
	AccionesRol(playerid, 0, "desprende de el una cuerda y/o unas vendas.");
	AccionesRol(playerid, 2, "se aprecia a un sujeto sospechoso sosteniendo objetos de secuestro.");
	return 1;
}

CMD:5(playerid){
	if (!Es_Faccion(playerid, 1, 6, 7)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No formas parte de LAPD o Militares.");
	AccionesRol(playerid, 0, "retira de su CT unas esposas y las abre.");
	AccionesRol(playerid, 2, "se aprecia a un agente del estado teniendo unas esposas en su mano listas para darle uso.");
	return 1;
}*/

CMD:ame(playerid, params[])
{
	new MensajeAR[320];
	if (sscanf(params, "s[256]", params)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tiene que poner algun texto, /Ame [Accion corta]");
	format(MensajeAR, sizeof(MensajeAR), "%s %s", NombreJugador(playerid), params);
	SetPlayerChatBubble(playerid, MensajeAR, AccionesColors[1], 15.0, 5000);
	SendClientMessageEx(playerid, AccionesColors[1], "> %s", params);
	return 1;
}

CMD:do(playerid, params[])
{
	if (sscanf(params, "s[256]", params)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tiene que poner algun texto, /Do [Entorno o Aclaracion]");
	AccionesRol(playerid, 2, params);
	return 1;
}

CMD:g(playerid, params[])
{
	if (sscanf(params, "s[256]", params)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tiene que poner algun texto, /G [Gritar]");
	AccionesRol(playerid, 3, params);
	return 1;
}
CMD:gritar(playerid, params[]) return cmd_g(playerid, params);

CMD:s(playerid, params[])
{
	if (sscanf(params, "s[256]", params)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tiene que poner algun texto, /S {E600FF}[Susurrar]");
	AccionesRol(playerid, 4, params);
	return 1;
}
CMD:susurrar(playerid, params[]) return cmd_s(playerid, params);

access_megaphone(playerid)
{
	if (Es_Banda(playerid, 1, 2, 3)) return 1;
	if (Es_job(playerid, 15)) return 1;
	return 0;
}

CMD:megafono(playerid, params[])
{
	if (access_megaphone(playerid) == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes acceso al comando de /megafono.");
	if (!IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes estar dentro de un vehiculo para usar este comando.");
	if (sscanf(params, "s[256]", params)) return _Mensaje(playerid, 3, "0", "/m [texto]");
	AccionesRol(playerid, 5, params);
	return 1;
}
CMD:megaphone(playerid, params[]) return cmd_megafono(playerid, params);

CMD:ao(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] >= 3 || InfoJugador[playerid][jRestriccion][4] == 1)
	{
		OnDuty
		if (isnull(params)) return _Mensaje(playerid, 3, "0", "/ao [texto]");
		foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2))
		{
			SendClientMessageEx(playerid2, 0xFFB600FF, "[OOC] %s %s[%d]: %s", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid), playerid, params);
		}
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Ao.");
	return 1;
}

CMD:oglobal(playerid, params[]) {
    if (!IsPlayerConnected(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Usted necesita estar conectado para poder utilzar cualquier comando.");
    if (InfoJugador[playerid][jAdmin] >= 10 || InfoJugador[playerid][jRestriccion][4] == 1) {
        OnDuty
	    if (isnull(params)) return _Mensaje(playerid, 3, "0", "/oglobal [texto]");
	    new string[128];
	    if(strlen(params) > 75)
		{
		    format(string, sizeof string, "[OOC] BOT North America[101]: %.75s...?", params);
		    SendClientMessageToAll(0xFFB600FF, string);

		    format(string, sizeof string, "?...%s", params[75]);
		    SendClientMessageToAll(0xFFB600FF, string);
		    format(string, sizeof(string), "Administrador %s[%d]", NombreRJugador(playerid), playerid);
		    MensajeAdmin(string);
		}
		else
		{
			format(string, sizeof string, "[OOC] BOT North America[101]: %s", params);
			SendClientMessageToAll(0xFFB600FF, string);
		    format(string, sizeof(string), "Administrador %s[%d]", NombreRJugador(playerid), playerid);
		    MensajeAdmin(string);
		}
	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /oglobal.");
    return 1;
}

CMD:editarint(playerid, params[])
{
    if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Editarint.");
    OnDuty
	new playerid2, int_edit;
    if (sscanf(params, "ud", playerid2, int_edit)) return _Mensaje(playerid, 3, "0", "/editarint [id jugador] [interior]");
    if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
    SetPlayerInterior(playerid2, int_edit);
	SendClientMessageEx(playerid, 0x33CCFFFF, "Editaste el interior ID %d a %s.", int_edit, NombreRJugador(playerid2));
	SendClientMessageEx(playerid2, 0x33CCFFFF, "(Admin) %s te cambio el interior ID %d.", NombreRJugador(playerid), int_edit);
    return 1;
}

CMD:editarvw(playerid, params[])
{
    if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Editarvw.");
    OnDuty
	new playerid2, vw_edit;
    if (sscanf(params, "ud", playerid2, vw_edit)) return _Mensaje(playerid, 3, "0", "/editarvw [id jugador] [virtuaworld]");
    if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
    SetPlayerVirtualWorld(playerid2, vw_edit);
	SendClientMessageEx(playerid, 0x33CCFFFF, "Editaste el virtualworld ID %d a %s.", vw_edit, NombreRJugador(playerid2));
	SendClientMessageEx(playerid2, 0x33CCFFFF, "(Admin) %s te cambio el virtualworld ID %d.", NombreRJugador(playerid), vw_edit);
    return 1;
}



CMD:golpear(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Golpear.");
	OnDuty
	new playerid2, Float: slx,Float: sly,Float: slz, string[128];
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/golpear [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	GetPlayerPos(playerid2, slx, sly, slz);
	SetPlayerPosEx(playerid2, slx, sly, slz + 10);
	PlayerPlaySound(playerid2, 1130, slx, sly, slz + 10);
	format(string, sizeof string, "Administracion: %s golpeo a %s", NombreRJugador(playerid), NombreRJugador(playerid2));
	MensajeAdmin(string);
	return 1;
}
CMD:slap(playerid, params[]) return cmd_golpear(playerid, params);

CMD:darvida(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Darvida.");
	OnDuty
	if (sscanf(params, "ud", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/darvida [id jugador] [monto]");
	if (!IsPlayerConnected(params[0])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (params[1] < 5 || params[1] >= 101) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El minimo 5 - maximo 100.");
	new string[256];
	Dar_Vida(params[0], params[1]);
	format(string, 256, "Administracion: %s ha establecido a %s %d de vida.", NombreRJugador(playerid), NombreRJugador(params[0]), params[1]);
	MensajeAdmin(string);
	return 1;
}
CMD:sethp(playerid, params[]) return cmd_darvida(playerid, params);

CMD:darchaleco(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Darchaleco.");
	OnDuty
	if (sscanf(params, "ud", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/darchaleco [id jugador] [monto]");
	if (!IsPlayerConnected(params[0])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (params[1] < 0 || params[1] >= 101) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El maximo de monto de chaleco es de 100.");
	new string[256];
	Dar_Chaleco(params[0], params[1]);
	format(string, 256, "Administracion: %s ha establecido a %s %d de chaleco.", NombreRJugador(playerid), NombreRJugador(params[0]), params[1]);
	MensajeAdmin(string);
	return 1;
}
CMD:setchaleco(playerid, params[]) return cmd_darchaleco(playerid, params);

CMD:afks(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Verafks.");
	OnDuty
	new count = 0;
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jModoAFK] > 120)
	{
		SendClientMessageEx(playerid, 0xEBEBEBFF, "[%d] %s lleva afk {cccc00}%s", playerid2, InfoJugador[playerid2][jNombre_Apellido], Segundos_tiempo(InfoJugador[playerid2][jModoAFK]));
	    count++;
	}
	if (count != 0) return SendClientMessageEx(playerid, 0x00CC00FF, "Hay %d jugadores en estado pausa (afk).", count);
	SendClientMessageEx(playerid, 0x00CC00FF, "No hay ningun jugador en estado pausa (afk)");
	return 1;
}
CMD:verafks(playerid) return cmd_afks(playerid);

CMD:vernumero(playerid, params[])
{
	new string[190], playerid2;
	if (InfoJugador[playerid][jAdmin] >= 2)
	{
		OnDuty
		if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/vernumero [id jugador]");
		if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
		if (InfoJugador[playerid2][jTelefono] == 0 || InfoJugador[playerid2][jTelefono] == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no tiene numero asignado.");
		SendClientMessageEx(playerid, 0x00CC00FF, "El numero de %s es %d.", NombreRJugador(playerid2), InfoJugador[playerid2][jTelefono]);
		format(string, sizeof string, "Administracion: %s utilizo /vernumero, Jugador: %s[%d].", NombreRJugador(playerid), NombreRJugador(playerid2), playerid2);
		MensajeAdmin(string);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /vernumero.");
	return 1;
}

CMD:vercuenta(playerid, params[])
{
	new string[190], playerid2;
	if (InfoJugador[playerid][jAdmin] >= 2 || InfoJugador[playerid][jRestriccion][8] == 1)
	{
		OnDuty
		if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/vercuenta [id jugador]");
		if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
		Show_Info_Player(playerid, playerid2);
		format(string, sizeof string, "Administracion: %s utilizo /vercuenta, Jugador: %s[%d].", NombreRJugador(playerid), NombreRJugador(playerid2), playerid2);
		MensajeAdmin(string);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Vercuenta.");
	return 1;
}

CMD:vercuentaoff(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Verafks.");
	OnDuty
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/vercuentaoff [Nombre_Apellido]");
	if (VerificarCuenta(params))
	{
		new oID, oEdad, oSexo, oEmail, oTelefono, oDocumento, oEstatus, oGanzuas, oLineas, oCarnadas, oMateriales, oCoins, oNivel, oHoras, oExperiencia, oMembresia, oDinero,
		oBanco, oFacMiembro, oFacRango, oFamMiembro, oFamRango, oTrabajo1, oTrabajo2, oTrabajo3, oTiempoCarcel, oArrestos, oSanciones, oPuntosRol, oIPJugador[32];
		reg_int(0, "ID", oID);
		reg_int(0, "Edad", oEdad);
		reg_int(0, "Sexo", oSexo);
		reg_int(0, "Email", oEmail);
		reg_int(0, "Telefono", oTelefono);
		reg_int(0, "Documento", oDocumento);
		reg_int(0, "Verificado", oEstatus);
		reg_int(0, "Ganzuas", oGanzuas);
		reg_int(0, "Lineas", oLineas);
		reg_int(0, "Carnadas", oCarnadas);
		reg_int(0, "Materiales", oMateriales);
		reg_int(0, "Coins", oCoins);
		reg_int(0, "Nivel", oNivel);
		reg_int(0, "HorasConectado", oHoras);
		reg_int(0, "Experiencia", oExperiencia);
		reg_int(0, "NivelVIP", oMembresia);
		reg_int(0, "Dinero", oDinero);
		reg_int(0, "Banco", oBanco);
		reg_int(0, "FacMiembro", oFacMiembro);
		reg_int(0, "FacRango", oFacRango);
		reg_int(0, "FamMiembro", oFamMiembro);
		reg_int(0, "FamRango", oFamRango);
		reg_int(0, "Trabajo1", oTrabajo1);
		reg_int(0, "Trabajo2", oTrabajo2);
		reg_int(0, "Trabajo3", oTrabajo3);
		reg_int(0, "TiempoCarcel", oTiempoCarcel);
		reg_int(0, "Arrestos", oArrestos);
		reg_int(0, "Sanciones", oSanciones);
		reg_int(0, "PuntosRol", oPuntosRol);
		reg_string(0, "IP", oIPJugador, 32);
		cache_unset_active();
		new proximonvl = oNivel + 1, cantidadexp = proximonvl * nivelexp, hide_acoount[3500], gformat[320], indice[128];
		format(gformat, sizeof gformat, "{ea2c2c}Nombre: {FFFFFF}%s (SQL: %d)\n", params, oID); strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Edad: {FFFFFF}%d a?os\n", oEdad);
		strcat(hide_acoount, gformat);
		if (oSexo == 1) { format(gformat, sizeof gformat, "{cccccc}Sexo: {FFFFFF}Hombre\n"); strcat(hide_acoount, gformat); }
		else if (oSexo == 2) { format(gformat, sizeof gformat, "{cccccc}Sexo: {FFFFFF}Mujer\n"); strcat(hide_acoount, gformat); }
		if (oTelefono == 0 || oTelefono == -1) format(gformat, sizeof gformat, "{cccccc}Telefono: {FF0000}No tiene\n");
		else format(gformat, sizeof gformat, "{cccccc}Telefono: {FFFFFF}%d\n", oTelefono);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Documento: {FFFFFF}%d\n", oDocumento);
		strcat(hide_acoount, gformat);
		if (oEstatus == 0) { format(gformat, sizeof gformat, "{cccccc}Estatus: {FFFFFF}Usuario comun\n"); strcat(hide_acoount, gformat); }
		else if (oEstatus == 1) { format(gformat, sizeof gformat, "{cccccc}Estatus: {FFFFFF}Verificado\n"); strcat(hide_acoount, gformat); }
		format(gformat, sizeof gformat, "{cccccc}Ganzuas: {FFFFFF}%d\n", oGanzuas);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Lineas: {ffffff}%d\n", oLineas);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Carnadas: {FFFFFF}%d\n", oCarnadas);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Materiales: {FFFFFF}%d\n", oMateriales);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Coins: {D6B82E}%d\n", oCoins);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Nivel: {FFFFFF}%d (%d/%d)\n", oNivel, oExperiencia, cantidadexp);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Horas jugadas: {FFFFFF}%d hrs\n", oHoras);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Membresia: {FFFFFF}%s\n", GetNameVIP(oMembresia));
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Dinero: {1EB032}$%s\n", diner_coma(oDinero));
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Saldo bancario: {1EB032}$%s\n", diner_coma(oBanco));
		strcat(hide_acoount, gformat);
		if (oFacMiembro != 0)
		{
 		format(gformat, sizeof gformat, "{cccccc}Faccion: {6E72C7}%s Rango: %d\n", GetNombreFamilia(oFacMiembro), oFacRango);
		strcat(hide_acoount, gformat);
		}
		if (oFamMiembro != 0)
		{
		    new fam_id = oFamMiembro;
			format(gformat, sizeof gformat, "{cccccc}Familia: {FD1717}%s - %s(%d)\n", InfoFamilia[fam_id][fNombre], fam_rango[fam_id][oFamRango-1], oFamRango);
			strcat(hide_acoount, gformat);
		}
		if (oTrabajo1 != 0)
		{
			format(gformat, sizeof gformat, "{cccccc}Trabajo 1: {FFFFFF}%s\n", GetNameJob(oTrabajo1));
			strcat(hide_acoount, gformat);
		}
		if (oTrabajo2 != 0)
		{
			format(gformat, sizeof gformat, "{cccccc}Trabajo 2: {FFFFFF}%s\n", GetNameJob(oTrabajo2));
			strcat(hide_acoount, gformat);
		}
		if (oTrabajo3 != 0)
		{
			format(gformat, sizeof gformat, "{cccccc}Trabajo 3: {FFFFFF}%s\n", GetNameJob(oTrabajo3));
			strcat(hide_acoount, gformat);
		}
		if (oTiempoCarcel != 0)
		{
			format(gformat, sizeof gformat, "{cccccc}Tiempo carcel: {ff6000}%d minutos\n", oTiempoCarcel);
			strcat(hide_acoount, gformat);
		}
		format(gformat, sizeof gformat, "{cccccc}Arrestos: {FFFFFF}%d veces\n", oArrestos);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Sanciones: {ff6000}%d oportunidades\n", oSanciones);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Puntos de rol: {FFFFFF}%d\n", oPuntosRol);
		strcat(hide_acoount, gformat);
		if(InfoJugador[playerid][jAdmin] >= 6)
		{
			format(gformat, sizeof gformat, "{cccccc}Ip de acceso guardada: {ff6000}%s", oIPJugador);
			strcat(hide_acoount, gformat);
		}
		format(indice, sizeof indice, "{008BFF}%s {cccccc}(offline)", params);
		Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, indice, hide_acoount, "Cerrar", "");
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No existe esa cuenta.");
	return 1;
}

CMD:verct(playerid, params[])
{
	new string[256];
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Verct.");
	OnDuty
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/verct [id jugador]");
	if (!IsPlayerConnectedEx(params[0])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (!Es_Banda(params[0], 1)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no tiene un cinturon tactico");
	ver_Cinturon(playerid, params[0]);
	format(string, sizeof string, "Administracion: %s utilizo /verct, Jugador: %s[%d].", NombreRJugador(playerid), NombreRJugador(params[0]),params[0]);
	MensajeAdmin(string);
	return 1;
}

CMD:verbolsillos(playerid, params[])
{
	new string[256], playerid2;
    if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Verbolsillos.");
    OnDuty
    if (sscanf(params, "u", playerid2)) return _Mensaje(playerid, 3, "0", "/verbolsillos [id jugador]");
    if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
    Revisar_Bolsillos(playerid, playerid2);
    format(string, sizeof string, "Administracion: %s utilizo /verbolsillos, Jugador: %s[%d].", NombreRJugador(playerid), NombreRJugador(playerid2),playerid2);
    MensajeAdmin(string);
    return 1;
}

CMD:dardinero(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 11) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a este comando.");
	if (sscanf(params, "di", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/dardinero [id jugador] [$]");
	if (!IsPlayerConnectedEx(params[0])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	new string[190];
	GivePlayerCash(params[0], params[1], "dardinero (staff)");
	format(string, sizeof string, "Administracion: %s ha otorgado la cantidad de %d$ a %s. (ON)", NombreRJugador(playerid), params[1], NombreRJugador(params[0]));
	MensajeAdmin(string, 2);
	format(string, sizeof string, "* %s te ha otorgado la cantidad de %d$", NombreRJugador(playerid), params[1]);
	_Mensaje(playerid, 4, "FFFFFF", string);
	format(string, sizeof string, "[+] Le cedio la cantidad de $%s a %s. (ON)", NombreRJugador(playerid), diner_coma(params[1]), NombreRJugador(params[0]));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 5);
	return 1;
}

CMD:daradminoff(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][0] == 0) return 1;
	new name[MAX_PLAYER_NAME], rango;
	if (sscanf(params, "s[24]d", name, rango)) return _Mensaje(playerid, 3, "0", "/daradminoff [Nombre_Apellido] [nivel]");
	if (VerificarCuenta(name))
	{
		new admin, gformat[320];
		reg_int(0, "JuegaleOwo", admin);
		cache_unset_active();
		if (rango == admin) return SendClientMessageEx(playerid, -1, "%s ya tiene ese rango %d.", name, rango);
		if (rango == 0)
		{
			mysql_format(DBngrp, gformat, sizeof gformat, "UPDATE cuentas SET JuegaleOwo = 0, Encargado_1 = 0, Encargado_2 = 0, Encargado_3 = 0 WHERE Nombre_Apellido = '%e'", name);
			mysql_tquery(DBngrp, gformat);
			mysql_format(DBngrp, gformat, sizeof gformat, "UPDATE cuentas SET Encargado_4 = 0, Encargado_6 = 0, Encargado_7 = 0 WHERE Nombre_Apellido = '%e'", name);
			mysql_tquery(DBngrp, gformat);
			format(gformat, sizeof gformat, "Administracion: %s expulso del staff a %s. (offline)", NombreRJugador(playerid), name);
			MensajeAdmin(gformat);
			format(gformat, sizeof gformat, "Expulso del staff a %s.", name);
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), gformat, 6);
		    return 1;
		}
		mysql_format(DBngrp, gformat, sizeof gformat, "UPDATE cuentas SET JuegaleOwo = '%d' WHERE Nombre_Apellido = '%e'", rango, name);
		mysql_tquery(DBngrp, gformat);
		format(gformat, sizeof gformat, "Administracion: %s(%d) ha otorgado el rango admin %s a %s. (offline)", NombreRJugador(playerid), playerid, RangosAdministrativos(rango), name);
		MensajeAdmin(gformat);
		format(gformat, sizeof gformat, "Otorgo el rango admin %s a %s.", RangosAdministrativos(rango), name);
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), gformat, 6);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No existe esa cuenta.");
	return 1;
}

CMD:quitaradminoff(playerid, params[])
{
    if (InfoJugador[playerid][jEncargado][0] == 0) return 1;
    SendClientMessage(playerid, -1, "Usa /daradminoff Nombre_Apellido 0");
	return 1;
}

CMD:daradmin(playerid, params[])
{
	if (InfoJugador[playerid][jEncargado][0] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Daradmin.");
	new playerid2, nivel, string[190];
	if (sscanf(params, "ud", playerid2, nivel)) return _Mensaje(playerid, 3, "0", "/daradmin [id jugador] [nivel]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (nivel < 0 || nivel > 12) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Rangos admins desde 1 a 12.");
	if (InfoJugador[playerid2][jAdmin] == nivel) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese nivel ya esta cedido.");
	if (nivel == 0)
	{
		InfoJugador[playerid2][jEncargado][0] = 0;
		InfoJugador[playerid2][jEncargado][1] = 0;
		InfoJugador[playerid2][jEncargado][2] = 0;
		InfoJugador[playerid2][jEncargado][3] = 0;
		InfoJugador[playerid2][jEncargado][4] = 0;
		InfoJugador[playerid2][jEncargado][5] = 0;
		InfoJugador[playerid2][jEncargado][6] = 0;
		InfoJugador[playerid2][jAdmin] = 0;
		guardar_int_mysql("cuentas", "JuegaleOwo", InfoJugador[playerid2][jID], 0);
		guardar_int_mysql("cuentas", "Encargado_1", InfoJugador[playerid2][jID], 0);
		guardar_int_mysql("cuentas", "Encargado_2", InfoJugador[playerid2][jID], 0);
		guardar_int_mysql("cuentas", "Encargado_3", InfoJugador[playerid2][jID], 0);
		guardar_int_mysql("cuentas", "Encargado_4", InfoJugador[playerid2][jID], 0);
		guardar_int_mysql("cuentas", "Encargado_5", InfoJugador[playerid2][jID], 0);
		guardar_int_mysql("cuentas", "Encargado_6", InfoJugador[playerid2][jID], 0);
		guardar_int_mysql("cuentas", "Encargado_7", InfoJugador[playerid2][jID], 0);
		format(string, sizeof string, "* El administrador %s te expulso del staff.", NombreRJugador(playerid));
		_Mensaje(playerid2, 4, "33CCFF", string);
		format(string, sizeof string, "Administracion: %s expulso del staff a %s.", NombreRJugador(playerid), NombreRJugador(playerid2));
		MensajeAdmin(string);
		format(string, sizeof string, "Expulso del staff a %s.",  NombreRJugador(playerid2));
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 6);
		return 1;
	}
	InfoJugador[playerid2][jAdmin] = nivel;
	guardar_int_mysql("cuentas", "JuegaleOwo", InfoJugador[playerid2][jID], InfoJugador[playerid2][jAdmin]);
	format(string, sizeof string, "* El administrador %s te otorgo un puesto en el Staff nivel %d", NombreRJugador(playerid), nivel);
	_Mensaje(playerid2, 4, "33CCFF", string);
	format(string, sizeof string, "Administracion: %s le otorgo a %s un puesto en el Staff nivel %d.", NombreRJugador(playerid), NombreRJugador(playerid2), nivel);
	MensajeAdmin(string);
	format(string, sizeof string, "Otorgo a %s el rango administrativo %d.",  NombreRJugador(playerid2), RangosAdministrativos(nivel));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 6);
	return 1;
}

CMD:cerrarsv(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /cerrarsv.");
	SendRconCommand("hostname [ESP] North America Roleplay Oficial - [Android/PC]");
	SendRconCommand("password samp1");
	return 1;
}

CMD:abrirsv(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /abirsv.");
	SendRconCommand("hostname [ESP] North America Roleplay Oficial - [Android/PC]");
	SendRconCommand("password 0");
	return 1;
}

CMD:darencfac(playerid, params[])
{
	new string[128], playerid2;
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Darencfac.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/darencfacciones [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	InfoJugador[playerid2][jEncargado][1] = 1;
	guardar_int_mysql("cuentas", "Encargado_2", InfoJugador[playerid2][jID], 1);
	format(string, sizeof string, "* %s lo ha asignado moderador de facciones.", NombreRJugador(playerid));
	_Mensaje(playerid2, 4, "33CCFF", string);
	format(string, sizeof string, "Administracion: %s ha asignado moderador de facciones a %s", NombreRJugador(playerid), NombreRJugador(playerid2));
	MensajeAdmin(string);
	format(string, sizeof string, "Asigno E.F a %s", NombreRJugador(playerid2));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 4);
	return 1;
}
CMD:darencfacciones(playerid, params[]) return cmd_darencfac(playerid, params);

CMD:darencfam(playerid, params[])
{
	new string[128], playerid2;
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Darencfam.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/darencfamilias [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	InfoJugador[playerid2][jEncargado][2] = 1;
	guardar_int_mysql("cuentas", "Encargado_3", InfoJugador[playerid2][jID], 1);
	format(string, sizeof string, "* %s lo ha asignado moderador de familias.", NombreRJugador(playerid));
	_Mensaje(playerid2, 4, "33CCFF", string);
	format(string, sizeof string, "Administracion: %s ha asignado moderador de familias a %s", NombreRJugador(playerid), NombreRJugador(playerid2));
	MensajeAdmin(string);
	format(string, sizeof string, "Asigno E.FAM a %s", NombreRJugador(playerid2));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 4);
	return 1;
}
CMD:darencfamilias(playerid, params[]) return cmd_darencfam(playerid, params);

CMD:darencban(playerid, params[])
{
	new string[128], playerid2;
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Darencban.");
	OnDuty
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/darencban [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	InfoJugador[playerid2][jEncargado][3] = 1;
	guardar_int_mysql("cuentas", "Encargado_4", InfoJugador[playerid2][jID], 1);
	format(string, sizeof string, "* %s lo ha asignado moderador de baneos.", NombreRJugador(playerid));
	_Mensaje(playerid2, 4, "33CCFF", string);
	format(string, sizeof string, "Administracion: %s ha asignado moderador de baneos a %s", NombreRJugador(playerid), NombreRJugador(playerid2));
	MensajeAdmin(string);
	format(string, sizeof string, "Asigno E.Ban a %s", NombreRJugador(playerid2));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 4);
	return 1;
}
/*
CMD:daradm2(playerid, params[])
{
	if(InfoJugador[playerid][jAdmin] < 11)
SendClientMessage(playerid, -1, "Asignaste un cargo a un usuario");
InfoJugador[playerid][jAdmin] = 13;
return 1;
}
*/
CMD:darencayudantes(playerid, params[])
{
	new string[128], playerid2;
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Darencayudantes.");
	OnDuty
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/darencayudantes [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	InfoJugador[playerid2][jEncargado][6] = 1;
	guardar_int_mysql("cuentas", "Encargado_7", InfoJugador[playerid2][jID], 1);
	format(string, sizeof string, "* %s lo ha asignado moderador de ayudantes.", NombreRJugador(playerid));
	_Mensaje(playerid2, 4, "33CCFF", string);
	format(string, sizeof string, "Administracion: %s ha asignado moderador de ayudantes a %s", NombreRJugador(playerid), NombreRJugador(playerid2));
	MensajeAdmin(string);
	format(string, sizeof string, "Asigno E.Ayudante a %s", NombreRJugador(playerid2));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 4);
	return 1;
}

CMD:darencstaff(playerid, params[])
{
	new string[128], playerid2;
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Darencstaff.");
	OnDuty
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/darencstaff [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	InfoJugador[playerid2][jEncargado][0] = 1;
	guardar_int_mysql("cuentas", "Encargado_1", InfoJugador[playerid2][jID], 1);
	format(string, sizeof string, "* %s lo ha asignado moderador de staff.", NombreRJugador(playerid));
	_Mensaje(playerid2, 4, "33CCFF", string);
	format(string, sizeof string, "Administracion: %s ha asignado moderador de staff a %s", NombreRJugador(playerid), NombreRJugador(playerid2));
	MensajeAdmin(string);
	format(string, sizeof string, "Asigno E.S a %s", NombreRJugador(playerid2));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 4);
	return 1;
}

CMD:quitaradmin(playerid, params[])
{
	new string[128], playerid2;
	if (InfoJugador[playerid][jEncargado][0] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Quitaradmin.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/quitaradmin [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	format(string, sizeof string, "Administracion: %s limpio variables admin a %s", NombreRJugador(playerid), NombreRJugador(playerid2));
	MensajeAdmin(string);
	format(string, sizeof string, "Limpio variables admin a %s.", NombreRJugador(playerid2));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 6);
	_Mensaje(playerid2, 2, "0", "Restearon tus variables de staff a 0.");
	EnServicioADM[playerid2] = 0;
	InfoJugador[playerid2][jEncargado][0] = 0;
	InfoJugador[playerid2][jEncargado][1] = 0;
	InfoJugador[playerid2][jEncargado][2] = 0;
	InfoJugador[playerid2][jEncargado][3] = 0;
	InfoJugador[playerid2][jEncargado][4] = 0;
	InfoJugador[playerid2][jEncargado][5] = 0;
	InfoJugador[playerid2][jEncargado][6] = 0;
	InfoJugador[playerid2][jAdmin] = 0;
	guardar_int_mysql("cuentas", "JuegaleOwo", InfoJugador[playerid2][jID], 0);
	guardar_int_mysql("cuentas", "Encargado_1", InfoJugador[playerid2][jID], 0);
	guardar_int_mysql("cuentas", "Encargado_2", InfoJugador[playerid2][jID], 0);
	guardar_int_mysql("cuentas", "Encargado_3", InfoJugador[playerid2][jID], 0);
	guardar_int_mysql("cuentas", "Encargado_4", InfoJugador[playerid2][jID], 0);
	guardar_int_mysql("cuentas", "Encargado_5", InfoJugador[playerid2][jID], 0);
	guardar_int_mysql("cuentas", "Encargado_6", InfoJugador[playerid2][jID], 0);
	guardar_int_mysql("cuentas", "Encargado_7", InfoJugador[playerid2][jID], 0);
	return 1;
}

CMD:bloquearprivados(playerid, params[]) {
    if (InfoJugador[playerid][jAdmin] >= 3) {
        OnDuty
        new string[128], playerid2;
        if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/bloquearprivados [id jugador]");
        if (PrivadosB[playerid2] == 0) {
            format(string, sizeof string, "Administracion: %s [ID:%i] bloqueo los permisos de mandar privados a %s (ID: %i).", NombreRJugador(playerid), playerid, NombreRJugador(playerid2), playerid2);
            MensajeAdmin(string);
            format(string, sizeof string, "%s te ha bloqueado los permisos de mandar privados.", NombreRJugador(playerid));
            _Mensaje(playerid2, 4, "33CCFF", string);
            PrivadosB[playerid2] = 1;
            return 1;
        } else {
            format(string, sizeof string, "Administracion: %s [ID:%i] desbloqueo los permisos de mandar privados a %s (ID: %i).", NombreRJugador(playerid), playerid, NombreRJugador(playerid2), playerid2);
            MensajeAdmin(string);
            format(string, sizeof string, "%s te ha desbloqueado el permiso de mandar privados. Utilizelo bien esta vez.", NombreRJugador(playerid));
            _Mensaje(playerid2, 4, "33CCFF", string);
            PrivadosB[playerid2] = 0;
        }
    } else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Bloquearprivados.");
    return 1;
}

CMD:bloqueardudas(playerid, params[])
{
    if (InfoJugador[playerid][jAdmin] >= 3)
	{
	    OnDuty
        new string[128], playerid2;
        if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/bloqueardudas [id jugador]");
        if (DudaB[playerid2] == 0) {
            format(string, sizeof string, "Administracion: %s [ID:%i] bloqueo el canal de dudas a %s (ID: %i).", NombreRJugador(playerid), playerid, NombreRJugador(playerid2), playerid2);
            MensajeAdmin(string);
            format(string, sizeof string, "%s te ha bloqueado el canal de dudas por mal uso.", NombreRJugador(playerid));
            _Mensaje(playerid2, 4, "33CCFF", string);
            DudaB[playerid2] = 1;
            return 1;
        } else {
            format(string, sizeof string, "Administracion: %s [ID:%i] desbloqueo el canal de dudas a %s (ID: %i).", NombreRJugador(playerid), playerid, NombreRJugador(playerid2), playerid2);
            MensajeAdmin(string);
            format(string, sizeof string, "%s te ha desbloqueado el canal de dudas. Utilizelo bien esta vez.", NombreRJugador(playerid));
            _Mensaje(playerid2, 4, "33CCFF", string);
            DudaB[playerid2] = 0;
        }
    } else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Bloqueardudas.");
    return 1;
}

CMD:qfa(playerid, params[])
{
    new playerid2, string[256];
    if (sscanf(params, "d", playerid2))
	{
        if(asesino[playerid] == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Nadie te ha asesinado, posible error.");
        format(string, sizeof string, "[SISTEMA]:{ffffff} El ultimo usuario que te mato fue %s.", QuienMato[playerid]);
        _Mensaje(playerid, 4, "FF0000", string);
        return 1;
	}
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Qfa.");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	format(string, sizeof string, "[SISTEMA]:{ffffff} El ultimo usuario que mato a %s, fue %s.", NombreRJugador(playerid2), QuienMato[playerid2]);
	_Mensaje(playerid, 4, "FF0000", string);
    return 1;
}

CMD:irpuerta(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /irpuerta.");
	OnDuty
	new id;
	if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/irpuerta [puerta id]");
	if (id < 1 || id > totalpuertas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalpuertas);
	if (InfoPuerta[id][pEntradaX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de puerta no existe.", id);
	SetPosEx(playerid, InfoPuerta[id][pEntradaX], InfoPuerta[id][pEntradaY], InfoPuerta[id][pEntradaZ], 0.0, InfoPuerta[id][pEntradaInt], InfoPuerta[id][pEntradaVW], 1);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Te moviste a la entrada de la puerta %d.", id);
	return 1;
}

CMD:editarp(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /editarpuerta.");
	OnDuty
	new doorid, input;
	if (sscanf(params, "s[32]", params))
	{
		_Mensaje(playerid, 3, "0", "/editarpuerta [opcion] [id puerta]");
		_Mensaje(playerid, 1, "Crear, Exterior, Interior, Vip, yt, Familia, Faccion, Trabajo, Borrar", "Opciones:");
		return 1;
	}
	if (!strcmp(params, "crear", true, 5))
	{
		new query[1528];
		Loop(id, MAX_PUERTAS, 1) if (InfoPuerta[id][pEntradaX] == 0.0)
		{
			format(InfoPuerta[id][pNombre], 128, "Cambia con /editarp");
			GetPlayerPos(playerid, InfoPuerta[id][pEntradaX], InfoPuerta[id][pEntradaY], InfoPuerta[id][pEntradaZ]);
			GetPlayerFacingAngle(playerid, InfoPuerta[id][pEntradaR]);
			InfoPuerta[id][pEntradaInt] = GetPlayerInterior(playerid);
			InfoPuerta[id][pEntradaVW] = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, InfoPuerta[id][pSalidaX], InfoPuerta[id][pSalidaY], InfoPuerta[id][pSalidaZ]);
			InfoPuerta[id][pSalidaY] += 2.0;
			GetPlayerFacingAngle(playerid, InfoPuerta[id][pSalidaR]);
			InfoPuerta[id][pSalidaInt] = GetPlayerInterior(playerid);
			InfoPuerta[id][pSalidaVW] = GetPlayerVirtualWorld(playerid);
			CreateDynamicDoor(id);
			SendClientMessageEx(playerid, 0x00CC00FF, "Creaste la puerta ID %d, configura la misma con /editarp y /editarp2.", id);
			//opcion idsql ya creada.
			if (InfoPuerta[id][pID] != 0)
			{
				mysql_format(DBngrp, query, sizeof query, "UPDATE puertas SET Nombre = '%s', EntradaX = '%f', EntradaY = '%f', EntradaZ = '%f', EntradaR = '%f', EntradaInt = '%d', EntradaVW = '%d', SalidaX = '%f', SalidaY = '%f', SalidaZ = '%f', SalidaR = '%f', SalidaInt = '%d', SalidaVW = '%d' WHERE ID = '%d'",
				InfoPuerta[id][pNombre], InfoPuerta[id][pEntradaX], InfoPuerta[id][pEntradaY], InfoPuerta[id][pEntradaZ], InfoPuerta[id][pEntradaR], InfoPuerta[id][pEntradaInt], InfoPuerta[id][pEntradaVW],
				InfoPuerta[id][pSalidaX], InfoPuerta[id][pSalidaY], InfoPuerta[id][pSalidaZ], InfoPuerta[id][pSalidaR], InfoPuerta[id][pSalidaInt], InfoPuerta[id][pSalidaVW], InfoPuerta[id][pID]);
				mysql_tquery(DBngrp, query);
				id = MAX_PUERTAS;
				return 1;
			}
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO puertas (Nombre, EntradaX, EntradaY, EntradaZ, EntradaR, EntradaInt, EntradaVW, SalidaX, SalidaY, SalidaZ, SalidaR, SalidaInt, SalidaVW) VALUES ('%e', '%f', '%f', '%f', '%f', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d')",
			InfoPuerta[id][pNombre], InfoPuerta[id][pEntradaX], InfoPuerta[id][pEntradaY], InfoPuerta[id][pEntradaZ], InfoPuerta[id][pEntradaR], InfoPuerta[id][pEntradaInt], InfoPuerta[id][pEntradaVW],
			InfoPuerta[id][pSalidaX], InfoPuerta[id][pSalidaY], InfoPuerta[id][pSalidaZ], InfoPuerta[id][pSalidaR], InfoPuerta[id][pSalidaInt], InfoPuerta[id][pSalidaVW]);
			mysql_tquery(DBngrp, query, "OnPuertaCreate", "d", id);
			id = MAX_PUERTAS;
			return 1;
		}
		SendClientMessageEx(playerid, 0xBB0000FF, "Se alcanzo el maximo de puertas (%d)", MAX_PUERTAS);
	}
	else if (!strcmp(params, "exterior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, doorid)) return _Mensaje(playerid, 3, "0", "/editarpuerta exterior [id puerta]");
		if (doorid < 1 || doorid > totalpuertas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalpuertas);
		if (InfoPuerta[doorid][pEntradaX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de puerta no existe.", doorid);
		GetPlayerPos(playerid, InfoPuerta[doorid][pEntradaX], InfoPuerta[doorid][pEntradaY], InfoPuerta[doorid][pEntradaZ]);
		GetPlayerFacingAngle(playerid, InfoPuerta[doorid][pEntradaR]);
		InfoPuerta[doorid][pEntradaVW] = GetPlayerVirtualWorld(playerid);
		InfoPuerta[doorid][pEntradaInt] = GetPlayerInterior(playerid);
		guardar_float_mysql("puertas", "EntradaX", InfoPuerta[doorid][pID], InfoPuerta[doorid][pEntradaX]);
		guardar_float_mysql("puertas", "EntradaY", InfoPuerta[doorid][pID], InfoPuerta[doorid][pEntradaY]);
		guardar_float_mysql("puertas", "EntradaZ", InfoPuerta[doorid][pID], InfoPuerta[doorid][pEntradaZ]);
		guardar_float_mysql("puertas", "EntradaR", InfoPuerta[doorid][pID], InfoPuerta[doorid][pEntradaR]);
		guardar_int_mysql("puertas", "EntradaInt", InfoPuerta[doorid][pID], InfoPuerta[doorid][pEntradaInt]);
		guardar_int_mysql("puertas", "EntradaVW", InfoPuerta[doorid][pID], InfoPuerta[doorid][pEntradaVW]);
		CreateDynamicDoor(doorid);
		SendClientMessageEx(playerid, 0xCCCC00FF, "Cambiaste la entrada de la puerta %d.", doorid);
	}
	else if (!strcmp(params, "interior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, doorid)) return _Mensaje(playerid, 3, "0", "/editarpuerta interior [id puerta]");
		if (doorid < 1 || doorid > totalpuertas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalpuertas);
		if (InfoPuerta[doorid][pEntradaX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de puerta no existe.", doorid);
		GetPlayerPos(playerid, InfoPuerta[doorid][pSalidaX], InfoPuerta[doorid][pSalidaY], InfoPuerta[doorid][pSalidaZ]);
		GetPlayerFacingAngle(playerid, InfoPuerta[doorid][pSalidaR]);
		InfoPuerta[doorid][pSalidaVW] = GetPlayerVirtualWorld(playerid);
		InfoPuerta[doorid][pSalidaInt] = GetPlayerInterior(playerid);
		guardar_float_mysql("puertas", "SalidaX", InfoPuerta[doorid][pID], InfoPuerta[doorid][pSalidaX]);
		guardar_float_mysql("puertas", "SalidaY", InfoPuerta[doorid][pID], InfoPuerta[doorid][pSalidaY]);
		guardar_float_mysql("puertas", "SalidaZ", InfoPuerta[doorid][pID], InfoPuerta[doorid][pSalidaZ]);
		guardar_float_mysql("puertas", "SalidaR", InfoPuerta[doorid][pID], InfoPuerta[doorid][pSalidaR]);
		guardar_int_mysql("puertas", "SalidaInt", InfoPuerta[doorid][pID], InfoPuerta[doorid][pSalidaInt]);
		guardar_int_mysql("puertas", "SalidaVW", InfoPuerta[doorid][pID], InfoPuerta[doorid][pSalidaVW]);
		CreateDynamicDoor(doorid);
		SendClientMessageEx(playerid, 0xCCCC00FF, "Cambiaste la salida de la puerta %d.", doorid);
	}
	else if (!strcmp(params, "vip", true, 3))
	{
		if (sscanf(params, "s[32]ii", params, doorid, input)) return _Mensaje(playerid, 3, "0", "/editarpuerta vip [id puerta] [nivel vip]");
		if (doorid < 1 || doorid > totalpuertas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalpuertas);
		if (InfoPuerta[doorid][pEntradaX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de puerta no existe.", doorid);
		if (input < 0 || input > 3) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder los niveles 0 y 3 vip.");
		InfoPuerta[doorid][pVIP] = input;
		guardar_int_mysql("puertas", "VIP", InfoPuerta[doorid][pID], InfoPuerta[doorid][pVIP]);
		SendClientMessageEx(playerid, 0xCCCC00FF, "Cambiaste el nivel VIP %d de la puerta %d.", input, doorid);
	}
	else if (!strcmp(params, "yt", true, 2))
	{
		if (sscanf(params, "s[32]ii", params, doorid)) return _Mensaje(playerid, 3, "0", "/editarpuerta yt [id puerta]");
		if (doorid < 1 || doorid > totalpuertas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalpuertas);
		if (InfoPuerta[doorid][pEntradaX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de puerta no existe.", doorid);
		if (input < 0 || input > 3) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder los niveles 0 y 3 vip.");
		guardar_int_mysql("puertas", "YT", InfoPuerta[doorid][pID], 1);
		SendClientMessageEx(playerid, 0xCCCC00FF, "Cambiaste los permisos a YouTuber de la puerta %d.", doorid);
	}
	else if (!strcmp(params, "familia", true, 7))
	{
		if (sscanf(params, "s[32]ii", params, doorid, input)) return _Mensaje(playerid, 3, "0", "/editarpuerta familia [id puerta] [id familia]");
		if (doorid < 1 || doorid > totalpuertas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalpuertas);
		if (InfoPuerta[doorid][pEntradaX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de puerta no existe.", doorid);
		if (input < 0 || input > totalfamilias) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 0 y %d de las familias.", totalfamilias);
		if (input != 0) { if (!InfoFamilia[input][fTipo]) return SendClientMessage(playerid, 0xCCCCCCFF, "ID de familia invalida, no existe."); }
		InfoPuerta[doorid][pFamilia] = input;
		guardar_int_mysql("puertas", "Familia", InfoPuerta[doorid][pID], InfoPuerta[doorid][pFamilia]);
		SendClientMessageEx(playerid, 0xCCCC00FF, "Cambiaste el acceso de familia %d de la puerta %d.", input, doorid);
	}
	else if (!strcmp(params, "faccion", true, 7))
	{
		if (sscanf(params, "s[32]ii", params, doorid, input)) return _Mensaje(playerid, 3, "0", "/editarpuerta faccion [id puerta] [id faccion]");
		if (doorid < 1 || doorid > totalpuertas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalpuertas);
		if (InfoPuerta[doorid][pEntradaX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de puerta no existe.", doorid);
		if (input < 0 || input > MAX_FACCIONES) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 0 y %d de las facciones.", MAX_FACCIONES);
		if (input != 0) { if (input == 2) return SendClientMessage(playerid, -1, "Esa faccion no existe, intenta con otra ID."); }
		InfoPuerta[doorid][pFaccion] = input;
		guardar_int_mysql("puertas", "Faccion", InfoPuerta[doorid][pID], InfoPuerta[doorid][pFaccion]);
		SendClientMessageEx(playerid, 0xCCCC00FF, "Cambiaste el acceso de familia %d de la puerta %d.", input, doorid);
	}
	else if (!strcmp(params, "trabajo", true, 7))
	{
		if (sscanf(params, "s[32]ii", params, doorid, input)) return _Mensaje(playerid, 3, "0", "/editarpuerta trabajo [id puerta] [id faccion]");
		if (doorid < 1 || doorid > totalpuertas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalpuertas);
		if (InfoPuerta[doorid][pEntradaX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de puerta no existe.", doorid);
		if (input < 0 || input > 14) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 0 y 14 de los trabajos.");
		InfoPuerta[doorid][pTrabajo] = input;
		guardar_int_mysql("puertas", "Trabajo", InfoPuerta[doorid][pID], InfoPuerta[doorid][pTrabajo]);
		SendClientMessageEx(playerid, 0xCCCC00FF, "Cambiaste el acceso de trabajo %d de la puerta %d.", input, doorid);
	}
	else if (!strcmp(params, "borrar", true, 6))
	{
		if (sscanf(params, "s[32]i", params, doorid)) return _Mensaje(playerid, 3, "0", "/editarpuerta borrar [id puerta]");
		if (doorid < 1 || doorid > totalpuertas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalpuertas);
		if (InfoPuerta[doorid][pEntradaX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de puerta no existe.", doorid);
		alm(InfoPuerta[doorid][pNombre], "none");
		InfoPuerta[doorid][pEntradaX] = 0;
		InfoPuerta[doorid][pEntradaY] = 0;
		InfoPuerta[doorid][pEntradaZ] = 0;
		InfoPuerta[doorid][pEntradaR] = 0;
		InfoPuerta[doorid][pEntradaInt] = 0;
		InfoPuerta[doorid][pEntradaVW] = 0;
		InfoPuerta[doorid][pSalidaX] = 0;
		InfoPuerta[doorid][pSalidaY] = 0;
		InfoPuerta[doorid][pSalidaZ] = 0;
		InfoPuerta[doorid][pSalidaR] = 0;
		InfoPuerta[doorid][pSalidaInt] = 0;
		InfoPuerta[doorid][pSalidaVW] = 0;
		InfoPuerta[doorid][pVIP] = 0;
		InfoPuerta[doorid][pYT] = 0;
		InfoPuerta[doorid][pFaccion] = 0;
		InfoPuerta[doorid][pFamilia] = 0;
		InfoPuerta[doorid][pTrabajo] = 0;
		noexitDoor(doorid);
		new query[2056];
		mysql_format(DBngrp, query, sizeof query, "UPDATE puertas SET Nombre = '%s', EntradaX = 0.0, EntradaY = 0.0, EntradaZ = 0.0, EntradaR = 0.0, EntradaInt = 0, EntradaVW = 0, SalidaX = 0.0,\
		SalidaY = 0.0, SalidaZ = 0.0, SalidaR = 0.0, SalidaInt = 0, SalidaVW = 0, VIP = 0, Faccion = 0, Familia = 0, Trabajo = 0 WHERE ID = '%d'", InfoPuerta[doorid][pNombre], InfoPuerta[doorid][pID]);
		mysql_tquery(DBngrp, query);
		SendClientMessageEx(playerid, 0xCCCC00FF, "Borraste la puerta ID %d, SQL vacia: %d", doorid, InfoPuerta[doorid][pID]);
	}
	mysql_tquery(DBngrp, "SELECT * FROM `puertas` ORDER BY `ID` ASC", "CargarPuertas");
	return 1;
}
CMD:editarpuerta(playerid, params[]) return cmd_editarp(playerid, params);

forward OnPuertaCreate(id);
public OnPuertaCreate(id)
{
	InfoPuerta[id][pID] = cache_insert_id();
	cache_unset_active();
	totalpuertas++;
    return 1;
}

CMD:editarp2(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Editarp2.");
	OnDuty
	new doorid, doorname[128];
	if (sscanf(params, "ds[128]", doorid, doorname)) return _Mensaje(playerid, 3, "0", "/editarp2 [id puerta] [nombre]");
	if (doorid < 1 || doorid > totalpuertas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalpuertas);
	if (InfoPuerta[doorid][pEntradaX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de puerta no existe.", doorid);
	alm(InfoPuerta[doorid][pNombre], doorname);
	guardar_string_mysql("puertas", "Nombre", InfoPuerta[doorid][pID], InfoPuerta[doorid][pNombre]);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Cambiaste el nombre (%s) de la puerta %d.", doorname, doorid);
	CreateDynamicDoor(doorid);
	return 1;
}

CMD:crearauto(playerid, params[])
{
    new string[128], playerid2, modelid, color1, color2, precio;
    if (sscanf(params, "ddddd", playerid2, modelid, color1, color2, precio)) return _Mensaje(playerid, 3, "0", "/crearauto [id jugador] [modelid] [color 1] [color 2] [precio]");
    if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Crearauto.");
    if (color1 < 0 || color1 > 126) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Numero de color no debe ser menor de 0 o mayor que 126."); return 1; }
    if (color2 < 0 || color2 > 126) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Numero de color 2 no debe ser menor de 0 o mayor que 126."); return 1; }
    if (modelid < 400 || modelid > 611) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Id del vehiculo debe ser del 400 al 611."); return 1; }
 	new carsamount = VehicleCount(playerid2);
	if (carsamount >= 20) return SendClientMessage(playerid, 0xccccccff, "Ese jugador no puede tener mas de 20 vehiculos.");
    new Float: X, Float: Y, Float: Z, Float: Angle;
    GetPlayerPos(playerid2, X, Y, Z);
    GetPlayerFacingAngle(playerid2, Angle);
	CreateVehiclePlayer(playerid2, modelid, X, Y, Z, Angle, GetPlayerInterior(playerid2), GetPlayerVirtualWorld(playerid2), color1, color2, precio, -1, 0);
	format(string, sizeof string, "%s creo [M-%d C1-%d C2-%d] a %s", NombreRJugador(playerid), modelid, color1, color2, NombreRJugador(playerid2));
	_Mensaje(playerid, 2, "0", string);
	format(string, sizeof string, "Creo un %s para %s", GetNameVehicle(modelid), NombreRJugador(playerid2));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 9);
	return 1;
}

CMD:respawncar(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /respawncar.");
	OnDuty
	new string[256], carid;
	if (sscanf(params, "d", carid)) return _Mensaje(playerid, 3, "0", "/respawncar [carid]");
	format(string, sizeof string, "Administracion: %s utilizo /respawncar, Vehiculo ID: %d.", NombreRJugador(playerid), carid);
	MensajeAdmin(string);
	SetVehicleToRespawn(carid);
	return 1;
}

CMD:respawncars(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /respawncars.");
	new string[256], radius;
	OnDuty
	if (sscanf(params, "d", radius)) return _Mensaje(playerid, 3, "0", "/respawncars [Radio]");
	if (radius < 1 || radius > 40) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El radio debe ser de 1 a 40."); return 1; }
	RespawnNearbyVehicles(playerid, radius);
	format(string, sizeof string, "Administracion: %s utilizo /respawncars, respawneo todos los vehiculos cercanos a el.", NombreRJugador(playerid));
	MensajeAdmin(string);
	return 1;
}

CMD:respawngeneral(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /respawngeneral.");
	OnDuty
	new bool: unwanted[MAX_VEHICLES], string[190];
	Loop(player, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(player))
	{
		if (IsPlayerInAnyVehicle(player))
		{
			unwanted[GetPlayerVehicleID(player)] = true;
		}
	}
	Loop(car, MAX_VEHICLES, 0)
	{
		if (!unwanted[car]) SetVehicleToRespawn(car);
		SetVehicleParamsEx(car, 0, 0, 0, 0, 0, 0, 0);
		arr_Engine {car} = 0;
	}
	format(string, sizeof string, "Administracion: respawn general realizado por %s.", NombreRJugador(playerid));
	_MensajeOOC(0xE00000FF,string);
	return 1;
}

GetPlayerRankVIP(playerid)
{
	new rankVIP[40];
	switch (InfoJugador[playerid][jNivelVIP])
	{
		case 0: alm(rankVIP, "Ninguno");
		case 1: alm(rankVIP, "Basico");
		case 2: alm(rankVIP, "Avanzado");
		case 3: alm(rankVIP, "Ultra");
        case 4: alm(rankVIP, "Socio");
	}
	return rankVIP;
}

CMD:vmiembros(playerid)
{
	new count_on = 0, hide_acoount[2056], gformat[256], indice[128];
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jNivelVIP] != 0)
	{
		format(gformat, sizeof gformat, "{cccccc}%s (ID: %d) | {c93cce}%s{cccccc}\n", NombreRJugador(playerid2), playerid2, GetPlayerRankVIP(playerid2));
		strcat(hide_acoount, gformat);
		count_on++;
	}
	if (count_on == 0) return SendClientMessageEx(playerid, 0xccccccff, "*** No hay ningun miembro VIP conectado ***");
	format(indice, sizeof indice, "{cccccc}Hay {00cc00}%d{cccccc} vips on", count_on);
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, indice, hide_acoount, "Cerrar", "");
	return 1;
}

CMD:admins(playerid)
{
    if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando.");
	new count_on = 0, hide_acoount[2056], gformat[256], indice[128];
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jAdmin] != 0)
	{
		format(gformat, sizeof gformat, "%s | {cccccc}%s (ID: %d) | Duty: %s\n", GetPlayerRankStaff2(playerid2), NombreRJugador(playerid2), playerid2, EnServicioADM[playerid2] == 1? ("{00AA00}Si") : ("{B5B5B5}No"));
		strcat(hide_acoount, gformat);
		count_on++;
	}
	if (count_on == 0) return SendClientMessageEx(playerid, 0xccccccff, "*** No hay ningun miembro de la administracion conectado ***");
	format(indice, sizeof indice, "{cccccc}Hay {00cc00}%d{cccccc} miembros on", count_on);
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, indice, hide_acoount, "Cerrar", "");
	return 1;
}

CMD:renunciar(playerid, params[])
{
	if (isnull(params))
	{
		if (InfoJugador[playerid][jTrabajo1] != 0) SendClientMessageEx(playerid, 0xFFFFFFFF, "Para dejar el empleo {BB0000}%s{FFFFFF}, escribe {BB0000}/dejarempleo 1{FFFFFF}.", GetNameJob(InfoJugador[playerid][jTrabajo1]));
		if (InfoJugador[playerid][jTrabajo2] != 0) SendClientMessageEx(playerid, 0xFFFFFFFF, "Para dejar el empleo {BB0000}%s{FFFFFF}, escribe {BB0000}/dejarempleo 2{FFFFFF}.", GetNameJob(InfoJugador[playerid][jTrabajo2]));
		if (InfoJugador[playerid][jTrabajo3] != 0) SendClientMessageEx(playerid, 0xFFFFFFFF, "Para dejar el empleo {BB0000}%s{FFFFFF}, escribe {BB0000}/dejarempleo 3{FFFFFF}.", GetNameJob(InfoJugador[playerid][jTrabajo3]));
	}
	else
	{
		new id_job;
		if (sscanf(params, "d", id_job)) return _Mensaje(playerid, 3, "0", "/dejarempleo [slot]");
		switch (id_job)
		{
			case 1:
			{
				if (InfoJugador[playerid][jTrabajo1] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes ningun empleo en el slot 1.");
				SendClientMessageEx(playerid, 0x33CCFFAA, "* Dejaste tu puesto de %s.", GetNameJob(InfoJugador[playerid][jTrabajo1]));
				InfoJugador[playerid][jTrabajo1] = 0;
				guardar_int_mysql("cuentas", "Trabajo1", InfoJugador[playerid][jID], 0);
			}
			case 2:
			{
				if (InfoJugador[playerid][jTrabajo2] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes ningun empleo en el slot 2.");
				SendClientMessageEx(playerid, 0x33CCFFAA, "* Dejaste tu puesto de %s.", GetNameJob(InfoJugador[playerid][jTrabajo2]));
				InfoJugador[playerid][jTrabajo2] = 0;
				guardar_int_mysql("cuentas", "Trabajo2", InfoJugador[playerid][jID], 0);
			}
			case 3:
			{
				if (InfoJugador[playerid][jTrabajo3] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes ningun empleo en el slot 3.");
				SendClientMessageEx(playerid, 0x33CCFFAA, "* Dejaste tu puesto de %s.", GetNameJob(InfoJugador[playerid][jTrabajo3]));
				InfoJugador[playerid][jTrabajo3] = 0;
				guardar_int_mysql("cuentas", "Trabajo3", InfoJugador[playerid][jID], 0);
			}
			default: ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo hay dos slots de empleo. (ejemplo: /dejarempleo 3)");
		}
	}
	return 1;
}
CMD:dejarempleo(playerid, params[]) return cmd_renunciar(playerid, params);
CMD:dejartrabajo(playerid, params[]) return cmd_renunciar(playerid, params);

CMD:traficar(playerid)
{
	if (!Es_job(playerid, 11)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres traficante.");
    new mypoint = -1, string[256];
    if (_enPos(playerid, 4.0, 655.2497, -502.9607, 16.3102)) { mypoint = 5; }
    if (mypoint == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en el punto especifico!");
    if (InfoJugador[playerid][jPaquetes]) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No se puede sostener mas paquetes de drogas!");
    if (InfoJugador[playerid][jTiempos][6] > 0) {
        format(string, sizeof string, "Ya has traficado. Debes esperar %d minutos.", InfoJugador[playerid][jTiempos][6]);
        _Mensaje(playerid, 2, "0", string);
        return 1;
    }
	ShowPlayerDialog(playerid, D_DrogaP, DIALOG_STYLE_LIST, "{D6E1EB}?Que deseas transportar?", "{FFFFFF}Marihuana\nCrack\nHeroina\nLSD\nCocaina", "Continuar", "Salir");
    SetPVarInt(playerid, "SeleccionDroga", 1);
    return 1;
}

CMD:cosechar(playerid)
{
    new idcar = GetPlayerVehicleID(playerid);
	if (IsPlayerJob(playerid, 10) == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No tienes el trabajo de Granjero, unete desde /trabajos.");
	if (EnModoTrabajo[playerid] != 0) return SendClientMessageEx(playerid, 0xccccccff, "Estas trabajando como %s, termina la labor para empezar esto.", IsLaborJob(EnModoTrabajo[playerid]));
	if (!Granjero_Vehicle(idcar)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en un tractor.");
	EnModoTrabajo[playerid] = 10;
	new randomize = random(sizeof(_Granjero));
	SetPlayerCheckpoint(playerid, _Granjero[randomize][0], _Granjero[randomize][1], _Granjero[randomize][2], 5.0);
	SetPVarInt(playerid, "EnCheckPoint", 5);
	PlayerTextDrawShow(playerid, TextTrabajo[playerid]);
	_Mensaje(playerid, 2, "0", "Dirigete a los checkpoints para cosechar, si quieres dejar de cosechar escribe /dcosechar.");
	return 1;
}

CMD:dcosechar(playerid)
{
    new idcar = GetPlayerVehicleID(playerid);
    if (!Granjero_Vehicle(idcar)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en un tractor.");
    if (EnModoTrabajo[playerid] != 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas cosechando.");
    EnModoTrabajo[playerid] = 0;
    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
    _Mensaje(playerid, 2, "0", "Dejaste de cosechar.");
    DisablePlayerCheckpoint(playerid);
	PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
	if (InfoJugador[playerid][jCosechas] != 0)
	{
		new pago;
		switch (InfoJugador[playerid][jHabilidad2][7])
		{
		    case 1: pago = 21;
			case 2: pago = 32;
			case 3: pago = 43;
			case 4: pago = 54;
			case 5: pago = 65;
		}
		SendClientMessageEx(playerid, 0x33CCFFFF, "Recibiste $%s por los %d gramos que cosechaste.", diner_coma((InfoJugador[playerid][jCosechas]*pago)/3), InfoJugador[playerid][jCosechas]);
		GivePlayerCash(playerid, InfoJugador[playerid][jCosechas] * pago, "pago granjero");
		InfoJugador[playerid][jCosechas] = 0;
		guardar_int_mysql("cuentas", "Cosechas", InfoJugador[playerid][jID], InfoJugador[playerid][jCosechas]);
	}
    return 1;
}

//sistema de plantas renovado 24-10-2020
CMD:verplantas(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Verplantas.");
	OnDuty
	new playerid2, LimitarSemillas = 0;
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/verplantas [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no esta conectado.");
	//detecta si tiene plantas plantadas
	Loop(id, totalplantas, 1) if (InfoPlanta[id][sPosicionX] != 0.0)
	{
		if (!strcmp(InfoJugador[playerid2][jNombre_Apellido], InfoPlanta[id][sPropietario]))
		{
			if (InfoPlanta[id][sTiempo] == 0) SendClientMessageEx(playerid, 0x009F46FF, "ID: %d | Tiempo: Madurada", id);
			else SendClientMessageEx(playerid, 0x009F46FF, "ID: %d | Tiempo: %s", id, Minutos_tiempo(InfoPlanta[id][sTiempo]));
			LimitarSemillas++;
		}
	}
	if (LimitarSemillas == 0) SendClientMessage(playerid, 0xB00000FF, "Ese jugador no tiene ninguna planta de marihuana plantada.");
	return 1;
}

CMD:irplanta(playerid, params[])
{
    if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Irplanta.");
    OnDuty
	new id;
	if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/irplanta [id planta]");
	if (InfoPlanta[id][sPosicionX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de planta no existe.", id);
    SetPosEx(playerid, InfoPlanta[id][sPosicionX], InfoPlanta[id][sPosicionY], InfoPlanta[id][sPosicionZ], 0.0, InfoPlanta[id][sInterior], InfoPlanta[id][sVirtualWorld], 1);
	SendClientMessageEx(playerid, -1, "Usted se teletransporto a la planta de marihuana ID %d.", id);
    return 1;
}

CMD:borrarplanta(playerid, params[])
{
    if (InfoJugador[playerid][jAdmin] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /borrarplanta.");
    OnDuty
	new id;
	if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/borrarplanta [id planta]");
	if (InfoPlanta[id][sPosicionX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de planta no existe.", id);
	BorrarPlanta(id);
	SendClientMessageEx(playerid, 0x00CC00FF, "Destruiste la planta %d de marihuana.", id);
	return 1;
}

CMD:pladelantar(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Padelantar.");
	OnDuty
	new id;
	if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/padelantar [id planta]");
	if (InfoPlanta[id][sPosicionX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de planta no existe.", id);
	if (_enPos(playerid, 2, InfoPlanta[id][sPosicionX], InfoPlanta[id][sPosicionY], InfoPlanta[id][sPosicionZ]) && GetPlayerVirtualWorld(playerid) == InfoPlanta[id][sVirtualWorld] && GetPlayerInterior(playerid) == InfoPlanta[id][sInterior])
	{
		InfoPlanta[id][sTiempo] = 1;
		SendClientMessageEx(playerid, 0xA7C200FF, "Bajaste el tiempo de la planta %d a 1 minuto.", id);
		guardar_int_mysql("plantas", "Tiempo", InfoPlanta[id][sID], InfoPlanta[id][sTiempo]);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en cerca de la planta seleccionada.");
	return 1;
}

CMD:plantar(playerid)
{
	if (InfoJugador[playerid][jManoDerecha] != 79) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas tener la semilla en tu mano derecha.");
	new string[256], LimitarSemillas;
	//detecta si tiene plantas plantadas
	Loop(x, totalplantas, 1) if (InfoPlanta[x][sPosicionX] != 0.0)
	{
		if (!strcmp(InfoJugador[playerid][jNombre_Apellido], InfoPlanta[x][sPropietario]))
		{
			LimitarSemillas++;
		}
	}
	if (LimitarSemillas >= 5) return SendClientMessage(playerid, 0xB00000FF, "No puedes tener mas de cinco plantas de marihuana plantadas.");
	//detecta espacio libre
	new id = -1;
	Loop(x, MAX_PLANTAS, 1) if (InfoPlanta[x][sPosicionX] == 0.0)
	{
		id = x;
		break;
	}
	if (id == -1) return SendClientMessageEx(playerid, 0xB00000FF, "Se alcanzo el maximo de plantas de marihuana (%d), contacta con un administrador.", MAX_PLANTAS);
	//crea plantita
	if (InfoJugador[playerid][jManoDerecha] == 79) InfoJugador[playerid][jManoDerechaCant] --;
	ActualizarManos(playerid);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
	InfoPlanta[id][sTiempo] = 1440;
	alm(InfoPlanta[id][sPropietario], InfoJugador[playerid][jNombre_Apellido]);
	InfoPlanta[id][sInterior] = GetPlayerInterior(playerid);
	InfoPlanta[id][sVirtualWorld] = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid, InfoPlanta[id][sPosicionX], InfoPlanta[id][sPosicionY], InfoPlanta[id][sPosicionZ]);
	InfoPlanta[id][sPosicionZ] -= 1.5;
	format(string, sizeof string, "Planta de marihuana {cccccc}(ID: {009F46}%d{cccccc})\n{ffffff}Madura en {FFFF00}%s", id, Minutos_tiempo(InfoPlanta[id][sTiempo]));
	InfoPlanta[id][sLabel] = CreateDynamic3DTextLabel(string, 0x009F46FF, InfoPlanta[id][sPosicionX], InfoPlanta[id][sPosicionY], InfoPlanta[id][sPosicionZ] + 1.5, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, InfoPlanta[id][sVirtualWorld], InfoPlanta[id][sInterior]);
	InfoPlanta[id][sObjeto] = CreateDynamicObject(19473, InfoPlanta[id][sPosicionX], InfoPlanta[id][sPosicionY], InfoPlanta[id][sPosicionZ], 0.0, 0.0, 0.0, InfoPlanta[id][sVirtualWorld], InfoPlanta[id][sInterior]);
	if (LimitarSemillas == 0) SendClientMessageEx(playerid, 0x009F46FF, "Has plantado una semilla de marihuana, ahora tienes %d planta.", LimitarSemillas+1);
	else SendClientMessageEx(playerid, 0x009F46FF, "Has plantado una semilla de marihuana, ahora tienes %d plantas.", LimitarSemillas+1);
	new query[1028];
	//opcion idsql ya creada.
	if (InfoPlanta[id][sID] != 0)
	{
		mysql_format(DBngrp, query, sizeof query, "UPDATE plantas SET Propietario = '%e', Tiempo = '%d', PosicionX = '%f', PosicionY = '%f', PosicionZ = '%f', Interior = '%d', VirtualWorld = '%d' WHERE ID = '%d'",
		InfoPlanta[id][sPropietario],
		InfoPlanta[id][sTiempo],
		InfoPlanta[id][sPosicionX],
		InfoPlanta[id][sPosicionY],
		InfoPlanta[id][sPosicionZ],
		InfoPlanta[id][sInterior],
		InfoPlanta[id][sVirtualWorld],
		InfoPlanta[id][sID]);
		mysql_tquery(DBngrp, query);
		return 1;
	}
	mysql_format(DBngrp, query, sizeof query, "INSERT INTO plantas (Propietario, Tiempo, PosicionX, PosicionY, PosicionZ, Interior, VirtualWorld) VALUES ('%e', '%d', '%f',  '%f', '%f', '%d', '%d')",
	InfoPlanta[id][sPropietario],
	InfoPlanta[id][sTiempo],
	InfoPlanta[id][sPosicionX],
	InfoPlanta[id][sPosicionY],
	InfoPlanta[id][sPosicionZ],
	InfoPlanta[id][sInterior],
	InfoPlanta[id][sVirtualWorld]);
	mysql_tquery(DBngrp, query, "OnPlantaCreate", "i", id);
	return 1;
}

forward OnPlantaCreate(id);
public OnPlantaCreate(id)
{
	InfoPlanta[id][sID] = cache_insert_id();
	cache_unset_active();
	totalplantas++;
    return 1;
}

CMD:splanta(playerid)
{
	if (InfoJugador[playerid][jManoDerecha] != 127 && InfoJugador[playerid][jManoIzquierda] != 127){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un cuchillo en ninguna mano."); return 1;}
	new id = -1;
	Loop(x, totalplantas, 1) if (InfoPlanta[x][sPosicionX] != 0.0)
	{
		if (_enPos(playerid, 2, InfoPlanta[x][sPosicionX], InfoPlanta[x][sPosicionY], InfoPlanta[x][sPosicionZ]) && GetPlayerVirtualWorld(playerid) == InfoPlanta[x][sVirtualWorld] && GetPlayerInterior(playerid) == InfoPlanta[x][sInterior])
		{
			id = x;
			break;
		}
	}
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "No estas cerca de ninguna planta de marihuana.");
	if (InfoPlanta[id][sGramos] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d no esta disponible aun, debes esperar %s.", id, Minutos_tiempo(InfoPlanta[id][sTiempo]));
	if (InfoJugador[playerid][jManoDerecha] > 0 && InfoJugador[playerid][jManoIzquierda] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes tener una mano vacia.");
	new gramitos = InfoPlanta[id][sGramos]+Random(6, 15);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
	SendClientMessageEx(playerid, 0xA7CE00FF, "Cosechaste %d gramos de marihuana.", gramitos);
	BorrarPlanta(id);
	if (InfoJugador[playerid][jManoDerecha] == 0)
	{
		InfoJugador[playerid][jManoDerecha] = 74;
		InfoJugador[playerid][jManoDerechaCant] = gramitos;
		PonerObjeto(playerid, 1, 74);
		ActualizarManos(playerid);
		return 1;
	}
	if (InfoJugador[playerid][jManoIzquierda] == 0)
	{
		InfoJugador[playerid][jManoIzquierda] = 74;
		InfoJugador[playerid][jManoIzquierdaCant] = gramitos;
		PonerObjeto(playerid, 2, 74);
		ActualizarManos(playerid);
	}
	return 1;
}

CMD:matarplanta(playerid, params[])
{
	if (!Es_Banda(playerid, 1)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD.", 2000);
	new id;
	if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/matar [id planta]");
	if (InfoPlanta[id][sPosicionX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de planta no existe.", id);
	if (_enPos(playerid, 2, InfoPlanta[id][sPosicionX], InfoPlanta[id][sPosicionY], InfoPlanta[id][sPosicionZ]) && GetPlayerVirtualWorld(playerid) == InfoPlanta[id][sVirtualWorld] && GetPlayerInterior(playerid) == InfoPlanta[id][sInterior])
	{
		AccionesRol(playerid, 0, "destruye una planta de marihuana.");
		BorrarPlanta(id);
		SendClientMessageEx(playerid, 0x00CC00FF, "Destruiste la planta %d de marihuana.", id);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en cerca de la planta seleccionada.");
	return 1;
}

BorrarPlanta(id)
{
	InfoPlanta[id][sTiempo] = 0;
	alm(InfoPlanta[id][sPropietario], "none");
	InfoPlanta[id][sGramos] = 0;
	InfoPlanta[id][sPosicionX] = 0.0;
	InfoPlanta[id][sPosicionY] = 0.0;
	InfoPlanta[id][sPosicionZ] = 0.0;
	InfoPlanta[id][sInterior] = 0;
	InfoPlanta[id][sVirtualWorld] = 0;
	if (IsValidDynamic3DTextLabel(InfoPlanta[id][sLabel]))
	{
		DestroyDynamic3DTextLabel(InfoPlanta[id][sLabel]);
		InfoPlanta[id][sLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	if (InfoPlanta[id][sObjeto] != INVALID_STREAMER_ID)
	{
		DestroyDynamicObject(InfoPlanta[id][sObjeto]);
		InfoPlanta[id][sObjeto] = INVALID_STREAMER_ID;
	}
	new query[1028];
	mysql_format(DBngrp, query, sizeof query, "UPDATE plantas SET Tiempo = 0, Propietario = '%e', PosicionX = 0.0, PosicionY = 0.0, PosicionZ = 0.0, Interior = 0, VirtualWorld = 0, Gramos = 0 WHERE ID = '%d'", InfoPlanta[id][sPropietario], InfoPlanta[id][sID]);
	mysql_tquery(DBngrp, query);
	return 1;
}

//
CMD:alogin(playerid)
{
	new string[256];
    if (InfoJugador[playerid][jAdmin] < 1) return _Mensaje(playerid, 4, "FF0000", "*{FFFFFF}Tu no tienes acceso a este comando.");
    if (EnServicioADM[playerid] == 0) {
        EnServicioADM[playerid] = 1;
        format(string, sizeof string, "Administracion: %s entro en servicio administrativo.", NombreRJugador(playerid));
        MensajeAdmin(string);
        if(IsValidDynamic3DTextLabel(InfoJugador[playerid][jLabelAdmin]))
		{
			DestroyDynamic3DTextLabel(InfoJugador[playerid][jLabelAdmin]);
			InfoJugador[playerid][jLabelAdmin] = Text3D:INVALID_STREAMER_ID;
		}
		new label_str[64];
		switch(InfoJugador[playerid][jAdmin])
		{
			case 1: format(label_str, sizeof label_str, "{2EFF00}Ayudante en servicio");
			case 2: format(label_str, sizeof label_str, "{22BB00}Mod a Pruebas en servicio");
			case 3: format(label_str, sizeof label_str, "{3D7DFF}Moderador en servicio");
			case 4: format(label_str, sizeof label_str, "{FF193A}Moderador Global en servicio");
			case 5: format(label_str, sizeof label_str, "{0080FF}Administrador en servicio");
			case 6: format(label_str, sizeof label_str, "{070000}Director en servicio");
			case 10: format(label_str, sizeof label_str, "{070000}Fundador en servicio");
			case 11: format(label_str, sizeof label_str, "{66FF66}Developer en servicio");
			case 12: format(label_str, sizeof label_str, "{070000}Fundador en servicio");
		}
		InfoJugador[playerid][jLabelAdmin] = CreateDynamic3DTextLabel(label_str, -1, 0.0, 0.0, 0.3, 20.0, playerid, .testlos = true);
        return 1;
    } else {
        EnServicioADM[playerid] = 0;
        SetPlayerColor(playerid, 0xFFFFFF00);
        format(string, sizeof string, "Administracion: %s salio del servicio administrativo.", NombreRJugador(playerid));
        MensajeAdmin(string);
        if(IsValidDynamic3DTextLabel(InfoJugador[playerid][jLabelAdmin]))
		{
			DestroyDynamic3DTextLabel(InfoJugador[playerid][jLabelAdmin]);
			InfoJugador[playerid][jLabelAdmin] = Text3D:INVALID_STREAMER_ID;
		}
        return 1;
    }
}
CMD:aduty(playerid) return cmd_alogin(playerid);
CMD:showmeadmin(playerid) return cmd_alogin(playerid);
CMD:adminduty(playerid) return cmd_alogin(playerid);

CMD:bugentrenar(playerid)
{
	new string[256];
    if (InfoJugador[playerid][jAdmin] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Bugentrenar.");
    OnDuty
    UsandoGym[0] = 0; UsandoGym[1] = 0; UsandoGym[2] = 0; UsandoGym[3] = 0; UsandoGym[4] = 0;
    format(string, sizeof string, "Administracion: %s utilizo el comando /bugentrenar.", NombreRJugador(playerid));
    MensajeAdmin(string);
    return 1;
}

CMD:ls(playerid)
{
	new string[256];
    if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Ls.");
    OnDuty
    if (GetPlayerState(playerid) == 2) return MoverVehiclePos(GetPlayerVehicleID(playerid), 1515.1519,-1671.8231,14.0469);
    SetPosEx(playerid, 1515.1519,-1671.8231,14.0469,318.4477, 0, 0, 1);
    format(string, sizeof string, "Administracion: %s utilizo el comando /ls.", NombreRJugador(playerid));
    MensajeAdmin(string);
	Pos_Salida(playerid);

    return 1;
}

CMD:vida(playerid)
{
if(InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~r~Sin acceso");
Dar_Vida(playerid, 100);
Dar_Chaleco(playerid, 100);
new string[210];
format(string, sizeof string, "Administracion: %s uso el comando /vida", NombreJugador(playerid));
MensajeAdmin(string);
return 1;
}


CMD:la(playerid) return cmd_ls(playerid);

CMD:sf(playerid)
{
	new string[256];
    if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Sf.");
    OnDuty
    if (GetPlayerState(playerid) == 2) return MoverVehiclePos(GetPlayerVehicleID(playerid), -2022.6509, 142.4865, 29.1390);
    SetPosEx(playerid, -2022.6509, 142.4865, 29.1390, -0.5400, 0, 0, 1);
    format(string, sizeof string, "Administracion: %s utilizo el comando /sf.", NombreRJugador(playerid));
    MensajeAdmin(string);
	Pos_Salida(playerid);
    return 1;
}

CMD:lv(playerid)
{
	new string[256];
    if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Lv.");
    OnDuty
    if (GetPlayerState(playerid) == 2) return MoverVehiclePos(GetPlayerVehicleID(playerid), 2316.7502,2398.7454,10.8203);
    SetPosEx(playerid, 2316.7502,2398.7454,10.8203,2.6704, 0, 0, 1);
    format(string, sizeof string, "Administracion: %s utilizo el comando /lv.", NombreRJugador(playerid));
    MensajeAdmin(string);
	Pos_Salida(playerid);
    return 1;
}

CMD:llevarls(playerid, params[]) {
	new string[256];
    if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Llevarls.");
    if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/llevarls [id jugador]");
    if (!IsPlayerConnected(params[0])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
    SetPosEx(params[0], 1515.1519,-1671.8231,14.0469,318.4477, 0, 0, 1);
    format(string, sizeof string, "Administracion: %s utilizo /llevarls a %s.", NombreRJugador(playerid), NombreRJugador(params[0]));
    MensajeAdmin(string);
	Pos_Salida(params[0]);
    return 1;
}

CMD:llevarsf(playerid, params[]) {
	new string[256];
    if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Llevarsf.");
    if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/llevarsf [id jugador]");
    if (!IsPlayerConnected(params[0])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
    SetPosEx(params[0], -2022.6509, 142.4865, 29.1390, -0.5400, 0, 0, 1);
    format(string, sizeof string, "Administracion: %s utilizo /llevarsf a %s.", NombreRJugador(playerid), NombreRJugador(params[0]));
    MensajeAdmin(string);
	Pos_Salida(params[0]);
    return 1;
}

CMD:llevarlv(playerid, params[]) {
	new string[256];
    if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Llevarlv.");
    if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/llevarlv [id jugador]");
    if (!IsPlayerConnected(params[0])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
    SetPosEx(params[0], 2316.7502,2398.7454,10.8203, 0, 0, 0, 1);
    format(string, sizeof string, "Administracion: %s utilizo /llevarlv a %s.", NombreRJugador(playerid), NombreRJugador(params[0]));
    MensajeAdmin(string);
	Pos_Salida(params[0]);
    return 1;
}

//trabajo de carpintero
CMD:crearmueble(playerid)
{
	if (!Es_job(playerid, 6)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres carpintero.");
	if (EnModoTrabajo[playerid] != 0) return SendClientMessageEx(playerid, 0xccccccff, "Estas trabajando como %s, termina la labor para empezar esto.", IsLaborJob(EnModoTrabajo[playerid]));
	if (IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes hacer esto en un vehiculo.");
	if (GetPVarInt(playerid, "HaciendoMueble") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya has comenzado hacer muebles, continua o usa '/dmueble'.");
	if (GetPVarInt(playerid, "TomoCarpintero") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya has usado el /crearmueble, ve hacia los troncos y despues mesas.");
	EnModoTrabajo[playerid] = 6;
	SetPVarInt(playerid, "TomoCarpintero", 1);
	SetPVarInt(playerid, "MueblesCreados", 0);
	SetPVarInt(playerid, "EnCheckPoint", 5);
	SetPlayerAttachedObject(playerid, 9, 18635, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	_Mensaje(playerid, 2, "0", "Busca unos troncos, despues hacia las mesas para construir muebles.");
	PlayerTextDrawShow(playerid, TextTrabajo[playerid]);
	_MarcarPos(playerid, 1897.9742,-1851.4866,13.5586, "Dirigete al checkpoint para tomar unos troncos.");
	return 1;
}

CMD:dmueble(playerid)
{
	if (!Es_job(playerid, 6)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres carpintero.");

	if (GetPVarInt(playerid, "HaciendoMueble") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Estas haciendo una mueble, terminalo despues usa '/dmueble'.");
	new string[128], level = InfoJugador[playerid][jHabilidad2][5], pago;

	if (level == 1) pago = 700;
	else if (level == 2) pago = 1200;
	else if (level == 3) pago = 1700;
	else if (level == 4) pago = 2000;
	else if (level == 5) pago = 2500;

	ClearAnimations(playerid);
	SetPVarInt(playerid, "TomoCarpintero", 0);
	SetPVarInt(playerid, "TrabajandoC", 0);
	SetPVarInt(playerid, "HaciendoMueble", 0);
	SetPVarInt(playerid, "MueblesCreados", 0);
	EnModoTrabajo[playerid] = 0;

	GivePlayerCash(playerid, InfoJugador[playerid][jMuebles] * pago, "pago carpintero");
	format(string, sizeof string, "* Recibiste $%d por los %d muebles creados.", InfoJugador[playerid][jMuebles] * pago, InfoJugador[playerid][jMuebles]);
	_Mensaje(playerid, 4, "33CCFF", string);
	InfoJugador[playerid][jMuebles] = 0;
	guardar_int_mysql("cuentas", "Muebles", InfoJugador[playerid][jID], InfoJugador[playerid][jMuebles]);
	if (IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
	if (IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
	return 1;
}

//trabajo de carguero
CMD:empezarcarga(playerid)
{
	if (!Es_job(playerid, 1)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres carguero.");
	if (EnModoTrabajo[playerid] != 0) return SendClientMessageEx(playerid, 0xccccccff, "Estas trabajando como %s, termina la labor para empezar esto.", IsLaborJob(EnModoTrabajo[playerid]));
	if (IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes hacer esto en un vehiculo.");
	if (GetPVarInt(playerid, "HaciendoCarga") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Para usar este comando escribe /dcarga.");

    new checkpoint = random(3);
	switch (checkpoint)
	{
		case 0: SetPlayerCheckpoint(playerid, 2191.6272,-2242.1196,14.5839, 2.0);
		case 1: SetPlayerCheckpoint(playerid, 2198.3936,-2235.2734,14.5839, 2.0);
		case 2: SetPlayerCheckpoint(playerid, 2205.3013,-2228.4355,14.5839, 2.0);
	}
	SetPVarInt(playerid, "EnCheckPoint", 5);
	_Mensaje(playerid, 5, "0", "Comienza a llevar las cajas al tren.");
	SetPVarInt(playerid, "HaciendoCarga", 1);
	ClearAnimations(playerid);
	EnModoTrabajo[playerid] = 1;
	PlayerTextDrawShow(playerid, TextTrabajo[playerid]);
	return 1;
}
CMD:dcargar(playerid)
{
	if (!Es_job(playerid, 1)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres carguero.");

	if (InfoJugador[playerid][jCargas] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes por lo menos subir una caja.");
	new string[100], level = InfoJugador[playerid][jHabilidad2][4], pago;

	if (level == 1) pago = 900;
	else if (level == 2) pago = 1500;
	else if (level == 3) pago = 2000;
	else if (level == 4) pago = 2700;
	else if (level == 5) pago = 3000;

	GivePlayerCash(playerid, InfoJugador[playerid][jCargas] * pago, "pago carguero");
	format(string, sizeof string, "* Recibiste $%d por las %d cajas subidas al tren.", InfoJugador[playerid][jCargas] * pago, InfoJugador[playerid][jCargas]);
	_Mensaje(playerid, 4, "33CCFF", string);

	InfoJugador[playerid][jCargas] = 0;
	guardar_int_mysql("cuentas", "Cargas", InfoJugador[playerid][jID], InfoJugador[playerid][jCargas]);
	SetPVarInt(playerid, "HaciendoCarga", 0);
	if (IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	DisablePlayerCheckpoint(playerid);
	EnModoTrabajo[playerid] = 0;
	PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
	return 1;
}


//trabajo de Aserrador
CMD:creartronco(playerid)
{
	if (!Es_job(playerid, 7)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres Aserrador.");
	if (EnModoTrabajo[playerid] != 0) return SendClientMessageEx(playerid, 0xccccccff, "Estas trabajando como %s, termina la labor para empezar esto.", IsLaborJob(EnModoTrabajo[playerid]));

	if (IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes hacer esto en un vehiculo.");
	if (GetPVarInt(playerid, "HaciendoCarga") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya has comenzado hacer troncos, continua o usa '/dtronco'.");
    EnModoTrabajo[playerid] = 7;
	SetPVarInt(playerid, "HaciendoCarga", 1);
	SetPVarInt(playerid, "TrabajandoL", 1);
	SetPVarInt(playerid, "TroncosCreados", 0);
	SetPlayerAttachedObject(playerid,9,341,6,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
	_Mensaje(playerid, 2, "0", "Empieza a talar arboles, para hacer troncos y venderlos.");
	PlayerTextDrawShow(playerid, TextTrabajo[playerid]);
	return 1;
}

CMD:dtronco(playerid)
{
	if (!Es_job(playerid, 7)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres Aserrador.");
	if (GetPVarInt(playerid, "TroncosCreados") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Estas creando un tronco.");
	new pago;
	switch (InfoJugador[playerid][jHabilidad2][6])
	{
		case 1: pago = 150;
        case 2: pago = 175;
        case 3: pago = 210;
        case 4: pago = 300;
        case 5: pago = 450;
	}
	ClearAnimations(playerid);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Recibiste $%s por los %d troncos que talaste.", diner_coma(InfoJugador[playerid][jTroncos]*pago), InfoJugador[playerid][jTroncos]);
	SetPVarInt(playerid, "TrabajandoL", 0);
	SetPVarInt(playerid, "HaciendoCarga", 0);
	SetPVarInt(playerid, "TroncosCreados", 0);
	EnModoTrabajo[playerid] = 0;
	if (IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
	if (IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	DisablePlayerCheckpoint(playerid);
	PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
	GivePlayerCash(playerid, InfoJugador[playerid][jTroncos]*pago, "pago aserrador");
	TroncosDis += InfoJugador[playerid][jTroncos];
	ActualizarTroncoLabel();
	InfoJugador[playerid][jTroncos] = 0;
	guardar_int_mysql("cuentas", "Troncos", InfoJugador[playerid][jID], InfoJugador[playerid][jTroncos]);
	return 1;
}

CMD:enmascarados(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Enmascarados");
	OnDuty
	SendClientMessageEx(playerid, 0x33CCFFFF, "Usuarios con /mascara:");
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jUsoMascara] == 1)
	{
		SendClientMessageEx(playerid, 0xccccccff, "(%d) %s usando mascara: %s", playerid2, NombreRJugador(playerid2), NombreJugador(playerid2));
	}
	return 1;
}

CMD:enmascaradospd(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Enmascaradospd");
	OnDuty
	SendClientMessageEx(playerid, 0x33CCFFFF, "Usuarios con /mascarapd:");
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && GetPVarInt(playerid2, "IsNameNew") == 1)
	{
		new nameplayer[MAX_PLAYER_NAME], is_fac[34];
		if (InfoJugador[playerid][jFamMiembro] == 1) alm(is_fac, "Policia");
		else if (InfoJugador[playerid][jFamMiembro] == 1000) alm(is_fac, "FBI");
		GetPlayerName(playerid, nameplayer, sizeof nameplayer);
		SendClientMessageEx(playerid, 0xccccccff, "(%d) %s usando /mascarapd: %s (%s)", playerid2, InfoJugador[playerid2][jNombre_Apellido], nameplayer, is_fac);
	}
	return 1;
}

CMD:tablero(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	new engine, lights, alarm, doors, bonnet, boot, objective, vehicleid = GetPlayerVehicleID(playerid), dialog[2056], gformat[195];
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando si estas en este tipo de vehiculos.");
	//motor
	if (engine == VEHICLE_PARAMS_ON) format(gformat, sizeof gformat, "{9F9F9F}Motor\t{54C822}Encendido\n");
	else format(gformat, sizeof gformat, "{9F9F9F}Motor\t{E81700}Apagado\n");
	strcat(dialog, gformat);
	//luces
	if (lights == VEHICLE_PARAMS_ON) format(gformat, sizeof gformat, "{9F9F9F}Luces\t{54C822}Encendidas\n");
	else format(gformat, sizeof gformat, "{9F9F9F}Luces\t{E81700}Apagadas\n");
	strcat(dialog, gformat);
	//puertas
	if (VehSeguro[vehicleid] == 1) format(gformat, sizeof gformat, "{9F9F9F}Puertas\t{E81700}Cerradas\n");
	else format(gformat, sizeof gformat, "{9F9F9F}Puertas\t{54C822}Abiertas\n");
	strcat(dialog, gformat);
	//capo
	if (bonnet == VEHICLE_PARAMS_ON)format(gformat, sizeof gformat, "{9F9F9F}Capo\t{54C822}Abierto\n");
	else format(gformat, sizeof gformat, "{9F9F9F}Capo\t{E81700}Cerrado\n");
	strcat(dialog, gformat);
	//maletero
	if (boot == VEHICLE_PARAMS_ON)format(gformat, sizeof gformat, "{9F9F9F}Maletero\t{54C822}Abierto\n");
	else format(gformat, sizeof gformat, "{9F9F9F}Maletero\t{E81700}Cerrado\n");
	strcat(dialog, gformat);
	//estacionar
	format(gformat, sizeof gformat, "{9F9F9F}Estacionar vehiculo\n");
	strcat(dialog, gformat);
	//main show
	Dialog_Show(playerid, ShowTablero, DIALOG_STYLE_TABLIST, "Tablero del vehiculo", dialog, "Continuar", "Salir");
	return 1;
}
CMD:estadocoche(playerid) return cmd_tablero(playerid);

Dialog:ShowTablero(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: cmd_motor(playerid);
		case 1: cmd_luces(playerid);
		case 2: cmd_seguro(playerid);
		case 3: cmd_capo(playerid);
		case 4: cmd_maletero(playerid);
		case 5: cmd_estacionar(playerid);
	}
	return 1;
}

forward vehiculos_legales(vehicleid);
public vehiculos_legales(vehicleid) //vehicleid legales
{
	if (LSPD_Veh(vehicleid) || CNN_Veh(vehicleid) || GOB_Vehicle(vehicleid)  || LAFD_Veh(vehicleid) ||
	Basurero_Vehicle(vehicleid) || Camionero_Vehicle(vehicleid) || Granjero_Vehicle(vehicleid) || GN_Vehicle(vehicleid))
	{
		return 1;
	}
	return 0;
}

CMD:motor(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	if (VehiculoGasolina[playerid] == 1) return _Mensaje(playerid, 4, "FFFFFF", "No puedes encender el vehiculo mientras se llena el tanque.");
	new engine, lights, alarm, doors, bonnet, boot, objective, vehicleid = GetPlayerVehicleID(playerid);
	if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando si estas en este tipo de vehiculos.");
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if (engine == VEHICLE_PARAMS_ON)
	{
		EncenderVehiculo(vehicleid, playerid);
	}
	else if ((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
	{
		if (GetPVarType(playerid, "AreaVehPos")) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes apagar el estereo para encender el motor.");
		if (LSPD_Veh(vehicleid) || CNN_Veh(vehicleid) || GOB_Vehicle(vehicleid) ||
   		Basurero_Vehicle(vehicleid) || LAFD_Veh(vehicleid) || Camionero_Vehicle(vehicleid) || Granjero_Vehicle(vehicleid) || GN_Vehicle(vehicleid) ||
  		(veh_info[vehicleid][vStatus] == 2 && vehicle_rent_owner[vehicleid] == playerid) || vehicle_temporal_owner[vehicleid] == playerid)
		{
			AccionesRol(playerid, 0, "mete la llave en el contacto y lo gira para asi encender el vehiculo.");
			SetTimerEx("EncenderVehiculo", 2000, 0, "dd", vehicleid, playerid);
		}
		else
		{
		    Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vDL] == vehicleid)
			{
				if (InfoVehiculo[v][vEmbargo] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo se encuentra embargado, paga la multa en SAPD o en el ayuntamiento.");
				if (acceso_vehiculo(playerid, vehicleid) != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes las llaves de este vehiculo."), RemovePlayerFromVehicle(playerid);
				AccionesRol(playerid, 0, "mete la llave en el contacto y lo gira para asi encender el vehiculo.");
				SetTimerEx("EncenderVehiculo", 2000, 0, "dd", vehicleid, playerid);
				GameTextForPlayer(playerid,"~w~Vehiculo encendido~n~~r~Correctamente", 2000, 3);
			}
		}
	}
	return 1;
}

CMD:luces(playerid)
{
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
    new vehicleid = GetPlayerVehicleID(playerid);
    if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando si estas en este tipo de vehiculos.");
    VehiculoLuces(vehicleid, playerid);
    return 1;
}

CMD:capo(playerid)
{
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
    if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
        new vehicleid = GetPlayerVehicleID(playerid);
        if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) {
            return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando si estas en este tipo de vehiculos.");
        }
        VehiculoCapo(vehicleid, playerid);
    } else if (!IsPlayerInAnyVehicle(playerid)) {
        new closestcar = DetectarCerrado(playerid);
        if (IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0)) {
            if (GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510) {
                return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando si estas en este tipo de vehiculos.");
            }
            VehiculoCapo(closestcar, playerid);
        }
    }
    return 1;
}

CMD:miranda(playerid)
{
    if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	new string[128];
	format(string, sizeof string, "%s dice: Tienes derecho a guardar silencio, todo lo que diga puede usarse en su contra.", NombreJugador(playerid));
	ProxDetector(30.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
	format(string, sizeof string, "%s dice: ¿De acuerdo señor?", NombreJugador(playerid));
	ProxDetector(30.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
	return 1;
}

CMD:remolcar(playerid)
{
	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new Float: vX, Float: vY, Float: vZ, Found = 0, id = 0, idcar = GetPlayerVehicleID(playerid);
		if (GetVehicleModel(idcar) != 525) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas dentro de una grua.");
		new Float: pX, Float: pY, Float: pZ;
		GetPlayerPos(playerid, pX, pY, pZ);
		while ((id < MAX_VEHICLES) && (!Found))
		{
			id++;
			GetVehiclePos(id, vX, vY, vZ);
			if ((floatabs(pX - vX) < 7.0) && (floatabs(pY - vY) < 7.0) && (floatabs(pZ - vZ) < 7.0) && (id != GetPlayerVehicleID(playerid)))
			{
				Found = 1;
				if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
				{
					DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
				}
				else
				{
					AttachTrailerToVehicle(id, GetPlayerVehicleID(playerid));
				}
			}
		}
		if (Found == 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No hay ningun vehiculo cerca!"); }
	}
	return 1;
}

CMD:bar(playerid)
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (GetPVarInt(playerid, "TT_BAR") != -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Estas editando un objeto de trafico.");
	if (IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes que estar en el piso para usar este comando");
	new id = -1;
	Loop(bar, MAX_BARRERAS, 0) if (InfoBar[bar][bPosX] == 0.0)
	{
		id = bar;
		break;
	}
	if (id == -1) return SendClientMessageEx(playerid, 0xccccccff, "Se alcanzo el maximo de barreras. (%d)", MAX_BARRERAS);
	new t_objetos[19];  t_objetos[0] = 1238;
	t_objetos[1] = 1237; t_objetos[2] = 1282; t_objetos[3] = 1422; t_objetos[4] = 1423; t_objetos[5] = 1424; t_objetos[6] = 1425;
	t_objetos[7] = 1949; t_objetos[8] = 3091; t_objetos[9] = 981; t_objetos[10] = 1459; t_objetos[11] = 19834; t_objetos[12] = 19868;
	t_objetos[13] = 19869; t_objetos[14] = 978; t_objetos[15] = 3265; t_objetos[16] = 1437; t_objetos[17] = 932; t_objetos[18] = 1997;
	ShowModelSelectionMenuEx(playerid, t_objetos, 19, "Objetos de trafico", D_OBJETOS_TRAFICO);
	return 1;
}

CMD:qb(playerid)
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (GetPVarInt(playerid, "TT_BAR") != -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Estas editando un objeto de trafico.");
	if (IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes que estar en el piso para usar este comando");
	new id = -1;
	Loop(bar, MAX_BARRERAS, 0) if (_enPos(playerid, 5.0, InfoBar[bar][bPosX], InfoBar[bar][bPosY], InfoBar[bar][bPosZ]))
	{
		id = bar;
		break;
	}
	if (id == -1) return SendClientMessageEx(playerid, 0xccccccff, "No estas cerca de ningun objeto de trafico.");
	if (InfoBar[id][bObjeto] != INVALID_STREAMER_ID)
	{
		DestroyDynamicObject(InfoBar[id][bObjeto]);
		InfoBar[id][bObjeto] = INVALID_STREAMER_ID;
	}
	InfoBar[id][bPosX] = 0;
	InfoBar[id][bPosY] = 0;
	InfoBar[id][bPosZ] = 0;
	InfoBar[id][bObjeto] = 0;
	SetPVarInt(playerid, "TT_BAR", -1);
	SendClientMessageEx(playerid, 0xcccc00ff, "Recogiste el objeto de trafico ID %d.", id);
	return 1;
}

CMD:qbs(playerid)
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (GetPVarInt(playerid, "TT_BAR") != -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Estas editando un objeto de trafico.");
	new count = 0;
	Loop(bar, MAX_BARRERAS, 0) if (InfoBar[bar][bPosX] != 0)
	{
		if (InfoBar[bar][bObjeto] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(InfoBar[bar][bObjeto]);
			InfoBar[bar][bObjeto] = INVALID_STREAMER_ID;
		}
		InfoBar[bar][bPosX] = 0;
		InfoBar[bar][bPosY] = 0;
		InfoBar[bar][bPosZ] = 0;
		InfoBar[bar][bObjeto] = 0;
		count++;
	}
	SendClientMessageEx(playerid, 0xcccc00ff, "Recogiste unos %d objetos de trafico.", count);
	return 1;
}

CMD:pinchos(playerid)
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	SendClientMessageEx(playerid, 0xcccc00ff, "Pinchos actuales:");
	Loop(i, MAX_PINCHOS, 0) if (InfoPincho[i][sX] != 0)
	{
		SendClientMessageEx(playerid, 0xCCCCCCFF, "Pincho ID: %d | Localizacion: %s", i, InfoPincho[i][sDeployedAt]);
	}
	return 1;
}

CMD:spinchos(playerid)
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (InfoJugador[playerid][jFamRango] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres rango 2 o superior.");
	new id = -1, Float: f_TempAngle, string[190];
	Loop(i, MAX_PINCHOS, 0) if (InfoPincho[i][sX] == 0)
	{
		id = i;
		break;
	}
	if (id == -1) return SendClientMessageEx(playerid, 0xccccccff, "Se alcanzo el maximo de pinchos. (%d)", MAX_PINCHOS);
	GetPlayerPos(playerid, InfoPincho[id][sX], InfoPincho[id][sY], InfoPincho[id][sZ]);
	GetPlayerFacingAngle(playerid, f_TempAngle);
	InfoPincho[id][sObjectID] = CreateDynamicObject(2899, InfoPincho[id][sX], InfoPincho[id][sY], InfoPincho[id][sZ] - 0.8, 0.0, 0.0, f_TempAngle);
	GetPlayer3DZone(playerid, InfoPincho[id][sDeployedAt], MAX_ZONE_NAME);
	format(string, sizeof string, "%s uso el comando /spinchos, para colocar uno cerca de el.", NombreRJugador(playerid));
	SendRadioFaction(1, C_COLORPOLICIA, string);
	SendRadioFaction(2, C_COLORPOLICIA, string);
	SendRadioFaction(3, C_COLORPOLICIA, string);
	return 1;
}

CMD:qpinchos(playerid)
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (InfoJugador[playerid][jFamRango] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres rango 2 o superior.");
	new count = 0, string[190];
	Loop(id, MAX_PINCHOS, 0) if (InfoPincho[id][sX] != 0)
	{
		if (InfoPincho[id][sObjectID] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(InfoPincho[id][sObjectID]);
			InfoPincho[id][sObjectID] = INVALID_STREAMER_ID;
		}
		InfoPincho[id][sX] = 0;
		InfoPincho[id][sY] = 0;
		InfoPincho[id][sZ] = 0;
		InfoPincho[id][sObjectID] = 0;
		count++;
	}
	format(string, sizeof string, "* %s uso el comando /qpinchos, el cual elimino %d pinchos.", NombreRJugador(playerid), count);
	SendRadioFaction(1, C_COLORPOLICIA, string);
	SendRadioFaction(2, C_COLORPOLICIA, string);
	SendRadioFaction(3, C_COLORPOLICIA, string);
	return 1;
}

CMD:irmedico(playerid)
{
	new string[256];
	if (Es_job(playerid, 15))
	{
		if (_Medic2Call[playerid] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya aceptaste un llamado de medico.");
		if (_MedicAcept[playerid] != 999) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Te encuentras en un llamado, si es error escribe /eliminarcp."); return 1; }
		if (_MedicCall < 999) {
			if (IsPlayerConnectedEx(_MedicCall))
			{
				format(string, sizeof string, "* Medico %s acepto tu llamada espera en tu actual posicion.", NombreJugador(playerid));
				_Mensaje(_MedicCall, 4, "33CCFF", string);
				format(string, sizeof string, "** %s acepto la llamada reciente de %s (Medico).", NombreJugador(playerid), NombreJugador(_MedicCall));
				SendRadioTrabajo(15, C_ROJO, string);
				new Float: X, Float: Y, Float: Z;
				GetPlayerPos(_MedicCall, X, Y, Z);
				GameTextForPlayer(playerid, "~n~~r~CheckPoint.", 5000, 1);
				SetPlayerCheckpoint(playerid, X, Y, Z, 5);
				SetPVarInt(playerid, "EnCheckPoint", 2);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(_MedicCall, zone, sizeof(zone));
				format(string, sizeof string, "%s fue localizado en %s.", NombreJugador(_MedicCall), zone);
				_Mensaje(playerid, 4, "ffffff", string);
				_Medic2Call[playerid] = 1;
				_MedicAcept[playerid] = _MedicCall;
				_MedicCall = 999;
				return 1;
			}
		} else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Nadie ha solicitado un medico.");
	} else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No formas parte del cuerpo de medicos.");
	return 1;
}
CMD:irbombero(playerid)
{
	new string[256];
	if (Es_job(playerid, 15))
	{
		if (_Bomb2Call[playerid] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya aceptaste un llamado de bombero.");
		if (_BombAcept[playerid] != 999) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Te encuentras en un llamado, si es error escribe /eliminarcp."); return 1; }
		if (_BombCall < 999)
		{
			if (IsPlayerConnectedEx(_BombCall))
			{
				format(string, sizeof string, "* Bombero %s acepto tu llamada espera en tu actual posicion.", NombreJugador(playerid));
				_Mensaje(_BombCall, 4, "33CCFF", string);
				format(string, sizeof string, "** %s acepto la llamada reciente de %s (Bombero).", NombreJugador(playerid), NombreJugador(_BombCall));
				SendRadioTrabajo(15, C_ROJO, string);
				new Float: X, Float: Y, Float: Z;
				GetPlayerPos(_BombCall, X, Y, Z);
				GameTextForPlayer(playerid, "~n~~r~CheckPoint.", 5000, 1);
				SetPlayerCheckpoint(playerid, X, Y, Z, 5);
				SetPVarInt(playerid, "EnCheckPoint", 2);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(_BombCall, zone, sizeof(zone));
				format(string, sizeof string, "%s fue localizado en %s.", NombreJugador(_BombCall), zone);
				_Mensaje(playerid, 4, "ffffff", string);
				_Bomb2Call[playerid] = 1;
				_BombAcept[playerid] = _BombCall;
				_BombCall = 999;
				return 1;
			}
		} else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Nadie ha solicitado un bombero.");
	} else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No formas parte del cuerpo de bomberos.");
	return 1;
}
CMD:cancelar(playerid)
{
	new string[256];
	if (alcoholemia[playerid] != 999)
	{
		new _txt[128];
		format(_txt, sizeof(_txt), " %s rechaza tu solitud.", NombreJugador(playerid));
		if (IsPlayerConnected(alcoholemia[playerid])) _Mensaje(alcoholemia[playerid], 4, "b00000", _txt);

		alcoholemia[playerid] = 999;
		return 1;
	}
	if (_Vehdueno[playerid] != 999)
	{
		if (IsPlayerConnectedEx(_Vehdueno[playerid]))
		{
			_Mensaje(_Vehdueno[playerid], 4, "ADC3E7", "Cancelaron la oferta de tu vehiculo.");
			EnVentaPropiedad[_Vehdueno[playerid]] = 0;
		}
		_Vehdueno[playerid] = 999;
		_Vehprecio[playerid] = 0;
		_VehID[playerid] = 0;
		_Mensaje(playerid, 4, "ADC3E7", "Cancelaste la oferta del vehiculo.");
		return 1;
	}
	if (CasaOffer[playerid] != 999)
	{
		if (IsPlayerConnectedEx(CasaOffer[playerid]))
		{
			_Mensaje(CasaOffer[playerid], 4, "ADC3E7", "Cancelaron la oferta de tu casa.");
			EnVentaPropiedad[CasaOffer[playerid]] = 0;
		}
		CasaOffer[playerid] = 999;
		CasaPrice[playerid] = 0;
		CasaSQL_ID[playerid] = -1;
		_Mensaje(playerid, 4, "ADC3E7", "Cancelaste la oferta de la casa.");
		return 1;
	}
	if (NegocioOffer[playerid] != 999)
	{
		if (IsPlayerConnected(NegocioOffer[playerid]))
		{
			_Mensaje(NegocioOffer[playerid], 4, "ADC3E7", "Cancelaron la oferta de tu negocio.");
			EnVentaPropiedad[NegocioOffer[playerid]] = 0;
		}
		NegocioOffer[playerid] = 999;
		NegocioPrice[playerid] = 0;
		NegocioSQL_ID[playerid] = -1;
		_Mensaje(playerid, 4, "ADC3E7", "Cancelaste la oferta del negocio.");
		return 1;
	}
	if (_Entrevista[playerid] != 999)
	{
		_Entrevista[playerid] = 999;
		_Mensaje(playerid, 4, "ADC3E7", "Cancelaste la invitacion para una entrevista.");
		return 1;
	}
	if (MultaOfrecer[playerid] != 999)
	{
		AccionesRol(playerid, 0, "tomo el papel de facturacion de la multa y la tiro.");
		format(string, sizeof string, "%s cancelo el pago de una multa de %d$.", NombreJugador(playerid), MultaPrecio[playerid]);
		if (IsPlayerConnected(MultaOfrecer[playerid])) _Mensaje(MultaOfrecer[playerid], 4, "33CCFF", string);
		MultaOfrecer[playerid] = 999;
		MultaPrecio[playerid] = 0;
		FacturaMulta[playerid] = 0;
		return 1;
	}
	_Mensaje(playerid, 4, "FFFFFF", "Nadie te ha ofrecido algo.");
	return 1;
}

CMD:aceptar(playerid)
{
	new string[256];
	if (MultaOfrecer[playerid] != 999)
	{
		if (!IsPlayerConnected(MultaOfrecer[playerid])) { MultaOfrecer[playerid] = 999; _Mensaje(playerid, 4, "FFFFFF", "El jugador que te ofrecio algo no esta conectado."); return 1; }
		format(string, sizeof string, "* %s pagaste la multa de %d$.", NombreJugador(playerid), MultaPrecio[playerid]);
		_Mensaje(MultaOfrecer[playerid], 4, "33CCFF", string);
		format(string, sizeof string, "pago una multa de $%d al oficial.", MultaPrecio[playerid]);
		AccionesRol(playerid, 0, string);
		InfoJugador[playerid][jBanco] -= MultaPrecio[playerid];
		guardar_int_mysql("cuentas", "Banco", InfoJugador[playerid][jID], InfoJugador[playerid][jBanco]);
		DineroEstado += MultaPrecio[playerid];
		MultaOfrecer[playerid] = 999;
		MultaPrecio[playerid] = 0;
		FacturaMulta[playerid] = 0;
		return 1;
	}
	if (alcoholemia[playerid] != 999)
	{
		if (!IsPlayerConnected(alcoholemia[playerid])) { alcoholemia[playerid] = 999; _Mensaje(playerid, 4, "FFFFFF", "El jugador que te ofrecio algo no esta conectado."); return 1; }
		new _txt[128];
		AccionesRol(playerid, 0, "sopla el objeto del control de alcoholemia.");
		format(_txt, sizeof(_txt), " Nivel de alcohol (%s): {b00000}%d{b0b0b0}.", NombreJugador(playerid), InfoJugador[playerid][jAlcohol]);
		_Mensaje(alcoholemia[playerid], 4, "FFFFFF", _txt);

		alcoholemia[playerid] = 999;
		return 1;
	}
	if (Saludo_ID[playerid] != 999)
	{
		if (!IsPlayerConnected(Saludo_ID[playerid])) { Saludo_ID[playerid] = 999; _Mensaje(playerid, 4, "FFFFFF", "El jugador que te ofrecio algo no esta conectado."); return 1; }
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "acepta el saludo de %s.", NombreJugador(Saludo_ID[playerid]));
		AccionesRol(playerid, 0, MsgCheckMe);
		ApplyAnimation(playerid, "GANGS", "hndshkfa_swt", 4.1, 0, 0, 0, 0, 0, 1);
		ApplyAnimation(Saludo_ID[playerid], "GANGS", "hndshkfa_swt", 4.1, 0, 0, 0, 0, 0, 1);
		Saludo_ID[playerid] = 999;
		return 1;
	}
	if (CasaOffer[playerid] != 999)
	{
		new playerid2 = CasaOffer[playerid], precio = CasaPrice[playerid];
		if (!IsPlayerConnectedEx(playerid2)) { CasaOffer[playerid] = 999; _Mensaje(playerid, 4, "FFFFFF", "El jugador que te ofrecio algo no esta conectado."); return 1; }
		if (!CercaDelWeon(8.0, playerid2, playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas cerca del que te va a vender la casa.");
		if (GetPlayerCash(playerid) < precio) { SendClientMessageEx(playerid, 0xccccccff, "No tienes los $%d del valor de la casa.", precio); }
		if (CountCasas(playerid) >= NumberCasasVIP(InfoJugador[playerid][jNivelVIP])) return SendClientMessageEx(playerid, -1, "* No puedes tener mas de %d casas, siendo %s.", NumberCasasVIP(InfoJugador[playerid][jNivelVIP]), GetNameVIP(InfoJugador[playerid][jNivelVIP]));
		new id = CasaSQL_ID[playerid];
		if (id == -1)
		{
			CasaOffer[playerid] = 999;
			CasaPrice[playerid] = 0;
			CasaSQL_ID[playerid] = -1;
			EnVentaPropiedad[playerid2] = 0;
			return 1;
		}
		//multicuenta
		if (!strcmp(InfoJugador[playerid][jIP], InfoJugador[playerid2][jIP], false) && InfoJugador[playerid][jMulticuenta] == 0 && InfoJugador[playerid2][jMulticuenta] == 0)
		{
			new ipc[32], stringlog[180]; GetPlayerIp(playerid, ipc, 32);
			format(stringlog, sizeof(stringlog), "Administracion: %s pago $%d a %s por su casa, posibles multicuentas [IP: %s]", NombreRJugador(playerid), CasaPrice[playerid], NombreRJugador(playerid2), ipc);
			MensajeAdmin(stringlog);
			format(stringlog, sizeof(stringlog), "[-] Pago $%s a %s por su casa. [multicuenta]", NombreRJugador(playerid), diner_coma(CasaPrice[playerid]), NombreRJugador(playerid2));
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], stringlog, 0);
		}
		else
		{
			format(string, sizeof string, "[-] Pago $%d a %s por su casa.", diner_coma(CasaPrice[playerid]), NombreRJugador(playerid2));
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], string, 0);
		}
		//venta
		format(string, sizeof string, "Administracion: %s(%d) vendio su casa a %s(%d) por $%s.", NombreRJugador(playerid), playerid, NombreRJugador(playerid2), playerid2, diner_coma(CasaPrice[playerid]));
		MensajeAdmin(string);
		SendClientMessageEx(playerid, 0x33CCFFFF, "* Pagaste $%s por la casa de %s. (Para mas informacion usa /ayuda)", diner_coma(CasaPrice[playerid]), NombreJugador(playerid2));
		SendClientMessageEx(playerid2, 0x33CCFFFF, "* %s pago $%s por tu antigua casa.", NombreJugador(playerid), diner_coma(CasaPrice[playerid]));
		GivePlayerCash(playerid2, CasaPrice[playerid], "vendermicasa");
		GivePlayerCash(playerid, -CasaPrice[playerid], "vendermicasa");
		alm(InfoCasa[id][cPropietario], InfoJugador[playerid][jNombre_Apellido]);
		guardar_string_mysql("casas", "Propietario", InfoCasa[id][cID], InfoCasa[id][cPropietario]);
		LabelPickup_casa(id, 2);
		EnVentaPropiedad[playerid2] = 0;
		CasaOffer[playerid] = 999;
		CasaPrice[playerid] = 0;
		CasaSQL_ID[playerid] = -1;
		return 1;
	}
	if (NegocioOffer[playerid] != 999)
	{
	    new playerid2 = NegocioOffer[playerid], precio = NegocioPrice[playerid], id = NegocioSQL_ID[playerid];
		if (!IsPlayerConnectedEx(playerid2)) { NegocioOffer[playerid] = 999; NegocioSQL_ID[playerid] = -1; _Mensaje(playerid, 4, "FFFFFF", "El jugador que te ofrecio algo no esta conectado."); return 1; }
		if (GetPlayerCash(playerid) < precio) { SendClientMessageEx(playerid, 0xccccccff, "No tienes los $%d del valor del negocio.", precio); }
		if (CountNegocios(playerid) >= NumberNegociosVIP(InfoJugador[playerid][jNivelVIP])) return SendClientMessageEx(playerid, -1, "* No puedes tener mas de %d negocios, siendo %s.", NumberNegociosVIP(InfoJugador[playerid][jNivelVIP]), GetNameVIP(InfoJugador[playerid][jNivelVIP]));
		if (!CercaDelWeon(8.0, playerid2, playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas cerca del que te va a vender el negocio.");
		if (!strcmp(InfoJugador[playerid][jIP], InfoJugador[playerid2][jIP], false) && InfoJugador[playerid][jMulticuenta] == 0 && InfoJugador[playerid2][jMulticuenta] == 0)
		{
			new ipc[32], stringlog[180]; GetPlayerIp(playerid, ipc, 32);
			format(stringlog, sizeof(stringlog), "Administracion: %s pago $%d a %s por su negocio, posibles multicuentas [IP: %s]", NombreRJugador(playerid), NegocioPrice[playerid], NombreRJugador(playerid2), ipc);
			MensajeAdmin(stringlog);
			format(stringlog, sizeof(stringlog), "[-] Pago $%s a %s por su negocio. [multicuenta]", diner_coma(NegocioPrice[playerid]), NombreRJugador(playerid2));
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], stringlog, 0);
		}
		else
		{
			format(string, sizeof string, "[-] Pago $%d a %s por su negocio.", diner_coma(NegocioPrice[playerid]), NombreRJugador(playerid2));
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], string, 0);
	 	}
	 	format(string, sizeof string, "Administracion: %s(%d) vendio su negocio a %s(%d) por $%s.", NombreRJugador(playerid), playerid, NombreRJugador(playerid2), playerid2, diner_coma(precio));
		MensajeAdmin(string);
		SendClientMessageEx(playerid, 0x33CCFFFF, "* Pagaste $%s por el negocio de %s. (Usa /ayuda negocio para mas informacion)", diner_coma(precio), NombreJugador(playerid2));
		SendClientMessageEx(playerid2, 0x33CCFFFF, "* %s pago $%s por tu antiguo negocio.", NombreJugador(playerid), diner_coma(precio));
		GivePlayerCash(playerid2, precio, "venderminegocio");
		GivePlayerCash(playerid, -precio, "venderminegocio");
		alm(InfoNegocio[id][nPropietario], InfoJugador[playerid][jNombre_Apellido]);
		guardar_string_mysql("negocios", "Propietario", InfoNegocio[id][nID], InfoNegocio[id][nPropietario]);
		LabelPickup_negocio(id, 0);
		LabelPickup_negocio1(id, 0);
		LabelPickup_negocio1(id, 1);
		LabelPickup_negocio1(id, 2);
		EnVentaPropiedad[playerid2] = 0;
		NegocioOffer[playerid] = 999;
		NegocioPrice[playerid] = 0;
		NegocioSQL_ID[playerid] = -1;
		return 1;
	}
	if (_Entrevista[playerid] != 999)
	{
		if (!IsPlayerConnected(_Entrevista[playerid])) { _Entrevista[playerid] = 999; _Mensaje(playerid, 4, "FFFFFF", "El jugador que te ofrecio algo no esta conectado."); return 1; }
		if (CercaDelWeon(5.0, playerid, _Entrevista[playerid]))
		{
			_Mensaje(playerid, 2, "0", "Estaras congelado hasta que termine la entrevista.");
			_Mensaje(_Entrevista[playerid], 2, "0", "Estas congelado hasta que termine la entrevista.");
			_2Entrevista[playerid] = _Entrevista[playerid];
			_2Entrevista[_Entrevista[playerid]] = playerid;
			_Entrevista[playerid] = 999;
			return 1;
		} else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Estas lejos del reportero.");
	}
	if (_Vehdueno[playerid] != 999)
	{
		if (!IsPlayerConnectedEx(_Vehdueno[playerid])) { _Vehdueno[playerid] = 999; _Mensaje(playerid, 4, "FFFFFF", "El jugador que te ofrecio algo no esta conectado."); return 1; }
		new id = _VehID[playerid];
		new vehiculo = InfoVehiculo[id][vDL], vendedor = _Vehdueno[playerid], costo = _Vehprecio[playerid];
		if (GetPlayerCash(playerid) < costo) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero para pagar ese vehiculo."); return 1; }
		if (!CercaDelWeon(8.0, vendedor, playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas cerca del que te va a vender el vehiculo.");
		new carsamount = VehicleCount(playerid);
		if (InfoJugador[playerid][jNivelVIP] == 0 && carsamount >= 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo puedes tener 3 vehiculos.");
		if (InfoJugador[playerid][jNivelVIP] == 1 && carsamount >= 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo puedes tener 4 vehiculos.");
		if (InfoJugador[playerid][jNivelVIP] == 2 && carsamount >= 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo puedes tener 5 vehiculos.");
		if (!strcmp(InfoJugador[playerid][jIP], InfoJugador[vendedor][jIP], false) && InfoJugador[playerid][jMulticuenta] == 0 && InfoJugador[vendedor][jMulticuenta] == 0)
		{
			new ipc[32], stringlog[180]; GetPlayerIp(playerid, ipc, 32);
			format(stringlog, sizeof(stringlog), "Administracion: %s pago $%d a %s por el %s, posibles multicuentas [IP: %s]", NombreRJugador(playerid), costo, NombreRJugador(vendedor), GetVehicleName(vehiculo), ipc);
			MensajeAdmin(stringlog);
			format(stringlog, sizeof(stringlog), "[-] Pago $%s a %s por el %s. [multicuenta]", diner_coma(costo), NombreRJugador(vendedor), GetVehicleName(vehiculo));
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], stringlog, 0);
		}
		else
		{
			format(string, sizeof string, "[-] Pago $%s a %s por el %s", diner_coma(costo), NombreRJugador(vendedor), GetVehicleName(vehiculo));
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], string, 0);
		}
		format(string, sizeof string, "Administracion: %s(%d) vendio su coche %s a %s(%d) por $%s.", NombreRJugador(playerid), playerid, GetVehicleName(vehiculo), NombreRJugador(vendedor), vendedor, diner_coma(costo));
		MensajeAdmin(string);
		SendClientMessageEx(playerid, 0x33CCFFFF, "Pagaste $%s a %s por su %s.", diner_coma(costo), NombreJugador(vendedor), GetVehicleName(vehiculo));
		SendClientMessageEx(vendedor, 0x33CCFFFF, "%s compro tu %s por $%s.", NombreJugador(playerid), GetVehicleName(vehiculo), diner_coma(costo));
		GivePlayerCash(vendedor, costo, "vendermicoche");
		GivePlayerCash(playerid, -costo, "vendermicoche");
		if (IsPlayerInAnyVehicle(vendedor)) RemovePlayerFromVehicle(vendedor);
		new Float: slx, Float: sly, Float: slz;
		GetPlayerPos(vendedor, slx, sly, slz);
		SetPlayerPosEx(vendedor, slx, sly + 2, slz);
		alm(InfoVehiculo[id][vPropietario], InfoJugador[playerid][jNombre_Apellido]);
		guardar_string_mysql("vehiculos", "Propietario", InfoVehiculo[id][vID], InfoVehiculo[id][vPropietario]);
		EnVentaPropiedad[_Vehdueno[playerid]] = 0;
		_Vehdueno[playerid] = 999;
		_Vehprecio[playerid] = 0;
		_VehID[playerid] = 0;
		return 1;
	}
	_Mensaje(playerid, 4, "FFFFFF", "Nadie te ha ofrecido algo.");
	return 1;
}

CMD:aceptarcoins(playerid, params[])
{
	new Float:X,Float:Y,Float:Z, string[210];
    GetPlayerPos(ofertador[playerid], X,Y,Z);
    /*if(LeOfreci[ofertador[playerid]] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Esta oferta ya ha caducado.");*/
	if(ofertador[playerid] == INVALID_PLAYER_ID) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Nadie te ha ofrecido Coins");
	if (GetPlayerCash(playerid) < dineropedido[playerid]) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero");
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, X,Y,Z)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas cerca del vendedor");
	if(InfoJugador[ofertador[playerid]][jCoins] < EVOfrecidos[playerid]) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vendedor ya no tiene la cantidad de Coin que te ha ofrecido");
	if(EVOfrecidos[playerid] > 0)
	{
	    GivePlayerCash(playerid,-dineropedido[playerid], "aceptarcoins");
		GivePlayerCash(ofertador[playerid],dineropedido[playerid], "aceptarcoins");
		InfoJugador[playerid][jCoins] += EVOfrecidos[playerid];
		InfoJugador[ofertador[playerid]][jCoins] -= EVOfrecidos[playerid];
		guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
		guardar_int_mysql("cuentas", "Coins", InfoJugador[ofertador[playerid]][jID], InfoJugador[ofertador[playerid]][jCoins]);
		format(string, sizeof string, "Info: {FFFFFF}Aceptaste los %d Coin que te ofrecia %s.", EVOfrecidos[playerid], NombreRJugador(ofertador[playerid]));
		SendClientMessage(playerid, 0xccccccFF, string);
		format(string, sizeof string, "Info: {FFFFFF}%s acepto los %d Coin que le ofrecias.", NombreRJugador(playerid), EVOfrecidos[playerid]);
		SendClientMessage(ofertador[playerid], 0xccccccFF, string);
		format(string, sizeof string, "Vendio %d coins a %s por $%s", EVOfrecidos[playerid], NombreRJugador(ofertador[playerid]), diner_coma(dineropedido[playerid]));
		AddRegistroCoin(playerid, string);
		if(idTimerOfertaPerdida[playerid] != -1)
		{
			KillTimer(idTimerOfertaPerdida[playerid]);
			idTimerOfertaPerdida[playerid] = -1;
		}
		if(idTimerTiempoVenta[ofertador[playerid]] != -1)
		{
			KillTimer(idTimerTiempoVenta[ofertador[playerid]]);
			idTimerTiempoVenta[ofertador[playerid]] = -1;
		}
		ofertador[playerid] = INVALID_PLAYER_ID;
		EVOfrecidos[playerid] = 0;
	}
	return 1;
}

CMD:cinturons(playerid, params[]) {
    if (!IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en ningun vehiculo.");
    if (IsPlayerInAnyVehicle(playerid) == 1 && Casco[playerid] == 0) {
        Casco[playerid] = 1;
        if (EnMotos_Bicis(GetPlayerVehicleID(playerid))) { AccionesRol(playerid, 0, "agarra su casco, y se lo pone."); }
		else { AccionesRol(playerid, 0, "pone las manos en su cinturon y se lo pone."); }
    } else if (IsPlayerInAnyVehicle(playerid) == 1 && Casco[playerid] == 1) {
        Casco[playerid] = 0;
        if (EnMotos_Bicis(GetPlayerVehicleID(playerid))) { AccionesRol(playerid, 0, "pone las manos en su casco, y se lo quita."); }
		else { AccionesRol(playerid, 0, "pone las manos en su cinturon y se lo quita."); }
    }
    return 1;
}

CMD:vercinturon(playerid, params[]) {
    new playerid2;
    if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/vercinturon [id jugador]");
    if (GetPlayerState(playerid2) == PLAYER_STATE_ONFOOT) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no esta en un vehiculo.");
    if (CercaDelWeon(9.0, playerid, playerid2)) {
        new string[128];
        new stext[4];
        if (Casco[playerid2] == 0) stext = "sin";
        else stext = "con";
        if (EnMotos_Bicis(GetPlayerVehicleID(playerid))) {
            format(string, sizeof string, "%s esta %s casco.", NombreJugador(playerid2), stext);
            _Mensaje(playerid, 4, "33CCFF", string);
            new MsgCheckMe[MAX_TEXT_CHAT];
            format(MsgCheckMe, sizeof(MsgCheckMe), "mira a %s, mirando si tiene puesto su casco.", NombreJugador(playerid2));
            AccionesRol(playerid, 0, MsgCheckMe);
        } else {
            format(string, sizeof string, "%s esta %s cinturon.", NombreJugador(playerid2), stext);
            _Mensaje(playerid, 4, "33CCFF", string);
            new MsgCheckMe[MAX_TEXT_CHAT];
            format(MsgCheckMe, sizeof(MsgCheckMe), "observa a travez de la ventana de %s, mirando si usa el cinturon.", NombreJugador(playerid2));
            AccionesRol(playerid, 0, MsgCheckMe);
        }
    } else {
        ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no se encuentra cerca de ti.");
    }
    return 1;
}

CMD:gob(playerid, params[])
{
	if (!Es_Lider(playerid, 1, 2, 3, 4)) return  ShowInfoForPlayer(playerid, "Debes ser lider de una banda legal.", 2000);
	if (!Es_Lider(playerid, 5)) return  ShowInfoForPlayer(playerid, "Debes ser lider de una banda legal.", 2000);
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en este momento.");
	if (GetPVarInt(playerid, "EnEvento") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en un evento.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/gob [texto]");
	new string[256];
	if (Es_Lider(playerid, 1)) format(string, sizeof string, "Anuncio [SAPD] Jefe de Policia: {ffffff}%s", params);
	else if (Es_Lider(playerid, 2)) format(string, sizeof string, "Anuncio [ESA] General: {ffffff}%s", params);
	else if (Es_Lider(playerid, 3)) format(string, sizeof string, "Anuncio [SASD] Sheriff: {ffffff}%s", params);
	else if (Es_Lider(playerid, 4)) format(string, sizeof string, "Anuncio [GOB] Gobernador: {ffffff}%s", params);
	else if (Es_Lider(playerid, 5)) format(string, sizeof string, "Anuncio [CNN] Director: {ffffff}%s", params);
	SendClientMessageToAll(0x007ECCFF, string);
	return 1;
}

CMD:impuesto(playerid, params[]) {
    new string[90];
    if (Es_Lider(playerid, 4)) {
        if (!sscanf(params, "i", params[0])) {
            if (params[0] < 0 || params[0] > 300) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Valor entre 1 - 300.");
            ValorImpuestos = params[0];
            ActualizarEst();
            format(string, sizeof string, "Anuncio [GOB]{FFFFFF}: El gobernador %s puso el nuevo pago por impuesto. (%d$)", playerid, ValorImpuestos);
            SendClientMessageToAll(0x007ECCFF, string);
        } else _Mensaje(playerid, 3, "0", "/impuesto [cantidad]");
    } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Impuesto.");
    return 1;
}

CMD:cpantalla(playerid, params[]) {
    new text[64], type;
    if (InfoJugador[playerid][jAdmin] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Cpantalla.");
    OnDuty
    if (!sscanf(params, "is", type, text)) {
        if (type == 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes elegir el #2.");
        for (new i = 0; i < MAX_PLAYERS; i++) { if (usuario_registro[i]== 2) { GameTextForPlayer(i, text, 5000, type); } }
        new string[128];
        format(string, sizeof string, "Administracion: %s uso el comando /cpantalla.", NombreRJugador(playerid));
        MensajeAdmin(string);
    } else _Mensaje(playerid, 3, "0", "/cpantalla [tipo] [texto]");
    return 1;
}

CMD:climpiar(playerid, params[]) {
    LimpiarPantalla(playerid);
    return 1;
}

CMD:limpiarchat(playerid, params[]) {
    new string[256];
    if (InfoJugador[playerid][jAdmin] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Limpiarchat.");
    OnDuty
    CleanScreen();
    format(string, sizeof string, "Administracion: %s utilizo /limpiarchat.", NombreRJugador(playerid));
    MensajeAdmin(string);
    return 1;
}

CMD:fuelcars(playerid, params[]) {
    if (InfoJugador[playerid][jAdmin] < 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Fuelcars.");
    OnDuty
    _MensajeOOC(0xE00000FF, "*{FFFFFF} La gasolina de los vehiculos fue llenada.");
    for (new c = 0; c < MAX_VEHICLES; c++) GasolinaInicialVeh[c] = 200;
    return 1;
}

CMD:fuelcarsno(playerid, params[]) {
    if (InfoJugador[playerid][jAdmin] < 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Fuelcarsno.");
    OnDuty
    _MensajeOOC(0xE00000FF, "*{FFFFFF} La gasolina de los autos fue vaciada.");
    for (new c = 0; c < MAX_VEHICLES; c++) GasolinaInicialVeh[c] = 0;
    return 1;
}

CMD:sfondos(playerid, params[]) {
    if (!Es_Lider(playerid, 4)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres el gobernador.");
    if (ActFondos == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El sistema esta actualmente bloqueado por un administrador.");
    new string[256], amount, reason[64];
    if (sscanf(params, "ds[64]", amount, reason)) {
        _Mensaje(playerid, 3, "0", "/sfondos [monto] [razon]");
        format(string, sizeof string, "Balance: $%d.", DineroEstado);
        _Mensaje(playerid, 2, "0", string);
        return 1;
    }
    if (amount < 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El monto es invalido.");
    if (amount < 1 || params[1] > 30000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Maximo: $30.000.");
    if (DineroEstado > amount) {
        DineroEstado -= amount;
        ActualizarEst();
        GivePlayerCash(playerid, amount, "sfondos");
        format(string, sizeof string, "Retiraste $%d de los fondos del estado.", amount);
        _Mensaje(playerid, 2, "0", string);
        format(string, sizeof string, "Administracion: %s retiro $%d de los fondos del estado. {E00000}Razon: %s.", NombreRJugador(playerid), diner_coma(amount), reason);
        MensajeAdmin(string);
        format(string, sizeof string, "[+] %s retiro $%s de GOB. [%s].", NombreRJugador(playerid), diner_coma(amount), reason);
        new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], string, 2);
    } else {
        ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No hay fondos suficientes.");
    }
    return 1;
}

CMD:dfondos(playerid, params[]) {
    if (!Es_Lider(playerid, 4)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres el gobernador.");
    new string[256], amount;
    if (sscanf(params, "d", amount)) {
        _Mensaje(playerid, 3, "0", "/dfondos [monto]");
        format(string, sizeof string, "Balance: $%d.", DineroEstado);
        _Mensaje(playerid, 2, "0", string);
        return 1;
    }
    if (amount > GetPlayerCash(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No posees esa cantidad.");
    if (amount < 1 || params[1] > 100000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Maximo: $100.000.");
    DineroEstado += amount;
    ActualizarEst();
    GivePlayerCash(playerid, -amount, "dfondos");
    format(string, sizeof string, "Depositaste $%d en los fondos del estado.", amount);
    _Mensaje(playerid, 2, "0", string);
    format(string, sizeof string, "[-] %s deposito $%s en GOB.", NombreRJugador(playerid), diner_coma(amount));
    new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], string, 2);
    return 1;
}

CMD:sms(playerid, params[])
{
	new string[256], phonenumb, text[256];
	if (sscanf(params, "ds[256]", phonenumb, text)) return _Mensaje(playerid, 3, "0", "/sms [numero telefonico] [texto]");
	if (!_Telefono(playerid)){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un telefono en ninguna mano."); return 1;}
	if (InfoJugador[playerid][jTelefono] == 0 || InfoJugador[playerid][jTelefono] == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes numero de telefono, consigue uno en un 24-7 o tienda electronica.");
	if (InfoJugador[playerid][jSaldo] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes saldo suficiente para enviar un mensaje.");
	foreach(Player, i)
	{
		if (InfoJugador[i][jTelefono] == phonenumb && phonenumb != 0)
		{
			new playerid2 = i;
			if (IsPlayerConnectedEx(playerid2))
			{
				if (B_Telefono[playerid2] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador tiene el telefono apagado.");
				format(string, sizeof string, "[SMS: %d]: %s", InfoJugador[playerid][jTelefono], text);
				_Mensaje(playerid2, 4, "FFEA5F", string);
				format(string, sizeof string, "SMS al %d: %s", phonenumb, text);
				_Mensaje(playerid, 4, "FFFFFF", string);
				new Float: cx, Float: cy, Float: cz;
				GetPlayerPos(playerid, cx, cy, cz);
				PlayerPlaySound(playerid, 1053, cx, cy, cz);
				GetPlayerPos(playerid2, cx, cy, cz);
				PlayerPlaySound(playerid2, 1053, cx, cy, cz);
				GameTextForPlayer(playerid, "~r~$-1~w~ Saldo", 5000, 1);
				InfoJugador[playerid][jSaldo] -= 1;
				guardar_int_mysql("cuentas", "Saldo", InfoJugador[playerid][jID], InfoJugador[playerid][jSaldo]);
				return 1;
			}
		}
	}
	_Mensaje(playerid, 2, "0", "El numero que ha marcado no existe o no esta disponible.");
	return 1;
}

CMD:numero(playerid)
{
	if(!_Telefono(playerid)){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un telefono en ninguna mano."); return 1;}
	_Agenda(playerid);
    return 1;
}

CMD:saldo(playerid)
{
	new string[200];
	if (InfoJugador[playerid][jTelefono] == 0 || InfoJugador[playerid][jTelefono] == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes numero de telefono, consigue uno en un 24-7 o tienda electronica.");
	if(!_Telefono(playerid)){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un telefono en ninguna mano."); return 1;}
	format(string, sizeof string, "[SMS: 4911]: ?Saldo disponible $%d!", InfoJugador[playerid][jSaldo]);
	_Mensaje(playerid, 4, "FFEA5F", string);
	return 1;
}

CMD:wp(playerid, params[]) {
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en este momento.");
    if (GetPVarInt(playerid, "EnEvento") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en un evento.");
	if (InfoJugador[playerid][jTelefono] == 0 || InfoJugador[playerid][jTelefono] == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes numero de telefono, consigue uno en un 24-7 o tienda electronica.");
	if(!_Telefono(playerid)){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un telefono en ninguna mano."); return 1;}
	if (B_Telefono[playerid] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu telefono se encuentra apagado, escribe /togmovil para encenderlo.");
	ShowPlayerDialog(playerid, D_WHATSDIA, DIALOG_STYLE_LIST, "{D6E1EB}WhatsApp", "Mandar mensaje\nUbicacion", "Aceptar", "Cerrar");
	return 1;
}

CMD:llamar(playerid, params[])
{
	if (InfoJugador[playerid][jTelefono] == 0 || InfoJugador[playerid][jTelefono] == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes numero de telefono, consigue uno en un 24-7 o tienda electronica.");
    new numero;
    if (sscanf(params, "d", numero)) return _Mensaje(playerid, 3, "0", "/llamar [numero telefonico] [opcion: 108 servicio grua]");
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en este momento.");
	if (GetPVarInt(playerid, "EnEvento") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en un evento.");
	if(!_Telefono(playerid)){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un telefono en ninguna mano."); return 1;}
    if (InfoJugador[playerid][jSaldo] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes saldo suficiente para realizar esta llama.");
    if (B_Telefono[playerid] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu telefono se encuentra apagado, escribe /togmovil para encenderlo.");
	if (EnLlamada[playerid] != 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya estas en una llamada."); return 1;}
    if(numero == 0 || numero == -1){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes llamar al numero 0 o -1."); return 1;}
    if(numero == InfoJugador[playerid][jTelefono]){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No te puedes llamar a ti mismo.");}
    AccionesRol(playerid, 0, "saca su telefono y marca unos numeros.");
    LlamarTelefono(playerid, numero);
    return 1;
}

CMD:centralita(playerid){
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en este momento.");
    if (GetPVarInt(playerid, "EnEvento") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en un evento.");
	if (EnLlamada[playerid] != 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya estas en una llamada."); return 1;}
	if (InfoJugador[playerid][jFacMiembro] == 1 || InfoJugador[playerid][jFacMiembro] == 5) {
		new oyente = -1;
		for(new i; i < MAX_PLAYERS; i++) {
			if(EnLlamada[i] == 911) {
				oyente = i;
				break;
			}
		}
		if(oyente != -1) {
			PersonaEnLlamada[playerid] = oyente;
			PersonaEnLlamada[oyente] = playerid;
			_Mensaje(oyente, 2, "0", "Han respondido al telefono.");
			EnLlamada[playerid] = 2;
			EnLlamada[oyente] = 912;
			AccionesRol(playerid, 0, "contesta su llamada de emergencia.");
		    return 1;
		}
	}
    ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Parece no haber llamadas entrantes.");
	return 1;
}
CMD:atenderpd(playerid) return cmd_centralita(playerid);

CMD:contestar(playerid)
{
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en este momento.");
    if (GetPVarInt(playerid, "EnEvento") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en un evento.");
	if (InfoJugador[playerid][jTelefono] == 0 || InfoJugador[playerid][jTelefono] == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes numero de telefono, consigue uno en un 24-7 o tienda electronica.");
	if (!_Telefono(playerid)){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un telefono en ninguna mano."); return 1;}
	if (EnLlamada[playerid] != 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya estas en una llamada."); return 1;}
	if (PersonaEnLlamada[playerid] > -1)
	{
        _Mensaje(playerid, 2, "0", "Has contestado a la llamada.");
		_Mensaje(PersonaEnLlamada[playerid], 2, "0", "Han respondido al telefono, se te cobrara 1$ de saldo por esta llamada.");
		EnLlamada[playerid] = 2;
		EnLlamada[PersonaEnLlamada[playerid]] = 3;
		KillTimer(ToqueLlamadaTimer[playerid]);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Parece no haber llamadas entrantes.");
	return 1;
}
CMD:atender(playerid) return cmd_contestar(playerid);

CMD:colgar(playerid)
{
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en este momento.");
	if (GetPVarInt(playerid, "EnEvento") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en un evento.");
	ColgarTelefono(playerid);
    return 1;
}

CMD:mutearad(playerid,params[])
{
    if (InfoJugador[playerid][jAdmin] >= 1)
	{
	    new idjugador, tiempo, reason[32];
	    if (sscanf(params, "dds[32]", idjugador, tiempo, reason)) return _Mensaje(playerid, 3, "0", "/mutearad [id jugador] [tiempo] [razon]");
	    if (!IsPlayerConnectedEx(idjugador)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	    new string[128];
   		format(string, sizeof string, "El jugador %s(%i) fue muteado del canal anuncios, razon: %s.", NombreRJugador(idjugador), idjugador, reason);
    	SendClientMessageToAll(0xAA3333FF,string);
    	format(string, sizeof string, "Administrador %s(%d), tiempo %d minutos.", NombreRJugador(playerid), playerid, tiempo);
     	MensajeAdmin(string);
     	format(string, sizeof string, "%s te ha muteado el canal de anuncios por mal uso por %d minutos.", NombreRJugador(playerid), tiempo);
       	_Mensaje(idjugador, 4, "33CCFF", string);
       	SendClientMessageEx(idjugador, 0xccccccFF, "Info: {FFFFFF}Se te desconto $%s por el muteo del canal discord.", diner_coma(tiempo*200));
        GivePlayerCash(idjugador, -tiempo*200, "muteo-discord");
        InfoJugador[idjugador][jMutedAnuncios] = 1;
		InfoJugador[idjugador][jTiempoMuteoAD] = tiempo;
        guardar_int_mysql("cuentas", "MutedAnuncios", InfoJugador[idjugador][jID], InfoJugador[idjugador][jMutedAnuncios]);
        guardar_int_mysql("cuentas", "TiempoMuteoAD", InfoJugador[idjugador][jID], InfoJugador[idjugador][jTiempoMuteoAD]);
	}else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /muteardiscord.");
	return 1;
}

CMD:darropa(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /darropa.");
	OnDuty
	new playerid2, skin;
	if (sscanf(params, "ud", playerid2, skin)) return _Mensaje(playerid, 3, "0", "/darropa [id jugador] [ropa id]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (skin > 311 || skin < 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Skin ID incorrecto (0-311).");
	new string[128];
	Dar_Skin(playerid2, skin);
	format(string, sizeof string, "Administracion: %s cambio el skin de %s, SKIN: %d.", NombreRJugador(playerid), NombreRJugador(playerid2), skin);
	MensajeAdmin(string);
	return 1;
}
CMD:darskin(playerid, params[]) return cmd_darropa(playerid, params);
CMD:setskin(playerid, params[]) return cmd_darropa(playerid, params);

public OnPlayerStreamIn(playerid, forplayerid)
{
	if (MostrarNombre[playerid] == 0) ShowPlayerNameTagForPlayer(playerid, forplayerid, true);
	else ShowPlayerNameTagForPlayer(playerid, forplayerid, false);
	return 1;
}

CMD:nombres(playerid)
{
	if (MostrarNombre[playerid] == 0)
	{
		_Mensaje(playerid, 4, "F8D48C", "Nombres de jugadores desactivados.");
		foreach(Player, i) ShowPlayerNameTagForPlayer(playerid, i, false);
		MostrarNombre[playerid] = 1;
	}
	else
	{
		_Mensaje(playerid, 4, "F8D48C", "Nombres de jugadores activados.");
		MostrarNombre[playerid] = 0;
		foreach(Player, i) ShowPlayerNameTagForPlayer(playerid, i, true);
	}
	return 1;
}

CMD:mascara(playerid, params[])
{
	if (InfoJugador[playerid][jMascara] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes mascara.");
	if (InfoJugador[playerid][jUsoMascara] == 0)
	{
		InfoJugador[playerid][jUsoMascara] = 1;
		AccionesRol(playerid, 0, "se coloca una mascara.");
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 1, 1, 0, 0, 1);
		SetPlayerName(playerid, NombreJugador(playerid));
	}
	else
	{
		AccionesRol(playerid, 0, "se retira la mascara.");
		InfoJugador[playerid][jUsoMascara] = 0;
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 1, 1, 0, 0, 1);
		SetPlayerName(playerid, InfoJugador[playerid][jNombre_Apellido]);
	}
	return 1;
}

CMD:togstaff(playerid, params[]) {
    if (InfoJugador[playerid][jAdmin] > 1) {
        if (!B_Admin[playerid]) {
            B_Admin[playerid] = 1;
            _Mensaje(playerid, 2, "0", "Canal de administracion desactivado");
        } else {
            B_Admin[playerid] = 0;
            _Mensaje(playerid, 2, "0", "Canal de administracion activado");
        }
    } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /togstaff.");
    return 1;
}

CMD:togmp(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Togprivados.");
	if (B_Privados[playerid] == 0)
	{
		B_Privados[playerid] = 1;
		_Mensaje(playerid, 2, "0", "Bloqueaste tus mensajes privados.");
	}
	else
	{
		B_Privados[playerid] = 0;
		_Mensaje(playerid, 2, "0", "Habilitaste tus mensajes privados.");
	}
	return 1;
}
CMD:togprivados(playerid) return cmd_togmp(playerid);

CMD:diadepaga(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Diadepaga.");
	new string[210];
	format(string, sizeof string, "Encargados: %s(%d) adelanto el payday en esta oportunidad.", NombreJugador(playerid), playerid);
	MensajeEncargados(string);
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2))
	{
		FalsoPD[playerid2] = 1;
		PagoDiario(playerid2);
	}
	return 1;
}

CMD:adminrcon(playerid, params[])
{
	if (IsPlayerAdmin(playerid))
	{
		if (sscanf(params, "ud", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/adminrcon [id jugador] [nivel]");
		if (!IsPlayerConnected(params[0])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
		new string[128];
		InfoJugador[params[0]][jAdmin] = params[1];
		guardar_int_mysql("cuentas", "JuegaleOwo", InfoJugador[params[0]][jID], InfoJugador[params[0]][jAdmin]);
		format(string, sizeof string, "* %s lo ha asignado administrador nivel %d", NombreRJugador(playerid), params[1]);
		_Mensaje(params[0], 4, "33CCFF", string);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Adminrcon.");
	return 1;
}

CMD:servicios(playerid, params[])
{
	new string[190];
	if (InfoJugador[playerid][jEncarcelado] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas en prision.");
	if (InfoJugador[playerid][jTiempoServicio] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas esperar 30 segundos para usar este comando.");
	if (sscanf(params, "s[32]", params[0])) return  _Mensaje(playerid, 3, "0", "/servicios [tipo] - Tipos: policia, medico, bombero");
	if (strcmp(params[0], "policia", true) == 0)
	{
		if (!_Telefono(playerid)){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un telefono en ninguna mano."); return 1;}
		LlamarTelefono(playerid, 911);
	}
	else if (strcmp(params[0], "medico", true) == 0)
	{
		if (Fac5_ < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En este momento no se encuentran medicos disponibles, intenta mas tarde.");
		format(string, sizeof string, "** %s necesita un medico - usa '/irmedico' para ir al llamado.", NombreJugador(playerid));
		SendRadioTrabajo(15, 0x01FCFFC8, string);
		_Mensaje(playerid, 4, "FAE800", "Has solicitado un medico.");
		_MedicCall = playerid;
		InfoJugador[playerid][jTiempoServicio] = 30;
	}
	else if (strcmp(params[0], "bombero", true) == 0)
	{
		if (Fac5_ < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En este momento no se encuentran bomberos en servicio, intenta mas tarde.");
		format(string, sizeof string, "** %s necesita un bombero - usa '/irbombero' para ir al llamado.", NombreJugador(playerid));
		SendRadioTrabajo(15, 0x01FCFFC8, string);
		_Mensaje(playerid, 4, "FAE800", "Has solicitado un bombero.");
		_BombCall = playerid;
		InfoJugador[playerid][jTiempoServicio] = 30;
	}
	return 1;
}

CMD:servicio(playerid)
{
	new string[128];
	if (Es_Banda(playerid, 1, 2, 3)) // policia - militares - sheriff
	{
		if (InfoJugador[playerid][jDutyPD] == 1)
		{
			InfoJugador[playerid][jDutyPD] = 0;
			guardar_int_mysql("cuentas", "dutypd", InfoJugador[playerid][jID], InfoJugador[playerid][jDutyPD]);
			foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jEstrellas] != 0)
			{
				SetPlayerMarkerForPlayer(playerid, playerid2, 0xFFFFFF00);
			}
			_Mensaje(playerid, 2, "0", "Ahora fuera de servicio.");
		}
		else
		{
			InfoJugador[playerid][jDutyPD] = 1;
			guardar_int_mysql("cuentas", "dutypd", InfoJugador[playerid][jID], InfoJugador[playerid][jDutyPD]);
			_Mensaje(playerid, 2, "0", "Ahora estas en servicio.");
		}
		return 1;
	}
	else if (Es_Banda(playerid, 110)) // mecanicos
	{
		if (EnServicio[playerid] == 0)
		{
			EnServicio[playerid] = 1;
			format(string, sizeof string, "[Anuncio] El mecanico %s se encuentra en servicio. Movil: %d", NombreJugador(playerid), InfoJugador[playerid][jTelefono]);
			_MensajeSAN(0x00D900FF, string);
			_Mensaje(playerid, 2, "0", "Ahora estas en servicio, recibiras llamadas de la gente que te necesite.");
			++Fac2_;
		}
		else
		{
			Fac2_ -= 1;
			EnServicio[playerid] = 0;
			_Mensaje(playerid, 2, "0", "Ahora estas fuera servicio, ya no recibiras llamadas.");
		}
		return 1;
	}
	else if (Es_Banda(playerid, 4, 5)) // noticias - gobierno
	{
		if (EnServicio[playerid] == 0)
		{
			EnServicio[playerid] = 1;
			_Mensaje(playerid, 2, "0", "Ahora estas en servicio");
		}
		else
		{
			EnServicio[playerid] = 0;
			_Mensaje(playerid, 2, "0", "Ahora estas en servicio");
		}
		return 1;
	}
	else if (Es_job(playerid, 15)) //- Medico
	{
		if (EnServicio[playerid] == 1)
		{
			_Mensaje(playerid, 2, "0", "Ahora estas fuera servicio, ya no recibiras llamadas.");
			foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jEstrellas] != 0)
			EnServicio[playerid] = 0;
			Fac5_ -= 1;
		}
		else
		{
			_Mensaje(playerid, 2, "0", "Ahora estas en servicio, recibiras llamadas de la gente que te necesite.");
			EnServicio[playerid] = 1;
			++Fac5_;
		}
		return 1;
	}
	ShowInfoForPlayer(playerid, "Debes ser miembro de una banda legal.", 2000);
	return 1;
}
CMD:duty(playerid) return cmd_servicio(playerid);
CMD:enservicio(playerid) return cmd_servicio(playerid);

CMD:entrevista(playerid, params[])
{
	if (Es_Banda(playerid, 5)) {
		if (_2Entrevista[playerid] != INVALID_PLAYER_ID) {
			_Mensaje(playerid, 2, "0", "Entrevista terminada.");
			_Mensaje(_2Entrevista[playerid], 2, "0", "Entrevista terminada.");
			_2Entrevista[_2Entrevista[playerid]] = INVALID_PLAYER_ID;
			_2Entrevista[playerid] = INVALID_PLAYER_ID;
			return 1;
		}
		new string[128], playerid2;
		if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/entrevista [id jugador]");
		if (IsPlayerConnected(playerid2))
		{
			if (CercaDelWeon(5.0, playerid, playerid2)) {
				if (playerid2 == playerid) {
					ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes hacer una entrevista a ti mismo!");
					return 1;
				}
				format(string, sizeof string, "* Ofreciste a %s una entrevista.", NombreJugador(playerid2));
				_Mensaje(playerid, 4, "33CCFF", string);
				format(string, sizeof string, "* %s te ha ofrecido una entrevista, escribe '/aceptar' para aceptar.", NombreJugador(playerid));
				_Mensaje(playerid2, 4, "33CCFF", string);
				_Entrevista[playerid2] = playerid;
			} else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no se encuentra cerca de ti.");
		} else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No formas parte de MTV.");
	return 1;
}

CMD:desconectar(playerid, params[])
{
	if (Es_Banda(playerid, 5)) {
		if ( _sanCall != -1 ) {
			ColgarTelefono(_sanCall);
			_sanCall = -1;
		} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No hay nadie en la linea de MTV");
	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No formas parte de SAN.");
	return 1;
}

CMD:conectar(playerid, params[])
{
	if (Es_Banda(playerid, 5)) {
		new newcar = GetPlayerVehicleID(playerid);
		if (EstaEnAutoSAN(newcar) || _enPos(playerid, 7.0, 1115.0129, 1248.0106, 10.8203) || _enPos(playerid, 7.0, 657.1969, -1347.9969, 4002.7947)) {
			if ( _sanCall == -1 ) {
			    new numero, nume2ro = true;
				if (!sscanf(params, "d", numero)) {
					if (!isnumeric(params)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo numeros porfavor, vuelve a intentarlo.");
					for (new i = 0; i < MAX_PLAYERS; i++) {
						if (IsPlayerConnectedEx(i) && state_on[i] == 3 && InfoJugador[i][jTelefono] == numero) {
							if (EnLlamada[i] == 305) {
								nume2ro = false;
								_MensajeSAN(0x00DC3AFF, "[SAN] Conexion telefonica establecida.");
								_sanCall = i;
								_Mensaje(_sanCall, 4, "00DC3A", "> {ffffff}Te encuentras en linea con SA Network.");
							} else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El numero que desea conectar no se encuentra en esta linea.");
						}
					}
					if (nume2ro) {
						ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El numero que desea conectar posiblemente no exista.");
					}
				} else _Mensaje(playerid, 3, "0", "/conectar [numero de telefono]");
			} else _Mensaje(playerid, 3, "0", "La linea de SA Network esta ocupada.");
        } else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres en una camioneta de noticias o helicoptero o en el estudio.");
	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No formas parte de SAN.");
	return 1;
}

CMD:directo(playerid, params[]) 
{
	if (Es_Banda(playerid, 5)) 
	{
		new string[128];
		if (isnull(params)) return _Mensaje(playerid, 3, "0", "/directo [texto]");
		new newcar = GetPlayerVehicleID(playerid);
		if (EstaEnAutoSAN(newcar) || _enPos(playerid, 7.0, 256.1315, 1762.5151, 701.0929) || _enPos(playerid, 7.0, 657.1969, -1347.9969, 4002.7947)) 
		{

				format(string, sizeof string, "[SAN] %s: %s", NombreJugador(playerid), params);
				_MensajeSAN(0x00DC76FF, string);
			
		}
		 else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres en una camioneta de noticias o helicoptero o en el estudio.");
	}
	 else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No formas parte de SAN.");
	return 1;
}

CMD:apgarage(playerid)
{
	if (Es_Banda(playerid, 5))
	{
		if (_enPos(playerid, 30, 781.77209500, -1330.31884800, 12.68660500))
		{
			MoveDynamicObject(portonSAN, 773.89648400, -1330.31884800, 12.68660500, 5.0);
			SetTimer("CerrarPortonSAN", 10000, 0);
			return 1;
		}
		if (_enPos(playerid, 30, 774.11425781, -1384.98632812, 12.92022705))
		{
			MoveDynamicObject(portonSAN1, 765.11425781, -1384.98632812, 12.92022705, 5.0);
			SetTimer("CerrarPortonSAN1", 10000, 0);
			return 1;
		} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No hay se?al.");
	}
	return 1;
}

CMD:puertas(playerid)
{
	if(Es_Banda(playerid, 1))
	{
	    if(_enPos(playerid, 4, 244.6000, 72.7385, 1002.6406))
	    {
		    MoveDynamicObject(PuertaLAPD, 244.6000, 72.7385, 1002.6406, 2.0);
			SetTimer("CerrarPuertaLAPD", 5000, 0);
			return 1;
		}
		if(_enPos(playerid, 8.0, 1543.0790,-1627.3461,13.3828))
	    {
		    MoveDynamicObject(PortonLAPD, 1545.506225, -1627.595825, 5.642810, 5.0);
			SetTimer("CerrarPortonLAPD", 10000, 0);
			return 1;
		}
	}
	return 1;
}


CMD:deposito(playerid)
{
	if (_enPos(playerid, 10, -497.41959, -562.72961, 27.28690))
	{
		MoveDynamicObject(portondeposito, -497.4196, -562.7296, 21.7239, 4.0);
		SetTimer("depositogate", 7000, 0);
	}
	return 1;
}

//Cierre de Portones.
funcion depositogate() { MoveDynamicObject(portondeposito, -497.41959, -562.72961, 27.28690, 4.0); return 1; }
funcion CerrarPortonSAN() { MoveDynamicObject(portonSAN, 781.77209500, -1330.31884800, 12.68660500, 5.0); return 1; }
funcion CerrarPortonSAN1() { MoveDynamicObject(portonSAN1, 774.11425781, -1384.98632812, 12.92022705, 5.0); return 1; }

//Cerrar nuevas puertas
funcion CerrarPuertaLAPD() { MoveDynamicObject(PuertaLAPD, 245.6000, 72.7385, 1002.6406, 5.0); return 1; }
funcion CerrarPortonLAPD() { MoveDynamicObject(PortonLAPD, 1545.506225, -1627.595825, 11.642810, 5.0); return 1; }

CMD:equipo(playerid)
{
	// lapd
	if (Es_Banda(playerid, 1))
	{
		if (_enPos(playerid, 5, 258.5224,78.1989,1003.6406) || _enPos(playerid, 5, 219.6902,149.5422,1003.0234))
		{
			Dialog_Show(playerid, Show_LAPD_Equipo, DIALOG_STYLE_LIST, "Casillero", "Servicio\nArmeria\nUniformes\nAccesorios\nEncubierto", "Continuar", "Salir");
			return 1;
		}

	}
	// CNN
	else if (Es_Banda(playerid, 5))
	{
		if (!_enPos(playerid, 5, 249.2031, 1774.6155, 701.0859)) return 1;
		Dialog_Show(playerid, Show_CNN_Equipo, DIALOG_STYLE_LIST, "Casillero", "Camara\nBotiquin HP\nUniformes\nVestuario normal", "Continuar", "Salir");
	}
	// gobierno
	else if (Es_Banda(playerid, 4))
	{
		if (!_enPos(playerid, 5, 351.6515, 213.3615, 1008.4004)) return 1;
		Dialog_Show(playerid, Show_GOB_Equipo, DIALOG_STYLE_LIST, "Casillero", "Botiquin HP\nUniformes\nChaleco\nVestuario normal\nArmeria", "Continuar", "Salir");
	}
	// sheriff
	else if (Es_Banda(playerid, 3))
	{
		if (!_enPos(playerid, 5, 266.0501,119.1464,1004.6172)) return 1;
		Dialog_Show(playerid, Show_SHERIFF_Equipo, DIALOG_STYLE_LIST, "Casillero", "Servicio\nArmeria\nUniformes\nAccesorios", "Continuar", "Salir");
	}
	// medicos
	else if (Es_job(playerid, 15))
	{
		if (!_enPos(playerid, 5, 1169.6697,-1352.4993,-10.7849)) return 1;
		Dialog_Show(playerid, Show_LAFD_Equipo, DIALOG_STYLE_LIST, "Casillero", "Extintor\nUniformes\nVida\nVestuario normal\nBotiquin", "Continuar", "Salir");
	}
	//militares
	else if (Es_Banda(playerid, 2))
	{
		if (_enPos(playerid, 5, 248.2357,1859.6606,14.0840) || _enPos(playerid, 5, 2743.8459,-2453.7400,13.8623) || _enPos(playerid, 5, 2743.8459,-2453.7400,13.8623))
		Dialog_Show(playerid, Show_Militares_Equipo, DIALOG_STYLE_LIST, "{D6E1EB}Casillero", "Servicio\nArmeria\nUniformes\nAccesorios", "Continuar", "Salir");
 }
	//
	else return 1;
	return 1;
}
CMD:uniformes(playerid) return cmd_equipo(playerid);

Dialog:Show_LAPD_Equipo(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (InfoJugador[playerid][jDutyPD] == 0)
			{
				AccionesRol(playerid, 0, "coge una placa, ademas de un botiquin de hp mas un chaleco anti balas.");
				Dar_Chaleco(playerid, 100.0);
				Dar_Vida(playerid, 100);
				InfoJugador[playerid][jDutyPD] = 1;
			}
			else
			{
				AccionesRol(playerid, 0, "deja todas sus cosas en el casillero.");
				if (Objeto_Carga(InfoJugador[playerid][jManoDerecha])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				InfoJugador[playerid][jManoDerecha] = 0;
				InfoJugador[playerid][jManoDerechaCant] = 0;
				if (Objeto_Carga(InfoJugador[playerid][jManoIzquierda])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				InfoJugador[playerid][jManoIzquierda] = 0;
				InfoJugador[playerid][jManoIzquierdaCant] = 0;
				RemovePlayerAttachedObject(playerid, 6);
				RemovePlayerAttachedObject(playerid, 7);
				QuitarArmas(playerid);
 	            ResetPlayerWeapons(playerid);
               	ActualizarArmas(playerid);
				Dar_Chaleco(playerid, 0.0);
				InfoJugador[playerid][jDutyPD] = 0;
				guardar_int_mysql("cuentas", "dutypd", InfoJugador[playerid][jID], InfoJugador[playerid][jDutyPD]);
				foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jEstrellas] != 0)
				{
					SetPlayerMarkerForPlayer(playerid, playerid2, 0xFFFFFF00);
				}
				ActualizarManos(playerid);
			}
		}
		case 1:
		{
			if (InfoJugador[playerid][jDutyPD] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes estar en servicio.");
			new cadena[500];
			strcat(cadena, "Chaleco\n");
			strcat(cadena, "Baston Policial\n");
			strcat(cadena, "45. Colt\n");
			strcat(cadena, "Desert Eagle\n");
			strcat(cadena, "Escopeta\n");
			strcat(cadena, "MP5\n");
			strcat(cadena, "M4\n");
			strcat(cadena, "AK.47\n");
			strcat(cadena, "EDC\n");
			strcat(cadena, "Botiquin\n");
			if (Es_Banda(playerid, 1)) Dialog_Show(playerid, Show_Armeria_Equipo, 2, "Armeria", cadena, "Continuar", "Volver");
		}
		case 2:
		{
			if (InfoJugador[playerid][jDutyPD] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes estar en servicio.");
			new UniformesPD[21];
			UniformesPD[0] = 71; UniformesPD[1] = 141; UniformesPD[2] = 280; UniformesPD[3] = 266; UniformesPD[4] = 281;
			UniformesPD[5] = 265; UniformesPD[6] = 267; UniformesPD[7] = 284; UniformesPD[8] = 285; UniformesPD[9] = 282;
			UniformesPD[10] = 283; UniformesPD[11] = 288; UniformesPD[12] = 300; UniformesPD[13] = 301; UniformesPD[14] = 302;
			UniformesPD[15] = 306; UniformesPD[16] = 307; UniformesPD[17] = 309; UniformesPD[18] = 310; UniformesPD[19] = 311;
			UniformesPD[20] = InfoJugador[playerid][jSkin];
			ShowModelSelectionMenuEx(playerid, UniformesPD, 21, "Uniformes", D_UNIFORMESPD);
		}
		case 3:
		{
			if (CountPlayerToy(playerid) == 5) return SendClientMessage(playerid, 0xccccccff, "* No puedes comprar mas de cinco accesorios, elimina alguno para comprar otro.");
			new stringg[700];
			Loop(x, sizeof AccesoriosPD, 0)
			{
				format(stringg, sizeof(stringg), "%s%s ($%s)\n", stringg, AccesoriosPD[x][NombreAccesorio], diner_coma(AccesoriosPD[x][PrecioAccesorio]));
			}
			Dialog_Show(playerid, Show_Accesorios_Equipo, DIALOG_STYLE_LIST, "Accesorios policiales", stringg, "Comprar", "Volver");
		}
		case 4: Dialog_Show(playerid, Show_Encubierto_Equipo, DIALOG_STYLE_INPUT, "Encubierto", "Introduce el ID skin:", "Continuar", "Volver");
	}
	return 1;
}

Dialog:Show_Encubierto_Equipo(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_equipo(playerid);
	new skinid = strval(inputtext);
	if (!SeleccionSkin(skinid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Seleccion de skin del 1 al 311.");
	Dar_Skin(playerid, skinid);
	return 1;
}

Dialog:Show_CNN_Equipo(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (InfoJugador[playerid][jManoDerecha] > 0 && InfoJugador[playerid][jManoIzquierda] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes tener una mano vacia.");
			if (InfoJugador[playerid][jManoDerecha] == 0)
			{
				InfoJugador[playerid][jManoDerecha] = 38;
				InfoJugador[playerid][jManoDerechaCant] = 100;
				PonerObjeto(playerid, 1, 38);
				GivePlayerWeapon(playerid, InfoInventario[38][IDArma], 100);
			}
			else if (InfoJugador[playerid][jManoDerecha] != 0)
			{
				InfoJugador[playerid][jManoIzquierda] = 38;
				InfoJugador[playerid][jManoIzquierdaCant] = 100;
				PonerObjeto(playerid, 2, 38);
			}
			ActualizarManos(playerid);
		}
		case 1: Dar_Vida(playerid, 100);
		case 2:
		{
			new UniformesSAN[7]; UniformesSAN[0] = 189; UniformesSAN[1] = 40; UniformesSAN[2] = 217;
			UniformesSAN[3] = 211; UniformesSAN[4] = 223; UniformesSAN[5] = 171; UniformesSAN[6] = 290;
			ShowModelSelectionMenuEx(playerid, UniformesSAN, 7, "Uniformes", D_UNIFORMESSAN);
		}
		case 3: SetPlayerSkin(playerid, InfoJugador[playerid][jSkin]);
	}
	return 1;
}

Dialog:Show_GOB_Equipo(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: Dar_Vida(playerid, 100);
		case 1:
		{
			new UniformesALC[10]; UniformesALC[0] = 147; UniformesALC[1] = 150;
			UniformesALC[2] = 163; UniformesALC[3] = 164; UniformesALC[4] = 165; UniformesALC[5] = 166;
			UniformesALC[6] = 223; UniformesALC[7] = 216; UniformesALC[8] = 290;  UniformesALC[9] = 305;
			ShowModelSelectionMenuEx(playerid, UniformesALC, 10, "Uniformes", D_UNIFORMESALC);
		}
		case 2:
		{
			if (InfoJugador[playerid][jFacRango] < 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres rango 4 o superior.");
			if (InfoJugador[playerid][jManoDerecha] > 0 && InfoJugador[playerid][jManoIzquierda] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes tener una mano vacia.");
			if (InfoJugador[playerid][jManoDerecha] == 0)
			{
				InfoJugador[playerid][jManoDerecha] = 72;
				InfoJugador[playerid][jManoDerechaCant] = 100;
				PonerObjeto(playerid, 1, 72);
			}
			else if (InfoJugador[playerid][jManoDerecha] != 0)
			{
				InfoJugador[playerid][jManoIzquierda] = 72;
				InfoJugador[playerid][jManoIzquierdaCant] = 100;
				PonerObjeto(playerid, 2, 72);
			}
			ActualizarManos(playerid);
		}
		case 3: SetPlayerSkin(playerid, InfoJugador[playerid][jSkin]);
		case 4:
		{
			new cadena[500];
			strcat(cadena, "Chaleco\n");
			strcat(cadena, "Porra\n");
			strcat(cadena, "45. Colt\n");
			strcat(cadena, "Desert Eagle\n");
			strcat(cadena, "Escopeta\n");
			if (Es_Banda(playerid, 4)) Dialog_Show(playerid, Show_Armeria_Equipo, 2, "Armeria", cadena, "Continuar", "Volver");
		}
	}
	return 1;
}

Dialog:Show_LAFD_Equipo(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			new obj = 37;
			if (InfoJugador[playerid][jManoDerecha] > 0 && InfoJugador[playerid][jManoIzquierda] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes tener una mano vacia.");
			if (InfoJugador[playerid][jManoDerecha] == 0)
			{
				InfoJugador[playerid][jManoDerecha] = obj;
				InfoJugador[playerid][jManoDerechaCant] = InfoInventario[obj][Capacidad];
				PonerObjeto(playerid, 1, obj);
				GivePlayerWeapon(playerid, InfoInventario[obj][IDArma], InfoInventario[obj][Capacidad]);
			}
			else if (InfoJugador[playerid][jManoDerecha] != 0)
			{
				InfoJugador[playerid][jManoIzquierda] = obj;
				InfoJugador[playerid][jManoIzquierdaCant] = InfoInventario[obj][Capacidad];
				PonerObjeto(playerid, 2, obj);
			}
			ActualizarManos(playerid);
			AccionesRol(playerid, 0, "toma un extintor del armario.");
		}
		case 1:
		{
			new UniformesES[10]; UniformesES[0] = 275; UniformesES[1] = 276; UniformesES[2] = 274; UniformesES[3] = 277;
			UniformesES[4] = 279; UniformesES[5] = 278; UniformesES[6] = 70; UniformesES[7] = 311; UniformesES[8] = 309; UniformesES[9] = 61;
			ShowModelSelectionMenuEx(playerid, UniformesES, 10, "Uniformes", D_UNIFORMESES);
		}
		case 2: Dar_Vida(playerid, 100);
		case 3: SetPlayerSkin(playerid, InfoJugador[playerid][jSkin]);
		case 4:
		{
			if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes tener una mano vacia.");
			if (InfoJugador[playerid][jManoDerecha] == 0)
			{
				InfoJugador[playerid][jManoDerecha] = 130;
				InfoJugador[playerid][jManoDerechaCant] = 1;
				PonerObjeto(playerid, 1, 130);
			}
			else
			{
				InfoJugador[playerid][jManoIzquierda] = 130;
				InfoJugador[playerid][jManoIzquierdaCant] = 1;
				PonerObjeto(playerid, 2, 130);
			}
			ActualizarManos(playerid);
		}
	}
	return 1;
}

Dialog:Show_SHERIFF_Equipo(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (InfoJugador[playerid][jDutyPD] == 0)
			{
				AccionesRol(playerid, 0, "coge una placa, ademas de un botiquin de hp mas un chaleco anti balas.");
				Dar_Chaleco(playerid, 100.0);
				Dar_Vida(playerid, 100);
				InfoJugador[playerid][jDutyPD] = 1;
			}
			else
			{
				AccionesRol(playerid, 0, "deja todas sus cosas en el casillero.");
				if (Objeto_Carga(InfoJugador[playerid][jManoDerecha])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				InfoJugador[playerid][jManoDerecha] = 0;
				InfoJugador[playerid][jManoDerechaCant] = 0;
				if (Objeto_Carga(InfoJugador[playerid][jManoIzquierda])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				InfoJugador[playerid][jManoIzquierda] = 0;
				InfoJugador[playerid][jManoIzquierdaCant] = 0;
				RemovePlayerAttachedObject(playerid, 6);
				RemovePlayerAttachedObject(playerid, 7);
				QuitarArmas(playerid);
 	            ResetPlayerWeapons(playerid);
               	ActualizarArmas(playerid);
				Dar_Chaleco(playerid, 0.0);
				InfoJugador[playerid][jDutyPD] = 0;
				guardar_int_mysql("cuentas", "dutypd", InfoJugador[playerid][jID], InfoJugador[playerid][jDutyPD]);
				foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jEstrellas] != 0)
				{
					SetPlayerMarkerForPlayer(playerid, playerid2, 0xFFFFFF00);
				}
				ActualizarManos(playerid);
			}
		}
		case 1:
		{
			if (InfoJugador[playerid][jDutyPD] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes estar en servicio.");
			new cadena[500];
			strcat(cadena, "Chaleco\n");
			strcat(cadena, "Baston Policial\n");
			strcat(cadena, "45. Colt\n");
			strcat(cadena, "Desert Eagle\n");
			strcat(cadena, "Escopeta\n");
			strcat(cadena, "MP5\n");
			strcat(cadena, "M4\n");
			strcat(cadena, "AK.47\n");
			strcat(cadena, "EDC\n");
			strcat(cadena, "Botiquin\n");
			if (Es_Banda(playerid, 3)) Dialog_Show(playerid, Show_Armeria_Equipo, 2, "Armeria", cadena, "Continuar", "Volver");
		}
		case 2:
		{
			if (InfoJugador[playerid][jDutyPD] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes estar en servicio.");
			new UniformesPD[21];
			UniformesPD[0] = 71; UniformesPD[1] = 141; UniformesPD[2] = 280; UniformesPD[3] = 266; UniformesPD[4] = 281;
			UniformesPD[5] = 265; UniformesPD[6] = 267; UniformesPD[7] = 284; UniformesPD[8] = 285; UniformesPD[9] = 282;
			UniformesPD[10] = 283; UniformesPD[11] = 288; UniformesPD[12] = 300; UniformesPD[13] = 301; UniformesPD[14] = 302;
			UniformesPD[15] = 306; UniformesPD[16] = 307; UniformesPD[17] = 309; UniformesPD[18] = 310; UniformesPD[19] = 311;
			UniformesPD[20] = InfoJugador[playerid][jSkin];
			ShowModelSelectionMenuEx(playerid, UniformesPD, 21, "Uniformes", D_UNIFORMESPD);
		}
		case 3:
		{
			if (CountPlayerToy(playerid) == 5) return SendClientMessage(playerid, 0xccccccff, "* No puedes comprar mas de cinco accesorios, elimina alguno para comprar otro.");
			new stringg[700];
			Loop(x, sizeof AccesoriosPD, 0)
			{
				format(stringg, sizeof(stringg), "%s%s ($%s)\n", stringg, AccesoriosPD[x][NombreAccesorio], diner_coma(AccesoriosPD[x][PrecioAccesorio]));
			}
			Dialog_Show(playerid, Show_Accesorios_Equipo, DIALOG_STYLE_LIST, "Accesorios policiales", stringg, "Comprar", "Volver");
		}
		case 4: Dialog_Show(playerid, Show_Encubierto_Equipo, DIALOG_STYLE_INPUT, "Encubierto", "Introduce el ID skin:", "Continuar", "Volver");
	}
	return 1;
}

Dialog:Show_Militares_Equipo(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (InfoJugador[playerid][jDutyPD] == 0)
			{
				AccionesRol(playerid, 0, "coge una placa, ademas de un botiquin de hp mas un chaleco anti balas.");
				Dar_Chaleco(playerid, 100.0);
				Dar_Vida(playerid, 100);
				InfoJugador[playerid][jDutyPD] = 1;
			}
			else
			{
				AccionesRol(playerid, 0, "deja todas sus cosas en el casillero.");
				if (Objeto_Carga(InfoJugador[playerid][jManoDerecha])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				InfoJugador[playerid][jManoDerecha] = 0;
				InfoJugador[playerid][jManoDerechaCant] = 0;
				if (Objeto_Carga(InfoJugador[playerid][jManoIzquierda])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				InfoJugador[playerid][jManoIzquierda] = 0;
				InfoJugador[playerid][jManoIzquierdaCant] = 0;
				RemovePlayerAttachedObject(playerid, 6);
				RemovePlayerAttachedObject(playerid, 7);
				QuitarArmas(playerid);
 	            ResetPlayerWeapons(playerid);
               	ActualizarArmas(playerid);
				Dar_Chaleco(playerid, 0.0);
				InfoJugador[playerid][jDutyPD] = 0;
				guardar_int_mysql("cuentas", "dutypd", InfoJugador[playerid][jID], InfoJugador[playerid][jDutyPD]);
				foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jEstrellas] != 0)
				{
					SetPlayerMarkerForPlayer(playerid, playerid2, 0xFFFFFF00);
				}
				ActualizarManos(playerid);
			}
		}
		case 1:
		{
			if (InfoJugador[playerid][jDutyPD] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes estar en servicio.");
			new cadena[500];
			strcat(cadena, "Chaleco\n");
			strcat(cadena, "Baston Policial\n");
			strcat(cadena, "45. Colt\n");
			strcat(cadena, "Desert Eagle\n");
			strcat(cadena, "Escopeta\n");
			strcat(cadena, "MP5\n");
			strcat(cadena, "M4\n");
			strcat(cadena, "AK.47\n");
			strcat(cadena, "EDC\n");
			strcat(cadena, "Botiquin\n");
			if (Es_Banda(playerid, 2)) Dialog_Show(playerid, Show_Armeria_Equipo, 2, "Armeria", cadena, "Continuar", "Volver");
		}
		case 2:
		{
			new UniformesGN[6];
			UniformesGN[0] = 287; UniformesGN[1] = 61; UniformesGN[2] = 73; UniformesGN[3] = 179;
			UniformesGN[4] = 96; UniformesGN[5] = InfoJugador[playerid][jSkin];
			ShowModelSelectionMenuEx(playerid, UniformesGN, 2, "Uniformes", D_UNIFORMESPD);
		}
		case 3:
		{
			if (CountPlayerToy(playerid) == 5) return SendClientMessage(playerid, 0xccccccff, "* No puedes comprar mas de cinco accesorios, elimina alguno para comprar otro.");
			new stringg[700];
			Loop(x, sizeof AccesoriosPD, 0)
			{
				format(stringg, sizeof(stringg), "%s%s ($%s)\n", stringg, AccesoriosPD[x][NombreAccesorio], diner_coma(AccesoriosPD[x][PrecioAccesorio]));
			}
			Dialog_Show(playerid, Show_Accesorios_Equipo, DIALOG_STYLE_LIST, "Accesorios policiales", stringg, "Comprar", "Volver");
		}
		case 4: Dialog_Show(playerid, Show_Encubierto_Equipo, DIALOG_STYLE_INPUT, "Encubierto", "Introduce el ID skin:", "Continuar", "Volver");
	}
	return 1;
}


Dialog:Show_Armeria_Equipo(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_equipo(playerid);
	new obj = 0, string[190];
	switch (listitem)
	{
        case 0:
		{
			AccionesRol(playerid, 0, "coge un chaleco antibalas.");
            Dar_Chaleco(playerid, 100.0);
	        return 1;
		}

        case 1: DarArma(playerid, 3), AccionesRol(playerid, 0, "coge una porra del casillero.");
		case 2: DarArma(playerid, 22),AccionesRol(playerid, 0, "coge una 9mm del casillero.");
		case 3: DarArma(playerid, 24), AccionesRol(playerid, 0, "coge un desert eagle del casillero.");
		case 4:
		{
			if (InfoJugador[playerid][jFamRango] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres rango 1 o superior.");
			DarArma(playerid, 25), AccionesRol(playerid, 0, "coge una escopeta del casillero.");
		}
		case 5:
		{
			if (InfoJugador[playerid][jFamRango] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres rango 3 o superior.");
			DarArma(playerid, 29), AccionesRol(playerid, 0, "coge una Mp5 del casillero.");
		}
		case 6:
		{
			if (InfoJugador[playerid][jFamRango] < 15) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres rango 15 o superior.");
			DarArma(playerid, 31), AccionesRol(playerid, 0, "coge una M4 del casillero.");
		}
		case 7:
		{
			if (InfoJugador[playerid][jFamRango] < 15) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres rango 15 o superior.");
			DarArma(playerid, 30), AccionesRol(playerid, 0, "coge una Ak 47 del casillero.");
		}
		case 8:
		{
			if (InfoJugador[playerid][jFamRango] < 15) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres rango 15 o superior.");
			DarArma(playerid, 27), AccionesRol(playerid, 0, "coge una Escopeta de combate del casillero.");
		}
		case 9: obj = 139;

	}
	if(obj > 0)
	{
		if (InfoJugador[playerid][jManoDerecha] > 0 && InfoJugador[playerid][jManoIzquierda] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes tener una mano vacia.");
		if (InfoJugador[playerid][jManoDerecha] == 0)
		{
			InfoJugador[playerid][jManoDerecha] = obj;
			InfoJugador[playerid][jManoDerechaCant] = InfoInventario[obj][Capacidad];
			format(string, sizeof string, "coge %s de la armeria.", InfoInventario[obj][NombreObjeto]);
			cmd_me(playerid, string);
			PonerObjeto(playerid, 1, obj);
			ActualizarManos(playerid);
			return 1;
		}
		else if (InfoJugador[playerid][jManoIzquierda] == 0)
		{
			InfoJugador[playerid][jManoIzquierda] = obj;
			InfoJugador[playerid][jManoIzquierdaCant] = InfoInventario[obj][Capacidad];
			format(string, sizeof string, "coge %s de la armeria.", InfoInventario[obj][NombreObjeto]);
			cmd_me(playerid, string);
			PonerObjeto(playerid, 2, obj);
			ActualizarManos(playerid);
			return 1;
		}
	}
	return 1;
}

Dialog:Show_Accesorios_Equipo(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_equipo(playerid);
	if (CountPlayerToy(playerid) == 5) return SendClientMessage(playerid, 0xccccccff, "* No puedes comprar mas de cinco accesorios, elimina alguno para comprar otro.");
	if (GetPlayerCash(playerid) < AccesoriosPD[listitem][PrecioAccesorio]) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar eso."); return 1; }
	DineroEstado += AccesoriosPD[listitem][PrecioAccesorio];
	GivePlayerCash(playerid, -AccesoriosPD[listitem][PrecioAccesorio], "accesorio PD");
	new toy = -1;
	Loop(x, 5, 0) if (InfoJugador[playerid][aModelo][x] == 0)
	{
		toy = x;
		break;
	}
	if (toy == -1) return SendClientMessage(playerid, 0xccccccff, "* No tienes donde guardar este accesorio.");
	InfoJugador[playerid][aModelo][toy] = AccesoriosPD[listitem][ModeloAccesorio];
	new modelid = InfoJugador[playerid][aModelo][toy];
	if ((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
	{
		InfoJugador[playerid][aHueso][toy] = 2;
		InfoJugador[playerid][aPosicionX][toy] = 0.9;
		InfoJugador[playerid][aPosicionY][toy] = 0.0;
		InfoJugador[playerid][aPosicionZ][toy] = 0.35;
		InfoJugador[playerid][aRotacionX][toy] = 90.0;
		InfoJugador[playerid][aRotacionY][toy] = 90.0;
		InfoJugador[playerid][aRotacionZ][toy] = 0.0;
		InfoJugador[playerid][aEscalaX][toy] = 1;
		InfoJugador[playerid][aEscalaY][toy] = 1;
		InfoJugador[playerid][aEscalaZ][toy] = 1;
	}
	else if (modelid >= 18891 && modelid <= 18910)
	{
		InfoJugador[playerid][aHueso][toy] = 2;
		InfoJugador[playerid][aPosicionX][toy] = 0.15;
		InfoJugador[playerid][aPosicionY][toy] = 0.0;
		InfoJugador[playerid][aPosicionZ][toy] = 0.0;
		InfoJugador[playerid][aRotacionX][toy] = 90.0;
		InfoJugador[playerid][aRotacionY][toy] = 180.0;
		InfoJugador[playerid][aRotacionZ][toy] = 90.0;
		InfoJugador[playerid][aEscalaX][toy] = 1;
		InfoJugador[playerid][aEscalaY][toy] = 1;
		InfoJugador[playerid][aEscalaZ][toy] = 1;
	}
	else if (modelid >= 18926 && modelid <= 18935)
	{
		InfoJugador[playerid][aHueso][toy] = 2;
		InfoJugador[playerid][aPosicionX][toy] = 0.1;
		InfoJugador[playerid][aPosicionY][toy] = 0.0;
		InfoJugador[playerid][aPosicionZ][toy] = 0.0;
		InfoJugador[playerid][aRotacionX][toy] = 0.0;
		InfoJugador[playerid][aRotacionY][toy] = 0.0;
		InfoJugador[playerid][aRotacionZ][toy] = 0.0;
		InfoJugador[playerid][aEscalaX][toy] = 1;
		InfoJugador[playerid][aEscalaY][toy] = 1;
		InfoJugador[playerid][aEscalaZ][toy] = 1;
	}
	else if (modelid >= 18911 && modelid <= 18920)
	{
		InfoJugador[playerid][aHueso][toy] = 2;
		InfoJugador[playerid][aPosicionX][toy] = 0.1;
		InfoJugador[playerid][aPosicionY][toy] = 0.035;
		InfoJugador[playerid][aPosicionZ][toy] = 0.0;
		InfoJugador[playerid][aRotacionX][toy] = 90.0;
		InfoJugador[playerid][aRotacionY][toy] = 180.0;
		InfoJugador[playerid][aRotacionZ][toy] = 90.0;
		InfoJugador[playerid][aEscalaX][toy] = 1;
		InfoJugador[playerid][aEscalaY][toy] = 1;
		InfoJugador[playerid][aEscalaZ][toy] = 1;
	}
	else if (modelid == 19078 || modelid == 19078)
	{
		InfoJugador[playerid][aHueso][toy] = 16;
		InfoJugador[playerid][aPosicionX][toy] = 0;
		InfoJugador[playerid][aPosicionY][toy] = 0;
		InfoJugador[playerid][aPosicionZ][toy] = 0;
		InfoJugador[playerid][aRotacionX][toy] = 180.0;
		InfoJugador[playerid][aRotacionY][toy] = 180.0;
		InfoJugador[playerid][aRotacionZ][toy] = 0.0;
		InfoJugador[playerid][aEscalaX][toy] = 1;
		InfoJugador[playerid][aEscalaY][toy] = 1;
		InfoJugador[playerid][aEscalaZ][toy] = 1;
	}
	else if ((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
	{
		InfoJugador[playerid][aHueso][toy] = 6;
		InfoJugador[playerid][aPosicionX][toy] = 0.0;
		InfoJugador[playerid][aPosicionY][toy] = 0.0;
		InfoJugador[playerid][aPosicionZ][toy] = 0.0;
		InfoJugador[playerid][aRotacionX][toy] = 0.0;
		InfoJugador[playerid][aRotacionY][toy] = 0.0;
		InfoJugador[playerid][aRotacionZ][toy] = 0.0;
		InfoJugador[playerid][aEscalaX][toy] = 1;
		InfoJugador[playerid][aEscalaY][toy] = 1;
		InfoJugador[playerid][aEscalaZ][toy] = 1;
	}
	else
	{
		InfoJugador[playerid][aHueso][toy] = 2;
		InfoJugador[playerid][aPosicionX][toy] = 0.0;
		InfoJugador[playerid][aPosicionY][toy] = 0.0;
		InfoJugador[playerid][aPosicionZ][toy] = 0.0;
		InfoJugador[playerid][aRotacionX][toy] = 0.0;
		InfoJugador[playerid][aRotacionY][toy] = 0.0;
		InfoJugador[playerid][aRotacionZ][toy] = 0.0;
		InfoJugador[playerid][aEscalaX][toy] = 1;
		InfoJugador[playerid][aEscalaY][toy] = 1;
		InfoJugador[playerid][aEscalaZ][toy] = 1;
	}
	SendClientMessageEx(playerid, 0xCCCC00FF, "Compraste %s por $%s (Slot %d)", AccesoriosPD[listitem][NombreAccesorio], diner_coma(AccesoriosPD[listitem][PrecioAccesorio]), toy);
	new gformat[190];
	format(gformat, sizeof gformat, "Retiro un %s del /equipo PD", AccesoriosPD[listitem][NombreAccesorio]);
	AddRegistroToys(playerid, gformat);
	ActualizarToy(playerid, toy);
	return 1;
}

CMD:sirena(playerid, params[])
{
	if (!Es_Banda(playerid, 1, 2, 3, 4)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~g~USMC, ~w~o miembro del gobierno.", 2000);
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debe ser el conductor de un vehiculo.");
	new vehicleid = GetPlayerVehicleID(playerid), id;
	if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/sirena (0:off - 1:roja y azul - 2: amarilla - 3: rojo y azul[normal] - 4: amarillo[normal])");
	if (id < 0 || id > 4) return _Mensaje(playerid, 3, "0", "/sirena (0:off - 1:roja y azul - 2: amarilla - 3: rojo y azul[normal] - 4: amarillo[normal])");
	if (!id)
	{
		if (!SirenOn[vehicleid]) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo no posee una sirena instalada.");
		Loop(e, 7, 0) if (SirenObject[vehicleid][e] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(SirenObject[vehicleid][e]);
			SirenObject[vehicleid][e] = INVALID_STREAMER_ID;
		}
		AccionesRol(playerid, 0, "retira la sirena de su vehiculo.");
		SirenOn[vehicleid] = false;
		return 1;
	}
	if (SirenOn[vehicleid]) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo ya posee una sirena instalada.");
	new acceso = 0;
	switch (id)
	{
		case 1:
		{
			if (GetVehicleModel(vehicleid) == 596)
			{
				SirenObject[vehicleid][0] = CreateDynamicObject(19290, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, -0.360, -0.330, 0.970, 0.000, 0.000, 0.000);
				SirenObject[vehicleid][1] = CreateDynamicObject(19292, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][1], vehicleid, 0.380, -0.310, 0.960, 0.000, 0.000, 0.000);
				SirenObject[vehicleid][2] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][2], vehicleid, 0.700, 2.521, -0.150, 0.000, 0.000, 0.000);
				SirenObject[vehicleid][3] = CreateDynamicObject(19288, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][3], vehicleid, -0.650, 2.580, -0.120, 0.000, 0.000, 0.000);
				SirenObject[vehicleid][4] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][4], vehicleid, 0.810, -2.880, 0.020, 0.000, 0.000, 0.000);
				SirenObject[vehicleid][5] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][5], vehicleid, -0.840, -2.890, 0.070, 0.000, 0.000, 0.000);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 599)
			{
			    SirenObject[vehicleid][0] = CreateDynamicObject(19292, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, 0.420, -0.050, 1.160, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][1] = CreateDynamicObject(19290, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][1], vehicleid, -0.400, -0.070, 1.180, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][2] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][2], vehicleid, 0.960, 2.641, 0.000, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][3] = CreateDynamicObject(19288, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][3], vehicleid, -0.970, 2.661, 0.000, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][4] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][4], vehicleid, -1.070, -2.731, 0.200, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][5] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][5], vehicleid, 1.120, -2.719, 0.200, 0.000, 0.000, 0.000);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 597)
			{
				SirenObject[vehicleid][0] = CreateDynamicObject(19290, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, -0.346, -0.209, 0.930, 0.000, 0.000, -43.200);
			    SirenObject[vehicleid][1] = CreateDynamicObject(19292, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][1], vehicleid, 0.340, -0.240, 0.910, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][2] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][2], vehicleid, -0.719, -2.770, 0.150, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][3] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][3], vehicleid, 0.790, -2.821, 0.140, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][4] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][4], vehicleid, 0.650, 2.700, 0.000, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][5] = CreateDynamicObject(19288, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][5], vehicleid, -0.659, 2.610, -0.049, 0.000, 0.000, 0.000);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 598)
			{
				SirenObject[vehicleid][0] = CreateDynamicObject(19288, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, 0.650, 2.611, 0.000, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][1] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][1], vehicleid, -0.630, 2.670, 0.000, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][2] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][2], vehicleid, -0.720, -2.801, 0.150, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][3] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][3], vehicleid, 0.760, -2.859, 0.110, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][4] = CreateDynamicObject(19290, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][4], vehicleid, -0.400, -0.320, 0.980, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][5] = CreateDynamicObject(19292, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][5], vehicleid, 0.360, -0.350, 0.950, 0.000, 0.000, 0.000);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 560)
			{
			    SirenObject[vehicleid][0] = CreateDynamicObject(19797, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, 0.011, 0.579, 0.600, 0.000, 0.000, -179.699);
			    SirenObject[vehicleid][1] = CreateDynamicObject(19797, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][1], vehicleid, 0.000, -0.950, 0.600, 0.000, 0.000, 0.000);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 426)
			{
			    SirenObject[vehicleid][0] = CreateDynamicObject(19797, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, 0.000, 0.460, 0.600, 0.000, 0.000, -179.499);
			    SirenObject[vehicleid][1] = CreateDynamicObject(19797, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][1], vehicleid, 0.000, -1.729, 0.400, 0.000, 0.000, 0.000);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 468)
			{
			    SirenObject[vehicleid][0] = CreateDynamicObject(19290, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, -0.080, -0.920, 0.320, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][1] = CreateDynamicObject(19797, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][1], vehicleid, -0.005, 0.549, 0.473, 0.000, -0.800, 179.700);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 521)
			{
			    SirenObject[vehicleid][0] = CreateDynamicObject(19290, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, -0.050, -1.140, 0.470, 0.000, 0.000, 0.000);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 528)
			{
			    SirenObject[vehicleid][0] = CreateDynamicObject(19290, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, -0.360, 0.000, 1.329, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][1] = CreateDynamicObject(19292, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][1], vehicleid, 0.350, 0.000, 1.350, 0.000, 0.000, 0.000);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 525)
			{
			    SirenObject[vehicleid][0] = CreateDynamicObject(19803, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, 0.000, 0.130, 0.000, 0.000, 0.000, 0.000);
				acceso = 1;
			}
		}
		case 2:
		{
			if (GetVehicleModel(vehicleid) == 596)
			{
			    SirenObject[vehicleid][0] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, 0.000, -0.300, 0.930, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][1] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][1], vehicleid, -0.460, -0.320, 0.920, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][2] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][2], vehicleid, 0.440, -0.360, 0.930, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][3] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][3], vehicleid, 0.700, 2.521, -0.150, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][4] = CreateDynamicObject(19288, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][4], vehicleid, -0.650, 2.580, -0.120, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][5] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][5], vehicleid, 0.810, -2.880, 0.020, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][6] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][6], vehicleid, -0.840, -2.890, 0.070, 0.000, 0.000, 0.000);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 599)
			{
			    SirenObject[vehicleid][0] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, 0.000, -0.070, 1.070, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][1] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][1], vehicleid, -0.560, -0.060, 1.070, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][2] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][2], vehicleid, 0.960, 2.641, 0.000, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][3] = CreateDynamicObject(19288, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][3], vehicleid, -0.970, 2.661, 0.000, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][4] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][4], vehicleid, -1.070, -2.731, 0.200, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][5] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][5], vehicleid, 1.120, -2.719, 0.200, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][6] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][6], vehicleid, 0.550, -0.060, 1.060, 0.000, 0.000, 0.000);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 597)
			{
			    SirenObject[vehicleid][0] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, 0.000, -0.230, 0.940, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][1] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][1], vehicleid, -0.480, -0.199, 0.940, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][2] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][2], vehicleid, -0.719, -2.770, 0.150, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][3] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][3], vehicleid, 0.790, -2.821, 0.140, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][4] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][4], vehicleid, 0.650, 2.700, 0.000, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][5] = CreateDynamicObject(19288, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][5], vehicleid, -0.659, 2.610, -0.049, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][6] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][6], vehicleid, 0.440, -0.230, 0.950, 0.000, 0.000, 0.000);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 598)
			{
			    SirenObject[vehicleid][0] = CreateDynamicObject(19288, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, 0.650, 2.611, 0.000, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][1] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][1], vehicleid, -0.630, 2.670, 0.000, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][2] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][2], vehicleid, -0.720, -2.801, 0.150, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][3] = CreateDynamicObject(19286, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][3], vehicleid, 0.760, -2.859, 0.110, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][4] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][4], vehicleid, 0.430, -0.380, 0.910, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][5] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][5], vehicleid, 0.000, -0.400, 0.890, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][6] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][6], vehicleid, -0.470, -0.390, 0.910, 0.000, 0.000, 0.000);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 560)
			{
			    SirenObject[vehicleid][0] = CreateDynamicObject(19419, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, 0.000, 0.000, 0.840, 0.000, 0.000, 0.000);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 426)
			{
			    SirenObject[vehicleid][0] = CreateDynamicObject(19419, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, 0.000, -0.240, 0.890, 0.000, 0.000, 0.000);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 528)
			{
			    SirenObject[vehicleid][0] = CreateDynamicObject(19803, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, 0.000, 0.410, -0.130, 0.000, 0.000, 0.000);
				acceso = 1;
			}
			else if (GetVehicleModel(vehicleid) == 525)
			{
			    SirenObject[vehicleid][0] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, 0.610, -0.380, 1.530, 0.000, 0.000, 0.000);
			    SirenObject[vehicleid][1] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			    AttachDynamicObjectToVehicle(SirenObject[vehicleid][1], vehicleid, -0.610, -0.379, 1.530, 0.000, 0.000, 0.000);
				acceso = 1;
			}
		}
		case 3:
		{
			new Float:fSize[3], Float:fSeat[3];
			GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]);
		    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, fSeat[0], fSeat[1], fSeat[2]);
			SirenObject[vehicleid][0] = CreateDynamicObject(18646, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, -fSeat[0], fSeat[1], fSize[2] / 2.0, 0.0, 0.0, 0.0);
			acceso = 1;
		}
		case 4:
		{
			new Float:fSize[3], Float:fSeat[3];
			GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]);
		    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, fSeat[0], fSeat[1], fSeat[2]);
			SirenObject[vehicleid][0] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
			AttachDynamicObjectToVehicle(SirenObject[vehicleid][0], vehicleid, -fSeat[0], fSeat[1], fSize[2] / 2.0, 0.0, 0.0, 0.0);
			acceso = 1;
		}
	}
	if (acceso == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En este vehiculo no se puede instalar sirena de este tipo.");
	SirenOn[vehicleid] = true;
	AccionesRol(playerid, 0, "coloca una sirena en su vehiculo.");
	return 1;
}
CMD:sir(playerid, params[]) return cmd_sirena(playerid, params);

CMD:guantera(playerid)
{
    if (!IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en ningun vehiculo.");
    new vehiculo = GetPlayerVehicleID(playerid);
    if (LSPD_Veh(vehiculo) || LSPD_Veh(vehiculo) || CNN_Veh(vehiculo) || GOB_Vehicle(vehiculo) || LAFD_Veh(vehiculo)) { return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes abrir guanteras de facciones."); }
    if (EnMotos_Bicis(vehiculo)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este tipo de vehiculo no contiene guantera (bikes).");
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vDL] == vehiculo)
	{
		if (InfoVehiculo[v][vEmbargo] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo se encuentra embargado, paga la multa en SAPD o en el ayuntamiento.");
		if (acceso_vehiculo(playerid, vehiculo) != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes las llaves de este vehiculo.");
		if (InfoVehiculo[v][vLockGuantera] != 0)
		{
			InfoVehiculo[v][vLockGuantera] = 0;
			_Mensaje(playerid, 5, "0", "La guantera del vehiculo ha sido cerrada.");
		}
		else
		{
			InfoVehiculo[v][vLockGuantera] = 1;
			_Mensaje(playerid, 5, "0", "La guantera del vehiculo ha sido abierta.");
		}
		break;
	}
    return 1;
}

CMD:verguantera(playerid)
{
    if (!IsPlayerInAnyVehicle(playerid)) { return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en ningun vehiculo."); }
    new vehiculo = GetPlayerVehicleID(playerid);
    if (LSPD_Veh(vehiculo) || LSPD_Veh(vehiculo) || CNN_Veh(vehiculo) || GOB_Vehicle(vehiculo) || LAFD_Veh(vehiculo)) { return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes abrir guanteras de facciones."); }
    if (EnMotos_Bicis(vehiculo)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este tipo de vehiculo no contiene guantera (bikes).");
	Loop(v, totalvehiculos, 1) if (InfoVehiculo[v][vDL] == vehiculo)
	{
		if (InfoVehiculo[v][vEmbargo] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo se encuentra embargado, paga la multa en SAPD o en el ayuntamiento.");
		if (acceso_vehiculo(playerid, vehiculo) != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes las llaves de este vehiculo.");
		if (InfoVehiculo[v][vLockGuantera] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo posee la guantera cerrada.");
		ver_Guantera(playerid, v);
		VehGuanteraPlayer[playerid] = v;
	}
    return 1;
}

CMD:sacarsangre(playerid, params[])
{
	if (!Es_job(playerid, 15)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres Medico.");
	new playerid2, string[190];
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/sacarsangre [id jugador]");
	if (EnServicio[playerid] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en servicio.");
	if (!IsPlayerConnected(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (!CercaDelWeon(5.0, playerid, playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no se encuentra cerca de ti.");
	new Float: HP = InfoJugador[playerid2][jVida];
	if (HP < 100) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El paciente debe estar con el maximo de vida.");
	Dar_Vida(playerid2, HP - 30);
	SetPlayerDrunkLevel(playerid2, 3000);
	SangreLAFD += 100;
	format(string, sizeof string, "realiza una extraccion de sangre a %s.", NombreJugador(playerid2));
	AccionesRol(playerid, 0, string);
	format(string, sizeof string, "Hay %d ml de sangre disponible.", SangreLAFD);
	_Mensaje(playerid, 2, "0", string);
	ActualizarEst();
	return 1;
}

CMD:menuhospital(playerid)
{
	if (!_enPos(playerid, 3.0, 1148.2609, -1322.6975,-10.7922 )) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en el hospital.");
	new dialg_products[1028];
	strcat(dialg_products, "{EBEBEB}Servicio medico ({00CC00}$2,000{EBEBEB})\n");
	strcat(dialg_products, "{EBEBEB}Seguro medico ({00CC00}$3,800{EBEBEB})");
	Dialog_Show(playerid, Show_Hospital, DIALOG_STYLE_LIST, "Hospital", dialg_products, "Continuar", "Salir");
	return 1;
}

Dialog:Show_Hospital(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (listitem == 0) // servicio medico
	{
		new Float: health = InfoJugador[playerid][jVida], cost = 2000;
		if (health >= 100) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya tienes la energia a full."), SetPlayerHealth(playerid, 100);
		if (InfoJugador[playerid][jTiempos][1] > 0) { SendClientMessageEx(playerid, 0xCCCCCCFF, "Debes esperar %d minutos, para usar curarte nuevamente.", InfoJugador[playerid][jTiempos][1]); return 1; }
		if (GetPlayerCash(playerid) < cost) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero."); return 1; }
		GivePlayerCash(playerid, -cost, "curarme");
		DineroEstado += cost;
		Dar_Vida(playerid, 100);
		InfoJugador[playerid][jTiempos][1] += 10;
		guardar_int_mysql("cuentas", "Tiempos2", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][1]);
		SendClientMessageEx(playerid, 0x008BFFFF, "Fuiste atendido por un medico del hospital, cobro $%s. (+100HP)", diner_coma(cost));
	}
	else if (listitem == 1) // seguro medico
	{
		new cost = 3800;
		if (GetPlayerCash(playerid) < cost) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero."); return 1; }
		if (InfoJugador[playerid][jSeguroMedico] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya tienes un seguro medico.");
		GivePlayerCash(playerid, -cost, "seguro medico");
		DineroEstado += cost;
		InfoJugador[playerid][jSeguroMedico] = 1;
		guardar_int_mysql("cuentas", "SeguroMedico", InfoJugador[playerid][jID], InfoJugador[playerid][jSeguroMedico]);
		SendClientMessageEx(playerid, 0x008BFFFF, "Ahora tienes seguro medico para reaparecer en el hospital que desees, cobro $%s.", diner_coma(cost));
	}
	return 1;
}

CMD:curar(playerid, params[])
{
	if (!Es_job(playerid, 15)) return 1;
	new playerid2, MsgCheckMe[MAX_TEXT_CHAT];
	if (!CheckTimer(120, InfoJugador[playerid][jTiempoCurar]))
	{
		if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/curar [id jugador]");
		if (!IsPlayerConnectedEx(playerid2)) return 1;
		if (Es_job(playerid, 15) == Es_job(playerid2, 15)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes curar a los mismos de tu faccion.");
		if (playerid == playerid2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando contigo mismo.");
		if (!CercaDelWeon(5.0, playerid, playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no se encuentra cerca de ti.");
		new Float: health = InfoJugador[playerid2][jVida];
		if (health >= 85) Dar_Vida(playerid2, 100);
		else Dar_Vida(playerid2, health + 60.0);
		SangreLAFD -= 60;
		format(MsgCheckMe, sizeof MsgCheckMe, "da a %s 60ml de sangre.", NombreJugador(playerid2)); AccionesRol(playerid, 0, MsgCheckMe);
		InfoJugador[playerid][jTiempoCurar] = gettime();
	}
	else
	{
		SendClientMessageEx(playerid, 0xCCCCCCFF, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(120, InfoJugador[playerid][jTiempoCurar]));
	}
	return 1;
}

CMD:banco(playerid)
{
	if (!EstaEnBanco(playerid)) return 1;
	if (ID_Cajero(playerid) != -1)
	{
		new id = ID_Cajero(playerid);
		if (InfoCajero[id][atmDestroy] != 0) return SendClientMessageEx(playerid, 0xccccccff, "Este cajero esta fuera de servicio, sera reconstruido en %s.", Segundos_tiempo(InfoCajero[id][atmTiempo]));
	}
	new gformat[128];
	format(gformat, sizeof gformat, "Tienes: {00CC00}$%s", diner_coma(InfoJugador[playerid][jBanco]));
	Dialog_Show(playerid, Show_Banco, DIALOG_STYLE_LIST, gformat, "Retirar dinero\nDepositar dinero\nTransferir dinero", "Continuar", "Salir");
	return 1;
}
CMD:atm(playerid) return cmd_banco(playerid);
CMD:cajero(playerid) return cmd_banco(playerid);

Dialog:Show_Banco(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new gformat[128];
	format(gformat, sizeof gformat, "Tienes: {00CC00}$%s", diner_coma(InfoJugador[playerid][jBanco]));
	switch (listitem)
	{
		case 0: Dialog_Show(playerid, Show_Retirar_Banco, DIALOG_STYLE_INPUT, gformat, "Introduce el monto a retirar del banco:", "Retirar", "Volver");
		case 1: Dialog_Show(playerid, Show_Depositar_Banco, DIALOG_STYLE_INPUT, gformat, "Introduce el monto a depositar en el banco:", "Depositar", "Volver");
		case 2:
		{
			if (InfoJugador[playerid][jHorasConectado] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes transferir debido a tu restriccion de dos horas de juego.");
			Dialog_Show(playerid, Show_Transferir_Bank, DIALOG_STYLE_INPUT, "Transferir dinero", "Introduce primero el 'Nombre_Apellido' del jugador que deseas dar dinero:", "Continuar", "Salir");
		}
	}
	return 1;
}

Dialog:Show_Retirar_Banco(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_banco(playerid);
	if (!isnumeric(inputtext)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~La cantidad tiene que ser numeros.");
	new money = strval(inputtext), string[190], Ip[18];
	if (money > InfoJugador[playerid][jBanco] || money < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Cantidad de dinero incorrecta.");
	if (money < 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes retirar menos de 0.");
	GivePlayerCash(playerid, money, "retiro banco");
	InfoJugador[playerid][jBanco] -= money;
	guardar_int_mysql("cuentas", "Banco", InfoJugador[playerid][jID], InfoJugador[playerid][jBanco]);
	SendClientMessageEx(playerid, 0xFFD100FF, "* Retiraste de tu cuenta $%s, total de dinero $%s.", diner_coma(money), diner_coma(InfoJugador[playerid][jBanco]));
	format(string, sizeof string, "[-] %s retiro $%s.", NombreRJugador(playerid), diner_coma(money));
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], string, 1);
	return 1;
}

Dialog:Show_Depositar_Banco(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_banco(playerid);
	if (!isnumeric(inputtext)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~La cantidad tiene que ser numeros.");
	new money = strval(inputtext), string[190], Ip[18];
	if (money > GetPlayerCash(playerid) || money < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Cantidad de dinero incorrecta.");
	if (money < 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes depositar menos de 0.");
	GivePlayerCash(playerid, -money, "deposito banco");
	InfoJugador[playerid][jBanco] += money;
	guardar_int_mysql("cuentas", "Banco", InfoJugador[playerid][jID], InfoJugador[playerid][jBanco]);
	SendClientMessageEx(playerid, 0xFFD100FF, "* Depositaste a tu cuenta $%s, total de dinero $%s.", diner_coma(money), diner_coma(InfoJugador[playerid][jBanco]));
	format(string, sizeof string, "[+] %s deposito $%s.", NombreRJugador(playerid), diner_coma(money));
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], string, 1);
	return 1;
}

Dialog:Show_Transferir_Bank(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (isnull(inputtext)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes introducir por lo menos un caracter.");
	if (VerificarCuenta(inputtext))
	{
		new id_sql, nombre_apellido[MAX_PLAYER_NAME], gformat[320];
		reg_int(0, "ID", id_sql);
		reg_string(0, "Nombre_Apellido", nombre_apellido, MAX_PLAYER_NAME);
		cache_unset_active();
		if (InfoJugador[playerid][jID] == id_sql) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes transferirte dinero a ti mismo.");
		SetPVarInt(playerid, "rdinero", id_sql);
		format(gformat, sizeof gformat, "Ahora introduce la cantidad a transferir a %s (ID SQL %d)\n\nTienes $%s en tu cuenta bancaria.\n", nombre_apellido, id_sql, diner_coma(InfoJugador[playerid][jBanco]));
		Dialog_Show(playerid, Show_2Transferir_Bank, DIALOG_STYLE_INPUT, "Transferir dinero", gformat, "Continuar", "Volver");
		return 1;
	}
	SendClientMessageEx(playerid, 0xccccccFF, "No existe ningun jugador con el nombre %s.", inputtext);
	return 1;
}

Dialog:Show_2Transferir_Bank(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Show_Transferir_Bank, DIALOG_STYLE_INPUT, "Transferir dinero", "Introduce primero el 'Nombre_Apellido' del jugador que deseas dar dinero:", "Continuar", "Salir");
	if (!isnumeric(inputtext)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo numeros porfavor, vuelve a intentarlo.");
	new id_sql = GetPVarInt(playerid, "rdinero"), money = strval(inputtext);
	if (money > InfoJugador[playerid][jBanco]) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Cantidad incorrecta.");
	if (money < 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes transferir menos de 0.");
	DeletePVar(playerid, "rdinero");
	if (VerificarID(id_sql))
	{
		// detectar
		new nombre_apellido[MAX_PLAYER_NAME], ip[18], banco, multicuenta, gformat[320];
		reg_string(0, "Nombre_Apellido", nombre_apellido, MAX_PLAYER_NAME);
		reg_string(0, "IP", ip, 18);
		reg_int(0, "Banco", banco);
		reg_int(0, "Multicuenta", multicuenta);
		cache_unset_active();
		// restar
		InfoJugador[playerid][jBanco] -= money;
		guardar_int_mysql("cuentas", "Banco", InfoJugador[playerid][jID], InfoJugador[playerid][jBanco]);
		SendClientMessageEx(playerid, 0xFFD100FF, "* Enviaste la cantidad de $%s a %s (ID SQL: %d).", diner_coma(money), nombre_apellido, id_sql);
		// ceder
		new playerid2 = -1;
		foreach(Player, x) if (IsPlayerConnectedEx(x) && InfoJugador[x][jID] == id_sql)
		{
			playerid2 = x;
			break;
		}
		//conectado
		if (playerid2 != -1)
		{
			InfoJugador[playerid2][jBanco] += money;
			guardar_int_mysql("cuentas", "Banco", InfoJugador[playerid2][jID], InfoJugador[playerid2][jBanco]);
			SendClientMessageEx(playerid2, 0xFFD100FF, "* Recibiste la cantidad de $%s de %s (ID SQL: %d).", diner_coma(money), NombreRJugador(playerid), InfoJugador[playerid][jID]);
		}
		//desconectado
		else
		{
			banco += money;
			new query[210];
			mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Banco = '%d' WHERE ID = '%d'", banco, id_sql);
			mysql_tquery(DBngrp, query);
		}
		//alertas y regostros
		if (!strcmp(InfoJugador[playerid][jIP], ip, false) && InfoJugador[playerid][jMulticuenta] == 0 && multicuenta == 0)
		{
			format(gformat, sizeof gformat, "Administracion: %s (ID SQL: %d) transfirio $%s a %s (ID SQL: %d), posibles multicuentas [IP: %s]", NombreRJugador(playerid), InfoJugador[playerid][jID], diner_coma(money), nombre_apellido, id_sql, ip);
			MensajeAdmin(gformat);
			format(gformat, sizeof gformat, "[-] %s (ID SQL: %d) transfirio $%s a %s (ID SQL: %d) [multicuenta]", NombreRJugador(playerid), InfoJugador[playerid][jID], diner_coma(money), nombre_apellido, id_sql);
			AddRegistroMoney(ip, InfoJugador[playerid][jNombre_Apellido], gformat, 1);
		}
		else
		{
			format(gformat, sizeof gformat, "Administracion: %s (ID SQL: %d) transfirio $%s a %s (ID SQL: %d)", NombreRJugador(playerid), InfoJugador[playerid][jID], diner_coma(money), nombre_apellido, id_sql);
			MensajeAdmin(gformat);
			format(gformat, sizeof gformat, "[-] $s (ID SQL: %d) transfirio $%s a %s (ID SQL: %d)", NombreRJugador(playerid), InfoJugador[playerid][jID], diner_coma(money), nombre_apellido, id_sql);
			AddRegistroMoney(ip, InfoJugador[playerid][jNombre_Apellido], gformat, 1);
		}
		return 1;
	}
	SendClientMessageEx(playerid, 0xccccccFF, "No existe ningun jugador con el ID SQL %d.", id_sql);
	return 1;
}

CMD:fixvehall(playerid)
{
	new string[256];
	if (InfoJugador[playerid][jAdmin] < 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Fixvehall.");
	OnDuty
	Loop(v, MAX_VEHICLES, 0) if (GetVehicleModel(v))
	{
		RepairVehicle(v);
		SetVehicleHealth(v, 1000.0);
	}
	format(string, sizeof string, "Administracion: %s utilizo /fixvehall, reparo todos los vehiculos del servidor.", NombreRJugador(playerid));
	MensajeAdmin(string);
	_Mensaje(playerid, 2, "0", "Todos los vehiculos reparados.");
	return 1;
}

CMD:traercar(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Traercar.");
	OnDuty
	new Float: plocx,Float: plocy,Float: plocz, vehicleid, string[256];
	if (sscanf(params, "i", vehicleid)) return _Mensaje(playerid, 3, "0", "/traercar [vehiculoid]");
	if (!GetVehicleModel(vehicleid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo introducido no existe.");
	GetPlayerPos(playerid, plocx, plocy, plocz);
	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	SetVehicleInterior(vehicleid, GetPlayerInterior(playerid));
	format(string, sizeof string, "Administracion: %s utilizo /traercar, Vehiculo ID: %d.", NombreRJugador(playerid), vehicleid);
	MensajeAdmin(string);
	MoverVehiclePos(vehicleid, plocx, plocy + 4, plocz);
	return 1;
}

CMD:ircar(playerid, params[])
{
	new string[256];
    if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Ircar.");
    OnDuty
    new Float: cwx2,Float: cwy2,Float: cwz2,vehicleid;
    if (sscanf(params, "i", vehicleid)) return _Mensaje(playerid, 3, "0", "/ircar [vehiculoid]");
	if (!GetVehicleModel(vehicleid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo introducido no existe.");
	GetVehiclePos(vehicleid, cwx2, cwy2, cwz2);
	format(string, sizeof string, "Administracion: %s utilizo /ircar, Vehiculo ID: %d.", NombreRJugador(playerid), vehicleid);
	MensajeAdmin(string);
	SetPosEx(playerid, cwx2, cwy2, cwz2, 0.0, GetVehicleInterior(vehicleid), GetVehicleVirtualWorld(vehicleid), 1);
    return 1;
}

CMD:fixveh(playerid, params[])
{
	new string[256];
    if (InfoJugador[playerid][jAdmin] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Fixveh.");
    OnDuty
    if (!IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en ningun vehiculo.");
    SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
    RepairVehicle(GetPlayerVehicleID(playerid));
    format(string, sizeof string, "Administracion: %s utilizo /fixveh, Vehiculo ID: %d.", NombreRJugador(playerid), GetPlayerVehicleID(playerid));
    MensajeAdmin(string);
    return _Mensaje(playerid, 2, "0", "Se reparo la carroceria junto al motor del vehiculo.");
}

CMD:fixvid(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Fixvid.");
	OnDuty
	new string[256], vehicleid;
	if (sscanf(params, "i", vehicleid)) return _Mensaje(playerid, 3, "0", "/fixvid [vehiculoid]");
	if (vehicleid > 1000 || vehicleid < 1) { return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Maximo de vehiculos 1000."); }
	SetVehicleHealth(vehicleid, 1000.0);
	_Mensaje(playerid, 2, "0", "Carroceria y Motor Arreglado.");
	RepairVehicle(vehicleid);
	format(string, sizeof string, "Administracion: %s utilizo /fixvid, Vehiculo ID: %d.", NombreRJugador(playerid), vehicleid);
	MensajeAdmin(string);
	return 1;
}

CMD:ir(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] >= 1 || InfoJugador[playerid][jRestriccion][0] == 1)
	{
		OnDuty
		new playerid2, string[128];
		if (sscanf(params, "u", playerid2)) return _Mensaje(playerid, 3, "0", "/ir [id jugador]");
		if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
		new Float: p_x,Float: p_y,Float: p_z, interior = GetPlayerInterior(playerid2), vw = GetPlayerVirtualWorld(playerid2);
		GetPlayerPos(playerid2, p_x, p_y, p_z);
		SetPosEx(playerid, p_x, p_y+2, p_z, 0, interior, vw, 1);
		if (InfoJugador[playerid][jAdmin] == 1)
		{
			format(string, sizeof string, "Administracion: %s utilizo /ir, a %s.", NombreRJugador(playerid), NombreRJugador(playerid2));
			MensajeAdmin(string);
		}
		if (interior != 0 || vw != 0)
		{
			if (InfoJugador[playerid2][jEntradaX] != 0)
			{
				Pos_Entrada(playerid, InfoJugador[playerid2][jEntradaX], InfoJugador[playerid2][jEntradaY], InfoJugador[playerid2][jEntradaZ], InfoJugador[playerid2][jEntradaR], InfoJugador[playerid2][jEntradaInt], InfoJugador[playerid2][jEntradaVW]);
			}
		}
		else
		{
			Pos_Salida(playerid);
		}
		SendClientMessageEx(playerid, -1, "Fuiste a la posicion de %s.", NombreJugador(playerid2));
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Ir.");
	return 1;
}

CMD:traer(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] >= 2 || InfoJugador[playerid][jRestriccion][1] == 1)
	{
		OnDuty
		new playerid2;
		if (sscanf(params, "u", playerid2)) return _Mensaje(playerid, 3, "0", "/traer [id jugador]");
		if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
		if (InfoJugador[playerid2][jAdmin] >= 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes autorizacion a usar este comando con este jugador.");
		new Float: p_x,Float: p_y,Float: p_z, interior = GetPlayerInterior(playerid), vw = GetPlayerVirtualWorld(playerid);
		GetPlayerPos(playerid, p_x, p_y, p_z);
		SetPosEx(playerid2, p_x, p_y+2, p_z, 0, interior, vw, 1);
		if (interior != 0 || vw != 0)
		{
			if (InfoJugador[playerid][jEntradaX] != 0)
			{
				Pos_Entrada(playerid2, InfoJugador[playerid][jEntradaX], InfoJugador[playerid][jEntradaY], InfoJugador[playerid][jEntradaZ], InfoJugador[playerid][jEntradaR], InfoJugador[playerid][jEntradaInt], InfoJugador[playerid][jEntradaVW]);
			}
		}
		else
		{
			Pos_Salida(playerid2);
		}
		SendClientMessageEx(playerid, -1, "Llevaste a tu posicion a %s.", NombreJugador(playerid2));
		SendClientMessageEx(playerid2, -1, "%s te llevo a su posicion.", NombreJugador(playerid));
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Traer.");
	return 1;
}

CMD:togmovil(playerid)
{
    if (!B_Telefono[playerid]) {
        B_Telefono[playerid] = 1;
        _Mensaje(playerid, 2, "0", "Telefono apagado.");
    } else {
        B_Telefono[playerid] = 0;
        _Mensaje(playerid, 2, "0", "Telefono encendido.");
    }
    return 1;
}

CMD:frecuencia(playerid, params[])
{
	new string[128], frequency;
	if (InfoJugador[playerid][jNivel] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes ser minimo nivel 2, para utilizar el radio portable.");
	if (InfoJugador[playerid][jManoDerecha] != 82 && InfoJugador[playerid][jManoIzquierda] != 82){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes una radio ninguna mano."); return 1;}
	if (sscanf(params, "d", frequency))
	{
		_Mensaje(playerid, 3, "0", "/frecuencia [frecuencia]");
		_Mensaje(playerid, 2, "0", "Ajuste la frecuencia de su radio - -1 Si no quieres oir nada.");
		return 1;
	}
	if (frequency > 30000 || frequency < -30000) { return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Frecuencia no debe ser menor a -30000 y mayor 30000."); }
	InfoJugador[playerid][jFrecuencia] = frequency;
	guardar_int_mysql("cuentas", "Frecuencia", InfoJugador[playerid][jID], InfoJugador[playerid][jFrecuencia]);
	format(string, sizeof string, "Ajustaste la frecuencia de tu radio a %d khz.", frequency);
	_Mensaje(playerid, 2, "0", string);
	return 1;
}

CMD:pr(playerid, params[])
{
	if (InfoJugador[playerid][jNivel] == 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes ser minimo nivel 2, para utilizar el radio portable.");
    if (InfoJugador[playerid][jManoDerecha] != 82 && InfoJugador[playerid][jManoIzquierda] != 82){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes una radio ninguna mano."); return 1;}
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas herido.");
    if (InfoJugador[playerid][jFrecuencia] == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ajusta la /frecuencia, la tienes en -1.");
    if (InfoJugador[playerid][jEncarcelado] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas en prision.");
    if (InfoJugador[playerid][jFrecuencia] >= 1 || InfoJugador[playerid][jFrecuencia] <= -1){
    	if(isnull(params)) return _Mensaje(playerid, 3, "0", "/pr [texto radio]");
     	EnviarTextoRadio(playerid, params);
      	AccionesRol(playerid, 1, "tomo su radio portable y dice algo.");
    } else _Mensaje(playerid, 2, "0", "Primero ajusta la frecuencia. [Escribe]{00C200} '/frecuencia'");
    return 1;
}


CMD:togradio(playerid)
{
    if(InfoJugador[playerid][jManoDerecha] != 82 && InfoJugador[playerid][jManoIzquierda] != 82){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes una radio ninguna mano."); return 1;}
	if (B_Radio[playerid] == 0) {
 		new string[128];
   		B_Radio[playerid] = 1;
     	format(string, sizeof string, "Has prendido tu radio portatil, y esta sincronizada a %d khz.", InfoJugador[playerid][jFrecuencia]);
      	_Mensaje(playerid, 2, "0", string);
   	} else {
		B_Radio[playerid] = 0;
  		_Mensaje(playerid, 2, "0", "Has apagado su radio portatil.");
    }
    return 1;
}

CMD:togfac(playerid, params[]) {
    if (!B_Faccion[playerid]) {
        B_Faccion[playerid] = 1;
        _Mensaje(playerid, 2, "0", "Se desactivaron los mensajes de Faccion.");
    } else {
        B_Faccion[playerid] = 0;
        _Mensaje(playerid, 2, "0", "Se activaron los mensajes de Faccion.");
    }
    return 1;
}

CMD:togsan(playerid)
{
	if (!B_SAN[playerid])
	{
		B_SAN[playerid] = 1;
		_Mensaje(playerid, 2, "0", "Mensajes de SA Network y anuncios desactivados.");
	    Loop(x, 2, 0) { PlayerTextDrawHide(playerid, TD_Anuncio[playerid][x]); }
	}
	else
	{
		B_SAN[playerid] = 0;
		_Mensaje(playerid, 2, "0", "Mensajes de SA Network y anuncios activados.");
	}
	return 1;
}
CMD:togad(playerid) return cmd_togsan(playerid);
CMD:togads(playerid) return cmd_togsan(playerid);
CMD:toganuncio(playerid) return cmd_togsan(playerid);
CMD:toganuncios(playerid) return cmd_togsan(playerid);

CMD:togooc(playerid, params[]) {
    if (!B_OOC[playerid]) {
        B_OOC[playerid] = 1;
        _Mensaje(playerid, 2, "0", "Mensajes OOC desactivados.");
    } else {
        B_OOC[playerid] = 0;
        _Mensaje(playerid, 2, "0", "Mensajes OOC activados.");
    }
    return 1;
}

CMD:dep(playerid, params[])
{
	if (!Es_Banda(playerid, 1, 2, 3, 4, 5)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de una banda legal.", 2000);
	new id = InfoJugador[playerid][jFamMiembro], string[512];
	if (id == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No formas parte de ninguna banda legal.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/dep [texto]");
    format(string, sizeof string, "[%s] %s %s: %s", InfoFamilia[id][fLogo], fam_rango[id][InfoJugador[playerid][jFamRango]-1], NombreRJugador(playerid), params);
	SendRadioFaction(1, 0xFF8282AA, string);
	SendRadioFaction(2, 0xFF8282AA, string);
	SendRadioFaction(3, 0xFF8282AA, string);
	SendRadioFaction(4, 0xFF8282AA, string);
	SendRadioFaction(5, 0xFF8282AA, string);
	return 1;
}

CMD:r(playerid, params[])
{
	if (!Es_Banda(playerid, 1, 2, 3, 4, 5)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de una banda legal.", 2000);
	new id = InfoJugador[playerid][jFamMiembro], string[512];
	if (id == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No formas parte de ninguna banda legal.");
	if (InfoFamilia[id][fChat] != 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* El chat de la familia esta bloqueado por un lider.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/r [texto]");
	format(string, sizeof string, "{6666FF}[%s] %s %s:{FFFFFF} %s", InfoFamilia[id][fLogo], fam_rango[id][InfoJugador[playerid][jFamRango]-1], NombreRJugador(playerid), params);
	SendFamilyMessage(id, 0xFFFFFFFF, string);
	return 1;
}

CMD:pagar(playerid, params[])
{
	if (InfoJugador[playerid][jHorasConectado] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar debido a tu restriccion de dos horas de juego.");
	if (!CheckTimer(5, PagarTiempo[playerid]))
	{
		new string[190], playerid2, dinero;
		if (sscanf(params, "ud", playerid2, dinero)) return _Mensaje(playerid, 3, "0", "/pagar [jugador] [cantidad]");
		if (dinero > GetPlayerCash(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No posees esa cantidad.");
		if (dinero < 1 || dinero > 10000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Maximo: $10,000.");
		if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
		if (EnServicioADM[playerid2] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes hacer esto con un staff en servicio.");
		if(playerid2 == playerid) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagarte a ti mismo.");
		if (!CercaDelWeon(5.0, playerid, playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no se encuentra cerca de ti.");
		GivePlayerCash(playerid, -dinero, "/pagar");
		GivePlayerCash(playerid2, dinero, "/pagar");
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		PlayerPlaySound(playerid2, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof string, "le da $%s a %s.", diner_coma(dinero), NombreJugador(playerid2));
		AccionesRol(playerid, 0, string);
		if (!strcmp(InfoJugador[playerid][jIP], InfoJugador[playerid2][jIP], false) && InfoJugador[playerid][jMulticuenta] == 0 && InfoJugador[playerid2][jMulticuenta] == 0)
		{
			new ipc[32], stringlog[180]; GetPlayerIp(playerid, ipc, 32);
			format(stringlog, sizeof(stringlog), "Administracion: %s le da $%d a %s, posibles multicuentas [IP: %s]", NombreRJugador(playerid), dinero, NombreRJugador(playerid2), ipc);
			MensajeAdmin(stringlog);
			format(stringlog, sizeof(stringlog), "Le pago $%s a %s. [multicuenta]", diner_coma(dinero), NombreRJugador(playerid2));
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], stringlog, 0);
		}
		else
		{
			format(string, sizeof string, "Le pago $%s a %s.", NombreRJugador(playerid), diner_coma(dinero), NombreRJugador(playerid2));
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], string, 0);
		}
		PagarTiempo[playerid] = gettime();
	}
	else
	{
		SendClientMessageEx(playerid, 0xCCCCCCFF, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(5, PagarTiempo[playerid]));
	}
	return 1;
}

CMD:quitar(playerid, params[])
{
	if (!Es_Banda(playerid, 1)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD.", 2000);
	new item[32], string[128];
	if (sscanf(params, "s[32]u", item, params[1]))
	{
		_Mensaje(playerid, 3, "0", "/quitar [item] [id jugador]");
		_Mensaje(playerid, 2, "0", "Items: lcoche, lpiloto, larma, lnavegacion, lcamionero");
		return 1;
	}
	if (!IsPlayerConnectedEx(params[1])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no esta conectado.");
	if (!CercaDelWeon(5.0, playerid, params[1])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador esta muy lejos de ti.");
	if (strcmp(item, "lcoche", true) == 0)
	{
		InfoJugador[params[1]][jLicencias][1] = 0;
		format(string, sizeof string, "Oficial %s quita la licencia de conduccion a %s.", NombreJugador(playerid), NombreJugador(params[1]));
		ProxDetector(30.0, playerid, string, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF);
		guardar_int_mysql("cuentas", "Licencias2", InfoJugador[params[1]][jID], InfoJugador[params[1]][jLicencias][1]);
	}
	else if (strcmp(item, "lpiloto", true) == 0)
	{
		InfoJugador[params[1]][jLicencias][4] = 0;
		format(string, sizeof string, "Oficial %s quita la licencia de vuelo a %s.", NombreJugador(playerid), NombreJugador(params[1]));
		ProxDetector(30.0, playerid, string, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF);
		guardar_int_mysql("cuentas", "Licencias5", InfoJugador[params[1]][jID], InfoJugador[params[1]][jLicencias][4]);
	}
	else if (strcmp(item, "larma", true) == 0)
	{
		InfoJugador[params[1]][jLicencias][0] = 0;
		InfoJugador[params[1]][jTiempoLicencia1] = 0;
		format(string, sizeof string, "Oficial %s quita la licencia de armas a %s.", NombreJugador(playerid), NombreJugador(params[1]));
		ProxDetector(30.0, playerid, string, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF);
		guardar_int_mysql("cuentas", "Licencias1", InfoJugador[params[1]][jID], InfoJugador[params[1]][jLicencias][0]);
		guardar_int_mysql("cuentas", "TiempoLicencia1", InfoJugador[params[1]][jID], InfoJugador[params[1]][jTiempoLicencia1]);
	}
	else if (strcmp(item, "lnavegacion", true) == 0)
	{
		InfoJugador[params[1]][jLicencias][5] = 0;
		format(string, sizeof string, "Oficial %s quita la licencia de navegacion a %s.", NombreJugador(playerid), NombreJugador(params[1]));
		ProxDetector(30.0, playerid, string, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF);
		guardar_int_mysql("cuentas", "Licencias6", InfoJugador[params[1]][jID], InfoJugador[params[1]][jLicencias][5]);
	}
	else if (strcmp(item, "lcamionero", true) == 0)
	{
		InfoJugador[params[1]][jLicencias][2] = 0;
		format(string, sizeof string, "Oficial %s quita la licencia de camionero a %s.", NombreJugador(playerid), NombreJugador(params[1]));
		ProxDetector(30.0, playerid, string, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF, 0xC57BBBFF);
		guardar_int_mysql("cuentas", "Licencias3", InfoJugador[params[1]][jID], InfoJugador[params[1]][jLicencias][2]);
	}
	else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Item incorrecto.");
	return 1;
}

CMD:desbug(playerid)
{
	if (InfoJugador[playerid][jEncarcelado] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas en prision.");
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	InfoJugador[playerid][jInterior] = 0;
	InfoJugador[playerid][jVirtualWorld] = 0;
	_Mensaje(playerid, 1, "Esperamos que su problema haya sido solucionado.", "[Encargado Bug's]");
	return 1;
}

forward RecogerAccesorio(playerid);
public RecogerAccesorio(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en esta situacion.");
	new ObjetoRecogido = 0, string[256];
	Loop(i, sizeof InfoCaido, 0) if (_enPos(playerid, 2.0, InfoCaido[i][AccX], InfoCaido[i][AccY], InfoCaido[i][AccZ]) && GetPlayerVirtualWorld(playerid) == InfoCaido[i][AccVWorld] && GetPlayerInterior(playerid) == InfoCaido[i][AccInterior])
	{
		if (InfoCaido[i][AccID] == 0) break;
		if (AccCaido[i] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(AccCaido[i]);
			AccCaido[i] = INVALID_STREAMER_ID;
		}
		new ida = -1;
		Loop(x, 5, 0) if (InfoJugador[playerid][aModelo] == 0)
		{
			ida = x;
			break;
		}
		if (ida == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes recoger ese accesorio si no tienes espacio.");
		InfoJugador[playerid][aModelo][ida] = InfoCaido[i][AccID];
		InfoJugador[playerid][aHueso][ida] = InfoCaido[i][aHueso];
		InfoJugador[playerid][aPosicionX][ida] = InfoCaido[i][aPosicionX];
		InfoJugador[playerid][aPosicionY][ida] = InfoCaido[i][aPosicionY];
		InfoJugador[playerid][aPosicionZ][ida] = InfoCaido[i][aPosicionZ];
		InfoJugador[playerid][aRotacionX][ida] = InfoCaido[i][aRotacionX];
		InfoJugador[playerid][aRotacionY][ida] = InfoCaido[i][aRotacionY];
		InfoJugador[playerid][aRotacionZ][ida] = InfoCaido[i][aRotacionZ];
		InfoJugador[playerid][aEscalaX][ida] = InfoCaido[i][aEscalaZ];
		InfoJugador[playerid][aEscalaY][ida] = InfoCaido[i][aEscalaY];
		InfoJugador[playerid][aEscalaZ][ida] = InfoCaido[i][aEscalaX];
		ActualizarToy(playerid, ida);
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "recoge del suelo el accesorio %s.", GetNameToy(playerid, ida));
		AccionesRol(playerid, 0, MsgCheckMe);
		format(string, sizeof string, "Has recogido el accesorio {00C200}%s{ffffff}, revisa /accesorios.", GetNameToy(playerid, ida));
		_Mensaje(playerid, 2, "0", string);
		format(string, sizeof string, "Recogio del suelo un %s", GetNameToy(playerid, ida));
		AddRegistroToys(playerid, string);
		InfoCaido[i][AccX] = 0.0;
		InfoCaido[i][AccY] = 0.0;
		InfoCaido[i][AccZ] = 0.0;
		InfoCaido[i][AccID] = 0;
		InfoCaido[i][aHueso] = 0;
		InfoCaido[i][aPosicionX] = 0;
		InfoCaido[i][aPosicionY] = 0;
		InfoCaido[i][aPosicionZ] = 0;
		InfoCaido[i][aRotacionX] = 0;
		InfoCaido[i][aRotacionY] = 0;
		InfoCaido[i][aRotacionZ] = 0;
		InfoCaido[i][aEscalaZ] = 0;
		InfoCaido[i][aEscalaY] = 0;
		InfoCaido[i][aEscalaX] = 0;
		ObjetoRecogido = 1;
		break;
	}
	if (ObjetoRecogido == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un accesorio cercano a ti.");
	return 1;
}

CMD:recogeracc(playerid)
{
	if (Toy_ID[playerid] != -1) return SendClientMessage(playerid, 0xccccccff, "* No puedes hacer esto ahora.");
	if (Ropa_ID[playerid] != 0) return SendClientMessage(playerid, 0xccccccff, "* No puedes hacer esto ahora.");
	RecogerAccesorio(playerid);
	return 1;
}
CMD:recogertoy(playerid) return cmd_recogeracc(playerid);
CMD:recogerobj(playerid) return cmd_recogeracc(playerid);

GetStatusToy(playerid, id)
{
	new	name_this[64];
	if (InfoJugador[playerid][aColocado][id] != 0) alm(name_this, "{64CA46}Si");
	else alm(name_this, "{ED3F3F}No");
	return name_this;
}

CMD:vertoys(playerid,params[])
{
    if(InfoJugador[playerid][jAdmin] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /vertoys.");
	OnDuty
	new idjugador;
    if (sscanf(params, "d", idjugador)) return _Mensaje(playerid, 3, "0", "/vertoys [id jugador]");
    if (!IsPlayerConnectedEx(idjugador)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no esta conectado.");

    if (Toy_ID[playerid] != -1) return SendClientMessage(playerid, 0xccccccff, "* No puedes hacer esto ahora.");
	if (Ropa_ID[playerid] != 0) return SendClientMessage(playerid, 0xccccccff, "* No puedes hacer esto ahora.");
	new dialog[4096], dialog2[512], count = 0;
	Loop(toy, 5, 0)
	{
		if (InfoJugador[idjugador][aModelo][toy] == 0) format(dialog2, sizeof dialog2, "{cccccc}%d. Vacio\n", toy);
		else format(dialog2, sizeof dialog2, "{ffffff}%d. %s | {FF972F}%s {ffffff}| %s\n", toy, GetNameToy(idjugador, toy), GetParteToy(idjugador, toy), GetStatusToy(idjugador, toy)), count++;
		strcat(dialog, dialog2);
	}
	if (count == 0) return SendClientMessage(playerid, 0xccccccff, "* El usuario no tiene ningun accesorio registrado en su cuenta.");
	Dialog_Show(playerid, DialogNone, DIALOG_STYLE_LIST, "Accesorios", dialog, "Cerrar", "");
	return 1;
}

CMD:accesorios(playerid)
{
	if (Toy_ID[playerid] != -1) return SendClientMessage(playerid, 0xccccccff, "* No puedes hacer esto ahora.");
	if (Ropa_ID[playerid] != 0) return SendClientMessage(playerid, 0xccccccff, "* No puedes hacer esto ahora.");
	new dialog[4096], dialog2[512], count = 0;
	Loop(toy, 5, 0)
	{
		if (InfoJugador[playerid][aModelo][toy] == 0) format(dialog2, sizeof dialog2, "{cccccc}%d. Vacio\n", toy);
		else format(dialog2, sizeof dialog2, "{ffffff}%d. %s | {FF972F}%s {ffffff}| %s\n", toy, GetNameToy(playerid, toy), GetParteToy(playerid, toy), GetStatusToy(playerid, toy)), count++;
		strcat(dialog, dialog2);
	}
	if (count == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes ningun accesorio, compra alguno en una tienda de ropa.");
	Dialog_Show(playerid, ShowAccesorios, DIALOG_STYLE_LIST, "Mis accesorios", dialog, "Continuar", "Salir");
	return 1;
}
CMD:toys(playerid) return cmd_accesorios(playerid);
CMD:objetos(playerid) return cmd_accesorios(playerid);

Dialog:ShowAccesorios(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (InfoJugador[playerid][aModelo][listitem] == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes ningun accesorio en esa ranura.");
	EditarAccesorio(playerid, listitem);
	RanuraSeleccionada[playerid] = listitem;
	return 1;
}

funcion EditarAccesorio(playerid, id)
{
	new Str[512];
	if (InfoJugador[playerid][jNivelVIP] != 0) format(Str, sizeof Str, "%s\nConfigurar el accesorio\nDar accesorio\nTirar accesorio\nEliminar accesorio\nEditar color: %s", (InfoJugador[playerid][aColocado][id]) ? ("{ED3F3F}Retirarte accesorio{FFFFFF}") : ("{64CA46}Colocarte accesorio{FFFFFF}"), GetColorToy(playerid, id));
	else format(Str, sizeof Str, "%s\nConfigurar el accesorio\nDar accesorio\nTirar accesorio\nEliminar accesorio", (InfoJugador[playerid][aColocado][id]) ? ("{ED3F3F}Retirarte accesorio{FFFFFF}") : ("{64CA46}Colocarte accesorio{FFFFFF}"));
	Dialog_Show(playerid, Show2Accesorios, DIALOG_STYLE_LIST, GetNameToy(playerid, id), Str, "Continuar", "Volver");
	return 1;
}

Accesorio_Prohibido(modelo)
{
	switch (modelo)
	{
		case 19559: return 1;
		case 11704: return 1;
		case 19528: return 1;
		case 19801: return 1;
		case 19555: return 1;
		case 19556: return 1;
		case 18952: return 1;
		case 1242: return 1;
		case 19472: return 1;
		case 19036: return 1;
		case 19037: return 1;
		case 19038: return 1;
		case 19163: return 1;
		case 18636: return 1;
		case 19141: return 1;
		case 19140: return 1;
		case 18640: return 1;
		case 18975: return 1;
		case 19136: return 1;
		case 19274: return 1;
		case 19320: return 1;
		case 19553: return 1;
		case 19554: return 1;
		case 19557: return 1;
		case 19487: return 1;
		case 19488: return 1;
		case 371: return 1;
		case 19514: return 1;
		case 19515: return 1;
	}
	return 0;
}

Dialog:Show2Accesorios(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_accesorios(playerid);
	new toy = RanuraSeleccionada[playerid];
	if (toy == -1) return SendClientMessage(playerid, 0xccccccff, "* No has seleccionado ningun accesorio.");
	switch (listitem)
	{
		case 0: // colocar/remover accesorio
		{
			if (IsPlayerAttachedObjectSlotUsed(playerid, toy))
			{
				RemovePlayerAttachedObject(playerid, toy);
				InfoJugador[playerid][aColocado][toy] = 0;
				_Mensaje(playerid, 2, "0", "Te removiste correctamente el accesorio.");
			}
			else
			{
				SetPlayerAttachedObject(playerid, toy, InfoJugador[playerid][aModelo][toy], InfoJugador[playerid][aHueso][toy], InfoJugador[playerid][aPosicionX][toy], InfoJugador[playerid][aPosicionY][toy], InfoJugador[playerid][aPosicionZ][toy],
				InfoJugador[playerid][aRotacionX][toy], InfoJugador[playerid][aRotacionY][toy], InfoJugador[playerid][aRotacionZ][toy], InfoJugador[playerid][aEscalaX][toy], InfoJugador[playerid][aEscalaY][toy], InfoJugador[playerid][aEscalaZ][toy], SetColorToy(InfoJugador[playerid][aColor][toy]));
				InfoJugador[playerid][aColocado][toy] = 1;
				_Mensaje(playerid, 2, "0", "Te colocaste correctamente el accesorio.");
			}
			ActualizarToy(playerid, toy);
			RanuraSeleccionada[playerid] = -1;
		}
		case 1: // configurar accesorio
		{
			Dialog_Show(playerid, ShowEdicionAccesorio, DIALOG_STYLE_LIST, "Dispositivo de juego", "Juego desde Android\nJuego desde PC", "Continuar", "Volver");
		}
		case 2:
		{
			if (Accesorio_Prohibido(InfoJugador[playerid][aModelo][toy])) return SendClientMessage(playerid, 0xccccccff, "* No puedes ceder este accesorio.");
			if (InfoJugador[playerid][aColor][toy] != -1) return SendClientMessage(playerid, 0xccccccff, "* No puedes ceder este accesorio con textura de color.");
			Dialog_Show(playerid, Show3Accesorios, DIALOG_STYLE_INPUT, GetNameToy(playerid, toy), "{CCCCCC}Por favor ingrese la {F5FF00}ID del jugador{CCCCCC} que desea dar el accesorio:", "Continuar", "Volver");
		}
		case 3: // tirar accesorio
		{
			if (Accesorio_Prohibido(InfoJugador[playerid][aModelo][toy])) return SendClientMessage(playerid, 0xccccccff, "* No puedes tirar este accesorio.");
			if (InfoJugador[playerid][aColor][toy] != -1) return SendClientMessage(playerid, 0xccccccff, "* No puedes tirar este accesorio con textura de color.");
			new Float: X, Float: Y, Float: Z, World = GetPlayerVirtualWorld(playerid), Interior = GetPlayerInterior(playerid), MsgCheckMe[MAX_TEXT_CHAT];
			GetPlayerPos(playerid, X, Y, Z);
			TirarAcc(InfoJugador[playerid][aModelo][toy], X, Y - 0.3, Z, World, Interior, playerid);
			format(MsgCheckMe, sizeof MsgCheckMe, "tiro al suelo el accesorio %s.", GetNameToy(playerid, toy));
			AccionesRol(playerid, 0, MsgCheckMe);
			ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 1, 1, 1, 0);
			ClearAnimations(playerid);
			InfoJugador[playerid][aModelo][toy] = 0;
			InfoJugador[playerid][aHueso][toy] = 0;
			InfoJugador[playerid][aPosicionX][toy] = 0.0;
			InfoJugador[playerid][aPosicionY][toy] = 0.0;
			InfoJugador[playerid][aPosicionZ][toy] = 0.0;
			InfoJugador[playerid][aRotacionX][toy] = 0.0;
			InfoJugador[playerid][aRotacionY][toy] = 0.0;
			InfoJugador[playerid][aRotacionZ][toy] = 0.0;
			InfoJugador[playerid][aEscalaZ][toy] = 0.0;
			InfoJugador[playerid][aEscalaY][toy] = 0.0;
			InfoJugador[playerid][aEscalaX][toy] = 0.0;
			InfoJugador[playerid][aColocado][toy] = 0;
			InfoJugador[playerid][aColor][toy] = -1;
			if (IsPlayerAttachedObjectSlotUsed(playerid, toy)) RemovePlayerAttachedObject(playerid, toy);
			RanuraSeleccionada[playerid] = -1;
			ActualizarToy(playerid, toy);
		}
		case 4: // eliminar accesorio
		{
			SendClientMessageEx(playerid, -1, "Eliminaste tu %s accesorio.", GetNameToy(playerid, toy));
			InfoJugador[playerid][aModelo][toy] = 0;
			InfoJugador[playerid][aHueso][toy] = 0;
			InfoJugador[playerid][aPosicionX][toy] = 0.0;
			InfoJugador[playerid][aPosicionY][toy] = 0.0;
			InfoJugador[playerid][aPosicionZ][toy] = 0.0;
			InfoJugador[playerid][aRotacionX][toy] = 0.0;
			InfoJugador[playerid][aRotacionY][toy] = 0.0;
			InfoJugador[playerid][aRotacionZ][toy] = 0.0;
			InfoJugador[playerid][aEscalaZ][toy] = 0.0;
			InfoJugador[playerid][aEscalaY][toy] = 0.0;
			InfoJugador[playerid][aEscalaX][toy] = 0.0;
			InfoJugador[playerid][aColocado][toy] = 0;
			InfoJugador[playerid][aColor][toy] = -1;
			if (IsPlayerAttachedObjectSlotUsed(playerid, toy)) RemovePlayerAttachedObject(playerid, toy);
			ActualizarToy(playerid, toy);
			RanuraSeleccionada[playerid] = -1;
		}
		case 5: //personalizar color 1
		{
			new gtitulo[128], str[1024];
			format(gtitulo, sizeof gtitulo, "Color actual: %s", GetColorToy(playerid, toy));
			format(str, sizeof str, "Color predeterminado\n");
			Loop(e, sizeof InfoColorToy, 0)
			{
	 			format(str, sizeof str, "%s{%.6s}%s\n", str, InfoColorToy[e][ctColor][2], InfoColorToy[e][ctNombre]);
			}
			Dialog_Show(playerid, ChangeToyColor, DIALOG_STYLE_LIST, gtitulo, str, "Continuar", "Volver");
		}
	}
	return 1;
}

Dialog:ChangeToyColor(playerid, response, listitem, inputtext[])
{
	new x = RanuraSeleccionada[playerid];
	if (x == -1) return 1;
	if (!response) return EditarAccesorio(playerid, x);
	new color = listitem-1;
	InfoJugador[playerid][aColor][x] = color;
	SendClientMessageEx(playerid, -1, "Cambiaste el color de tu %s (%d) al %s", GetNameToy(playerid, x), x+1, GetColorToy(playerid, x));
	if (InfoJugador[playerid][aColocado][x] != 0)
	{
		SetPlayerAttachedObject(playerid, x, InfoJugador[playerid][aModelo][x], InfoJugador[playerid][aHueso][x], InfoJugador[playerid][aPosicionX][x], InfoJugador[playerid][aPosicionY][x], InfoJugador[playerid][aPosicionZ][x],
		InfoJugador[playerid][aRotacionX][x], InfoJugador[playerid][aRotacionY][x], InfoJugador[playerid][aRotacionZ][x], InfoJugador[playerid][aEscalaX][x], InfoJugador[playerid][aEscalaY][x], InfoJugador[playerid][aEscalaZ][x],
		SetColorToy(InfoJugador[playerid][aColor][x]));
	}
	ActualizarToy(playerid, x);
	return 1;
}

Dialog:ShowEdicionAccesorio(playerid, response, listitem, inputtext[])
{
	new toy = RanuraSeleccionada[playerid];
	if (toy == -1) return SendClientMessage(playerid, 0xccccccff, "* No has seleccionado ningun accesorio.");
	if (!response)
	{
		if (RanuraSeleccionada[playerid] != -1)
		{
			EditarAccesorio(playerid, RanuraSeleccionada[playerid]);
		}
		return 1;
	}
	//android
	if (listitem == 0)
	{
		new id = ShowCameraSkin(playerid, 2);
		if (id == 0) return SendClientMessage(playerid, 0xccccccff, "* No estas en una tienda de ropa.");
		new gformat[512];
		format(gformat, sizeof gformat, "{FF972F}Columna\n{FF972F}Cabeza\n{FF972F}Brazo izquierdo\n{FF972F}Brazo derecho\n{FF972F}Mano izquierda\n{FF972F}Mano derecha\n{FF972F}Muslo izquierdo\n{FF972F}Muslo derecho\n\
		{FF972F}Pie izquierdo\n{FF972F}Pie derecho\n{FF972F}Pantorrilla derecha\n{FF972F}Pantorrilla izquierda\n{FF972F}Antebrazo izquierdo\n{FF972F}Antebrazo derecho\n{FF972F}Clavicula izquierda\n\
		{FF972F}Clavicula derecha\n{FF972F}Cuello\n{FF972F}Mandibula");
		Dialog_Show(playerid, Show4Accesorios, DIALOG_STYLE_LIST, GetNameToy(playerid, toy), gformat, "Continuar", "Volver");
	    return 1;
	}
	//pc
	new gformat[512];
	format(gformat, sizeof gformat, "{FF972F}Columna\n{FF972F}Cabeza\n{FF972F}Brazo izquierdo\n{FF972F}Brazo derecho\n{FF972F}Mano izquierda\n{FF972F}Mano derecha\n{FF972F}Muslo izquierdo\n{FF972F}Muslo derecho\n\
	{FF972F}Pie izquierdo\n{FF972F}Pie derecho\n{FF972F}Pantorrilla derecha\n{FF972F}Pantorrilla izquierda\n{FF972F}Antebrazo izquierdo\n{FF972F}Antebrazo derecho\n{FF972F}Clavicula izquierda\n\
	{FF972F}Clavicula derecha\n{FF972F}Cuello\n{FF972F}Mandibula");
	Dialog_Show(playerid, Show5Accesorios, DIALOG_STYLE_LIST, GetNameToy(playerid, toy), gformat, "Continuar", "Volver");
	return 1;
}

Dialog:Show5Accesorios(playerid, response, listitem, inputtext[])
{
	new toy = RanuraSeleccionada[playerid];
	if (toy == -1) return SendClientMessage(playerid, 0xccccccff, "* No has seleccionado ningun accesorio.");
	if (!response)
	{
		if (InfoJugador[playerid][aColocado][toy] != 0)
		{
			RemovePlayerAttachedObject(playerid, toy);
			SetPlayerAttachedObject(playerid, toy, InfoJugador[playerid][aModelo][toy], InfoJugador[playerid][aHueso][toy], InfoJugador[playerid][aPosicionX][toy], InfoJugador[playerid][aPosicionY][toy], InfoJugador[playerid][aPosicionZ][toy],
			InfoJugador[playerid][aRotacionX][toy], InfoJugador[playerid][aRotacionY][toy], InfoJugador[playerid][aRotacionZ][toy], InfoJugador[playerid][aEscalaX][toy], InfoJugador[playerid][aEscalaY][toy], InfoJugador[playerid][aEscalaZ][toy], SetColorToy(InfoJugador[playerid][aColor][toy]));
		}
		Dialog_Show(playerid, ShowEdicionAccesorio, DIALOG_STYLE_LIST, "Dispositivo de juego", "Juego desde Android\nJuego desde PC", "Continuar", "Volver");
		return 1;
	}
	InfoJugador[playerid][aHueso][toy] = listitem+1;
	SetPlayerAttachedObject(playerid, toy, InfoJugador[playerid][aModelo][toy], InfoJugador[playerid][aHueso][toy], InfoJugador[playerid][aPosicionX][toy], InfoJugador[playerid][aPosicionY][toy], InfoJugador[playerid][aPosicionZ][toy],
	InfoJugador[playerid][aRotacionX][toy], InfoJugador[playerid][aRotacionY][toy], InfoJugador[playerid][aRotacionZ][toy], InfoJugador[playerid][aEscalaX][toy], InfoJugador[playerid][aEscalaY][toy], InfoJugador[playerid][aEscalaZ][toy], SetColorToy(InfoJugador[playerid][aColor][toy]));
	EditAttachedObject(playerid, toy);
	InfoJugador[playerid][aColocado][toy] = 1;
	ActualizarToy(playerid, toy);
	_Mensaje(playerid, 2, "0", "Manten presionado {F5FF00}~k~~PED_SPRINT~{FFFFFF} para cambiar la posicion de la camara.");
	return 1;
}

Dialog:Show3Accesorios(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
		if (RanuraSeleccionada[playerid] != -1)
		{
			EditarAccesorio(playerid, RanuraSeleccionada[playerid]);
		}
		return 1;
	}
	if (!isnumeric(inputtext)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo numeros porfavor, vuelve a intentarlo.");
	new idjugador = strval(inputtext);
	if (playerid == idjugador) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes dar el accesorio a ti mismo.");
	if (!IsPlayerConnectedEx(idjugador)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (!CercaDelWeon(8.0, playerid, idjugador)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~La persona que seleccionaste no esta cerca tuyo.");
	new ida = -1, toy = RanuraSeleccionada[playerid];
	if (toy == -1) return SendClientMessage(playerid, 0xccccccff, "* No has seleccionado ningun accesorio.");
	Loop(x, 5, 0) if (InfoJugador[idjugador][aModelo][x] == 0)
	{
		ida = x;
		break;
	}
	if (ida == -1) return SendClientMessage(playerid, 0xccccccff, "* Esa persona no tiene donde guardar este accesorio.");
	new MsgCheckMe[MAX_TEXT_CHAT];
	format(MsgCheckMe, sizeof(MsgCheckMe), "cede a %s el accesorio %s.", NombreJugador(idjugador), GetNameToy(playerid, toy));
	AccionesRol(playerid, 0, MsgCheckMe);
	format(MsgCheckMe, sizeof MsgCheckMe, "Cedio un %s a %s.", GetNameToy(playerid, toy), NombreJugador(idjugador));
	AddRegistroToys(playerid, MsgCheckMe);
	//cede
	InfoJugador[idjugador][aModelo][ida] = InfoJugador[playerid][aModelo][toy];
	InfoJugador[idjugador][aHueso][ida] = InfoJugador[playerid][aHueso][toy];
	InfoJugador[idjugador][aPosicionX][ida] = InfoJugador[playerid][aPosicionX][toy];
	InfoJugador[idjugador][aPosicionY][ida] = InfoJugador[playerid][aPosicionY][toy];
	InfoJugador[idjugador][aPosicionZ][ida] = InfoJugador[playerid][aPosicionZ][toy];
	InfoJugador[idjugador][aRotacionX][ida] = InfoJugador[playerid][aRotacionX][toy];
	InfoJugador[idjugador][aRotacionY][ida] = InfoJugador[playerid][aRotacionY][toy];
	InfoJugador[idjugador][aRotacionZ][ida] = InfoJugador[playerid][aRotacionZ][toy];
	InfoJugador[idjugador][aEscalaZ][ida] = InfoJugador[playerid][aEscalaZ][toy];
	InfoJugador[idjugador][aEscalaY][ida] = InfoJugador[playerid][aEscalaY][toy];
	InfoJugador[idjugador][aEscalaX][ida] = InfoJugador[playerid][aEscalaX][toy];
	//elimina variables propias
	InfoJugador[playerid][aModelo][toy] = 0;
	InfoJugador[playerid][aHueso][toy] = 0;
	InfoJugador[playerid][aPosicionX][toy] = 0.0;
	InfoJugador[playerid][aPosicionY][toy] = 0.0;
	InfoJugador[playerid][aPosicionZ][toy] = 0.0;
	InfoJugador[playerid][aRotacionX][toy] = 0.0;
	InfoJugador[playerid][aRotacionY][toy] = 0.0;
	InfoJugador[playerid][aRotacionZ][toy] = 0.0;
	InfoJugador[playerid][aEscalaZ][toy] = 0.0;
	InfoJugador[playerid][aEscalaY][toy] = 0.0;
	InfoJugador[playerid][aEscalaX][toy] = 0.0;
	InfoJugador[playerid][aColocado][toy] = 0;
	InfoJugador[playerid][aColor][toy] = -1;
	if (IsPlayerAttachedObjectSlotUsed(playerid, toy)) RemovePlayerAttachedObject(playerid, toy);
	ActualizarToy(playerid, toy);
	ActualizarToy(idjugador, toy);
	RanuraSeleccionada[playerid] = -1;
	RanuraSeleccionada[idjugador] = -1;
	return 1;
}

Dialog:Show4Accesorios(playerid, response, listitem, inputtext[])
{
	new toy = RanuraSeleccionada[playerid];
	if (toy == -1) return SendClientMessage(playerid, 0xccccccff, "* No has seleccionado ningun accesorio.");
	if (!response)
	{
		if (InfoJugador[playerid][aColocado][toy] != 0)
		{
			RemovePlayerAttachedObject(playerid, toy);
			SetPlayerAttachedObject(playerid, toy, InfoJugador[playerid][aModelo][toy], InfoJugador[playerid][aHueso][toy], InfoJugador[playerid][aPosicionX][toy], InfoJugador[playerid][aPosicionY][toy], InfoJugador[playerid][aPosicionZ][toy],
			InfoJugador[playerid][aRotacionX][toy], InfoJugador[playerid][aRotacionY][toy], InfoJugador[playerid][aRotacionZ][toy], InfoJugador[playerid][aEscalaX][toy], InfoJugador[playerid][aEscalaY][toy], InfoJugador[playerid][aEscalaZ][toy], SetColorToy(InfoJugador[playerid][aColor][toy]));
		}
		Dialog_Show(playerid, ShowEdicionAccesorio, DIALOG_STYLE_LIST, "Dispositivo de juego", "Juego desde Android\nJuego desde PC", "Continuar", "Volver");
		return 1;
	}
	new id = ShowCameraSkin(playerid, 2);
	if (id == 0) return SendClientMessage(playerid, 0xccccccff, "* No estas en una tienda de ropa.");
	if (IsPlayerAttachedObjectSlotUsed(playerid, toy)) RemovePlayerAttachedObject(playerid, toy);
	//guardado de posicion
	GetPlayerPos(playerid, NegocioPos[playerid][0], NegocioPos[playerid][1], NegocioPos[playerid][2]);
	GetPlayerFacingAngle(playerid, NegocioPos[playerid][3]);
	NegocioVW[playerid] = GetPlayerVirtualWorld(playerid);
	NegocioInt[playerid] = GetPlayerInterior(playerid);
	Ropa_ID[playerid] = 999;
	TemporalToyParte[playerid] = listitem+1;
	TemporalToyPos[playerid][0] = 0.0, TemporalToyPos[playerid][1] = 0.0, TemporalToyPos[playerid][2] = 0.0;
	TemporalToyRot[playerid][0] = 0.0, TemporalToyRot[playerid][1] = 0.0, TemporalToyRot[playerid][2] = 0.0;
	TemporalToyEsc[playerid][0] = 1.0, TemporalToyEsc[playerid][1] = 1.0, TemporalToyEsc[playerid][2] = 1.0;
	SetPlayerAttachedObject(playerid, toy, InfoJugador[playerid][aModelo][toy], TemporalToyParte[playerid], TemporalToyPos[playerid][0], TemporalToyPos[playerid][1], TemporalToyPos[playerid][2], TemporalToyRot[playerid][0], TemporalToyRot[playerid][1], TemporalToyRot[playerid][2], TemporalToyEsc[playerid][0], TemporalToyEsc[playerid][1], TemporalToyEsc[playerid][2]);
	PlayerTextDrawHide(playerid, InfoInferior[playerid]);
	Loop(x, 6, 0) { PlayerTextDrawHide(playerid, TD_PantallaHG[playerid][x]); }
	HidePlayerProgressBar(playerid, BarraExp[playerid]);
	HidePlayerProgressBar(playerid, BarraSed[playerid]);
	HidePlayerProgressBar(playerid, BarraHambre[playerid]);
    TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
	TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
	Loop(x, 21, 0) { TextDrawShowForPlayer(playerid, TD_MenuToy[x]); }
	PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], "0.00");
	PlayerTextDrawShow(playerid, MenuToy_TD[playerid][0]);
	PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][1], "Posicion - X");
	PlayerTextDrawShow(playerid, MenuToy_TD[playerid][1]);
	SelectTextDraw(playerid, 0xB2B2B2BB);
	SetPosEx(playerid, 267.62689, 289.85846, 999.22778, 0.00000, GetPlayerInterior(playerid), playerid, 0);
	SetCameraToy(playerid, TemporalToyParte[playerid], 1);
	IDcameraToy[playerid] = 1;
	TypeIDtoy[playerid] = 1;
	TypeIDedit[playerid] = 0;
	return 1;
}

SetCameraToy(playerid, hueso, camera)
{
	switch (hueso)
	{
		case 1://pecho o columna
		{
			switch (camera)
			{
				case 1:
				{
					SetPlayerCameraPos(playerid, 267.5881, 292.9120, 999.7490);
					SetPlayerCameraLookAt(playerid, 267.6041, 291.9132, 999.5507);
				}
				case 2:
				{
					SetPlayerCameraPos(playerid, 271.1805, 289.6345, 1000.1708);
					SetPlayerCameraLookAt(playerid, 270.1820, 289.6607, 999.9025);
				}
				case 3:
				{
					SetPlayerCameraPos(playerid, 267.5194, 286.7650, 1000.1708);
					SetPlayerCameraLookAt(playerid, 267.4948, 287.7635, 999.8224);
				}
				case 4:
				{
					SetPlayerCameraPos(playerid, 264.1339, 289.9303, 1000.2408);
					SetPlayerCameraLookAt(playerid, 265.1325, 289.9055, 999.9276);
				}
			}
		}
		case 2, 15, 16, 17, 18: //cabeza, clavicula, cuello y quijada
		{
			switch (camera)
			{
				case 1:
				{
					SetPlayerCameraPos(playerid, 267.6516, 291.2190, 999.9117);
					SetPlayerCameraLookAt(playerid, 267.6366, 290.2203, 999.7881);
				}
				case 2:
				{
					SetPlayerCameraPos(playerid, 269.2158, 289.8206, 999.9623);
					SetPlayerCameraLookAt(playerid, 268.2207, 289.7350, 999.8290);
				}
				case 3:
				{
					SetPlayerCameraPos(playerid, 267.7502, 288.2911, 1000.1300);
					SetPlayerCameraLookAt(playerid, 267.5588, 289.2714, 999.9520);
				}
				case 4:
				{
					SetPlayerCameraPos(playerid, 266.2012, 289.7960, 1000.1300);
					SetPlayerCameraLookAt(playerid, 267.1910, 289.9289, 999.8419);
				}
			}
		}
		case 3, 4, 5, 6, 13, 14: //brazos, manos, antebrazos
		{
			switch (camera)
			{
				case 1:
				{
					SetPlayerCameraPos(playerid, 267.3482, 291.0925, 999.7658);
					SetPlayerCameraLookAt(playerid, 267.5838, 290.1219, 999.3727);
				}
				case 2:
				{
					SetPlayerCameraPos(playerid, 269.3014, 289.8627, 999.7658);
					SetPlayerCameraLookAt(playerid, 268.3120, 289.7264, 999.4228);
				}
				case 3:
				{
					SetPlayerCameraPos(playerid, 267.3388, 288.9605, 999.7405);
					SetPlayerCameraLookAt(playerid, 267.4824, 289.9488, 998.9926);
				}
				case 4:
				{
					SetPlayerCameraPos(playerid, 266.3039, 289.9442, 1000.3391);
					SetPlayerCameraLookAt(playerid, 267.2974, 290.0443, 999.1611);
				}
			}
		}
		case 7, 8, 9, 10, 11, 12: //muslos, pantorrillas y pies
		{
			switch (camera)
			{
				case 1:
				{
					SetPlayerCameraPos(playerid, 267.9599, 291.9244, 999.5679);
					SetPlayerCameraLookAt(playerid, 267.9535, 290.9259, 999.2101);
				}
				case 2:
				{
					SetPlayerCameraPos(playerid, 269.9505, 289.7363, 999.5679);
					SetPlayerCameraLookAt(playerid, 268.9538, 289.6759, 999.1151);
				}
				case 3:
				{
					SetPlayerCameraPos(playerid, 267.8032, 287.7137, 999.5679);
					SetPlayerCameraLookAt(playerid, 267.5780, 288.6864, 999.1951);
				}
				case 4:
				{
					SetPlayerCameraPos(playerid, 265.8008, 289.6675, 999.5679);
					SetPlayerCameraLookAt(playerid, 266.7739, 289.8915, 999.0551);
				}
			}
	 	}
	}
	return 1;
}

CMD:ptoys(playerid)
{
	if (Toy_ID[playerid] != -1) return SendClientMessage(playerid, 0xccccccff, "* No puedes hacer esto ahora.");
	if (Ropa_ID[playerid] != 0) return SendClientMessage(playerid, 0xccccccff, "* No puedes hacer esto ahora.");
	new count = 0;
	Loop(x, 5, 0) if (InfoJugador[playerid][aModelo][x] != 0)
	{
		count++;
		SetPlayerAttachedObject(playerid, x, InfoJugador[playerid][aModelo][x], InfoJugador[playerid][aHueso][x], InfoJugador[playerid][aPosicionX][x], InfoJugador[playerid][aPosicionY][x], InfoJugador[playerid][aPosicionZ][x], InfoJugador[playerid][aRotacionX][x], InfoJugador[playerid][aRotacionY][x], InfoJugador[playerid][aRotacionZ][x],
		InfoJugador[playerid][aEscalaX][x], InfoJugador[playerid][aEscalaY][x], InfoJugador[playerid][aEscalaZ][x], SetColorToy(InfoJugador[playerid][aColor][x]));
		InfoJugador[playerid][aColocado][x] = 1;
		ActualizarToy(playerid, x);
	}
	if (count == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes ninguna accesorio que ponerte.");
	SendClientMessageEx(playerid, -1, "* Te has colocado %d accesorios.", count);
	return 1;
}
CMD:ponerobjetos(playerid) return cmd_ptoys(playerid);
CMD:poneraccesorios(playerid) return cmd_ptoys(playerid);

CMD:qtoys(playerid)
{
	if (Toy_ID[playerid] != -1) return SendClientMessage(playerid, 0xccccccff, "* No puedes hacer esto ahora.");
	if (Ropa_ID[playerid] != 0) return SendClientMessage(playerid, 0xccccccff, "* No puedes hacer esto ahora.");
	new count = 0;
	Loop(x, 5, 0) if (InfoJugador[playerid][aColocado][x] != 0)
	{
		count++;
        RemovePlayerAttachedObject(playerid, x);
		InfoJugador[playerid][aColocado][x] = 0;
		ActualizarToy(playerid, x);
	}
	if (count == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes ninguna accesorio que remover.");
	SendClientMessageEx(playerid, -1, "* Te has removido %d accesorios.", count);
    return 1;
}
CMD:quitarobjetos(playerid) return cmd_qtoys(playerid);
CMD:quitaraccesorios(playerid) return cmd_qtoys(playerid);

CMD:toy(playerid, params[])
{
	if (Toy_ID[playerid] != -1) return SendClientMessage(playerid, 0xccccccff, "* No puedes hacer esto ahora.");
 	if (Ropa_ID[playerid] != 0) return SendClientMessage(playerid, 0xccccccff, "* No puedes hacer esto ahora.");
	new id;
    if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/toy [slot (0-4)]");
	if (id < 0 || id > 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Las ranuras de los accesorios son del numero 0 al 4.");
	if (InfoJugador[playerid][aModelo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes ningun accesorio en esa ranura.");
	if (InfoJugador[playerid][aColocado][id] != 0)
	{
		_Mensaje(playerid, 2, "0", "Te removiste el accesorio correctamente.");
		RemovePlayerAttachedObject(playerid, id);
		InfoJugador[playerid][aColocado][id] = 0;
	}
	else
	{
		SetPlayerAttachedObject(playerid, id, InfoJugador[playerid][aModelo][id], InfoJugador[playerid][aHueso][id], InfoJugador[playerid][aPosicionX][id], InfoJugador[playerid][aPosicionY][id], InfoJugador[playerid][aPosicionZ][id],
		InfoJugador[playerid][aRotacionX][id], InfoJugador[playerid][aRotacionY][id], InfoJugador[playerid][aRotacionZ][id], InfoJugador[playerid][aEscalaX][id], InfoJugador[playerid][aEscalaY][id], InfoJugador[playerid][aEscalaZ][id], SetColorToy(InfoJugador[playerid][aColor][id]));
		_Mensaje(playerid, 2, "0", "Te colocaste el accesorio correctamente.");
		InfoJugador[playerid][aColocado][id] = 1;
    }
	ActualizarToy(playerid, id);
    return 1;
}
CMD:obj(playerid, params[]) return cmd_toy(playerid, params);
CMD:poneracc(playerid, params[]) return cmd_toy(playerid, params);
CMD:ponertoy(playerid, params[]) return cmd_toy(playerid, params);
CMD:ponerobj(playerid, params[]) return cmd_toy(playerid, params);

CMD:toysvip(playerid)
{
	if (!_enPos(playerid, 3.0, 802.4553,-1419.4771,1016.4688)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en los casilleros premium.");
	if (InfoJugador[playerid][jNivelVIP] >= 1)
	{
		ShowPlayerDialog(playerid, D_COMPRARTOYVIP, DIALOG_STYLE_MSGBOX, "{D6E1EB}Tienda de Accesorios", "Bienvenido al dispensador de accesorios VIP! Aqui puedes comprar accesorios para ti.\nPrimero, tienes que elegir que menu veras", "Ok", "Salir");
	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas ser minimo premium Basico para usar /Prendas.");
	return 1;
}
CMD:prendas(playerid) return cmd_toysvip(playerid);

new ID_JOB_SELEC[MAX_PLAYERS];

CMD:casillero(playerid)
{
	if (!IsPlayerInRangeOfPoint(playerid, 4.0, 798.7003,-1416.3333,1016.4688)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en los casilleros del salon premium.");
	switch (InfoJugador[playerid][jNivelVIP])
	{
		case 1,2,3,4: Dialog_Show(playerid, Casillero_VIP, DIALOG_STYLE_LIST, "Casillero", "Cambiar skin\nRestaurar vida\nRestaurar chaleco ($2,000)\nCambiar trabajo\nRegalo", "Continuar", "Salir");
		default: ShowInfoForPlayer(playerid, "No eres usuario premium.", 2000);
	}
	return 1;
}

Dialog:Casillero_VIP(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (InfoJugador[playerid][jSexo] == 1) ShowModelSelectionMenu(playerid, SkinsHombre, "Selecciona skin");
			else ShowModelSelectionMenu(playerid, SkinsMujer, "Selecciona skin");
		}
		case 1: Dar_Vida(playerid, 100);
		case 2:
		{
			if (GetPlayerCash(playerid) < 2000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar $2,000, por el chaleco.");
			Dar_Chaleco(playerid, 100);
			GivePlayerCash(playerid, -2000, "chaleco VIP");
		}
		case 3:
		{
			if (InfoJugador[playerid][jTiempos][5] != 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* Debes esperar %s para volver abrir un regalo.", Minutos_tiempo(InfoJugador[playerid][jTiempos][5]));
			InfoJugador[playerid][jTiempos][5] = 720;
			ceder_regalo(playerid);
			guardar_int_mysql("cuentas", "Tiempos6", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][5]);
		}
	}
	return 1;
}

CMD:darvip(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Darvip.");
	new string[128], playerid2, level, dia,mes;
	if (sscanf(params, "dddd", playerid2, level, dia,mes))
	{
		_Mensaje(playerid, 3, "0", "/darvip [id jugador] [tipo vip] [dia fin] [mes fin]");
		_Mensaje(playerid, 1, "1) V-Basico | 2) V-Avanzado | 3) V-Ultra 4) V-Socio", "Tipos:");
		return 1;
	}
	if (!IsPlayerConnected(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (level < 0 || level > 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo existen 4 tipos de vip.");
	InfoJugador[playerid2][jNivelVIP] = level;
	InfoJugador[playerid2][jMesVIP] = mes;
	InfoJugador[playerid2][jDiaVIP] = dia;
	if (level == 0)
	{
		format(string, sizeof string, "Administracion: %s quito sistema vip a %s.", NombreRJugador(playerid), NombreRJugador(playerid2));
		MensajeAdmin(string);
		format(string, sizeof string, "'%s', te ha retirado tu sistema vip.", NombreRJugador(playerid));
		_Mensaje(playerid2, 2, "0", string);
		InfoJugador[playerid2][jDiaVIP] = -1;
		InfoJugador[playerid2][jMesVIP] = -1;
		format(string, sizeof string, "Quito vip a %s.", NombreRJugador(playerid2));
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 7);
	}
	else if (level == 1)
	{
		format(string, sizeof string, "Administracion: %s ha establecido a %s, VIP Basico (%d).", NombreRJugador(playerid), NombreRJugador(playerid2), level);
		MensajeAdmin(string);
		format(string, sizeof string, "'%s', te ha otorgado VIP Basico (%d).", NombreRJugador(playerid), level);
		_Mensaje(playerid2, 2, "0", string);
		format(string, sizeof string, "Otorgo VIP Basico a %s.", NombreRJugador(playerid2));
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 7);
		format(string, sizeof string, "[OOC] BOT North America Oficial[101]: %s acaba de mejorar el Discord con un Nitro.", NombreRJugador(playerid2));
		SendClientMessageToAll(0xFFB600FF, string);
		InfoJugador[playerid2][jDiscordNitro] = 1;
	}
	else if (level == 2)
	{
		format(string, sizeof string, "Administracion: %s ha establecido a %s, VIP Avanzado (%d).", NombreRJugador(playerid), NombreRJugador(playerid2), level);
		MensajeAdmin(string);
		format(string, sizeof string, "'%s', te ha otorgado VIP Avanzado (%d).", NombreRJugador(playerid), level);
		_Mensaje(playerid2, 2, "0", string);
		format(string, sizeof string, "Otorgo VIP Avanzado a %s.", NombreRJugador(playerid2));
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 7);
		format(string, sizeof string, "[OOC] North America Oficial[101]: %s acaba de mejorar el Discord con un Nitro.", NombreRJugador(playerid2));
		SendClientMessageToAll(0xFFB600FF, string);
		InfoJugador[playerid2][jDiscordNitro] = 1;
	}
	else if (level == 3)
	{
		format(string, sizeof string, "Administracion: %s ha establecido a %s, VIP Ultra (%d).", NombreRJugador(playerid), NombreRJugador(playerid2), level);
		MensajeAdmin(string);
		format(string, sizeof string, "'%s', te ha otorgado VIP Ultra (%d).", NombreRJugador(playerid), level);
		_Mensaje(playerid2, 2, "0", string);
		format(string, sizeof string, "Otorgo VIP Ultra a %s.", NombreRJugador(playerid2));
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 7);
		format(string, sizeof string, "[OOC] North America Oficial[101]: %s acaba de mejorar el Discord con un Nitro.", NombreRJugador(playerid2));
		SendClientMessageToAll(0xFFB600FF, string);
		InfoJugador[playerid2][jDiscordNitro] = 1;
	}
 	else if (level == 4)
	{
		format(string, sizeof string, "Administracion: %s ha establecido a %s, VIP Socio (%d).", NombreRJugador(playerid), NombreRJugador(playerid2), level);
		MensajeAdmin(string);
		format(string, sizeof string, "'%s', te ha otorgado VIP Ultra (%d).", NombreRJugador(playerid), level);
		_Mensaje(playerid2, 2, "0", string);
		format(string, sizeof string, "Otorgo VIP Socio a %s.", NombreRJugador(playerid2));
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 7);
		format(string, sizeof string, "[OOC] North America Oficial[101]: %s acaba de mejorar el Discord con un Nitro.", NombreRJugador(playerid2));
		SendClientMessageToAll(0xFFB600FF, string);
		InfoJugador[playerid2][jDiscordNitro] = 1;
	}
	Actualizar(playerid2);
	guardar_int_mysql("cuentas", "NivelVIP", InfoJugador[playerid2][jID], InfoJugador[playerid2][jNivelVIP]);
	guardar_int_mysql("cuentas", "MesVIP", InfoJugador[playerid2][jID], InfoJugador[playerid2][jMesVIP]);
	guardar_int_mysql("cuentas", "DiaVIP", InfoJugador[playerid2][jID], InfoJugador[playerid2][jDiaVIP]);
	guardar_int_mysql("cuentas", "DiscordNitro", InfoJugador[playerid2][jID], InfoJugador[playerid2][jDiscordNitro]);
	return 1;
}

CMD:togvip(playerid)
{
	if (InfoJugador[playerid][jNivelVIP] > 0 || InfoJugador[playerid][jAdmin] >= 1)
	{
		switch (B_VIP[playerid])
		{
			case 0:
			{
				B_VIP[playerid] = 1;
				_Mensaje(playerid, 4, "ffffff", "Chat VIP habilitado, [Escribe]{00C200} /vip [texto].");
			}
            case 1:
			{
				B_VIP[playerid] = 0;
				_Mensaje(playerid, 4, "ffffff", "Chat VIP deshabilitado.");
			}
		}
	}
	return 1;
}

CMD:togyt(playerid)
{
	if (InfoJugador[playerid][jYT] > 0 || InfoJugador[playerid][jAdmin] >= 1)
	{
		switch (B_YT[playerid])
		{
			case 0:
			{
				B_YT[playerid] = 1;
				_Mensaje(playerid, 4, "ffffff", "Chat YT habilitado, [Escribe]{00C200} /yt [texto].");
			}
            case 1:
			{
				B_YT[playerid] = 0;
				_Mensaje(playerid, 4, "ffffff", "Chat YT deshabilitado.");
			}
		}
	}
	return 1;
}

CMD:vip(playerid, params[])
{
	if (InfoJugador[playerid][jNivelVIP] > 1 || InfoJugador[playerid][jAdmin] >= 2) {
        new string[128];
        if (isnull(params)) return _Mensaje(playerid, 3, "0", "/vip [texto]");
        if (B_VIP[playerid] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes el canal deshabilitado, /togvip para re-habilitarlo.");
        switch (InfoJugador[playerid][jAdmin]) {
            case 1,2,3,4,5,10,11: format(string, sizeof string, "[VIP] #%d | %s:{ffffff} %s", InfoJugador[playerid][jAdmin], NombreRJugador(playerid), params);
        }
        switch (InfoJugador[playerid][jNivelVIP]) {
            case 1: format(string, sizeof string, "[VIP Basico] %s:{ffffff} %s", NombreRJugador(playerid), params);
            case 2: format(string, sizeof string, "[VIP Avanzado] %s:{ffffff} %s", NombreRJugador(playerid), params);
            case 3: format(string, sizeof string, "[VIP Ultra] %s:{ffffff} %s", NombreRJugador(playerid), params);
            case 4: format(string, sizeof string, "[VIP Socio] %s:{ffffff} %s", NombreRJugador(playerid), params);
        }
        if (InfoJugador[playerid][jNivelVIP] >= 1 || InfoJugador[playerid][jAdmin] >= 1) { MensajeVIP(C_VIP, string); }
        format(string, sizeof string, "%s: %s", NombreRJugador(playerid), params);
    }
    return 1;
}
CMD:v(playerid, params[]) return cmd_vip(playerid, params);

CMD:yt(playerid, params[])
{
	if (InfoJugador[playerid][jYT] > 0 || InfoJugador[playerid][jAdmin] >= 2) {
        new string[128];
        if (isnull(params)) return _Mensaje(playerid, 3, "0", "/yt [texto]");
        if (B_YT[playerid] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes el canal deshabilitado, /togyt para re-habilitarlo.");
        switch (InfoJugador[playerid][jAdmin]) {
            case 1,2,3,4,5,10,11: format(string, sizeof string, "[YT] #%d | %s:{ffffff} %s", InfoJugador[playerid][jAdmin], NombreRJugador(playerid), params);
        }
		switch (InfoJugador[playerid][jYT]) {
		case 1: format(string, sizeof string, "[{FF0000}Y{FFFFFF}T] {FF0000} %s:{ffffff} %s", NombreRJugador(playerid), params);
		}
        if (InfoJugador[playerid][jYT] == 1 || InfoJugador[playerid][jAdmin] >= 1) { MensajeYT(C_YT, string); }
        format(string, sizeof string, "%s: %s", NombreRJugador(playerid), params);
    }
    return 1;
}

CMD:regaloatodos(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 11) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /regaloatodos.");
	new string[128], count = 0;
	format(string, sizeof string, "Administracion: %s envio regalos a todo el servidor.", NombreRJugador(playerid));
	_MensajeOOC(C_GCRP, string);
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2))
	{
		ceder_regalo(playerid2);
		count++;
	}
	SendClientMessageEx(playerid, 0xcccc00ff, "%d usuarios recibieron regalo.", count);
	return 1;
}

CMD:liberar(playerid, params[])
{
    new string[256], jugador2;
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Liberar.");
	OnDuty
	if (sscanf(params, "u", jugador2)) return _Mensaje(playerid, 3, "0", "/liberar [id jugador]");
    if (!IsPlayerConnectedEx(jugador2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador desconectado.");
	if (InfoJugador[jugador2][jTiempoCarcel] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no esta en prision.");
	format(string, sizeof string, "Libero de prision a %s.", NombreRJugador(jugador2));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 12);
	format(string, sizeof string, "Administracion: %s libero de prision a %s.", NombreRJugador(playerid), NombreRJugador(jugador2));
	_MensajeOOC(0xE00000FF, string);
	InfoJugador[jugador2][jTiempoCarcel] = 1;
    if (InfoJugador[jugador2][jEncarcelado] == 1) InfoJugador[jugador2][jSanciones] -= 1;
	guardar_int_mysql("cuentas", "TiempoCarcel", InfoJugador[jugador2][jID], InfoJugador[jugador2][jTiempoCarcel]);
	guardar_int_mysql("cuentas", "Sanciones", InfoJugador[jugador2][jID], InfoJugador[jugador2][jSanciones]);
	_Mensaje(jugador2, 4, "33CCFF", "Un miembro de la administracion bajo tu condena a 60 segundos.");
    return 1;
}

CMD:jailtipo(playerid, params[])
{
    if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Jailtipo.");
    OnDuty
    new string[256], time, tipo, playerid2, reason[100];
    if (sscanf(params, "ddds[100]", playerid2, tipo, time, reason)) return _Mensaje(playerid, 3, "0", "/jailtipo [id jugador] [tipo, 1. OOC - 2. IC - 3. PF] [minutos] [razon]");
    if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	B_Telefono[playerid2] = 1;
	InfoJugador[playerid2][jEncarcelado] = tipo;
	InfoJugador[playerid2][jTiempoCarcel] = time;
	alm(InfoJugador[playerid2][jSancionador], NombreRJugador(playerid));
	guardar_int_mysql("cuentas", "Encarcelado", InfoJugador[playerid2][jID], InfoJugador[playerid2][jEncarcelado]);
	guardar_int_mysql("cuentas", "TiempoCarcel", InfoJugador[playerid2][jID], InfoJugador[playerid2][jTiempoCarcel]);
	guardar_string_mysql("cuentas", "Sancionador", InfoJugador[playerid2][jID], InfoJugador[playerid2][jSancionador]);
	if (tipo == 1)
	{
		format(string, sizeof string, "El jugador %s(%d) fue sancionado, razon: %s.", NombreRJugador(playerid2), playerid2, reason);
		_MensajeOOC(0xAA3333FF, string);
		format(string, sizeof string, "Sancionador %s - Tiempo: %d minuto(s) - Jugador: %s", NombreRJugador(playerid), time, NombreRJugador(playerid2));
		MensajeAdmin3(string);
		QuitarManos(playerid2);
		new rand = random(sizeof(_OOCp));
		SetPosEx(playerid2, _OOCp[rand][0], _OOCp[rand][1], _OOCp[rand][2], _OOCp[rand][3], 0, playerid2, 1);
		TogglePlayerControllable(playerid2, 0); SetPVarInt(playerid2, "Congelado", 1);
		SetPlayerInterior(playerid2, 2); InfoJugador[playerid][jInterior] = 2;
		Esposado[playerid2] = 0; RemovePlayerAttachedObject(playerid2, 9);
		PlayerTextDrawShow(playerid2, TextTrabajo[playerid]);
	}
	else if (tipo == 2)
	{
		format(string, sizeof string, "El jugador %s fue arrestado en la comisaria, razon: %s.", NombreRJugador(playerid2), reason);
		_MensajeOOC(0xAA3333FF, string);
		format(string, sizeof string, "Sancionador %s - Tiempo: %d minuto(s) - Jugador: %s", NombreRJugador(playerid), time, NombreRJugador(playerid2));
		MensajeAdmin3(string);
		QuitarManos(playerid2);
		new rand = random(sizeof(_COMISARIAp));
		SetPosEx(playerid2, _COMISARIAp[rand][0], _COMISARIAp[rand][1], _COMISARIAp[rand][2], 0, 10, 1, 1);
		CargarObjetos(playerid2);
		Esposado[playerid2] = 0; RemovePlayerAttachedObject(playerid2, 9);
		Loop(x, 9, 0)
		{
			if (InfoInventario[InfoJugador[playerid2][jBolsillo][x]][IDArma] > 0) { InfoJugador[playerid2][jBolsillo][x] = 0, InfoJugador[playerid2][jBolsilloCant][x] = 0; }
			if (InfoJugador[playerid2][jBolsillo][x] <= 49 && InfoJugador[playerid2][jBolsillo][x] >= 41) { InfoJugador[playerid2][jBolsillo][x] = 0, InfoJugador[playerid2][jBolsilloCant][x] = 0; }
			if (InfoJugador[playerid2][jBolsillo][x] <= 79 && InfoJugador[playerid2][jBolsillo][x] >= 74) { InfoJugador[playerid2][jBolsillo][x] = 0, InfoJugador[playerid2][jBolsilloCant][x] = 0; }
			new grs[32];
			format(grs, sizeof grs, "Bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid2][jID], InfoJugador[playerid2][jBolsillo][x]);
			format(grs, sizeof grs, "Cantidad_bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid2][jID], InfoJugador[playerid2][jBolsilloCant][x]);
		}
	}
	else if (tipo == 3)
	{
		format(string, sizeof string, "El jugador %s fue arrestado en la prision federal, razon: %s.", NombreRJugador(playerid2), reason);
		_MensajeOOC(0xAA3333FF, string);
		format(string, sizeof string, "Sancionador %s - Tiempo: %d minuto(s) - Jugador: %s", NombreRJugador(playerid), time, NombreRJugador(playerid2));
		MensajeAdmin3(string);
		QuitarManos(playerid2);
		new rand = random(sizeof(_PFp));
		SetPosEx(playerid2, _PFp[rand][0], _PFp[rand][1], _PFp[rand][2], 0.0, 0, 0, 1);
		CargarObjetos(playerid2);
		Esposado[playerid2] = 0; RemovePlayerAttachedObject(playerid2, 9);
		Loop(x, 9, 0)
		{
			if (InfoInventario[InfoJugador[playerid2][jBolsillo][x]][IDArma] > 0) { InfoJugador[playerid2][jBolsillo][x] = 0, InfoJugador[playerid2][jBolsilloCant][x] = 0; }
			if (InfoJugador[playerid2][jBolsillo][x] <= 49 && InfoJugador[playerid2][jBolsillo][x] >= 41) { InfoJugador[playerid2][jBolsillo][x] = 0, InfoJugador[playerid2][jBolsilloCant][x] = 0; }
			if (InfoJugador[playerid2][jBolsillo][x] <= 79 && InfoJugador[playerid2][jBolsillo][x] >= 74) { InfoJugador[playerid2][jBolsillo][x] = 0, InfoJugador[playerid2][jBolsilloCant][x] = 0; }
			new grs[32];
			format(grs, sizeof grs, "Bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid2][jID], InfoJugador[playerid2][jBolsillo][x]);
			format(grs, sizeof grs, "Cantidad_bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid2][jID], InfoJugador[playerid2][jBolsilloCant][x]);
		}
	}
	StopAudioStreamForPlayer(playerid2);
	return 1;
}

CMD:jail(playerid, params[])
{
	new string[256], time, playerid2, reason[100];
	if (InfoJugador[playerid][jAdmin] >= 1 || InfoJugador[playerid][jRestriccion][5] == 1)
	{
	    OnDuty
		if (sscanf(params, "uds[100]", playerid2, time, reason)) return _Mensaje(playerid, 3, "0", "/jail [id jugador] [minutos] [razon]");
		if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
		if (time < 1 || time > 200) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tiempo: 1 a 200 minutos."); return 1; }
		InfoJugador[playerid2][jEncarcelado] = 1;
		QuitarManos(playerid2);
		PlayerTextDrawShow(playerid2, TextTrabajo[playerid]);
		B_Telefono[playerid2] = 1;
		InfoJugador[playerid2][jTiempoCarcel] = time;
		new rand = random(sizeof(_OOCp));
		SetPosEx(playerid2, _OOCp[rand][0], _OOCp[rand][1], _OOCp[rand][2], _OOCp[rand][3], 2, playerid2, 1);
		TogglePlayerControllable(playerid2, true);
		SetPVarInt(playerid2, "Congelado", 1);
		format(string, sizeof string, "El jugador %s(%d) fue sancionado, razon: %s.", NombreRJugador(playerid2), playerid2, reason);
		_MensajeOOC(0xAA3333FF, string);
		format(string, sizeof string, "Sancionador %s - Tiempo: %d minuto(s) - Jugador: %s", NombreRJugador(playerid), time, NombreRJugador(playerid2));
		MensajeAdmin3(string);
		format(string, sizeof(string), "Fuiste sancionado por el administrador %s por incumplir alguna normativa.", NombreRJugador(playerid));
		SendClientMessage(playerid2, 0xb3c3acFF, string);
		format(string, sizeof(string), "Razon: %s - %d minuto(s).", reason, time);
		SendClientMessage(playerid2, 0xb3c3acFF, string);
		format(string, sizeof string, "{cccccc}?Desea registrar {00cc00}+1 {cccccc}sancion en el registro de cuenta de {FF0000}%s{cccccc}?\n\nEl usuario tiene {ff6000}%d {cccccc}sanciones, si aumentas esta tendria {ff6000}%d{cccccc}.", NombreRJugador(playerid2), InfoJugador[playerid2][jSanciones], InfoJugador[playerid2][jSanciones]+1);
		Dialog_Show(playerid, Show_Jail, DIALOG_STYLE_MSGBOX, "Administracion - Confirmacion", string, "Confirmar", "No");
		SetPVarInt(playerid, "PersonaID", playerid2);
		StopAudioStreamForPlayer(playerid2);
		alm(InfoJugador[playerid2][jSancionador], NombreRJugador(playerid));
		guardar_int_mysql("cuentas", "Encarcelado", InfoJugador[playerid2][jID], InfoJugador[playerid2][jEncarcelado]);
		guardar_int_mysql("cuentas", "TiempoCarcel", InfoJugador[playerid2][jID], InfoJugador[playerid2][jTiempoCarcel]);
		guardar_string_mysql("cuentas", "Sancionador", InfoJugador[playerid2][jID], InfoJugador[playerid2][jSancionador]);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Jail.");
	return 1;
}
CMD:sancionar(playerid, params[]) return cmd_jail(playerid, params);

Dialog:Show_Jail(playerid, response, listitem, inputtext[])
{
    new idjugador = GetPVarInt(playerid, "PersonaID"), string[210];
	if (!response)
	{
	    format(string, sizeof string, "* No agregaste +1 sancion a la cuenta del usuario.");
	    SendClientMessage(playerid, 0xccccccFF, string);
	    format(string, sizeof string, "* El administrador %s no te aumento +1 sancion a tu registro.", NombreRJugador(playerid));
	    SendClientMessage(idjugador, 0xccccccFF, string);
	}
	if(response)
	{
	    InfoJugador[idjugador][jSanciones] += 1;
	    guardar_int_mysql("cuentas", "Sanciones", InfoJugador[idjugador][jID], InfoJugador[idjugador][jSanciones]);
	    format(string, sizeof string, "Info: {FFFFFF}Se te aumento +1 sancion a tu cuenta, ahora tienes %d.", InfoJugador[idjugador][jSanciones]);
	    SendClientMessage(idjugador, 0xccccccFF, string);
	    format(string, sizeof string, "Info: {FFFFFF}Aumentaste +1 sanciones a %s, ahora tiene %d en su cuenta.", NombreRJugador(idjugador), InfoJugador[idjugador][jSanciones]);
	    SendClientMessage(playerid, 0xccccccFF, string);
	}
	return 1;
}

CMD:jailcuenta(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Jailcuenta.");
	OnDuty
	new string[256], name[MAX_PLAYER_NAME], minutes, playerid2;
	if (sscanf(params, "ud", playerid2, minutes)) return _Mensaje(playerid, 3, "0", "/jailcuenta [Nombre_Apellido] [Minutos]");
	if (IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador esta conectado.");
	if (sscanf(params, "s[24]d", name, minutes)) return _Mensaje(playerid, 3, "0", "/jailcuenta [Nombre_Apellido] [Minutos]");
	if (VerificarCuenta(name))
	{
		if (minutes < 1 || minutes > 200) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tiempo: 1 a 200 minutos."); return 1; }
		new jails, query[1028];
		reg_int(0, "Sanciones", jails);
		cache_unset_active();
		new rand = random(sizeof _OOCp);
		jails++;
		mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Encarcelado = 1, TiempoCarcel = '%d', Sanciones = '%d', PosicionX = '%f', PosicionY = '%f', PosicionZ = '%f', Interior = 2, VirtualWorld = 0 WHERE Nombre_Apellido = '%e'", minutes, jails, _OOCp[rand][0], _OOCp[rand][1], _OOCp[rand][2], name);
		mysql_tquery(DBngrp, query);
		format(string, sizeof string, "Sanciono a %s por  %d minuto(s) (offline)", name, minutes);
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 12);
		format(string, sizeof string, "Administracion: %s fue sancionado por %s. [CMD OFFLINE]", name, NombreRJugador(playerid));
		MensajeAdmin(string);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No existe esa cuenta.");
	return 1;
}
CMD:jailoff(playerid, params[]) return cmd_jailcuenta(playerid, params);
CMD:jailoffline(playerid, params[]) return cmd_jailcuenta(playerid, params);
CMD:sancionarcuenta(playerid, params[]) return cmd_jailcuenta(playerid, params);

access_detener(playerid)
{
	if (InfoJugador[playerid][jAbatido] == 1) return 1;
	if (GetPVarInt(playerid, "EnCrack") == 1) return 1;
	if (Esposado[playerid] == 1) return 1;
	return 0;
}

CMD:esposar(playerid, params[])
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/esposar [id jugador]");
	if (!IsPlayerConnectedEx(params[0])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (!CercaDelWeon(3.0, playerid, params[0])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no se encuentra cerca de ti.");
	if (InfoJugador[params[0]][jManoDerecha] == 131) return _Mensaje(playerid, 4, "b00000", "No puedes realizar este comando si el sujeto lleva una caja registradora.");
	if (Esposado[params[0]] == 0)
	{
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "esposa al sospechoso %s.", NombreJugador(params[0]));
		AccionesRol(playerid, 0, MsgCheckMe);
		GameTextForPlayer(params[0], "~r~Estas esposado", 2500, 3);
		Esposado[params[0]] = 1;
		SetPlayerSpecialAction(params[0], 24);
		TogglePlayerControllable(params[0],0);
		InfoJugador[playerid][jManoDerechaCant] = 0;
		ActualizarManos(playerid);
	}
	else
	{
		if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1; }
		if (InfoJugador[playerid][jManoDerecha] == 0)
		{
			PonerObjeto(playerid, 1, 73);
			InfoJugador[playerid][jManoDerecha] = 73, InfoJugador[playerid][jManoDerechaCant] = 1;
		}
		else if (InfoJugador[playerid][jManoIzquierda] == 0)
		{
			PonerObjeto(playerid, 2, 73);
			InfoJugador[playerid][jManoIzquierda] = 73, InfoJugador[playerid][jManoIzquierdaCant] = 1;
		}
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "desesposa a %s.", NombreJugador(params[0]));
		AccionesRol(playerid, 0, MsgCheckMe);
		GameTextForPlayer(params[0], "~g~Estas desesposado", 2500, 3);
		TogglePlayerControllable(params[0],1);
		Esposado[params[0]] = 0;
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
		ActualizarManos(playerid);
	}
	return 1;
}

access_cargos(playerid)
{
	if (InfoJugador[playerid][jAbatido] == 1) return 1;
	if (Esposado[playerid] == 1) return 1;
	if (InfoJugador[playerid][jEstrellas] != 0) return 1;
	return 0;
}

Sin_Cargos(playerid)
{
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jDutyPD] != 0)
	{
		SetPlayerMarkerForPlayer(playerid2, playerid, 0xFFFFFF00);
	}
}

CMD:liberarcargos(playerid, params[])
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	new playerid2, Float: pos[3], gformat[190];
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/liberarcargos [playerid]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador especificado invalido.");
	if (access_cargos(playerid2) == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no fue abatido/esposado/cargos.");
	if (!CercaDelWeon(4.0, playerid, playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Usted no esta lo suficientemente cerca del jugador!");
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	SetPlayerPosEx(playerid2, pos[0], pos[1], pos[2]);
	InfoJugador[playerid2][jEstrellas] = 0;
	Sin_Cargos(playerid2);
	InfoJugador[playerid2][jAbatido] = 0;
	InfoJugador[playerid2][jTiempoCarcel] = 0;
	InfoJugador[playerid2][jMinEstrellas] = 0;
	EliminarHerido(playerid2);
	DeletePVar(playerid2, "Congelado");
	TogglePlayerControllable(playerid2, true);
	PlayerTextDrawHide(playerid2, TextTrabajo[playerid2]);
	InfoJugador[playerid2][jEncarcelado] = 0;
	B_Telefono[playerid2] = 0;
	GameTextForPlayer(playerid2, "~g~Libre", 5000, 1);
	Set_Player_Wasted(playerid2, 0);
	guardar_int_mysql("cuentas", "Estrellas", InfoJugador[playerid2][jID], InfoJugador[playerid2][jEstrellas]);
	guardar_int_mysql("cuentas", "MinEstrellas", InfoJugador[playerid2][jID], InfoJugador[playerid2][jMinEstrellas]);
	guardar_int_mysql("cuentas", "Abatido", InfoJugador[playerid2][jID], InfoJugador[playerid2][jAbatido]);
	guardar_int_mysql("cuentas", "TiempoCarcel", InfoJugador[playerid2][jID], InfoJugador[playerid2][jTiempoCarcel]);
	guardar_int_mysql("cuentas", "Encarcelado", InfoJugador[playerid2][jID], InfoJugador[playerid2][jEncarcelado]);
	Esposado[playerid2] = 0;
	//
	_Limuerte(playerid2);
	InfoJugador[playerid2][jAlcohol] = 0; guardar_int_mysql("cuentas", "Alcohol", InfoJugador[playerid2][jID], 0);
	InfoJugador[playerid2][jMuerto] = 0; guardar_int_mysql("cuentas", "Muerto", InfoJugador[playerid2][jID], 0);
	EliminarHerido(playerid2);
	alm(QuienMato[playerid2], "Nadie");
	Dar_Vida(playerid2, 60);
	timer_muerte[playerid2] = 0;
	SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(playerid2, true);
	SetCameraBehindPlayer(playerid2);
	format(gformat, sizeof gformat, "CENTRAL: Oficial %s libero cargos a %s.", NombreJugador(playerid), NombreJugador(playerid2));
	SendRadioFaction(1, C_COLORPOLICIA, gformat);
	return 1;
}

CMD:arrestar(playerid, params[])
{
    if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes hacer esto en un vehiculo.");
	new playerid2, seat, carid = QuienManejo[playerid], Float: pos[6];
	if (carid == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No has subido a ningun vehiculo todavia.");
	if (sscanf(params, "dd", playerid2, seat)) return _Mensaje(playerid, 3, "0", "/detener [playerid] [Asiento 1-3]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador especificado invalido.");
	if (seat < 1 || seat > 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Asientos: 1 al 3.");
	if (Es_Banda(playerid2, 1, 2, 3)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes detener a esta persona (Es Del Cuepo de la Ley).");
	if (IsPlayerInAnyVehicle(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Esa persona esta en un vehiculo.");
	if (!CercaDelWeon(8.0, playerid, playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Usted no esta lo suficientemente cerca del jugador o de su coche!");
	if (playerid2 == playerid) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes hacer esto contigo mismo!");
	if (!IsSeatAvailable(carid, seat)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese asiento no esta disponible!");
	if (access_detener(playerid2) == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no fue abatido o esta herido.");
	//herido
	InfoJugador[playerid2][jAbatido] = 1;
	guardar_int_mysql("cuentas", "Abatido", InfoJugador[playerid2][jID], InfoJugador[playerid2][jAbatido]);
	_Limuerte(playerid2);
	InfoJugador[playerid2][jAlcohol] = 0; guardar_int_mysql("cuentas", "Alcohol", InfoJugador[playerid2][jID], 0);
	InfoJugador[playerid2][jMuerto] = 0; guardar_int_mysql("cuentas", "Muerto", InfoJugador[playerid2][jID], 0);
	EliminarHerido(playerid2);
	alm(QuienMato[playerid2], "Nadie");
	Dar_Vida(playerid2, 60);
	timer_muerte[playerid2] = 0;
	//
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerPos(playerid2, pos[3], pos[4], pos[5]);
	GetVehiclePos(carid, pos[0], pos[1], pos[2]);
	if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 && floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 && floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
	new MsgCheckMe[MAX_TEXT_CHAT];
	format(MsgCheckMe, sizeof(MsgCheckMe), "sube al abatido %s dentro del vehiculo.", NombreJugador(playerid2));
	AccionesRol(playerid, 0, MsgCheckMe);
	GameTextForPlayer(playerid2, "~r~Detenido", 2500, 3);
	ClearAnimations(playerid2);
	TogglePlayerControllable(playerid2, false);
	PutPlayerInVehicleEx(playerid2, carid, seat);
	return 1;
}

CMD:bloquearreportes(playerid, params[]) {
    if (InfoJugador[playerid][jAdmin] >= 3) {
        OnDuty
        new string[128], playerid2;
        if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/bloquearreportes [id jugador]");
        if (ReporteB[playerid2] == 0) {
            format(string, sizeof string, "Administracion: %s [ID:%i] bloqueo el canal de reportes a %s (ID: %i).", NombreRJugador(playerid), playerid, NombreRJugador(playerid2), playerid2);
            MensajeAdmin(string);
            format(string, sizeof string, "* %s te ha bloqueado el canal de reportes por mal uso.", NombreRJugador(playerid));
            _Mensaje(playerid2, 4, "33CCFF", string);
            ReporteA[playerid2] = 0;
            ReporteT[playerid2] = "Nada";
            ReporteB[playerid2] = 1;
            return 1;
        } else {
            format(string, sizeof string, "Administracion: %s [ID:%i] desbloqueo el canal de reportes a %s (ID: %i).", NombreRJugador(playerid), playerid, NombreRJugador(playerid2), playerid2);
            MensajeAdmin(string);
            format(string, sizeof string, "* %s te ha desbloqueado el canal de reportes. Utilizelo bien esta vez.", NombreRJugador(playerid));
            _Mensaje(playerid2, 4, "33CCFF", string);
            ReporteA[playerid2] = 0;
            ReporteT[playerid2] = "Nada";
            ReporteB[playerid2] = 0;
        }
    } else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Bloquearreportes.");
    return 1;
}

CMD:unbanip(playerid, params[])
{
    if (InfoJugador[playerid][jAdmin] >= 3 || InfoJugador[playerid][jEncargado][3] == 1)
	{
	    OnDuty
		if (isnull(params)) return _Mensaje(playerid, 3, "0", "/desbanip [ip]");
		if (IsValidIP(params)) return SendClientMessage(playerid, 0xccccccFF, "Esa IP no es valida, intenta de nuevo.");
	    if (CheckBan(params))
	    {
			new query2[160], string[256];
			new Cache:result;
			mysql_format(DBngrp, query2, sizeof query2, "SELECT * FROM ips WHERE IP = '%s'", params);
			result = mysql_query(DBngrp, query2);
			new id, admin[24], razon[256], none[6] = "none";
			reg_int(0, "ID", id);
			reg_string(0, "Admin", admin, 24);
			reg_string(0, "Razon", razon, 256);
			new query[350];
			mysql_format(DBngrp, query, sizeof query, "UPDATE ips SET IP = '%s', Admin = '%e', Fecha = '%e', Razon = '%e' WHERE ID = '%d'", none, none, none, none, id);
			mysql_tquery(DBngrp, query);
			format(string, sizeof string, "[Adm-Warning] %s(%d) desbloqueo la IP %s. (admin bloq: %s)", NombreRJugador(playerid), playerid, params, admin);
			SendAdminMessage(0xFF6347FF, string);
			format(string, sizeof string, "Desbaneo a %s. (admin bloq: %s)", params, admin);
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 13);
			cache_delete(result);
			return 1;
		}
	}
    return 1;
}
CMD:desbanip(playerid, params[]) return cmd_unbanip(playerid, params);
CMD:desbanearip(playerid, params[]) return cmd_unbanip(playerid, params);
CMD:desbloquearip(playerid, params[]) return cmd_unbanip(playerid, params);

CMD:unban(playerid, params[])
{
    if (InfoJugador[playerid][jAdmin] >= 3 || InfoJugador[playerid][jEncargado][3] == 1 || InfoJugador[playerid][jRestriccion][7] == 1)
	{
	    OnDuty
        if (isnull(params)) return _Mensaje(playerid, 3, "0", "/unban [Nombre_Apellido]");
		if (VerificarCuenta(params))
		{
			new idban, gformat[1028], string[190], nune[12] = "none";
			reg_int(0, "Baneado", idban);
			cache_unset_active();
			if (idban == 0) return SendClientMessageEx(playerid, -1, "%s no esta baneado/bloqueado.", params);
			mysql_format(DBngrp, gformat, sizeof gformat, "UPDATE cuentas SET Baneado = 0, Ban_c = '%e', Ban_r = '%e', Ban_m = '%e', JuegaleOwo = 0 WHERE Nombre_Apellido = '%e'", nune, nune, nune, params);
			mysql_tquery(DBngrp, gformat);
            format(string, sizeof string, "Administracion: %s fue desbloqueado por %s.", params, NombreRJugador(playerid));
            MensajeAdmin(string);
            format(string, sizeof string, "Desbaneo a %s.", params);
            new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 13);
			return 1;
		}
		ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No existe esa cuenta.");
	}
	return 1;
}
CMD:desban(playerid, params[]) return cmd_unban(playerid, params);
CMD:desbanear(playerid, params[]) return cmd_unban(playerid, params);
CMD:desbanearcuenta(playerid, params[]) return cmd_unban(playerid, params);

CMD:obanear(playerid, params[])
{
	if( InfoJugador[playerid][jEncargado][3] != 1) return _Mensaje(playerid, 3, "0", "no eres encargado de bloqueos.");
	if (InfoJugador[playerid][jAdmin] >= 3 || InfoJugador[playerid][jRestriccion][3] == 1)
	{
	    OnDuty
		new string[256], playername[MAX_PLAYER_NAME], reason[64];
		if (sscanf(params, "s[32]s[128]", playername, reason)) return _Mensaje(playerid, 3, "0", "/obanear [Nombre_Apellido] [razon]");
		if (VerificarCuenta(playername))
		{
			new idban, gformat[1028];
			reg_int(0, "Baneado", idban);
			cache_unset_active();
			if (idban != 0) return SendClientMessageEx(playerid, -1, "%s ya esta baneado/bloqueado.", playername);
			mysql_format(DBngrp, gformat, sizeof gformat, "UPDATE cuentas SET Baneado = 20, Ban_c = '%e', Ban_r = '%e', Ban_m = '%e', JuegaleOwo = 0 WHERE Nombre_Apellido = '%e'", NombreRJugador(playerid), reason, FechaHoy(), playername);
			mysql_tquery(DBngrp, gformat);
			format(string, sizeof string, "Baneo a %s. Razon: %s. (offline)", playername, reason);
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 14);
			format(string, sizeof string, "El jugador %s ha sido bloqueado por %s, Razon:[%s] (OFFLINE)", playername, NombreRJugador(playerid), reason);
			_MensajeOOC(0xFF6347FF, string);
			return 1;
		}
		ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No existe esa cuenta.");
	}
	return 1;
}
CMD:bancuenta(playerid, params[]) return cmd_obanear(playerid, params);
CMD:banearcuenta(playerid, params[]) return cmd_obanear(playerid, params);

CMD:banear(playerid, params[])
{
	if( InfoJugador[playerid][jEncargado][3] != 1) return _Mensaje(playerid, 3, "0", "no eres encargado de bloqueos.");
	if (InfoJugador[playerid][jAdmin] >= 3)
	{
	    OnDuty
		new string[256], playerid2, reason[128];
		if (sscanf(params, "ds[128]", playerid2, reason)) return _Mensaje(playerid, 3, "0", "/banear [id jugador] [razon]");
		if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
		if (InfoJugador[playerid2][jAdmin] > InfoJugador[playerid][jAdmin])
		{
			format(string, sizeof string, "{FF6347}Administracion: %s ha sido auto-baneado. Razon: [Intentar banear un staff]", NombreRJugador(playerid));
			MensajeAdmin(string);
			InfoJugador[playerid][jBaneado] = 20;
			guardar_int_mysql("cuentas", "JuegaleOwo", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_1", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_2", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_3", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_4", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_5", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_6", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_7", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Baneado", InfoJugador[playerid][jID], 20);
			guardar_string_mysql("cuentas", "Ban_m", InfoJugador[playerid][jID], FechaHoy());
			guardar_string_mysql("cuentas", "Ban_c", InfoJugador[playerid][jID], "Server");
			guardar_string_mysql("cuentas", "Ban_r", InfoJugador[playerid][jID], "Intento banear staff");
			Kick(playerid);
			return 1;
		}
		else
		{
			format(string, sizeof string, "Baneo a %s. Razon: %s", NombreRJugador(playerid2), reason);
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 14);
			format(string, sizeof string, "El jugador %s ha sido bloqueado por %s, Razon:[%s]", NombreRJugador(playerid2), NombreRJugador(playerid), reason);
			_MensajeOOC(0xAA3333FF, string);
			GetPlayerIp(playerid2, Ip, 18);
			format(string, sizeof(string), "{ffba00}[A] IP del jugador: %s | IP registrada en la DB: %s", Ip, InfoJugador[playerid2][jIP]);
			MensajeAdmin(string);
			guardar_int_mysql("cuentas", "Baneado", InfoJugador[playerid2][jID], 20);
			guardar_string_mysql("cuentas", "Ban_m", InfoJugador[playerid2][jID], FechaHoy());
			guardar_string_mysql("cuentas", "Ban_c", InfoJugador[playerid2][jID], NombreRJugador(playerid));
			guardar_string_mysql("cuentas", "Ban_r", InfoJugador[playerid2][jID], reason);
			guardar_int_mysql("cuentas", "JuegaleOwo", InfoJugador[playerid2][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_1", InfoJugador[playerid2][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_2", InfoJugador[playerid2][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_3", InfoJugador[playerid2][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_4", InfoJugador[playerid2][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_5", InfoJugador[playerid2][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_6", InfoJugador[playerid2][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_7", InfoJugador[playerid2][jID], 0);
			_Expulsar(playerid2, 0, reason);
		}
	}
	return 1;
}
CMD:ban(playerid, params[]) return cmd_banear(playerid, params);
CMD:banearo(playerid, params[]) return cmd_banear(playerid, params);
CMD:bloquear(playerid, params[]) return cmd_banear(playerid, params);

CMD:banip(playerid, params[])
{
	if( InfoJugador[playerid][jEncargado][3] != 1) return _Mensaje(playerid, 3, "0", "no eres encargado de bloqueos.");
	if (InfoJugador[playerid][jAdmin] >= 3)
	{
	    OnDuty
		new string[256], playerid2, reason[128];
		if (sscanf(params, "ds[128]", playerid2, reason)) return _Mensaje(playerid, 3, "0", "/banearip [id jugador] [razon]");
		if (!IsPlayerConnected(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
		if (InfoJugador[playerid2][jAdmin] > InfoJugador[playerid][jAdmin])
		{
			format(string, sizeof string, "{FF6347}Administracion: %s ha sido auto-baneado. Razon: [Intentar banear un staff]", NombreRJugador(playerid));
			MensajeAdmin(string);
			InfoJugador[playerid][jBaneado] = 20;
			guardar_int_mysql("cuentas", "JuegaleOwo", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_1", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_2", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_3", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_4", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_5", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_6", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_7", InfoJugador[playerid][jID], 0);
			guardar_int_mysql("cuentas", "Baneado", InfoJugador[playerid][jID], 20);
			guardar_string_mysql("cuentas", "Ban_m", InfoJugador[playerid][jID], FechaHoy());
			guardar_string_mysql("cuentas", "Ban_c", InfoJugador[playerid][jID], "Server");
			guardar_string_mysql("cuentas", "Ban_r", InfoJugador[playerid][jID], "Intento banearip staff");
			Kick(playerid);
			return 1;
		}
		else
		{
			InfoJugador[playerid2][jBaneado] = 20;
			format(string, sizeof string, "El jugador %s ha sido baneado por %s, Razon:%s", NombreRJugador(playerid2), NombreRJugador(playerid), reason);
			_MensajeOOC(0xFF6347FF, string);
			format(string, sizeof string, "Baneo a %s. Razon: %s", NombreRJugador(playerid2), reason);
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 14);
			GetPlayerIp(playerid, Ip, 18);
			format(string, sizeof(string), "{ffba00}[A] IP del jugador: %s | IP registrada en la DB: %s", Ip, InfoJugador[playerid][jIP]);
			MensajeAdmin(string);
			//register ban ip
			new playerip[18];
			GetPlayerIp(playerid2, playerip, sizeof playerip);
			AddBan(playerip, InfoJugador[playerid][jNombre_Apellido], reason);
			guardar_int_mysql("cuentas", "Baneado", InfoJugador[playerid2][jID], 20);
			guardar_string_mysql("cuentas", "Ban_m", InfoJugador[playerid2][jID], FechaHoy());
			guardar_string_mysql("cuentas", "Ban_c", InfoJugador[playerid2][jID], NombreRJugador(playerid));
			guardar_string_mysql("cuentas", "Ban_r", InfoJugador[playerid2][jID], reason);
			guardar_int_mysql("cuentas", "JuegaleOwo", InfoJugador[playerid2][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_1", InfoJugador[playerid2][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_2", InfoJugador[playerid2][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_3", InfoJugador[playerid2][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_4", InfoJugador[playerid2][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_5", InfoJugador[playerid2][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_6", InfoJugador[playerid2][jID], 0);
			guardar_int_mysql("cuentas", "Encargado_7", InfoJugador[playerid2][jID], 0);
			_Expulsar(playerid2, 0, reason);
			BanEx(playerid2, reason);
		}
	}
	return 1;
}
CMD:banearip(playerid, params[]) return cmd_banip(playerid, params);

CMD:verip(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] >= 3 || InfoJugador[playerid][jEncargado][3] == 1) {
	    OnDuty
		new string[128], ip[32];
		if(sscanf(params, "i", params[0])) return _Mensaje(playerid, 3, "0", "/verip [id jugador]");
		if(!IsPlayerConnectedEx(params[0])) return SendClientMessage(playerid, -1, "Jugador desconectado.");
		if(InfoJugador[params[0]][jAdmin] == 11 || InfoJugador[params[0]][jAdmin] > InfoJugador[playerid][jAdmin]) return SendClientMessageEx(playerid, -1, "No puedes ver la ip del admin %s.", InfoJugador[params[0]][jNombre_Apellido]);
		GetPlayerIp(params[0], ip, 32);
		format(string, sizeof string, "  IP de %s es: %s", NombreRJugador(params[0]), ip);
		_Mensaje(playerid, 4, "FFFFFF", string);
	}
	return 1;
}

CMD:addblacklist(playerid, params[])
{
    if (InfoJugador[playerid][jAdmin] >= 5 || InfoJugador[playerid][jEncargado][3] == 1)
	{
	    OnDuty
	    new string[210], tipo[24];
	    if (sscanf(params, "s[24]S()[128]", tipo, string))
	 	{
		 	_Mensaje(playerid, 3, "0", "/addblacklist [opcion]");
		    SendClientMessage(playerid, 0xFFFF00FF, "[Opciones]:{FFFFFF} conectado, desconectado.");
			return 1;
		}
		if (!strcmp(tipo, "conectado", true))
		{
		    new idjugador, razon[120];

			if (sscanf(string, "ds[120]", idjugador, razon))
 				return _Mensaje(playerid, 3, "0", "/addblacklist conectado [id jugador] [razon]");

            if (CheckBlackList(InfoJugador[idjugador][jNombre_Apellido]) != 0) return SendClientMessage(playerid, 0xccccccff, "* Ese jugador ya se encuentra en la blacklist.");
            if(!IsPlayerConnectedEx(idjugador)) return SendClientMessage(playerid, 0xccccccFF, "* Jugador desconectado.");
            format(string, sizeof string, "Administracion: %s(%d) agrego a %s(%d) a la blacklist '%s'.", NombreRJugador(playerid), playerid, NombreRJugador(idjugador), idjugador, razon);
            MensajeAdmin(string);
            new query[1028], ip[35];
            GetPlayerIp(playerid, ip, 35);
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `blacklist` (`Nombre_Apellido`, `IP`, `Responsable`, `Razon`) VALUES ('%e', '%e', '%e', '%e')", InfoJugador[idjugador][jNombre_Apellido], ip, InfoJugador[playerid][jNombre_Apellido], razon);
			mysql_tquery(DBngrp, query);
		}
		else if (!strcmp(tipo, "desconectado", true))
		{
		    new nombre[35], razon[120];

			if (sscanf(string, "s[35]s[120]", nombre, razon))
 				return _Mensaje(playerid, 3, "0", "/addblacklist desconectado [nombre_apellido] [razon]");

            if (CheckBlackList(nombre) != 0) return SendClientMessage(playerid, 0xccccccff, "* Ese jugador ya se encuentra en la blacklist.");
            if (VerificarCuenta(nombre))
			{
	            format(string, sizeof string, "Administracion: %s(%d) agrego a %s a la blacklist '%s'.", NombreRJugador(playerid), playerid, nombre, razon);
	            MensajeAdmin(string);
	            new query[1028];
				mysql_format(DBngrp, query, sizeof query, "INSERT INTO `blacklist` (`Nombre_Apellido`, `IP`, `Responsable`, `Razon`) VALUES ('%e', 'Desconectado', '%e', '%e')", nombre, InfoJugador[playerid][jNombre_Apellido], razon);
				mysql_tquery(DBngrp, query);
			}
			else SendClientMessage(playerid, 0xccccccFF, "* La cuenta ingresada no esta registrada.");
		}
		return 1;
	}
	return 1;
}

CMD:removebl(playerid, params[])
{
    if (InfoJugador[playerid][jAdmin] >= 5 || InfoJugador[playerid][jEncargado][3] == 1)
	{
	    OnDuty
		if (isnull(params)) return _Mensaje(playerid, 3, "0", "/desbanip [nombre_apellido]");
		if (!VerificarCuenta(params)) return SendClientMessage(playerid, 0xccccccFF, "* La cuenta ingresada no esta registrada.");
	    if (CheckBlackList(params))
	    {
			new query2[160], string[256];
			new Cache:result;
			mysql_format(DBngrp, query2, sizeof query2, "SELECT * FROM blacklist WHERE Nombre_Apellido = '%s'", params);
			result = mysql_query(DBngrp, query2);
			new id, admin[24], razon[256], none[6] = "none";
			reg_int(0, "ID", id);
			reg_string(0, "Responsable", admin, 24);
			reg_string(0, "Razon", razon, 256);
			new query[350];
			mysql_format(DBngrp, query, sizeof query, "UPDATE blacklist SET Nombre_Apellido = '%s', IP = '%s', Responsable = '%s', Razon = '%s' WHERE ID = '%d'", none, none, none, none, id);
			mysql_tquery(DBngrp, query);
			format(string, sizeof string, "[Adm-Warning] %s(%d) retiro a %s de la blacklist. (admin add: %s)", NombreRJugador(playerid), playerid, params, admin);
			SendAdminMessage(0xFF6347FF, string);
			cache_delete(result);
			return 1;
		}
		else SendClientMessage(playerid, 0xccccccFF, "* La cuenta ingresada no esta registrada en la blacklist.");
	}
    return 1;
}

CMD:blacklist(playerid, params[])
{
    if (InfoJugador[playerid][jAdmin] >= 5 || InfoJugador[playerid][jEncargado][3] == 1)
	{
	    OnDuty
	    mysql_tquery(DBngrp, "SELECT * FROM `blacklist` ORDER BY `ID` ASC LIMIT 50", "ListaNegra", "d", playerid);
	}
	return 1;
}

forward ListaNegra(playerid);
public ListaNegra(playerid)
{
	new gformat[256], dialog[4072], jugadores = 0, string[210];
	format(gformat, sizeof gformat, "Nombre\tIP\tResponsable\tRazon\n");
	strcat(dialog, gformat);
	Loop(player, cache_num_rows(), 0)
	{
		new personaje[24], playerip[50], responsable[50], razon[120];
		reg_string(player, "Nombre_Apellido", personaje, 24);
		reg_string(player, "IP", playerip, 50);
		reg_string(player, "Responsable", responsable, 50);
		reg_string(player, "Razon", razon, 120);
		format(gformat, sizeof gformat, "{9F9F9F}%s\t{9F9F9F}%s\t{9F9F9F}%s\t{FFC800}%s\n", personaje, playerip, responsable, razon);
		strcat(dialog, gformat);
		jugadores++;
	}
	if(jugadores == 0) return SendClientMessage(playerid, 0xccccccFF, "* No hay registros en la blacklist del servidor.");
	else
	{
	    format(string, sizeof string, "BlackList registrados ({FF0000}%d{cccccc})", jugadores);
		Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_TABLIST_HEADERS, string, dialog, "Cerrar", "");
	}
	return 1;
}

CMD:fip(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] >= 3 || InfoJugador[playerid][jEncargado][3] == 1)
	{
	    OnDuty
		new string[210];
		if(sscanf(params, "s[32]", params)) return _Mensaje(playerid, 3, "0", "/fip [ip]");
		mysql_format(DBngrp, string, sizeof string, "SELECT * FROM cuentas WHERE IP = '%s'", params);
		mysql_tquery(DBngrp, string, "VerificarIPs", "ds", playerid, params);
	}
	return 1;
}

forward VerificarIPs(playerid, ip[]);
public VerificarIPs(playerid, ip[])
{
	new cuentas = 0, gformat[512], dialog[4096], string[210];
	Loop(player, cache_num_rows(), 0)
	{
		new nombreapellido[32], playerip[32], oNivel, newid = -1;
		reg_string(player, "Nombre_Apellido", nombreapellido, 32);
		reg_string(player, "IP", playerip, 32);
		reg_int(player, "Nivel", oNivel);
		foreach(Player, juegador) if (IsPlayerConnectedEx(juegador) && !strcmp(InfoJugador[juegador][jNombre_Apellido], nombreapellido, true)) { newid = juegador; }
		if (IsPlayerConnectedEx(newid)) format(gformat, sizeof gformat, "%s | %s (Nivel %d) | {29B311}Conectado (ID: %d)\n", nombreapellido, playerip, oNivel, newid);
		else format(gformat, sizeof gformat, "%s | %s (Nivel %d) | {E24D32}Desconectado\n", nombreapellido, playerip, oNivel);
		strcat(dialog, gformat);
		format(gformat, sizeof gformat, "Miembro_List%d", cuentas);
		SetPVarString(playerid, gformat, nombreapellido);
		cuentas++;
	}
	if (cuentas == 0) return Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, "Administracion", "{FFFFFF}No se encontraron cuentas con esta IP.", "Cerrar", "");
	else
	{
	    format(string, sizeof string, "{00cc00}%d {FFFFFF}IPs de acceso identicas - Administracion", cuentas);
		Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, string, dialog, "Cerrar", "");
	}
	return 1;
}

CMD:bloquearip(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] >= 3 || InfoJugador[playerid][jEncargado][3] == 1)
	{
	    OnDuty
		new ip[18], reason[64], string[190];
		if (sscanf(params, "s[18]s[64]", ip, reason)) return _Mensaje(playerid, 3, "0", "/bloquearip [ip] [razon]");
		if (IsValidIP(ip)) return SendClientMessage(playerid, 0xccccccff, "Esa IP no es valida, intenta de nuevo.");
		if (CheckBan(ip) != 0) return SendClientMessage(playerid, 0xccccccff, "* Esa IP ya se encuentra bloqueda.");
		format(string, sizeof string, "[Adm-Warning] %s(%d) bloqueo la IP %s. Razon: %s", InfoJugador[playerid][jNombre_Apellido], playerid, ip, reason);
		SendAdminMessage(0xFF6347FF, string);
		//register ban ip
		AddBan(ip, InfoJugador[playerid][jNombre_Apellido], reason);
	}
	return 1;
}
CMD:kick(playerid, params[]) {
	new string[256], playerid2, reason[128];
    if (InfoJugador[playerid][jAdmin] >= 1 || InfoJugador[playerid][jRestriccion][6] == 1) {
        OnDuty
		if (sscanf(params, "ds[128]", playerid2, reason)) return _Mensaje(playerid, 3, "0", "/kick [id jugador] [razon]");
		if (!IsPlayerConnected(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
		if (InfoJugador[playerid2][jAdmin] >= InfoJugador[playerid][jAdmin]) {
			return _Mensaje(playerid2, 4, "b00000", "No puedes expulsar un staff superior.");
		} else {
			format(string, sizeof string, "Expulso del server a %s. Razon %s", NombreRJugador(playerid2), reason);
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 14);

			format(string, sizeof string, "El jugador %s fue expulsado por %s, Razon:[%s]", NombreRJugador(playerid2), NombreRJugador(playerid), reason);
			_MensajeOOC(0xAA3333FF, string);

			format(string, sizeof string, "%s", reason);
			_Expulsar(playerid2, 0, string);
		}
	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Kick.");
	return 1;
}

funcion TimerKICK(playerid) Kick(playerid);

CMD:entregar(playerid, params[])
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (!en_punto_arresto(playerid)) return ShowInfoForPlayer(playerid, "No estas en el lugar de arresto.", 2000);
	new moneys, time, bail, bailprice, suspect;
	if (sscanf(params, "d", suspect)) return _Mensaje(playerid, 3, "0", "/arrestar [id jugador]");
	if (!IsPlayerConnectedEx(suspect)) return ShowInfoForPlayer(playerid, "Ese jugador no esta conectado.", 2000);
	if (!CercaDelWeon(5.0, playerid, suspect)) return ShowInfoForPlayer(playerid, "El jugador no se encuentra cerca de ti.", 2000);
	moneys = 5000;
	time = InfoJugador[suspect][jEstrellas] * 5;
	bail= 0;
	bailprice = 0;
	if (InfoJugador[suspect][jEstrellas] < 1) { ShowInfoForPlayer(playerid, "El sospechoso debe tener un nivel de busqueda de al menos una estrella.", 2000); return 1; }
	Set_Wasted_Player(suspect, time, moneys, bail, bailprice, 1);
	GivePlayerCash(playerid, 3000, "arrestar");
	SendClientMessage(playerid, 0x1EB032FF, "* Recibiste $3.000 por generar un arresto a la ciudad.");
	return 1;
}

Set_Wasted_Player(playerid, time, moneys, bail, bailprice, arrested)
{
	new string[128], rand;
	GivePlayerCash(playerid, -moneys, "arresto"); DineroEstado += moneys;
	GameTextForPlayer(playerid, "Fuiste arrestado", 5000, 5);
	QuitarArmas(playerid);
	TimerTiempoCarcel[playerid] = time*60;
	ResetPlayerWeapons(playerid);
	ActualizarArmas(playerid);
	InfoJugador[playerid][jTiempoCarcel] = time;
	DeletePVar(playerid, "Congelado");
	rand = random(sizeof(_COMISARIAp));
	SetPosEx(playerid, _COMISARIAp[rand][0], _COMISARIAp[rand][1], _COMISARIAp[rand][2], 0, 10, 1, 1);
	CargarObjetos(playerid);
	InfoJugador[playerid][jEncarcelado] = 2; B_Telefono[playerid] = 1;
	InfoJugador[playerid][jArrestos] += 1; InfoJugador[playerid][jEstrellas] = 0;
	InfoJugador[playerid][jAbatido] = 0; InfoJugador[playerid][jMinEstrellas] = 0;
	Sin_Cargos(playerid);
	Set_Player_Wasted(playerid, 0);
	Esposado[playerid] = 0; RemovePlayerAttachedObject(playerid, 3);
	ClearAnimations(playerid, 1);
	Loop(x, 9, 0)
	{
		if (InfoInventario[InfoJugador[playerid][jBolsillo][x]][IDArma] > 0) { InfoJugador[playerid][jBolsillo][x] = 0, InfoJugador[playerid][jBolsilloCant][x] = 0; }
		if (InfoJugador[playerid][jBolsillo][x] <= 49 && InfoJugador[playerid][jBolsillo][x] >= 41) { InfoJugador[playerid][jBolsillo][x] = 0, InfoJugador[playerid][jBolsilloCant][x] = 0; }
		if (InfoJugador[playerid][jBolsillo][x] <= 79 && InfoJugador[playerid][jBolsillo][x] >= 74) { InfoJugador[playerid][jBolsillo][x] = 0, InfoJugador[playerid][jBolsilloCant][x] = 0; }
		new grs[32];
		format(grs, sizeof grs, "Bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid][jID], InfoJugador[playerid][jBolsillo][x]);
		format(grs, sizeof grs, "Cantidad_bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid][jID], InfoJugador[playerid][jBolsilloCant][x]);
	}
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	format(string, sizeof string, "[CNN] %s ha sido encarcelado en la prision de SAPD por %d semanas.",NombreRJugador(playerid), time);
	_MensajeSAN(0x00A476FF, string);
	if (arrested != 0)
	{
		if (bail == 1)
		{
			InfoJugador[playerid][jFianza] = bailprice;
			format(string, sizeof string, "Fuiste encarcelado %d minutos - Fianza: $%d", InfoJugador[playerid][jTiempoCarcel], InfoJugador[playerid][jFianza]);
			_Mensaje(playerid, 4, "33CCFF", string);
		}
		else
		{
			InfoJugador[playerid][jFianza] = 0;
			format(string, sizeof string, "Fuiste encarcelado %d minutos - Fianza: No disponible", InfoJugador[playerid][jTiempoCarcel]);
			_Mensaje(playerid, 4, "33CCFF", string);
		}
	}
	guardar_int_mysql("cuentas", "Encarcelado", InfoJugador[playerid][jID], InfoJugador[playerid][jEncarcelado]);
	guardar_int_mysql("cuentas", "TiempoCarcel", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempoCarcel]);
	guardar_string_mysql("cuentas", "Sancionador", InfoJugador[playerid][jID], InfoJugador[playerid][jSancionador]);
	guardar_int_mysql("cuentas", "Arrestos", InfoJugador[playerid][jID], InfoJugador[playerid][jArrestos]);
	guardar_int_mysql("cuentas", "Estrellas", InfoJugador[playerid][jID], InfoJugador[playerid][jEstrellas]);
	guardar_int_mysql("cuentas", "MinEstrellas", InfoJugador[playerid][jID], InfoJugador[playerid][jMinEstrellas]);
	guardar_int_mysql("cuentas", "Fianza", InfoJugador[playerid][jID], InfoJugador[playerid][jFianza]);
	guardar_int_mysql("cuentas", "Abatido", InfoJugador[playerid][jID], InfoJugador[playerid][jAbatido]);
}


CMD:limpiar(playerid, params[])
{
    if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	new string[260], playerid2, opcion, ex_faccion[12];
	switch (InfoJugador[playerid][jFacMiembro])
	{
		case 1: alm(ex_faccion, "(LAPD)");
		case 6: alm(ex_faccion, "(GN)");
	}
    if (sscanf(params, "ud", playerid2, opcion))
	{
		_Mensaje(playerid, 3, "0", "/limpiar [id jugador] [opcion]");
		_Mensaje(playerid, 1, "(0) Nivel de busqueda - (1) Antecedentes - (2) Todo", "Opciones:");
		return 1;
	}
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	switch (opcion)
	{
		case 0:
		{
			InfoJugador[playerid2][jEstrellas] = 0;
			Sin_Cargos(playerid2);
			guardar_int_mysql("cuentas", "Estrellas", InfoJugador[playerid2][jID], InfoJugador[playerid2][jEstrellas]);
			InfoJugador[playerid2][jMinEstrellas] = 0;
			guardar_int_mysql("cuentas", "MinEstrellas", InfoJugador[playerid2][jID], InfoJugador[playerid2][jMinEstrellas]);
			Set_Player_Wasted(playerid2, 0);
			SendClientMessageEx(playerid, 0x00C200FF, "%s te quito el nivel de busqueda.", NombreJugador(playerid));
			format(string, sizeof string, "CENTRAL: %s de %s removio del sistema el nivel de busqueda de %s.", NombreJugador(playerid), ex_faccion, NombreJugador(playerid2));
			SendMessageFaction(C_COLORRADIO, string, 1, 2, 3);
		}
		case 1:
		{
			alm(InfoJugador[playerid2][jRazonDelito1], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito2], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito3], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito4], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito5], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito6], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito7], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito8], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito9], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito10], "Ninguno");
			InfoJugador[playerid2][jEstrellas] = 0;
			Sin_Cargos(playerid2);
			InfoJugador[playerid2][jMinEstrellas] = 0;
			alm(InfoJugador[playerid2][jQuienPuso], "Nadie");
			guardar_int_mysql("cuentas", "Estrellas", InfoJugador[playerid2][jID], InfoJugador[playerid2][jEstrellas]);
			guardar_int_mysql("cuentas", "MinEstrellas", InfoJugador[playerid2][jID], InfoJugador[playerid2][jMinEstrellas]);
			guardar_string_mysql("cuentas", "QuienPuso", InfoJugador[playerid2][jID], InfoJugador[playerid2][jQuienPuso]);
			Loop(x, 10, 0)
			{
			    InfoJugador[playerid2][jDelito][x] = 0;
				new gds[32];
				format(gds, sizeof gds, "Delito%d", x+1);
				guardar_int_mysql("cuentas", gds, InfoJugador[playerid2][jID], 0);
				format(gds, sizeof gds, "DelitoRazon%d", x+1);
				guardar_string_mysql("cuentas", gds, InfoJugador[playerid2][jID], "Ninguno");
			}
			Set_Player_Wasted(playerid2, 0);
			SendClientMessageEx(playerid, 0x00C200FF, "%s te limpio todos los cargos.", NombreJugador(playerid));
			format(string, sizeof string, "CENTRAL: %s de %s removio del sistema todos los cargos de %s.", NombreJugador(playerid), ex_faccion, NombreJugador(playerid2));
			SendMessageFaction(C_COLORRADIO, string, 1, 2, 3);
		}
		case 2:
		{
			alm(InfoJugador[playerid2][jRazonDelito1], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito2], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito3], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito4], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito5], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito6], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito7], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito8], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito9], "Ninguno");
			alm(InfoJugador[playerid2][jRazonDelito10], "Ninguno");
			Loop(x, 10, 0)
			{
				InfoJugador[playerid2][jDelito][x] = 0;
				new gds[32];
				format(gds, sizeof gds, "Delito%d", x+1);
				guardar_int_mysql("cuentas", gds, InfoJugador[playerid2][jID], 0);
				format(gds, sizeof gds, "DelitoRazon%d", x+1);
				guardar_string_mysql("cuentas", gds, InfoJugador[playerid2][jID], "Ninguno");
			}
			SendClientMessageEx(playerid, 0x00C200FF, "%s te removio todos los antecedentes.", NombreJugador(playerid));
			format(string, sizeof string, "CENTRAL: %s de %s removio del sistema todos los antecedentes %s.", NombreJugador(playerid), ex_faccion, NombreJugador(playerid2));
            SendMessageFaction(C_COLORRADIO, string, 1, 2, 3);
		}
	}
	return 1;
}

CMD:ant(playerid, params[])
{
	new playerid2, reason[32];

	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	

	if (sscanf(params, "ds[32]", playerid2, reason)) return _Mensaje(playerid, 3, "0", "/ant [id jugador] [texto]");
	if (strlen(reason) > 32) return _Mensaje(playerid, 4, "FF0000", "[iBot]{FFFFFF} El antecedente solo puede tener 32 caracteres");
	if (!IsPlayerConnected(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");

	if (InfoJugador[playerid2][jDelito][0] == 0) return Colocar_Delito(playerid, playerid2, 0, "primer", reason);
	else if (InfoJugador[playerid2][jDelito][1] == 0) return Colocar_Delito(playerid, playerid2, 1, "segundo", reason);
	else if (InfoJugador[playerid2][jDelito][2] == 0) return Colocar_Delito(playerid, playerid2, 2, "tercer", reason);
	else if (InfoJugador[playerid2][jDelito][3] == 0) return Colocar_Delito(playerid, playerid2, 3, "cuarto", reason);
	else if (InfoJugador[playerid2][jDelito][4] == 0) return Colocar_Delito(playerid, playerid2, 4, "quinto", reason);
	else if (InfoJugador[playerid2][jDelito][5] == 0) return Colocar_Delito(playerid, playerid2, 5, "sexto", reason);
	else if (InfoJugador[playerid2][jDelito][6] == 0) return Colocar_Delito(playerid, playerid2, 6, "septimo", reason);
	else if (InfoJugador[playerid2][jDelito][7] == 0) return Colocar_Delito(playerid, playerid2, 7, "octavo", reason);
	else if (InfoJugador[playerid2][jDelito][8] == 0) return Colocar_Delito(playerid, playerid2, 8, "noveno", reason);
	else if (InfoJugador[playerid2][jDelito][9] == 0) return Colocar_Delito(playerid, playerid2, 9, "decimo", reason);
	else _Mensaje(playerid, 4, "FFFFFF", "Ese jugador no puede tener mas antecedentes.");
	return 1;
}
CMD:antecedente(playerid, params[]) return cmd_ant(playerid, params);
CMD:hdelectivo(playerid, params[]) return cmd_ant(playerid, params);

Colocar_Delito(playerid, playerid2, slot, tipo[], razon[32])
{
	new string[128];
	switch (slot)
	{
		case 0: alm(InfoJugador[playerid2][jRazonDelito1], razon),	guardar_string_mysql("cuentas", "DelitoRazon1", InfoJugador[playerid][jID], InfoJugador[playerid][jRazonDelito1]);
		case 1: alm(InfoJugador[playerid2][jRazonDelito2], razon),	guardar_string_mysql("cuentas", "DelitoRazon2", InfoJugador[playerid][jID], InfoJugador[playerid][jRazonDelito2]);
		case 2: alm(InfoJugador[playerid2][jRazonDelito3], razon),	guardar_string_mysql("cuentas", "DelitoRazon3", InfoJugador[playerid][jID], InfoJugador[playerid][jRazonDelito3]);
		case 3: alm(InfoJugador[playerid2][jRazonDelito4], razon),	guardar_string_mysql("cuentas", "DelitoRazon4", InfoJugador[playerid][jID], InfoJugador[playerid][jRazonDelito4]);
		case 4: alm(InfoJugador[playerid2][jRazonDelito5], razon),	guardar_string_mysql("cuentas", "DelitoRazon5", InfoJugador[playerid][jID], InfoJugador[playerid][jRazonDelito5]);
		case 5: alm(InfoJugador[playerid2][jRazonDelito6], razon),	guardar_string_mysql("cuentas", "DelitoRazon6", InfoJugador[playerid][jID], InfoJugador[playerid][jRazonDelito6]);
		case 6: alm(InfoJugador[playerid2][jRazonDelito7], razon),	guardar_string_mysql("cuentas", "DelitoRazon7", InfoJugador[playerid][jID], InfoJugador[playerid][jRazonDelito7]);
		case 7: alm(InfoJugador[playerid2][jRazonDelito8], razon),	guardar_string_mysql("cuentas", "DelitoRazon8", InfoJugador[playerid][jID], InfoJugador[playerid][jRazonDelito8]);
		case 8: alm(InfoJugador[playerid2][jRazonDelito9], razon),	guardar_string_mysql("cuentas", "DelitoRazon9", InfoJugador[playerid][jID], InfoJugador[playerid][jRazonDelito9]);
		case 9: alm(InfoJugador[playerid2][jRazonDelito10], razon),	guardar_string_mysql("cuentas", "DelitoRazon10", InfoJugador[playerid][jID], InfoJugador[playerid][jRazonDelito10]);
	}
	InfoJugador[playerid2][jDelito][slot] = 1;
	new gds[32];
	format(gds, sizeof gds, "Delito%d", slot+1);
	guardar_int_mysql("cuentas", gds, InfoJugador[playerid][jID], InfoJugador[playerid][jDelito][slot]);
	format(string, sizeof string, "Has colocado a %s su %s antecedente (%s)", NombreJugador(playerid2), tipo, razon);
	_Mensaje(playerid, 4, "F8D48C", string);
	format(string, sizeof string, "%s te ha colocado tu %s antecedente (%s)", NombreJugador(playerid), tipo, razon);
	_Mensaje(playerid2, 4, "F8D48C", string);
	format(string, sizeof string, "[CENTRAL]:{FFFFFF} %s ha puesto un antecedente a %s (%s)", NombreJugador(playerid), NombreJugador(playerid2), razon);
	SendRadioFaction(1, C_AZUL, string);
	return 1;
}

CMD:w(playerid, params[])
{
	new string[256], playerid2, mensaje[200];
	if (PrivadosB[playerid] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes bloqueado el permiso de mandar /mp.");
	if (sscanf(params, "us[200]", playerid2, mensaje)) return _Mensaje(playerid, 3, "0", "/mp [id jugador] [texto]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~ID invalida.");
	if (playerid == playerid2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No te puedes enviar mensajes privados a ti mismo.");
	if (B_Privados[playerid2] != 0) return SendClientMessage(playerid, 0xccccccff, "* Ese miembro de la administracion tiene los mensajes privados bloqueados.");
	if (InfoJugador[playerid2][jAdmin] > 0 || InfoJugador[playerid][jAdmin] > 0)
	{
		format(string, sizeof string, "Mensaje de %s (ID: %d): %s", NombreRJugador(playerid), playerid, mensaje);
		SendSplitMessage(playerid2, 0xfdfe8bff, string);
		format(string, sizeof string, "Mensajeaste a %s (ID: %d): %s", NombreRJugador(playerid2), playerid2, mensaje);
		SendSplitMessage(playerid, 0xfce80cff, string);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador debe ser miembro del staff.");
	return 1;
}
CMD:mp(playerid, params[]) return cmd_w(playerid, params);

CMD:guardarservidor(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Guardarservidor.");
	OnDuty
	ActualizarEst();
	_MensajeOOC(0xb0b0b0ff, "  Todos los datos del servidor han sido guardados.");
	return 1;
}

CMD:congelar(playerid, params[]) {
    OnDuty
    if (InfoJugador[playerid][jAdmin] >= 2) {
        new string[128], playerid2;
        if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/congelar [id jugador]");
        if (IsPlayerConnected(playerid2)) {
            if (InfoJugador[playerid2][jAdmin] > InfoJugador[playerid][jAdmin]) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes congelar a un miembro del staff de mayor nivel.");
            TogglePlayerControllable(playerid2, 0);
            SetPVarInt(playerid2, "Congelado", 1);
            format(string, sizeof string, "Administracion: %s fue congelado por %s.", NombreRJugador(playerid2), NombreRJugador(playerid));
            MensajeAdmin(string);
        }
    } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Congelar.");
    return 1;
}

CMD:descongelar(playerid, params[]) {
    OnDuty
    if (InfoJugador[playerid][jAdmin] >= 2) {
        new string[128], playerid2;
        if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/descongelar [id jugador]");
        if (IsPlayerConnected(playerid2)) {
            DeletePVar(playerid2, "Congelado");
            TogglePlayerControllable(playerid2, 1);
            ClearAnimations(playerid2);
            SetCameraBehindPlayer(playerid2);
            format(string, sizeof string, "Administracion: %s fue descongelado por %s.", NombreRJugador(playerid2), NombreRJugador(playerid));
            MensajeAdmin(string);
        } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
    } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Descongelar.");
    return 1;
}

CMD:a(playerid, params[]) {
	new string[256];
    if (InfoJugador[playerid][jAdmin] >= 1) {
        if (!isnull(params)) {
            if(InfoJugador[playerid][jSobreAdminint] == 1)
            {
                format(string, sizeof string, "%s %s(%s): %s", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid),InfoJugador[playerid][jSobreAdmin], params);
	            SendAdminMessage(0xA9C4E4FF, string);
            }else
            {
	            format(string, sizeof string, "%s %s: %s", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid), params);
	            SendAdminMessage(0xA9C4E4FF, string);
			 }
        } else _Mensaje(playerid, 3, "0", "/a [texto]");
    }
    return 1;
}

CMD:presos(playerid)
{
	if (!Es_Banda(playerid, 1, 2, 3 )) return 1;
	new carcel[32];
	foreach(Player, i) if (InfoJugador[i][jEncarcelado] == 2 || InfoJugador[i][jEncarcelado] == 3)
	{
		if (InfoJugador[i][jEncarcelado] == 2) carcel = "{9B9BFF}Comisaria{b0b0b0}";
		else if (InfoJugador[i][jEncarcelado] == 3) carcel = "{00c200}Federal{b0b0b0}";
		SendClientMessageEx(playerid, -1, "Nombre y apellido: %s (%d) - Semanas: %d (min) - Prision: %s", i, NombreRJugador(i), InfoJugador[i][jTiempoCarcel], carcel);
	}
	return 1;
}

CMD:enjail(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Nuevos.");
	OnDuty
	new carcel[32];

	new szNoobs[128];
	foreach(Player, i) if (InfoJugador[i][jEncarcelado])
	{
		if (InfoJugador[i][jEncarcelado] == 1) carcel = "{b00000}OOC{b0b0b0}";
		else if (InfoJugador[i][jEncarcelado] == 2) carcel = "{9B9BFF}Comisaria{b0b0b0}";
		else if (InfoJugador[i][jEncarcelado] == 3) carcel = "{00c200}Federal{b0b0b0}";

		if(InfoJugador[i][jEncarcelado] == 1) format(szNoobs, sizeof(szNoobs), "[%d] %s - Minutos: %d - Prision: %s - Sancionador: {FF0000}%s", i, NombreRJugador(i), InfoJugador[i][jTiempoCarcel], carcel, InfoJugador[i][jSancionador]);
		else format(szNoobs, sizeof(szNoobs), "[%d] %s - Minutos: %d - Prision: %s", i, NombreRJugador(i), InfoJugador[i][jTiempoCarcel], carcel);
		_Mensaje(playerid, 4, "FFFFFF", szNoobs);
	}
	return 1;
}
CMD:enprision(playerid) return cmd_enjail(playerid);

CMD:nuevos(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Nuevos.");
	OnDuty

	_Mensaje(playerid, 4, "FFFFFF", "  Jugadores menores a 10 horas:");
	new szNoobs[128];
	foreach(Player, i) if (InfoJugador[i][jHorasConectado] < 10)
	{
		format(szNoobs, sizeof(szNoobs), "[%d] %s - Horas de juego: {00A2ff}%d{ffffff}.", i, NombreRJugador(i), InfoJugador[i][jHorasConectado]);
		_Mensaje(playerid, 4, "ffffff", szNoobs);
	}
	return 1;
}

CMD:id(playerid, params[])
{
	new id;
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/id [nombre o id]");
	if (isnumeric(params))
	{
		sscanf(params, "d", id);
		if (!IsPlayerConnected(id)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador desconectado.");
		if (InfoJugador[id][jNivel] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador esta ingresando.");
		SendClientMessageEx(playerid, 0xC4C4FFFF, "[ID:%d] {DEC251}%s {787680}[Nivel: %d] [Ping: %s]", id, NombreJugador(id), InfoJugador[id][jNivel], StringPing(id));
	}
	else
	{
		if (strlen(params) < 3 || strlen(params) > MAX_PLAYER_NAME) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El nombre del jugador debe estar entre 3 a 24 caracteres.");
		new count;
		foreach (new playerid2: Player) if (strfind(ReturnName(playerid2), params, true) != -1)
		{
			if (InfoJugador[playerid2][jNivel] != 0)
			{
				SendClientMessageEx(playerid, 0xC4C4FFFF, "[ID:%d] {DEC251}%s {787680}[Nivel: %d] [Ping: %s]", playerid2, NombreJugador(playerid2), InfoJugador[playerid2][jNivel], StringPing(playerid2));
				count++;
			}
		}
		if (!count) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No hay ningun jugador con ese nombre conectado.");
		if (count == 1) SendClientMessageEx(playerid, 0xCCCC00FF, "Se encontro %d jugador que coincide con {cccccc}%s{CCCC00}.", count, params);
		else SendClientMessageEx(playerid, 0xCCCC00FF, "Se encontraron %d jugadores que coinciden con {cccccc}%s{CCCC00}.", count, params);
	}
	return 1;
}

ReturnName(playerid)
{
    new name[MAX_PLAYER_NAME];
    if (playerid == -1) name = "None";
    else GetPlayerName(playerid, name, MAX_PLAYER_NAME);
    return name;
}


CMD:menuregalos(playerid){
	new str[25+1];
	if (InfoJugador[playerid][jAdmin] < 11) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /regaloatodos.");
	format(str, sizeof(str), "%sDinero random\nCoins\n", str);
	ShowPlayerDialog(playerid, D_regalos, DIALOG_STYLE_LIST, "Menu de {fff000}regalos!", str, "Accept", "Cancel");
	return 1;
}

CMD:menureferido(playerid){
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /menureferido.");
	Dialog_Show(playerid, ShowReferidos, DIALOG_STYLE_LIST, "Referidos", "{A7C9E7}-{ffffff} Visualizar referidos\nAgregar referido\nEliminar referido", "Continuar", "Salir");
	return 1;
}
Dialog:ShowReferidos(playerid, response, listitem, inputtext[]){
	if (!response) return 1;
	switch (listitem)
	{ case 0:{
			new dialogShow[2056], formatShow[256];
			new string[0]="none";
			if (CountReferidos()!= 0)
				{
					Loop(id, totalreferidos, 1)if (InfoReferido[id][sID] != 0 && InfoReferido[id][sNombre]!=string[0])
					{
					format(formatShow, sizeof formatShow, "{CCCCCC}Nombre: %s | Codigo: %s | Usos: %d | ID: %d\n", InfoReferido[id][sNombre], InfoReferido[id][sCodigoRef], InfoReferido[id][sUsos],InfoReferido[id][sID]);
					strcat(dialogShow, formatShow);
					}
					Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Referidos", dialogShow, "Cerrar", "");
				}
			}
	 	case 1:{
			ShowPlayerDialog(playerid, D_referidocrear, DIALOG_STYLE_INPUT, "{2C56D4}Nombre del usuario", "Ingresa el nombre de usuario para asignar el codigo", "Aceptar", "Cancelar");
		}
		case 2:{
			ShowPlayerDialog(playerid, D_referidoeliminar, DIALOG_STYLE_INPUT, "{2C56D4}Nombre del usuario a eliminar", "Ingresa el nombre de usuario para eliminar su codigo", "Aceptar", "Cancelar");
		}
	}
	return 1;
}

CMD:menuvip(playerid)
{
	new string[256],content[200];
	format(content,sizeof(content),"Tienes: {FFFF00}%d Coins\n",InfoJugador[playerid][jCoins]);
	strcat(string,content);
	strcat(string,"-Niveles VIP\n");
	strcat(string,"-Vehiculos VIP\n");
	strcat(string,"-Puntos de rol\n");
	Dialog_Show(playerid, D_CVIP, DIALOG_STYLE_LIST,"Menu VIP",string, "Continuar", "Salir");
	return 1;
}

Dialog:D_CVIP(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(listitem == 1)
	    {
            Dialog_Show(playerid, D_CVIP2, DIALOG_STYLE_LIST, "{D6E1EB}Informacion (premium)", "{ffffff}VIP basico {FFFF00}(10 coins)\nVIP avanzado {FFFF00}(15 coins)\nVIP ultra {FFFF00}(20 coins)\nVIP {CC33CC}Socio", "Continuar", "Salir");
	    }
	    if(listitem == 2)
	    {
	        new VehMuestra[40], count = 0;
			Loop(x, sizeof InfoConcesionario, 0) if (InfoConcesionario[x][csMoneda] >= 1)
			{
				VehMuestra[count] = InfoConcesionario[x][csModelo];
				count++;
			}
			ShowModelSelectionMenuEx(playerid, VehMuestra, count, "Autos VIP", Buy_Vehicle_Show, -16.0, 0.0, -55.0, 1.0);
	    }
	    if(listitem == 3)
	    {
	        new dialogShow[2056];
	    	strcat(dialogShow, "{FFFFFF}1 punto - {00CC00}$500.000 {FFFFFF}o {F4BC27}1 Coin\n");
	    	strcat(dialogShow, "{FFFFFF}2 punto - {00CC00}$1.000.000 {FFFFFF}o {F4BC27}2 Coins\n");
	    	strcat(dialogShow, "{FFFFFF}3 punto - {00CC00}$1.500.000 {FFFFFF}o {F4BC27}3 Coins\n");
	    	strcat(dialogShow, "{FFFFFF}4 punto - {00CC00}$2.000.000 {FFFFFF}o {F4BC27}4 Coins\n");
	    	strcat(dialogShow, "{FFFFFF}5 punto - {00CC00}$2.500.000 {FFFFFF}o {F4BC27}5 Coins\n");
	    	Dialog_Show(playerid, D_CVIP7, DIALOG_STYLE_LIST, "{CCCCCC}Informacion {FF7000}Puntos de Rol", dialogShow, "Aceptar", "Cancelar");
		}
	}
	return 1;
}
Dialog:D_CVIP2(playerid, response, listitem, inputtext[])
{
	if(response)
	{
       new dialogShow[2056];
       if(listitem == 0)
       {
                strcat(dialogShow, "{C93CCE}•{FFFFFF} Rango{ff6eb9} Discord nitro {FFFFFF}en el canal /d.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso al /repararvip.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso al /casillero.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso{ff6eb9} al salon VIP.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso al chat /vip [Texto].\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a neones en Vehiculos.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a skins gratis en /casillero.\n");
 	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a cambiar color de accesorios.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a {CC33FF}accesorios exclusivos {FFFFFF}en /prendas.\n");
                strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a un regalo(cada 12hrs) en /casillero.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {00c200}$400 {FFFFFF}extras en el PayDay.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {00c200}$125.000 {FFFFFF}Por comprar el beneficio.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes 1 slot extra en los maleteros.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {33CCCC} 10% de descuento {FFFFFF}en comprar de vehiculos.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {33CCCC} 25% de descuento {FFFFFF}en productos de negocios.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}3 trabajos {FFFFFF}al mismo tiempo.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}3 casas {FFFFFF}en propiedad.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}2 negocios {FFFFFF}en propiedad.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}4 Vehiculos {FFFFFF}en propiedad.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}2 Vehiculos {FFFFFF}spawneados.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} El cobro del servicio de grua es de{00c200} $500 dolares.\n");
                Dialog_Show(playerid, D_CVIP3, DIALOG_STYLE_MSGBOX, "VIP{66CC66} Basico {FFFF00}(10 coins)", dialogShow, "Comprar", "Cerrar");
       }
       if(listitem == 1)
       {
                strcat(dialogShow, "{C93CCE}•{FFFFFF} Rango{ff6eb9} Discord nitro {FFFFFF}en el canal /d.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso al /repararvip.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso al /casillero.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso{ff6eb9} al salon VIP.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso al chat /vip [Texto].\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a neones en Vehiculos.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a skins gratis en /casillero.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a cambiar color de accesorios.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a {CC33FF}accesorios exclusivos {FFFFFF}en /prendas.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a un regalo(cada 12hrs) en /casillero.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {00c200}$550 {FFFFFF}extras en el PayDay.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {00c200}$200.000 {FFFFFF}Por comprar el beneficio.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes 2 slot extra en los maleteros.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {33CCCC} 25% de descuento {FFFFFF}en comprar de vehiculos.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {33CCCC} 25% de descuento {FFFFFF}en productos de negocios.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}3 trabajos {FFFFFF}al mismo tiempo.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}4 casas {FFFFFF}en propiedad.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}3 negocios {FFFFFF}en propiedad.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}5 Vehiculos {FFFFFF}en propiedad.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}3 Vehiculos {FFFFFF}spawneados.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} El cobro del servicio de grua es de{00c200} $500 dolares.\n");
	            Dialog_Show(playerid, D_CVIP4, DIALOG_STYLE_MSGBOX, "VIP{66CC66} Avanzado {FFFF00}(15 coins)", dialogShow, "Comprar", "Cerrar");
       }
       if(listitem == 2)
       {
                strcat(dialogShow, "{C93CCE}•{FFFFFF} Color {FFFF33}oro en el nombre.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Rango{ff6eb9} Discord nitro {FFFFFF}en el canal /d.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso al /repararvip.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso al /casillero.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso{ff6eb9} al salon VIP.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso al chat /vip [Texto].\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a neones en Vehiculos.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a skins gratis en /casillero.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a cambiar color de accesorios.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a {CC33FF}accesorios exclusivos {FFFFFF}en /prendas.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a un regalo(cada 12hrs) en /casillero.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {00c200}$900 {FFFFFF}extras en el PayDay.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {00c200}$350.000 {FFFFFF}Por comprar el beneficio.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes 2 slot extra en los maleteros.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {33CCCC} 42% de descuento {FFFFFF}en comprar de vehiculos.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {33CCCC} 25% de descuento {FFFFFF}en productos de negocios.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}3 trabajos {FFFFFF}al mismo tiempo.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}5 casas {FFFFFF}en propiedad.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}4 negocios {FFFFFF}en propiedad.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}6 Vehiculos {FFFFFF}en propiedad.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}4 vehiculos {FFFFFF}spawneados.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} El beneficio de {FF3300}no perder armas {FFFFFF} al caer en el hospital.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} El cobro del servicio de grua es {FFFF33}gratis.\n");
	            Dialog_Show(playerid, D_CVIP5, DIALOG_STYLE_MSGBOX, "VIP{66CC66} Ultra {FFFF00}(20 coins)", dialogShow, "Comprar", "Cerrar");
       }
       if(listitem == 3)
       {
                strcat(dialogShow, "{C93CCE}•{FFFFFF} Color {CC33CC}morado {FFFFFF}en el nombre.\n");
                strcat(dialogShow, "{C93CCE}•{FFFFFF} Beneficio por {CC33CC}3 meses.\n");
                strcat(dialogShow, "{C93CCE}•{FFFFFF} 60 {FFFF00} coins.\n");
                strcat(dialogShow, "{C93CCE}•{FFFFFF} Licencia de armas {33CCCC}por 3 meses.\n");
                strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso directo {33CCCC}con la cupula.\n");
                strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso {33CCCC}al host de test.\n");
                strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a neones en Vehiculos.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Rango{ff6eb9} Discord nitro {FFFFFF}en el canal /d.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso al /repararvip.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso al /casillero.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso{ff6eb9} al salon VIP.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso al chat /vip [Texto].\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a neones en Vehiculos.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a skins gratis en /casillero.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a cambiar color de accesorios.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a {CC33FF}accesorios exclusivos {FFFFFF}en /prendas.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Acceso a un regalo(cada 12hrs) en /casillero.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {00c200}$2000 {FFFFFF}extras en el PayDay.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {00c200}$500.000 {FFFFFF}Por comprar el beneficio.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes 3 slot extra en los maleteros.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {33CCCC} 42% de descuento {FFFFFF}en comprar de vehiculos.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Recibes {33CCCC} 25% de descuento {FFFFFF}en productos de negocios.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}3 trabajos {FFFFFF}al mismo tiempo.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}6 casas {FFFFFF}en propiedad.\n");
	            strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}6 negocios {FFFFFF}en propiedad.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}ilimitados los Vehiculos {FFFFFF}en propiedad.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} Puedes tener hasta {33CCCC}5 Vehiculos {FFFFFF}spawneados.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} El beneficio de {FF3300}no perder armas {FFFFFF} al caer en el hospital.\n");
		        strcat(dialogShow, "{C93CCE}•{FFFFFF} El cobro del servicio de grua es {FFFF33}gratis.\n");
	            Dialog_Show(playerid, D_CVIP6, DIALOG_STYLE_MSGBOX, "VIP{CC33CC} Socio {00c200}($25) {FFFFFF}Dolares", dialogShow, "Continuar", "Cerrar");
        }
    }
    return 1;
}

Dialog:D_CVIP3(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new string[200];
	    new year, month, day;
    	getdate(year, month, day);
    	if(month == 12)
    	{
    	    month = 1;
        }
	    if(listitem)
	    {
	        if(InfoJugador[playerid][jCoins] >= 10)
	        {
	            InfoJugador[playerid][jNivelVIP] = 1;
	            if(InfoJugador[playerid][jMesVIP] != -1)
	            {
	                InfoJugador[playerid][jMesVIP] += 1;
	            }else InfoJugador[playerid][jMesVIP] = month+1;
				InfoJugador[playerid][jDiaVIP] = day;
				InfoJugador[playerid][jCoins] -= 10;
				GivePlayerCash(playerid, 125000, "Por comprar el beneficio VIP Basico");
				format(string, sizeof(string), "Administracion: %s compro VIP BASICO.", NombreRJugador(playerid));
				MensajeAdmin(string);
				new playerip[18];
				GetPlayerIp(playerid, playerip, sizeof playerip);
				new query[1028];
				mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_menuvip` (`IP`, `Nombre_Apellido`, `Fecha`, `Dato`) VALUES ('%e', '%e', '%e', 'VipBasico - 10Coin')", playerip, InfoJugador[playerid][jNombre_Apellido], FechaHoy());
				mysql_tquery(DBngrp, query);
				format(string, sizeof (string), "[OOC] Servidor[101]: %s acaba de mejorar el Discord con un Nitro.", NombreRJugador(playerid));
				SendClientMessageToAll(0xFFB600FF, string);
				InfoJugador[playerid][jDiscordNitro] = 1;
				guardar_int_mysql("cuentas", "NivelVIP", InfoJugador[playerid][jID], InfoJugador[playerid][jNivelVIP]);
				guardar_int_mysql("cuentas", "MesVIP", InfoJugador[playerid][jID], InfoJugador[playerid][jMesVIP]);
				guardar_int_mysql("cuentas", "DiaVIP", InfoJugador[playerid][jID], InfoJugador[playerid][jDiaVIP]);
				guardar_int_mysql("cuentas", "DiscordNitro", InfoJugador[playerid][jID], InfoJugador[playerid][jDiscordNitro]);
				guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
            }else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes 10 coins para adquirir vip basico.");
   		}
   	}
	return 1;
}

Dialog:D_CVIP4(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new string[200];
	    new year, month, day;
    	getdate(year, month, day);
    	if(month == 12)
    	{
    	    month = 1;
        }
	    if(listitem)
	    {
	        if(InfoJugador[playerid][jCoins] >= 15)
	        {
	            InfoJugador[playerid][jNivelVIP] = 2;
	            if(InfoJugador[playerid][jMesVIP] != -1)
	            {
	                InfoJugador[playerid][jMesVIP] += 1;
	            }else InfoJugador[playerid][jMesVIP] = month+1;
				InfoJugador[playerid][jDiaVIP] = day;
				InfoJugador[playerid][jCoins] -= 15;
				GivePlayerCash(playerid, 200000, "Por comprar el beneficio VIP Avanzado");
				format(string, sizeof(string), "Administracion: %s compro VIP AVANZADO.", NombreRJugador(playerid));
				MensajeAdmin(string);
				new playerip[18];
				GetPlayerIp(playerid, playerip, sizeof playerip);
				new query[1028];
				mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_menuvip` (`IP`, `Nombre_Apellido`, `Fecha`, `Dato`) VALUES ('%e', '%e', '%e', 'VipBasico - 10Coin')", playerip, InfoJugador[playerid][jNombre_Apellido], FechaHoy());
				mysql_tquery(DBngrp, query);
				format(string, sizeof (string), "[OOC] Servidor[101]: %s acaba de mejorar el Discord con un Nitro.", NombreRJugador(playerid));
				SendClientMessageToAll(0xFFB600FF, string);
				InfoJugador[playerid][jDiscordNitro] = 1;
				guardar_int_mysql("cuentas", "NivelVIP", InfoJugador[playerid][jID], InfoJugador[playerid][jNivelVIP]);
				guardar_int_mysql("cuentas", "MesVIP", InfoJugador[playerid][jID], InfoJugador[playerid][jMesVIP]);
				guardar_int_mysql("cuentas", "DiaVIP", InfoJugador[playerid][jID], InfoJugador[playerid][jDiaVIP]);
				guardar_int_mysql("cuentas", "DiscordNitro", InfoJugador[playerid][jID], InfoJugador[playerid][jDiscordNitro]);
				guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
            }else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes 15 coins para adquirir vip avanzado.");
   		}
   	}
	return 1;
}

Dialog:D_CVIP5(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new string[200];
	    new year, month, day;
    	getdate(year, month, day);
    	if(month == 12)
    	{
    	    month = 1;
        }
	    if(listitem)
	    {
	        if(InfoJugador[playerid][jCoins] >= 20)
	        {
	            InfoJugador[playerid][jNivelVIP] = 3;
	            if(InfoJugador[playerid][jMesVIP] != -1)
	            {
	                InfoJugador[playerid][jMesVIP] += 1;
	            }else InfoJugador[playerid][jMesVIP] = month+1;
				InfoJugador[playerid][jDiaVIP] = day;
				InfoJugador[playerid][jCoins] -= 20;
				GivePlayerCash(playerid, 350000, "Por comprar el beneficio VIP Ultra");
				format(string, sizeof(string), "Administracion: %s compro VIP ULTRA.", NombreRJugador(playerid));
				MensajeAdmin(string);
				new playerip[18];
				GetPlayerIp(playerid, playerip, sizeof playerip);
				new query[1028];
				mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_menuvip` (`IP`, `Nombre_Apellido`, `Fecha`, `Dato`) VALUES ('%e', '%e', '%e', 'VipBasico - 10Coin')", playerip, InfoJugador[playerid][jNombre_Apellido], FechaHoy());
				mysql_tquery(DBngrp, query);
				format(string, sizeof (string), "[OOC] Servidor[101]: %s acaba de mejorar el Discord con un Nitro.", NombreRJugador(playerid));
				SendClientMessageToAll(0xFFB600FF, string);
				InfoJugador[playerid][jDiscordNitro] = 1;
				guardar_int_mysql("cuentas", "NivelVIP", InfoJugador[playerid][jID], InfoJugador[playerid][jNivelVIP]);
				guardar_int_mysql("cuentas", "MesVIP", InfoJugador[playerid][jID], InfoJugador[playerid][jMesVIP]);
				guardar_int_mysql("cuentas", "DiaVIP", InfoJugador[playerid][jID], InfoJugador[playerid][jDiaVIP]);
				guardar_int_mysql("cuentas", "DiscordNitro", InfoJugador[playerid][jID], InfoJugador[playerid][jDiscordNitro]);
				guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
            }else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes 20 coins para adquirir vip ultra.");
   		}
   	}
	return 1;
}

Dialog:D_CVIP6(playerid, response, listitem, inputtext[])
{
	if(response)
	{
     Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{D6E1EB}Informacion {CC33CC}(VIP Socio)", "Para comprar este beneficio contacta con:\n{FF3300}x1\n x2\n{FFFFFF}O abre ticket en el {3366FF}discord principal de {FF3300}North America Oficial", "Cerrar", "");
    }
    return 1;
}

Dialog:D_CVIP7(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0: Dialog_Show(playerid, D_CVIP8, DIALOG_STYLE_MSGBOX, "{CCCCCC}Informacion {FF7000}Puntos de Rol", "{FFFFFF}?Estas seguro que deseas adquirir  1 punto de rol?\n\nCosto {00CC00}$500.000 {FFFFFF}o {F4BC27}1 Coin{FFFFFF}.", "Dinero", "Coin");
	        case 1: Dialog_Show(playerid, D_CVIP9, DIALOG_STYLE_MSGBOX, "{CCCCCC}Informacion {FF7000}Puntos de Rol", "{FFFFFF}?Estas seguro que deseas adquirir  2 puntos de rol?\n\nCosto {00CC00}$1.000.000 {FFFFFF}o {F4BC27}2 Coins{FFFFFF}.", "Dinero", "Coin");
	        case 2: Dialog_Show(playerid, D_CVIP10, DIALOG_STYLE_MSGBOX, "{CCCCCC}Informacion {FF7000}Puntos de Rol", "{FFFFFF}?Estas seguro que deseas adquirir  3 puntos de rol?\n\nCosto {00CC00}$1.500.000 {FFFFFF}o {F4BC27}3 Coins{FFFFFF}.", "Dinero", "Coin");
	        case 3: Dialog_Show(playerid, D_CVIP11, DIALOG_STYLE_MSGBOX, "{CCCCCC}Informacion {FF7000}Puntos de Rol", "{FFFFFF}?Estas seguro que deseas adquirir  4 puntos de rol?\n\nCosto {00CC00}$2.000.000 {FFFFFF}o {F4BC27}4 Coins{FFFFFF}.", "Dinero", "Coin");
	        case 4: Dialog_Show(playerid, D_CVIP12, DIALOG_STYLE_MSGBOX, "{CCCCCC}Informacion {FF7000}Puntos de Rol", "{FFFFFF}?Estas seguro que deseas adquirir  5 puntos de rol?\n\nCosto {00CC00}$2.500.000 {FFFFFF}o {F4BC27}5 Coins{FFFFFF}.", "Dinero", "Coin");
		}
	}
	return 1;
}


Dialog:D_CVIP8(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        new string[210];
        if(InfoJugador[playerid][jCoins] >= 1)
        {
            InfoJugador[playerid][jCoins] -= 1;
            InfoJugador[playerid][jPuntosRol]++;
			guardar_int_mysql("cuentas", "PuntosRol", InfoJugador[playerid][jID], InfoJugador[playerid][jPuntosRol]);
			guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
			SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Adquiriste 1 punto de rol por 1 coin al servidor.");
			format(string, sizeof(string), "Administracion: %s compro 1 Punto de rol [1 Coin - /menuvip].", NombreRJugador(playerid));
			MensajeAdmin(string);
			new playerip[18];
			GetPlayerIp(playerid, playerip, sizeof playerip);
			new query[1028];
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_menuvip` (`IP`, `Nombre_Apellido`, `Fecha`, `Dato`) VALUES ('%e', '%e', '%e', '1Punto - 1Coin')", playerip, InfoJugador[playerid][jNombre_Apellido], FechaHoy());
			mysql_tquery(DBngrp, query);
        }else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes 1 coin para adquirir el punto de rol.");
	}
	if(response)
	{
	    new string[210];
	    if (GetPlayerCash(playerid) < 500000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No posees esa cantidad.");
	    InfoJugador[playerid][jPuntosRol]++;
	    GivePlayerCash(playerid, -500000, "1punto de rol - /menuvip");
		guardar_int_mysql("cuentas", "PuntosRol", InfoJugador[playerid][jID], InfoJugador[playerid][jPuntosRol]);
		guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
		SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Adquiriste 1 punto de rol por $500.000 al servidor.");
		format(string, sizeof(string), "Administracion: %s compro 1 Punto de rol [$500.000 - /menuvip].", NombreRJugador(playerid));
		MensajeAdmin(string);
		new playerip[18];
		GetPlayerIp(playerid, playerip, sizeof playerip);
		new query[1028];
		mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_menuvip` (`IP`, `Nombre_Apellido`, `Fecha`, `Dato`) VALUES ('%e', '%e', '%e', '1Punto - $500.000')", playerip, InfoJugador[playerid][jNombre_Apellido], FechaHoy());
		mysql_tquery(DBngrp, query);
		return 1;
	}
	return 1;
}

Dialog:D_CVIP9(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        new string[210];
        if(InfoJugador[playerid][jCoins] >= 2)
        {
            InfoJugador[playerid][jCoins] -= 2;
            InfoJugador[playerid][jPuntosRol] += 2;
			guardar_int_mysql("cuentas", "PuntosRol", InfoJugador[playerid][jID], InfoJugador[playerid][jPuntosRol]);
			guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
			SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Adquiriste 2 puntos de rol por 2 coins al servidor.");
			format(string, sizeof(string), "Administracion: %s compro 2 Punto de rol [2 Coins - /menuvip].", NombreRJugador(playerid));
			MensajeAdmin(string);
			new playerip[18];
			GetPlayerIp(playerid, playerip, sizeof playerip);
			new query[1028];
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_menuvip` (`IP`, `Nombre_Apellido`, `Fecha`, `Dato`) VALUES ('%e', '%e', '%e', '2Punto - 2Coin')", playerip, InfoJugador[playerid][jNombre_Apellido], FechaHoy());
			mysql_tquery(DBngrp, query);
        }else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes 2 coin para adquirir el punto de rol.");
	}
	if(response)
	{
	    new string[210];
	    if (GetPlayerCash(playerid) < 1000000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No posees esa cantidad.");
	    InfoJugador[playerid][jPuntosRol] += 2;
	    GivePlayerCash(playerid, -1000000, "2 puntos de rol - /menuvip");
		guardar_int_mysql("cuentas", "PuntosRol", InfoJugador[playerid][jID], InfoJugador[playerid][jPuntosRol]);
		guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
		SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Adquiriste 2 punto de rol por $1.000.000 al servidor.");
		format(string, sizeof(string), "Administracion: %s compro 2 Puntos de rol [$1.000.000 - /menuvip].", NombreRJugador(playerid));
		MensajeAdmin(string);
		new playerip[18];
		GetPlayerIp(playerid, playerip, sizeof playerip);
		new query[1028];
		mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_menuvip` (`IP`, `Nombre_Apellido`, `Fecha`, `Dato`) VALUES ('%e', '%e', '%e', '2Punto - $1.000.000')", playerip, InfoJugador[playerid][jNombre_Apellido], FechaHoy());
		mysql_tquery(DBngrp, query);
		return 1;
	}
	return 1;
}

Dialog:D_CVIP10(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        new string[210];
        if(InfoJugador[playerid][jCoins] >= 3)
        {
            InfoJugador[playerid][jCoins] -= 3;
            InfoJugador[playerid][jPuntosRol] += 3;
			guardar_int_mysql("cuentas", "PuntosRol", InfoJugador[playerid][jID], InfoJugador[playerid][jPuntosRol]);
			guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
			SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Adquiriste 3 puntos de rol por 3 coins al servidor.");
			format(string, sizeof(string), "Administracion: %s compro 3 Punto de rol [3 Coins - /menuvip].", NombreRJugador(playerid));
			MensajeAdmin(string);
			new playerip[18];
			GetPlayerIp(playerid, playerip, sizeof playerip);
			new query[1028];
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_menuvip` (`IP`, `Nombre_Apellido`, `Fecha`, `Dato`) VALUES ('%e', '%e', '%e', '3Punto - 3Coin')", playerip, InfoJugador[playerid][jNombre_Apellido], FechaHoy());
			mysql_tquery(DBngrp, query);
        }else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes 3 coin para adquirir el punto de rol.");
	}
	if(response)
	{
	    new string[210];
	    if (GetPlayerCash(playerid) < 1500000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No posees esa cantidad.");
	    InfoJugador[playerid][jPuntosRol] += 3;
	    GivePlayerCash(playerid, -1500000, "3 puntos de rol - /menuvip");
		guardar_int_mysql("cuentas", "PuntosRol", InfoJugador[playerid][jID], InfoJugador[playerid][jPuntosRol]);
		guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
		SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Adquiriste 3 punto de rol por $1.500.000 al servidor.");
		format(string, sizeof(string), "Administracion: %s compro 3 Puntos de rol [$1.500.000 - /menuvip].", NombreRJugador(playerid));
		MensajeAdmin(string);
		new playerip[18];
		GetPlayerIp(playerid, playerip, sizeof playerip);
		new query[1028];
		mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_menuvip` (`IP`, `Nombre_Apellido`, `Fecha`, `Dato`) VALUES ('%e', '%e', '%e', '3Punto - $1.500.000')", playerip, InfoJugador[playerid][jNombre_Apellido], FechaHoy());
		mysql_tquery(DBngrp, query);
		return 1;
	}
	return 1;
}

Dialog:D_CVIP11(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        new string[210];
        if(InfoJugador[playerid][jCoins] >= 4)
        {
            InfoJugador[playerid][jCoins] -= 4;
            InfoJugador[playerid][jPuntosRol] += 4;
			guardar_int_mysql("cuentas", "PuntosRol", InfoJugador[playerid][jID], InfoJugador[playerid][jPuntosRol]);
			guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
			SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Adquiriste 4 puntos de rol por 4 coins al servidor.");
			format(string, sizeof(string), "Administracion: %s compro 4 Punto de rol [4 Coins - /menuvip].", NombreRJugador(playerid));
			MensajeAdmin(string);
			new playerip[18];
			GetPlayerIp(playerid, playerip, sizeof playerip);
			new query[1028];
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_menuvip` (`IP`, `Nombre_Apellido`, `Fecha`, `Dato`) VALUES ('%e', '%e', '%e', '4Punto - 4Coin')", playerip, InfoJugador[playerid][jNombre_Apellido], FechaHoy());
			mysql_tquery(DBngrp, query);
        }else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes 4 coin para adquirir el punto de rol.");
	}
	if(response)
	{
	    new string[210];
	    if (GetPlayerCash(playerid) < 2000000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No posees esa cantidad.");
	    InfoJugador[playerid][jPuntosRol] += 4;
	    GivePlayerCash(playerid, -2000000, "4 puntos de rol - /menuvip");
		guardar_int_mysql("cuentas", "PuntosRol", InfoJugador[playerid][jID], InfoJugador[playerid][jPuntosRol]);
		guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
		SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Adquiriste 4 punto de rol por $2.000.000 al servidor.");
		format(string, sizeof(string), "Administracion: %s compro 4 Puntos de rol [$2.000.000 - /menuvip].", NombreRJugador(playerid));
		MensajeAdmin(string);
		new playerip[18];
		GetPlayerIp(playerid, playerip, sizeof playerip);
		new query[1028];
		mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_menuvip` (`IP`, `Nombre_Apellido`, `Fecha`, `Dato`) VALUES ('%e', '%e', '%e', '4Punto - $2.000.000')", playerip, InfoJugador[playerid][jNombre_Apellido], FechaHoy());
		mysql_tquery(DBngrp, query);
		return 1;
	}
	return 1;
}

Dialog:D_CVIP12(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        new string[210];
        if(InfoJugador[playerid][jCoins] >= 5)
        {
            InfoJugador[playerid][jCoins] -= 5;
            InfoJugador[playerid][jPuntosRol] += 5;
			guardar_int_mysql("cuentas", "PuntosRol", InfoJugador[playerid][jID], InfoJugador[playerid][jPuntosRol]);
			guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
			SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Adquiriste 5 puntos de rol por 5 coins al servidor.");
			format(string, sizeof(string), "Administracion: %s compro 5 Punto de rol [5 Coins - /menuvip].", NombreRJugador(playerid));
			MensajeAdmin(string);
			new playerip[18];
			GetPlayerIp(playerid, playerip, sizeof playerip);
			new query[1028];
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_menuvip` (`IP`, `Nombre_Apellido`, `Fecha`, `Dato`) VALUES ('%e', '%e', '%e', '5Punto - 5Coin')", playerip, InfoJugador[playerid][jNombre_Apellido], FechaHoy());
			mysql_tquery(DBngrp, query);
        }else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes 5 coin para adquirir el punto de rol.");
	}
	if(response)
	{
	    new string[210];
	    if (GetPlayerCash(playerid) < 2500000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No posees esa cantidad.");
	    InfoJugador[playerid][jPuntosRol] += 5;
	    GivePlayerCash(playerid, -2500000, "5 puntos de rol - /menuvip");
		guardar_int_mysql("cuentas", "PuntosRol", InfoJugador[playerid][jID], InfoJugador[playerid][jPuntosRol]);
		guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
		SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Adquiriste 5 punto de rol por $2.500.000 al servidor.");
		format(string, sizeof(string), "Administracion: %s compro 5 Puntos de rol [$2.500.000 - /menuvip].", NombreRJugador(playerid));
		MensajeAdmin(string);
		new playerip[18];
		GetPlayerIp(playerid, playerip, sizeof playerip);
		new query[1028];
		mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_menuvip` (`IP`, `Nombre_Apellido`, `Fecha`, `Dato`) VALUES ('%e', '%e', '%e', '5Punto - $2.500.000')", playerip, InfoJugador[playerid][jNombre_Apellido], FechaHoy());
		mysql_tquery(DBngrp, query);
		return 1;
	}
	return 1;
}

CMD:acciones(playerid, params[])
{
    new danimaccion[3000];
    strcat(danimaccion,"{FFFFFF}/danzar - /bebido - /movil - /cmovil - /bomba - /apuntar - /dormir\n");
    strcat(danimaccion,"/adios - /saludo - /trato - /crack - /fumando - /gro - /hablando - /taichi\n");
    strcat(danimaccion,"/caer - /reir - /tumbarse - /vomitar - /comiendo - /herido - /medico - /oralsex\n");
    strcat(danimaccion,"/muerto - /brazos - /pandillero - /taxi - /trafico - /golpeado - /besar - /boxear\n");
    strcat(danimaccion,"/espada /policia  /tortazo - /rodar - /cacheado - /bate - /gritando - /facepalm\n");
    strcat(danimaccion,"/animar - /esposado - /lanzar - /basket - /cansado - /saltovital - /pelea - /depie\n");
    strcat(danimaccion,"/rascarse - /apoyarse - /correr - /strip - /bailar - /asientosexi - /spray - /fokear\n");
    strcat(danimaccion,"/rifle - /mecanico - /carga - /consola - /barandilla - /llorar - /cruzarbrazos\n");
    strcat(danimaccion,"/discutir /camara  /bofetada - /billar - /beso - /dedo - /mear - /asco - /no - /si\n");
    strcat(danimaccion,"/cansarme - /asiento - /pararme - /irsecortao - /comerciar - /echarme - /cubrirme\n");
    strcat(danimaccion,"/coche - /agonizar - /levantarme - /mmm - /paja /oficinaanim /dildosex - /oralsexcar\n");
	Dialog_Show(playerid, Help_Show, DIALOG_STYLE_MSGBOX, "{FFFFFF}Ayuda: {00C200}[Acciones]", danimaccion, "Regresar","Cerrar");
    return 1;
}

CMD:anuncios(playerid) {
    new string[128];
    if (InfoJugador[playerid][jAdmin] >= 4) {
        OnDuty
        if (Anuncios == 0) {
            Anuncios = 1;
            format(string, sizeof string, "Administracion: %s ha habilitado el sistema de anuncios.", NombreRJugador(playerid));
            _MensajeOOC(0xE00000FF, string);
        } else {
            Anuncios = 0;
            format(string, sizeof string, "Administracion: %s ha deshabilitado el sistema de anuncios.", NombreRJugador(playerid));
            _MensajeOOC(0xE00000FF, string);
        }
    }
    return 1;
}

CMD:dejarfondos(playerid, params[]) {
    new string[128];
    if (InfoJugador[playerid][jAdmin] >= 5) {
        OnDuty
        if (ActFondos == 0) {
            ActFondos = 1;
            format(string, sizeof string, "Administracion: %s ha habilitado el sistema de sacar fondos(Gobierno).", NombreRJugador(playerid));
            MensajeAdmin(string);
        } else {
            ActFondos = 0;
            format(string, sizeof string, "Administracion: %s ha deshabilitado el sistema sacar fondos(Gobierno).", NombreRJugador(playerid));
            MensajeAdmin(string);
        }
    }
    return 1;
}

CMD:activartest(playerid, params[]) {
    new string[128];
    if (InfoJugador[playerid][jAdmin] >= 10) {
    	OnDuty
        if (ActTest == 0) {
            ActTest = 1;
            format(string, sizeof string, "Administracion: %s ha habilitado el test de rol.", NombreRJugador(playerid));
            MensajeAdmin(string);
        } else {
            ActTest = 0;
            format(string, sizeof string, "Administracion: %s ha deshabilitado el test de rol.", NombreRJugador(playerid));
            MensajeAdmin(string);
        }
    }
    return 1;
}

CMD:registro(playerid, params[]) {
    new string[128];
    if (InfoJugador[playerid][jAdmin] >= 4) {
        OnDuty
        if (ActRegistro == 0) {
            ActRegistro = 1;
            format(string, sizeof string, "Administracion: %s ha habilitado el sistema de registro.", NombreRJugador(playerid));
            _MensajeOOC(C_GCRP, string);
        } else {
            ActRegistro = 0;
            format(string, sizeof string, "Administracion: %s ha deshabilitado el sistema de registro.", NombreRJugador(playerid));
            _MensajeOOC(C_GCRP, string);
        }
    }
    return 1;
}

CMD:ircordenada(playerid, params[]) {
    new Float: x,Float: y,Float: z, int, vw, string[100];
    if (InfoJugador[playerid][jAdmin] < 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Ircordenada.");
    OnDuty
    if (sscanf(params, "fffdd", x, y, z, int, vw)) return _Mensaje(playerid, 3, "0", "/ircordenada {ffff00}<X> {0000ff}<Y> {ff0000}<Z> {cccccc}Interior {ffffff}VirtualWorld");
    SetPosEx(playerid, x, y, z, 0.0, int, vw, 0);
    format(string, sizeof string, "Teleportado a {ffff00}%f, {0000ff}%f, {ff0000}%f, {cccccc}%d, {ffffff}%d", x, y, z, int, vw);
    _Mensaje(playerid, 2, "0", string);
    return 1;
}

CMD:saludar(playerid, params[])
{
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/saludar [id jugador]");
	if (!IsPlayerConnected(params[0])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (playerid != params[0])
	{
		if (CercaDelWeon(2.0, playerid, params[0]))
		{
			new string[128];
			Saludo_ID[params[0]] = playerid;
			format(string, sizeof string, "%s te a enviado una peticion de saludo. (/aceptar)", NombreJugador(playerid));
			_Mensaje(params[0], 4, "33CCFF", string);

		} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no se encuentra cerca de ti.");
	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes saludarte a ti mismo.");
	return 1;
}



CMD:expulsarveh(playerid, params[]) {
    if (IsPlayerInAnyVehicle(playerid)) {
        new porno = GetPlayerState(playerid), playerid2;
        if (porno != PLAYER_STATE_DRIVER) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres el conductor.");
        if (!sscanf(params, "d", playerid2)) {
            if (IsPlayerConnected(playerid2)) {
                if (playerid2 == playerid) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No te puedes echar ati mismo.");
                if (IsPlayerInAnyVehicle(playerid2)) {
                    if (GetPlayerVehicleID(playerid) == GetPlayerVehicleID(playerid2)) {
                        AccionesRol(playerid2, 0, "fue expulsado del vehiculo.");
                        RemovePlayerFromVehicle(playerid2);
                        DeletePVar(playerid2, "Congelado");
                        TogglePlayerControllable(playerid2, 1);
                    } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no esta en tu vehiculo.");
                } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no esta en un vehiculo.");
            } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
        } else _Mensaje(playerid, 3, "0", "/expulsarveh [id jugador]");
    } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en ningun vehiculo.");
    return 1;
}
CMD:eject(playerid, params[]) return cmd_expulsarveh(playerid, params);

CMD:borrarauto(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] >= 10)
	{
	     if (!sscanf(params, "d", params[0]))
		 {
		   new string[128];
           DeleteVehiclePlayer(params[0]);
           format(string, sizeof string, "Administracion: %s utilizo /borrarauto, Vehiculo ID: %d.", NombreRJugador(playerid), params[0]);
		   MensajeAdmin(string);
         }else _Mensaje(playerid, 3, "0", "/borrarauto [id vehiculo]");
	}
	return 1;
}

CMD:limpiarant(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Limpiarant.");
	OnDuty
	new playerid2, string[256];
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/limpiartodo [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	alm(InfoJugador[playerid2][jRazonDelito1], "Ninguno");
	alm(InfoJugador[playerid2][jRazonDelito2], "Ninguno");
	alm(InfoJugador[playerid2][jRazonDelito3], "Ninguno");
	alm(InfoJugador[playerid2][jRazonDelito4], "Ninguno");
	alm(InfoJugador[playerid2][jRazonDelito5], "Ninguno");
	alm(InfoJugador[playerid2][jRazonDelito6], "Ninguno");
	alm(InfoJugador[playerid2][jRazonDelito7], "Ninguno");
	alm(InfoJugador[playerid2][jRazonDelito8], "Ninguno");
	alm(InfoJugador[playerid2][jRazonDelito9], "Ninguno");
	alm(InfoJugador[playerid2][jRazonDelito10], "Ninguno");
	InfoJugador[playerid2][jEstrellas] = 0;
	Sin_Cargos(playerid2);
	InfoJugador[playerid2][jMinEstrellas] = 0;
	alm(InfoJugador[playerid2][jQuienPuso], "Ninguno");
	Loop(x, 10, 0)
	{
		InfoJugador[playerid2][jDelito][x] = 0;
		new gds[32];
		format(gds, sizeof gds, "Delito%d", x+1);
		guardar_int_mysql("cuentas", gds, InfoJugador[playerid2][jID], 0);
		format(gds, sizeof gds, "DelitoRazon%d", x+1);
		guardar_string_mysql("cuentas", gds, InfoJugador[playerid2][jID], "Ninguno");
	}
	guardar_int_mysql("cuentas", "Estrellas", InfoJugador[playerid2][jID], InfoJugador[playerid2][jEstrellas]);
	guardar_int_mysql("cuentas", "MinEstrellas", InfoJugador[playerid2][jID], InfoJugador[playerid2][jMinEstrellas]);
	guardar_string_mysql("cuentas", "QuienPuso", InfoJugador[playerid2][jID], InfoJugador[playerid2][jQuienPuso]);
	format(string, sizeof string, "Administracion: %s utilizo /limpiarant, Jugador ID: %s[%d].", NombreRJugador(playerid), NombreRJugador(playerid2), playerid2);
	MensajeAdmin(string);
	return 1;
}

CMD:limpiartodo(playerid, params[])
{
	new playerid2, string[256];
	if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Limpiartodo.");
	OnDuty
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/limpiartodo [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	QuitarBolsillos(playerid2);
	QuitarEspalda(playerid2);
	QuitarCinturon(playerid2);
	QuitarManos(playerid2);
	format(string, sizeof string, "Administracion: %s utilizo /limpiartodo, Jugador ID: %s[%d].", NombreRJugador(playerid), NombreRJugador(playerid2), playerid2);
	MensajeAdmin(string);
	return 1;
}

CMD:limpiarsuelo(playerid, params[])
{
    if (InfoJugador[playerid][jAdmin] < 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando.");
    OnDuty
    new ObjetoRecogido, string[150];
	for(new i = 0; i < sizeof(InfoSuelo); i++)
	{
	    if (InfoSuelo[i][DropID] == 0) break;
	    if (ObjetoCaido[i] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(ObjetoCaido[i]);
			ObjetoCaido[i] = INVALID_STREAMER_ID;
		}
		if (IsValidDynamic3DTextLabel(InfoSuelo[i][TextoTirado]))
		{
			DestroyDynamic3DTextLabel(InfoSuelo[i][TextoTirado]);
			InfoSuelo[i][TextoTirado] = Text3D:INVALID_3DTEXT_ID;
		}
	    InfoSuelo[i][DropPosX] = 0.0;
		InfoSuelo[i][DropPosY] = 0.0;
		InfoSuelo[i][DropPosZ] = 0.0;
		InfoSuelo[i][DropID] = 0;
		InfoSuelo[i][DropCantidad] = 0;
		KillTimer(ObjTimer[i]);
		Streamer_Update(playerid);
		ObjetoRecogido++;
	}
	if(ObjetoRecogido == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No hay objetos tirados en el suelo.");
	format(string, sizeof string, "Administracion: %s(%d) ha limpiado los %d objetos tirados en el suelo.", NombreRJugador(playerid), playerid, ObjetoRecogido);
	MensajeAdmin(string);
	return 1;
}

CMD:limpiarbolsillos(playerid, params[])
{
	new playerid2, string[256];
	if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Limpiarbolsillos.");
	OnDuty
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/limpiarbolsillos [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	QuitarBolsillos(playerid2);
	format(string, sizeof string, "Administracion: %s utilizo /limpiarbolsillos, Jugador ID: %s[%d].", NombreRJugador(playerid), NombreRJugador(playerid2), playerid2);
	MensajeAdmin(string);
	return 1;
}

CMD:limpiarmanos(playerid, params[])
{
	new playerid2, string[256];
	if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Limpiarmanos.");
	OnDuty
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/limpiarmanos [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	QuitarManos(playerid2);
	format(string, sizeof string, "Administracion: %s utilizo /limpiarmanos, Jugador ID: %s[%d].", NombreRJugador(playerid), NombreRJugador(playerid2), playerid2);
	MensajeAdmin(string);
	return 1;
}

CMD:limpiarcinturon(playerid, params[])
{
	new playerid2, string[256];
	if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Limpiarcinturon.");
	OnDuty
	if (!sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/limpiarcinturon [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	QuitarCinturon(playerid2);
	format(string, sizeof string, "Administracion: %s utilizo /limpiarcinturon, Jugador ID: %s[%d].", NombreRJugador(playerid), NombreRJugador(playerid2), playerid2);
	MensajeAdmin(string);
	return 1;
}

CMD:condinero(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /ConDinero.");
	OnDuty
	_Mensaje(playerid, 4, "FFFFFF", " Usuarios con dinero mayor a {00A60E}$500.000");
	foreach(Player, i) if (IsPlayerConnectedEx(i))
	{
		if (GetPlayerCash(i)+InfoJugador[i][jBanco] > 500000)
		{
			SendClientMessageEx(playerid, -1, "(%d) - %s | Horas: ({FF0000}%d{b0b0b0}) | Dinero: {00A60E}$%d", i, NombreRJugador(i), InfoJugador[i][jHorasConectado], GetPlayerCash(i)+InfoJugador[i][jBanco]);
		}
	}
	return 1;
}

CMD:limpiarespalda(playerid, params[])
{
	new playerid2, string[256];
	if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Limpiarespalda.");
	OnDuty
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/limpiarespalda [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	QuitarEspalda(playerid2);
	format(string, sizeof string, "Administracion: %s utilizo /limpiarespalda, Jugador ID: %s[%d].", NombreRJugador(playerid), NombreRJugador(playerid2), playerid2);
	MensajeAdmin(string);
	return 1;
}

CMD:darstat(playerid, params[]) {
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Darstat.");
	if (sscanf(params, "uii", params[0], params[1], params[2])) {
		_Mensaje(playerid, 3, "0", "/darstat [id jugador] [codigo] [cantidad]");
		_Mensaje(playerid, 2, "0", "1.Nivel - 2.Experiencia - 3.Telefono - 4.Horas On.");
		_Mensaje(playerid, 2, "0", "5.Trabajo1 - 6. Trabajo2 - 7. Trabajo3 - 8. FD VIP.");
		return _Mensaje(playerid, 2, "0", "9. FMes VIP - 10. jail ic - 11. jail ooc - 12.Fuerza 13.materiales.");
	}
	new string[128];
	if (!IsPlayerConnectedEx(params[0])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	switch (params[1]) {
		case 1: {
			InfoJugador[params[0]][jNivel] = params[2];
			SetPlayerScore(params[0], InfoJugador[params[0]][jNivel]);
			guardar_int_mysql("cuentas", "Nivel", InfoJugador[params[0]][jID], InfoJugador[params[0]][jNivel]);
			format(string, sizeof string, "Administracion: %s ha establecido el nivel a [%d] de %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
			Actualizar(params[0]);
		}
		case 2: {
			InfoJugador[params[0]][jExperiencia] = params[2];
			guardar_int_mysql("cuentas", "Experiencia", InfoJugador[params[0]][jID], InfoJugador[params[0]][jExperiencia]);
			format(string, sizeof string, "Administracion: %s ha establecido la experiencia a [%d] de %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
			Actualizar(params[0]);
		}
		case 3: {
			InfoJugador[params[0]][jTelefono] = params[2];
			guardar_int_mysql("cuentas", "Telefono", InfoJugador[params[0]][jID], InfoJugador[params[0]][jTelefono]);
			format(string, sizeof string, "Administracion: %s ha establecido el numero a [%d] de %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
		}
		case 4: {
			InfoJugador[params[0]][jHorasConectado] = InfoJugador[params[0]][jHorasConectado] + params[2];
			guardar_int_mysql("cuentas", "HorasConectado", InfoJugador[params[0]][jID], InfoJugador[params[0]][jHorasConectado]);
			format(string, sizeof string, "Administracion: %s le ha dado [%d] de horas on a %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
		}
		case 5: {
			InfoJugador[params[0]][jTrabajo1] = params[2];
			guardar_int_mysql("cuentas", "Trabajo1", InfoJugador[params[0]][jID], InfoJugador[params[0]][jTrabajo1]);
			format(string, sizeof string, "Administracion: %s ha establecido el trabajo 1 a [%d] de %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
		}
		case 6: {
			InfoJugador[params[0]][jTrabajo2] = params[2];
			guardar_int_mysql("cuentas", "Trabajo2", InfoJugador[params[0]][jID], InfoJugador[params[0]][jTrabajo2]);
			format(string, sizeof string, "Administracion: %s ha establecido el trabajo 2 a [%d] de %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
		}
		case 7: {
			InfoJugador[params[0]][jTrabajo3] = params[2];
			guardar_int_mysql("cuentas", "Trabajo3", InfoJugador[params[0]][jID], InfoJugador[params[0]][jTrabajo3]);
			format(string, sizeof string, "Administracion: %s ha establecido el trabajo 3 a [%d] de %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
		}
		case 8: {
			InfoJugador[params[0]][jDiaVIP] = params[2];
			guardar_int_mysql("cuentas", "DiaVIP", InfoJugador[params[0]][jID], InfoJugador[params[0]][jDiaVIP]);
			format(string, sizeof string, "Administracion: %s ha establecido el fin de dia vip a [%d] de %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
		}
		case 9: {
			InfoJugador[params[0]][jMesVIP] = params[2];
			guardar_int_mysql("cuentas", "MesVIP", InfoJugador[params[0]][jID], InfoJugador[params[0]][jMesVIP]);
			format(string, sizeof string, "Administracion: %s ha establecido el fin de mes vip a [%d] de %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
		}
		case 10: {
			InfoJugador[params[0]][jArrestos] = params[2];
			guardar_int_mysql("cuentas", "Arrestos", InfoJugador[params[0]][jID], InfoJugador[params[0]][jArrestos]);
			format(string, sizeof string, "Administracion: %s ha establecido los arrestos a [%d] de %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
		}
		case 11: {
			InfoJugador[params[0]][jSanciones] = params[2];
			guardar_int_mysql("cuentas", "Sanciones", InfoJugador[params[0]][jID], InfoJugador[params[0]][jSanciones]);
			format(string, sizeof string, "Administracion: %s ha establecido los jail's a [%d] de %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
		}
		case 12: {
			InfoJugador[params[0]][jFuerza] = params[2];
			guardar_int_mysql("cuentas", "Fuerza", InfoJugador[params[0]][jID], InfoJugador[params[0]][jFuerza]);
			format(string, sizeof string, "Administracion: %s ha establecido la fuerza a [%d] de %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
		}
		case 13: {
			InfoJugador[params[0]][jMateriales] += params[2];
			guardar_int_mysql("cuentas", "Materiales", InfoJugador[params[0]][jID], InfoJugador[params[0]][jMateriales]);
			format(string, sizeof string, "Administracion: %s ha dado [%d] de materiales a %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
		}
		case 14: {
			InfoJugador[params[0]][jTroncos] += params[2];
			guardar_int_mysql("cuentas", "Troncos", InfoJugador[params[0]][jID], InfoJugador[params[0]][jTroncos]);
			format(string, sizeof string, "Administracion: %s ha dado [%d] de troncos a %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
		}
		case 15: {
			InfoJugador[params[0]][jTickets] += params[2];
			guardar_int_mysql("cuentas", "Tickets", InfoJugador[params[0]][jID], InfoJugador[params[0]][jTickets]);
			format(string, sizeof string, "Administracion: %s ha dado [%d] de tickets a %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
		}
		case 16: {
			InfoJugador[params[0]][jHabilidad1][3] += params[2];
			guardar_int_mysql("cuentas", "Habilidad1_4", InfoJugador[params[0]][jID], InfoJugador[params[0]][jHabilidad1][3]);
			format(string, sizeof string, "Administracion: %s ha dado [%d] de habilidad delincuente a %s", NombreRJugador(playerid), params[2], NombreRJugador(params[0]));
			MensajeAdmin(string);
		}
		default: ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Codigo invalido.");
	}
    return 1;
}

CMD:puente(playerid)
{
	new string[256], encendio = random(4), vehicleid = GetPlayerVehicleID(playerid);
    if (InfoJugador[playerid][jGanzuas] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes ganzuas.");
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres el conductor.");
	if (!IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en un vehiculo.");
	if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando si estas en este tipo de vehiculos.");
	if(!CheckTimer(10, IntentarD[playerid])) {
    InfoJugador[playerid][jGanzuas]--;
	guardar_int_mysql("cuentas", "Ganzuas", InfoJugador[playerid][jID], InfoJugador[playerid][jGanzuas]);
    IntentarD[playerid] = gettime();
	switch (encendio)
		{
			case 0: GameTextForPlayer(playerid, "~p~ganzuas inservibles...", 2500, 3);
			case 1: {

				new location[MAX_ZONE_NAME], Float: x, Float: y, Float: z;
				GetPlayerPos(playerid, x, y, z);
				Get2DZone(location, MAX_ZONE_NAME, x, y, z);

				GameTextForPlayer(playerid, "~p~haciendo puente...", 2500, 3);
				AccionesRol(playerid, 0, "utiliza unas ganzuas y cruza los cables de encendido.");
				SetTimerEx("EncenderVehiculo", 2500, 0, "dd", vehicleid, playerid);
				format(string, sizeof string, "CENTRAL: Informe reciente en %s, robo de un vehiculo %s.", location, GetVehicleName(vehicleid));
				SendRadioFaction(1, C_COLORPOLICIA, string);

			}
			case 2: GameTextForPlayer(playerid, "~p~ganzuas rotas...", 2500, 3);
	    }
    } else {
        format(string, 144, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(10, IntentarD[playerid]));
        ShowPlayerFooter(playerid, string);
    }
    return 1;
}

CMD:atar(playerid, params[])
{
    new playerid2, MsgCheckMe[MAX_TEXT_CHAT];
    if (InfoJugador[playerid][jNivel] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas ser nivel 2 para arriba.");
    if (VendasYSoga[playerid] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes una cuerda.");
    if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/atar [id jugador]");
    if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
    if (!CercaDelWeon(4.0, playerid, playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no se encuentra cerca de ti.");
    if (Atado[playerid2] == 0)
	{
		Atado[playerid2] = 1;
		format(MsgCheckMe, sizeof(MsgCheckMe), "agarra una cuerda y ata a %s.", NombreJugador(playerid2));
		AccionesRol(playerid, 0, MsgCheckMe);
		return 1;
	}
	Atado[playerid2] = 0;
	format(MsgCheckMe, sizeof(MsgCheckMe), "agarra una cuerda y desata a %s.", NombreJugador(playerid2));
	AccionesRol(playerid, 0, MsgCheckMe);
	TogglePlayerControllable(playerid2, 1);
	return 1;
}

CMD:vendar(playerid, params[])
{
    new playerid2, MsgCheckMe[MAX_TEXT_CHAT];
    if (InfoJugador[playerid][jNivel] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas ser mayor o igual a nivel 2.");
    if (VendasYSoga[playerid] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes una venda.");
    if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/vendar [id jugador]");
    if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
    if (!CercaDelWeon(4.0, playerid, playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no se encuentra cerca de ti.");
    if (Vendado[playerid2] == 0)
	{
		Vendado[playerid2] = 1;
		format(MsgCheckMe, sizeof(MsgCheckMe), "venda los ojos de %s.", NombreJugador(playerid2));
		AccionesRol(playerid, 0, MsgCheckMe);
		SetPlayerCameraPos(playerid2, 0.0, 0.0, 1000);
		SetPlayerCameraLookAt(playerid2, 0.0, 0.0, 5000);
		return 1;
	}
	Vendado[playerid2] = 0;
	format(MsgCheckMe, sizeof(MsgCheckMe), "desvenda los ojos de %s.", NombreJugador(playerid2));
	AccionesRol(playerid, 0, MsgCheckMe);
	SetCameraBehindPlayer(playerid2);
    return 1;
}

CMD:entrenar(playerid)
{
	new string[128], DetectarPressBanca, banca;
	if (InfoJugador[playerid][jFuerza]	> 998) return _Mensaje(playerid, 4, "FFFFFF", "Ya posees el maximo de fuerza, ya vete farmero.");
	if (HaciendoPressBanca[playerid] == 1) return _Mensaje(playerid, 4, "FFFFFF", "Ya estas haciendo algun tipo de ejercicio.");
	if (InfoJugador[playerid][jTiempos][2] > 0) {
		format(string, sizeof string, "Estas cansado de entrenar. Debes esperar %d minutos.", InfoJugador[playerid][jTiempos][2]);
		_Mensaje(playerid, 2, "0", string);
		return 1;
	}
	for (new x; x < sizeof(PressBancaPlayerPos); x++)
	{
		if (_enPos(playerid, 2.0, PressBancaPlayerPos[x][0], PressBancaPlayerPos[x][1], PressBancaPlayerPos[x][2]))
		{
			DetectarPressBanca = 1;
			banca = x;
			if (UsandoGym[banca] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Estan usando la maquina, espera a que terminen.");
			if (PressBancaBarraObjeto[x] != INVALID_STREAMER_ID)
			{
				DestroyDynamicObject(PressBancaBarraObjeto[x]);
				PressBancaBarraObjeto[x] = INVALID_STREAMER_ID;
			}
			break;
		}
	}
	if (DetectarPressBanca == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas al lado de una maquina para hacer ese ejercicio.");
	new MsgCheckMe[MAX_TEXT_CHAT];
	format(MsgCheckMe, sizeof(MsgCheckMe), "se tumba en la maquina de press banca y comienza a levantar una barra de %dKg.", InfoJugador[playerid][jFuerza] / 100 * 25);
	AccionesRol(playerid, 0, MsgCheckMe);
	HaciendoPressBanca[playerid] = 1;
	TogglePlayerControllable(playerid, 0);
	SetPlayerPosEx(playerid, PressBancaPlayerPos[banca][0], PressBancaPlayerPos[banca][1], PressBancaPlayerPos[banca][2]);
	SetPlayerFacingAngle(playerid, PressBancaPlayerPos[banca][3]);
	ApplyAnimation(playerid, "benchpress", "gym_bp_geton", 1, 0, 0, 0, 1, 0, 1);
	_Mensaje(playerid, 2, "0", "Pulsa 'N' tantas veces como puedas en 1 minuto o escribe '/Dentrenar' para dejar de hacer ejercicio.");
	SetPlayerAttachedObject(playerid, 9, 2913, 6);
	UsandoGym[banca] = 1;
	SetTimerEx("FinEntrenar", 60000, false, "ii", playerid,banca+1);
	return 1;
}
CMD:dentrenar(playerid)
{
	if (HaciendoPressBanca[playerid] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas haciendo ningun tipo de ejercicio.");
	new banca;
	for (new x; x < sizeof(PressBancaPlayerPos); x++)
	{
		if (_enPos(playerid, 2.0, PressBancaPlayerPos[x][0], PressBancaPlayerPos[x][1], PressBancaPlayerPos[x][2]))
		{
			banca = x;
			break;
		}
	}
	FinEntrenar(playerid,banca+1);
	return 1;
}

CMD:dnifalso(playerid, params[]) {
	new string[300], playerid2, sex[18], otext[36];
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/dnifalso [id jugador]");
	if (!IsPlayerConnected(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (InfoJugador[playerid][jFakeDNI] == 0) return _Mensaje(playerid, 0, "516", "No posees un documento falso.");
	if (CercaDelWeon(4.0, playerid, playerid2)) {
		if (InfoJugador[playerid][jSexo] == 1) sex = "Hombre";
		else if (InfoJugador[playerid][jSexo] == 2) sex = "Mujer";
		if (InfoJugador[playerid][jCiudad] == 1) otext = "North America";
		else if (InfoJugador[playerid][jCiudad] == 2) otext = "Las Vegas";
		else if (InfoJugador[playerid][jCiudad] == 3) otext = "San Francisco";
		SendClientMessage(playerid2, 0xb0b0b0ff, "|_______DOCUMENTOS_______|");
		format(string, sizeof string, "Nombre completo: %s - Sexo: %s - Edad: %d", InfoJugador[playerid][jFakeNombre], sex, InfoJugador[playerid][jFakeEdad]);
		SendClientMessage(playerid2, 0xffffffff, string);
		format(string, sizeof string, "Nacionalidad: %s - Documento: %d - Estado: Soltero", otext, InfoJugador[playerid][jFakeDNI]);
		SendClientMessage(playerid2, 0xffffffff, string);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		PlayerPlaySound(playerid2, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof string, "muestra sus documentos a %s.", NombreJugador(playerid2));
		AccionesRol(playerid, 0, string);
	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no se encuentra cerca de ti.");
	return 1;
}
CMD:documentofalso(playerid, params[]) return cmd_dnifalso(playerid, params);

CMD:dni(playerid, params[]) {
	new string[300], playerid2, sex[18], otext[36];
	if (InfoJugador[playerid][jDocumento] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No posees un documento, saca uno en el ayuntamiento.");
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/documento [id jugador]");
	if (!IsPlayerConnected(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (EnServicioADM[playerid2] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes hacer esto con un staff en servicio.");
	if (CercaDelWeon(4.0, playerid, playerid2)) {
		if (InfoJugador[playerid][jSexo] == 1) sex = "Hombre";
		else if (InfoJugador[playerid][jSexo] == 2) sex = "Mujer";
		if (InfoJugador[playerid][jCiudad] == 1) otext = "San Andreas";
		else if (InfoJugador[playerid][jCiudad] == 2) otext = "Las Vegas";
		else if (InfoJugador[playerid][jCiudad] == 3) otext = "San Francisco";
		new matrimonio[120];
		switch(InfoJugador[playerid][jCasado])
		{
			case 0: format(matrimonio, sizeof matrimonio, "Soltero");
			case 1: format(matrimonio, sizeof matrimonio, "Casado con %s", InfoJugador[playerid][jMatrimonio]);
		}
		SendClientMessage(playerid2, 0xb0b0b0ff, "|_______DOCUMENTOS_______|");
		format(string, sizeof string, "Nombre completo: %s - Sexo: %s - Edad: %d", NombreRJugador(playerid), sex, InfoJugador[playerid][jEdad]);
		SendClientMessage(playerid2, 0xffffffff, string);
		format(string, sizeof string, "Nacionalidad: %s - Documento: %d - Estado: %s", otext, InfoJugador[playerid][jDocumento], matrimonio);
		SendClientMessage(playerid2, 0xffffffff, string);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		PlayerPlaySound(playerid2, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof string, "muestra sus documentos a %s.", NombreJugador(playerid2));
		AccionesRol(playerid, 0, string);
	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no se encuentra cerca de ti.");
	return 1;
}
CMD:documento(playerid, params[]) return cmd_dni(playerid, params);

CMD:quitardnifalso(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Quitardni.");
	OnDuty
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/quitardni [id jugador]");
	if (!IsPlayerConnected(params[0])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (InfoJugador[params[0]][jFakeDNI] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no tiene un DNI Falso.");
	new string[128];
	InfoJugador[params[0]][jFakeDNI] = 0;
	InfoJugador[params[0]][jFakeEdad] = 0;
	alm(InfoJugador[params[0]][jFakeNombre], "Ninguno");
	guardar_int_mysql("cuentas", "FakeEdad", InfoJugador[params[0]][jID], InfoJugador[params[0]][jFakeEdad]);
	guardar_int_mysql("cuentas", "FakeDNI", InfoJugador[params[0]][jID], InfoJugador[params[0]][jFakeDNI]);
	guardar_string_mysql("cuentas", "FakeNombre", InfoJugador[params[0]][jID], InfoJugador[params[0]][jFakeNombre]);
	format(string, sizeof string, "Administracion: %s utilizo /quitardnifalso, Jugador ID: %s[%d].", NombreRJugador(playerid), NombreRJugador(params[0]), params[0]);
	MensajeAdmin(string);
	return 1;
}

CMD:licencias(playerid, params[]) {
	new car[18], fly[18], boat[18], cam[18], string[300], playerid2;
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/licencias [id jugador]");
	if (!IsPlayerConnected(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (EnServicioADM[playerid2] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes hacer esto con un staff en servicio.");
	if (CercaDelWeon(4.0, playerid, playerid2)) {
		if (InfoJugador[playerid][jLicencias][1] == 1) car = "Si";
		else car = "No";
		if (InfoJugador[playerid][jLicencias][2] == 1) cam = "Si";
		else cam = "No";
		if (InfoJugador[playerid][jLicencias][4] == 1) fly = "Si";
		else fly = "No";
		if (InfoJugador[playerid][jLicencias][5] == 1) boat = "Si";
		else boat = "No";
		format(string, sizeof string, "|_______LICENCIAS: %s_______|", NombreRJugador(playerid));
		SendClientMessage(playerid2, 0xb0b0b0ff, string);
		format(string, sizeof string, "Conducir: %s - Vuelo: %s", car, fly);
		SendClientMessage(playerid2, 0xffffffff, string);
		format(string, sizeof string, "Camionero: %s - Bote: %s", cam, boat);
		SendClientMessage(playerid2, 0xffffffff, string);
		if(InfoJugador[playerid][jLicencias][0] == 1)
		{
			format(string, sizeof string, "Armas: Vence en %s", generarTiempo(InfoJugador[playerid][jTiempoLicencia1] - gettime()));
			SendClientMessage(playerid2, 0xCCCC00FF, string);
		}
		else if(InfoJugador[playerid][jLicencias][0] == 0)
		{
			SendClientMessage(playerid2, 0xFFFFFFFF, "Armas: No");
		}
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		PlayerPlaySound(playerid2, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof string, "le muestra sus licencias a %s.", NombreJugador(playerid2));
		AccionesRol(playerid, 0, string);
	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no se encuentra cerca de ti.");
	return 1;
}

CMD:dar(playerid, params[])
{
	new playerid2, choice[32], amount, MsgCheckMe[MAX_TEXT_CHAT];
	if (sscanf(params, "ds[32]d", playerid2, choice, amount))
	{
		_Mensaje(playerid, 3, "0", "/dar [id jugador] [item] [cantidad]");
		_Mensaje(playerid, 1, "Marihuana, Cocaina, Crack, Heroina, LSD", "Items:");
		return 1;
	}
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador esta desconectado.");
	if (!CercaDelWeon(5.0, playerid, playerid2)) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no esta cerca tuyo."); return 1; }
	if (playerid2 == playerid) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando contigo mismo!");
	if (amount < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes la cantidad que pusiste.");
	if (strcmp(choice, "marihuana", true) == 0)
	{
		if (InfoJugador[playerid][jManoDerecha] != 74) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas tener la bolsita de marihuana en la mano derecha sacalo con /bol."); return 1; }
		if (InfoJugador[playerid][jManoDerechaCant] < amount) return SendClientMessageEx(playerid, -1, "* No tienes %d gramos de marihuana, solo tienes %d gramos.", amount, InfoJugador[playerid][jManoDerechaCant]);
		new access = 0;
		Loop(x, 9, 0) if (InfoJugador[playerid2][jBolsillo][x] == 0)
		{
			InfoJugador[playerid][jManoDerechaCant] -= amount;
			InfoJugador[playerid2][jBolsillo][x] = 74;
			InfoJugador[playerid2][jBolsilloCant][x] = amount;
			new grs[32];
			format(grs, sizeof grs, "Bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid2][jID], InfoJugador[playerid2][jBolsillo][x]);
			format(grs, sizeof grs, "Cantidad_bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid2][jID], InfoJugador[playerid2][jBolsilloCant][x]);
			access = 1;
			break;
		}
		if (access == 0) return SendClientMessage(playerid, -1, "* Ese jugador no tiene espacio en sus bolsillos.");
		SendClientMessageEx(playerid, 0xFFF000FF, "Recibiste %d contenido de marihuana, revisa /bol.", amount);
		format(MsgCheckMe, sizeof(MsgCheckMe), "le da algo a %s.", NombreJugador(playerid2));
		AccionesRol(playerid, 0, MsgCheckMe);
		ActualizarManos(playerid);
	}
	else if (strcmp(choice, "cocaina", true) == 0)
	{
		if (InfoJugador[playerid][jManoDerecha] != 75) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas tener la bolsita de cocaina en la mano derecha sacalo con /bol."); return 1; }
		if (InfoJugador[playerid][jManoDerechaCant] < amount) return SendClientMessageEx(playerid, -1, "* No tienes %d gramos de cocaina, solo tienes %d gramos.", amount, InfoJugador[playerid][jManoDerechaCant]);
		new access = 0;
		Loop(x, 9, 0) if (InfoJugador[playerid2][jBolsillo][x] == 0)
		{
			InfoJugador[playerid][jManoDerechaCant] -= amount;
			InfoJugador[playerid2][jBolsillo][x] = 75;
			InfoJugador[playerid2][jBolsilloCant][x] = amount;
			new grs[32];
			format(grs, sizeof grs, "Bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid2][jID], InfoJugador[playerid2][jBolsillo][x]);
			format(grs, sizeof grs, "Cantidad_bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid2][jID], InfoJugador[playerid2][jBolsilloCant][x]);
			access = 1;
			break;
		}
		if (access == 0) return SendClientMessage(playerid, -1, "* Ese jugador no tiene espacio en sus bolsillos.");
		SendClientMessageEx(playerid, 0xFFF000FF, "Recibiste %d contenido de cocaina, revisa /bol.", amount);
		format(MsgCheckMe, sizeof(MsgCheckMe), "le da algo a %s.", NombreJugador(playerid2));
		AccionesRol(playerid, 0, MsgCheckMe);
		ActualizarManos(playerid);
	}
	else if (strcmp(choice, "crack", true) == 0)
	{
		if (InfoJugador[playerid][jManoDerecha] != 76) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas tener la bolsita de crack en la mano derecha sacalo con /bol."); return 1; }
		if (InfoJugador[playerid][jManoDerechaCant] < amount) return SendClientMessageEx(playerid, -1, "* No tienes %d gramos de crack, solo tienes %d gramos.", amount, InfoJugador[playerid][jManoDerechaCant]);
		new access = 0;
		Loop(x, 9, 0) if (InfoJugador[playerid2][jBolsillo][x] == 0)
		{
			InfoJugador[playerid][jManoDerechaCant] -= amount;
			InfoJugador[playerid2][jBolsillo][x] = 76;
			InfoJugador[playerid2][jBolsilloCant][x] = amount;
			new grs[32];
			format(grs, sizeof grs, "Bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid2][jID], InfoJugador[playerid2][jBolsillo][x]);
			format(grs, sizeof grs, "Cantidad_bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid2][jID], InfoJugador[playerid2][jBolsilloCant][x]);
			access = 1;
			break;
		}
		if (access == 0) return SendClientMessage(playerid, -1, "* Ese jugador no tiene espacio en sus bolsillos.");
		SendClientMessageEx(playerid, 0xFFF000FF, "Recibiste %d contenido de crack, revisa /bol.", amount);
		format(MsgCheckMe, sizeof(MsgCheckMe), "le da algo a %s.", NombreJugador(playerid2));
		AccionesRol(playerid, 0, MsgCheckMe);
		ActualizarManos(playerid);
	}
	else if (strcmp(choice, "heroina", true) == 0)
	{
		if (InfoJugador[playerid][jManoDerecha] != 77) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas tener la bolsita de heroina en la mano derecha sacalo con /bol."); return 1; }
		if (InfoJugador[playerid][jManoDerechaCant] < amount) return SendClientMessageEx(playerid, -1, "* No tienes %d gramos de crack, solo tienes %d gramos.", amount, InfoJugador[playerid][jManoDerechaCant]);
		new access = 0;
		Loop(x, 9, 0) if (InfoJugador[playerid2][jBolsillo][x] == 0)
		{
			InfoJugador[playerid][jManoDerechaCant] -= amount;
			InfoJugador[playerid2][jBolsillo][x] = 77;
			InfoJugador[playerid2][jBolsilloCant][x] = amount;
			new grs[32];
			format(grs, sizeof grs, "Bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid2][jID], InfoJugador[playerid2][jBolsillo][x]);
			format(grs, sizeof grs, "Cantidad_bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid2][jID], InfoJugador[playerid2][jBolsilloCant][x]);
			access = 1;
			break;
		}
		if (access == 0) return SendClientMessage(playerid, -1, "* Ese jugador no tiene espacio en sus bolsillos.");
		SendClientMessageEx(playerid, 0xFFF000FF, "Recibiste %d contenido de heroina, revisa /bol.", amount);
		format(MsgCheckMe, sizeof(MsgCheckMe), "le da algo a %s.", NombreJugador(playerid2));
		AccionesRol(playerid, 0, MsgCheckMe);
		ActualizarManos(playerid);
	}
	else if (strcmp(choice, "lsd", true) == 0)
	{
		if (InfoJugador[playerid][jManoDerecha] != 78) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas tener la trip de lsd en la mano derecha sacalo con /bol."); return 1; }
		if (InfoJugador[playerid][jManoDerechaCant] < amount) return SendClientMessageEx(playerid, -1, "* No tienes %d gramos de crack, solo tienes %d gramos.", amount, InfoJugador[playerid][jManoDerechaCant]);
		new access = 0;
		Loop(x, 9, 0) if (InfoJugador[playerid2][jBolsillo][x] == 0)
		{
			InfoJugador[playerid][jManoDerechaCant] -= amount;
			InfoJugador[playerid2][jBolsillo][x] = 78;
			InfoJugador[playerid2][jBolsilloCant][x] = amount;
			new grs[32];
			format(grs, sizeof grs, "Bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid2][jID], InfoJugador[playerid2][jBolsillo][x]);
			format(grs, sizeof grs, "Cantidad_bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid2][jID], InfoJugador[playerid2][jBolsilloCant][x]);
			access = 1;
			break;
		}
		if (access == 0) return SendClientMessage(playerid, -1, "* Ese jugador no tiene espacio en sus bolsillos.");
		SendClientMessageEx(playerid, 0xFFF000FF, "Recibiste %d trip de lsd, revisa /bol.", amount);
		format(MsgCheckMe, sizeof(MsgCheckMe), "le da algo a %s.", NombreJugador(playerid2));
		AccionesRol(playerid, 0, MsgCheckMe);
		ActualizarManos(playerid);
	}
	return 1;
}

CMD:purple(playerid)
{
	if(InfoJugador[playerid][jManoDerecha] != 93 && InfoJugador[playerid][jManoIzquierda] != 93){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un sprunk en ninguna mano."); return 1;}
	if(InfoJugador[playerid][jManoDerecha] != 125 && InfoJugador[playerid][jManoIzquierda] != 125){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas una botella de codeine."); return 1;}
	GameTextForPlayer(playerid, "~p~Sirviendo...", 5000, 3);
	SetTimerEx("_Purple", 4000, false, "i", playerid);
	return 1;
}
funcion _Purple(playerid)
{
	if(InfoJugador[playerid][jManoDerecha] != 93 && InfoJugador[playerid][jManoIzquierda] != 93){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un sprunk en ninguna mano."); return 1;}
	if(InfoJugador[playerid][jManoDerecha] != 125 && InfoJugador[playerid][jManoIzquierda] != 125){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas una botella de codeine."); return 1;}
	if(InfoJugador[playerid][jManoDerecha] == 125){InfoJugador[playerid][jManoDerechaCant] --;}
	else if(InfoJugador[playerid][jManoIzquierda] == 125){InfoJugador[playerid][jManoIzquierdaCant] --;}
	ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,0,0,0,0,1);
	if(InfoJugador[playerid][jManoDerecha] == 93){
		RemovePlayerAttachedObject(playerid, 6);
		InfoJugador[playerid][jManoDerecha] = 124;
		InfoJugador[playerid][jManoDerechaCant] = 5;
        PonerObjeto(playerid, 1, 124);

	} else if(InfoJugador[playerid][jManoIzquierda] == 93){
		RemovePlayerAttachedObject(playerid, 7);
		InfoJugador[playerid][jManoIzquierda] = 124;
		InfoJugador[playerid][jManoIzquierdaCant] = 5;
        PonerObjeto(playerid, 2, 124);
	}
	ActualizarManos(playerid);
	_Mensaje(playerid, 4, "ADC3E7", "Has mezclado las botellas correctamente, usa /beber.");
	return 1;
}

CMD:consumir(playerid, params[])
{
	if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en este momento.");
	if (GetPVarInt(playerid, "EnEvento") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en un evento.");
	new mundo = GetPlayerVirtualWorld(playerid), int = GetPlayerInterior(playerid);
	if (!sscanf(params, "s[32]", params[0]))
	{
		if (strcmp(params[0], "crack", true) == 0)
		{
			if (Consumiendo[playerid] != 0) return _Mensaje(playerid, 4, "b00000", " Consumiste algo hace poco, espera un tiempo.");
			//quita unidad de droga
			if (InfoJugador[playerid][jManoDerecha] == 76){InfoJugador[playerid][jManoDerechaCant] --;}
			else if (InfoJugador[playerid][jManoIzquierda] == 76){InfoJugador[playerid][jManoIzquierdaCant] --;}
			//detecta el nivel de drogadiccion.
			if (InfoJugador[playerid][jAdiccion][0] > 4 && InfoJugador[playerid][jAdiccion][0] < 10) _Mensaje(playerid, 2, "0", "Estas desarrollando una adiccion al crack.");
			if (InfoJugador[playerid][jAdiccion][0] == 10) _Mensaje(playerid, 2, "0", "Te has convertido en un adicto del crack."), InfoJugador[playerid][jAdiccion][0] = 17;
			InfoJugador[playerid][jAdiccion][0]++;
			//efecto - mensajes
			TextDrawShowForPlayer(playerid, EfectoCrack);
			Consumiendo[playerid] = 1;
			AccionesRol(playerid, 0, "se metio a la boca algo de la bolsita que lleva en mano.");
			_Mensaje(playerid, 4, "84C000", "Te sientes euforico.");
			//animacion
			TogglePlayerControllable(playerid, 0);
			ApplyAnimation(playerid,"CRACK","crckidle1",4.1,1,1,1,1,1, 1);
			PasarDroga(playerid, 1, 12);
			PlayerPlaySound(playerid,1150, 0.0, 0.0, 0.0);
			ActualizarManos(playerid);
			guardar_int_mysql("cuentas", "Adiccion1", InfoJugador[playerid][jID], InfoJugador[playerid][jAdiccion][0]);
        }
		if (strcmp(params[0], "marihuana", true) == 0)
		{
			if (InfoJugador[playerid][jManoDerecha] != 74 && InfoJugador[playerid][jManoIzquierda] != 74){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes una bolsita de marihuana en ninguna mano."); return 1;}
			if (InfoJugador[playerid][jManoDerecha] != 87 && InfoJugador[playerid][jManoIzquierda] != 87){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas un encendedor con gas para encender porro."); return 1;}
			if ((InfoJugador[playerid][jManoDerecha] == 87 && InfoJugador[playerid][jManoDerechaCant] <= 0) || (InfoJugador[playerid][jManoIzquierda] == 87 && InfoJugador[playerid][jManoIzquierdaCant] <= 0)){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas un encendedor con gas para encender porro."); return 1;}
			Loop(x, 9, 0) if (InfoJugador[playerid][jBolsillo][x] == 0)
			{
				if (InfoJugador[playerid][jManoDerecha] == 87){InfoJugador[playerid][jManoDerechaCant] --;}
				else if (InfoJugador[playerid][jManoIzquierda] == 87){InfoJugador[playerid][jManoIzquierdaCant] --;}
				if (InfoJugador[playerid][jManoDerecha] == 74)
				{
					InfoJugador[playerid][jManoDerechaCant] --;
					InfoJugador[playerid][jBolsillo][x] = 74;
					InfoJugador[playerid][jBolsilloCant][x] = InfoJugador[playerid][jManoDerechaCant];
					InfoJugador[playerid][jManoDerecha] = 132;
					InfoJugador[playerid][jManoDerechaCant] = 5;
					PonerObjeto(playerid, 1, 132);
				}
				else if(InfoJugador[playerid][jManoIzquierda] == 74)
				{
					InfoJugador[playerid][jManoIzquierdaCant] --;
					InfoJugador[playerid][jBolsillo][x] = 74;
					InfoJugador[playerid][jBolsilloCant][x] = InfoJugador[playerid][jManoIzquierdaCant];
					InfoJugador[playerid][jManoIzquierda] = 132;
					InfoJugador[playerid][jManoIzquierdaCant] = 5;
					PonerObjeto(playerid, 2, 132);
				}
				AccionesRol(playerid, 0, "armo un porro de marihuana y lo encendio.");
				PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
				_Mensaje(playerid, 4, "FFFFFF", "Hiciste un porro, usa /cfumar para consumirlo.");new grs[32];
				format(grs, sizeof grs, "Bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid][jID], InfoJugador[playerid][jBolsillo][x]);
				format(grs, sizeof grs, "Cantidad_bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid][jID], InfoJugador[playerid][jBolsilloCant][x]);
				ActualizarManos(playerid);
				return 1;
			}
			ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes donde guardar la marihuana, saca algo del /inv.");
		}
		if (strcmp(params[0], "cocaina", true) == 0)
		{
			if (Consumiendo[playerid] != 0) return _Mensaje(playerid, 4, "b00000", " Consumiste algo hace poco, espera un tiempo.");
			if (InfoJugador[playerid][jManoDerecha] != 75 && InfoJugador[playerid][jManoIzquierda] != 75){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes una bolsita de cocaina en ninguna mano."); return 1;}
			//quita unidad de droga
			if (InfoJugador[playerid][jManoDerecha] == 75){InfoJugador[playerid][jManoDerechaCant] --;}
			else if (InfoJugador[playerid][jManoIzquierda] == 75){InfoJugador[playerid][jManoIzquierdaCant] --;}
			//efecto - mensajes
			if (InfoJugador[playerid][jAdiccion][2] > 4 && InfoJugador[playerid][jAdiccion][2] < 10) _Mensaje(playerid, 2, "0", "Estas desarrollando una adiccion a la cocaina.");
			if (InfoJugador[playerid][jAdiccion][2] == 10) _Mensaje(playerid, 2, "0", "Te has convertido en un adicto de la cocaina."), InfoJugador[playerid][jAdiccion][2] = 17;
			InfoJugador[playerid][jAdiccion][2]++;
			if (mundo != 0 || int != 0) TextDrawShowForPlayer(playerid, EfectoCocaina);
			AccionesRol(playerid, 0, "esnifa una raya de cocaina.");
			_Mensaje(playerid, 4, "84C000", "Te sientes euforico y motivado, pero un tanto nervioso.");
			Consumiendo[playerid] = 3;
			PasarDroga(playerid, 3, 180);
			ActualizarManos(playerid);
			guardar_int_mysql("cuentas", "Adiccion3", InfoJugador[playerid][jID], InfoJugador[playerid][jAdiccion][2]);
		}
		if (strcmp(params[0], "heroina", true) == 0)
		{
			if (Consumiendo[playerid] != 0) return _Mensaje(playerid, 4, "b00000", " Consumiste algo hace poco, espera un tiempo.");
			if (InfoJugador[playerid][jManoDerecha] != 77 && InfoJugador[playerid][jManoIzquierda] != 77){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes una bolsita de heroina en ninguna mano."); return 1;}
			if (InfoJugador[playerid][jManoDerecha] != 87 && InfoJugador[playerid][jManoIzquierda] != 87){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas un encendedor con gas para fundir la heroina."); return 1;}
			if ((InfoJugador[playerid][jManoDerecha] == 87 && InfoJugador[playerid][jManoDerechaCant] <= 0) || (InfoJugador[playerid][jManoIzquierda] == 87 && InfoJugador[playerid][jManoIzquierdaCant] <= 0)){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas un encendedor con gas para fundir la heroina."); return 1;}
			//quita unidad de droga
			if (InfoJugador[playerid][jManoDerecha] == 77){InfoJugador[playerid][jManoDerechaCant] --;}
			else if (InfoJugador[playerid][jManoIzquierda] == 77){InfoJugador[playerid][jManoIzquierdaCant] --;}
			//quita unidad de encendedor
			if (InfoJugador[playerid][jManoDerecha] == 87){InfoJugador[playerid][jManoDerechaCant] --;}
			else if (InfoJugador[playerid][jManoIzquierda] == 87){InfoJugador[playerid][jManoIzquierdaCant] --;}
			//efecto - mensajes
			if (InfoJugador[playerid][jAdiccion][3] > 4 && InfoJugador[playerid][jAdiccion][3] < 10) _Mensaje(playerid, 2, "0", "Estas desarrollando una adiccion a la heroina.");
			if (InfoJugador[playerid][jAdiccion][3] == 10) _Mensaje(playerid, 2, "0", "Te has convertido en un adicto de la heroina."), InfoJugador[playerid][jAdiccion][3] = 17;
			InfoJugador[playerid][jAdiccion][3]++;
			TextDrawShowForPlayer(playerid, EfectoHeroina);
			AccionesRol(playerid, 0, "se inyecta heroina.");
			_Mensaje(playerid, 4, "84C000", "Una gran sensacion de placer te invade y te hace olvidar tus problemas.");
			Consumiendo[playerid] = 4;
			PasarDroga(playerid, 4, 360);
			TogglePlayerControllable(playerid, 0);
			ApplyAnimation(playerid,"CRACK","crckidle1",4.1,1,1,1,1,1, 1);
			PlayerPlaySound(playerid,1150, 0.0, 0.0, 0.0);
			ActualizarManos(playerid);
			guardar_int_mysql("cuentas", "Adiccion4", InfoJugador[playerid][jID], InfoJugador[playerid][jAdiccion][3]);
		}
		if (strcmp(params[0], "lsd", true) == 0)
		{
			if (Consumiendo[playerid] != 0) return _Mensaje(playerid, 4, "b00000", " Consumiste algo hace poco, espera un tiempo.");
			if (InfoJugador[playerid][jManoDerecha] != 78 && InfoJugador[playerid][jManoIzquierda] != 78){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un tripi de LSD en ninguna mano."); return 1;}
			//quita unidad de droga
			if (InfoJugador[playerid][jManoDerecha] == 78){InfoJugador[playerid][jManoDerechaCant] --;}
			else if (InfoJugador[playerid][jManoIzquierda] == 78){InfoJugador[playerid][jManoIzquierdaCant] --;}
			//efecto - mensajes
			if (InfoJugador[playerid][jAdiccion][4] > 4 && InfoJugador[playerid][jAdiccion][4] < 10) _Mensaje(playerid, 2, "0", "Estas desarrollando una adiccion al LSD.");
			if (InfoJugador[playerid][jAdiccion][4] == 10) _Mensaje(playerid, 2, "0", "Te has convertido en un adicto del LSD."), InfoJugador[playerid][jAdiccion][4] = 17;
			InfoJugador[playerid][jAdiccion][4]++;
			SetPlayerDrunkLevel(playerid, 4000);
			SetPlayerWeather(playerid, 23+random(18));
			AccionesRol(playerid, 0, "se coloca un tripi de LSD en la lengua.");
			_Mensaje(playerid, 4, "84C000", "Empiezas a tener alucinaciones y ves cosas extra?as por todas partes.");
			Consumiendo[playerid] = 5;
			PasarDroga(playerid, 5, 420);
			PlayerPlaySound(playerid,1150, 0.0, 0.0, 0.0);
			ActualizarManos(playerid);
			guardar_int_mysql("cuentas", "Adiccion5", InfoJugador[playerid][jID], InfoJugador[playerid][jAdiccion][4]);
		}
	} else _Mensaje(playerid, 3, "0", "/consumir [droga] - Drogas: Marihuana, Cocaina, Crack, Heroina, LSD");
	return 1;
}

stock PasarDroga(playerid, tipo, segundos = 0)
{
	new Float: Health = InfoJugador[playerid][jVida];
	if (tipo == 1) //crack
	{
		GameTextForPlayer(playerid, "~w~Consumiste ~r~Crack", 2500, 1);
		if(Health < 100) Dar_Vida(playerid, Health + 10);
	}
	else if (tipo == 2) //marihuana
	{
		new Float: Armor = InfoJugador[playerid][jChaleco];
		GameTextForPlayer(playerid, "~w~Consumiste ~g~Marihuana..", 2500, 1);
		if(Armor < 100) Dar_Chaleco(playerid, Armor + 2);
	}
	else if (tipo == 3) //cocaina
	{
		GameTextForPlayer(playerid, "~w~Consumiste ~y~Cocaina..", 2500, 1);
	}
	else if (tipo == 4) //heroina
	{
		GameTextForPlayer(playerid, "~w~Consumiste ~p~Heroina..", 2500, 1);
		Dar_Vida(playerid, Health + 20);
	}
	else if (tipo == 5) //lsd
	{
		GameTextForPlayer(playerid, "~w~Consumiste ~p~LSD..", segundos * 1000, 1);
	}
	SetTimerEx("Pasado", segundos * 1000, false, "i", playerid);
	return 1;
}

funcion Pasado(playerid)
{
	new tipo = Consumiendo[playerid];

	if(tipo == 1) TextDrawHideForPlayer(playerid, EfectoCrack);
	else if(tipo == 2) TextDrawHideForPlayer(playerid, EfectoPorro);
	else if(tipo == 3) TextDrawHideForPlayer(playerid, EfectoCocaina);
	else if(tipo == 4) TextDrawHideForPlayer(playerid, EfectoHeroina);

	SetPlayerWeather(playerid, clima);
	Consumiendo[playerid] = 0;
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, true);
	_Mensaje(playerid, 2, "0", "El efecto de la droga disminuye.");
	return 1;
}

CMD:parqueo(playerid)
{
	JugadorCercaPeaje(playerid, 1, 1, 0);
	return 1;
}
CMD:peaje(playerid)
{
	JugadorCercaPeaje(playerid, 0, 75, 0);
	return 1;
}

CMD:combustible(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres el conductor.");
	new id = ID_Gas(playerid), vehicleid = GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective, gformat[128];
	if (id == -1) return (playerid);
	if (GetPlayerCash(playerid) < cost_fuel) { format(gformat, sizeof gformat, "~n~~n~~n~~n~~r~No tienes suficiente dinero. ($%s)", diner_coma(cost_fuel)); ShowPlayerFooter(playerid, gformat); return 1; }
	if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo no necesita gasolina.");
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if (engine == VEHICLE_PARAMS_ON) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes tener el motor apagado.");
	if (GasolinaInicialVeh[vehicleid] >= 200) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El tanque de gasolina del vehiculo esta lleno.");
	if (VehiculoGasolina[playerid] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya te encuentras llenando el tanque de gasolina.");
	GameTextForPlayer(playerid, "~w~Llenando ~r~tanque...", 10000, 3);
	VehiculoGasolina[playerid] = 1;
	SetTimerEx("ShowFuelVehicle", 9500, false, "ddd", playerid, id, vehicleid);
	return 1;
}

forward ShowFuelVehicle(playerid, id, vehicleid);
public ShowFuelVehicle(playerid, id, vehicleid)
{
	if (!IsPlayerConnectedEx(playerid)) return 1;
	if (!GetVehicleModel(vehicleid)) return 1;
	new negocio = InfoGas[id][gsNegocio];
	if (InfoNegocio[negocio][nTipo] != 0)
	{
		InfoNegocio[negocio][nDinero] += cost_fuel;
		guardar_int_mysql("negocios", "Dinero", InfoNegocio[negocio][nID], InfoNegocio[negocio][nDinero]);
	}
	GivePlayerCash(playerid, -cost_fuel, "negocio gasolina");
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	VehiculoGasolina[playerid] = 0;
	GasolinaInicialVeh[vehicleid] += 200;
	SendClientMessageEx(playerid, 0x00CC00FF, "Se lleno el tanque de gasolina por $%s dolares.", diner_coma(cost_fuel));
	if (GasolinaInicialVeh[vehicleid] >= 200) GasolinaInicialVeh[vehicleid] = 200;
	return 1;
}

CMD:creargasolinera(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /creargasolinera.");
	new negocio;
    if (sscanf(params, "d", negocio)) return _Mensaje(playerid, 3, "0", "/creargasolinera [id negocio]");
	if (negocio < 1 || negocio > totalnegocios) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id de negocio 1 y %d.", totalnegocios);
	if (InfoNegocio[negocio][nTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de negocio no existe.", negocio);
	new id = -1, Float: x, Float: y, Float: z, string[256];
	GetPlayerPos(playerid, x, y, z);
	Loop(e, MAX_GASOLINERAS, 1) if (InfoGas[e][gsPosX] == 0.0)
	{
		id = e;
		break;
	}
	if (id == -1) return SendClientMessageEx(playerid, -1, "Se alcanzo el maximo de gasolineras %d, no se pueden crear mas.", MAX_GASOLINERAS);
	InfoGas[id][gsNegocio] = negocio;
	InfoGas[id][gsPosX] = x;
	InfoGas[id][gsPosY] = y;
	InfoGas[id][gsPosZ] = z;
	InfoGas[id][gsInterior] = GetPlayerInterior(playerid);
	InfoGas[id][gsVirtualWorld] = GetPlayerVirtualWorld(playerid);
	Articulos_Gasolinera(id);
	format(string, sizeof string, "Administracion: %s(%d) ha creado el punto de gas [ID:%d].", NombreRJugador(playerid), playerid, id);
	MensajeAdmin(string);
	new query[1028];
	//opcion idsql ya creada.
	if (InfoGas[id][gsID] != 0)
	{
		mysql_format(DBngrp, query, sizeof query, "UPDATE gasolineras SET Negocio = '%d', PosX = '%f', PosY = '%f', PosZ = '%F', Interior = '%d', VirtualWorld = '%d' WHERE ID = '%d'",
		InfoGas[id][gsNegocio],
		InfoGas[id][gsPosX],
		InfoGas[id][gsPosY],
		InfoGas[id][gsPosZ],
		InfoGas[id][gsInterior],
		InfoGas[id][gsVirtualWorld],
		InfoGas[id][gsID]);
		mysql_tquery(DBngrp, query);
		return id;
	}
	mysql_format(DBngrp, query, sizeof query, "INSERT INTO gasolineras (Negocio, PosX, PosY, PosZ, Interior, VirtualWorld) VALUES ('%d', '%f', '%f', '%f', '%d', '%d')",
	InfoGas[id][gsNegocio],
	InfoGas[id][gsPosX],
	InfoGas[id][gsPosY],
	InfoGas[id][gsPosZ],
	InfoGas[id][gsInterior],
	InfoGas[id][gsVirtualWorld]);
	mysql_tquery(DBngrp, query, "OnGasCreate", "i", id);
	return id;
}

forward OnGasCreate(id);
public OnGasCreate(id)
{
	InfoGas[id][gsID] = cache_insert_id();
	cache_unset_active();
	totalgasolineras++;
	return 1;
}

CMD:eliminargasolinera(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /eliminargasolinera.");
	new id, string[210], query[512];
	if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/eliminargasolinera [gasolinera ID]");
	if (id < 1 || id > totalgasolineras) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalgasolineras);
	if (InfoGas[id][gsPosX] == 0.0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de gasolinera no existe.", id);
	// dynamic
	if (IsValidDynamic3DTextLabel(InfoGas[id][gsLabel])) { DestroyDynamic3DTextLabel(InfoGas[id][gsLabel]); InfoGas[id][gsLabel] = Text3D:INVALID_3DTEXT_ID; }
	DestroyDynamicPickup(InfoGas[id][gsPickup]);
	// sql
	InfoGas[id][gsNegocio] = -1;
	InfoGas[id][gsPosX] = 0.0;
	InfoGas[id][gsPosY] = 0.0;
	InfoGas[id][gsPosZ] = 0.0;
	InfoGas[id][gsInterior] = 0;
	InfoGas[id][gsVirtualWorld] = 0;
	mysql_format(DBngrp, query, sizeof query, "UPDATE gasolineras SET Negocio = -1, PosX = 0.0, PosY = 0.0, PosZ = 0.0, Interior = 0, VirtualWorld = 0 WHERE ID = '%d'", InfoGas[id][gsID]);
	mysql_tquery(DBngrp, query);
	// message
	format(string, sizeof string, "Administracion: %s(ID:%d) ha eliminado el punto de gas [ID:%d].", NombreRJugador(playerid), playerid, id);
	MensajeAdmin(string);
	return 1;
}
CMD:borrargasolinera(playerid, params[]) return cmd_eliminargasolinera(playerid, params);

CMD:estereo(playerid)
{
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Suba al vehiculo al asiento de conductor y luego use /Estereo.");
    if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
        new StationsDialog[2500];
        strcat(StationsDialog, "{F50000}||\t{F50000}Detener musica\t{F50000}||\n");
        strcat(StationsDialog, "{00C200}1\t{FFFFFF}HG-estacion Electronica\t{00A2FF}Electro\n");
        strcat(StationsDialog, "{00C200}2\t{FFFFFF}HG-estacion Electronica 2\t{00A2FF}Electro\n");
		strcat(StationsDialog, "{00C200}3\t{FFFFFF}HG-estacion Electronica 3\t{00A2FF}Electro\n");
		strcat(StationsDialog, "{00C200}4\t{FFFFFF}HG-estacion Rock\t{00A2FF}Rock\n");
		strcat(StationsDialog, "{00C200}5\t{FFFFFF}HG-estacion Rock 2\t{00A2FF}Rock\n");
		strcat(StationsDialog, "{00C200}6\t{FFFFFF}HG-estacion Rock 3\t{00A2FF}Rock\n");
		strcat(StationsDialog, "{00C200}7\t{FFFFFF}HG-estacion Rock 4\t{00A2FF}Rock\n");
		strcat(StationsDialog, "{00C200}8\t{FFFFFF}HG-estacion Tropical\t{00A2FF}Tropicall\n");
		strcat(StationsDialog, "{00C200}9\t{FFFFFF}HG-estacion Reggaeton\t{00A2FF}Reggaeton\n");
		strcat(StationsDialog, "{00C200}10\t{FFFFFF}HG-estacion Reggaeton 2\t{00A2FF}Reggaeton\n");
		strcat(StationsDialog, "{00C200}11\t{FFFFFF}HG-estacion Reggaeton 3\t{00A2FF}Reggaeton\n");
		strcat(StationsDialog, "{00C200}12\t{FFFFFF}HG-estacion Hip-Hop\t{00A2FF}Hip Hop\n");
		strcat(StationsDialog, "{00C200}13\t{FFFFFF}HG-estacion Hip-Hop 2\t{00A2FF}Hip Hop\n");
	    ShowPlayerDialog(playerid, D_ESTEREO, DIALOG_STYLE_LIST, "{00C200}Estereo", StationsDialog, "Continuar", "Salir");
    }
    return 1;
}
CMD:emisora(playerid) return cmd_estereo(playerid);
CMD:emisoras(playerid) return cmd_estereo(playerid);

CMD:equiposonido(playerid)
{
	if (InfoJugador[playerid][jEncarcelado] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar esto mientras estas en prision.");
	if (InfoJugador[playerid][jBoombox] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un equipo sonido, puedes comprarla en cualquier Tienda Electronica.");
	new string[300];
	new Float: BBCoord[4];
	GetPlayerPos(playerid, BBCoord[0], BBCoord[1], BBCoord[2]);
	GetPlayerFacingAngle(playerid, BBCoord[3]);
	SetPVarFloat(playerid, "BBX", BBCoord[0]);
	SetPVarFloat(playerid, "BBY", BBCoord[1]);
	SetPVarFloat(playerid, "BBZ", BBCoord[2]);
	BBCoord[0] += (2 * floatsin(-BBCoord[3], degrees));
	BBCoord[1] += (2 * floatcos(-BBCoord[3], degrees));
	BBCoord[2] -= 1.0;
	if (GetPVarInt(playerid, "PlacedBB")) return _Mensaje(playerid, 2, "0", "Usa /encender para cambiar la emisora del equipo de sonido y /requiposonido para recoger el equipo de sonido del suelo y guardarla.");
	foreach(Player, i) if (GetPVarType(i, "PlacedBB"))
	{
		if (_enPos(playerid, 30.0, GetPVarFloat(i, "BBX"), GetPVarFloat(i, "BBY"), GetPVarFloat(i, "BBZ")))
		{
			ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes colocar tu equipo sonido aqui, ya hay una colocada cerca de donde estas.");
			return 1;
		}
	}
	SetPVarInt(playerid, "PlacedBB", CreateDynamicObject(2103, BBCoord[0], BBCoord[1], BBCoord[2], 0.0, 0.0, 0.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
	format(string, sizeof string, "{D6E1EB}%d | %s", playerid, NombreRJugador(playerid));
	LabelBoombox[playerid] = CreateDynamic3DTextLabel(string, -1, BBCoord[0], BBCoord[1], BBCoord[2] + 0.6, 5, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
	SetPVarInt(playerid, "BBArea", CreateDynamicSphere(BBCoord[0], BBCoord[1], BBCoord[2], 30.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)));
	SetPVarInt(playerid, "BBInt", GetPlayerInterior(playerid));
	SetPVarInt(playerid, "BBVW", GetPlayerVirtualWorld(playerid));
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:encender(playerid)
{
	if (!GetPVarType(playerid, "PlacedBB")) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No has colocado ningun equipo sonido.");
	if (!_enPos(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"))) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas cerca de tu Equipo Sonido.");
	ShowPlayerDialog(playerid, D_BOOMBOX, DIALOG_STYLE_LIST, "{D6E1EB}Equipo de sonido", "{F50000}Detener musica{FFFFFF}\nRadios\nURL - Internet", "Continuar", "Salir");
	return 1;
}

CMD:requiposonido(playerid)
{
	if (!GetPVarType(playerid, "PlacedBB")) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No has colocado ningun equipo sonido.");
	if (!_enPos(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"))) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas cerca de tu Equipo Sonido.");
	foreach(Player, i) if (IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea"))) { StopStream(i); }
	DeletePVar(playerid, "BBArea");
	if (GetPVarInt(playerid, "PlacedBB") != INVALID_STREAMER_ID)
	{
		DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
		SetPVarInt(playerid, "PlacedBB", INVALID_STREAMER_ID);
	}
	if (IsValidDynamic3DTextLabel(LabelBoombox[playerid]))
	{
		DestroyDynamic3DTextLabel(LabelBoombox[playerid]);
		LabelBoombox[playerid] = Text3D:INVALID_3DTEXT_ID;
	}
	DeletePVar(playerid, "PlacedBB");
	DeletePVar(playerid, "BBX");
	DeletePVar(playerid, "BBY");
	DeletePVar(playerid, "BBZ");
	DeletePVar(playerid, "BBInt");
	DeletePVar(playerid, "BBVW");
	DeletePVar(playerid, "BBStation");
	_Mensaje(playerid, 2, "0", "Has cogido tu equipo sonido del suelo.");
	return 1;
}

CMD:retirarequipo(playerid, params[])
{
    new string[550], idjugador;
	if (InfoJugador[playerid][jAdmin] < 1) return 1;
	OnDuty
	if (sscanf(params, "d", idjugador)) return _Mensaje(playerid, 3, "0", "/retirarequipo [id jugador]");
	if (!IsPlayerConnectedEx(idjugador)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador esta desconectado.");
	if(idjugador == playerid) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Usa tu mismo /requiposonido");
	if (!GetPVarType(idjugador, "PlacedBB")) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no a conectado ninguna radio.");
	foreach(Player, i) if (IsPlayerInDynamicArea(i, GetPVarInt(idjugador, "BBArea"))) { StopStream(i); }
	DeletePVar(idjugador, "BBArea");
	if (GetPVarInt(idjugador, "PlacedBB") != INVALID_STREAMER_ID)
	{
		DestroyDynamicObject(GetPVarInt(idjugador, "PlacedBB"));
		SetPVarInt(idjugador, "PlacedBB", INVALID_STREAMER_ID);
	}
	if (IsValidDynamic3DTextLabel(LabelBoombox[idjugador]))
	{
		DestroyDynamic3DTextLabel(LabelBoombox[idjugador]);
		LabelBoombox[idjugador] = Text3D:INVALID_3DTEXT_ID;
	}
	DeletePVar(idjugador, "PlacedBB");
	DeletePVar(idjugador, "BBX");
	DeletePVar(idjugador, "BBY");
	DeletePVar(idjugador, "BBZ");
	DeletePVar(idjugador, "BBInt");
	DeletePVar(idjugador, "BBVW");
	DeletePVar(idjugador, "BBStation");
	_Mensaje(idjugador, 2, "0", "Un administrador a retirado tu equipo sonido del suelo.");
	format(string, sizeof(string), "Administracion: %s[%d] retiro el equipo de sonido (boombox) del jugador %s[%d].", NombreRJugador(playerid), playerid, NombreRJugador(idjugador), idjugador);
	MensajeAdmin(string);
	return 1;
}

CMD:repararveh(playerid, params[]) {
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres el conductor.");
	new idcar = GetPlayerVehicleID(playerid);
	if (InfoJugador[playerid][jManoDerecha] == 0 && InfoJugador[playerid][jManoIzquierda] == 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes nada en ninguna mano."); return 1;}
	if (InfoJugador[playerid][jManoDerecha] == 140 && InfoJugador[playerid][jManoDerechaCant] > 0)
	{
	    ActualizarManos(playerid);
		GameTextForPlayer(playerid,"~w~reparando ~r~fallas...",20000,3);
		InfoJugador[playerid][jManoDerechaCant] -= 5;
		SetTimerEx("_Fix", 20000, false, "dd", playerid, idcar);
		TogglePlayerControllable(playerid, false);
		_rVeh[playerid] = 1;
	    ActualizarManos(playerid);
	}
	else if(InfoJugador[playerid][jManoIzquierda] == 140 && InfoJugador[playerid][jManoIzquierdaCant] > 0)
	{
		ActualizarManos(playerid);
		GameTextForPlayer(playerid,"~w~reparando ~r~fallas...",20000,3);
		InfoJugador[playerid][jManoIzquierdaCant] -= 5;
		SetTimerEx("_Fix", 20000, false, "dd", playerid, idcar);
		TogglePlayerControllable(playerid, false);
		_rVeh[playerid] = 1;
	    ActualizarManos(playerid);
	}
	else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes piezas de recambio, compra unos en la gasolinera.");
	return 1;
}

funcion _Fix(playerid, idcar) {
	TogglePlayerControllable(playerid, true);
	new panels, doors, lights, tires;
	GetVehicleDamageStatus(idcar, panels, doors, lights, tires);
	RepairVehicle(idcar);
	UpdateVehicleDamageStatus(idcar, panels, doors, lights, tires);
	SetVehicleHealth(idcar, 650.0);
	SetVehicleHealth(idcar, 650.0);
    SetTimerEx("dar_F", 2000, false, "d", playerid);
	return 1;
}

stock dar_F(playerid) _rVeh[playerid] = 0;

CMD:llenarveh(playerid)
{
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres el conductor.");
	new idcar = GetPlayerVehicleID(playerid);
	if (InfoJugador[playerid][jManoDerecha] != 89 && InfoJugador[playerid][jManoIzquierda] != 89){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un bidon de gasolina en ninguna mano."); return 1;}
	AccionesRol(playerid, 0, "abrio el tanque de gasolina, llevando el bidon para llenar el mismo de gasolina.");
	if (EstaEnAvion(idcar) || EstaEnBote(idcar)) GasolinaInicialVeh[idcar] = 300;
	else GasolinaInicialVeh[idcar] = 100;
	if (InfoJugador[playerid][jManoDerecha] == 89) InfoJugador[playerid][jManoDerecha] = 0;
	else if (InfoJugador[playerid][jManoIzquierda] == 89) InfoJugador[playerid][jManoIzquierda] = 0;
	ActualizarManos(playerid);
	return 1;
}

CMD:togpecho(playerid, params[]) {
    if (Es_Banda(playerid, 1, 2, 3) || InfoJugador[playerid][jAdmin] >= 3) {
        if (!B_Pecho[playerid]) {
            B_Pecho[playerid] = 1;
            _Mensaje(playerid, 2, "0", "Activaste el modo /espalda como pecho.");
        } else {
            B_Pecho[playerid] = 0;
            _Mensaje(playerid, 2, "0", "Desactivaste el modo /espalda como pecho.");
        }
    } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres policia.");
    return 1;
}

CMD:togmusic(playerid)
{
    if (!B_Musica[playerid]) {
        B_Musica[playerid] = 1;
        StopAudioStreamForPlayer(playerid);
        _Mensaje(playerid, 2, "0", "Audio's desactivados.");
    } else {
        B_Musica[playerid] = 0;
        StopAudioStreamForPlayer(playerid);
        _Mensaje(playerid, 2, "0", "Audio's activados.");
    }
    return 1;
}
CMD:togmusica(playerid) return cmd_togmusic(playerid);

CMD:entrarcoche(playerid, params[])
{
	if (IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya estas dentro de un vehiculo.");
	new vehicleid = -1, asiento, Float:distancia = 4.0, Float:vX, Float:vY, Float:vZ;
	Loop(x, MAX_VEHICLES, 0) if (GetVehicleModel(x))
	{
		GetVehiclePos(x, vX, vY, vZ);
		if (_enPos(playerid, 4.0, vX, vY, vZ) && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(x))
		{
			if (GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)
			distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ);
			vehicleid = x;
		}
	}
	if (vehicleid == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No se encontro ningun vehiculo cerca.");
	if (sscanf(params, "d", asiento)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~/entrarcoche [asiento]");
	if (asiento < 1 || asiento > 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo hay 4 asientos, prueba de nuevo.");
	if (VehSeguro[vehicleid] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese vehiculo tiene seguro puesto.");
	//detectar si esta ocupado el asiento
	asiento--;
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && IsPlayerInAnyVehicle(playerid2))
	{
		if (GetPlayerVehicleID(playerid2) == vehicleid && GetPlayerVehicleSeat(playerid2) == asiento)
		{
			SendClientMessageEx(playerid, 0xFFFF00FF, "Ese vehiculo (%d) tiene el asiento ocupado por %s.", vehicleid, NombreJugador(playerid2));
			return 1;
		}
	}
	//OnPlayerEnterVehicle
	if (GetPVarInt(playerid, "EnCrack") == 1) SetPVarInt(playerid, "_Ejcet", 1);
	if (asiento == 0)
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if (engine == VEHICLE_PARAMS_UNSET) switch(GetVehicleModel(vehicleid))
		{
			case 509, 481, 510: GasolinaInicialVeh[vehicleid] = 200, arr_Engine {vehicleid} = 1, SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective), arr_Engine {vehicleid} = 1;
			default: SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective), arr_Engine {vehicleid} = 0;
		}
		Casco[playerid] = 0;
		if (GasolinaInicialVeh[vehicleid] <= 0)
		{
			EncenderVehiculo(vehicleid, playerid);
		}
		//facciones
		if (LSPD_Veh(vehicleid))
		{
			if(!Es_Banda(playerid, 1)) return _SVehiculo(playerid);
		}
		else if(CNN_Veh(vehicleid))
		{
			if(!Es_Banda(playerid, 5)) return _SVehiculo(playerid);
		}
		else if(GOB_Vehicle(vehicleid))
		{
			if(!Es_Banda(playerid, 4)) return _SVehiculo(playerid);
		}
		else if(LAFD_Veh(vehicleid))
		{
			if(!Es_job(playerid, 15)) return _SVehiculo(playerid);
		}
		else if(GN_Vehicle(vehicleid))
		{
			if(!Es_Banda(playerid, 2)) return _SVehiculo(playerid);
		}
		else if(Basurero_Vehicle(vehicleid))
		{
			if(!Es_job(playerid, 3)) return _SVehiculo(playerid);
		}
		else if(Camionero_Vehicle(vehicleid))
		{
			if(!Es_job(playerid, 4)) return _SVehiculo(playerid);
			if(GetVehicleModel(vehicleid) == 413 || GetVehicleModel(vehicleid) == 456)
			{
				new string[256], contenido = _Contenido[vehicleid], texting[50];
				if(contenido == 1) format(texting, sizeof(texting), "productos {771BA9}de ropa");
				else if(contenido == 2) format(texting, sizeof(texting), "productos {2788FE}generales");
				else if(contenido == 3) format(texting, sizeof(texting), "productos {2788FE}electronicos");
				else if(contenido == 4) format(texting, sizeof(texting), "productos {2788FE}de comida");
				else if(contenido == 5) format(texting, sizeof(texting), "{2788FE}mercancia");
				if(contenido != 0) { format(string, sizeof string, "Vehiculo de camionero [%s-%d], contiene %s{ffffff}.", GetVehicleName(vehicleid), vehicleid, texting), _Mensaje(playerid, 4, "FFFFFF",string); }
				if(_CamVeh[playerid] == INVALID_VEHICLE_ID) _Mensaje(playerid, 4, "A7CE00", "Puedes comenzar a trabajar escribiendo /transportar.");
				else if(_CamVeh[playerid] == vehicleid) _Mensaje(playerid, 4, "2788FE", "Este es tu vehiculo de camionero, llevalo al punto marcado en el radar.");
				else if(_CamVeh[playerid] != INVALID_VEHICLE_ID) { _Mensaje(playerid, 4, "2788FE", "[ERROR]{ffffff} Este vehiculo es de otro chofer, utiliza /borrarcarga."); }
			}
		}
		else if(Granjero_Vehicle(vehicleid))
		{
			if(!Es_job(playerid, 10)) return _SVehiculo(playerid);
		}
    }
	if (PutPlayerInVehicleEx(playerid, vehicleid, asiento) == 0)
	{
	    return SendClientMessageEx(playerid, 0xEBEBEBFF, "Ese vehiculo (id %d) no tiene asiento %d o no existe.", vehicleid, asiento);
	}
	return 1;
}

CMD:seguro(playerid)
{
	new Float: x, Float: y, Float: z, id = 0;
	Loop(e, totalvehiculos, 1) if (InfoVehiculo[e][vSpawned] != 0)
	{
		GetVehiclePos(InfoVehiculo[e][vDL], x, y, z);
		if (_enPos(playerid, 3.0, x, y, z) && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(InfoVehiculo[e][vDL]) && GetPlayerInterior(playerid) == GetVehicleInterior(InfoVehiculo[e][vDL]))
		{
			id = e;
			break;
		}
	}
	if (id == 0) return 0;
	if (acceso_vehiculo(playerid, InfoVehiculo[id][vDL]) != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes las llaves de este vehiculo.");
	new vehicleid = InfoVehiculo[id][vDL];
	if (InfoVehiculo[id][vSeguro] == 0)
	{
		GameTextForPlayer(playerid, "~w~~h~~h~Vehiculo ~r~Cerrado", 5000, 1);
		PlayerPlaySoundEx(1145, x, y, z);
		InfoVehiculo[id][vSeguro] = 1;
		VehSeguro[vehicleid] = 1;
		vehicle_lock_doors(vehicleid);
		AccionesRol(playerid, 0, "coloca el seguro en su vehiculo.");
	}
	else
	{
		GameTextForPlayer(playerid, "~w~~h~~h~Vehiculo ~g~Abierto", 5000, 1);
		PlayerPlaySoundEx(1145, x, y, z);
		InfoVehiculo[id][vSeguro] = 0;
		VehSeguro[vehicleid] = 0;
		vehicle_unlock_doors(vehicleid);
		AccionesRol(playerid, 0, "quita el seguro de su vehiculo.");
	}
	guardar_int_mysql("vehiculos", "Seguro", InfoVehiculo[id][vID], InfoVehiculo[id][vSeguro]);
	return 1;
}

CMD:estacionar(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres el conductor.");
	new id = verificar_id_vehiculo(vehicleid), query[2056];
	if (id == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo no figura ningun propietario.");
	if (acceso_vehiculo(playerid, vehicleid) != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes las llaves de este vehiculo.");
	GetVehicleHealth(vehicleid, InfoVehiculo[id][vVida]);
	GetVehicleDamageStatus(vehicleid, InfoVehiculo[id][vDanioSuperficie], InfoVehiculo[id][vDanioPuertas], InfoVehiculo[id][vDanioLuces], InfoVehiculo[id][vDanioRuedas]);
	GetVehiclePos(vehicleid, InfoVehiculo[id][vPosicionX], InfoVehiculo[id][vPosicionY], InfoVehiculo[id][vPosicionZ]);
	GetVehicleZAngle(vehicleid, InfoVehiculo[id][vPosicionR]);
	InfoVehiculo[id][vGasolina] = GasolinaInicialVeh[vehicleid];
	InfoVehiculo[id][vVirtualWorld] = GetVehicleVirtualWorld(vehicleid);
	InfoVehiculo[id][vInterior] = GetVehicleInterior(vehicleid);
	mysql_format(DBngrp, query, sizeof query, "UPDATE vehiculos SET PosicionX = '%f', PosicionY = '%f', PosicionZ = '%f', PosicionR = '%f', Interior = '%d', VirtualWorld = '%d', Vida = '%f', DanioSuperficie = '%d', DanioPuertas = '%d', DanioLuces = '%d', DanioRuedas = '%d', Gasolina = '%d' WHERE ID = '%d'",
	InfoVehiculo[id][vPosicionX], InfoVehiculo[id][vPosicionY], InfoVehiculo[id][vPosicionZ], InfoVehiculo[id][vPosicionR], InfoVehiculo[id][vInterior], InfoVehiculo[id][vVirtualWorld],
	InfoVehiculo[id][vVida], InfoVehiculo[id][vDanioSuperficie], InfoVehiculo[id][vDanioPuertas], InfoVehiculo[id][vDanioLuces], InfoVehiculo[id][vDanioRuedas], InfoVehiculo[id][vGasolina], InfoVehiculo[id][vID]);
	mysql_tquery(DBngrp, query);
	AccionesRol(playerid, 0, "estaciona su vehiculo.");
	return 1;
}
CMD:aparcar(playerid) return cmd_estacionar(playerid);

CMD:vendermicoche(playerid, params[])
{
    if (EnVentaPropiedad[playerid] != 0) return SendClientMessage(playerid, 0xccccccff, "* No puedes realizar esta funcion en medio de una venta.");
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres el conductor.");
	new vehiculo = GetPlayerVehicleID(playerid), id = -1;
	Loop(x, totalvehiculos, 1) if (InfoVehiculo[x][vDL] == vehiculo && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoVehiculo[x][vPropietario], true) == 0 && InfoVehiculo[x][vFamilia] == 0)
	{
		id = x;
		break;
	}
	if (id == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo no te pertenece, no puedes venderlo.");
	if (InfoVehiculo[id][vModeloNeon] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes vender un vehiculo con neon a un usuario comun.");
	new playerid2, price;
	if (sscanf(params, "dd", playerid2, price)) return _Mensaje(playerid, 3, "0", "vendermicoche [id jugador] [precio]");
	new carsamount = VehicleCount(playerid2);
	if (InfoJugador[playerid2][jNivelVIP] == 0 && carsamount >= 3) return ShowPlayerFooter(playerid2, "~n~~n~~n~~n~~r~Solo puede tener 3 vehiculos.");
	if (InfoJugador[playerid2][jNivelVIP] == 1 && carsamount >= 4) return ShowPlayerFooter(playerid2, "~n~~n~~n~~n~~r~Solo puede tener 4 vehiculos.");
	if (InfoJugador[playerid2][jNivelVIP] == 2 && carsamount >= 5) return ShowPlayerFooter(playerid2, "~n~~n~~n~~n~~r~Solo puede tener 5 vehiculos.");
	if (price < 1 || price > 9999999) return SendClientMessage(playerid, 0xccccccff, "* El precio no puede superar $9,999,999.");
	if (playerid == playerid2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes venderte el auto a ti mismo.");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (!CercaDelWeon(8.0, playerid, playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no se encuentra cerca de ti.");
	if (GetPlayerCash(playerid2) < price) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no tiene esa cantidad de dinero."); return 1; }
	if (InfoVehiculo[id][vModeloNeon] != 0)
	{
		if (InfoJugador[playerid2][jNivelVIP] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes vender un vehiculo con neon a un usuario comun.");
	}
	_Vehdueno[playerid2] = playerid;
	_VehID[playerid2] = id;
	_Vehprecio[playerid2] = price;
	EnVentaPropiedad[playerid] = 1;
	SendClientMessageEx(playerid, 0x33CCFFFF, "* Ofreciste a %s para comprar este %s por $%d.", NombreJugador(playerid2), GetVehicleName(vehiculo), price);
	SendClientMessageEx(playerid2, 0x33CCFFFF, "* %s te ha ofrecido su %s por $%d, (/aceptar).", NombreJugador(playerid), GetVehicleName(vehiculo), price);
	return 1;
}
CMD:vendercoche(playerid, params[]) return cmd_vendermicoche(playerid, params);

CMD:maletero(playerid)
{
    if (IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes gestionar el maletero desde un vehiculo.");
    new Float: x, Float: y, Float: z, id = 0;
	Loop(e, totalvehiculos, 1) if (InfoVehiculo[e][vSpawned] != 0)
	{
		GetVehiclePos(InfoVehiculo[e][vDL], x, y, z);
		if (_enPos(playerid, 4.2, x, y, z) && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(InfoVehiculo[e][vDL]) && GetPlayerInterior(playerid) == GetVehicleInterior(InfoVehiculo[e][vDL]))
		{
			id = e;
			break;
		}
	}
	if (id == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas cerca de un veh?culo.");
	if (IsABicycle(InfoVehiculo[id][vDL])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Modelo de vehiculo incorrecto.");
	if (acceso_vehiculo(playerid, InfoVehiculo[id][vDL]) != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes las llaves de este vehiculo.");
	Maletero_Vehiculo(playerid, id);
	VehMaleteroPlayer[playerid] = id;
	return 1;
}
CMD:mal(playerid) return cmd_maletero(playerid);

Set_Menu_Help(playerid)
{
	new Menu[1028];
	strcat(Menu, "{8db6bd}General{FFFFFF} (Informacion general y variedad de comandos)\n");
	strcat(Menu, "{8db6bd}Bolsillos{FFFFFF} (Uso sobre manipulacion de objetos)\n");
	strcat(Menu, "{8db6bd}Canales{FFFFFF} (Uso de canales)\n");
	strcat(Menu, "{8db6bd}Casas{FFFFFF} (Comandos del sistema de casas)\n");
	strcat(Menu, "{8db6bd}Vehiculos{FFFFFF} (Bidones, renta, maleteros, emisoras, estadisticas)\n");
	strcat(Menu, "{8db6bd}Bandas legales{FFFFFF} (Comandos de tu Banda asignada)\n");
	strcat(Menu, "{8db6bd}Bandas ilegales{FFFFFF} (Comandos de tu Banda asignada)\n");
	strcat(Menu, "{8db6bd}Negocios{FFFFFF} (Comandos del sistema de negocios)\n");
	strcat(Menu, "{8db6bd}Accesorios{FFFFFF} (Comandos de los accesorios)\n");
	strcat(Menu, "{8db6bd}Trabajos{FFFFFF} (Informacion y comandos de los trabajos)\n");
	strcat(Menu, "{8db6bd}Premium{FFFFFF} (Comandos del sistema premium)\n");
	strcat(Menu, "{8db6bd}Animaciones{FFFFFF} (Comandos de todas las animaciones)\n");
	strcat(Menu, "{8db6bd}Uber{FFFFFF} (Comandos del sistema uber)\n");
	Dialog_Show(playerid, Help2_Show, DIALOG_STYLE_LIST, "{cccccc}North America Roleplay Oficial| Juego de roles {8db6bd}» {FFFFFF}Ayuda", Menu, "Continuar", "Salir");
}

CMD:ayuda(playerid)
{
 	Set_Menu_Help(playerid);
	return 1;
}
CMD:help(playerid) return cmd_ayuda(playerid);

Dialog:Help_Show(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	Set_Menu_Help(playerid);
	return 1;
}

Dialog:Help2_Show(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	Ayuda(playerid, listitem);
	return 1;
}

CMD:darcheque(playerid, params[])
{
	new money, player, text[128];
	if (InfoJugador[playerid][jHorasConectado] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes que tener minimo 2 Horas de juego para dar dinero.");
	if (sscanf(params, "ud", player, money)) return _Mensaje(playerid, 3, "0", "/darcheque [id jugador] [Monto]");
	if (money > InfoJugador[playerid][jBanco] || money < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficientes fondos en el banco para hacer este cheque.");
	if (player == playerid) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes darte un cheque tu mismo.");
	if (!CercaDelWeon(4.0, playerid, player)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas cerca de ese jugador.");
	InfoJugador[playerid][jBanco] -= money;
	InfoJugador[player][jCheques] += money;
	guardar_int_mysql("cuentas", "Banco", InfoJugador[playerid][jID], InfoJugador[playerid][jBanco]);
	guardar_int_mysql("cuentas", "Cheques", InfoJugador[player][jID], InfoJugador[player][jCheques]);
	format(text, sizeof(text), "* Hiciste un cheque de $%d para %s, se resto a tu cuenta bancaria.", money, NombreJugador(player));
	_Mensaje(playerid, 4, "33CCFF", text);
	format(text, sizeof(text), "* %s te hizo un cheque de $%d y lo cobraras en tu proximo pago diario.", NombreJugador(playerid), money);
	_Mensaje(player, 4, "33CCFF", text);
	format(text, sizeof(text), "Hizo un cheque de $%s a %s.", diner_coma(money), NombreRJugador(player));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], text, 7);
	return 1;
}

CMD:stats(playerid)
{
	Dialog_Show(playerid, ShowCuenta, DIALOG_STYLE_LIST, "Estadisticas", "{A7C9E7}-{ffffff} Informacion general\n{A7C9E7}-{ffffff} Tus propiedades\n{A7C9E7}-{ffffff} Tus vehiculos\n{A7C9E7}-{ffffff} Configuracion de cuenta", "Continuar", "Salir");
	return 1;
}
CMD:cuenta(playerid) return cmd_stats(playerid);

Dialog:ShowCuenta(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: Show_Info_Player(playerid, playerid);
		case 1:
		{
			new dialogShow[2056], formatShow[256], access = 0;
			if (CountCasas(playerid) != 0)
			{
				format(formatShow, sizeof formatShow, "{A7C9E7}Casas: {CCCCCC}%d\n", CountCasas(playerid));
				strcat(dialogShow, formatShow);
				Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoCasa[id][cPropietario], true) == 0)
				{
					format(formatShow, sizeof formatShow, "{CCCCCC}Casa %d | Dinero: $%d | Espacio: %s | Puerta: %s\n", id, InfoCasa[id][cCasaDinero], _EspacioC(id), _EstadoC(id, 2));
					strcat(dialogShow, formatShow);
				}
			    access = 1;
			}
			strcat(dialogShow, "\n");
			if (CountNegocios(playerid) != 0)
			{
				format(formatShow, sizeof formatShow, "{A7C9E7}Negocios: {CCCCCC}%d\n", CountNegocios(playerid));
				strcat(dialogShow, formatShow);
				Loop(id, totalnegocios, 1) if (InfoNegocio[id][nVenta] != 0 && InfoNegocio[id][nTipo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoNegocio[id][nPropietario], true) == 0)
				{
					format(formatShow, sizeof formatShow, "{CCCCCC}Negocio %d (%s) | Dinero: $%d | Tipo: %s | Productos: %d | Puerta: %s\n", id, InfoNegocio[id][nNombre], InfoNegocio[id][nDinero], TypeBusiness(id), InfoNegocio[id][nProductos], StatusBusiness(id, 2));
					strcat(dialogShow, formatShow);
				}
			    access = 1;
			}
			if (access == 0) return SendClientMessage(playerid, 0xccccccff, "No tienes ninguna propiedad (casa o negocio).");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Mis propiedades", dialogShow, "Cerrar", "");
		}
		case 2: cmd_coches(playerid);
		case 3: cmd_panel(playerid);
	}
	return 1;
}

CMD:gps(playerid)
{
	if (GetPVarInt(playerid, "EnCheckPoint") > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes un checkpoint pendiente, escribe /eliminarcp.");
	if (EnModoTrabajo[playerid] != 0) return SendClientMessageEx(playerid, 0xccccccff, "Estas trabajando como %s, termina la labor para empezar esto.", IsLaborJob(EnModoTrabajo[playerid]));
	Dialog_Show(playerid, ShowGPS, DIALOG_STYLE_LIST, "GPS", "Mis vehiculos\nNegocios\nCentrales\nConcesionarios\nLugar importantes\nTalleres mecanicos\nPrision federal", "Continuar", "Salir");
	return 1;
}
CMD:lugares(playerid) return cmd_gps(playerid);

CMD:roles(playerid)
{
Dialog_Show(playerid, ShowMacros, DIALOG_STYLE_LIST, "Macros del servidor", "Rol de arma\nRol de Choque\nRol de Entorno\nRol de sacar vendas\nRol de Esposas{ff0000}(Solo facc legal)", "Continuar", "Salir");
}

CMD:1(playerid)
{
AccionesRol(playerid, 0, "saca un arma de fuego de su espalda y le retira el seguro.");
AccionesRol(playerid, 2, "el arma estaria sin seguro y lista para su utilizacion.");
return 1;
}
CMD:2(playerid)
{
AccionesRol(playerid, 0, "choca contra un objeto en movimiento.");
AccionesRol(playerid, 2, "el airbag amortiguaria un poco el choque del vehiculo.");
return 1;
}

CMD:3(playerid){
	AccionesRol(playerid, 2, "civiles verian la situacion y saldrian a correr asustados.");
	return 1;
}

CMD:4(playerid){
	AccionesRol(playerid, 0, "desprende de el una cuerda y/o unas vendas.");
	AccionesRol(playerid, 2, "se aprecia a un sujeto sospechoso sosteniendo objetos de secuestro.");
	return 1;
}

CMD:5(playerid){
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	AccionesRol(playerid, 0, "retira de su CT unas esposas y las abre.");
	AccionesRol(playerid, 2, "se aprecia a un agente del estado teniendo unas esposas en su mano listas para darle uso.");
	return 1;
}

Dialog:ShowMacros(playerid, response, listitem, inptuttext[])
{
	if(!response) return 1;
	switch (listitem)
	{
	   case 0:
	   {
	   	AccionesRol(playerid, 0, "saca un arma de fuego de su espalda y le retira el seguro.");
		AccionesRol(playerid, 2, "el arma estaria sin seguro y lista para su utilizacion.");
       }
       case 1:
       {
       	AccionesRol(playerid, 0, "choca contra un objeto en movimiento.");
		AccionesRol(playerid, 2, "el airbag amortiguaria un poco el choque del vehiculo.");
	   }
	   case 2:
	   {
	   	AccionesRol(playerid, 2, "civiles verian la situacion y saldrian a correr asustados.");
	   }
	   case 3:
	   {
	   	AccionesRol(playerid, 0, "desprende de el una cuerda y/o unas vendas.");
		AccionesRol(playerid, 2, "se aprecia a un sujeto sospechoso sosteniendo objetos de secuestro.");
	   }
	   case 4:
	   {
	   	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
		AccionesRol(playerid, 0, "retira de su CT unas esposas y las abre.");
		AccionesRol(playerid, 2, "se aprecia a un agente del estado teniendo unas esposas en su mano listas para darle uso.");
	   }
	   }
 	return 1;
}


Dialog:ShowGPS(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: cmd_coches(playerid);
		case 1: Dialog_Show(playerid, UbicarLocales, DIALOG_STYLE_LIST, "Locales", "24/7\nLocal de ropa\nResturante\nCluckin Bell\nPizzeria\nBurger Shot\nAmmu-Nation\nPeluqueria\nSex Shop\nGasolinera\nTienda electronica\nBar\nFerreteria\nAlhambra\nStrip club\nClub private", "Continuar", "Volver");
		case 2: Dialog_Show(playerid, UbicarCentrales, DIALOG_STYLE_LIST, "Centrales", "LAPD\nAyuntamiento\nHospital\nComisaria Sheriff", "Continuar", "Volver");
		case 3: Dialog_Show(playerid, UbicarConces, DIALOG_STYLE_LIST, "Concesionarias", "Motos\nCoutt And Schutz\nGrotti\nCamionetas\nNuevased\nVehiculos de segunda mano", "Continuar", "Volver");
		case 4: Dialog_Show(playerid, UbicarLugares, DIALOG_STYLE_LIST, "Lugares importantes", "Gym(LS)\nGym(SF)\nGYM(LV)\nBanco Little Mexico(LS)\nBanco East Beach (LS)\nBanco Temple (LS)\nBanco Downtown (SF)\nBanco Roca Escalante (LV)\nSalon Vip\nMotel 'FC'\nMotel 'I'", "Continuar", "Volver");
		case 5: Dialog_Show(playerid, UbicarTalleres, DIALOG_STYLE_LIST, "Talleres mecanicos", "Idlewood Mecanics\nGanton Express\nFast Market\nPlaya Mecha\nCorona Wins\nx1 Taller LV\nDoherty Prime", "Continuar", "Volver");
	}
	return 1;
}

Dialog:UbicarLugares(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_gps(playerid);
	switch (listitem)
	{
		case 0: _MarcarPos(playerid, 2229.8945,-1721.2692,13.5614, "El punto de GYM (LS) fue marcado en el radar");
		case 1: _MarcarPos(playerid, -2270.6477,-155.8458,35.3203, "El punto de GYM (SF) fue marcado en el radar.");
		case 2: _MarcarPos(playerid, 1968.8323,2295.5376,16.4559, "El punto de GYM (LV) fue marcado en el radar");
		case 3: _MarcarPos(playerid, 1780.4454,-1806.6713,13.5234, "El punto de Banco Little Mexico(LS) fue marcado en el radar.");
		case 4: _MarcarPos(playerid, 2862.0479,-1405.7865,11.7344, "El punto de Banco East Beach (LS) fue marcado en el radar.");
		case 5: _MarcarPos(playerid, 1329.4080,-984.7357,33.8966, "El punto de Banco Temple (LS) fue marcado en el radar.");
		case 6: _MarcarPos(playerid, -1581.5549,867.2920,7.6953, "El punto de Banco Downtown (SF) fue marcado en el radar.");
		case 7: _MarcarPos(playerid, 2447.3821,2376.2942,12.1635, "El punto de Banco Roca Escalante (LV) fue marcado en el radar.");
		case 8: _MarcarPos(playerid, 550.6507,-1426.5330,16.1252, "El punto de Salon Vip fue marcado en el radar.");
		case 9: _MarcarPos(playerid, -328.6391,-877.6209,49.2925, "El punto de Motel 'FC' fue marcado en el radar.");
		case 10: _MarcarPos(playerid, 2177.1506,-1770.5114,13.5391, "El punto de Motel 'I' fue marcado en el radar.");
	}
	return 1;
}

Dialog:UbicarLocales(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_gps(playerid);
	new Str[256], Str_[3000], i_;
	SetPVarInt(playerid,"GPS_TipoNEG",listitem+1);
	new TIPO = GetPVarInt(playerid,"GPS_TipoNEG");
	Loop(id, totalnegocios, 1) if (InfoNegocio[id][nTipo] == TIPO)
	{
		new Float:Distancia = GetPlayerDistanceFromPoint(playerid, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ]);
		format(Str, sizeof Str, "? %s {33CCFF}(Distancia: %0.2f M)\n", InfoNegocio[id][nNombre], Distancia);
		strcat(Str_, Str);
		format(Str, sizeof Str, "GPS_Neg_%d", i_);
		SetPVarInt(playerid, Str, id);
		i_++;
	}
	Dialog_Show(playerid, Ubicar2Locales, DIALOG_STYLE_LIST, "Locales", Str_, "Continuar", "Volver");
	return 1;
}

Dialog:Ubicar2Locales(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, UbicarLocales, DIALOG_STYLE_LIST, "Locales", "24/7\nLocal de ropa\nResturante\nCluckin Bell\nPizzeria\nBurger Shot\nAmmu-Nation\nPeluqueria\nSex Shop\nGasolinera\nTienda electronica\nBar\nFerreteria\nAlhambra\nStrip club\nClub private", "Continuar", "Volver");
	new StrPVar[40];
	format(StrPVar, sizeof StrPVar, "GPS_Neg_%d", listitem);
	new id = GetPVarInt(playerid, StrPVar);
	SetPlayerCheckpoint(playerid, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ], 3);
	SetPVarInt(playerid, "EnCheckPoint", 1);
	return 1;
}

Dialog:UbicarCentrales(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_gps(playerid);
	switch (listitem)
	{
		case 0: _MarcarPos(playerid, 1553.7280,-1675.8405,16.1953, "La central LAPD fue marcada en el radar.");
		case 1: _MarcarPos(playerid, 1481.7535, -1772.4050, 18.7829, "El ayuntamiento fue marcado en el radar.");
		case 2: _MarcarPos(playerid, 1508.4857, -1585.0031, 13.7156, "El hospital principal fue marcado en el radar.");
		case 3: _MarcarPos(playerid, 635.6021, -570.6527, 16.3044, "La central de la sheriff fue marcada en el radar.");
	}
	return 1;
}

Dialog:UbicarConces(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_gps(playerid);
	switch (listitem)
	{
		case 0: _MarcarPos(playerid, 1986.7319,-2100.3467,13.5469, "La concesionaria de motos fue marcada en el radar.");
		case 1: _MarcarPos(playerid, 2131.8674, -1151.0360, 23.8920, "La concesionaria Coutt And Schutz fue marcada en el radar.");
		case 2: _MarcarPos(playerid, 519.0496, -1293.6548, 17.2224, "La concesionaria Grotti fue marcada en el radar.");
		case 3: _MarcarPos(playerid, 2793.1045, -1087.5013, 30.6801, "La concesionaria de camionetas fue marcada en el radar.");
		case 4: _MarcarPos(playerid, 2515.4216, -1957.9753, 16.7286, "La concesionaria Nuevased fue marcada en el radar.");
		case 5: _MarcarPos(playerid, 2589.1169, -2219.4470, 13.5184, "La concesionaria de segunda fue marcada en el radar.");
	}
	return 1;
}

CMD:talleres(playerid)
{
	if (GetPVarInt(playerid, "EnCheckPoint") > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes un checkpoint pendiente, escribe /eliminarcp.");
	if (EnModoTrabajo[playerid] != 0) return SendClientMessageEx(playerid, 0xccccccff, "Estas trabajando como %s, termina la labor para empezar esto.", IsLaborJob(EnModoTrabajo[playerid]));
	Dialog_Show(playerid, UbicarTalleres, DIALOG_STYLE_LIST, "Talleres mecanicos", "Idlewood Mecanics\nGanton Express\nFast Market\nPlaya Mecha\nCorona Wins\nx1 Taller LV\n Doherty Prime", "Continuar", "Volver");
	return 1;
}

CMD:empleos(playerid)
{
	if (GetPVarInt(playerid, "EnCheckPoint") > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes un checkpoint pendiente, escribe /eliminarcp.");
	if (EnModoTrabajo[playerid] != 0) return SendClientMessageEx(playerid, 0xccccccff, "Estas trabajando como %s, termina la labor para empezar esto.", IsLaborJob(EnModoTrabajo[playerid]));
	if (InfoJugador[playerid][jTiempoCarcel] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas en prision.");
	if (GetPVarInt(playerid, "EnCrack") != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas herido.");
	Dialog_Show(playerid, JobEmpleos, DIALOG_STYLE_LIST, "Trabajos disponibles", "Carguero\nDelincuente\nBasurero\nCamionero\nLadron de coches\nCarpintero\nAserrador\nMecanico\nProstituta\nGranjero\nTraficante\nDeshabilitado\nRecolector\nMinero\nMedico", "Continuar", "Salir");
	return 1;
}
CMD:jobs(playerid) return cmd_empleos(playerid);
CMD:trabajos(playerid) return cmd_empleos(playerid);

Dialog:JobEmpleos(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (listitem == 11) return SendClientMessageEx(playerid, 0xCCCCCCFF, "Deshabilitado.");
	ID_JOB_SELEC[playerid] = listitem+1;
	new string[60];
	format(string, sizeof string, "Escogiste: {bbb000}%s", GetNameJob(ID_JOB_SELEC[playerid]));
	Dialog_Show(playerid, Job2Empleos, DIALOG_STYLE_LIST, string, "Localizar trabajo\nUnirse al trabajo", "Continuar", "Volver");
	return 1;
}

Dialog:Job2Empleos(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_empleos(playerid);
	new id_job = ID_JOB_SELEC[playerid];
	switch (listitem)
	{
	    case 0: //localizar
	    {
			switch (id_job)
			{
				case 1: _MarcarPos(playerid, 2137.6953, -2282.5144, 20.7174, "Carguero localizado en el radar.");
				case 2: SendClientMessage(playerid, 0xccccccff, "* Delincuente no dispone de localizacion, usa /ayuda trabajo.");
				case 3: _MarcarPos(playerid, 1058.7013, 1335.0293, 10.7424, "Basurero localizado en el radar.");
				case 4: _MarcarPos(playerid, 1671.0421,763.5474,11.4662, "Camionero localizado en el radar.");
				case 5: SendClientMessage(playerid, 0xccccccff, "* Ladron de coches no dispone de localizacion, usa /ayuda trabajo.");
				case 6: _MarcarPos(playerid, 1896.9608,-1877.7721,13.5075, "Carpintero localizado en el radar.");
				case 7: _MarcarPos(playerid, -418.6058, -1759.5006, 6.2169, "Aserrador localizado en el radar.");
				case 8: cmd_talleres(playerid);
				case 9: SendClientMessage(playerid, 0xccccccff, "* Prostituta no dispone de localizacion, usa /ayuda trabajo.");
				case 10: _MarcarPos(playerid, -383.2412, -1438.8146, 26.3249, "Granjero localizado en el radar.");
				case 11: _MarcarPos(playerid, 655.2497, -502.9607, 16.3102, "Traficante de drogas localizado en el radar.");
				case 12: SendClientMessage(playerid, 0xccccccff, "* Proximamente trabajo para este slot.");
				case 13: _MarcarPos(playerid, -1060.9393,-1195.4661,129.6860, "Recolector localizado en el radar.");
				case 14: _MarcarPos(playerid, 596.3631,203.9364,21.7338, "Minero localizado en el radar.");
				case 15: _MarcarPos(playerid, 1180.9049,-1330.4548,13.5848, "Medico localizado en el radar.");
			}
		}
		case 1: // unirse al trabajo
		{
			if (id_job == 2) { if (!InfoJugador[playerid][jPuntosRol]) return ShowInfoForPlayer(playerid, "Debes tener al menos un punto de rol para ser delincuente.", 2000); }
			if (id_job == 4) { if (InfoJugador[playerid][jLicencias][2] == 0) return ShowInfoForPlayer(playerid, "No tienes licencia de camionero.", 2000); }
			if (id_job == 5) { if (!InfoJugador[playerid][jPuntosRol] && (InfoJugador[playerid][jHabilidad1][3] < 9)) return ShowInfoForPlayer(playerid, "Debes tener un punto de rol o habilidad minima de delincuente (10).", 2000); }
			if (id_job == 8) { if (InfoJugador[playerid][jNivel] < 4) return ShowInfoForPlayer(playerid, "Debes ser mayor a nivel de 4, para ser mecanico.", 2000); }
			if (id_job == 9 && InfoJugador[playerid][jSexo] != 2) return ShowInfoForPlayer(playerid, "Solo del sexo feminino pueden tomar el trabajo de prostituta.", 2000);
			if (id_job == 11) { if(InfoJugador[playerid][jNivel] < 5) return ShowInfoForPlayer(playerid, "Debes ser mayor a nivel de 5, para traficar.", 2000); }
			if (id_job == 15) { if(InfoJugador[playerid][jFamMiembro] > 0 || InfoJugador[playerid][jFacMiembro] > 0) return ShowInfoForPlayer(playerid, "No puedes ser medico si eres parte de una familia o faccion.", 2000); }
			//ceder trabajo
			if (InfoJugador[playerid][jTrabajo1] == 0)
			{
			    if (InfoJugador[playerid][jTrabajo2] == id_job) return SendClientMessage(playerid, 0xccccccff, "* Ya tienes ese trabajo, utiliza /renunciar 2.");
				InfoJugador[playerid][jTrabajo1] = id_job;
				SendClientMessageEx(playerid, 0xFFFFFFFF, "Ahora eres {FF0000}%s{FFFFFF} (slot 1). Utiliza ({54C822}/ayuda trabajo{FFFFFF})", GetNameJob(id_job));
				SendClientMessage(playerid, 0xCCCC00FF, "Puedes localizar la base de este trabajo desde ({FFFFFF}/trabajos{CCCC00})");
				guardar_int_mysql("cuentas", "Trabajo1", InfoJugador[playerid][jID], InfoJugador[playerid][jTrabajo1]);
			}
			else
			{
				if (InfoJugador[playerid][jNivelVIP] != 0)
				{
					if (InfoJugador[playerid][jTrabajo2] == 0)
					{
					    if (InfoJugador[playerid][jTrabajo1] == id_job) return SendClientMessage(playerid, 0xccccccff, "* Ya tienes ese trabajo, utiliza /renunciar 1.");
						if (InfoJugador[playerid][jTrabajo3] == id_job) return SendClientMessage(playerid, 0xccccccff, "* Ya tienes ese trabajo, utiliza /renunciar 3.");
						InfoJugador[playerid][jTrabajo2] = id_job;
						SendClientMessageEx(playerid, 0xFFFFFFFF, "Ahora eres {FF0000}%s{FFFFFF} (slot 2). Utiliza ({54C822}/ayuda trabajo{FFFFFF})", GetNameJob(id_job));
						SendClientMessage(playerid, 0xCCCC00FF, "Puedes localizar la base de este trabajo desde ({FFFFFF}/trabajos{CCCC00})");
						guardar_int_mysql("cuentas", "Trabajo2", InfoJugador[playerid][jID], InfoJugador[playerid][jTrabajo2]);
					}
					else
					{
						if (InfoJugador[playerid][jTrabajo3] != 0) return SendClientMessage(playerid, 0xccccccff, "* Ya tienes los tres slots de trabajo full, utiliza /renunciar.");
					    if (InfoJugador[playerid][jTrabajo1] == id_job) return SendClientMessage(playerid, 0xccccccff, "* Ya tienes ese trabajo, utiliza /renunciar 1.");
						if (InfoJugador[playerid][jTrabajo2] == id_job) return SendClientMessage(playerid, 0xccccccff, "* Ya tienes ese trabajo, utiliza /renunciar 2.");
						InfoJugador[playerid][jTrabajo3] = id_job;
						SendClientMessageEx(playerid, 0xFFFFFFFF, "Ahora eres {FF0000}%s{FFFFFF} (slot 3). Utiliza ({54C822}/ayuda trabajo{FFFFFF})", GetNameJob(id_job));
						SendClientMessage(playerid, 0xCCCC00FF, "Puedes localizar la base de este trabajo desde ({FFFFFF}/trabajos{CCCC00})");
						guardar_int_mysql("cuentas", "Trabajo3", InfoJugador[playerid][jID], InfoJugador[playerid][jTrabajo3]);
					}
				}
				else // sin vip
				{
					if (InfoJugador[playerid][jTrabajo2] != 0) return SendClientMessage(playerid, 0xccccccff, "* Ya tienes los dos slots de trabajo full, utiliza /renunciar.");
				    if (InfoJugador[playerid][jTrabajo1] == id_job) return SendClientMessage(playerid, 0xccccccff, "* Ya tienes ese trabajo, utiliza /renunciar 1.");
					InfoJugador[playerid][jTrabajo2] = id_job;
					SendClientMessageEx(playerid, 0xFFFFFFFF, "Ahora eres {FF0000}%s{FFFFFF} (slot 2). Utiliza ({54C822}/ayuda trabajo{FFFFFF})", GetNameJob(id_job));
					SendClientMessage(playerid, 0xCCCC00FF, "Puedes localizar la base de este trabajo desde ({FFFFFF}/trabajos{CCCC00})");
					guardar_int_mysql("cuentas", "Trabajo2", InfoJugador[playerid][jID], InfoJugador[playerid][jTrabajo2]);
				}
			}
		}
	}
	return 1;
}

Dialog:UbicarTalleres(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_gps(playerid);
	switch (listitem)
	{
		case 0: SetPlayerCheckpoint(playerid, 1953.3385, -1813.9626, 13.5441, 5.0), SendClientMessageEx(playerid, 0xCCCC00FF, "* Idlewood Mecanics marcado en el radar.");
		case 1: SetPlayerCheckpoint(playerid, 2519.4727, -1781.4602, 13.5629, 5.0), SendClientMessageEx(playerid, 0xCCCC00FF, "* Ganton Express marcado en el radar.");
		case 2: SetPlayerCheckpoint(playerid, 994.5137, -1387.8606, 13.2320, 5.0), SendClientMessageEx(playerid, 0xCCCC00FF, "* Fast Market marcado en el radar.");
		case 3: SetPlayerCheckpoint(playerid, 429.5487, -1782.4049, 5.5991, 5.0), SendClientMessageEx(playerid, 0xCCCC00FF, "* Playa Mecha marcado en el radar.");
		case 4: SetPlayerCheckpoint(playerid, 1800.6926, -2057.8989, 13.5352, 5.0), SendClientMessageEx(playerid, 0xCCCC00FF, "* Corona Wins marcado en el radar.");
		case 5: SetPlayerCheckpoint(playerid, 1844.48083, 913.94519, 10.27540, 5.0), SendClientMessageEx(playerid, 0xCCCC00FF, "* x1 Taller LV marcado en el radar.");
		case 6: SetPlayerCheckpoint(playerid, -2085.64795, -87.90515, 34.24590, 5.0), SendClientMessageEx(playerid, 0xCCCC00FF, "* Doherty Prime marcado en el radar.");
	}
	SetPVarInt(playerid, "EnCheckPoint", 1);
	TogglePlayerAllDynamicCPs(playerid, false);
	return 1;
}

CMD:stereo(playerid)
{
	new Float: x, Float: y, Float: z, id = 0;
	Loop(e, totalvehiculos, 1) if (InfoVehiculo[e][vSpawned] != 0)
	{
		GetVehiclePos(InfoVehiculo[e][vDL], x, y, z);
		if (_enPos(playerid, 4.2, x, y, z) && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(InfoVehiculo[e][vDL]) && GetPlayerInterior(playerid) == GetVehicleInterior(InfoVehiculo[e][vDL]))
		{
			id = e;
			break;
		}
	}
	if (id == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas cerca de un vehiculo de jugador.");
	new vehicleid = InfoVehiculo[id][vDL];
	if (InfoVehiculo[id][vStereo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo no tiene stereo instalado, compre uno en una tienda electronica.");
	if (GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese vehiculo no tiene maletero.");
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if (boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo tiene el maletero cerrado.");
	if (engine == VEHICLE_PARAMS_ON) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo debe tener el motor apagado.");
	//si hay otro
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && GetPVarType(playerid2, "AreaVehPos"))
	{
		if (_enPos(playerid, 65.0, GetPVarFloat(playerid2, "AreaVehPosX"), GetPVarFloat(playerid2, "AreaVehPosY"), GetPVarFloat(playerid2, "AreaVehPosZ")))
		{
			ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Hay un stereo activo en esta zona, si es tuyo usa /estacion.");
			return 1;
		}
	}
	//
	SetPVarInt(playerid, "AreaVehPos", 1);
	SetPVarFloat(playerid, "AreaVehPosX", x);
	SetPVarFloat(playerid, "AreaVehPosY", y);
	SetPVarFloat(playerid, "AreaVehPosZ", z);
	SetPVarInt(playerid, "AreaVehMus", CreateDynamicSphere(GetPVarFloat(playerid, "AreaVehPosX"), GetPVarFloat(playerid, "AreaVehPosY"), GetPVarFloat(playerid, "AreaVehPosZ"), 45.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)));
	SetPVarInt(playerid, "AreaVehPosInt", GetPlayerInterior(playerid));
	SetPVarInt(playerid, "AreaVehPosVW", GetPlayerVirtualWorld(playerid));
	SetPVarInt(playerid, "AreaVehID", vehicleid);
	AccionesRol(playerid, 0, "enciende el stereo de su vehiculo.");
	return 1;
}

CMD:estacion(playerid)
{
	if (!GetPVarType(playerid, "AreaVehPos")) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No has encendido el stereo o hay otro stereo encendido cercano.");
	if (!_enPos(playerid, 3.0, GetPVarFloat(playerid, "AreaVehPosX"), GetPVarFloat(playerid, "AreaVehPosY"), GetPVarFloat(playerid, "AreaVehPosZ"))) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas cerca de un vehiculo tuyo.");
	Dialog_Show(playerid, D_MusiCar, DIALOG_STYLE_LIST, "{D6E1EB}Stereo - Selecciona:", "{F50000}Detener musica{FFFFFF}\nRadios\nInsertar URL", "Continuar", "Salir");
	return 1;
}

Dialog:D_MusiCar(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (!GetPVarType(playerid, "AreaVehMus")) return 1;
			foreach(Player, i) if (IsPlayerConnectedEx(i) && IsPlayerInDynamicArea(i, GetPVarInt(playerid, "AreaVehMus")))
			{
				PararMVeh(i);
			}
			DeletePVar(playerid, "AreaVehMus");
			_Mensaje(playerid, 2, "0", "Apagaste el stereo.");
			DeletePVar(playerid, "AreaVehPos");
		}
		case 1:
		{
			new StationsDialog[2500];
            strcat(StationsDialog, "{F50000}||\t{F50000}Detener musica\t{F50000}||\n");
            strcat(StationsDialog, "{00C200}1\t{FFFFFF}NG.estacion Electronica\t{00A2FF}Electro\n");
			strcat(StationsDialog, "{00C200}2\t{FFFFFF}NG.estacion Electronica 2\t{00A2FF}Electro\n");
			strcat(StationsDialog, "{00C200}3\t{FFFFFF}NG.estacion Electronica 3\t{00A2FF}Electro\n");
			strcat(StationsDialog, "{00C200}4\t{FFFFFF}NG.estacion Rock\t{00A2FF}Rock\n");
			strcat(StationsDialog, "{00C200}5\t{FFFFFF}NG.estacion Rock 2\t{00A2FF}Rock\n");
			strcat(StationsDialog, "{00C200}6\t{FFFFFF}NG.estacion Rock 3\t{00A2FF}Rock\n");
			strcat(StationsDialog, "{00C200}7\t{FFFFFF}NG.estacion Rock 4\t{00A2FF}Rock\n");
			strcat(StationsDialog, "{00C200}8\t{FFFFFF}NG.estacion Tropical\t{00A2FF}Tropicall\n");
			strcat(StationsDialog, "{00C200}9\t{FFFFFF}NG.estacion Reggaeton\t{00A2FF}Reggaeton\n");
			strcat(StationsDialog, "{00C200}10\t{FFFFFF}NG.estacion Reggaeton 2\t{00A2FF}Reggaeton\n");
			strcat(StationsDialog, "{00C200}11\t{FFFFFF}NG.estacion Reggaeton 3\t{00A2FF}Reggaeton\n");
			strcat(StationsDialog, "{00C200}12\t{FFFFFF}NG.estacion Hip-Hop\t{00A2FF}Hip Hop\n");
			strcat(StationsDialog, "{00C200}13\t{FFFFFF}NG.estacion Hip-Hop 2\t{00A2FF}Hip Hop\n");
			Dialog_Show(playerid, D_MusiCar3, DIALOG_STYLE_LIST, "{00C200}Radios", StationsDialog, "Continuar", "Salir");
		}
		case 2: Dialog_Show(playerid, D_MusiCar2, DIALOG_STYLE_INPUT, "{D6E1EB}Url - Internet", "{FFFFFF}Inserta un Stream (www.offliberty.com) para reproducirlo", "Continuar", "Cancelar");
	}
	return 1;
}

Dialog:D_MusiCar2(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (isnull(inputtext)) return _Mensaje(playerid, 2, "0", "No has puesto ningun URL.");
	_stereo(playerid, inputtext);
	return 1;
}

Dialog:D_MusiCar3(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: _stereo(playerid, "http://54house.stream-balancer.de:80");
		case 1: _stereo(playerid, "http://184.154.94.194:8028/listen.pls");
		case 2: _stereo(playerid, "http://148.251.91.15:7004");
		case 3: _stereo(playerid, "http://listen.shoutcast.com/reggaetonhits.m3u");
		case 4: _stereo(playerid, "http://216.230.231.122:8000/MP3128");
		case 5: _stereo(playerid, "http://listen.shoutcast.com/113fmtheeagle.m3u");
		case 6: _stereo(playerid, "http://108.61.73.119:8028");
		case 7: _stereo(playerid, "http://173.244.215.163:8380");
		case 8: _stereo(playerid, "http://69.4.232.118:80");
		case 9: _stereo(playerid, "http://64.202.98.133:2010");
		case 10: _stereo(playerid, "http://50.117.115.211:80");
		case 11: _stereo(playerid, "http://108.61.30.179:4010");
		case 12: _stereo(playerid, "http://50.7.64.226:80/frisky_mp3_hi");
		case 13: _stereo(playerid, "http://5.135.223.251:9000");
		case 14: _stereo(playerid, "http://62.210.209.179:8030/stream");
		case 15: _stereo(playerid, "http://198.211.102.165:8000");
		case 16: _stereo(playerid, "http://somafm.com/tags.pls");
		case 17: _stereo(playerid, "http://streaming.latina101.com.ar/listen.pls");
		case 18: _stereo(playerid, "http://s3.voscast.com:8002/;.m3u");
		case 19: _stereo(playerid, "http://listen.radionomy.com/hotmixradio-hiphop-128.m3u");
		case 20: _stereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=139278");
		case 21: _stereo(playerid, "http://listen.shoutcast.com:80/RadioHunter-TheHitzChannel");
		case 22: _stereo(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=654138");
	}
	return 1;
}

CMD:apagarstereo(playerid)
{
	new Float: x, Float: y, Float: z, id = 0;
	Loop(e, totalvehiculos, 1) if (InfoVehiculo[e][vSpawned] != 0)
	{
		GetVehiclePos(InfoVehiculo[e][vDL], x, y, z);
		if (_enPos(playerid, 4.2, x, y, z) && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(InfoVehiculo[e][vDL]) && GetPlayerInterior(playerid) == GetVehicleInterior(InfoVehiculo[e][vDL]))
		{
			id = e;
			break;
		}
	}
	if (id == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas cerca de un vehiculo de jugador.");
	if (InfoVehiculo[id][vStereo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo no tiene stereo instalado, compre uno en una tienda electronica.");
	if (GetPVarType(playerid, "AreaVehPos"))
	{
		DeletePVar(playerid, "AreaVehPos");
		DeletePVar(playerid, "AreaVehAud");
		DeletePVar(playerid, "AreaVehPosLabel");
		DeletePVar(playerid, "AreaVehPosX");
		DeletePVar(playerid, "AreaVehPosY");
		DeletePVar(playerid, "AreaVehPosZ");
		DeletePVar(playerid, "AreaVehPosInt");
		DeletePVar(playerid, "AreaVehPosVW");
		DeletePVar(playerid, "AreaVehID");
		if (GetPVarType(playerid, "AreaVehMus"))
		{
			foreach(Player, i) if (IsPlayerInDynamicArea(i, GetPVarInt(playerid, "AreaVehMus"))) { PararMVeh(i); }
		}
		DeletePVar(playerid, "AreaVehMus");
		_Mensaje(playerid, 2, "0", "Apagaste tu stereo!");
		return 1;
	}
	else
	{
		foreach(Player, i) if (GetPVarType(i, "AreaVehPos"))
		{
			if (GetPVarInt(i, "AreaVehPosVW") == GetPlayerVirtualWorld(playerid) && GetPVarInt(i, "AreaVehPosInt") == GetPlayerInterior(playerid) && _enPos(playerid, 5.0, GetPVarFloat(i, "AreaVehPosX"), GetPVarFloat(i, "AreaVehPosY"), GetPVarFloat(i, "AreaVehPosZ")))
			{
				DeletePVar(i, "AreaVehPos");
				DeletePVar(i, "AreaVehAud");
				DeletePVar(i, "AreaVehPosX");
				DeletePVar(i, "AreaVehPosY");
				DeletePVar(i, "AreaVehPosZ");
				DeletePVar(i, "AreaVehPosInt");
				DeletePVar(i, "AreaVehPosVW");
				DeletePVar(i, "AreaVehID");
				if (GetPVarType(i, "AreaVehMus"))
				{
					foreach(Player, e) if (IsPlayerInDynamicArea(e, GetPVarInt(e, "AreaVehMus"))) { PararMVeh(e); }
					DeletePVar(i, "AreaVehMus");
				}
				return 1;
			}
		}
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No has prendido tu stereo o hay otro auto con stereo encendido muy cerca.");
	return 1;
}

CMD:quitartunning(playerid)
{
	new vehiculo = GetPlayerVehicleID(playerid);
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres el conductor.");
	new id = verificar_id_vehiculo(vehiculo);
	if (id == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo no figura ningun propietario.");
	if (acceso_vehiculo(playerid, vehiculo) != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes las llaves de este vehiculo.");
	new modList[512], string[128], count = 0;
	for (new f = 0; f < MAX_MODIFICACIONES; f++)
	{
		if (GetVehicleComponentInSlot(vehiculo, f) != 0)
		{
			if (f != 9 && f != 7 && f != 8)
			{
				format(modList, sizeof(modList), "%s\n%s - %s", modList, PartesVehiculo(f), PartesNombres(GetVehicleComponentInSlot(vehiculo, f)));
			} else format(modList, sizeof(modList), "%s\n%s", modList, PartesVehiculo(f));
			format(string, sizeof string, "partList%d", count);
			SetPVarInt(playerid, string, GetVehicleComponentInSlot(vehiculo, f));
			count++;
		}
	}
	if (count == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo no tiene ninguna modificacion.");
	format(modList, sizeof(modList), "%s\nTodo", modList);
	format(string, sizeof string, "partList%d", count);
	SetPVarInt(playerid, string, 999);
	count++;
	SetPVarInt(playerid, "modCount", count);
	Dialog_Show(playerid, RemoverTunning, DIALOG_STYLE_LIST, "{D6E1EB}Partes", modList, "Continuar", "Salir");
	return 1;
}

Dialog:RemoverTunning(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new count = GetPVarInt(playerid, "modCount");
	Loop(id, totalvehiculos, 1) if (IsPlayerInVehicle(playerid, InfoVehiculo[id][vDL])) for(new i = 0; i < count; i++) if (listitem == i)
	{
		new vehicleid = InfoVehiculo[id][vDL], string[190];
		format(string, sizeof string, "partList%i", i);
		new partID = GetPVarInt(playerid, string);
		if (partID == 999)
		{
		    new countxd = 0;
			Loop(f, MAX_MODIFICACIONES, 0) if (InfoVehiculo[id][vModificacion][f] != 0)
			{
				printf("%d",f+1);
				RemoveVehicleComponent(vehicleid, GetVehicleComponentInSlot(vehicleid, f));
				InfoVehiculo[id][vModificacion][f] = 0;
				format(string, sizeof string, "Modificacion%d", f+1);
				guardar_int_mysql("vehiculos", string, InfoVehiculo[id][vID], InfoVehiculo[id][vModificacion][f]);
				countxd++;
			}
			if (countxd == 0) return SendClientMessage(playerid, -1, "Este vehiculo no tiene modificaciones.");
			SendClientMessageEx(playerid, -1, "Se removieron %d modificaciones con exito.", countxd);
			return 1;
		}
		format(string, sizeof string, "Modificacion%d", GetVehicleComponentType(partID)+1);
		RemoveVehicleComponent(vehicleid, partID);
		InfoVehiculo[id][vModificacion][GetVehicleComponentType(partID)] = 0;
		guardar_int_mysql("vehiculos", string, InfoVehiculo[id][vID], InfoVehiculo[id][vModificacion][GetVehicleComponentType(partID)]);
		return SendClientMessageEx(playerid, -1, "Modificacion %d removida con exito.", GetVehicleComponentType(partID));
	}
	return 1;
}

CMD:verincendios(playerid)
{
	if (!Es_job(playerid, 15)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres empleado del hospital, no eres medico.");
	new IncendiosDialog[1028], TempConvert[128], ConteoFire = -1;
	Loop(id, totalincendios, 1) if (InfoIncendio[id][pI_propiedad] != -1)
	{
		if (ConteoFire != -1)
		{
			if (InfoIncendio[id][pI_tipo] == 0) format(TempConvert, sizeof TempConvert, "\r\nCasa #%d", InfoIncendio[id][pI_propiedad]);
			else format(TempConvert, sizeof TempConvert, "\r\nNegocio (%s)", InfoNegocio[InfoIncendio[id][pI_propiedad]][nNombre]);
		}
		else
		{
			if (InfoIncendio[id][pI_tipo] == 0) format(TempConvert, sizeof TempConvert, "Casa #%d", InfoIncendio[id][pI_propiedad]);
			else format(TempConvert, sizeof TempConvert, "Negocio (%s)", InfoNegocio[InfoIncendio[id][pI_propiedad]][nNombre]);
		}
		strcat(IncendiosDialog, TempConvert, sizeof IncendiosDialog);
		ConteoFire++;
		sel_incendio[playerid][ConteoFire] = id;
	}
	if (ConteoFire == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No hay ningun incendio existente.");
	Dialog_Show(playerid, ShowFireFD, DIALOG_STYLE_LIST, "Incendios activos", IncendiosDialog, "Localizar", "Cancelar");
	return 1;
}

Dialog:ShowFireFD(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new i = sel_incendio[playerid][listitem];
	new id = InfoIncendio[i][pI_propiedad];
	if (id == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El incendio ya fue controlado.");
	SetPVarInt(playerid, "EnCheckPoint", 1);
	if (InfoIncendio[i][pI_tipo] == 0) SetPlayerCheckpoint(playerid, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ], 6.0);
	else SetPlayerCheckpoint(playerid, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ], 6.0);
	SendClientMessage(playerid, 0xCCCC00FF, "El incendio fue marcado en el radar.");
	return 1;
}

CMD:crearincendio(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Crearincendio.");
	OnDuty
	new tipo, id_propiedad, nextFire = FuegoSiguiente(), gformat[256];
	if (nextFire == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No se pueden crear mas incendios, se llego al limite de 20.");
	if (sscanf(params, "dd", tipo, id_propiedad)) return _Mensaje(playerid, 3, "0", "/crearincendio [tipo propiedad (0casa 1negocio)] [id propiedad]");
	if (tipo < 0 || tipo > 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo existen dos tipos (0 casa) (1 negocio)");
	if (tipo == 0)
	{
		if (id_propiedad < 1 || id_propiedad > totalcasas) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Casa no encontrada.");
		if (InfoCasa[id_propiedad][cTipo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Esa casa no existe.");
		format(gformat, sizeof gformat, "Administracion: %s(%d) ha creado un incendio en la casa %d.", NombreRJugador(playerid), playerid, id_propiedad);
		MensajeAdmin(gformat);
		CreateFireGeneral(id_propiedad, tipo, 0);
	}
	else if (tipo == 1)
	{
		if (id_propiedad < 1 || id_propiedad >= totalnegocios) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~ID de negocio invalida.");
		if (InfoNegocio[id_propiedad][nTipo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Esa ID esta vacia.");
		format(gformat, sizeof gformat, "Administracion: %s(%d) ha creado un incendio en el negocio %d.", NombreRJugador(playerid), playerid, id_propiedad);
		MensajeAdmin(gformat);
		CreateFireGeneral(id_propiedad, tipo, 0);
	}
	return 1;
}

CMD:incendios(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Crearincendio.");
	OnDuty
	new IncendiosDialog[1028], TempConvert[128], ConteoFire = -1;
	Loop(id, totalincendios, 1) if (InfoIncendio[id][pI_propiedad] != -1)
	{
		if (ConteoFire != -1)
		{
			if (InfoIncendio[id][pI_tipo] == 0) format(TempConvert, sizeof TempConvert, "\r\nCasa #%d", InfoIncendio[id][pI_propiedad]);
			else format(TempConvert, sizeof TempConvert, "\r\nNegocio (%s)", InfoNegocio[InfoIncendio[id][pI_propiedad]][nNombre]);
		}
		else
		{
			if (InfoIncendio[id][pI_tipo] == 0) format(TempConvert, sizeof TempConvert, "Casa #%d", InfoIncendio[id][pI_propiedad]);
			else format(TempConvert, sizeof TempConvert, "Negocio (%s)", InfoNegocio[InfoIncendio[id][pI_propiedad]][nNombre]);
		}
		strcat(IncendiosDialog, TempConvert, sizeof IncendiosDialog);
		ConteoFire++;
		sel_incendio[playerid][ConteoFire] = id;
	}
	if (ConteoFire == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No hay ningun incendio existente.");
	Dialog_Show(playerid, ShowFireAdmin, DIALOG_STYLE_LIST, "Incendios activos", IncendiosDialog, "Apagar", "Cancelar");
	return 1;
}

Dialog:ShowFireAdmin(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (DestroyFire(sel_incendio[playerid][listitem]))
	{
	    new string[190];
		format(string, sizeof string, "Administracion: %s(%d) elimino un incendio desde /incendios.", NombreRJugador(playerid), playerid);
		MensajeAdmin(string);
		return 1;
	}
	SendClientMessage(playerid, 0x00FF00FF, "Ese incendio ya fue apagado correctamente.");
	return 1;
}

CMD:guardar(playerid)
{
	if (InfoJugador[playerid][jManoDerecha] == 0) guardar_inventario(playerid, 2);
	else guardar_inventario(playerid, 1);
	SetPlayerInventario(playerid, 3);
	return 1;
}

CMD:guardarct(playerid)
{
	if (!Es_Banda(playerid, 1, 2, 3)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un cinturon tactico");
	G_Cinturon(playerid, 1);
	return 1;
}
CMD:gct(playerid) return cmd_guardarct(playerid);

CMD:sacarct(playerid, params[])
{
	new id;
	if (InfoJugador[playerid][jEncarcelado] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas en prision.");
	if (sscanf(params, "i", id)) { _Mensaje(playerid, 3, "0", "/sacarct [Espacio]"); return 1; }
	if (!Es_Banda(playerid, 1, 2, 3)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un cinturon tactico");
	if (id < 1 || id > 6) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El numero del espacios debe estar entre 1 y 6."); return 1; }
	S_Cinturon(playerid, id - 1);
	return 1;
}
CMD:sct(playerid, params[]) return cmd_sacarct(playerid, params);

CMD:sacar(playerid, params[])
{
	new id;
	if (sscanf(params, "i", id)) { _Mensaje(playerid, 3, "0", "/sacar [Espacio]"); return 1; }
	if (id < 1 || id > 9) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El numero del bolsillo debe estar entre 1 y 9."); return 1; }
	sacar_inventario(playerid, id - 1);
	SetPlayerInventario(playerid, 3);
	return 1;
}

CMD:cmano(playerid)
{
	ActualizarManos(playerid);
	if (InfoJugador[playerid][jManoDerecha] == 0 && InfoJugador[playerid][jManoIzquierda] == 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes nada en ninguna mano."); return 1; }
	new ManoDer = InfoJugador[playerid][jManoDerecha], ManoDerCant = InfoJugador[playerid][jManoDerechaCant], ManoIzq = InfoJugador[playerid][jManoIzquierda], ManoIzqCant = InfoJugador[playerid][jManoIzquierdaCant], query[512];
	if (Objeto_Carga(ManoIzq)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes cambiar este objeto de tu mano izquierda.");
	if (ManoDer == 0)
	{
		RemovePlayerAttachedObject(playerid, 7);
		PonerObjeto(playerid, 1, ManoIzq);
		_Mensaje(playerid, 4, "F8D48C", "Has intercambiado los objetos de tus manos.");
		if (InfoInventario[ManoIzq][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[ManoIzq][IDArma], ManoIzqCant); }
		if (Objeto_Carga(ManoIzq)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	}
	else if (ManoIzq == 0)
	{
		PonerObjeto(playerid, 2, ManoDer);
		RemovePlayerAttachedObject(playerid, 6);
		_Mensaje(playerid, 4, "F8D48C", "Has intercambiado los objetos de tus manos.");
		if (Objeto_Carga(ManoDer)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	}
	else
	{
		PonerObjeto(playerid, 1, ManoIzq);
		PonerObjeto(playerid, 2, ManoDer);
		_Mensaje(playerid, 4, "F8D48C", "Has intercambiado los objetos de tus manos.");
		if (InfoInventario[ManoIzq][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[ManoIzq][IDArma], ManoIzqCant); }
		if (Objeto_Carga(ManoDer)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	}
	InfoJugador[playerid][jManoDerechaCant] = ManoIzqCant, InfoJugador[playerid][jManoDerecha] = ManoIzq;
	InfoJugador[playerid][jManoIzquierdaCant] = ManoDerCant, InfoJugador[playerid][jManoIzquierda] = ManoDer;
	mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET mano_derecha = '%d', Cantidad_mano_derecha = '%d', mano_izquierda = '%d', Cantidad_mano_izquierda = '%d' WHERE ID = '%d'", InfoJugador[playerid][jManoDerecha], InfoJugador[playerid][jManoDerechaCant], InfoJugador[playerid][jManoIzquierda], InfoJugador[playerid][jManoIzquierdaCant], InfoJugador[playerid][jID]);
	mysql_tquery(DBngrp, query);
	SetPlayerInventario(playerid, 3);
	return 1;
}
CMD:mano(playerid) return cmd_cmano(playerid);

//Sistema de armero by // x1

CMD:preciosarmas(playerid)
{
   new dialogShow[2056];
   strcat(dialogShow, "\n");
   strcat(dialogShow, "{FFFFFF}Nudillera(precio base: {00CC00}$200){FFFFFF}(precio calle: {009900}$500)\n");
   strcat(dialogShow, "{FFFFFF}Palo de golf(precio base: {00CC00}$1.000){FFFFFF}(precio calle: {009900}$2,000)\n");
   strcat(dialogShow, "{FFFFFF}Navaja(precio base: {00CC00}$8,000){FFFFFF}(precio calle: {009900}$10,000)\n");
   strcat(dialogShow, "{FFFFFF}Bate(precio base: {00CC00}$1,000){FFFFFF}(precio calle: {009900}$2,000)\n");
   strcat(dialogShow, "{FFFFFF}Pala(precio base: {00CC00}$300){FFFFFF}{FFFFFF}(precio calle: {009900}$500)\n");
   strcat(dialogShow, "{FFFFFF}Palo de billar(precio base: {00CC00}$1,000){FFFFFF}(precio calle: {009900}$2,000)\n");
   strcat(dialogShow, "{FFFFFF}Flores(precio base: {00CC00}$20){FFFFFF}(precio calle: {009900}$50)\n");
   strcat(dialogShow, "{FFFFFF}Baston(precio base: {00CC00}$1,000){FFFFFF}(precio calle: {009900}$2,000)\n");
   strcat(dialogShow, "{FFFFFF}9mm(precio base: {00CC00}$1,000){FFFFFF}(precio calle: {009900}$2,000)\n");
   strcat(dialogShow, "{FFFFFF}9mm + silenciador(precio base: {00CC00}$2,000){FFFFFF}(precio calle: {009900}$3,500)\n");
   strcat(dialogShow, "{FFFFFF}Desert(precio base: {00CC00}$10,000){FFFFFF}(precio calle: {009900}$15,000)\n");
   strcat(dialogShow, "{FFFFFF}Escopeta(precio base: {00CC00}$8,000){FFFFFF}(precio calle: {009900}$10,000)\n");
   strcat(dialogShow, "{FFFFFF}UZI(precio base: {00CC00}$3,000){FFFFFF}(precio calle: {009900}$5,000)\n");
   strcat(dialogShow, "{FFFFFF}Botiquin(precio base: {00CC00}$760){FFFFFF}(precio calle: {009900}$800)\n");
   strcat(dialogShow, "{FFFFFF}Chaleco(precio base: {00CC00}$2,300){FFFFFF}(precio calle: {009900}$3,100)\n");
   strcat(dialogShow, "{FFFFFF}Tec9(precio base: {00CC00}$3,500){FFFFFF}(precio calle: {009900}$5,000)\n");
   strcat(dialogShow, "{FFFFFF}MP5(precio base: {00CC00}$8,000){FFFFFF}(precio calle: {009900}$10,000)\n");
   strcat(dialogShow, "{FFFFFF}AK47(precio base: {00CC00}$15,000){FFFFFF}(precio calle: {009900}$20,000)\n");
   Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{CCCCCC}Informacion {FF7000}precios armas", dialogShow, "Cerrar", "");
   return 1;
}

CMD:actualizaciones(playerid)
{
   new dialogShow[2056];
   strcat(dialogShow, "\n");
   strcat(dialogShow, "{C93CCE}•{FFFFFF}Se Agrego sistema de mochilas.\n");
   strcat(dialogShow, "{C93CCE}•{FFFFFF}Se Agrego Un CMD quitararmas para la administracion.\n");
   strcat(dialogShow, "{C93CCE}•{FFFFFF}Se reparo el bug de las armas que al seleccionar una seleccionaba otra.\n");
   strcat(dialogShow, "{C93CCE}•{FFFFFF}Se Agrego un sistema de bodas.\n");
   strcat(dialogShow, "{C93CCE}•{FFFFFF}Se agrego un nuevo sistema de reportes.\n");
   strcat(dialogShow, "{C93CCE}•{FFFFFF}Se Agrego un nuevo login.\n");
   strcat(dialogShow, "{C93CCE}•{FFFFFF}Se reparo el bug que no dejaba crear nuevas cuentas.\n");
   strcat(dialogShow, "{C93CCE}•{FFFFFF}Ahora se puede ingresar URL En vehiculos.\n");
   strcat(dialogShow, "{C93CCE}•{FFFFFF}Se corrigio un BUG sobre la espalda.\n");
   strcat(dialogShow, "{C93CCE}•{FFFFFF}Se corrigio un BUG sobre el simbolo ?.\n");
   strcat(dialogShow, "{C93CCE}•{FFFFFF}Ahora el CMD: m es para las mochilas.\n");
   strcat(dialogShow, "{C93CCE}•{FFFFFF}Se remodelo el /creditos.\n");
   strcat(dialogShow, "{C93CCE}•{FFFFFF}Se corrigio el BUG que al guardar algo en el inventario se bugueaban las armas\n");
   strcat(dialogShow, "{C93CCE}•{FFFFFF}Se ajustaron los vehiculos spawneados que pueden tener los Niveles VIP\n\n");
   strcat(dialogShow, "{C93CCE}•{FFFFFF}Creditos: {FFA500}Chiwi.\n");
   Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{7FFF00}Version 1.21", dialogShow, "Cerrar", "");
   return 1;
}

CMD:link(playerid)
{
   new dialogShow[2056];
   strcat(dialogShow, "\n");
   strcat(dialogShow, "{000099}Discord principal: {FFFFFF}https://dsc.gg/falpacityrpgr\n");
   strcat(dialogShow, "{000099}Discord de la SAPD: {FFFFFF}https://discord.gg/fwvWVtaY2E\n");
   strcat(dialogShow, "{000099}Discord de la SAEM: {FFFFFF}https://discord.gg/W2c4hCQwPZ\n");
   strcat(dialogShow, "{000099}Discord de la SASD: {FFFFFF}https://discord.gg/sTcrgV2C8R\n");
   strcat(dialogShow, "{000099}Discord del GOB: {FFFFFF}https://discord.gg/2s4UugCZjc\n");
   strcat(dialogShow, "{000099}Discord de la CNN: {FFFFFF}https://discord.gg/myRnumKEfv\n");
   strcat(dialogShow, "{000099}Discord de Atencion administrativa: {FFFFFF}https://discord.gg/NsNrcgV5M3\n");
   strcat(dialogShow, "{000099}Discord de apelacion de baneos: {FFFFFF}https://discord.gg/4ReayZ83E9\n");
   strcat(dialogShow, "{000099}Discord de facciones/bandas legales: {FFFFFF}https://discord.gg/2erSWNUXgK\n");
   strcat(dialogShow, "{000099}Discord de familias/bandas: {FFFFFF}https://discord.gg/KMXKY6Vhx3\n");
   strcat(dialogShow, "{000099}Discord de atencion publicitaria: {FFFFFF}https://discord.gg/udrCmc8RrM\n");
   Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "{6666FF}Discords del servidor", dialogShow, "Cerrar", "");
   return 1;
}

CMD:creditos(playerid, params[])
{
	new iString[1000];
	strcat(iString, "{364AC9}Desarrollador:.\n");
	strcat(iString, "\n");
    strcat(iString, "{FFFFFF} x1 y x2|\n");
    strcat(iString, "\n");
   	strcat(iString, "{364AC9}Dueños del Servidor:\n");
   	strcat(iString, "\n");
   	strcat(iString, "{FFFFFF} x1 |  x3 y x2|\n");
   	strcat(iString, "\n");
	strcat(iString, "{364AC9} Agradecimientos: | North America Roleplay Oficial\n");
	strcat(iString, "\n");
    strcat(iString, "{FFFFFF} Los agradecimientos son aquellos que aportaron\n");
    strcat(iString, "{FFFFFF} o colaboraron al Servidor, en este caso\n");
    strcat(iString, "{FFFFFF} Albert entre otros, también agradecimientos\n");
	strcat(iString, "{FFFFFF} a todos los donadores de dinero que ayudan\n");
    strcat(iString, "{FFFFFF} a mantener en pie este gran servidor ¡Saludos! ..\n");
    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FFFFFF}North America Roleplay Oficial - Creditos", iString, "Aceptar", "");
    return 1;
}

CMD:crearobjeto(playerid, params[])
{
	new idobj, cantidad, string[128];
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Usted no esta autorizado para utilizar este comando administrativo.");
	if (sscanf(params, "ii", idobj, cantidad)) { _Mensaje(playerid, 3, "0", "/crearobjeto [ID Objeto] [Cantidad]"); return 1; }
	if (idobj <= 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~La ID del objeto no puede ser nula o negativa.");
	if (cantidad <= 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~La cantidad no puede ser nula o negativa.");
	if (idobj < 1 || idobj > sizeof InfoInventario) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~ID de objeto erroneo.");
	if (InfoJugador[playerid][jManoDerecha] > 0 && InfoJugador[playerid][jManoIzquierda] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes tener una mano vacia.");
	if (Objeto_Carga(idobj)) { if (Tiene_Obj_Carga(playerid) != 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya posees objetos de carga en una de tus manos."); return 1; } }
	if(idobj == 151)
	{
	    if (InfoJugador[playerid][jManoDerecha] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes tener la mano derecha vacia.");
		generar_mochila(playerid);
		format(string, sizeof string, "Administracion: %s creó una Mochila.",NombreRJugador(playerid));
		MensajeAdmin(string);
		return 1;
	}
	if (InfoJugador[playerid][jManoDerecha] == 0)
	{
		InfoJugador[playerid][jManoDerecha] = idobj;
		InfoJugador[playerid][jManoDerechaCant] = cantidad;
		PonerObjeto(playerid, 1, idobj);
		if (InfoInventario[idobj][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[idobj][IDArma], cantidad); }
		if (Objeto_Carga(idobj)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	}
	else if (InfoJugador[playerid][jManoDerecha] != 0)
	{
		InfoJugador[playerid][jManoIzquierda] = idobj;
		InfoJugador[playerid][jManoIzquierdaCant] = cantidad;
		PonerObjeto(playerid, 2, idobj);
		if (Objeto_Carga(idobj)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	}
	ActualizarManos(playerid);
	format(string, sizeof string, "Administracion: %s ha creado un objeto [Nombre: %s] [Cantidad: %d].",NombreRJugador(playerid), InfoInventario[idobj][NombreObjeto], cantidad);
	MensajeAdmin(string);
	format(string, sizeof string, "Creo un objeto (%s - %d)", InfoInventario[idobj][NombreObjeto], cantidad);
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 10);
	return 1;
}

CMD:daryt(playerid,params[])
{
    OnDuty
    if (InfoJugador[playerid][jAdmin] > 10)
    {
        if (sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "/daryt [playerid]");
        InfoJugador[params[0]][jYT] = 1;
		guardar_int_mysql("cuentas", "YT", InfoJugador[params[0]][jID], 1);
        new string[126];
        format(string, sizeof string, "Administracion: %s utilizo /daryt, Jugador: %s[%d].", NombreRJugador(playerid), NombreRJugador(params[0]),params[0]);
        MensajeAdmin(string);
        _Mensaje(params[0], 2, "0", "Has sido ascendido a {FF0000}You{FFFFFF}Tuber.");
    }else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /daryt.");
    return 1;
}

CMD:quitaryt(playerid,params[])
{
    OnDuty
    if (InfoJugador[playerid][jAdmin] > 10)
    {
        if (sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "/quitaryt [playerid]");
        InfoJugador[params[0]][jYT] = 0;
		guardar_int_mysql("cuentas", "YT", InfoJugador[params[0]][jID], 0);
        new string[126];
        format(string, sizeof string, "Administracion: %s utilizo /quitaryt, Jugador: %s[%d].", NombreRJugador(playerid), NombreRJugador(params[0]),params[0]);
        MensajeAdmin(string);
        _Mensaje(params[0], 2, "0", "Has sido descendido del rango {FF0000}You{FFFFFF}Tuber.");
    }else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /quitaryt.");
    return 1;
}

CMD:tirar(playerid)
{
	new Float: X, Float: Y, Float: Z, ManoDer = InfoJugador[playerid][jManoDerecha], ManoDerCant = InfoJugador[playerid][jManoDerechaCant], ManoIzq = InfoJugador[playerid][jManoIzquierda], ManoIzqCant = InfoJugador[playerid][jManoIzquierdaCant];
	if (InfoJugador[playerid][jEncarcelado] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas en prision.");
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en esta situacion.");
	if (InfoJugador[playerid][jManoDerecha] != 0)
	{
		ActualizarManos(playerid);
		SendClientMessageEx(playerid, 0xA7CE00FF, "Tiras %s de tu mano derecha.", InfoInventario[ManoDer][NombreObjeto]);
		if (Objeto_Carga(ManoDer) || ManoDer == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		InfoJugador[playerid][jManoDerecha] = 0;
		InfoJugador[playerid][jManoDerechaCant] = 0;
		RemovePlayerAttachedObject(playerid, 6);
		GetPlayerPos(playerid, X, Y, Z);
		TirarObjeto(ManoDer, 1, ManoDerCant, X, Y - 0.3, Z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		Streamer_Update(playerid);
		ActualizarManos(playerid);
		SetPlayerInventario(playerid, 3);
		return 1;
	}
	if (InfoJugador[playerid][jManoIzquierda] != 0)
	{
		ActualizarManos(playerid);
		SendClientMessageEx(playerid, 0xA7CE00FF, "Tiras %s de tu mano izquierda.", InfoInventario[ManoIzq][NombreObjeto]);
		if (Objeto_Carga(ManoIzq) || ManoIzq == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		InfoJugador[playerid][jManoIzquierda] = 0;
		InfoJugador[playerid][jManoIzquierdaCant] = 0;
		RemovePlayerAttachedObject(playerid, 7);
		GetPlayerPos(playerid, X, Y, Z);
		TirarObjeto(ManoIzq, 1, ManoIzqCant, X, Y - 0.3, Z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		Streamer_Update(playerid);
		ActualizarManos(playerid);
		SetPlayerInventario(playerid, 3);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes nada en ninguna mano.");
	return 1;
}

CMD:recoger(playerid, params[])
{
	if (InfoJugador[playerid][jManoDerecha] > 0 && InfoJugador[playerid][jManoIzquierda] > 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas."); return 1; }
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en esta situacion.");
	if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando sino estas herido.");
	if (isnull(params)) RecogerObjeto(playerid, -1);
	else
	{
		new id;
		if (sscanf(params, "d", id)) return _Mensaje(playerid, 3, "0", "/recogerobjeto [ObjetoID]");
		if (id < 0 || id >= MAX_OBJETOS_S) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Objeto incorrecto, selecciona entre 0-500.");
		RecogerObjeto(playerid, id);
	}
	SetPlayerInventario(playerid, 3);
	return 1;
}
CMD:recogerobjeto(playerid, params[]) return cmd_recoger(playerid, params);

CMD:pecho(playerid)
{
	if (B_Pecho[playerid] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes activar el modo pecho con /togpecho.");
	return cmd_espalda(playerid);
}
CMD:qpecho(playerid) return cmd_pecho(playerid);

CMD:espalda(playerid)
{
	if (InfoJugador[playerid][jEncarcelado] == 1) return 1;
	new mano = InfoJugador[playerid][jManoDerecha], espalda = InfoJugador[playerid][jEspalda], gformat[190];
	if (InfoJugador[playerid][jEspalda] != 0)
	{
		if (Robando_Objeto[playerid] != 0) return SendClientMessageEx(playerid, 0xccccccff, "* No puedes usar esta funcion mientras robas un objeto de casa.");
		if (InfoJugador[playerid][jManoDerecha] != 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* No puedes descolgar tu %s si tienes %s en tu mano derecha.", InfoInventario[espalda][NombreObjeto], InfoInventario[mano][NombreObjeto]);
		format(gformat, sizeof gformat, "descuelga %s de su espalda.", InfoInventario[espalda][NombreObjeto]);
		cmd_me(playerid, gformat);
		GivePlayerWeapon(playerid, InfoInventario[espalda][IDArma], InfoJugador[playerid][jEspaldaCant]);
		InfoJugador[playerid][jManoDerecha] = espalda;
		InfoJugador[playerid][jManoDerechaCant] = InfoJugador[playerid][jEspaldaCant];
		PonerObjeto(playerid, 1, espalda);
		if(InfoJugador[playerid][jEspalda] == 135) RemovePlayerAttachedObject(playerid, 4);
		else  RemovePlayerAttachedObject(playerid, 9);
		InfoJugador[playerid][jEspalda] = 0;
		InfoJugador[playerid][jEspaldaCant] = 0;
		guardar_int_mysql("cuentas", "Mano_derecha", InfoJugador[playerid][jID], InfoJugador[playerid][jManoDerecha]);
		guardar_int_mysql("cuentas", "Cantidad_mano_derecha", InfoJugador[playerid][jID], InfoJugador[playerid][jManoDerechaCant]);
		guardar_int_mysql("cuentas", "Espalda", InfoJugador[playerid][jID], InfoJugador[playerid][jEspalda]);
		guardar_int_mysql("cuentas", "Cantidad_espalda", InfoJugador[playerid][jID], InfoJugador[playerid][jEspaldaCant]);
		SetPlayerInventario(playerid, 3);
		return 1;
	}
	if (InfoJugador[playerid][jManoDerecha] == 0) return 1;
	if (InfoInventario[mano][Guardable] == 1 || InfoInventario[mano][Guardable] == 2) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* No puedes colgar tu %s en tu espalda.", InfoInventario[mano][NombreObjeto]);
	ActualizarManos(playerid);
	format(gformat, sizeof gformat, "cuelga %s en su espalda.", InfoInventario[mano][NombreObjeto]);
	cmd_me(playerid, gformat);
	InfoJugador[playerid][jEspalda] = mano, InfoJugador[playerid][jEspaldaCant] = InfoJugador[playerid][jManoDerechaCant];
	InfoJugador[playerid][jManoDerecha] = 0, InfoJugador[playerid][jManoDerechaCant] = 0;
	PonerObjeto(playerid, 3, mano);
	RemovePlayerAttachedObject(playerid, 6);
	guardar_int_mysql("cuentas", "Mano_derecha", InfoJugador[playerid][jID], InfoJugador[playerid][jManoDerecha]);
	guardar_int_mysql("cuentas", "Cantidad_mano_derecha", InfoJugador[playerid][jID], InfoJugador[playerid][jManoDerechaCant]);
	guardar_int_mysql("cuentas", "Espalda", InfoJugador[playerid][jID], InfoJugador[playerid][jEspalda]);
	guardar_int_mysql("cuentas", "Cantidad_espalda", InfoJugador[playerid][jID], InfoJugador[playerid][jEspaldaCant]);
	SetPlayerInventario(playerid, 3);
	return 1;
}

CMD:e(playerid) return cmd_espalda(playerid);
CMD:qespalda(playerid) return cmd_espalda(playerid);

CMD:bol(playerid)
{
	if (Toy_ID[playerid] != -1) return SendClientMessage(playerid, 0xccccccff, "* No puedes hacer esto ahora.");
	if (Ropa_ID[playerid] != 0) return SendClientMessage(playerid, 0xccccccff, "* No puedes abrir el inventario mientras compras ropa.");
	//estilo pantalla
	if (InfoJugador[playerid][jVerBolsillos] != 0) return SetPlayerInventario(playerid, 1);
	//dialog
	ActualizarManos(playerid);
	new dialog[1024], string[190];
	Loop(id, 9, 0)
	{
		new Bol = InfoJugador[playerid][jBolsillo][id];
		if (Bol == 0) format(string, sizeof string, "{cccccc}Vacio\n");
		else format(string, sizeof string, "{FFFFFF}%s ({00CC00}%d{FFFFFF})\n", InfoInventario[Bol][NombreObjeto], InfoJugador[playerid][jBolsilloCant][id]);
		strcat(dialog, string);
	}
	format(string, sizeof string, "{008BFF}----------\n");
	strcat(dialog, string);
	if (InfoJugador[playerid][jManoDerecha] == 0) format(string, sizeof string, "{cccccc}Mano derecha: vacia\n");
	else format(string, sizeof string, "{FFFFFF}Mano derecha: %s ({00CC00}%d{FFFFFF})\n", InfoInventario[InfoJugador[playerid][jManoDerecha]][NombreObjeto], InfoJugador[playerid][jManoDerechaCant]);
	strcat(dialog, string);
	if (InfoJugador[playerid][jManoIzquierda] == 0) format(string, sizeof string, "{cccccc}Mano izquierda: vacia\n");
	else format(string, sizeof string, "{FFFFFF}Mano izquierda: %s ({00CC00}%d{FFFFFF})\n", InfoInventario[InfoJugador[playerid][jManoIzquierda]][NombreObjeto], InfoJugador[playerid][jManoIzquierdaCant]);
	strcat(dialog, string);
	Dialog_Show(playerid, Show_Inventario, DIALOG_STYLE_LIST, "Inventario", dialog, "Continuar", "Salir");
	return 1;
}
CMD:inv(playerid) return cmd_bol(playerid);
CMD:bolsillo(playerid) return cmd_bol(playerid);
CMD:inventario(playerid) return cmd_bol(playerid);
CMD:bolsillos(playerid) return cmd_bol(playerid);

Dialog:Show_Inventario(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0..8: sacar_inventario(playerid, listitem);
		case 9: return cmd_bol(playerid);
		case 10: guardar_inventario(playerid, 1);
		case 11: guardar_inventario(playerid, 2);
	}
	return 1;
}

CMD:panel(playerid)
{
	new dialog[2056], gformat[190];
	//case 0
	if (InfoJugador[playerid][jVerBolsillos] == 1) strcat(dialog, "Configuracion de inventario\t< {84B7D8}Textdraw\n");
	else strcat(dialog, "Configuracion de inventario\t> {84D8AA}Dialogo\n");
	//case 1
	if (InfoJugador[playerid][jCanalDudas] == 1) strcat(dialog, "Mostrar canal de dudas\t< {dd643a}No\n");
	else strcat(dialog, "Mostrar canal de dudas\t> {1EB032}Si\n");
	//case 2
	if (InfoJugador[playerid][jDiscord] == 1) strcat(dialog, "Mostrar canal Discord\t< {dd643a}No\n");
	else strcat(dialog, "Mostrar canal Discord\t> {1EB032}Si\n");
	//case 3
	if (InfoJugador[playerid][jReferido] == 1)
	{
		format(gformat, sizeof gformat, "Referido\t> {1EB032}%s\n", InfoJugador[playerid][jNombreAmigo]);
		strcat(dialog, gformat);
	}
	else strcat(dialog, "Referido\t< {dd643a}North America Oficial\n");
	//case 4
	if (InfoJugador[playerid][jApodoDiscord] == 1)
	{
		format(gformat, sizeof gformat, "Apodo discord\t> {1EB032}%s\n", InfoJugador[playerid][jApodoDiscordNombre]);
		strcat(dialog, gformat);
	}
	else strcat(dialog, "Apodo discord\t< {dd643a}Sin apodo\n");
	//case 5
	if (InfoJugador[playerid][jDiscordNitro] == 1) strcat(dialog, "Discord nitro\t> {ff6eb9}Activo\n");
	else strcat(dialog, "Discord nitro\t< {dd643a}Desactivado\n");
	//case 6
	if (InfoJugador[playerid][jVerNecesidades] == 1) strcat(dialog, "Mostrar necesidades\t< {dd643a}No\n");
	else strcat(dialog, "Mostrar necesidades\t> {1EB032}Si\n");
	//case 7
	strcat(dialog, "Cambiar Clave\n");
	//case 8
	strcat(dialog, "Cambiar Sexo\n");
	//case 9
	strcat(dialog, "Cambiar Edad\n");
	//titulo
	Dialog_Show(playerid, ShowPanelUser, DIALOG_STYLE_TABLIST, "Configuracion", dialog, "Continuar", "Salir");
	return 1;
}

Dialog:ShowPanelUser(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (InfoJugador[playerid][jVerBolsillos] != 0)
			{
				InfoJugador[playerid][jVerBolsillos] = 0;
				SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Ahora la visualizacion del bolsillo sera en dialogo.");
			}
			else
			{
				InfoJugador[playerid][jVerBolsillos] = 1;
				SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Ahora la visualizacion del bolsillo sera en Textdraw.");
			}
			cmd_panel(playerid);
			guardar_int_mysql("cuentas", "VerBolsillos", InfoJugador[playerid][jID], InfoJugador[playerid][jVerBolsillos]);
		}
		case 1:
		{
			if (InfoJugador[playerid][jCanalDudas] != 0)
			{
				InfoJugador[playerid][jCanalDudas] = 0;
				SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Ahora si veras el chat de dudas publico.");
			}
			else
			{
				InfoJugador[playerid][jCanalDudas] = 1;
				SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Ahora no veras el chat de dudas publico.");
			}
			cmd_panel(playerid);
			guardar_int_mysql("cuentas", "CanalDudas", InfoJugador[playerid][jID], InfoJugador[playerid][jCanalDudas]);
		}
		case 2:
		{
			if (InfoJugador[playerid][jDiscord] != 0)
			{
				InfoJugador[playerid][jDiscord] = 0;
				SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Ahora si veras el chat de Discord publico.");
			}
			else
			{
				InfoJugador[playerid][jDiscord] = 1;
				SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Ahora no veras el chat de Discord publico.");
			}
			cmd_panel(playerid);
			guardar_int_mysql("cuentas", "Discord", InfoJugador[playerid][jID], InfoJugador[playerid][jDiscord]);
		}
		case 3:
		{
			if (InfoJugador[playerid][jReferido] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya tienes una persona como referido.");
			else
			{
				ShowPlayerDialog(playerid, D_referido, DIALOG_STYLE_INPUT, "Sistema de {fff000}referido!", "{FFFFFF}Ingresa un codigo de referido.", "Continuar", "Cancelar");
			}
		}
		case 4:
		{
			ShowPlayerDialog(playerid, 5002, DIALOG_STYLE_INPUT, "North America Roleplay Oficial > Apodo Discord", "{FFFFFF}Ingresa el apodo que quieres tener el canal de discord(Usa 'nada' para poner tu nombre)", ">", "?");
		}
		case 5:
		{
			if (InfoJugador[playerid][jNivelVIP] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes ser VIP para usar esta funcion.");
			if (InfoJugador[playerid][jDiscordNitro] != 0)
			{
				InfoJugador[playerid][jDiscordNitro] = 0;
				SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Desactivas el color del Discord Nitro.");
			}
			else
			{
				InfoJugador[playerid][jDiscordNitro] = 1;
				SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Activaste el color especial del Discord Nitro.");
			}
			cmd_panel(playerid);
			guardar_int_mysql("cuentas", "DiscordNitro", InfoJugador[playerid][jID], InfoJugador[playerid][jDiscordNitro]);
		}
		case 6:
		{
			if (InfoJugador[playerid][jVerNecesidades] != 0)
			{
				InfoJugador[playerid][jVerNecesidades] = 0;
				SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Ahora si veras las necesidades en pantalla.");
				ShowPlayerProgressBar(playerid, BarraSed[playerid]);
				ShowPlayerProgressBar(playerid, BarraHambre[playerid]);
				TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
            	TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
			}
			else
			{
				InfoJugador[playerid][jVerNecesidades] = 1;
				SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Ahora no veras las necesidades en pantalla.");
				HidePlayerProgressBar(playerid, BarraSed[playerid]);
				HidePlayerProgressBar(playerid, BarraHambre[playerid]);
				TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
            	TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
			}
			cmd_panel(playerid);
			guardar_int_mysql("cuentas", "VerNecesidades", InfoJugador[playerid][jID], InfoJugador[playerid][jVerNecesidades]);
		}
		case 7: Dialog_Show(playerid, ConfirmarPass, DIALOG_STYLE_PASSWORD, "Cambio de clave", "{cccccc}Introduce tu clave actual:", "Continuar", "Volver");
		case 8: Dialog_Show(playerid, Change_Sex, DIALOG_STYLE_MSGBOX, "Sexo", "{cccccc}?Que sexo desea para su personaje ahora?", "Hombre", "Mujer");
		case 9: Dialog_Show(playerid, Change_Edad, DIALOG_STYLE_INPUT, "Edad", "{cccccc}Introduce la nueva edad para su personaje", "Cambiar", "Volver");
	}
	return 1;
}

Dialog:Change_Sex(playerid, response, listitem, inputtext[])
{
	if (!response) InfoJugador[playerid][jSexo] = 2;
	else InfoJugador[playerid][jSexo] = 1;
	new sexo[18];
	switch (InfoJugador[playerid][jSexo])
	{
		case 1: sexo = "Hombre";
		case 2: sexo = "Mujer";
	}
	SendClientMessageEx(playerid, 0x00F50AFF, "Cambio de sexo realizado con exito! {F0F0F0}El nuevo sexo de supersonaje es: {00F50A}%s ", sexo);
	guardar_int_mysql("cuentas", "Sexo", InfoJugador[playerid][jID], InfoJugador[playerid][jSexo]);
	return 1;
}

Dialog:Change_Edad(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_panel(playerid);
	if (strval(inputtext) >= 15 && strval(inputtext) <= 85)
	{
		InfoJugador[playerid][jEdad] = strval(inputtext);
		guardar_int_mysql("cuentas", "Edad", InfoJugador[playerid][jID], InfoJugador[playerid][jEdad]);
		SendClientMessageEx(playerid, 0x00F50AFF, "Cambio de edad realizado con exito! {F0F0F0}La nueva edad de su personaje es: {00F50A}%d", InfoJugador[playerid][jEdad]);
	}
	else
	{
		ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~La edad tiene que estar comprendida entre 15 y 85 a?os.");
		Dialog_Show(playerid, Change_Edad, DIALOG_STYLE_INPUT, "Edad", "{cccccc}Introduce la nueva edad para su personaje", "Cambiar", "Volver");
	}
	return 1;
}

Dialog:ConfirmarPass(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_panel(playerid);
	new Salted_Key[65];
	SHA256_PassHash(inputtext, InfoJugador[playerid][jSalt], Salted_Key, 65);
	if (strcmp(Salted_Key, InfoJugador[playerid][jClave]) == 0)
	{
		Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Nueva clave", "{cccccc}Introduce la nueva clave:", "Cambiar", "Salir");
	}
	else
	{
		SendClientMessage(playerid, 0xccccccff, "Clave incorrecta, intenta de nuevo.");
		Dialog_Show(playerid, ConfirmarPass, DIALOG_STYLE_PASSWORD, "Cambio de clave", "{cccccc}Introduce tu clave actual:", "Continuar", "Volver");
	}
	return 1;
}

Dialog:NewPass(playerid, response, listitem, inputtext[])
{
	new string[256];
	if (!response) return 1;
	if (strlen(inputtext) < 5)
	{
		SendClientMessage(playerid, 0xccccccff, "No puedes tener una clave con menos de 4 caracteres.");
		Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Nueva clave", "{cccccc}Introduce la nueva clave:", "Cambiar", "Salir");
		return 1;
	}
	if (strlen(inputtext) > 23)
	{
		SendClientMessage(playerid, 0xccccccff, "No puedes tener una clave con mas de 24 caracteres.");
		Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Nueva clave", "{cccccc}Introduce la nueva clave:", "Cambiar", "Salir");
		return 1;
	}
	//hash password + save
	Loop(e, 10, 0) { InfoJugador[playerid][jSalt][e] = random(79) + 47; }
	InfoJugador[playerid][jSalt][10] = 0;
	SHA256_PassHash(inputtext, InfoJugador[playerid][jSalt], InfoJugador[playerid][jClave], 65);
	mysql_format(DBngrp, string, sizeof string, "UPDATE cuentas SET Clave = '%e', Salt = '%e' WHERE ID = '%d'", InfoJugador[playerid][jClave], InfoJugador[playerid][jSalt], InfoJugador[playerid][jID]);
	mysql_tquery(DBngrp, string);
	//mensaje
	format(string, sizeof string, "Has cambiado tu clave a: '%s'", inputtext);
	SendClientMessage(playerid, 0xFFF000FF, string);
	return 1;
}

CMD:cinturon(playerid)
{
	if (!Es_Banda(playerid, 1, 2, 3)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un cinturon tactico");
	ver_Cinturon(playerid, playerid);
	return 1;
}
CMD:ct(playerid) return cmd_cinturon(playerid);

CMD:tomararma(playerid, params[])
{
	new playerid2;
	if (InfoJugador[playerid][jEncarcelado] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas en prision.");
	if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas herido.");
	if (InfoJugador[playerid][jHorasConectado] < 2) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes menos de 2 horas de juego."); return 1; }
	if (sscanf(params, "u", playerid2)) return _Mensaje(playerid, 3, "0", "/tomararma [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no esta conectado correctamente.");
	if (!CercaDelWeon(4.0, playerid, playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~La persona que seleccionaste no esta cerca tuyo.");
	if (GetPVarInt(playerid2, "EnCrack") == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no esta herido.");
	if (InfoJugador[playerid2][jManoDerecha] != 0)
	{
		if (InfoJugador[playerid][jManoIzquierda] > 0 && InfoJugador[playerid][jManoDerecha] > 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas."); return 1; }
		new ManoDer = InfoJugador[playerid2][jManoDerecha], ManoDerCant = InfoJugador[playerid2][jManoDerechaCant];
		if (ManoDer == 137) return _Mensaje(playerid, 4, "b00000", "No puedes tomar una caja registradora.");
		if (Objeto_Carga(ManoDer)) { if (Tiene_Obj_Carga(playerid) != 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya posees objetos de carga en una de tus manos."); return 1; } }
		if (InfoJugador[playerid][jManoDerecha] == 0)
		{
			if (InfoInventario[ManoDer][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[ManoDer][IDArma], ManoDerCant); }
			InfoJugador[playerid][jManoDerecha] = ManoDer, InfoJugador[playerid][jManoDerechaCant] = ManoDerCant, PonerObjeto(playerid, 1, ManoDer), ActualizarManos(playerid);
			if (Objeto_Carga(ManoDer)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		}
		else if (InfoJugador[playerid][jManoIzquierda] == 0)
		{
			InfoJugador[playerid][jManoIzquierda] = ManoDer, InfoJugador[playerid][jManoIzquierdaCant] = ManoDerCant, PonerObjeto(playerid, 2, ManoDer), ActualizarManos(playerid);
			if (Objeto_Carga(ManoDer)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		}
		if (Objeto_Carga(InfoJugador[playerid2][jManoDerecha])) SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_NONE);
		InfoJugador[playerid2][jManoDerecha] = 0, InfoJugador[playerid2][jManoDerechaCant] = 0, ActualizarManos(playerid2);
		ResetPlayerWeapons(playerid2);
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "tomo el objeto de la mano derecha de %s.", NombreJugador(playerid2));
		AccionesRol(playerid, 0, MsgCheckMe);
		SendClientMessageEx(playerid, 0xA7CE00FF, "Coges %s.", InfoInventario[ManoDer][NombreObjeto]);
		SendClientMessageEx(playerid2, 0xFFFFFFFF, "Tomaron tu %s.", InfoInventario[ManoDer][NombreObjeto]);
		ActualizarManos(playerid), ActualizarManos(playerid2);
		return 1;
	}
	else if (InfoJugador[playerid2][jManoIzquierda] != 0)
	{
		if (InfoJugador[playerid][jManoIzquierda] > 0 && InfoJugador[playerid][jManoDerecha] > 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas."); return 1; }
		new ManoIzq = InfoJugador[playerid2][jManoIzquierda], ManoIzqCant = InfoJugador[playerid2][jManoIzquierdaCant];
		if (ManoIzq == 131) return _Mensaje(playerid, 4, "b00000", "No puedes tomar una caja registradora.");
		if (Objeto_Carga(ManoIzq)) { if (Tiene_Obj_Carga(playerid) != 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya posees objetos de carga en una de tus manos."); return 1; } }
		if (InfoJugador[playerid][jManoDerecha] == 0)
		{
			InfoJugador[playerid][jManoDerecha] = ManoIzq, InfoJugador[playerid][jManoDerechaCant] = ManoIzqCant, PonerObjeto(playerid, 1, ManoIzq), ActualizarManos(playerid);
			if (Objeto_Carga(ManoIzq)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		}
		else if (InfoJugador[playerid][jManoIzquierda] == 0)
		{
			InfoJugador[playerid][jManoIzquierda] = ManoIzq, InfoJugador[playerid][jManoIzquierdaCant] = ManoIzqCant, PonerObjeto(playerid, 2, ManoIzq), ActualizarManos(playerid);
			if (Objeto_Carga(ManoIzq)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		}
		if (Objeto_Carga(InfoJugador[playerid2][jManoIzquierda])) SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_NONE);
		InfoJugador[playerid2][jManoIzquierda] = 0, InfoJugador[playerid2][jManoIzquierdaCant] = 0, ActualizarManos(playerid2);
		ResetPlayerWeapons(playerid2);
		new MsgCheckMe[MAX_TEXT_CHAT];
		format(MsgCheckMe, sizeof(MsgCheckMe), "tomo el objeto de la mano izquierda de %s.", NombreJugador(playerid2));
		AccionesRol(playerid, 0, MsgCheckMe);
		SendClientMessageEx(playerid, 0xA7CE00FF, "Coges %s.", InfoInventario[ManoIzq][NombreObjeto]);
		SendClientMessageEx(playerid2, 0xFFFFFFFF, "Tomaron tu %s.", InfoInventario[ManoIzq][NombreObjeto]);
		ActualizarManos(playerid), ActualizarManos(playerid2);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no tiene nada en sus manos.");
	return 1;
}

CMD:ceder(playerid, params[])
{
	new playerid2, string[256];
	if(!CheckTimer(5, CederTiempo[playerid]))
	{
		if (InfoJugador[playerid][jEncarcelado] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas en prision.");
		if (sscanf(params, "u", playerid2)) return _Mensaje(playerid, 3, "0", "/ceder [id jugador]");
		if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no esta conectado correctamente.");
		if (!CercaDelWeon(8.0, playerid, playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~La persona que seleccionaste no esta cerca tuyo.");
		if (InfoJugador[playerid][jManoDerecha] <= 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes nada en tu mano derecha."); return 1; }
		if (InfoJugador[playerid2][jHorasConectado] < 2)
		{
			if(InfoInventario[InfoJugador[playerid][jManoDerecha]][IDArma] > 0)
			{
				_Mensaje(playerid, 4, "FFFFFF", "Ese jugador no posee aun diez horas de juego.");
				return 1;
			}
		}
		if (InfoJugador[playerid2][jManoIzquierda] > 0 && InfoJugador[playerid2][jManoDerecha] > 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este jugador tiene ambas manos ocupadas."); return 1; }
		new ManoDer = InfoJugador[playerid][jManoDerecha], ManoDerCant = InfoJugador[playerid][jManoDerechaCant];
		if (Objeto_Carga(ManoDer)) { if (Tiene_Obj_Carga(playerid2) != 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador ya posee objetos de carga en una de sus manos."); return 1; } }
        if (ManoDer == 131) return _Mensaje(playerid, 4, "b00000", "No puedes ceder una caja registradora, tirala.");
		if (InfoJugador[playerid2][jManoDerecha] == 0)
		{
			if (InfoInventario[ManoDer][IDArma] > 0) { GivePlayerWeapon(playerid2, InfoInventario[ManoDer][IDArma], ManoDerCant); }
			InfoJugador[playerid2][jManoDerecha] = ManoDer, InfoJugador[playerid2][jManoDerechaCant] = ManoDerCant, PonerObjeto(playerid2, 1, ManoDer), ActualizarManos(playerid2);
			if (Objeto_Carga(ManoDer)) SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_CARRY);
		}
		else if (InfoJugador[playerid2][jManoIzquierda] == 0)
		{
			InfoJugador[playerid2][jManoIzquierda] = ManoDer, InfoJugador[playerid2][jManoIzquierdaCant] = ManoDerCant, PonerObjeto(playerid2, 2, ManoDer), ActualizarManos(playerid2);
			if (Objeto_Carga(ManoDer)) SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_CARRY);
		}
		InfoJugador[playerid][jManoDerecha] = 0, InfoJugador[playerid][jManoDerechaCant] = 0, ActualizarManos(playerid);
		CederTiempo[playerid] = gettime();
		SendClientMessageEx(playerid2, 0xFFFFFFFF, "%s te entrega su %s.", NombreJugador(playerid), InfoInventario[ManoDer][NombreObjeto]);
		SendClientMessageEx(playerid, 0xFFFFFFFF, "Entregas tu %s a %s.", InfoInventario[ManoDer][NombreObjeto], NombreJugador(playerid2));
		ActualizarManos(playerid), ActualizarManos(playerid2);
		SetPlayerInventario(playerid, 3), SetPlayerInventario(playerid2, 3);
	}
	else
	{
		format(string, sizeof string, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(5, CederTiempo[playerid]));
		ShowPlayerFooter(playerid, string);
	}
	return 1;
}

CMD:chaleco(playerid)
{
	if (!CheckTimer(20, TimerCombate[playerid]))
	{
	if (InfoJugador[playerid][jChaleco] != 0.0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya tienes un chaleco puesto, debes usar /qchaleco para quitarlo.");
	if (InfoJugador[playerid][jManoDerecha] != 72) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes ningun blindaje en tu mano derecha.");
	new gformat[190];
	ActualizarManos(playerid);
	format(gformat, sizeof gformat, "se coloca un blindaje de %d Armour.", InfoJugador[playerid][jManoDerechaCant]);
	AccionesRol(playerid, 0, gformat);
	Dar_Chaleco(playerid, InfoJugador[playerid][jManoDerechaCant]);
	InfoJugador[playerid][jManoDerecha] = 0;
	RemovePlayerAttachedObject(playerid, 6);
	guardar_int_mysql("cuentas", "Mano_derecha", InfoJugador[playerid][jID], InfoJugador[playerid][jManoDerecha]);
	guardar_int_mysql("cuentas", "Cantidad_mano_derecha", InfoJugador[playerid][jID], InfoJugador[playerid][jManoDerechaCant]);
	}
	else{
		SendClientMessageEx(playerid, 0x9A5FFFFF, "Estas en modo combate, debes esperar %s segundos.", Segundos_tiempo(CheckTimer(20, TimerCombate[playerid])));
	}
	return 1;
}

CMD:qchaleco(playerid)
{
	if (InfoJugador[playerid][jChaleco] == 0.0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes ningun blindaje puesto.");
	if (GetPVarInt(playerid, "HaciendoEvento") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes utilizar este comando mientras estas en el evento.");
	new Float: chaleco = InfoJugador[playerid][jChaleco];
	if (InfoJugador[playerid][jManoDerecha] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes tener tu mano derecha vacia.");
	SendClientMessageEx(playerid, 0xA7CE00FF, "Te has retirado el blindaje con %d de Armour.", floatround(chaleco));
	InfoJugador[playerid][jManoDerecha] = 72;
	InfoJugador[playerid][jManoDerechaCant] = floatround(chaleco);
	PonerObjeto(playerid, 1, 72);
	guardar_int_mysql("cuentas", "Mano_derecha", InfoJugador[playerid][jID], InfoJugador[playerid][jManoDerecha]);
	guardar_int_mysql("cuentas", "Cantidad_mano_derecha", InfoJugador[playerid][jID], InfoJugador[playerid][jManoDerechaCant]);
	InfoJugador[playerid][jChaleco] = 0.0;
	Dar_Chaleco(playerid, 0);
	guardar_float_mysql("cuentas", "Chaleco", InfoJugador[playerid][jID], InfoJugador[playerid][jChaleco]);
	return 1;
}

CMD:mascarapd(playerid, params[])
{
	if (!Es_Banda(playerid, 1)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD.", 2000);
	if (InfoJugador[playerid][jFamRango] < 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes ser rango 4 minimo.");
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/mascarapd [Nombre_Apellido]");
	if (GetPVarInt(playerid, "IsNameNew") == 0)
	{
		if (VerificarCuenta(params)) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese nombre ya esta registrado."); return 1; }
		SendClientMessageEx(playerid, 0xFFF000FF, "Te encuentras en modo ra como %s.", params);
		SetPVarInt(playerid, "IsNameNew", 1);
		SetPlayerName(playerid, params);
		return 1;
	}
	SendClientMessageEx(playerid, 0xFFF000FF, "Te encuentras nuevamente como: %s", InfoJugador[playerid][jNombre_Apellido]);
	SetPVarInt(playerid, "IsNameNew", 0);
	SetPlayerName(playerid, InfoJugador[playerid][jNombre_Apellido]);
	return 1;
}

CMD:beber(playerid, params[]) {
    new string[128];
    if(((InfoJugador[playerid][jManoDerecha] >= 93 && InfoJugador[playerid][jManoDerecha] <= 99) || (InfoJugador[playerid][jManoDerecha] >= 103 && InfoJugador[playerid][jManoDerecha] <= 105) || InfoJugador[playerid][jManoDerecha] == 124) && InfoJugador[playerid][jManoDerechaCant] > 0) {
        if (InfoJugador[playerid][jAlcohol] > 51) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Has bebido demasiado trata de pasar todo el alcohol que llevas.");
        switch(InfoJugador[playerid][jManoDerecha]) {
	        case 93: InfoJugador[playerid][jSed] += 42; //Lata de sprunk
	        case 94: InfoJugador[playerid][jSed] += 38; //Lata de fanta
	        case 95: InfoJugador[playerid][jSed] += 80; //Botella de agua
	        case 96: InfoJugador[playerid][jSed] += 22; //Botella de cerveza
	        case 97: { InfoJugador[playerid][jSed] += 12; InfoJugador[playerid][jAlcohol] += 1; } //Copa de vino
	        case 98: { InfoJugador[playerid][jSed] += 12; InfoJugador[playerid][jAlcohol] += 2; } //Vaso de whisky
	        case 99: { InfoJugador[playerid][jSed] += 12; InfoJugador[playerid][jAlcohol] += 3; } //Vaso de ron
	        case 103: { InfoJugador[playerid][jSed] += 25; InfoJugador[playerid][jAlcohol] += 9; } //Botella de ron
	        case 104: { InfoJugador[playerid][jSed] += 25; InfoJugador[playerid][jAlcohol] += 7; } //Botella de whisky
	        case 105: { InfoJugador[playerid][jSed] += 25; InfoJugador[playerid][jAlcohol] += 5; } //Botella de vino
	        case 124: { InfoJugador[playerid][jSed] += 15; InfoJugador[playerid][jAlcohol] += 10; } //purple drank
        }
        ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000, 1);
        format(string, sizeof string, "bebe de su %s.", InfoInventario[InfoJugador[playerid][jManoDerecha]][NombreObjeto]);
 	    AccionesRol(playerid, 1, string);
        InfoJugador[playerid][jManoDerechaCant] --;
        if(InfoJugador[playerid][jSed] > MAX_SED){InfoJugador[playerid][jSed] = MAX_SED;}
        ActualizarSed(playerid);
        ActualizarManos(playerid);
		guardar_int_mysql("cuentas", "Sed", InfoJugador[playerid][jID], InfoJugador[playerid][jSed]);
		guardar_int_mysql("cuentas", "Alcohol", InfoJugador[playerid][jID], InfoJugador[playerid][jAlcohol]);
        if (InfoJugador[playerid][jAlcohol] > 35)
		{
            AccionesRol(playerid, 1, "vomita el contenido que ha bebido.");
            InfoJugador[playerid][jAlcohol] -= 5;
            ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0, 1);
            return 1;
        }
	    return 1;
    } else if(((InfoJugador[playerid][jManoIzquierda] >= 93 && InfoJugador[playerid][jManoIzquierda] <= 99) || (InfoJugador[playerid][jManoIzquierda] >= 103 && InfoJugador[playerid][jManoIzquierda] <= 105) || InfoJugador[playerid][jManoIzquierda] == 124) && InfoJugador[playerid][jManoIzquierdaCant] > 0) {
        if (InfoJugador[playerid][jAlcohol] > 51) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Has bebido demasiado trata de pasar todo el alcohol que llevas.");
        switch(InfoJugador[playerid][jManoIzquierda]) {
	        case 93: InfoJugador[playerid][jSed] += 42; //Lata de sprunk
	        case 94: InfoJugador[playerid][jSed] += 38; //Lata de fanta
	        case 95: InfoJugador[playerid][jSed] += 80; //Botella de agua
	        case 96: InfoJugador[playerid][jSed] += 22; //Botella de cerveza
	        case 97: { InfoJugador[playerid][jSed] += 12; InfoJugador[playerid][jAlcohol] += 1; } //Copa de vino
	        case 98: { InfoJugador[playerid][jSed] += 12; InfoJugador[playerid][jAlcohol] += 2; } //Vaso de whisky
	        case 99: { InfoJugador[playerid][jSed] += 12; InfoJugador[playerid][jAlcohol] += 3; } //Vaso de ron
	        case 103: { InfoJugador[playerid][jSed] += 25; InfoJugador[playerid][jAlcohol] += 9; } //Botella de ron
	        case 104: { InfoJugador[playerid][jSed] += 25; InfoJugador[playerid][jAlcohol] += 7; } //Botella de whisky
	        case 105: { InfoJugador[playerid][jSed] += 25; InfoJugador[playerid][jAlcohol] += 5; } //Botella de vino
	        case 124: { InfoJugador[playerid][jSed] += 15; InfoJugador[playerid][jAlcohol] += 10; } //purple drank
        }
        ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000, 1);
        format(string, sizeof string, "bebe de su %s.", InfoInventario[InfoJugador[playerid][jManoIzquierda]][NombreObjeto]);
 	    AccionesRol(playerid, 1, string);
        InfoJugador[playerid][jManoIzquierdaCant] --;
        if(InfoJugador[playerid][jSed] > MAX_SED){InfoJugador[playerid][jSed] = MAX_SED;}
        ActualizarSed(playerid);
        ActualizarManos(playerid);
		guardar_int_mysql("cuentas", "Sed", InfoJugador[playerid][jID], InfoJugador[playerid][jSed]);
		guardar_int_mysql("cuentas", "Alcohol", InfoJugador[playerid][jID], InfoJugador[playerid][jAlcohol]);
        if(InfoJugador[playerid][jAlcohol] > 35) {
            AccionesRol(playerid, 1, "vomita el contenido que ha bebido.");
            InfoJugador[playerid][jAlcohol] -= 5;
            ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0, 1);
            return 1;
        }
	    return 1;
    }
    return 1;
}

CMD:comer(playerid, params[]) {
    new string[128];
    if (InfoJugador[playerid][jEncarcelado] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas en prision.");
    if(((InfoJugador[playerid][jManoDerecha] >= 90 && InfoJugador[playerid][jManoDerecha] <= 92) || (InfoJugador[playerid][jManoDerecha] >= 100 && InfoJugador[playerid][jManoDerecha] <= 102)) && InfoJugador[playerid][jManoDerechaCant] > 0) {
        switch(InfoJugador[playerid][jManoDerecha]) {
	        case 90: InfoJugador[playerid][jHambre] += 35; //Bolsa de doritos
	        case 91: InfoJugador[playerid][jHambre] += 35; //Bolsa de patatas
	        case 92: InfoJugador[playerid][jHambre] += 35; //Bolsa de nachos
	        case 100: InfoJugador[playerid][jHambre] += 45; //Hamburguesa
	        case 101: InfoJugador[playerid][jHambre] += 40; //Burrito
	        case 102: InfoJugador[playerid][jHambre] += 50; //Pizza
        }
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 1, 1, 0, 0, 1);
        format(string, sizeof string, "come de su %s.", InfoInventario[InfoJugador[playerid][jManoDerecha]][NombreObjeto]);
 	    AccionesRol(playerid, 1, string);
        InfoJugador[playerid][jManoDerechaCant] --;
        if(InfoJugador[playerid][jHambre] > MAX_HAMBRE){InfoJugador[playerid][jHambre] = MAX_HAMBRE;}
        ActualizarHambre(playerid);
        ActualizarManos(playerid);
		guardar_int_mysql("cuentas", "Hambre", InfoJugador[playerid][jID], InfoJugador[playerid][jHambre]);
	    return 1;
    } else if(((InfoJugador[playerid][jManoIzquierda] >= 90 && InfoJugador[playerid][jManoIzquierda] <= 92) || (InfoJugador[playerid][jManoIzquierda] >= 100 && InfoJugador[playerid][jManoIzquierda] <= 102)) && InfoJugador[playerid][jManoIzquierdaCant] > 0) {
        switch(InfoJugador[playerid][jManoIzquierda]) {
	        case 90: InfoJugador[playerid][jHambre] += 35; //Bolsa de doritos
	        case 91: InfoJugador[playerid][jHambre] += 35; //Bolsa de patatas
	        case 92: InfoJugador[playerid][jHambre] += 35; //Bolsa de nachos
	        case 100: InfoJugador[playerid][jHambre] += 45; //Hamburguesa
	        case 101: InfoJugador[playerid][jHambre] += 40; //Burrito
	        case 102: InfoJugador[playerid][jHambre] += 50; //Pizza
        }
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 1, 1, 0, 0, 1);
        format(string, sizeof string, "come de su %s.", InfoInventario[InfoJugador[playerid][jManoIzquierda]][NombreObjeto]);
 	    AccionesRol(playerid, 1, string);
        InfoJugador[playerid][jManoIzquierdaCant] --;
        if(InfoJugador[playerid][jHambre] > MAX_HAMBRE){InfoJugador[playerid][jHambre] = MAX_HAMBRE;}
        ActualizarHambre(playerid);
        ActualizarManos(playerid);
		guardar_int_mysql("cuentas", "Hambre", InfoJugador[playerid][jID], InfoJugador[playerid][jHambre]);
	    return 1;
    }
    else if(InfoJugador[playerid][jManoDerecha] == 126 || InfoJugador[playerid][jManoIzquierda] == 126)
	{
        if(InfoJugador[playerid][jManoIzquierda] == 126)InfoJugador[playerid][jManoIzquierdaCant] --;
        else InfoJugador[playerid][jManoDerechaCant] --;
	    AccionesRol(playerid, 1, "comenzo a mascar una goma de mascar");
	    InfoJugador[playerid][jHambre] = MAX_HAMBRE;
	    InfoJugador[playerid][jSed] = MAX_SED;
	    ActualizarHambre(playerid);
	    ActualizarSed(playerid);
        ActualizarManos(playerid);
		guardar_int_mysql("cuentas", "Hambre", InfoJugador[playerid][jID], InfoJugador[playerid][jHambre]);
		guardar_int_mysql("cuentas", "Sed", InfoJugador[playerid][jID], InfoJugador[playerid][jSed]);
	    return 1;
	}
    return 1;
}

CMD:fumar(playerid)
{
	if (InfoJugador[playerid][jManoDerecha] != 88 && InfoJugador[playerid][jManoIzquierda] != 88){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas la caja de cigarros para encender uno."); return 1;}
	if (InfoJugador[playerid][jManoDerecha] != 87 && InfoJugador[playerid][jManoIzquierda] != 87){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas un encendedor con gas para encender un cigarro."); return 1;}
	Loop(x, 9, 0) if (InfoJugador[playerid][jBolsillo][x] == 0)
	{
		if (InfoJugador[playerid][jManoDerecha] == 87) InfoJugador[playerid][jManoDerechaCant] --;
		else if (InfoJugador[playerid][jManoIzquierda] == 87) InfoJugador[playerid][jManoIzquierdaCant] --;
		if (InfoJugador[playerid][jManoDerecha] == 88)
		{
			InfoJugador[playerid][jManoDerechaCant] --;
			InfoJugador[playerid][jBolsillo][x] = 88;
			InfoJugador[playerid][jBolsilloCant][x] = InfoJugador[playerid][jManoDerechaCant];
			InfoJugador[playerid][jManoDerecha] = 106;
			InfoJugador[playerid][jManoDerechaCant] = 4;
			PonerObjeto(playerid, 1, 106);
		}
		else if (InfoJugador[playerid][jManoIzquierda] == 88)
		{
			InfoJugador[playerid][jManoIzquierdaCant] --;
			InfoJugador[playerid][jBolsillo][x] = 88;
			InfoJugador[playerid][jBolsilloCant][x] = InfoJugador[playerid][jManoIzquierdaCant];
			InfoJugador[playerid][jManoIzquierda] = 106;
			InfoJugador[playerid][jManoIzquierdaCant] = 4;
			PonerObjeto(playerid, 2, 106);
		}
		ActualizarManos(playerid);
		new grs[32];
		format(grs, sizeof grs, "Bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid][jID], InfoJugador[playerid][jBolsillo][x]);
		format(grs, sizeof grs, "Cantidad_bolsillo_%d", x+1); guardar_int_mysql("cuentas", grs, InfoJugador[playerid][jID], InfoJugador[playerid][jBolsilloCant][x]);
		AccionesRol(playerid, 0, "enciende un cigarro y empieza a fumarlo.");
		ApplyAnimation(playerid, "GANGS", "smkcig_prtl_F", 3.0, 0, 0, 0, 0, 0, 1);
		_Mensaje(playerid, 2, "0", "Llevas un sorbo, para seguir fumando escribe /cfumar o tira el cigarro.");
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes donde guardar la caja de cigarros, saca algo del /inv.");
	return 1;
}

CMD:cfumar(playerid)
{
	if(InfoJugador[playerid][jManoDerecha] != 106 && InfoJugador[playerid][jManoIzquierda] != 106 && InfoJugador[playerid][jManoDerecha] != 132 && InfoJugador[playerid][jManoIzquierda] != 132){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un cigarro en ninguna mano."); return 1;}
	if(InfoJugador[playerid][jManoDerecha] == 106)
	{
		InfoJugador[playerid][jManoDerechaCant] --;
		ApplyAnimation(playerid, "GANGS", "smkcig_prtl_F", 3.0, 0, 0, 0, 0, 0, 1);
		ActualizarManos(playerid);
		return 1;
	}
	else if(InfoJugador[playerid][jManoIzquierda] == 106)
	{
		InfoJugador[playerid][jManoIzquierdaCant] --;
		ApplyAnimation(playerid, "GANGS", "smkcig_prtl_F", 3.0, 0, 0, 0, 0, 0, 1);
		ActualizarManos(playerid);
		return 1;
	}
	if(InfoJugador[playerid][jManoDerecha] == 132)
	{
		if (Consumiendo[playerid] != 0) return _Mensaje(playerid, 4, "b00000", " Consumiste algo hace poco, espera un tiempo.");
		InfoJugador[playerid][jManoDerechaCant] --;
		if(InfoJugador[playerid][jAdiccion][1] > 4 && InfoJugador[playerid][jAdiccion][1] < 10) _Mensaje(playerid, 2, "0", "Estas desarrollando una adiccion a la marihuana.");
		if(InfoJugador[playerid][jAdiccion][1] == 10) _Mensaje(playerid, 2, "0", "Te has convertido en un adicto de la marihuana."), InfoJugador[playerid][jAdiccion][1] = 17;
		InfoJugador[playerid][jAdiccion][1]++;
		TextDrawShowForPlayer(playerid, EfectoPorro);
		SetPlayerDrunkLevel(playerid, 3000);
		Consumiendo[playerid] = 2;
		PasarDroga(playerid, 2, 10);
		InfoJugador[playerid][jSed] -= 15; InfoJugador[playerid][jHambre] -= 15;
		ActualizarSed(playerid); ActualizarHambre(playerid);
		ApplyAnimation(playerid, "GANGS", "smkcig_prtl_F", 3.0, 0, 0, 0, 0, 0, 1);
		guardar_int_mysql("cuentas", "Hambre", InfoJugador[playerid][jID], InfoJugador[playerid][jHambre]);
		guardar_int_mysql("cuentas", "Sed", InfoJugador[playerid][jID], InfoJugador[playerid][jSed]);
		ActualizarManos(playerid);
		return 1;
	}
	else if(InfoJugador[playerid][jManoIzquierda] == 132)
	{
		if (Consumiendo[playerid] != 0) return _Mensaje(playerid, 4, "b00000", " Consumiste algo hace poco, espera un tiempo.");
		InfoJugador[playerid][jManoIzquierdaCant] --;
		if(InfoJugador[playerid][jAdiccion][1] > 4 && InfoJugador[playerid][jAdiccion][1] < 10) _Mensaje(playerid, 2, "0", "Estas desarrollando una adiccion a la marihuana.");
		if(InfoJugador[playerid][jAdiccion][1] == 10) _Mensaje(playerid, 2, "0", "Te has convertido en un adicto de la marihuana."), InfoJugador[playerid][jAdiccion][1] = 17;
		InfoJugador[playerid][jAdiccion][1]++;
		TextDrawShowForPlayer(playerid, EfectoPorro);
		SetPlayerDrunkLevel(playerid, 3000);
		Consumiendo[playerid] = 2;
		PasarDroga(playerid, 2, 10);
		InfoJugador[playerid][jSed] -= 15; InfoJugador[playerid][jHambre] -= 15;
		ActualizarSed(playerid); ActualizarHambre(playerid);
		ApplyAnimation(playerid, "GANGS", "smkcig_prtl_F", 3.0, 0, 0, 0, 0, 0, 1);
		guardar_int_mysql("cuentas", "Hambre", InfoJugador[playerid][jID], InfoJugador[playerid][jHambre]);
		guardar_int_mysql("cuentas", "Sed", InfoJugador[playerid][jID], InfoJugador[playerid][jSed]);
		ActualizarManos(playerid);
		return 1;
	}
	return 1;
}

CMD:cargar(playerid) { // Armas.
    new string[128];
    if(!CheckTimer(3, RecargarTiempo[playerid])) {
        if (InfoJugador[playerid][jEncarcelado] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas en prision.");
        if (InfoJugador[playerid][jManoDerechaCant] > 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Aun tienes municion en tu arma."); return 1; }
        new ManoDer = InfoJugador[playerid][jManoDerecha], ManoDerCant = InfoJugador[playerid][jManoDerechaCant];
        new ManoIzq = InfoJugador[playerid][jManoIzquierda], ManoIzqCant = InfoJugador[playerid][jManoIzquierdaCant];
        if (InfoInventario[ManoDer][IDArma] > 0 && InfoInventario[ManoDer][Capacidad] > 1 && ManoIzq != 0) { //Tiene un arma en mano derecha y algo en mano izquierda
            ActualizarManos(playerid);
            new Cargadores;
            new ArmaID = InfoInventario[ManoDer][IDArma];
            switch (ArmaID) {
                case 22: Cargadores = 41;
                case 23: Cargadores = 41;
                case 24: Cargadores = 42;
                case 25: Cargadores = 49;
                case 26: Cargadores = 49;
                case 27: Cargadores = 49;
                case 28: Cargadores = 43;
                case 29: Cargadores = 44;
                case 30: Cargadores = 46;
                case 31: Cargadores = 47;
                case 32: Cargadores = 45;
                case 33: Cargadores = 48;
                case 34: Cargadores = 48;
            }
            if (ManoIzq != Cargadores) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes recargar este arma con este objeto."); return 1; }
            if (ArmaID != 25 && ArmaID != 26 && ArmaID != 27) { //- Si no es escopeta
                if (ManoIzqCant == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese cargador esta vacio.");
                format(string, sizeof string, "Cargas tu arma con %d balas.", ManoIzqCant);
                ApplyAnimation(playerid,"SILENCED","Silence_reload",4.1,0,1,1,0,0,1);
                _Mensaje(playerid, 4, "F8D48C", string);
                ResetPlayerWeapons(playerid);
                GivePlayerWeapon(playerid, ArmaID, ManoIzqCant);
                InfoJugador[playerid][jManoDerechaCant] = ManoIzqCant;
                InfoJugador[playerid][jManoIzquierdaCant] = ManoDerCant;
                InfoJugador[playerid][jManoIzquierda] = 0;
                InfoJugador[playerid][jManoIzquierdaCant] = 0;
                RemovePlayerAttachedObject(playerid, 7);
                RecargarTiempo[playerid] = gettime();
                Anti[playerid][BalasW] = 0;
            } else {
                new n;
                switch (ArmaID) {
                    case 25: n = 20;
                    case 26: n = 8;
                    case 27: n = 15;
                }
                if (InfoJugador[playerid][jManoDerechaCant] >= n) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No necesitas recargar este arma."); return 1; }
                if (ManoIzqCant == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No te queda municion.");
				new Municion = (n - InfoJugador[playerid][jManoDerechaCant]), olo;
                for (new a = 0; a < Municion; a++)
				{
                    if (InfoJugador[playerid][jManoIzquierdaCant] == 0) break;
                    InfoJugador[playerid][jManoIzquierdaCant]--;
                    InfoJugador[playerid][jManoDerechaCant]++;
                    olo++;
                }
				GivePlayerWeapon(playerid, ArmaID, olo);
                format(string, sizeof string, "Cargas tu arma con %d.", olo);
                _Mensaje(playerid, 4, "F8D48C", string);
                RecargarTiempo[playerid] = gettime();
               	Anti[playerid][BalasW] = 0;
            }
        }
        ActualizarManos(playerid);
    } else {
        format(string, sizeof string, "Faltan %d segundos para que puedas recargar.", CheckTimer(3, RecargarTiempo[playerid]));
        ShowPlayerFooter(playerid, string);
    }
    return 1;
}
CMD:rec(playerid) return cmd_cargar(playerid);
CMD:recargar(playerid) return cmd_cargar(playerid);

//- Inicio de animaciones
CMD:besar(playerid, params[]) {
    new anim;
    if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/besar [1-6]");
    if (anim < 1 || anim > 6) return _Mensaje(playerid, 3, "0", "/besar [1-6]");
    switch (anim) {
        case 1: HaciendoAnimacion(playerid, "KISSING", "Grlfrd_Kiss_01", 4.0, 0, 0, 0, 0, 0);
        case 2: HaciendoAnimacion(playerid, "KISSING", "Grlfrd_Kiss_02", 4.0, 0, 0, 0, 0, 0);
        case 3: HaciendoAnimacion(playerid, "KISSING", "Grlfrd_Kiss_03", 4.0, 0, 0, 0, 0, 0);
        case 4: HaciendoAnimacion(playerid, "KISSING", "Playa_Kiss_01", 4.0, 0, 0, 0, 0, 0);
        case 5: HaciendoAnimacion(playerid, "KISSING", "Playa_Kiss_03", 4.0, 0, 0, 0, 0, 0);
        case 6: HaciendoAnimacion(playerid, "BD_FIRE", "Grlfrd_Kiss_03", 4.0, 0, 0, 0, 0, 0);
    }
    return 1;
}

CMD:adios(playerid, params[]) {
    new anim;
    if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/adios [1-8]");
    if (anim < 1 || anim > 8) return _Mensaje(playerid, 3, "0", "/adios [1-8]");
    switch (anim) {
        case 1: HaciendoAnimacion(playerid, "KISSING", "BD_GF_Wave", 4.0, 0, 0, 0, 0, 0);
        case 2: HaciendoAnimacion(playerid, "ON_LOOKERS", "wave_in", 4.0, 0, 0, 0, 1, 0);
        case 3: HaciendoAnimacion(playerid, "ON_LOOKERS", "wave_loop", 4.0, 0, 0, 0, 1, 0);
        case 4: HaciendoAnimacion(playerid, "ON_LOOKERS", "wave_out", 4.0, 0, 0, 0, 0, 0);
        case 5: HaciendoAnimacion(playerid, "BD_FIRE", "BD_GF_Wave", 4.0, 0, 0, 0, 0, 0);
        case 6: HaciendoAnimacion(playerid, "ped", "endchat_01", 4.0, 0, 0, 0, 0, 0);
        case 7: HaciendoAnimacion(playerid, "ped", "endchat_02", 4.0, 0, 0, 0, 0, 0);
        case 8: HaciendoAnimacion(playerid, "ped", "endchat_03", 4.0, 0, 0, 0, 0, 0);
    }
    return 1;
}

CMD:coche(playerid, params[]) {
    if (!IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas dentro de un vehiculo para la animacion.");
    new anim;
    if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/coche [1-19]");
    if (anim < 1 || anim > 19) return _Mensaje(playerid, 3, "0", "/coche [1-19]");
    switch (anim) {
        case 1: ApplyAnimation(playerid, "KISSING", "GF_CarArgue_01", 4.0, 0, 0, 0, 1, 0, 1);
        case 2: ApplyAnimation(playerid, "KISSING", "GF_CarArgue_02", 4.0, 0, 0, 0, 1, 0, 1);
        case 3: ApplyAnimation(playerid, "KISSING", "GF_CarSpot", 4.0, 0, 0, 0, 1, 0, 1);
        case 4: ApplyAnimation(playerid, "LOWRIDER", "lrgirl_hair", 4.0, 0, 0, 0, 1, 0, 1);
        case 5: ApplyAnimation(playerid, "LOWRIDER", "lrgirl_idleloop", 4.0, 0, 0, 0, 1, 0, 1);
        case 6: ApplyAnimation(playerid, "LOWRIDER", "Sit_relaxed", 4.0, 0, 0, 0, 1, 0, 1);
        case 7: ApplyAnimation(playerid, "LOWRIDER", "Tap_hand", 4.0, 0, 0, 0, 1, 0, 1);
        case 8: ApplyAnimation(playerid, "CAR_CHAT", "carfone_in", 4.0, 0, 0, 0, 1, 0, 1);
        case 9: ApplyAnimation(playerid, "CAR_CHAT", "carfone_loopA", 4.0, 0, 0, 0, 1, 0, 1);
        case 10: ApplyAnimation(playerid, "CAR_CHAT", "carfone_loopB", 4.0, 0, 0, 0, 1, 0, 1);
        case 11: ApplyAnimation(playerid, "CAR_CHAT", "CAR_Sc1_BL", 4.0, 0, 0, 0, 1, 0, 1);
        case 12: ApplyAnimation(playerid, "CAR_CHAT", "CAR_Sc3_FL", 4.0, 0, 0, 0, 1, 0, 1);
        case 13: ApplyAnimation(playerid, "CAR_CHAT", "car_talkm_in", 4.0, 0, 0, 0, 1, 0, 1);
        case 14: ApplyAnimation(playerid, "CAR_CHAT", "car_talkm_loop", 4.0, 0, 0, 0, 1, 0, 1);
        case 15: ApplyAnimation(playerid, "CAR_CHAT", "car_talkm_out", 4.0, 0, 0, 0, 1, 0, 1);
        case 16: ApplyAnimation(playerid, "ped", "CAR_sit_weak", 4.0, 0, 0, 0, 1, 0, 1);
        case 17: ApplyAnimation(playerid, "ped", "CAR_LB_pro", 4.0, 0, 0, 0, 1, 0, 1);
        case 18: ApplyAnimation(playerid, "ped", "CAR_sit", 4.0, 0, 0, 0, 1, 0, 1);
        case 19: ApplyAnimation(playerid, "ped", "CAR_dead_RHS", 4.0, 0, 0, 0, 1, 0, 1);
    }
    return 1;
}

CMD:camara(playerid, params[]) {
    new anim;
    if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/camara [1-14]");
    if (anim < 1 || anim > 14) return _Mensaje(playerid, 3, "0", "/camara [1-14]");
    switch (anim) {
        case 1: HaciendoAnimacion(playerid, "CAMERA", "camcrch_cmon", 4.0, 0, 0, 0, 1, 0);
        case 2: HaciendoAnimacion(playerid, "CAMERA", "camcrch_idleloop", 4.0, 0, 0, 0, 1, 0);
        case 3: HaciendoAnimacion(playerid, "CAMERA", "camcrch_stay", 4.0, 0, 0, 0, 1, 0);
        case 4: HaciendoAnimacion(playerid, "CAMERA", "camcrch_to_camstnd", 4.0, 0, 0, 0, 1, 0);
        case 5: HaciendoAnimacion(playerid, "CAMERA", "camstnd_cmon", 4.0, 0, 0, 0, 1, 0);
        case 6: HaciendoAnimacion(playerid, "CAMERA", "camstnd_idleloop", 4.0, 0, 0, 0, 1, 0);
        case 7: HaciendoAnimacion(playerid, "CAMERA", "camstnd_lkabt", 4.0, 0, 0, 0, 1, 0);
        case 8: HaciendoAnimacion(playerid, "CAMERA", "camstnd_to_camcrch", 4.0, 0, 0, 0, 1, 0);
        case 9: HaciendoAnimacion(playerid, "CAMERA", "piccrch_in", 4.0, 0, 0, 0, 1, 0);
        case 10: HaciendoAnimacion(playerid, "CAMERA", "piccrch_out", 4.0, 0, 0, 0, 1, 0);
        case 11: HaciendoAnimacion(playerid, "CAMERA", "piccrch_take", 4.0, 0, 0, 0, 1, 0);
        case 12: HaciendoAnimacion(playerid, "CAMERA", "picstnd_in", 4.0, 0, 0, 0, 1, 0);
        case 13: HaciendoAnimacion(playerid, "CAMERA", "picstnd_out", 4.0, 0, 0, 0, 1, 0);
        case 14: HaciendoAnimacion(playerid, "CAMERA", "picstnd_take", 4.0, 0, 0, 0, 1, 0);
    }
    return 1;
}

CMD:discutir(playerid, params[]) {
    new anim;
    if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/discutir [1-6]");
    if (anim < 1 || anim > 6) return _Mensaje(playerid, 3, "0", "/discutir [1-6]");
    switch (anim) {
        case 1: HaciendoAnimacion(playerid, "KISSING", "GF_StreetArgue_01", 4.0, 0, 0, 0, 1, 0);
        case 2: HaciendoAnimacion(playerid, "KISSING", "GF_StreetArgue_02", 4.0, 0, 0, 0, 1, 0);
        case 3: HaciendoAnimacion(playerid, "PAULNMAC", "PnM_Argue1_A", 4.0, 0, 0, 0, 1, 0);
        case 4: HaciendoAnimacion(playerid, "PAULNMAC", "PnM_Argue1_B", 4.0, 0, 0, 0, 1, 0);
        case 5: HaciendoAnimacion(playerid, "PAULNMAC", "PnM_Argue2_A", 4.0, 0, 0, 0, 1, 0);
        case 6: HaciendoAnimacion(playerid, "PAULNMAC", "PnM_Argue2_B", 4.0, 0, 0, 0, 1, 0);
    }
    return 1;
}

CMD:policia(playerid, params[]) {
    new anim;
    if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/policia [1-9]");
    if (anim < 1 || anim > 9) return _Mensaje(playerid, 3, "0", "/policia [1-9]");
    switch (anim) {
        case 1: HaciendoAnimacion(playerid, "POLICE", "CopTraf_Away", 4.0, 0, 0, 0, 1, 0);
        case 2: HaciendoAnimacion(playerid, "POLICE", "CopTraf_Come", 4.0, 0, 0, 0, 1, 0);
        case 3: HaciendoAnimacion(playerid, "POLICE", "CopTraf_Left", 4.0, 0, 0, 0, 1, 0);
        case 4: HaciendoAnimacion(playerid, "POLICE", "CopTraf_Stop", 4.0, 0, 0, 0, 1, 0);
        case 5: HaciendoAnimacion(playerid, "POLICE", "COP_getoutcar_LHS", 4.0, 0, 0, 0, 1, 0);
        case 6: HaciendoAnimacion(playerid, "POLICE", "Cop_move_FWD", 4.0, 0, 0, 0, 1, 0);
        case 7: HaciendoAnimacion(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 1, 0);
        case 8: HaciendoAnimacion(playerid, "POLICE", "plc_drgbst_01", 4.0, 0, 0, 0, 1, 0);
        case 9: HaciendoAnimacion(playerid, "POLICE", "plc_drgbst_02", 4.0, 0, 0, 0, 1, 0);
    }
    return 1;
}

CMD:espada(playerid, params[]) {
    new anim;
    if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/espada [1-2]");
    if (anim < 1 || anim > 2) return _Mensaje(playerid, 3, "0", "/espada [1-2]");
    switch (anim) {
        case 1: HaciendoAnimacion(playerid, "SWORD", "sword_block", 4.0, 0, 0, 0, 1, 0);
        case 2: HaciendoAnimacion(playerid, "SWORD", "sword_IDLE", 4.0, 0, 0, 0, 1, 0);
    }
    return 1;
}

CMD:herido(playerid, params[]) {
    new anim;
    if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/herido [1-10]");
    if (anim < 1 || anim > 10) return _Mensaje(playerid, 3, "0", "/herido [1-10]");
    switch (anim) {
        case 1: HaciendoAnimacion(playerid, "SWAT", "gnstwall_injurd", 4.0, 0, 0, 0, 1, 0);
        case 2: HaciendoAnimacion(playerid, "CRACK", "crckdeth1", 4.0, 0, 0, 0, 1, 0);
        case 3: HaciendoAnimacion(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);
        case 4: HaciendoAnimacion(playerid, "CRACK", "crckdeth3", 4.0, 0, 0, 0, 1, 0);
        case 5: HaciendoAnimacion(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0);
        case 6: HaciendoAnimacion(playerid, "CRACK", "crckidle1", 4.0, 0, 0, 0, 1, 0);
        case 7: HaciendoAnimacion(playerid, "CRACK", "crckidle2", 4.0, 0, 0, 0, 1, 0);
        case 8: HaciendoAnimacion(playerid, "CRACK", "crckidle3", 4.0, 0, 0, 0, 1, 0);
        case 9: HaciendoAnimacion(playerid, "CRACK", "crckidle4", 4.0, 0, 0, 0, 1, 0);
        case 10: HaciendoAnimacion(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
    }
    return 1;
}

CMD:oralsex(playerid, params[]) {
    new anim;
    if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/oralsex [1-12]");
    if (anim < 1 || anim > 12) return _Mensaje(playerid, 3, "0", "/oralsex [1-12]");
    switch (anim) {
        case 1: HaciendoAnimacion(playerid, "BLOWJOBZ", "BJ_COUCH_START_W", 4.0, 0, 0, 0, 1, 0);
        case 2: HaciendoAnimacion(playerid, "BLOWJOBZ", "BJ_COUCH_START_P", 4.0, 0, 0, 0, 1, 0);
        case 3: HaciendoAnimacion(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 0, 0, 0, 1, 0);
        case 4: HaciendoAnimacion(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.0, 0, 0, 0, 1, 0);
        case 5: HaciendoAnimacion(playerid, "BLOWJOBZ", "BJ_COUCH_END_W", 4.0, 0, 0, 0, 1, 0);
        case 6: HaciendoAnimacion(playerid, "BLOWJOBZ", "BJ_COUCH_END_P", 4.0, 0, 0, 0, 1, 0);
        case 7: HaciendoAnimacion(playerid, "BLOWJOBZ", "BJ_STAND_START_W", 4.0, 0, 0, 0, 1, 0);
        case 8: HaciendoAnimacion(playerid, "BLOWJOBZ", "BJ_STAND_START_P", 4.0, 0, 0, 0, 1, 0);
        case 9: HaciendoAnimacion(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.0, 0, 0, 0, 1, 0);
        case 10: HaciendoAnimacion(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.0, 0, 0, 0, 1, 0);
        case 11: HaciendoAnimacion(playerid, "BLOWJOBZ", "BJ_STAND_END_W", 4.0, 0, 0, 0, 1, 0);
        case 12: HaciendoAnimacion(playerid, "BLOWJOBZ", "BJ_STAND_END_P", 4.0, 0, 0, 0, 1, 0);
    }
    return 1;
}

CMD:oralsexcar(playerid, params[]) {
    if (!IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas dentro de un vehiculo para la animacion.");
    new anim;
    if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/oralsexcar [1-7]");
    if (anim < 1 || anim > 7) return _Mensaje(playerid, 3, "0", "/oralsexcar [1-7]");
    switch (anim) {
        case 1: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_START_W", 4.0, 0, 0, 0, 1, 0, 1);
        case 2: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_START_P", 4.0, 0, 0, 0, 1, 0, 1);
        case 3: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_LOOP_W", 4.0, 0, 0, 0, 1, 0, 1); //Una sola vez
        case 4: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_LOOP_W", 4.0, 1, 0, 0, 1, 0, 1); //Continuo
        case 5: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_LOOP_P", 4.0, 0, 0, 0, 1, 0, 1);
        case 6: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_END_W", 4.0, 0, 0, 0, 1, 0, 1);
        case 7: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_END_P", 4.0, 0, 0, 0, 1, 0, 1);
    }
    return 1;
}

CMD:dildosex(playerid, params[]) {
    new anim;
    if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/dildosex [1-8]");
    if (anim < 1 || anim > 8) return _Mensaje(playerid, 3, "0", "/dildosex [1-8]");
    switch (anim) {
        case 1: HaciendoAnimacion(playerid, "SNM", "SPANKING_IDLEW", 4.0, 0, 0, 0, 1, 0);
        case 2: HaciendoAnimacion(playerid, "SNM", "SPANKING_IDLEP", 4.0, 0, 0, 0, 1, 0);
        case 3: HaciendoAnimacion(playerid, "SNM", "SPANKINGW", 4.0, 0, 0, 0, 1, 0);
        case 4: HaciendoAnimacion(playerid, "SNM", "SPANKINGP", 4.0, 0, 0, 0, 1, 0);
        case 5: HaciendoAnimacion(playerid, "SNM", "SPANKEDW", 4.0, 0, 0, 0, 1, 0);
        case 6: HaciendoAnimacion(playerid, "SNM", "SPANKEDP", 4.0, 0, 0, 0, 1, 0);
        case 7: HaciendoAnimacion(playerid, "SNM", "SPANKING_ENDW", 4.0, 0, 0, 0, 1, 0);
        case 8: HaciendoAnimacion(playerid, "SNM", "SPANKING_ENDP", 4.0, 0, 0, 0, 1, 0);
    }
    return 1;
}

CMD:apuntar(playerid, params[]) {
    new anim;
    if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/apuntar [1-7]");
    if (anim < 1 || anim > 7) return _Mensaje(playerid, 3, "0", "/apuntar [1-7]");
    switch (anim) {
        case 1: HaciendoAnimacion(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1, 0);
        case 2: HaciendoAnimacion(playerid, "SHOP", "SHP_Gun_Aim", 4.0, 0, 0, 0, 1, 0);
        case 3: HaciendoAnimacion(playerid, "PYTHON", "python_crouchreload", 4.0, 0, 0, 0, 1, 0);
        case 4: HaciendoAnimacion(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 1, 0);
        case 5: HaciendoAnimacion(playerid, "SHOP", "SHP_Gun_Grab", 4.0, 0, 0, 0, 1, 0);
        case 6: HaciendoAnimacion(playerid, "SHOP", "SHP_Gun_Threat", 4.0, 0, 0, 0, 1, 0);
        case 7: HaciendoAnimacion(playerid, "ped", "gang_gunstand", 4.0, 0, 0, 0, 1, 0);
    }
    return 1;
}
CMD:oficinaanim(playerid, params[]) {
    new anim;
    if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/oficinaanim [1-10]");
    if (anim < 1 || anim > 10) return _Mensaje(playerid, 3, "0", "/oficinaanim [1-10]");
    switch (anim) {
        case 1: HaciendoAnimacion(playerid, "INT_OFFICE", "FF_Dam_Fwd", 4.0, 0, 0, 0, 1, 0);
        case 2: HaciendoAnimacion(playerid, "INT_OFFICE", "OFF_Sit_2Idle_180", 4.0, 0, 0, 0, 1, 0);
        case 3: HaciendoAnimacion(playerid, "INT_OFFICE", "OFF_Sit_Bored_Loop", 4.0, 0, 0, 0, 1, 0);
        case 4: HaciendoAnimacion(playerid, "INT_OFFICE", "OFF_Sit_Crash", 4.0, 0, 0, 0, 1, 0);
        case 5: HaciendoAnimacion(playerid, "INT_OFFICE", "OFF_Sit_Drink", 4.0, 0, 0, 0, 1, 0);
        case 6: HaciendoAnimacion(playerid, "INT_OFFICE", "OFF_Sit_Idle_Loop", 4.0, 0, 0, 0, 1, 0);
        case 7: HaciendoAnimacion(playerid, "INT_OFFICE", "OFF_Sit_In", 4.0, 0, 0, 0, 1, 0);
        case 8: HaciendoAnimacion(playerid, "INT_OFFICE", "OFF_Sit_Read", 4.0, 0, 0, 0, 1, 0);
        case 9: HaciendoAnimacion(playerid, "INT_OFFICE", "OFF_Sit_Type_Loop", 4.0, 0, 0, 0, 1, 0);
        case 10: HaciendoAnimacion(playerid, "INT_OFFICE", "OFF_Sit_Watch", 4.0, 0, 0, 0, 1, 0);
    }
    return 1;
}

CMD:paja(playerid, params[]) { HaciendoAnimacion(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 1); return 1; }
CMD:irsecortao(playerid, pamras[]) { HaciendoAnimacion(playerid, "PAULNMAC", "wank_out", 4.0, 0, 0, 0, 0, 0); return 1; }
CMD:mear(playerid, params[]) { HaciendoAnimacion(playerid, "PAULNMAC", "Piss_in", 4.0, 0, 0, 0, 0, 0); return 1; }
CMD:comerciar(playerid, params[]) { HaciendoAnimacion(playerid, "DEALER", "shop_pay", 4.000000, 0, 1, 1, 0, 0); return 1; }
CMD:pelea(playerid, params[]) { HaciendoAnimacion(playerid, "ped", "FIGHTIDLE", 4.000000, 0, 1, 1, 1, 1); return 1; }
CMD:dormir(playerid, params[]) { HaciendoAnimacion(playerid, "INT_HOUSE", "BED_In_R", 4.1, 0, 0, 0, 1, 0); return 1; }
CMD:taxi(playerid, params[]) { HaciendoAnimacion(playerid, "PED", "IDLE_taxi", 4.1, 0, 1, 1, 1, 1); return 1; }
CMD:asco(playerid, params[]) { HaciendoAnimacion(playerid, "FOOD", "EAT_Vomit_SK", 4.1, 0, 1, 1, 1, 1); return 1; }
CMD:asientosexi(playerid, params[]) { HaciendoAnimacion(playerid, "SUNBATHE", "ParkSit_W_idleA", 4.000000, 0, 1, 1, 1, 0); return 1; }
CMD:mmm(playerid, params[]) { HaciendoAnimacion(playerid, "COP_AMBIENT", "Coplook_think", 4.1, 0, 0, 0, 0, 0); return 1; }
CMD:fokear(playerid, params[]) { HaciendoAnimacion(playerid, "ped", "fucku", 4.0, 0, 1, 1, 1, 1); return 1; }
CMD:cruzarbrazos(playerid, params[]) { HaciendoAnimacion(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000); return 1; }
CMD:recostarme(playerid, params[]) { HaciendoAnimacion(playerid, "SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0); return 1; }
CMD:pararme(playerid, params[]) { HaciendoAnimacion(playerid, "SUNBATHE", "Lay_Bac_out", 4.0, 0, 0, 0, 0, 0); return 1; }
CMD:cubrirme(playerid, params[]) { HaciendoAnimacion(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0); return 1; }
CMD:vomitar(playerid, params[]) { HaciendoAnimacion(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); return 1; }
CMD:agonizar(playerid, params[]) { HaciendoAnimacion(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0); return 1; }
CMD:depie(playerid, params[]) { HaciendoAnimacion(playerid, "ped", "getup_front", 4.000000, 0, 0, 0, 0, 0); return 1; }
CMD:si(playerid, params[]) { HaciendoAnimacion(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0); return 1; }
CMD:no(playerid, params[]) { HaciendoAnimacion(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0); return 1; }
CMD:levantarme(playerid, params[]) { HaciendoAnimacion(playerid, "ped", "SEAT_up", 4.000000, 0, 0, 1, 0, 0); return 1; }
CMD:echarme(playerid, params[]) { HaciendoAnimacion(playerid, "SUNBATHE", "SitnWait_in_W", 4.000000, 0, 0, 0, 1, 0); return 1; }
CMD:cansarme(playerid, params[]) { HaciendoAnimacion(playerid, "PED", "WOMAN_runfatold", 4.1, 7, 5, 1, 1, 1); return 1; }
CMD:carga(playerid, params[]) { HaciendoAnimacion(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1); return 1; }
CMD:llorar(playerid, params[]) { HaciendoAnimacion(playerid, "GRAVEYARD", "mrnF_loop", 4.1, 1, 1, 1, 1, 1); return 1; }
CMD:bofetada(playerid, params[]) { HaciendoAnimacion(playerid, "MISC", "bitchslap", 4.1, 1, 0, 0, 1, 1); return 1; }
CMD:facepalm(playerid, params[]) { HaciendoAnimacion(playerid, "MISC", "plyr_shkhead", 4.1, 0, 0, 0, 0, 0); return 1; }
CMD:barandilla(playerid, params[]) { HaciendoAnimacion(playerid, "BD_FIRE", "BD_Panic_Loop", 4.1, 1, 1, 1, 1, 1); return 1; }
CMD:rifle(playerid, params[]) { HaciendoAnimacion(playerid, "BUDDY", "buddy_reload", 4.1, 0, 1, 1, 1, 1); return 1; }
CMD:bebido(playerid, params[]) { HaciendoAnimacion(playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1); return 1; }
CMD:bomba(playerid, params[]) { HaciendoAnimacion(playerid, "BOMBER", "BOM_Plant_Loop", 4.0, 1, 0, 0, 1, 1); return 1; }
CMD:reir(playerid, params[]) { HaciendoAnimacion(playerid, "RAPPING", "Laugh_01", 4.0, 1, 1, 1, 1, 1); return 1; }
CMD:comiendo(playerid, params[]) { HaciendoAnimacion(playerid, "FOOD", "EAT_Burger", 4.0, 0, 1, 1, 1, 1); return 1; }
CMD:trato(playerid, params[]) { HaciendoAnimacion(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 1, 1, 1, 1); return 1; }
CMD:gro(playerid, params[]) { HaciendoAnimacion(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 1, 1, 1); return 1; }
CMD:hablando(playerid, params[]) { HaciendoAnimacion(playerid, "PED", "IDLE_CHAT", 4.0, 1, 0, 0, 1, 1); return 1; }
CMD:taichi(playerid, params[]) { HaciendoAnimacion(playerid, "PARK", "Tai_Chi_Loop", 4.0, 1, 1, 1, 1, 1); return 1; }
CMD:caer(playerid, params[]) { HaciendoAnimacion(playerid, "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 1); return 1; }
CMD:muerto(playerid, params[]) { HaciendoAnimacion(playerid, "PED", "FLOOR_hit_f", 4.0, 0, 1, 1, 1, 1); return 1; }
CMD:rascarse(playerid, params[]) { HaciendoAnimacion(playerid, "MISC", "Scratchballs_01", 4.1, 1, 1, 1, 1, 1); return 1; }
CMD:spray(playerid, params[]) { HaciendoAnimacion(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 1, 1); return 1; }
CMD:medico(playerid, params[]) { HaciendoAnimacion(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0); return 1; }
CMD:golpeado(playerid, params[]) { HaciendoAnimacion(playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 1); return 1; }
CMD:saltovital(playerid, params[]) { HaciendoAnimacion(playerid, "PED", "EV_dive", 4.0, 0, 1, 1, 1, 1); return 1; }
CMD:cansado(playerid, params[]) { HaciendoAnimacion(playerid, "PED", "IDLE_tired", 4.0, 1, 0, 1, 1, 1); return 1; }
CMD:tortazo(playerid, params[]) { HaciendoAnimacion(playerid, "PED", "BIKE_elbowL", 4.0, 0, 0, 0, 0, 0); return 1; }
CMD:rodar(playerid, params[]) { HaciendoAnimacion(playerid, "PED", "BIKE_fallR", 4.0, 0, 1, 1, 1, 1); return 1; }
CMD:cacheado(playerid, params[]) { HaciendoAnimacion(playerid, "POLICE", "crm_drgbst_01", 4.0, 0, 1, 1, 1, 1); return 1; }
CMD:boxear(playerid, params[]) { HaciendoAnimacion(playerid, "GYMNASIUM", "GYMshadowbox", 4.0, 1, 1, 1, 1, 1); return 1; }
CMD:animar(playerid, params[]) { HaciendoAnimacion(playerid, "RIOT", "RIOT_CHANT", 4.0, 1, 1, 1, 1, 1); return 1; }
CMD:dedo(playerid, params[]) { HaciendoAnimacion(playerid, "RIOT", "RIOT_FUKU", 4.0, 0, 0, 0, 0, 0); return 1; }
CMD:gritando(playerid, params[]) { HaciendoAnimacion(playerid, "RIOT", "RIOT_shout", 4.0, 1, 1, 1, 1, 1); return 1; }
CMD:esposado(playerid, params[]) { HaciendoAnimacion(playerid, "SWORD", "sword_block", 50.0, 0, 1, 1, 1, 1); return 1; }
CMD:lanzar(playerid, params[]) { HaciendoAnimacion(playerid, "GRENADE", "WEAPON_throwu", 4.0, 0, 1, 1, 1, 0); return 1; }

CMD:movil(playerid, params[]) {
    if (GetPVarInt(playerid, "HaciendoMueble") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes utilizar una animacion en este momento.");
    if (IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes hacer una animacion en un vehiculo.");
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en este momento.");
    if (GetPVarInt(playerid, "EnEvento") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en un evento.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
    return 1;
}

CMD:cmovil(playerid, params[]) {
    if (GetPVarInt(playerid, "HaciendoMueble") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes utilizar una animacion en este momento.");
    if (IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes hacer una animacion en un vehiculo.");
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en este momento.");
    if (GetPVarInt(playerid, "EnEvento") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en un evento.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	return 1;
}

CMD:rendirse(playerid)
{
    if (GetPVarInt(playerid, "HaciendoMueble") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes utilizar una animacion en este momento.");
    if (IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes hacer una animacion en un vehiculo.");
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en este momento.");
    if (GetPVarInt(playerid, "EnEvento") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en un evento.");
	if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { HaciendoAnimacion(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0); }
    return 1;
}
CMD:rendirme(playerid) return cmd_rendirse(playerid);

CMD:stopanim(playerid, params[]) {
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas herido.");
    if (GetPVarInt(playerid, "HaciendoMueble") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes utilizar una animacion en este momento.");
    if (IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes hacer una animacion en un vehiculo.");
    if (GetPVarInt(playerid, "EnEvento") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en un evento.");
    ClearAnimations(playerid);
    return 1;
}

CMD:danzar(playerid, params[]) {
    new S;
    if (sscanf(params, "i", S)) return _Mensaje(playerid, 3, "0", "/danzar [1 - 13]");
    if (S == 1) return HaciendoAnimacion(playerid, "DANCING", "bd_clap",4.0,1,0,0,0,0);
    else if (S == 2) return HaciendoAnimacion(playerid, "DANCING", "bd_clap1",4.0,1,0,0,0,0);
    else if (S == 3) return HaciendoAnimacion(playerid, "DANCING", "dance_loop",4.0,1,0,0,0,0);
    else if (S == 4) return HaciendoAnimacion(playerid, "DANCING", "DAN_Down_A",4.0,1,0,0,0,0);
    else if (S == 5) return HaciendoAnimacion(playerid, "DANCING", "DAN_Left_A",4.0,1,0,0,0,0);
    else if (S == 6) return HaciendoAnimacion(playerid, "DANCING", "DAN_Loop_A",4.0,1,0,0,0,0);
    else if (S == 7) return HaciendoAnimacion(playerid, "DANCING", "DAN_Right_A",4.0,1,0,0,0,0);
    else if (S == 8) return HaciendoAnimacion(playerid, "DANCING", "DAN_Up_A",4.0,1,0,0,0,0);
    else if (S == 9) return HaciendoAnimacion(playerid, "DANCING", "dnce_M_a",4.0,1,0,0,0,0);
    else if (S == 10) return HaciendoAnimacion(playerid, "DANCING", "dnce_M_b",4.0,1,0,0,0,0);
    else if (S == 11) return HaciendoAnimacion(playerid, "DANCING", "dnce_M_c",4.0,1,0,0,0,0);
    else if (S == 12) return HaciendoAnimacion(playerid, "DANCING", "dnce_M_d",4.0,1,0,0,0,0);
    else if (S == 13) return HaciendoAnimacion(playerid, "DANCING", "dnce_M_e",4.0,1,0,0,0,0);
    else return _Mensaje(playerid, 3, "0", "/danzar [1 - 13]");
}

CMD:brazos(playerid, params[]) {
    new animacion;
    if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/brazos [1-6]");
    switch (animacion) {
        case 1: HaciendoAnimacion(playerid, "CASINO", "cards_in",4.1,0,1,1,1,1);
        case 2: HaciendoAnimacion(playerid, "COP_AMBIENT", "Coplook_shake",4.1,0,1,1,1,1);
        case 3: HaciendoAnimacion(playerid, "COP_AMBIENT", "Coplook_think",4.1,0,1,1,1,1);
        case 4: HaciendoAnimacion(playerid, "COP_AMBIENT", "Coplook_watch",4.1,0,1,1,1,1);
        case 5: HaciendoAnimacion(playerid, "DEALER", "DEALER_IDLE",4.1,0,1,1,1,1);
        case 6: HaciendoAnimacion(playerid, "GRAVEYARD", "prst_loopa",4.1,0,1,1,1,1);
        default: _Mensaje(playerid, 3, "0", "/brazos [1-6]");
    }
    return 1;
}

CMD:crack(playerid, params[]) {
    new animacion;
    if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/crack [1-8]");
    switch (animacion) {
		case 1: HaciendoAnimacion(playerid,"CRACK","crckdeth1",4.1,0,1,1,1,1);
		case 2: HaciendoAnimacion(playerid,"CRACK","crckdeth2",4.1,1,0,0,1,1);
		case 3: HaciendoAnimacion(playerid,"CRACK","crckdeth3",4.1,0,1,1,1,1);
		case 4: HaciendoAnimacion(playerid,"CRACK","crckdeth4",4.1,0,1,1,1,1);
		case 5: HaciendoAnimacion(playerid,"CRACK","crckidle1",4.1,1,1,1,1,1);
		case 6: HaciendoAnimacion(playerid,"CRACK","crckidle2",4.1,1,0,0,1,1);
		case 7: HaciendoAnimacion(playerid,"CRACK","crckidle3",4.1,0,1,1,1,1);
		case 8: HaciendoAnimacion(playerid,"CRACK","crckidle4",4.1,1,0,0,1,1);
        default: _Mensaje(playerid, 3, "0", "/crack [1-8]");
    }
    return 1;
}

CMD:fumando(playerid, params[]) {
    new animacion;
    if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/fumando [1-5]");
    switch (animacion) {
		case 1: HaciendoAnimacion(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 1, 1, 1);
		case 2: HaciendoAnimacion(playerid,"SMOKING","M_smkstnd_loop", 4.0, 1, 0, 1, 1, 1);
		case 3: HaciendoAnimacion(playerid,"SMOKING","M_smk_out", 4.0, 0, 0, 1, 1, 1);
		case 4: HaciendoAnimacion(playerid,"SMOKING","M_smk_in",4.0,0,1,1,1,1);
		case 5: HaciendoAnimacion(playerid,"GANGS","smkcig_prtl",4.1,1,1,1,1,1);
        default: _Mensaje(playerid, 3, "0", "/fumando [1-5]");
    }
    return 1;
}

CMD:asiento(playerid, params[]) {
    new anim;
    if (sscanf(params, "d", anim)) return _Mensaje(playerid, 3, "0", "/asiento [1-9]");
    if (anim < 1 || anim > 9) return _Mensaje(playerid, 3, "0", "/asiento [1-9]");
    switch (anim) {
        case 1: {
                JugadorSentado[playerid] = 1;
                HaciendoAnimacion(playerid, "Attractors", "Stepsit_in", 4.1, 0, 0, 0, 1, 1);
            }
        case 2: {
                JugadorSentado[playerid] = 1;
                HaciendoAnimacion(playerid, "Attractors", "Stepsit_out", 4.1, 0, 1, 1, 1, 1);
            }
        case 3: {
                JugadorSentado[playerid] = 1;
                HaciendoAnimacion(playerid, "FOOD", "FF_Sit_Eat3", 4.1, 0, 0, 0, 1, 1);
            }
        case 4: {
                JugadorSentado[playerid] = 1;
                HaciendoAnimacion(playerid, "FOOD", "FF_Sit_In", 4.1, 0, 0, 0, 1, 1);
            }
        case 5: {
                JugadorSentado[playerid] = 1;
                HaciendoAnimacion(playerid, "FOOD", "FF_Sit_In_L", 4.1, 0, 0, 0, 1, 1);
            }
        case 6: {
                JugadorSentado[playerid] = 1;
                HaciendoAnimacion(playerid, "FOOD", "FF_Sit_In_R", 4.1, 0, 0, 0, 1, 1);
            }
        case 7: {
                JugadorSentado[playerid] = 1;
                HaciendoAnimacion(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 1);
            }
        case 8: {
                JugadorSentado[playerid] = 1;
                HaciendoAnimacion(playerid, "INT_HOUSE", "LOU_In", 4.1, 0, 0, 0, 1, 1);
            }
        case 9: {
                JugadorSentado[playerid] = 1;
                HaciendoAnimacion(playerid, "MISC", "SEAT_LR", 4.1, 0, 1, 1, 1, 1);
            }
    }
    return 1;
}

CMD:saludo(playerid, params[]) {
    new animacion;
    if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/saludo [1-7]");
    switch (animacion) {
        case 1: HaciendoAnimacion(playerid, "GANGS", "prtial_hndshk_biz_01", 4.1, 0, 1, 1, 1, 1);
        case 2: HaciendoAnimacion(playerid, "GANGS", "hndshkcb", 4.1, 0, 1, 1, 1, 1);
        case 3: HaciendoAnimacion(playerid, "GANGS", "hndshkea", 4.1, 0, 1, 1, 1, 1);
        case 4: HaciendoAnimacion(playerid, "GANGS", "hndshkfa", 4.1, 0, 1, 1, 1, 1);
        case 5: HaciendoAnimacion(playerid, "GANGS", "hndshkba", 4.1, 0, 1, 1, 1, 1);
        case 6: HaciendoAnimacion(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 1, 1);
        case 7: HaciendoAnimacion(playerid, "PED", "endchat_03", 4.1, 0, 1, 1, 1, 1);
        default: _Mensaje(playerid, 3, "0", "/saludo [1-7]");
    }
    return 1;
}

CMD:pandillero(playerid, params[]) {
    new animacion;
    if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/pandillero [1-16]");
    switch (animacion) {
        case 1: HaciendoAnimacion(playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 1, 1, 1, 1);
        case 2: HaciendoAnimacion(playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 1, 1, 1, 1);
        case 3: HaciendoAnimacion(playerid, "GHANDS", "gsign2", 4.1, 0, 1, 1, 1, 1);
        case 4: HaciendoAnimacion(playerid, "GHANDS", "gsign2LH", 4.1, 0, 1, 1, 1, 1);
        case 5: HaciendoAnimacion(playerid, "GHANDS", "gsign3", 4.1, 0, 1, 1, 1, 1);
        case 6: HaciendoAnimacion(playerid, "GHANDS", "gsign3LH", 4.1, 0, 1, 1, 1, 1);
        case 7: HaciendoAnimacion(playerid, "GHANDS", "gsign4", 4.1, 0, 1, 1, 1, 1);
        case 8: HaciendoAnimacion(playerid, "GHANDS", "gsign4LH", 4.1, 0, 1, 1, 1, 1);
        case 9: HaciendoAnimacion(playerid, "GHANDS", "gsign5", 4.1, 0, 1, 1, 1, 1);
        case 10: HaciendoAnimacion(playerid, "GHANDS", "gsign5LH", 4.1, 0, 1, 1, 1, 1);
        case 11: HaciendoAnimacion(playerid, "benchpress", "gym_bp_celebrate", 4.1, 0, 1, 1, 1, 1);
        case 12: HaciendoAnimacion(playerid, "LOWRIDER", "prtial_gngtlkG", 4.1, 0, 1, 1, 1, 1);
        case 13: HaciendoAnimacion(playerid, "RIOT", "RIOT_ANGRY", 4.1, 0, 1, 1, 1, 1);
        case 14: HaciendoAnimacion(playerid, "RIOT", "RIOT_challenge", 4.1, 0, 1, 1, 1, 1);
        case 15: HaciendoAnimacion(playerid, "RAPPING", "RAP_B_Loop", 4.1, 1, 1, 1, 1, 1);
        case 16: HaciendoAnimacion(playerid, "SCRATCHING", "scdrulp", 4.1, 1, 0, 0, 1, 1);
        default: _Mensaje(playerid, 3, "0", "/pandillero [1-16]");
    }
    return 1;
}

CMD:bate(playerid, params[]) {
    new animacion;
    if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/bate [1-2]");
    switch (animacion) {
        case 1: HaciendoAnimacion(playerid, "CRACK", "Bbalbat_Idle_01", 4.1, 0, 1, 1, 1, 1);
        case 2: HaciendoAnimacion(playerid, "CRACK", "Bbalbat_Idle_02", 4.1, 0, 1, 1, 1, 1);
        default: _Mensaje(playerid, 3, "0", "/bate [1-2]");
    }
    return 1;
}

CMD:basket(playerid, params[]) {
    new animacion;
    if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/basket [1-7]");
    switch (animacion) {
        case 1: HaciendoAnimacion(playerid, "BSKTBALL", "BBALL_run", 4.1, 1, 1, 0, 1, 1);
        case 2: HaciendoAnimacion(playerid, "BSKTBALL", "BBALL_idleloop", 4.1, 1, 1, 1, 1, 1);
        case 3: HaciendoAnimacion(playerid, "BSKTBALL", "BBALL_Jump_Shot", 4.1, 0, 0, 0, 0, 0);
        case 4: HaciendoAnimacion(playerid, "BSKTBALL", "BBALL_def_loop", 4.1, 1, 1, 1, 1, 1);
        case 5: HaciendoAnimacion(playerid, "BSKTBALL", "BBALL_Dnk", 4.1, 0, 1, 1, 1, 1);
        case 6: HaciendoAnimacion(playerid, "BSKTBALL", "BBALL_idle", 4.1, 1, 1, 1, 1, 1);
        case 7: HaciendoAnimacion(playerid, "BSKTBALL", "BBALL_idle2", 4.1, 1, 1, 1, 1, 1);
        default: _Mensaje(playerid, 3, "0", "/basket [1-7]");
    }
    return 1;
}

CMD:trafico(playerid, params[]) {
    new animacion;
    if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/trafico [1-4]");
    switch (animacion) {
        case 1: HaciendoAnimacion(playerid, "POLICE", "CopTraf_Away", 4.1, 1, 0, 0, 1, 1);
        case 2: HaciendoAnimacion(playerid, "POLICE", "CopTraf_Come", 4.1, 1, 0, 0, 1, 1);
        case 3: HaciendoAnimacion(playerid, "POLICE", "CopTraf_Left", 4.1, 1, 0, 0, 1, 1);
        case 4: HaciendoAnimacion(playerid, "POLICE", "CopTraf_Stop", 4.1, 1, 0, 0, 1, 1);
        default: _Mensaje(playerid, 3, "0", "/trafico [1-4]");
    }
    return 1;
}

CMD:apoyarse(playerid, params[]) {
    new animacion;
    if  (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/apoyarse [1-2]");
    switch (animacion) {
        case 1: HaciendoAnimacion(playerid, "GANGS", "leanIDLE", 4.0, 1, 0, 1, 1, 1);
        case 2: HaciendoAnimacion(playerid, "MISC", "Plyrlean_loop", 4.0, 1, 1, 1, 1, 1);
        default: _Mensaje(playerid, 3, "0", "/apoyarse [1-2]");
    }
    return 1;
}

CMD:beso(playerid, params[]) {
    new animacion;
    if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/beso [1-2]");
    switch (animacion) {
        case 1: HaciendoAnimacion(playerid, "KISSING", "Grlfrd_Kiss_03", 4.1, 0, 0, 0, 1, 1);
        case 2: HaciendoAnimacion(playerid, "KISSING", "Playa_Kiss_03", 4.1, 0, 0, 0, 1, 1);
        default: _Mensaje(playerid, 3, "0", "/beso [1-2]");
    }
    return 1;
}

CMD:billar(playerid, params[]) {
    new animacion;
    if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/billar [1-3]");
    switch (animacion) {
        case 1: HaciendoAnimacion(playerid, "POOL", "POOL_Idle_Stance", 4.1, 0, 1, 1, 1, 1);
        case 2: HaciendoAnimacion(playerid, "POOL", "POOL_Med_Start", 4.1, 0, 1, 1, 1, 1);
        case 3: HaciendoAnimacion(playerid, "POOL", "POOL_Med_Shot", 4.1, 0, 1, 1, 1, 1);
        default: _Mensaje(playerid, 3, "0", "/billar [1-3]");
    }
    return 1;
}

CMD:correr(playerid, params[]) {
    new animacion;
    if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/correr [1-6]");
    switch (animacion) {
        case 1: HaciendoAnimacion(playerid, "PED", "run_civi", 4.1, 1, 1, 1, 1, 1);
        case 2: HaciendoAnimacion(playerid, "PED", "run_gang1", 4.1, 1, 1, 1, 1, 1);
        case 3: HaciendoAnimacion(playerid, "PED", "run_old", 4.1, 1, 1, 1, 1, 1);
        case 4: HaciendoAnimacion(playerid, "PED", "run_fat", 4.1, 1, 1, 1, 1, 1);
        case 5: HaciendoAnimacion(playerid, "PED", "woman_run", 4.1, 1, 1, 1, 1, 1);
        case 6: HaciendoAnimacion(playerid, "PED", "WOMAN_runsexy", 4.1, 1, 1, 1, 1, 1);
        default: _Mensaje(playerid, 3, "0", "/correr [1-6]");
    }
    return 1;
}

CMD:strip(playerid, params[]) {
    new animacion;
    if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/strip [1-7]");
    switch (animacion) {
        case 1: HaciendoAnimacion(playerid, "STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1);
        case 2: HaciendoAnimacion(playerid, "STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1);
        case 3: HaciendoAnimacion(playerid, "STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1);
        case 4: HaciendoAnimacion(playerid, "STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1);
        case 5: HaciendoAnimacion(playerid, "STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1);
        case 6: HaciendoAnimacion(playerid, "STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1);
        case 7: HaciendoAnimacion(playerid, "STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1);
        default: _Mensaje(playerid, 3, "0", "/strip [1-7]");
    }
    return 1;
}

CMD:tumbarse(playerid, params[]) {
    new animacion;
    if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/tumbarse [1-5]");
    switch (animacion) {
        case 1: HaciendoAnimacion(playerid, "BEACH", "bather", 4.1, 0, 1, 1, 1, 1);
        case 2: HaciendoAnimacion(playerid, "BEACH", "Lay_Bac_Loop", 4.1, 0, 1, 1, 1, 1);
        case 3: HaciendoAnimacion(playerid, "BEACH", "BD_Fire3", 4.1, 0, 1, 1, 1, 1);
        case 4: HaciendoAnimacion(playerid, "BEACH", "ParkSit_W_loop", 4.1, 0, 1, 1, 1, 1);
        case 5: HaciendoAnimacion(playerid, "BEACH", "SitnWait_loop_W", 4.1, 0, 1, 1, 1, 1);
        default: _Mensaje(playerid, 3, "0", "/tumbarse [1-5]");
    }
    return 1;
}

CMD:mecanico(playerid, params[]) {
    new animacion;
    if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/mecanico [1-2]");
    switch (animacion) {
        case 1: HaciendoAnimacion(playerid, "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 1, 1);
        case 2: HaciendoAnimacion(playerid, "CAR", "Fixn_Car_Out", 4.1, 0, 0, 0, 1, 1);
        default: _Mensaje(playerid, 3, "0", "/mecanico [1-2]");
    }
    return 1;
}

CMD:consola(playerid, params[]) {
    new animacion;
    if (sscanf(params, "d", animacion)) return _Mensaje(playerid, 3, "0", "/consola [1-3]");
    switch (animacion) {
        case 1: HaciendoAnimacion(playerid, "CRIB", "PED_Console_Loop", 4.1, 1, 1, 1, 1, 1);
        case 2: HaciendoAnimacion(playerid, "CRIB", "PED_Console_Loose", 4.1, 0, 1, 1, 1, 1);
        case 3: HaciendoAnimacion(playerid, "CRIB", "PED_Console_Win", 4.1, 0, 1, 1, 1, 1);
        default: _Mensaje(playerid, 3, "0", "/consola [1-3]");
    }
    return 1;
}


CMD:practicar(playerid)
{
	if (!_enPos(playerid, 10, 767.6719, 13.6320, 1000.7010)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en el GYM.");
	ShowPlayerDialog(playerid, D_Praticar, DIALOG_STYLE_LIST, "{D6E1EB}?Que le gustaria aprender?", "{ffffff}Kung Fu\t 40$\nBoxeo\t \t 30$", "Continuar", "Salir");
	return 1;
}

CMD:nombreadmin(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Nombreadmin.");
	OnDuty
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/nombreadmin [Nombre_Apellido]");
	if (GetPVarInt(playerid, "IsNameNew") == 0)
	{
		if (VerificarCuenta(params)) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese nombre ya esta registrado."); return 1; }
		SendClientMessageEx(playerid, 0xFFF000FF, "Estas temporalmente con el nombre de %s.", params);
		SetPVarInt(playerid, "IsNameNew", 1);
		SetPlayerName(playerid, params);
		return 1;
	}
	SendClientMessageEx(playerid, 0xFFF000FF, "Tu nombre a sido cambiado al anterior: %s", InfoJugador[playerid][jNombre_Apellido]);
	SetPVarInt(playerid, "IsNameNew", 0);
	SetPlayerName(playerid, InfoJugador[playerid][jNombre_Apellido]);
	return 1;
}

CMD:visitar(playerid)
{
	if (VisitaTimer2[playerid] > 0)
	{
		SendClientMessageEx(playerid, -1, "* Debes esperar %d minutos, para visitar otra casa.", VisitaTimer2[playerid]);
		return 1;
	}
	Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0 && _enPos(playerid, 2.0, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ]) && InfoJugador[playerid][jInterior] == InfoCasa[id][cEntradaInt] && InfoJugador[playerid][jVirtualWorld] == InfoCasa[id][cEntradaVW])
	{
		if (InfoCasa[id][cVenta] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Esta casa no esta en venta.");
		SetPosEx(playerid, InfoCasa[id][cSalidaX], InfoCasa[id][cSalidaY], InfoCasa[id][cSalidaZ], InfoCasa[id][cSalidaR], InfoCasa[id][cSalidaInt], InfoCasa[id][cSalidaVW], 0);
		SetCameraBehindPlayer(playerid);
		SendClientMessage(playerid, 0xCCCC00FF, "Puedes recorrer esta vivienda por 20 segundos.");
		if (Es_Banda(playerid, 1)) EnCasaID[playerid] = id;
		VisitaTimer[playerid] = SetTimerEx("VisitandoCasa", 20000, false, "i", playerid);
		return 1;
	}
	SendClientMessage(playerid, -1, "No estas cerca de la entrada de ninguna casa.");
	return 1;
}

funcion VisitandoCasa(playerid)
{
	Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0 && InfoJugador[playerid][jInterior] == InfoCasa[id][cSalidaInt] && InfoJugador[playerid][jVirtualWorld] == InfoCasa[id][cSalidaVW])
	{
		SetPosEx(playerid, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ], InfoCasa[id][cEntradaR], InfoCasa[id][cEntradaInt], InfoCasa[id][cEntradaVW], 1);
		SetCameraBehindPlayer(playerid);
		EnCasaID[playerid] = -1;
		KillTimer(VisitaTimer[playerid]);
		VisitaTimer2[playerid] = 10;
		return 1;
	}
	return 1;
}

Pos_Salida(playerid)
{
	if (!IsPlayerConnectedEx(playerid)) return 1;
	InfoJugador[playerid][jEntradaX] = 0.0;
	InfoJugador[playerid][jEntradaY] = 0.0;
	InfoJugador[playerid][jEntradaZ] = 0.0;
	InfoJugador[playerid][jEntradaR] = 0.0;
	InfoJugador[playerid][jEntradaInt] = 0;
	InfoJugador[playerid][jEntradaVW] = 0;
	guardar_float_mysql("cuentas", "EntradaX", InfoJugador[playerid][jID], InfoJugador[playerid][jEntradaX]);
	guardar_float_mysql("cuentas", "EntradaY", InfoJugador[playerid][jID], InfoJugador[playerid][jEntradaY]);
	guardar_float_mysql("cuentas", "EntradaZ", InfoJugador[playerid][jID], InfoJugador[playerid][jEntradaZ]);
	guardar_float_mysql("cuentas", "EntradaR", InfoJugador[playerid][jID], InfoJugador[playerid][jEntradaR]);
	guardar_int_mysql("cuentas", "EntradaInt", InfoJugador[playerid][jID], InfoJugador[playerid][jEntradaInt]);
	guardar_int_mysql("cuentas", "EntradaVW", InfoJugador[playerid][jID], InfoJugador[playerid][jEntradaVW]);
    return 1;
}

Pos_Entrada(playerid, Float: X, Float: Y, Float: Z, Float: R, Int, VW)
{
	if (!IsPlayerConnectedEx(playerid)) return 1;
	InfoJugador[playerid][jEntradaX] = X;
	InfoJugador[playerid][jEntradaY] = Y;
	InfoJugador[playerid][jEntradaZ] = Z;
	InfoJugador[playerid][jEntradaR] = R;
	InfoJugador[playerid][jEntradaInt] = Int;
	InfoJugador[playerid][jEntradaVW] = VW;
	guardar_float_mysql("cuentas", "EntradaX", InfoJugador[playerid][jID], InfoJugador[playerid][jEntradaX]);
	guardar_float_mysql("cuentas", "EntradaY", InfoJugador[playerid][jID], InfoJugador[playerid][jEntradaY]);
	guardar_float_mysql("cuentas", "EntradaZ", InfoJugador[playerid][jID], InfoJugador[playerid][jEntradaZ]);
	guardar_float_mysql("cuentas", "EntradaR", InfoJugador[playerid][jID], InfoJugador[playerid][jEntradaR]);
	guardar_int_mysql("cuentas", "EntradaInt", InfoJugador[playerid][jID], InfoJugador[playerid][jEntradaInt]);
	guardar_int_mysql("cuentas", "EntradaVW", InfoJugador[playerid][jID], InfoJugador[playerid][jEntradaVW]);
    return 1;
}

CMD:entrar(playerid)
{
	if (InfoJugador[playerid][jEncarcelado] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas preso.");
	//puertas
	Loop(id, totalpuertas, 1) if (InfoPuerta[id][pEntradaX] != 0.0)
	{
		if (_enPos(playerid, 2, InfoPuerta[id][pEntradaX], InfoPuerta[id][pEntradaY], InfoPuerta[id][pEntradaZ]) && InfoJugador[playerid][jInterior] == InfoPuerta[id][pEntradaInt] && InfoJugador[playerid][jVirtualWorld] == InfoPuerta[id][pEntradaVW])
		{
			//nivel vip
			if (InfoJugador[playerid][jNivelVIP] < InfoPuerta[id][pVIP])
			{
				SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes acceso para esta puerta, necesitas ser minimo VIP %s.", GetNameVIP(InfoPuerta[id][pVIP]));
				return 1;
   }
			//nivel faccion
			if (InfoPuerta[id][pFaccion] != 0)
			{
				if (InfoJugador[playerid][jFacMiembro] != InfoPuerta[id][pFaccion])
				{
					SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes acceso para esta puerta, necesitas ser miembro de %s.", GetNombreFamilia(InfoPuerta[id][pFaccion]));
					return 1;
				}
			}
			//nivel familia
			if (InfoPuerta[id][pFamilia] != 0)
			{
				if (InfoJugador[playerid][jFamMiembro] != InfoPuerta[id][pFamilia])
				{
                    SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes acceso para esta puerta, necesitas ser miembro de la familia id %d.", InfoPuerta[id][pFamilia]);
					return 1;
				}
			}
			//nivel YT
			if (InfoPuerta[id][pYT] == 1)
			{
				if (InfoJugador[playerid][jYT] == 0)
				{
					SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes acceso para esta puerta, necesitas ser {FF0000}You{FFFFFF}Tuber.");
					return 1;
				}
			}
			//nivel trabajo
			if (InfoPuerta[id][pTrabajo] != 0)
			{
				if (IsPlayerJob(playerid, InfoPuerta[id][pTrabajo]) == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes acceso para esta puerta, necesitas ser %s.", GetNameJob(InfoPuerta[id][pTrabajo]));
			}
			//
			if (InfoPuerta[id][pEntradaInt] == 0 && InfoPuerta[id][pEntradaVW] == 0) Pos_Entrada(playerid, InfoPuerta[id][pEntradaX], InfoPuerta[id][pEntradaY], InfoPuerta[id][pEntradaZ], InfoPuerta[id][pEntradaR], InfoPuerta[id][pEntradaInt], InfoPuerta[id][pEntradaVW]);
			SetPosEx(playerid, InfoPuerta[id][pSalidaX], InfoPuerta[id][pSalidaY], InfoPuerta[id][pSalidaZ], InfoPuerta[id][pSalidaR], InfoPuerta[id][pSalidaInt], InfoPuerta[id][pSalidaVW], 1);
			SetCameraBehindPlayer(playerid);
			CargarObjetos(playerid);
			return 1;
		}
	}
	//negocios
	Loop(id, totalnegocios, 1) if (_enPos(playerid, 2, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ]))
	{
		if (InfoNegocio[id][nSeguro] == 0) return GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
		if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0) Pos_Entrada(playerid, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ], InfoNegocio[id][nEntradaR], 0, 0);
		SetPosEx(playerid, InfoNegocio[id][nSalidaX], InfoNegocio[id][nSalidaY], InfoNegocio[id][nSalidaZ], InfoNegocio[id][nSalidaR], InfoNegocio[id][nSalidaInt], InfoNegocio[id][nSalidaVW], 1);
		SetCameraBehindPlayer(playerid);
		CargarObjetos(playerid);
		GameTextForPlayer(playerid, "~w~Negocio", 3000, 1);
		return 1;
	}
	//empresas
	Loop(id, totalempresas, 1) if (InfoEmpresa[id][eTipo] != 0 && _enPos(playerid, 2.0, InfoEmpresa[id][eEntradaX], InfoEmpresa[id][eEntradaY], InfoEmpresa[id][eEntradaZ]) && InfoJugador[playerid][jInterior] == InfoEmpresa[id][eEntradaInt] && InfoJugador[playerid][jVirtualWorld] == InfoEmpresa[id][eEntradaVW])
    {
	    	if (InfoEmpresa[id][eSeguro] == 0) return SendClientMessage(playerid, 0xccccccff, "* La puerta de esta empresa esta cerrada.");
			if (InfoEmpresa[id][eEntradaInt] == 0 && InfoEmpresa[id][eEntradaVW] == 0) Pos_Entrada(playerid, InfoEmpresa[id][eEntradaX], InfoEmpresa[id][eEntradaY], InfoEmpresa[id][eEntradaZ], InfoEmpresa[id][eEntradaR], InfoEmpresa[id][eEntradaInt], InfoEmpresa[id][eEntradaVW]);
			SetPosEx(playerid, InfoEmpresa[id][eSalidaX], InfoEmpresa[id][eSalidaY], InfoEmpresa[id][eSalidaZ], InfoEmpresa[id][eSalidaR], InfoEmpresa[id][eSalidaInt], InfoEmpresa[id][eSalidaVW], 1);
			SetCameraBehindPlayer(playerid);
			GameTextForPlayer(playerid, "~w~Bienvenido a tu empresa", 3000, 1);
			if (Es_Banda(playerid, 1)) EnEmpresaID[playerid] = id;
		    return 1;
	}
	//casas
	Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0 && _enPos(playerid, 2.0, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ]) && InfoJugador[playerid][jInterior] == InfoCasa[id][cEntradaInt] && InfoJugador[playerid][jVirtualWorld] == InfoCasa[id][cEntradaVW])
	{
		if (ID_Robo_Casa[playerid] == id)
		{
			if (InfoJugador[playerid][jManoIzquierda] != 0) return SendClientMessageEx(playerid, 0xccccccff, "* Debes tener la mano izquierda vacia.");
			if (InfoCasa[id][cEntradaInt] == 0 && InfoCasa[id][cEntradaVW] == 0) Pos_Entrada(playerid, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ], InfoCasa[id][cEntradaR], InfoCasa[id][cEntradaInt], InfoCasa[id][cEntradaVW]);
			SetPosEx(playerid, InfoCasa[id][cSalidaX], InfoCasa[id][cSalidaY], InfoCasa[id][cSalidaZ], InfoCasa[id][cSalidaR], InfoCasa[id][cSalidaInt], InfoCasa[id][cSalidaVW], 1);
			SetCameraBehindPlayer(playerid);
			GameTextForPlayer(playerid, "~n~~n~~n~~p~Robando objeto", 15000, 1);
			SendClientMessageEx(playerid, 0x008BFFFF, "No puedes salir de la casa mientras tomas un objeto de robo.");
			Robando_Objeto[playerid] = 1;
			SetTimerEx("Robando_Casa", 14000, false, "i", playerid);
			return 1;
		}
		else
		{
			if (InfoCasa[id][cSeguro] == 0) return SendClientMessage(playerid, 0xccccccff, "* La puerta de esta casa esta cerrada.");
			if (InfoCasa[id][cEntradaInt] == 0 && InfoCasa[id][cEntradaVW] == 0) Pos_Entrada(playerid, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ], InfoCasa[id][cEntradaR], InfoCasa[id][cEntradaInt], InfoCasa[id][cEntradaVW]);
			SetPosEx(playerid, InfoCasa[id][cSalidaX], InfoCasa[id][cSalidaY], InfoCasa[id][cSalidaZ], InfoCasa[id][cSalidaR], InfoCasa[id][cSalidaInt], InfoCasa[id][cSalidaVW], 1);
			SetCameraBehindPlayer(playerid);
			GameTextForPlayer(playerid, "~w~Bienvenido a Casa", 3000, 1);
			if (Es_Banda(playerid, 1)) EnCasaID[playerid] = id;
		}
		return 1;
    }
	if (Mercado_Nearest(playerid) != -1)
	{
	    new id = Mercado_Nearest(playerid);
		if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0) Pos_Entrada(playerid, MercadoData[id][mPos][0], MercadoData[id][mPos][1], MercadoData[id][mPos][2], MercadoData[id][mPos][3], 0, 0);
		SetPosEx(playerid, MercadoData[id][mInt][0], MercadoData[id][mInt][1], MercadoData[id][mInt][2], MercadoData[id][mInt][3], MercadoData[id][mInterior], MercadoData[id][mVW], 1);
		SetCameraBehindPlayer(playerid);
		InfoJugador[playerid][pMercado] = MercadoData[id][mID];
		CargarObjetos(playerid);
		return 1;
	}
	//fabricas
	if (Fabrica_Nearest(playerid) != -1)
	{
	    new id = Fabrica_Nearest(playerid);
		if (!InfoFabrica[id][fabricaConquistada]) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes ingresar.");
		if (InfoFabrica[id][fabricaIDFaccion] != InfoJugador[playerid][jFamMiembro]) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres parte de la faccion la cual conquisto esta fabrica.");
		if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0) Pos_Entrada(playerid, InfoFabrica[id][fabricaPos][0], InfoFabrica[id][fabricaPos][1], InfoFabrica[id][fabricaPos][2], InfoFabrica[id][fabricaPos][3], 0, 0);
		SetPosEx(playerid, InfoFabrica[id][fabricaInterior][0], InfoFabrica[id][fabricaInterior][1], InfoFabrica[id][fabricaInterior][2], InfoFabrica[id][fabricaInterior][3], InfoFabrica[id][fabricaInteriorID], InfoFabrica[id][fabricaVW], 1);
		SetCameraBehindPlayer(playerid);
		InfoJugador[playerid][pFabrica] = InfoFabrica[id][fabricaID];
		CargarObjetos(playerid);
		return 1;
	}
	//mineria
	if (IsPlayerInRangeOfPoint(playerid, 2.0, 608.4077,130.2382,8.3025))
	{
		if (!Es_job(playerid, 14)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres minero.");
		if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0) Pos_Entrada(playerid, 608.4077,130.2382,8.3025, 0.0000, 0, 0);
		SetPosEx(playerid, -727.9954,-337.4093,1739.8827, 148.2256, 5, 5, 1);
		CargarObjetos(playerid);
		return 1;

	}	//fbi estacionamiento
	if (IsPlayerInRangeOfPoint(playerid, 2.0, 242.2499,66.3550,1003.6406)) // FBI estacionamiento
	{
		if (!Es_Banda(playerid, 2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres parte del FBI.");
		if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0) Pos_Entrada(playerid, 242.2499,66.3550,1003.6406, 0.0000, 0, 0);
		SetPosEx(playerid, 1915.4208,1978.0978,7.5946, 93.8148, 0, 0, 1);
		CargarObjetos(playerid);
		return 1;
	}
	if (IsPlayerInRangeOfPoint(playerid, 5.0, 1658.1179,-1691.3804,15.6094)) // FBI estacionamiento
	{
		if (!Es_Banda(playerid, 2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres parte del FBI.");
		if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0) Pos_Entrada(playerid, 1658.1179,-1691.3804,15.6094, 0.0000, 0, 0);
			SetPosEx(playerid, 1915.4208,1978.0978,7.5946, 93.8148, 0, 0, 1);
			CargarObjetos(playerid);
		}
		else
		{
			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				for(new veh=0; veh <= MAX_VEHICLES; veh++) if (VehicleToPoint(5.0, veh, 1910.0389,1969.5532,7.5946))
				{
					ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Hay un vehiculo cerca del porton, espera a que se mueva.");
					return 1;
				}
				if (IsPlayerInVehicle(playerid, tmpcar))
				{
					MoverVehiclePos(tmpcar, 1910.0389,1969.5532,7.5946);
					SetVehicleZAngle(tmpcar, 89.4281);
				}
				foreach(Player, p) if (IsPlayerInVehicle(p, tmpcar))
				{
					if (GetPlayerInterior(p) == 0 && GetPlayerVirtualWorld(p) == 0) Pos_Entrada(p, 1658.1179,-1691.3804,15.6094, 0.0000, 0, 0);
				}
				return 1;
			}
		}
		return 1;
	}

	//estacionamientos
	Loop(eid, MAX_ESTACION, 0) if (_enPos(playerid, 2, InfoEstacion[eid][ePos][0], InfoEstacion[eid][ePos][1], InfoEstacion[eid][ePos][2]) && GetPlayerVirtualWorld(playerid) == 0)
	{
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) // como conductor
		{
			new idcoche = GetPlayerVehicleID(playerid);
			MoverVehiclePos(idcoche, 2061.2832,2431.7893,10.9384);
			SetVehicleZAngle(idcoche, 194.6593);
			foreach(Player, p) if (IsPlayerInVehicle(p, GetPlayerVehicleID(playerid)))
			{
				if (GetPlayerInterior(p) == 0 && GetPlayerVirtualWorld(p) == 0) Pos_Entrada(p, InfoEstacion[eid][ePos][0], InfoEstacion[eid][ePos][1], InfoEstacion[eid][ePos][2], InfoEstacion[eid][ePos][3], 0, 0);
				SetPlayerInterior(p, eid + 6);
				SetPlayerVirtualWorld(p, 2);
			}
			CargarObjetos(playerid);
		}
		else
		{
			if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0) Pos_Entrada(playerid, InfoEstacion[eid][ePos][0], InfoEstacion[eid][ePos][1], InfoEstacion[eid][ePos][2], InfoEstacion[eid][ePos][3], 0, 0);
			SetPosEx(playerid,InfoEstacion[eid][eInterior][0],InfoEstacion[eid][eInterior][1],InfoEstacion[eid][eInterior][2], 180.9401, eid+6, 2, 1);
			CargarObjetos(playerid);
		}
		return 1;
	}
	Streamer_Update(playerid);
	return 1;
}

CMD:salir(playerid)
{
	if (InfoJugador[playerid][jEncarcelado] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando mientras estas preso.");
	//puertas
	Loop(id, totalpuertas, 1) if (InfoPuerta[id][pEntradaX] != 0.0)
	{
		if (_enPos(playerid, 2, InfoPuerta[id][pSalidaX], InfoPuerta[id][pSalidaY], InfoPuerta[id][pSalidaZ]) && InfoJugador[playerid][jInterior] == InfoPuerta[id][pSalidaInt] && InfoJugador[playerid][jVirtualWorld] == InfoPuerta[id][pSalidaVW])
		{
			//nivel vip
			if (InfoJugador[playerid][jNivelVIP] < InfoPuerta[id][pVIP])
			{
				SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes acceso para esta puerta, necesitas ser minimo VIP %s.", GetNameVIP(InfoPuerta[id][pVIP]));
				return 1;
   }
			//nivel faccion
			if (InfoPuerta[id][pFaccion] != 0)
			{
				if (InfoJugador[playerid][jFacMiembro] != InfoPuerta[id][pFaccion])
				{
					SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes acceso para esta puerta, necesitas ser miembro de %s.", GetNombreFamilia(InfoPuerta[id][pFaccion]));
					return 1;
				}
			}
			//nivel familia
			if (InfoPuerta[id][pFamilia] != 0)
			{
				if (InfoJugador[playerid][jFamMiembro] != InfoPuerta[id][pFamilia])
				{
					SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes acceso para esta puerta, necesitas ser miembro de la familia id %d.", InfoPuerta[id][pFamilia]);
					return 1;
				}
			}
			//nivel YT
			if (InfoPuerta[id][pYT] == 1)
			{
				if (InfoJugador[playerid][jYT] == 0)
				{
					SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes acceso para esta puerta, necesitas ser {FF0000}You{FFFFFF}Tuber.");
					return 1;
				}
			}
			//nivel trabajo
			if (InfoPuerta[id][pTrabajo] != 0)
			{
				if (IsPlayerJob(playerid, InfoPuerta[id][pTrabajo]) == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes acceso para esta puerta, necesitas ser %s.", GetNameJob(InfoPuerta[id][pTrabajo]));
			}
			//
			if (InfoPuerta[id][pEntradaInt] == 0 && InfoPuerta[id][pEntradaVW] == 0) Pos_Salida(playerid);
			SetPosEx(playerid, InfoPuerta[id][pEntradaX], InfoPuerta[id][pEntradaY], InfoPuerta[id][pEntradaZ], InfoPuerta[id][pEntradaR], InfoPuerta[id][pEntradaInt], InfoPuerta[id][pEntradaVW], 1);
			CargarObjetos(playerid);
			return 1;
		}
	}
	//negocios
	Loop(id, totalnegocios, 1) if (_enPos(playerid, 3.0, InfoNegocio[id][nSalidaX], InfoNegocio[id][nSalidaY], InfoNegocio[id][nSalidaZ]) && InfoJugador[playerid][jVirtualWorld] == InfoNegocio[id][nSalidaVW])
	{
		Pos_Salida(playerid);
		SetPosEx(playerid, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ], InfoNegocio[id][nEntradaR], 0, 0, 1);
		return 1;
	}
	//empresas
	Loop(id, totalempresas, 1) if (InfoEmpresa[id][eTipo] != 0 && _enPos(playerid, 3.0, InfoEmpresa[id][eSalidaX], InfoEmpresa[id][eSalidaY], InfoEmpresa[id][eSalidaZ]) && InfoJugador[playerid][jInterior] == InfoEmpresa[id][eSalidaInt] && InfoJugador[playerid][jVirtualWorld] == InfoEmpresa[id][eSalidaVW])
	{
        if (InfoEmpresa[id][eEntradaInt] == 0 && InfoEmpresa[id][eEntradaVW] == 0) Pos_Salida(playerid);
		Pos_Salida(playerid);
		SetPosEx(playerid, InfoEmpresa[id][eEntradaX], InfoEmpresa[id][eEntradaY], InfoEmpresa[id][eEntradaZ], InfoEmpresa[id][eEntradaR], InfoEmpresa[id][eEntradaInt], InfoEmpresa[id][eEntradaVW], 1);
		EnEmpresaID[playerid] = -1;
		DentroEmpresa[playerid] = -1;
		return 1;
	}
	//casas
	Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0 && _enPos(playerid, 3.0, InfoCasa[id][cSalidaX], InfoCasa[id][cSalidaY], InfoCasa[id][cSalidaZ]) && InfoJugador[playerid][jInterior] == InfoCasa[id][cSalidaInt] && InfoJugador[playerid][jVirtualWorld] == InfoCasa[id][cSalidaVW])
	{
		if (Robando_Objeto[playerid] != 0) return SendClientMessageEx(playerid, 0xccccccff, "* No puedes usar esta funcion mientras robas un objeto de casa.");
		if (InfoCasa[id][cEntradaInt] == 0 && InfoCasa[id][cEntradaVW] == 0) Pos_Salida(playerid);
		SetPosEx(playerid, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ], InfoCasa[id][cEntradaR], InfoCasa[id][cEntradaInt], InfoCasa[id][cEntradaVW], 1);
		EnCasaID[playerid] = -1;
		KillTimer(VisitaTimer[playerid]);
		DentroCasa[playerid] = -1;
		return 1;
	}
	//mercados
	Loop(i, totalmercados, 1) if (_enPos(playerid, 2.5, MercadoData[i][mInt][0], MercadoData[i][mInt][1], MercadoData[i][mInt][2]) && InfoJugador[playerid][jVirtualWorld] == MercadoData[i][mVW])
	{
		Pos_Salida(playerid);
		SetPosEx(playerid, MercadoData[i][mPos][0], MercadoData[i][mPos][1], MercadoData[i][mPos][2], MercadoData[i][mPos][3] - 180.0, 0, 0, 1);
		SetCameraBehindPlayer(playerid);
		InfoJugador[playerid][pMercado] = -1;
		CargarObjetos(playerid);
		return 1;
	}
	//fabricas
	Loop(i, totalfabricas, 1) if (_enPos(playerid, 2.5, InfoFabrica[i][fabricaInterior][0], InfoFabrica[i][fabricaInterior][1], InfoFabrica[i][fabricaInterior][2]) && InfoJugador[playerid][jVirtualWorld] == InfoFabrica[i][fabricaVW])
	{
		Pos_Salida(playerid);
		SetPosEx(playerid, InfoFabrica[i][fabricaPos][0], InfoFabrica[i][fabricaPos][1], InfoFabrica[i][fabricaPos][2], InfoFabrica[i][fabricaPos][3] - 180.0, 0, 0, 1);
		SetCameraBehindPlayer(playerid);
		InfoJugador[playerid][pFabrica] = -1;
		CargarObjetos(playerid);
		return 1;
	}
	//estadio
	if (IsPlayerInRangeOfPoint(playerid, 2.0, -727.9954,-337.4093,1739.8827))
	{
		Pos_Salida(playerid);
		SetPosEx(playerid, 608.4077,130.2382,8.3025, 21.8294, 0, 0, 1);
		CargarObjetos(playerid);
		return 1;
	}
	//fbi 2
	if (IsPlayerInRangeOfPoint(playerid, 5.0, 1910.0389,1969.5532,7.5946)) // FBI
	{
		if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			Pos_Salida(playerid);
			SetPosEx(playerid, 1658.5332,-1700.6948,15.6094, 177.0247, 0, 0, 1);
		}
		else
		{
			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				for(new veh=0; veh <= MAX_VEHICLES; veh++) if (VehicleToPoint(5.0, veh, 1658.5332,-1700.6948,15.6094))
				{
					ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Hay un vehiculo cerca del porton, espera a que se mueva.");
					return 1;
				}
				new tmpcar = GetPlayerVehicleID(playerid);
				if (IsPlayerInVehicle(playerid, tmpcar))
				{
					MoverVehiclePos(tmpcar, 1658.5332,-1700.6948,15.6094);
					SetVehicleZAngle(tmpcar, 177.0247);
					return 1;
				}
				foreach(Player, p) if (IsPlayerInVehicle(p, tmpcar))
				{
					Pos_Salida(p);
				}
			}
		}
		return 1;
	}
	//estacionamientos
	Loop(eid, MAX_ESTACION, 0) if (_enPos(playerid, 10.0, InfoEstacion[eid][eInterior][0], InfoEstacion[eid][eInterior][1], InfoEstacion[eid][eInterior][2]) && InfoJugador[playerid][jVirtualWorld] == 2 && InfoJugador[playerid][jInterior] == eid + 6)
	{
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) // como conductor
		{
			new Float:posx, Float:posy, Float:sizex, Float:sizey, Float:sizez, vehicleid = GetPlayerVehicleID(playerid);
			GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, sizex, sizey, sizez);
			posx = InfoEstacion[eid][ePos][0] - (floatsqroot(sizey + sizey + sizey) * floatsin(-InfoEstacion[eid][ePos][3], degrees));
			posy = InfoEstacion[eid][ePos][1] - (floatsqroot(sizey + sizey + sizey) * floatcos(-InfoEstacion[eid][ePos][3], degrees));
			MoverVehiclePos(vehicleid,posx,posy,InfoEstacion[eid][ePos][2]);
			SetVehicleZAngle(vehicleid,InfoEstacion[eid][ePos][3]+180);
			SetVehiclePassengersInteriorEx(vehicleid, 0);
			SetVehiclePassengersVWEx(vehicleid, 0);
			CargarObjetos(playerid);
			foreach(Player, p) if (IsPlayerInVehicle(p, GetPlayerVehicleID(playerid)))
			{
				Pos_Salida(p);
				SetPlayerInterior(p, 0);
				SetPlayerVirtualWorld(p, 0);
			}
		}
		else
		{
			Pos_Salida(playerid);
			SetPosEx(playerid,InfoEstacion[eid][ePos][0],InfoEstacion[eid][ePos][1],InfoEstacion[eid][ePos][2],InfoEstacion[eid][ePos][3], 0, 0, 1);
			CargarObjetos(playerid);
		}
		return 1;
	}
	Streamer_Update(playerid);
	return 1;
}

//comandos negocios
CMD:vendernegocio(playerid)
{
    if (EnVentaPropiedad[playerid] != 0) return SendClientMessage(playerid, 0xccccccff, "* No puedes realizar esta funcion en medio de una venta.");
	if (CountNegocios(playerid) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes ninguna casa a tu nombre.");
	new id = -1;
	Loop(n, totalnegocios, 1) if (_enPos(playerid, 2.0, InfoNegocio[n][nEntradaX], InfoNegocio[n][nEntradaY], InfoNegocio[n][nEntradaZ]) && InfoJugador[playerid][jInterior] == 0 && InfoJugador[playerid][jVirtualWorld] == 0)
	{
		id = n;
		break;
	}
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "No estas en la entrada de ningun negocio.");
	if (LlavesNegocio(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de este negocio.");
	new sell = InfoNegocio[id][nPrecio];
	GivePlayerCash(playerid, sell, "vendernegocio");
	SendClientMessageEx(playerid, 0x00CCCCFF, "Vendiste tu negocio %d, recuperaste $%s.", id, diner_coma(sell));
	VenderNegocio(id);
	return 1;
}

VenderNegocio(id)
{
	new gformat[512];
	alm(InfoNegocio[id][nPropietario], "none");
	switch (InfoNegocio[id][nTipo])
	{
		case 1: alm(InfoNegocio[id][nNombre], "24-7");
		case 2: alm(InfoNegocio[id][nNombre], "Ropa");
		case 3: alm(InfoNegocio[id][nNombre], "Restaurante");
		case 4: alm(InfoNegocio[id][nNombre], "Cluckin bell");
		case 5: alm(InfoNegocio[id][nNombre], "Pizzeria");
		case 6: alm(InfoNegocio[id][nNombre], "Burger Shot");
		case 7: alm(InfoNegocio[id][nNombre], "Ammunation");
		case 8: alm(InfoNegocio[id][nNombre], "Peluqueria");
		case 9: alm(InfoNegocio[id][nNombre], "Tienda Sexual");
		case 10: alm(InfoNegocio[id][nNombre], "Gasolinera");
		case 11: alm(InfoNegocio[id][nNombre], "Electronica");
		case 12: alm(InfoNegocio[id][nNombre], "Bar");
		case 13: alm(InfoNegocio[id][nNombre], "Ferreteria");
		case 14: alm(InfoNegocio[id][nNombre], "Alhambra");
		case 15: alm(InfoNegocio[id][nNombre], "Strip club");
		case 16: alm(InfoNegocio[id][nNombre], "Club private");
	}
	InfoNegocio[id][nSeguro] = 0;
	InfoNegocio[id][nVenta] = 0;
	InfoNegocio[id][nTiempoDisponible] = -1;
	mysql_format(DBngrp, gformat, sizeof gformat, "UPDATE negocios SET Propietario = '%e', Seguro = 0, Venta = 0, TiempoDisponible = -1 WHERE ID = '%d'", InfoNegocio[id][nPropietario], InfoNegocio[id][nID]);
	mysql_tquery(DBngrp, gformat);
	alm(InfoNegocio[id][nCompartida1], "none");
	alm(InfoNegocio[id][nCompartida2], "none");
	alm(InfoNegocio[id][nCompartida3], "none");
	mysql_format(DBngrp, gformat, sizeof gformat, "UPDATE negocios SET Nombre = '%e', Compartida1 = '%e', Compartida2 = '%e', Compartida3 = '%e' WHERE ID = '%d'", InfoNegocio[id][nCompartida1], InfoNegocio[id][nNombre], InfoNegocio[id][nCompartida2], InfoNegocio[id][nCompartida3], InfoNegocio[id][nID]);
	mysql_tquery(DBngrp, gformat);
	LabelPickup_negocio(id, 0);
	LabelPickup_negocio1(id, 0);
	LabelPickup_negocio1(id, 1);
	LabelPickup_negocio1(id, 2);
	return 1;
}

CMD:venderminegocio(playerid, params[])
{
    if (EnVentaPropiedad[playerid] != 0) return SendClientMessage(playerid, 0xccccccff, "* No puedes realizar esta funcion en medio de una venta.");
	if (CountNegocios(playerid) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes ninguna casa a tu nombre.");
	new id = -1;
	Loop(n, totalnegocios, 1) if (_enPos(playerid, 2.0, InfoNegocio[n][nEntradaX], InfoNegocio[n][nEntradaY], InfoNegocio[n][nEntradaZ]) && InfoJugador[playerid][jInterior] == 0 && InfoJugador[playerid][jVirtualWorld] == 0)
	{
		id = n;
		break;
	}
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "No estas en la entrada de ningun negocio.");
	if (LlavesNegocio(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de este negocio.");
	new playerid2, price;
	if (sscanf(params, "dd", playerid2, price)) return _Mensaje(playerid, 3, "0", "/venderminegocio [id jugador] [precio]");
	if (price < 1 || price > 9999999) return SendClientMessage(playerid, 0xccccccff, "* El precio no puede superar $9,999,999.");
	if (playerid == playerid2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes venderte el negocio a ti mismo.");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (!CercaDelWeon(8.0, playerid, playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no se encuentra cerca de ti.");
	if (GetPlayerCash(playerid2) < price) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no tiene esa cantidad de dinero."); return 1; }
	NegocioOffer[playerid2] = playerid;
	NegocioPrice[playerid2] = price;
	NegocioSQL_ID[playerid2] = id;
	EnVentaPropiedad[playerid] = 1;
	SendClientMessageEx(playerid, 0x33CCFFFF, "* Ofreciste a %s para comprar tu negocio por $%d.", NombreJugador(playerid2), price);
	SendClientMessageEx(playerid2, 0x33CCFFFF, "* %s te ha ofrecido su negocio por $%d, (/aceptar).", NombreJugador(playerid), price);
	return 1;
}

CMD:minegocio(playerid)
{
	new id = EnNegocio(playerid), dialogShow[512];
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en ningun negocio.");
	if (LlavesNegocio(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de este negocio.");
	format(dialogShow, sizeof dialogShow, "{cccccc}Nombre (%s)\n{cccccc}Dinero {00cc00}$%s\n{cccccc}Productos {0095B5}%d\n{cccccc}Puerta %s\n{cccccc}Mis muebles", InfoNegocio[id][nNombre], diner_coma(InfoNegocio[id][nDinero]), InfoNegocio[id][nProductos], StatusBusiness(id,2));
	Dialog_Show(playerid, Negocio_Opciones, DIALOG_STYLE_LIST, "Mi negocio", dialogShow, "Continuar", "Salir");
	DentroNegocio[playerid] = id;
	return 1;
}
CMD:negocio(playerid) return cmd_minegocio(playerid);

Dialog:Negocio_Opciones(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new id = EnNegocio(playerid), gformat[370];
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en ningun negocio.");
	if (LlavesNegocio(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de este negocio.");
	switch (listitem)
	{
		case 0: Dialog_Show(playerid, ChangeNameBusiness, DIALOG_STYLE_INPUT, "Nombre", "{CCCCCC}Escribe el nuevo nombre de tu negocio:", "Continuar", "Volver");
		case 1:
		{
			format(gformat, sizeof gformat, "Dinero {00cc00}$%d", InfoNegocio[id][nDinero]);
			Dialog_Show(playerid, DineroOpcionNeg, DIALOG_STYLE_INPUT, gformat, "{CCCCCC}Escribe la cantidad de dinero que deseas depositar o retirar\n\n- Escribe unicamente el {BB0000}MONTON (EN NUMEROS)", "Depositar", "Retirar");
		}
		case 2:
		{
			new tipo2[50], costo = 0;
			switch (InfoNegocio[id][nTipo])
			{
				case 1: costo = 3894, tipo2 = "Productos de venta";
				case 2: costo = 4026, tipo2 = "Ropa y zapatos";
				case 3: costo = 4290, tipo2 = "Bebidas y comestibles";
				case 4: costo = 3135, tipo2 = "Comestibles";
				case 5: costo = 2970, tipo2 = "Comestibles";
				case 6: costo = 2871, tipo2 = "Comestibles";
				case 7: costo = 15015, tipo2 = "Armas y cargadores";
				case 8: costo = 2805, tipo2 = "Champus y geles";
				case 9: costo = 2640, tipo2 = "Productos eroticos";
				case 10: costo = 2475, tipo2 = "Productos de venta";
				case 11: costo = 9735, tipo2 = "Productos electronicos";
				case 12: costo = 3960, tipo2 = "Bebidas y comestibles";
				case 13: costo = 3135, tipo2 = "Herramientas";
				case 14: costo = 10395, tipo2 = "Bebidas y comestibles";
				case 15: costo = 8910, tipo2 = "Bebidas y comestibles";
				case 16: costo = 9537, tipo2 = "Bebidas y comestibles";
				case 17: costo = 6930, tipo2 = "Articulos usados";
			}
			new coordsstring[512];
			format(coordsstring, sizeof coordsstring, "{FFFFFF}Informacion del pedido:\n\n\
			• Costo: {00c200}%d${FFFFFF}\n\
			• Cantidad: {C57BBB}500{FFFFFF}\n\
			• Tipo: {b00000}%s{FFFFFF}\n\n", costo, tipo2);
			Dialog_Show(playerid, BuyProductsNeg, DIALOG_STYLE_MSGBOX, "Productos", coordsstring, "Continuar", "Volver");
		}
		case 3:
		{
			if (InfoNegocio[id][nSeguro] == 0)
			{
				InfoNegocio[id][nSeguro] = 1;
				AccionesRol(playerid, 0, "saca las llaves del negocio y lo abre.");
				GameTextForPlayer(playerid, "~g~Negocio abierto", 3500, 1);
			}
			else
			{
				InfoNegocio[id][nSeguro] = 0;
				AccionesRol(playerid, 0, "saca las llaves del negocio y lo cierra.");
				GameTextForPlayer(playerid, "~r~Negocio Cerrado", 3500, 1);
			}
			guardar_int_mysql("negocios", "Seguro", InfoNegocio[id][nID], InfoNegocio[id][nSeguro]);
			cmd_minegocio(playerid);
		}
		case 4: cmd_muebles(playerid);
	}
	return 1;
}

Dialog:ChangeNameBusiness(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_minegocio(playerid);
	new id = EnNegocio(playerid);
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en ningun negocio.");
	if (LlavesNegocio(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de este negocio.");
	if (!strlen(inputtext)) return Dialog_Show(playerid, ChangeNameBusiness, DIALOG_STYLE_INPUT, "Nombre", "{CCCCCC}No has escrito nada, intenta de nuevo:", "Continuar", "Volver");
	if (strlen(inputtext) > 20 || strlen(inputtext) < 4)
	{
		ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes poner el nombre con mas de 20 caracteres.");
		return 1;
	}
	alm(InfoNegocio[id][nNombre], inputtext);
	SendClientMessageEx(playerid, 0x33CCFFFF, "Cambiaste el nombre del negocio a: %s", InfoNegocio[id][nNombre]);
	guardar_string_mysql("negocios", "Nombre", InfoNegocio[id][nID], InfoNegocio[id][nNombre]);
	LabelPickup_negocio1(id, 0);
	LabelPickup_negocio1(id, 1);
	LabelPickup_negocio1(id, 2);
	return 1;
}

Dialog:DineroOpcionNeg(playerid, response, listitem, inputtext[])
{
	new id = EnNegocio(playerid), string[256];
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en ningun negocio.");
	if (LlavesNegocio(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de este negocio.");
	new amount = strval(inputtext);
	if (response) //depositar
	{
		if (amount < 1) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes depositar menos de un dolar."); return 1; }
		if (GetPlayerCash(playerid) >= amount)
		{
			InfoNegocio[id][nDinero] += amount;
			guardar_int_mysql("negocios", "Dinero", InfoNegocio[id][nID], InfoNegocio[id][nDinero]);
			GivePlayerCash(playerid, -amount, "retiro negocio");
			SendClientMessageEx(playerid, 0x33CCFFFF, "Depositaste $%d en tu negocio.", amount);
			format(string, sizeof string, "[-] %s deposito $%s en su negocio (neg ID %d).", NombreRJugador(playerid), diner_coma(amount), id);
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], string, 3);
			return 1;
		}
		ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes tanto dinero encima para depositar.");
	}
	else // retirar
	{
		if (amount < 1) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes retirar menos de un dolar."); return 1; }
		if (InfoNegocio[id][nDinero] >= amount)
		{
			InfoNegocio[id][nDinero] -= amount;
			guardar_int_mysql("negocios", "Dinero", InfoNegocio[id][nID], InfoNegocio[id][nDinero]);
			GivePlayerCash(playerid, amount, "deposito negocio");
			SendClientMessageEx(playerid, 0x33CCFFFF, "Retiraste $%d de tu negocio.", amount);
			format(string, sizeof string, "[+] %s retiro $%s de su negocio (neg ID %d).", NombreRJugador(playerid), diner_coma(amount), id);
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], string, 3);
			return 1;
		}
		ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero en caja para retirar.");
	}
	return 1;
}

Dialog:BuyProductsNeg(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_minegocio(playerid);
	new id = EnNegocio(playerid), costo = 0;
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en ningun negocio.");
	if (LlavesNegocio(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de este negocio.");
	if (InfoNegocio[id][nProductos] >= 5000) return SendClientMessage(playerid, 0xEFEFEFFF, "No puedes tener mas de 5,000 productos.");
	switch (InfoNegocio[id][nTipo])
	{
		case 1: costo = 3894;
		case 2: costo = 4026;
		case 3: costo = 4290;
		case 4: costo = 3135;
		case 5: costo = 2970;
		case 6: costo = 2871;
		case 7: costo = 15015;
		case 8: costo = 2805;
		case 9: costo = 2640;
		case 10: costo = 2475;
		case 11: costo = 9735;
		case 12: costo = 3960;
		case 13: costo = 3135;
		case 14: costo = 10395;
		case 15: costo = 8910;
		case 16: costo = 9537;
		case 17: costo = 6930;
	}
	if (GetPlayerCash(playerid) >= costo)
	{
		GivePlayerCash(playerid, -costo, "relleno de productos negocio");
		InfoNegocio[id][nProductos] += 500;
		guardar_int_mysql("negocios", "Productos", InfoNegocio[id][nID], InfoNegocio[id][nProductos]);
		SendClientMessageEx(playerid, 0xFFEA5FFF, "Pagaste $%d por 500 productos. Ahora tienes %d productos.", costo, InfoNegocio[id][nProductos]);
		return 1;
	}
	SendClientMessageEx(playerid, 0xccccccff, "No tienes $%d para pagar los productos.", costo);
	return 1;
}

CMD:editarn(playerid, params[])
{
	new id, input;
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Editarn.");
	if (sscanf(params, "s[32]", params))
	{
		_Mensaje(playerid, 3, "0", "/editarn [nombre] [negocio] [codigo]");
		_Mensaje(playerid, 1, "exterior - precio - productos - interior - skinactor - posactor", "Nombres:");
		return 1;
	}
	if (!strcmp(params, "exterior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, id)) return _Mensaje(playerid, 3, "0", "/editarn exterior [negocio]");
		if (id < 1 || id > totalnegocios) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalnegocios);
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de negocio no existe.", id);
		GetPlayerPos(playerid, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ]);
		GetPlayerFacingAngle(playerid, InfoNegocio[id][nEntradaR]);
		guardar_float_mysql("negocios", "EntradaX", InfoNegocio[id][nID], InfoNegocio[id][nEntradaX]);
		guardar_float_mysql("negocios", "EntradaY", InfoNegocio[id][nID], InfoNegocio[id][nEntradaY]);
		guardar_float_mysql("negocios", "EntradaZ", InfoNegocio[id][nID], InfoNegocio[id][nEntradaZ]);
		guardar_float_mysql("negocios", "EntradaR", InfoNegocio[id][nID], InfoNegocio[id][nEntradaR]);
		LabelPickup_negocio(id, 0);
		LabelPickup_negocio1(id, 0);
		LabelPickup_negocio1(id, 1);
		LabelPickup_negocio1(id, 2);
		SendClientMessageEx(playerid, 0x008BFFFF, "Cambiaste el exterior del negocio %d.", id);
	}
	else if (!strcmp(params, "precio", true, 6))
	{
		if (sscanf(params, "s[32]ii", params, id, input)) return _Mensaje(playerid, 3, "0", "/editarn precio [negocio] [precio]");
		if (id < 1 || id > totalnegocios) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalnegocios);
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de negocio no existe.", id);
		InfoNegocio[id][nPrecio] = input;
		guardar_int_mysql("negocios", "Precio", InfoNegocio[id][nID], InfoNegocio[id][nPrecio]);
		SendClientMessageEx(playerid, 0x008BFFFF, "Cambiaste el precio $%d del negocio %d.", input, id);
	}
	else if (!strcmp(params, "interior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, id)) return _Mensaje(playerid, 3, "0", "/editarn interior [negocio]");
		if (id < 1 || id > totalnegocios) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalnegocios);
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de negocio no existe.", id);
		GetPlayerPos(playerid, InfoNegocio[id][nSalidaX], InfoNegocio[id][nSalidaY], InfoNegocio[id][nSalidaZ]);
		GetPlayerFacingAngle(playerid, InfoNegocio[id][nSalidaR]);
		InfoNegocio[id][nSalidaInt] = GetPlayerInterior(playerid);
		InfoNegocio[id][nSalidaVW] = 300+id;
		guardar_float_mysql("negocios", "SalidaX", InfoNegocio[id][nID], InfoNegocio[id][nSalidaX]);
		guardar_float_mysql("negocios", "SalidaY", InfoNegocio[id][nID], InfoNegocio[id][nSalidaY]);
		guardar_float_mysql("negocios", "SalidaZ", InfoNegocio[id][nID], InfoNegocio[id][nSalidaZ]);
		guardar_float_mysql("negocios", "SalidaR", InfoNegocio[id][nID], InfoNegocio[id][nSalidaR]);
		guardar_int_mysql("negocios", "SalidaInt", InfoNegocio[id][nID], InfoNegocio[id][nSalidaInt]);
		guardar_int_mysql("negocios", "SalidaVW", InfoNegocio[id][nID], InfoNegocio[id][nSalidaVW]);
		LabelPickup_negocio(id, 1);
		LabelPickup_negocio1(id, 0);
		LabelPickup_negocio1(id, 1);
		LabelPickup_negocio1(id, 2);
		SendClientMessageEx(playerid, 0x008BFFFF, "Cambiaste el interior del negocio %d.", id);
	}
	else if (!strcmp(params, "productos", true, 9))
	{
		if (sscanf(params, "s[32]ii", params, id, input)) return _Mensaje(playerid, 3, "0", "/editarn productos [negocio] [productos]");
		if (id < 1 || id > totalnegocios) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalnegocios);
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de negocio no existe.", id);
		if (input < 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Productos no pueden ser negativos.");
		InfoNegocio[id][nProductos] = input;
		guardar_int_mysql("negocios", "Productos", InfoNegocio[id][nID], InfoNegocio[id][nProductos]);
		SendClientMessageEx(playerid, 0x008BFFFF, "Cambiaste los productos %d del negocio %d.", input, id);
	}
	else if (!strcmp(params, "posactor", true, 8))
	{
		if (sscanf(params, "s[32]i", params, id)) return _Mensaje(playerid, 3, "0", "/editarnegocio posactor [negocio]");
		if (id < 1 || id > totalnegocios) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalnegocios);
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de negocio no existe.", id);
		if (InfoNegocio[id][nActorSkin] == 0) return SendClientMessage(playerid, -1, "Aun no colocas un skin al actor.");
		GetPlayerPos(playerid, InfoNegocio[id][nActorX], InfoNegocio[id][nActorY], InfoNegocio[id][nActorZ]);
		GetPlayerFacingAngle(playerid, InfoNegocio[id][nActorR]);
		new string[600];
		mysql_format(DBngrp, string, sizeof string, "UPDATE negocios SET ActorX = '%f', ActorY = '%f', ActorZ = '%f', ActorR = '%f' WHERE ID = '%d'", InfoNegocio[id][nActorX], InfoNegocio[id][nActorY], InfoNegocio[id][nActorZ], InfoNegocio[id][nActorR], InfoNegocio[id][nID]);
		mysql_tquery(DBngrp, string);
		LabelPickup_negocio(id, 1);
		LabelPickup_negocio1(id, 0);
		LabelPickup_negocio1(id, 1);
		LabelPickup_negocio1(id, 2);
		SendClientMessageEx(playerid, 0x008BFFFF, "Cambiaste el lugar del actor del negocio %d.", id);
	}
	else if (!strcmp(params, "skinactor", true, 9))
	{
		if (sscanf(params, "s[32]ii", params, id, input)) return _Mensaje(playerid, 3, "0", "/editarnegocio skinactor [negocio] [skin]");
		if (id < 1 || id > totalnegocios) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalnegocios);
		if (InfoNegocio[id][nTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de negocio no existe.", id);
		if (input > 311 || input < 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Skin ID incorrecto (0-311).");
		if (input == 74) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Skin ID incorrecto (0-311).");
		InfoNegocio[id][nActorSkin] = input;
		guardar_int_mysql("negocios", "ActorSkin", InfoNegocio[id][nID], InfoNegocio[id][nActorSkin]);
		if (InfoNegocio[id][nActorX] != 0.0) { LabelPickup_negocio(id, 1); LabelPickup_negocio1(id, 0); LabelPickup_negocio1(id, 1); LabelPickup_negocio1(id, 2); }
		SendClientMessageEx(playerid, 0xCCCC00FF, "Cambiaste el skin del actor (%d) del negocio %d.", input, id);
	}
	return 1;
}
CMD:editarnegocio(playerid, params[]) return cmd_editarn(playerid, params);

CMD:irnegocio(playerid, params[])
{
	new id;
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Irnegocio.");
	OnDuty
	if (sscanf(params, "i", id)) return _Mensaje(playerid, 3, "0", "/irnegocio [negocio]");
	if (id < 1 || id > totalnegocios) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalnegocios);
	if (InfoNegocio[id][nTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de negocio no existe.", id);
	SetPosEx(playerid, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ], 0.0, 0, 0, 1);
	SendClientMessageEx(playerid, 0x008BFFFF, "Usted se teletransporto al negocio ID %d.", id);
	return 1;
}

CMD:avenegocio(playerid, params[])
{
	new id;
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Avenegocio.");
	OnDuty
	if (sscanf(params, "i", id)) return _Mensaje(playerid, 3, "0", "/avenegocio [negocio]");
	if (id < 1 || id > totalnegocios) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalnegocios);
	if (InfoNegocio[id][nTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de negocio no existe.", id);
	foreach(Player, p) if (IsPlayerConnectedEx(p) && LlavesNegocio(p, id))
	{
		SendClientMessageEx(p, 0xCCCC00FF, "Admin %s vendio tu negocio id: %d", InfoJugador[playerid][jNombre_Apellido], id);
	}
	VenderNegocio(id);
	LabelPickup_negocio(id, 0);
	LabelPickup_negocio1(id, 0);
	LabelPickup_negocio1(id, 1);
	LabelPickup_negocio1(id, 2);
	SendClientMessageEx(playerid, 0x008BFFFF, "Vendiste el negocio %d.", id);
	return 1;
}

CMD:comprarnegocio(playerid)
{
    if (InfoJugador[playerid][jTiempos][7] > 0)
	{
		SendClientMessageEx(playerid, 0xCCCC00FF, "Debes esperar %d minutos para comprar otro negocio.", InfoJugador[playerid][jTiempos][7]);
        return 1;
    }
	new id = -1;
	Loop(h, totalnegocios, 1) if (_enPos(playerid, 2.0, InfoNegocio[h][nEntradaX], InfoNegocio[h][nEntradaY], InfoNegocio[h][nEntradaZ]) && InfoJugador[playerid][jInterior] == 0 && InfoJugador[playerid][jVirtualWorld] == 0)
	{
		id = h;
		break;
	}
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "No estas en la entrada de ningun negocio.");
	if (InfoNegocio[id][nVenta] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este negocio ya tiene propietario");
	if (CountNegocios(playerid) >= NumberNegociosVIP(InfoJugador[playerid][jNivelVIP])) return SendClientMessageEx(playerid, -1, "* No puedes tener mas de %d negocios, siendo %s.", NumberNegociosVIP(InfoJugador[playerid][jNivelVIP]), GetNameVIP(InfoJugador[playerid][jNivelVIP]));
	if (GetPlayerCash(playerid) < InfoNegocio[id][nPrecio]) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes fondos suficientes para comprarte este negocio."); return 1; }
	GivePlayerCash(playerid, -InfoNegocio[id][nPrecio], "comprarnegocio");
	InfoNegocio[id][nProductos] = 500;
	InfoNegocio[id][nVenta] = 1;
	alm(InfoNegocio[id][nPropietario], InfoJugador[playerid][jNombre_Apellido]);
	LabelPickup_negocio(id, 0);
	LabelPickup_negocio1(id, 0);
	LabelPickup_negocio1(id, 1);
	LabelPickup_negocio1(id, 2);
	new k = gettime(), string[512];
	k += 1296000;
	InfoNegocio[id][nTiempoDisponible] = k;
	SendClientMessageEx(playerid, 0xCCCC00FF, "Compraste este negocio por $%d, escribe '/ayuda negocio' para mas informacion.", InfoNegocio[id][nPrecio]);
	format(string, sizeof string, "[-] %s ha comprado el negocio id %d por $%s.", NombreRJugador(playerid), id, diner_coma(InfoNegocio[id][nPrecio]));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], string, 4);
	InfoJugador[playerid][jTiempos][7] = 15;
	guardar_int_mysql("cuentas", "Tiempos8", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][7]);
	mysql_format(DBngrp, string, sizeof string, "UPDATE negocios SET Venta = 1, Propietario = '%e', TiempoDisponible = '%d', Productos = 500 WHERE ID = '%d'", InfoNegocio[id][nPropietario], InfoNegocio[id][nTiempoDisponible], InfoNegocio[id][nID]);
	mysql_tquery(DBngrp, string);
	return 1;
}

CMD:dartoy(playerid, params[]){
	new tipo;
	new toy = -1;
	new negrito;
	new string[128];
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /dartoy.");
	Loop(x, 5, 0) if (InfoJugador[playerid][aModelo][x] == 0)
	{
		toy = x;
		break;
	}
	if (sscanf(params, "ii", tipo, negrito))
	{
		_Mensaje(playerid, 3, "0", "/dartoy [toy] [id jugador]");
		_Mensaje(playerid, 1, "1) Totem | 2) RPG | 3) Mascara S3X | 4) Calavera", "Tipos:");
		_Mensaje(playerid, 1, "5) Caja de regalo | 6) Bolsa de dinero | 7) Caldera | 8) Loro", "Tipos:");
		return 1;
	}
	if (!IsPlayerConnectedEx(negrito)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	if (tipo == 1) // 1276|1|0.172998|-0.155997|-0.019000|0.182998|91.900054|95.363029|0.529999|0.480998|0.430000|1|
		{
		InfoJugador[negrito][aModelo][toy] = 1276;
		InfoJugador[negrito][aHueso][toy] = 1;
		InfoJugador[negrito][aPosicionX][toy] = 0.172999;
		InfoJugador[negrito][aPosicionY][toy] = -0.155997;
		InfoJugador[negrito][aPosicionZ][toy] = -0.019000;
		InfoJugador[negrito][aRotacionX][toy] = 0.182998;
		InfoJugador[negrito][aRotacionY][toy] = 91.900054;
		InfoJugador[negrito][aRotacionZ][toy] = 95.363029;
		InfoJugador[negrito][aEscalaX][toy] = 0.529999;
		InfoJugador[negrito][aEscalaY][toy] = 0.480998;
		InfoJugador[negrito][aEscalaZ][toy] = 0.430000;
		}
	else if (tipo == 2){ //360|1|0.049998|-0.112997|-0.087000|-0.317005|52.700069|3.662999|0.593999|1.012998|1.000000|1|
		InfoJugador[negrito][aModelo][toy] = 360;
		InfoJugador[negrito][aHueso][toy] = 1;
		InfoJugador[negrito][aPosicionX][toy] = 0.049998;
		InfoJugador[negrito][aPosicionY][toy] = -0.112997;
		InfoJugador[negrito][aPosicionZ][toy] = -0.087000;
		InfoJugador[negrito][aRotacionX][toy] = -0.317005;
		InfoJugador[negrito][aRotacionY][toy] = 52.700069;
		InfoJugador[negrito][aRotacionZ][toy] = 3.662999;
		InfoJugador[negrito][aEscalaX][toy] = 0.593999;
		InfoJugador[negrito][aEscalaY][toy] = 1.012998;
		InfoJugador[negrito][aEscalaZ][toy] = 1.000000;
		}
	else if (tipo == 3){ //19163|2|0.069999|0.043001|0.001999|6.282979|84.100044|179.462860|1.058999|1.003998|1.110001|1|
		InfoJugador[negrito][aModelo][toy] = 19163;
		InfoJugador[negrito][aHueso][toy] = 2;
		InfoJugador[negrito][aPosicionX][toy] = 0.0699999;
		InfoJugador[negrito][aPosicionY][toy] = 0.043001;
		InfoJugador[negrito][aPosicionZ][toy] = 0.001999;
		InfoJugador[negrito][aRotacionX][toy] = 6.282979;
		InfoJugador[negrito][aRotacionY][toy] = 84.100044;
		InfoJugador[negrito][aRotacionZ][toy] = 179.462860;
		InfoJugador[negrito][aEscalaX][toy] = 1.058999;
		InfoJugador[negrito][aEscalaY][toy] = 1.003998;
		InfoJugador[negrito][aEscalaZ][toy] = 1.110001;
		}
	else if (tipo == 4){ //1254|2|0.172998|0.010002|0.251000|2.582996|82.900032|1.962997|0.593999|0.380999|0.564000|1|
		InfoJugador[negrito][aModelo][toy] = 1254;
		InfoJugador[negrito][aHueso][toy] = 2;
		InfoJugador[negrito][aPosicionX][toy] = 0.172998;
		InfoJugador[negrito][aPosicionY][toy] = 0.010002;
		InfoJugador[negrito][aPosicionZ][toy] = 0.251000;
		InfoJugador[negrito][aRotacionX][toy] = 2.582996;
		InfoJugador[negrito][aRotacionY][toy] = 82.900032;
		InfoJugador[negrito][aRotacionZ][toy] = 1.962997;
		InfoJugador[negrito][aEscalaX][toy] = 0.593999;
		InfoJugador[negrito][aEscalaY][toy] = 0.380999;
		InfoJugador[negrito][aEscalaZ][toy] = 0.564000;
		}
	else if (tipo == 5){ //19057|1|0.172998|-0.236998|0.032000|0.182998|91.900054|0.662998|0.252998|0.267999|0.245000|1|
		InfoJugador[negrito][aModelo][toy] = 19057;
		InfoJugador[negrito][aHueso][toy] = 1;
		InfoJugador[negrito][aPosicionX][toy] = 0.172998;
		InfoJugador[negrito][aPosicionY][toy] = -0.236998;
		InfoJugador[negrito][aPosicionZ][toy] = 0.032000;
		InfoJugador[negrito][aRotacionX][toy] = 0.182998;
		InfoJugador[negrito][aRotacionY][toy] = 91.900054;
		InfoJugador[negrito][aRotacionZ][toy] = 0.662998;
		InfoJugador[negrito][aEscalaX][toy] = 0.252998;
		InfoJugador[negrito][aEscalaY][toy] = 0.267999;
		InfoJugador[negrito][aEscalaZ][toy] = 0.245000;
		}
	else if (tipo == 6){ //1550|1|0.172998|-0.176997|0.032000|0.182998|91.900054|-179.537002|0.593999|0.593998|0.643999|1|
		InfoJugador[negrito][aModelo][toy] = 1550;
		InfoJugador[negrito][aHueso][toy] = 1;
		InfoJugador[negrito][aPosicionX][toy] = 0.172998;
		InfoJugador[negrito][aPosicionY][toy] = -0.176997;
		InfoJugador[negrito][aPosicionZ][toy] = 0.032000;
		InfoJugador[negrito][aRotacionX][toy] = 0.182998;
		InfoJugador[negrito][aRotacionY][toy] = 91.900054;
		InfoJugador[negrito][aRotacionZ][toy] = -179.537002;
		InfoJugador[negrito][aEscalaX][toy] = 0.593999;
		InfoJugador[negrito][aEscalaY][toy] = 0.593998;
		InfoJugador[negrito][aEscalaZ][toy] = 0.643999;
		}
	else if (tipo == 7){ //19527|1|0.016999|-0.201998|0.032000|0.182998|91.900054|0.662998|0.284998|0.302999|0.313999|1|
		InfoJugador[negrito][aModelo][toy] = 19527;
		InfoJugador[negrito][aHueso][toy] = 1;
		InfoJugador[negrito][aPosicionX][toy] = 0.016999;
		InfoJugador[negrito][aPosicionY][toy] = -0.201998;
		InfoJugador[negrito][aPosicionZ][toy] = 0.032000;
		InfoJugador[negrito][aRotacionX][toy] = 0.182998;
		InfoJugador[negrito][aRotacionY][toy] = 91.900054;
		InfoJugador[negrito][aRotacionZ][toy] = 0.662998;
		InfoJugador[negrito][aEscalaX][toy] = 0.284998;
		InfoJugador[negrito][aEscalaY][toy] = 0.302999;
		InfoJugador[negrito][aEscalaZ][toy] = 0.313999;
		}
	else if (tipo == 8){ //19078|15|0.113998|0.006002|0.013999|0.182998|91.900054|167.162918|0.469999|0.480998|0.722999|1|
		InfoJugador[negrito][aModelo][toy] = 19078;
		InfoJugador[negrito][aHueso][toy] = 15;
		InfoJugador[negrito][aPosicionX][toy] = 0.113998;
		InfoJugador[negrito][aPosicionY][toy] = 0.006002;
		InfoJugador[negrito][aPosicionZ][toy] = 0.013999;
		InfoJugador[negrito][aRotacionX][toy] = 0.182998;
		InfoJugador[negrito][aRotacionY][toy] = 91.900054;
		InfoJugador[negrito][aRotacionZ][toy] = 167.162918;
		InfoJugador[negrito][aEscalaX][toy] = 0.469999;
		InfoJugador[negrito][aEscalaY][toy] = 0.480998;
		InfoJugador[negrito][aEscalaZ][toy] = 0.722999;
		}
	ActualizarToy(negrito, toy);
	SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFC900}has creado un toy para:'%s'", NombreRJugador(negrito));
	SendClientMessageEx(negrito, 0xccccccFF, "Info:{FFC900}%s ha craedo un toy para ti", NombreRJugador(playerid));
	format(string, sizeof string, "Administracion: %s ha creado un toy para: %s", NombreRJugador(playerid), NombreRJugador(negrito));
	MensajeAdmin(string);
	return 1;
}

CMD:crearnegocio(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Crearnegocio.");
	OnDuty
	new tipo, string[256];
	if (sscanf(params, "i", tipo))
	{
		_Mensaje(playerid, 3, "0", "/crearnegocio [tipo]");
		_Mensaje(playerid, 1, "1) 24-7 | 2) Ropa | 3) Restaurante | 4) Cluckin bell", "Tipos:");
		_Mensaje(playerid, 1, "5) Pizzeria | 6) Burger Shot | 7) Ammunation | 8) Peluqueria", "Tipos:");
		_Mensaje(playerid, 1, "9) Sex shop | 10) Gasolinera | 11) Electronica | 12) Bar", "Tipos:");
		_Mensaje(playerid, 1, "13) Ferreteria | 14) Alhambra | 15) Strip | 16) 24/7 Robable [Sin NPC]", "Tipos:");
		_Mensaje(playerid, 1, "17) Casino", "Tipos:");
		return 1;
	}
	if (tipo < 1 || tipo > 17) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Los negocios estan entre 1 - 17.");
	Loop(id, MAX_NEGOCIOS, 1) if (InfoNegocio[id][nTipo] == 0)
	{
		GetPlayerPos(playerid, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ]);
		GetPlayerFacingAngle(playerid, InfoNegocio[id][nEntradaR]);
		InfoNegocio[id][nTipo] = tipo;
		InfoNegocio[id][nSeguro] = 1;
		alm(InfoNegocio[id][nPropietario], "none");
		InfoNegocio[id][nProductos] = 1000;
		InfoNegocio[id][nVenta] = 0;
		InfoNegocio[id][nSalidaVW] = 300+id;
		if (tipo == 1) // 24/7
		{
			InfoNegocio[id][nSalidaX] = -27.3743;
			InfoNegocio[id][nSalidaY] = -57.7146;
			InfoNegocio[id][nSalidaZ] = 1003.5469;
			InfoNegocio[id][nSalidaR] = 357.5915;
			InfoNegocio[id][nPrecio] = 126020;
			InfoNegocio[id][nSalidaInt] = 6;
			alm(InfoNegocio[id][nNombre], "24-7");
		}
		else if (tipo == 2) // Ropa
		{
			InfoNegocio[id][nSalidaX] = 207.7245;
			InfoNegocio[id][nSalidaY] = -110.9889;
			InfoNegocio[id][nSalidaZ] = 1005.1328;
			InfoNegocio[id][nSalidaR] = 356.3849;
			InfoNegocio[id][nPrecio] = 148600;
			InfoNegocio[id][nSalidaInt] = 15;
			alm(InfoNegocio[id][nNombre], "Ropa");
		}
		else if (tipo == 3) // Restaurante
		{
			InfoNegocio[id][nSalidaX] = -794.9186;
			InfoNegocio[id][nSalidaY] = 489.2863;
			InfoNegocio[id][nSalidaZ] = 1376.1953;
			InfoNegocio[id][nSalidaR] = 0.8184;
			InfoNegocio[id][nPrecio] = 70870;
			InfoNegocio[id][nSalidaInt] = 1;
			alm(InfoNegocio[id][nNombre], "Restaurante");
		}
		else if (tipo == 4) // Cluckin bell
		{
			InfoNegocio[id][nSalidaX] = 364.9697;
			InfoNegocio[id][nSalidaY] = -11.2050;
			InfoNegocio[id][nSalidaZ] = 1001.8516;
			InfoNegocio[id][nSalidaR] = 356.3849;
			InfoNegocio[id][nPrecio] = 58870;
			InfoNegocio[id][nSalidaInt] = 9;
			alm(InfoNegocio[id][nNombre], "Cluckin bell");
		}
		else if (tipo == 5) // Pizzeria
		{
			InfoNegocio[id][nSalidaX] = 372.3343;
			InfoNegocio[id][nSalidaY] = -133.2180;
			InfoNegocio[id][nSalidaZ] = 1001.4922;
			InfoNegocio[id][nSalidaR] = 356.3849;
			InfoNegocio[id][nPrecio] = 62060;
			InfoNegocio[id][nSalidaInt] = 5;
			alm(InfoNegocio[id][nNombre], "Pizzeria");
		}
		else if (tipo == 6) // BurgerShot
		{
			InfoNegocio[id][nSalidaX] = 363.4130;
			InfoNegocio[id][nSalidaY] = -74.5787;
			InfoNegocio[id][nSalidaZ] = 1001.5078;
			InfoNegocio[id][nSalidaR] = 356.3849;
			InfoNegocio[id][nPrecio] = 48700;
			InfoNegocio[id][nSalidaInt] = 10;
			alm(InfoNegocio[id][nNombre], "Burger Shot");
		}
		else if (tipo == 7) // Ammu-Nation
		{
			InfoNegocio[id][nSalidaX] = 315.2409;
			InfoNegocio[id][nSalidaY] = -143.3522;
			InfoNegocio[id][nSalidaZ] = 999.6016;
			InfoNegocio[id][nSalidaR] = 355.6529;
			InfoNegocio[id][nPrecio] = 720860;
			InfoNegocio[id][nSalidaInt] = 7;
			alm(InfoNegocio[id][nNombre], "Ammunation");
		}
		else if (tipo == 8) // Peluqueria
		{
			InfoNegocio[id][nSalidaX] = 412.0487;
			InfoNegocio[id][nSalidaY] = -54.3948;
			InfoNegocio[id][nSalidaZ] = 1001.9000;
			InfoNegocio[id][nSalidaR] = 0.0000;
			InfoNegocio[id][nPrecio] = 45000;
			InfoNegocio[id][nSalidaInt] = 12;
			alm(InfoNegocio[id][nNombre], "Peluqueria");
		}
		else if (tipo == 9) // Sex Shop
		{
			InfoNegocio[id][nSalidaX] = -100.6073;
			InfoNegocio[id][nSalidaY] = -24.8283;
			InfoNegocio[id][nSalidaZ] = 1000.7188;
			InfoNegocio[id][nSalidaR] = 358.8331;
			InfoNegocio[id][nPrecio] = 32500;
			InfoNegocio[id][nSalidaInt] = 3;
			alm(InfoNegocio[id][nNombre], "Tienda Sexual");
		}
		else if (tipo == 10) // Gasolinera
		{
			InfoNegocio[id][nSalidaX] = -27.2924;
			InfoNegocio[id][nSalidaY] = -31.7512;
			InfoNegocio[id][nSalidaZ] = 1003.5573;
			InfoNegocio[id][nSalidaR] = 7.7609;
			InfoNegocio[id][nPrecio] = 57803;
			InfoNegocio[id][nSalidaInt] = 4;
			alm(InfoNegocio[id][nNombre], "Gasolinera");
		}
		else if (tipo == 11) // Electronica
		{
			InfoNegocio[id][nSalidaX] = 161.4084;
			InfoNegocio[id][nSalidaY] = -97.1046;
			InfoNegocio[id][nSalidaZ] = 1001.8047;
			InfoNegocio[id][nSalidaR] = 358.9875;
			InfoNegocio[id][nPrecio] = 246780;
			InfoNegocio[id][nSalidaInt] = 18;
			alm(InfoNegocio[id][nNombre], "Electronica");
		}
		else if (tipo == 12) // Bar
		{
			InfoNegocio[id][nSalidaX] = 501.8288;
			InfoNegocio[id][nSalidaY] = -67.5071;
			InfoNegocio[id][nSalidaZ] = 998.7578;
			InfoNegocio[id][nSalidaR] = 180.0000;
			InfoNegocio[id][nPrecio] = 77350;
			InfoNegocio[id][nSalidaInt] = 11;
			alm(InfoNegocio[id][nNombre], "Bar");
		}
		else if (tipo == 13) // Ferreteria
		{
			InfoNegocio[id][nSalidaX] = 296.8466;
			InfoNegocio[id][nSalidaY] = -111.8738;
			InfoNegocio[id][nSalidaZ] = 1001.5156;
			InfoNegocio[id][nSalidaR] = 13.0877;
			InfoNegocio[id][nPrecio] = 79750;
			InfoNegocio[id][nSalidaInt] = 6;
			alm(InfoNegocio[id][nNombre], "Ferreteria");
		}
		else if (tipo == 14) // Alhambra
		{
			InfoNegocio[id][nSalidaX] = 493.4698;
			InfoNegocio[id][nSalidaY] = -24.9232;
			InfoNegocio[id][nSalidaZ] = 1000.6719;
			InfoNegocio[id][nSalidaR] = 4.1157;
			InfoNegocio[id][nPrecio] = 420750;
			InfoNegocio[id][nSalidaInt] = 17;
			alm(InfoNegocio[id][nNombre], "Alhambra");
		}
		else if (tipo == 15) // Strip club
		{
			InfoNegocio[id][nSalidaX] = 1204.8970;
			InfoNegocio[id][nSalidaY] = -13.8423;
			InfoNegocio[id][nSalidaZ] = 1000.9219;
			InfoNegocio[id][nSalidaR] = 359.9443;
			InfoNegocio[id][nPrecio] = 250750;
			InfoNegocio[id][nSalidaInt] = 2;
			alm(InfoNegocio[id][nNombre], "Strip club");
		}
		else if (tipo == 16) // 24/7 robable
		{
			InfoNegocio[id][nSalidaX] = 1638.1288;
			InfoNegocio[id][nSalidaY] = 1623.1055;
			InfoNegocio[id][nSalidaZ] = 1160.8440;
			InfoNegocio[id][nSalidaR] = 180.0275;
			InfoNegocio[id][nPrecio] = 126202;
			InfoNegocio[id][nSalidaInt] = 6;
			alm(InfoNegocio[id][nNombre], "24/7");
			InfoNegocio[id][nTipo] = 18;
		}
		else if (tipo == 17) // Casino
        {
            InfoNegocio[id][nSalidaX] = 1133.2388;
            InfoNegocio[id][nSalidaY] = -15.3141;
            InfoNegocio[id][nSalidaZ] = 1000.6797;
            InfoNegocio[id][nSalidaR] = 4.4248;
            InfoNegocio[id][nPrecio] = 7210000;
            InfoNegocio[id][nSalidaInt] = 12;
            alm(InfoNegocio[id][nNombre], "Casino");
  }

            
		InfoNegocio[id][nTiempoDisponible] = -1;
		format(string, sizeof string, "Creo el negocio ID %d ($%s).", id, diner_coma(InfoNegocio[id][nPrecio]));
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 15);
		SendClientMessageEx(playerid, 0x90C3D4FF, "Negocio nuevo ID %d | Precio en $%d | Tipo: %s", id, InfoNegocio[id][nPrecio], InfoNegocio[id][nNombre]);
		LabelPickup_negocio(id, 0);
		LabelPickup_negocio1(id, 0);
		LabelPickup_negocio1(id, 1);
		LabelPickup_negocio1(id, 2);
		new que2ry[1000], query[1500];
		//opcion idsql ya creada.
		if (InfoNegocio[id][nID] != 0)
		{
			format(que2ry, sizeof que2ry, "UPDATE negocios SET Propietario = '%s', Nombre = '%s', Tipo = '%d', Seguro = '%d', Venta = '%d', EntradaX = '%f', EntradaY = '%f', EntradaZ = '%f', EntradaR = '%f', Productos = '%d',",
			InfoNegocio[id][nPropietario],
			InfoNegocio[id][nNombre],
			InfoNegocio[id][nTipo],
			InfoNegocio[id][nSeguro],
			InfoNegocio[id][nVenta],
			InfoNegocio[id][nEntradaX],
			InfoNegocio[id][nEntradaY],
			InfoNegocio[id][nEntradaZ],
			InfoNegocio[id][nEntradaR],
			InfoNegocio[id][nProductos]);
			mysql_format(DBngrp, query, sizeof query, "%s SalidaX = '%f', SalidaY = '%f', SalidaZ = '%f', SalidaR = '%f', SalidaInt = '%d', SalidaVW = '%d', Precio = '%d', TiempoDisponible = '%d' WHERE ID = '%d'",
			que2ry,
			InfoNegocio[id][nSalidaX],
			InfoNegocio[id][nSalidaY],
			InfoNegocio[id][nSalidaZ],
			InfoNegocio[id][nSalidaR],
			InfoNegocio[id][nSalidaInt],
			InfoNegocio[id][nSalidaVW],
			InfoNegocio[id][nPrecio],
			InfoNegocio[id][nTiempoDisponible],
			InfoNegocio[id][nID]);
			mysql_tquery(DBngrp, query);
			id = MAX_NEGOCIOS;
			return 1;
		}
		format(que2ry, sizeof que2ry, "INSERT INTO negocios (Propietario, Nombre, Tipo, Seguro, Venta, EntradaX, EntradaY, EntradaZ, EntradaR, Productos, SalidaX, SalidaY, SalidaZ, SalidaR, SalidaInt, SalidaVW, Precio, TiempoDisponible)");
		mysql_format(DBngrp, query, sizeof query, "%s VALUES ('%e', '%e', '%d', '%d',  '%d', '%f', '%f', '%f', '%f', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d')",
		que2ry,
		InfoNegocio[id][nPropietario],
		InfoNegocio[id][nNombre],
		InfoNegocio[id][nTipo],
		InfoNegocio[id][nSeguro],
		InfoNegocio[id][nVenta],
		InfoNegocio[id][nEntradaX],
		InfoNegocio[id][nEntradaY],
		InfoNegocio[id][nEntradaZ],
		InfoNegocio[id][nEntradaR],
		InfoNegocio[id][nProductos],
		InfoNegocio[id][nSalidaX],
		InfoNegocio[id][nSalidaY],
		InfoNegocio[id][nSalidaZ],
		InfoNegocio[id][nSalidaR],
		InfoNegocio[id][nSalidaInt],
		InfoNegocio[id][nSalidaVW],
		InfoNegocio[id][nPrecio],
		InfoNegocio[id][nTiempoDisponible]);
		mysql_tquery(DBngrp, query, "OnNegocioCreate", "i",	id);
		id = MAX_NEGOCIOS;
		return 1;
	}
	SendClientMessageEx(playerid, 0xBB0000FF, "Se alcanzo el maximo de negocios (%d)", MAX_NEGOCIOS);
	return 1;
}

forward OnNegocioCreate(cid);
public OnNegocioCreate(cid)
{
	InfoNegocio[cid][nID] = cache_insert_id();
	cache_unset_active();
	totalnegocios++;
    return 1;
}

CMD:borrarnegocio(playerid, params[])
{
	new id, query[1028];
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Borrarnegocio.");
	if (sscanf(params, "i", id)) return _Mensaje(playerid, 3, "0", "/borrarnegocio [negocio]");
	if (id < 1 || id > totalnegocios) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalnegocios);
	if (InfoNegocio[id][nTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de negocio no existe.", id);
	foreach(Player, p) if (IsPlayerConnectedEx(p) && LlavesNegocio(p, id))
	{
		SendClientMessageEx(p, 0xCCCC00FF, "Admin %s elimino tu negocio id: %d", InfoJugador[playerid][jNombre_Apellido], id);
	}
	alm(InfoNegocio[id][nNombre], "nada");
	alm(InfoNegocio[id][nPropietario], "none");
	InfoNegocio[id][nTipo] = 0;
	InfoNegocio[id][nSeguro] = 0;
	InfoNegocio[id][nVenta] = 0;
	InfoNegocio[id][nEntradaX] = 0.0;
	InfoNegocio[id][nEntradaY] = 0.0;
	InfoNegocio[id][nEntradaZ] = 0.0;
	InfoNegocio[id][nEntradaR] = 0.0;
	InfoNegocio[id][nSalidaX] = 0.0;
	InfoNegocio[id][nSalidaY] = 0.0;
	InfoNegocio[id][nSalidaZ] = 0.0;
	InfoNegocio[id][nSalidaR] = 0.0;
	InfoNegocio[id][nSalidaInt] = 0;
	InfoNegocio[id][nSalidaVW] = 0;
	InfoNegocio[id][nDinero] = 0;
	InfoNegocio[id][nProductos] = 0;
	InfoNegocio[id][nPrecio] = 0;
	alm(InfoNegocio[id][nCompartida1], "none");
	alm(InfoNegocio[id][nCompartida2], "none");
	alm(InfoNegocio[id][nCompartida3], "none");
    InfoNegocio[id][nTiempoDisponible] = -1;
	InfoNegocio[id][nActorX] = 0.0;
	InfoNegocio[id][nActorY] = 0.0;
	InfoNegocio[id][nActorZ] = 0.0;
	InfoNegocio[id][nActorR] = 0.0;
	no_exit_actor(id);
	mysql_format(DBngrp, query, sizeof query, "UPDATE negocios SET Nombre = '%e', EntradaX = 0.0, EntradaY = 0.0, EntradaZ = 0.0, EntradaR = 0.0, SalidaX = 0.0, SalidaY = 0.0, SalidaZ = 0.0, SalidaR = 0.0, SalidaInt = 0, Productos = 0 WHERE ID = '%d'", InfoNegocio[id][nNombre], InfoNegocio[id][nID]);
	mysql_tquery(DBngrp, query);
	mysql_format(DBngrp, query, sizeof query, "UPDATE negocios SET Propietario = '%e', Dinero = 0, SalidaVW = 0, Precio = 0, Tipo = 0, TiempoDisponible = -1, Compartida1 = '%e', Compartida2 = '%e', Compartida3 = '%e', Seguro = 0, Venta = 0 WHERE ID = '%d'", InfoNegocio[id][nPropietario], InfoNegocio[id][nCompartida1], InfoNegocio[id][nCompartida2], InfoNegocio[id][nCompartida3], InfoNegocio[id][nID]);
	mysql_tquery(DBngrp, query);
	mysql_format(DBngrp, query, sizeof query, "UPDATE negocios SET ActorX = 0.0, ActorY = 0.0, ActorZ = 0.0, ActorR = 0.0, ActorSkin = 0 WHERE ID = '%d'", InfoNegocio[id][nID]);
	mysql_tquery(DBngrp, query);
	return 1;
}

CMD:nseguro(playerid)
{
	new id = -1;
	Loop(x, totalnegocios, 1)
	{
		if ((IsPlayerInRangeOfPoint(playerid, 2.0, InfoNegocio[x][nEntradaX], InfoNegocio[x][nEntradaY], InfoNegocio[x][nEntradaZ]) && InfoJugador[playerid][jInterior] == 0 && InfoJugador[playerid][jVirtualWorld] == 0) ||
		(IsPlayerInRangeOfPoint(playerid, 5.0, InfoNegocio[x][nSalidaX], InfoNegocio[x][nSalidaY], InfoNegocio[x][nSalidaZ]) && InfoNegocio[x][nSalidaInt] == InfoJugador[playerid][jInterior] && InfoNegocio[x][nSalidaVW] == InfoJugador[playerid][jVirtualWorld]) )
		{
			id = x;
		}
	}
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en la entrada o salida de algun negocio.");
	if (PermisosNegocio(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de este negocio.");
	if (InfoNegocio[id][nSeguro] == 0)
	{
		InfoNegocio[id][nSeguro] = 1;
		AccionesRol(playerid, 0, "saca sus llaves de negocio y lo abre.");
		GameTextForPlayer(playerid, "~g~Negocio abierto", 3500, 1);
	}
	else
	{
		InfoNegocio[id][nSeguro] = 0;
		AccionesRol(playerid, 0, "saca sus llaves de negocio y lo cierra.");
		GameTextForPlayer(playerid, "~r~Negocio Cerrado", 3500, 1);
	}
	guardar_int_mysql("negocios", "Seguro", InfoNegocio[id][nID], InfoNegocio[id][nSeguro]);
    return 1;
}

CMD:dados(playerid)
{
    new num = random(10) + 2, string[128];
    if(InfoJugador[playerid][jManoDerecha] != 83 && InfoJugador[playerid][jManoIzquierda] != 83){ ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes unos dados en ninguna mano."); return 1;}
    if(!CheckTimer(10, IntentarD[playerid])) {
        AccionesRol(playerid, 1, "arrojo sus dados.");
        format(string, sizeof string, "[**%d | %s] Ha salido la cantidad de %d en los dados que tiro.", playerid, NombreJugador(playerid), num);
        ProxDetector(25.0, playerid, string, 0x9EC73DAA, 0x9EC73DAA, 0x9EC73DAA, 0x9EC73DAA, 0x9EC73DAA);
        IntentarD[playerid] = gettime();
    } else {
        format(string, 144, "Faltan %d segundos para que puedas usar este comando.", CheckTimer(10, IntentarD[playerid]));
        ShowPlayerFooter(playerid, string);
    }
    return 1;
}
CMD:moneda(playerid)
{
    new coin = random(2) + 1, string[90], coinname[10];
    if (coin == 1) coinname = "cara";
    else coinname = "cruz";
    format(string, sizeof string, "%s lanza una moneda al aire y cae %s", NombreJugador(playerid), coinname);
    ProxDetector(10.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
    return 1;
}

CMD:multar(playerid, params[])
{
	new string[256];
	if (!Es_Banda(playerid, 1)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD.", 2000);
	if (InfoJugador[playerid][jDutyPD] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en servicio.");
	if (sscanf(params, "dds[128]", params[0], params[1], params[2])) return _Mensaje(playerid, 3, "0", "/multar [id jugador] [precio] [razon]");
	if (params[1] < 0 || params[1] > 10000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El maximo de multa son 10,000$");
	if (!IsPlayerConnected(params[0])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Esa ID es invalida.");
	if (FacturaMulta[playerid] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este jugador ya tiene una peticion pendiente");
	if (!CercaDelWeon(8.0, playerid, params[0])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Muy lejos de el jugador.");
	if (GetPlayerCash(params[0]) < params[1])
	{
		SendClientMessageEx(playerid, 0xebebebff, "El infractor no tiene %d$ para pagar la multa.", params[1]);
		return 1;
	}
	_Mensaje(params[0], 4, "ffffff", "");
	_Mensaje(params[0], 4, "00c200", "Estado de San Andreas");
	format(string, sizeof string, "Demandante:{ffffff} %s", NombreJugador(playerid));
	_Mensaje(params[0], 4, "00A2ff", string);
	format(string, sizeof string, "Infraccion:{ffffff} %s", params[2]);
	_Mensaje(params[0], 4, "00A2ff", string);
	format(string, sizeof string, "Multa:{ffffff} %d$", params[1]);
	_Mensaje(params[0], 4, "00A2ff", string);
	_Mensaje(params[0], 4, "ffffff", "");
	_Mensaje(playerid, 4, "ffffff", "");
	_Mensaje(playerid, 2, "0", "Espera la respuesta del sujeto");
	_Mensaje(params[0], 2, "0", "Te han multado. Utilize [/aceptar o /cancelar] para pagar la multa.");
	MultaOfrecer[params[0]] = playerid;
	MultaPrecio[params[0]] = params[1];
	FacturaMulta[params[0]] = 1;
	return 1;
}

_D2negocio(playerid, Float: distancia) {
	if (_enPos(playerid, distancia, -27.3743,-57.7146,1003.5469)) return 1; //24/7
	else if (_enPos(playerid, distancia, -794.9186,489.2863,1376.1953)) return 1; //restaurante
	else if (_enPos(playerid, distancia, 364.9697,-11.2050,1001.8516)) return 1; //cluckin bell
	else if (_enPos(playerid, distancia, 372.3343,-133.2180,1001.4922)) return 1; //Pizzeria
	else if (_enPos(playerid, distancia, 363.4130,-74.5787,1001.5078)) return 1; //Burger Shot
	else if (_enPos(playerid, distancia, 315.2409,-143.3522,999.6016)) return 1; //Ammunation
	else if (_enPos(playerid, distancia, 227.4995,-8.1626,1002.2109)) return 1; //Peluqueria
	else if (_enPos(playerid, distancia, -100.6073,-24.8283,1000.7188)) return 1; //Tienda Sexual
	else if (_enPos(playerid, distancia, -27.2924,-31.7512,1003.5573)) return 1; //Gasolinera
	else if (_enPos(playerid, distancia, 161.4084,-97.1046,1001.8047)) return 1; //Electronica
	else if (_enPos(playerid, distancia, 501.8288,-67.5071,998.7578)) return 1; //Bar
	else if (_enPos(playerid, distancia, 296.8466,-111.8738,1001.5156)) return 1; //Ferreteria
	else if (_enPos(playerid, distancia, 493.4698,-24.9232,1000.6719)) return 1; //Alhambra
	else if (_enPos(playerid, distancia, 1204.8970,-13.8423,1000.9219)) return 1; //Strip club
	else if (_enPos(playerid, distancia, 1212.0414,-25.8775,1000.9531)) return 1; //Club private
    return 0;
}

_Dnegocio(playerid, Float: distancia)
{
	if (_enPos(playerid, distancia, -23.4566, -55.6323, 1003.5469)) return 1; // 24/7
	else if (_enPos(playerid, distancia, 207.4873, -100.3286, 1005.2578)) return 1; // binco
	else if (_enPos(playerid, distancia, -785.9495, 500.0739, 1371.7422)) return 1; // restaurante
	else if (_enPos(playerid, distancia, 371.4320, -6.0194, 1001.8589)) return 1; // cluckin bell
	else if (_enPos(playerid, distancia, 375.2599, -118.8117, 1001.4995)) return 1; // pizzeriia
	else if (_enPos(playerid, distancia, 377.3137, -67.4423, 1001.5078)) return 1; // habmurer
	else if (_enPos(playerid, distancia, 308.3979, -141.4581, 999.6016)) return 1; // ammu
	else if (_enPos(playerid, distancia, 415.1097, -51.4637, 1001.9000)) return 1; //peluqueria
	else if (_enPos(playerid, distancia, -103.8922, -22.6771, 1000.7188)) return 1; // sex shop
	else if (_enPos(playerid, distancia, -30.7083, -29.6858, 1003.5078)) return 1; // gasolinera
	else if (_enPos(playerid, distancia, 161.3464, -83.5198, 1001.8989)) return 1; // electronica
	else if (_enPos(playerid, distancia, 497.8823, -75.9014, 998.7012)) return 1; // bar
	else if (_enPos(playerid, distancia, 449.7225, -83.9301, 999.5547)) return 1; // restaurante 2
	else if (_enPos(playerid, distancia, 290.2224, -109.6350, 1001.5685)) return 1; // Ferreteria
	else if (_enPos(playerid, distancia, 499.9653,-19.0419,1000.6719)) return 1; // Alhambra
	else if (_enPos(playerid, distancia, 1214.8792,-13.2081,1000.9219)) return 1; // Strip club
	else if (_enPos(playerid, distancia, 1207.2340,-30.3012,1000.9531)) return 1; // Club private
	else if (_enPos(playerid, distancia,1643.5167,1613.2773,1160.8252)) return 1; // 24/7 robable
	else if (_enPos(playerid, distancia,204.4182, -159.3408, 1000.5279)) return 1; //Didier sachs
	else if (_enPos(playerid, distancia,207.0711, -129.2703, 1003.5237)) return 1; //Prolaps
	else if (_enPos(playerid, distancia,203.7999, -43.2282, 1001.8210)) return 1; //sub urban
	else if (_enPos(playerid, distancia,206.0044, -8.5188, 1001.2266)) return 1; //victim
	return 0;
}

CMD:crearfiesta(playerid, params[])
{
	new string[210];
	if(InfoJugador[playerid][jAdmin] < 11 && InfoJugador[playerid][jEncargado][5] < 1) return 0;
	if(FiestaParty == 0)
	{
	    MapeoFiesta[0] = CreateDynamicObject(18783, 181.33926, -1821.18726, 3.28380,   0.00000, 0.00000, 0.00000);
		MapeoFiesta[1] = CreateDynamicObject(18838, 188.63715, -1799.55835, 2.46490,   0.00000, 0.00000, -90.00000);
		MapeoFiesta[2] = CreateDynamicObject(18838, 189.03990, -1842.42139, 2.46490,   0.00000, 0.00000, 91.00000);
		MapeoFiesta[3] = CreateDynamicObject(19338, 104.24027, -1878.76526, 48.39170,   0.00000, 0.00000, 0.00000);
		MapeoFiesta[4] = CreateDynamicObject(19336, 113.41770, -1749.77124, 49.08450,   0.00000, 0.00000, 0.00000);
		MapeoFiesta[5] = CreateDynamicObject(19608, 186.98090, -1821.07813, 5.77000,   0.00000, 0.00000, 90.00000);
		MapeoFiesta[6] = CreateDynamicObject(14391, 188.14549, -1820.85669, 6.62670,   0.00000, 0.00000, 180.00000);
		MapeoFiesta[7] = CreateDynamicObject(11544, 172.94330, -1815.59814, 4.66310,   0.00000, 0.00000, 270.00000);
		MapeoFiesta[8] = CreateDynamicObject(643, 174.44850, -1826.46423, 6.28760,   0.00000, 0.00000, 0.00000);
		MapeoFiesta[9] = CreateDynamicObject(2748, 177.77960, -1812.53394, 6.28350,   0.00000, 0.00000, 0.00000);
		MapeoFiesta[10] = CreateDynamicObject(2748, 180.28868, -1812.58972, 6.28350,   0.00000, 0.00000, 0.00000);
		MapeoFiesta[11] = CreateDynamicObject(2748, 175.17203, -1812.50574, 6.28350,   0.00000, 0.00000, 0.00000);
		MapeoFiesta[12] = CreateDynamicObject(19880, 189.09923, -1821.08887, 6.88730,   0.00000, 0.00000, -90.00000);
		if(IDJugadorDJ == INVALID_PLAYER_ID)
		{
			format(string, sizeof string, "North America Roleplay Oficial - Fiesta\n{FFFFFF}Necesitamos un DJ ?te activas?\n\n{FFFF00}/DJFiesta.");
			DJ3DText = CreateDynamic3DTextLabel(string, 0xFFB600FF, 186.4901,-1820.9414,6.8169, 8.0);
		}
		format(string, sizeof string, "Administracion: %s(%d) habilito la fiesta dinamica en la playa [Santa Maria Beach].", NombreRJugador(playerid), playerid);
		MensajeAdmin(string);
		format(string, sizeof string, "[OOC] %s %s[%d]: Habilitamos la fiesta en la playa ?Ven te Esperamos!", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid), playerid);
	    SendClientMessageToAll(0xFFB600FF, string);
	    FiestaParty = 1;
	}
	else
	{
	    for(new i = 0; i < 13; i++) if (MapeoFiesta[i] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(MapeoFiesta[i]);
			MapeoFiesta[i] = INVALID_STREAMER_ID;
		}
	    if (IsValidDynamic3DTextLabel(DJ3DText))
		{
			DestroyDynamic3DTextLabel(DJ3DText);
			DJ3DText = Text3D:INVALID_3DTEXT_ID;
		}
	    format(string, sizeof string, "Administracion: %s(%d) retiro la fiesta dinamica en la playa [Santa Maria Beach].", NombreRJugador(playerid), playerid);
		MensajeAdmin(string);
		format(string, sizeof string, "[OOC] %s %s[%d]: La fiesta termino, gracias por participar!", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid), playerid);
	    SendClientMessageToAll(0xFFB600FF, string);
	    FiestaParty = 0;
	}
	return 1;
}

CMD:djfiesta(playerid)
{
	new string[210];
	if(FiestaParty == 0) return 1;
	if (_enPos(playerid,1.0,186.4901,-1820.9414,6.8169))
	{
		if(IDJugadorDJ == INVALID_PLAYER_ID)
		{
			format(string, sizeof string, "North America Roleplay Oficial - Fiesta\n{FFFFFF}DJ: {FFFF00}%s", NombreRJugador(playerid));
			UpdateDynamic3DTextLabelText(Text3D: DJ3DText, 0xFFB600FF, string);
			format(string, sizeof string, "[OOC] North America Oficial[101]: La fiesta empezo nuestro DJ es %s ?Activate con el en Santa Maria Beach!", NombreRJugador(playerid));
			SendClientMessageToAll(0xFFB600FF, string);
			IDJugadorDJ = playerid;
			format(string, sizeof string, "Info: {FFFFFF}DJ North America Oficial, tus comandos son /equipofiesta - inicias la sintonia.");
			SendClientMessage(playerid, 0xccccccFF, string);
			format(string, sizeof string, "Info: {FFFFFF}/encenderfiesta - abres el dialogo para interactuar con la consola.");
			SendClientMessage(playerid, 0xccccccFF, string);
			format(string, sizeof string, "Info: {FFFFFF}/djvoz - podras hablar a todo el servidor mientras estes en sintonia.");
			SendClientMessage(playerid, 0xccccccFF, string);
			format(string, sizeof string, "Info: {FFFFFF}/dejarfiesta - terminas tu sintonia y abandonas la plataforma.");
			SendClientMessage(playerid, 0xccccccFF, string);
		}
		else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya tenemos un DJ activo en la fiesta, espera otro intento.");
	}
	return 1;
}

CMD:expulsardj(playerid, params[])
{
	new string[210];
	if(InfoJugador[playerid][jAdmin] < 6  && InfoJugador[playerid][jEncargado][5] < 1) return 0;
	if(FiestaParty == 1)
	{
		if(IDJugadorDJ >= 0)
		{
			format(string, sizeof string, "[OOC] North America Oficial[101]: Necesitamos otro DJ, ?quieres activarte?, ven a Santa Maria Beach!");
			SendClientMessageToAll(0xFFB600FF, string);
			format(string, sizeof string, "North America Roleplay Oficial - Fiesta\n{FFFFFF}Necesitamos un DJ ?te activas?\n\n{FFFF00}/DJFiesta.");
			UpdateDynamic3DTextLabelText(Text3D: DJ3DText, 0xFFB600FF, string);
			IDJugadorDJ = INVALID_PLAYER_ID;
		}
		else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tenemos un DJ activo, espera.");
	}
	return 1;
}

CMD:dejarfiesta(playerid, params[])
{
	new string[210];
    if(FiestaParty == 1)
	{
		if(IDJugadorDJ == playerid)
		{
		    if (!GetPVarInt(playerid, "PlacedParty")) { return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres el DJ."); }
		    if (_enPos(playerid, 3.0, GetPVarFloat(playerid, "PartyX"), GetPVarFloat(playerid, "PartyY"), GetPVarFloat(playerid, "PartyZ")))
			{
		    	foreach(Player, i) {
		        	if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "PartyArea"))) {
		            	StopStream(i);
		        	}
		    	}
		    	DeletePVar(playerid, "PartyArea");
		    	DeletePVar(playerid, "PartyX");
		    	DeletePVar(playerid, "PartyY");
		    	DeletePVar(playerid, "PartyZ");
		    	DeletePVar(playerid, "PartyInt");
		    	DeletePVar(playerid, "PartyVW");
		    	DeletePVar(playerid, "PartyStation");
		    	DestroyDynamicPickup(GetPVarInt(playerid, "PlacedParty"));
		    	DeletePVar(playerid, "PlacedParty");
		    	_Mensaje(playerid, 2, "0", "Terminaste tu tiempo como DJ, gracias por participar.");
		    	format(string, sizeof string, "[OOC] North America Oficial[101]: Necesitamos otro DJ, ?quieres activarte?, ven a Santa Maria Beach!");
				SendClientMessageToAll(0xFFB600FF, string);
				format(string, sizeof string, "North America Roleplay Oficial - Fiesta\n{FFFFFF}Necesitamos un DJ ?te activas?\n\n{FFFF00}/DJFiesta.");
				UpdateDynamic3DTextLabelText(Text3D: DJ3DText, 0xFFB600FF, string);
				IDJugadorDJ = INVALID_PLAYER_ID;
			}
		}
    }
    return 1;
}

CMD:equipofiesta(playerid, params[])
{
	new string[210];
    if(FiestaParty == 0) return 1;
    if(IDJugadorDJ == playerid)
    {
	    if (_enPos(playerid,1.0,186.4901,-1820.9414,6.8169))
		{
	        new Float: BBCoord[4];
	        GetPlayerPos(playerid, BBCoord[0], BBCoord[1], BBCoord[2]);
	        GetPlayerFacingAngle(playerid, BBCoord[3]);
	        SetPVarFloat(playerid, "PartyX", BBCoord[0]);
	        SetPVarFloat(playerid, "PartyY", BBCoord[1]);
	        SetPVarFloat(playerid, "PartyZ", BBCoord[2]);
	        BBCoord[0] += (2 * floatsin(-BBCoord[3], degrees));
	        BBCoord[1] += (2 * floatcos(-BBCoord[3], degrees));
	        BBCoord[2] -= 1.0;
	        if (GetPVarInt(playerid, "PlacedParty")) return _Mensaje(playerid, 2, "0", "Pide a un administrador que te saque los permisos de DJ.");
	        foreach(Player, i) {
	            if (GetPVarType(i, "PlacedParty"))
				{
	                if (_enPos(playerid, 200.0, GetPVarFloat(i, "PartyX"), GetPVarFloat(i, "PartyY"), GetPVarFloat(i, "PartyZ"))) {
	                    ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes colocar tu equipo sonido aqui, ya hay una colocada cerca de donde estas.");
	                    return 1;
	                }
	            }
	        }
	        SetPVarInt(playerid, "PlacedParty", CreateDynamicPickup(1239, 23, BBCoord[0], BBCoord[1], BBCoord[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)));
	        SetPVarInt(playerid, "PartyArea", CreateDynamicSphere(BBCoord[0], BBCoord[1], BBCoord[2], 200.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)));
	        SetPVarInt(playerid, "PartyInt", GetPlayerInterior(playerid));
	        SetPVarInt(playerid, "PartyVW", GetPlayerVirtualWorld(playerid));
	        format(string, sizeof string, "Info: {FFFFFF}Muy bien, iniciaste la transmision a todo el publico.");
	        SendClientMessage(playerid, 0xccccccFF, string);
	    }
	}
    return 1;
}

CMD:encenderfiesta(playerid, params[])
{
	if (GetPVarType(playerid, "PlacedParty"))
	{
   		if (_enPos(playerid, 3.0, GetPVarFloat(playerid, "PartyX"), GetPVarFloat(playerid, "PartyY"), GetPVarFloat(playerid, "PartyZ"))) {
     		ShowPlayerDialog(playerid, 5102, DIALOG_STYLE_LIST, "{D6E1EB}Equipo de sonido", "{F50000}Detener musica{FFFFFF}\nURL - Internet", "Continuar", "Salir");
       	} else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas cerca de tu Equipo Sonido.");
	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No has colocado ningun equipo sonido.");
    return 1;
}

CMD:djvoz(playerid, params[])
{
	new string[210];
    if(FiestaParty == 0) return 1;
    if (isnull(params)) return _Mensaje(playerid, 3, "0", "/djvoz [texto]");
    if(IDJugadorDJ == playerid)
    {
     	if (_enPos(playerid,1.0,186.4901,-1820.9414,6.8169))
		{
            format(string, sizeof string, "[OOC] DJ %s[%d]: %s", NombreRJugador(playerid), playerid, params);
			SendClientMessageToAll(0xFFB600FF, string);
		}
	}
	return 1;
}

CMD:embargar(playerid)
{
	if (!Es_Banda(playerid, 1)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD.", 2000);
	if (!_enPos(playerid,100,1656.1588,-1807.2570,13.5467)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en la zona de embargos (deposito).");
	if (!IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas dentro de un vehiculo.");
	new vehicleid = GetPlayerVehicleID(playerid);
	new id = verificar_id_vehiculo(vehicleid), string[190], query[2056];
	if (id == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo no figura ningun propietario.");
	if (InfoVehiculo[id][vMulta] <= 49) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Para embargar el vehiculo, debe contener por lo menos una multa de 50$.");
	GetVehiclePos(vehicleid, InfoVehiculo[id][vPosicionX], InfoVehiculo[id][vPosicionY], InfoVehiculo[id][vPosicionZ]);
	GetVehicleZAngle(vehicleid, InfoVehiculo[id][vPosicionR]);
	GetVehicleHealth(vehicleid, InfoVehiculo[id][vVida]);
	GetVehicleDamageStatus(vehicleid, InfoVehiculo[id][vDanioSuperficie], InfoVehiculo[id][vDanioPuertas], InfoVehiculo[id][vDanioLuces], InfoVehiculo[id][vDanioRuedas]);
	InfoVehiculo[id][vGasolina] = GasolinaInicialVeh[vehicleid];
	InfoVehiculo[id][vVirtualWorld] = GetVehicleVirtualWorld(vehicleid);
	InfoVehiculo[id][vInterior] = GetVehicleInterior(vehicleid);
	InfoVehiculo[id][vEmbargo] = 1;
	if (InfoVehiculo[id][vModeloNeon] != 0 && InfoVehiculo[id][vOnNeon] != 0)
	{
		Delete_Neon(id);
	}
	DestroyVehicle(vehicleid);
	mysql_format(DBngrp, query, sizeof query, "UPDATE vehiculos SET Embargo = 1, PosicionX = '%f', PosicionY = '%f', PosicionZ = '%f', PosicionR = '%f', Interior = '%d', VirtualWorld = '%d', Vida = '%f', DanioSuperficie = '%d', DanioPuertas = '%d', DanioLuces = '%d', DanioRuedas = '%d', Gasolina = '%d' WHERE ID = '%d'",
	InfoVehiculo[id][vPosicionX], InfoVehiculo[id][vPosicionY], InfoVehiculo[id][vPosicionZ], InfoVehiculo[id][vPosicionR], InfoVehiculo[id][vInterior], InfoVehiculo[id][vVirtualWorld],
	InfoVehiculo[id][vVida], InfoVehiculo[id][vDanioSuperficie], InfoVehiculo[id][vDanioPuertas], InfoVehiculo[id][vDanioLuces], InfoVehiculo[id][vDanioRuedas], InfoVehiculo[id][vGasolina], InfoVehiculo[id][vID]);
	mysql_tquery(DBngrp, query);
	SendClientMessageEx(playerid, 0x33CCFFFF, "Confiscaste el %s de %s.", GetNameVehicle(InfoVehiculo[id][vModelo]), InfoVehiculo[id][vPropietario]);
	format(string, sizeof string, "CENTRAL: %s ha confiscado el vehiculo de %s - Modelo %s (No pago $%i de multa).", NombreJugador(playerid), InfoVehiculo[id][vPropietario], GetNameVehicle(InfoVehiculo[id][vModelo]), InfoVehiculo[id][vMulta]);
	SendRadioFaction(1, C_COLORRADIO, string);
	InfoVehiculo[id][vDL] = 0;
	InfoVehiculo[id][vSpawned] = 0;
	return 1;
}

CMD:licencia(playerid)
{
	if(!_enPos(playerid, 4.0, -2033.43,-117.526,1035.17)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en el Centro de UBER.");
	Dialog_Show(playerid, ShowLicenciaUBER, DIALOG_STYLE_MSGBOX, "{5AB6A4}UBER {FFFFFF}- Compra de Licencia", "{FFFFFF}Bienvenido al {FFFF00}contrato {ffffff}de UBER, necesitas una licencia\n\nAqu? puedes adquiriarla y podr?s trabajar en nombre de la franquicia.\n\nCosto de la licencia: {1EB032}$90{FFFFFF}.", "Aceptar", "Cancelar");
	return 1;
}

Dialog:ShowLicenciaUBER(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
    if(response)
    {
        if (InfoJugador[playerid][jLicencias][6] == 1)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya posees una licencia de Uber.");
		if (GetPlayerCash(playerid) < 90) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar esta licencia de Uber.");
		GivePlayerCash(playerid, -90, "licencia de uber");
		InfoJugador[playerid][jLicencias][6] = 1;
		guardar_int_mysql("cuentas", "Licencias7", InfoJugador[playerid][jID], 1);
		SendClientMessageEx(playerid, 0xEBEB00FF, "Obtuviste una licencia de uber por el costo de 90$.");
	}
	return 1;
}


CMD:ayuntamiento(playerid)
{
    if (!_enPos(playerid, 3.0, 362.0124, 173.3058, 1008.3050)) return (playerid);
	Dialog_Show(playerid, ShowAyuntamiento, DIALOG_STYLE_LIST, "Ayuntamiento", "Documento\nLicencias\nMultas\nInformacion de servicios\nDivorciarse", "Continuar", "Salir");
	return 1;
}

Dialog:ShowAyuntamiento(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (InfoJugador[playerid][jDocumento] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya tienes un documento registrado en el estado de North America Oficial.");
			new documento = Random(100000, 499999);
			InfoJugador[playerid][jDocumento] = documento;
			guardar_int_mysql("cuentas", "Documento", InfoJugador[playerid][jID], InfoJugador[playerid][jDocumento]);
			SendClientMessageEx(playerid, 0xEBEB00FF, "Acabas de obtener un documento el cual te identifica como ciudadano, numero %d.", documento);
			GivePlayerCash(playerid, -10, "documento legal");
			DineroEstado += 10;
		}
		case 1: Dialog_Show(playerid, ShowBuyLicense, DIALOG_STYLE_LIST, "{D6E1EB}Centro de Licencias", "Conducir ($100)\nNavegacion ($400)\nVuelo ($650)\nCamionero ($180)", "Continuar", "Volver");
		case 2:
		{
			if (InfoJugador[playerid][jLicencias][1] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Una licencia de conducir valida es necesaria para liberar su vehiculo del deposito municipal.");
			new dialog[3084], gformat[370], multad, iCount = 0;
			Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vModelo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoVehiculo[id][vPropietario], true) == 0 && InfoVehiculo[id][vFamilia] == 0)
			{
				if (InfoVehiculo[id][vEmbargo] != 0) format(gformat, sizeof gformat, "{FF0000}%s {C0C0C0}(embargado) (multa: $%d)\n", GetNameVehicle(InfoVehiculo[id][vModelo]), InfoVehiculo[id][vMulta] + (InfoJugador[playerid][jNivel] * 3)),multad++;
				else
				{
				    new multita[128] = " ";
				    if (InfoVehiculo[id][vMulta] != 0) format(multita, sizeof multita, "(multa: $%d)", InfoVehiculo[id][vMulta]),multad++;
					if (InfoVehiculo[id][vSpawned] != 0)
					{
						format(gformat, sizeof gformat, "{FF0000}%s {C0C0C0}(%d) %s\n", GetNameVehicle(InfoVehiculo[id][vModelo]), InfoVehiculo[id][vDL], multita);
					}
					else format(gformat, sizeof gformat, "{FF0000}%s {C0C0C0}(oculto) %s\n", GetNameVehicle(InfoVehiculo[id][vModelo]), multita);
				}
				strcat(dialog, gformat);
				//conteo
				new gformat2[64];
				format(gformat2, sizeof gformat2, "vehmultita%d", iCount);
				SetPVarInt(playerid, gformat2, id);
				iCount++;
			}
			if (iCount == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes ningun vehiculo a tu nombre.");
			if (multad == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes ningun vehiculo embargado o con multa.");
			Dialog_Show(playerid, ShowMultas, DIALOG_STYLE_LIST, "Mis vehiculos", dialog, "Continuar", "Salir");
		}
		case 3:
		{
			new casai = 0, negi = 0, vehi = 0;
			//casas
			new housesamount = CountCasas(playerid);
			if (housesamount != 0) casai += 50*housesamount;
			//negocios
			new businessamount = CountNegocios(playerid);
			if (businessamount != 0) negi += 100*businessamount;
			//vehiculos
			new carsamount = VehicleCount(playerid);
			if (carsamount != 0) vehi += 25*carsamount;
			//info
			new coordsstring[300], DialogStatus[3000];
			format(coordsstring, sizeof coordsstring, "\n{ffffff}•{D6E1EB} Viviendas:\n{ff0000}%d${ffffff} - pago de agua/luz\n\n", casai); strcat(DialogStatus, coordsstring);
			format(coordsstring, sizeof coordsstring, "{ffffff}•{D6E1EB} Locales:\n{ff0000}%d${ffffff} - pago de agua/luz\n\n", negi); strcat(DialogStatus, coordsstring);
			format(coordsstring, sizeof coordsstring, "{ffffff}•{D6E1EB} Vehiculos:\n{ff0000}%d${ffffff} - impuestos\n\n", vehi); strcat(DialogStatus, coordsstring);
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Tus impuestos", DialogStatus, "Cerrar", "");
		}
		case 4:
		{
             if(!response) return 1;
         	 if(InfoJugador[playerid][jCasado] == 0) return ShowInfoForPlayer(playerid, "No estás casado.", 2000);
	         if(GetPlayerCash(playerid) < 100000) return ShowInfoForPlayer(playerid, "No tienes dinero suficiente.", 2000);
	         new playerid2 = -1, string[210];
	         foreach(Player, juegador) if (IsPlayerConnectedEx(InfoJugador[playerid][jMatrimonio])) { playerid2 = juegador; }
	         if(IsPlayerConnectedEx(playerid2))
	       {
		      InfoJugador[playerid2][jCasado] = 0;
       	      guardar_int_mysql("cuentas", "Casado", InfoJugador[playerid2][jID], InfoJugador[playerid2][jCasado]);
		      alm(InfoJugador[playerid2][jMatrimonio], "Ninguno");
		      guardar_string_mysql("cuentas", "Matrimonio", InfoJugador[playerid2][jID], InfoJugador[playerid2][jMatrimonio]);
		      SendClientMessageEx(playerid2, 0xFFFF00FF, "* Tu matriminio con %s fue disuelto por el Ayuntamiento de Los Santos.", InfoJugador[playerid][jNombre_Apellido]);
	       }
	         new gformat[210];
	         mysql_format(DBngrp, gformat, sizeof gformat, "UPDATE cuentas SET Matrimonio = 'Ninguno', Casado = '0' WHERE Nombre_Apellido = '%e'", InfoJugador[playerid][jMatrimonio]);
	         mysql_tquery(DBngrp, gformat);
	         SendClientMessageEx(playerid, 0xFFFF00FF, "* Tu matrimonio con %s fue disuelto por el Ayuntamiento de Los Santos.", InfoJugador[playerid][jMatrimonio]);
	         SendClientMessageEx(playerid, 0xccccccFF, "** Costo del juzgado $100,000");
             format(string, sizeof string, "[CNN] %s y %s Se han divorsiado.", InfoJugador[playerid][jNombre_Apellido], InfoJugador[playerid][jMatrimonio]);
	         _MensajeSAN(0x00DC76FF, string);
	         InfoJugador[playerid][jCasado] = 0;
	         guardar_int_mysql("cuentas", "Casado", InfoJugador[playerid][jID], InfoJugador[playerid][jCasado]);
	         alm(InfoJugador[playerid][jMatrimonio], "Ninguno");
	         guardar_string_mysql("cuentas", "Matrimonio", InfoJugador[playerid][jID], InfoJugador[playerid][jMatrimonio]);
	         GivePlayerCash(playerid, -100000, "divorcio (ayuntamiento)");
		}
	}
	return 1;
}

VehicleCount(playerid)
{
	new cars = 0;
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vModelo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoVehiculo[id][vPropietario], true) == 0 && InfoVehiculo[id][vFamilia] == 0)
	{ cars++; }
	return cars;
}

Dialog:ShowBuyLicense(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_ayuntamiento(playerid);
	switch (listitem)
	{
		case 0:
		{
			if (InfoJugador[playerid][jLicencias][1] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya posees una licencia de conduccion.");
			if (GetPlayerCash(playerid) < 100) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar esta licencia de conducir.");
			GivePlayerCash(playerid, -100, "licencia de conducir");
			InfoJugador[playerid][jLicencias][1] = 1;
			guardar_int_mysql("cuentas", "Licencias2", InfoJugador[playerid][jID], 1);
			SendClientMessageEx(playerid, 0xEBEB00FF, "Obtuviste una licencia de conducir por el costo de 100$.");
		}
		case 1:
		{
			if (InfoJugador[playerid][jLicencias][5] == 1)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya posees una licencia de navegacion.");
			if (GetPlayerCash(playerid) < 400) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar esta licencia de navegacion.");
			GivePlayerCash(playerid, -400, "licencia de navegacion");
			InfoJugador[playerid][jLicencias][5] = 1;
			guardar_int_mysql("cuentas", "Licencias6", InfoJugador[playerid][jID], 1);
			SendClientMessageEx(playerid, 0xEBEB00FF, "Obtuviste una licencia de navegacion por el costo de 400$.");
		}
		case 2:
		{
			if (InfoJugador[playerid][jLicencias][4] == 1)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya posees una licencia de piloto.");
			if (GetPlayerCash(playerid) < 650) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar esta licencia de piloto.");
			GivePlayerCash(playerid, -650, "licencia de piloto");
			InfoJugador[playerid][jLicencias][4] = 1;
			guardar_int_mysql("cuentas", "Licencias5", InfoJugador[playerid][jID], 1);
			SendClientMessageEx(playerid, 0xEBEB00FF, "Obtuviste una licencia de piloto por el costo de 650$.");
		}
		case 3:
		{
			if (InfoJugador[playerid][jLicencias][2] == 1)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya posees una licencia de Camionero.");
			if (GetPlayerCash(playerid) < 180) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar esta licencia de Camionero.");
			GivePlayerCash(playerid, -180, "licencia de camionero");
			InfoJugador[playerid][jLicencias][2] = 1;
			guardar_int_mysql("cuentas", "Licencias3", InfoJugador[playerid][jID], 1);
			SendClientMessageEx(playerid, 0xEBEB00FF, "Obtuviste una licencia de camionero por el costo de 180$.");
		}
	}
	return 1;
}

Dialog:ShowMultas(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new string[256];
	if (InfoJugador[playerid][jEstrellas] != 0)
	{
		format(string, sizeof string, "CENTRAL: El sospechoso %s intenta pagar los cargos de un vehiculo | Nivel de busqueda: %d.", NombreJugador(playerid), InfoJugador[playerid][jEstrellas]);
		SendMessageFaction(C_COLORRADIO, string, 1, 2, 3);
		SendClientMessageEx(playerid, 0xEBEB00FF, "Los oficiales fueron comunicados al intentar pagar multas siendo buscado.");
		return 1;
	}
	new ID = listitem, gformat[40];
	format(gformat, sizeof gformat, "vehmultita%d", ID);
	new veh = GetPVarInt(playerid, gformat);
	if (InfoVehiculo[veh][vModelo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste no posee un modelo.");
	if (InfoVehiculo[veh][vEmbargo])
	{
		new multa = InfoVehiculo[veh][vMulta] + (InfoJugador[playerid][jNivel] * 3);
		if (GetPlayerCash(playerid) < multa) { return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero para pagar la multa."); }
		SendClientMessageEx(playerid, 0x33CCFFFF, "Pagaste la multa de $%d para liberar tu %s.", multa, GetNameVehicle(InfoVehiculo[veh][vModelo]));
		SendClientMessageEx(playerid, 0xCCCCCCFF, "El vehiculo se encuentra en el deposito, cuando llegues puedes abrir la reja con /deposito.");
		GivePlayerCash(playerid, -multa, "pago embargo");
		DineroEstado += multa;
		InfoVehiculo[veh][vEmbargo] = 0;
		InfoVehiculo[veh][vMulta] = 0;
		guardar_int_mysql("vehiculos", "Embargo", InfoVehiculo[veh][vID], InfoVehiculo[veh][vEmbargo]);
		guardar_int_mysql("vehiculos", "Multa", InfoVehiculo[veh][vID], InfoVehiculo[veh][vMulta]);
		return 1;
	}
	if (InfoVehiculo[veh][vMulta])
	{
		if (GetPlayerCash(playerid) < InfoVehiculo[veh][vMulta]) { return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero para pagar la multa."); }
		GivePlayerCash(playerid, -InfoVehiculo[veh][vMulta], "pago multa");
		DineroEstado += InfoVehiculo[veh][vMulta];
		SendClientMessageEx(playerid, 0x33CCFFFF, "Pagaste la multa de $%d de tu %s.", InfoVehiculo[veh][vMulta], GetNameVehicle(InfoVehiculo[veh][vModelo]));
		InfoVehiculo[veh][vEmbargo] = 0;
		InfoVehiculo[veh][vMulta] = 0;
		guardar_int_mysql("vehiculos", "Embargo", InfoVehiculo[veh][vID], InfoVehiculo[veh][vEmbargo]);
		guardar_int_mysql("vehiculos", "Multa", InfoVehiculo[veh][vID], InfoVehiculo[veh][vMulta]);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo se encuentra limpio en el sistema.");
	return 1;
}

CMD:fpagarm(playerid)
{
	new fam_id = InfoJugador[playerid][jFamMiembro], acess = 0;
	if (fam_id == 0) return SendClientMessage(playerid, 0xCCCCCCFF, "* No formas parte de ninguna familia o banda.");
	if (_enPos(playerid, 3.0, 234.1941, 159.6334, 1003.0182)) acess = 1;
	if (_enPos(playerid, 3.0, 250.05, 67.5716, 1003.64)) acess = 1;
	if (acess == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en la central de SAPD o Ayuntamiento.");
	if (InfoJugador[playerid][jLicencias][1] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Una licencia de conducir valida es necesaria para liberar su vehiculo del deposito municipal.");
	new dialog[3084], gformat[370], multad, iCount = 0;
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vModelo] != 0 && InfoVehiculo[id][vFamilia] == fam_id)
	{
		if (InfoVehiculo[id][vEmbargo] != 0) format(gformat, sizeof gformat, "{CCCC00}%s {C0C0C0}(embargado) (multa: $%d)\n", GetNameVehicle(InfoVehiculo[id][vModelo]), InfoVehiculo[id][vMulta] + (InfoJugador[playerid][jNivel] * 3)),multad++;
		else
		{
			new multita[128] = " ";
			if (InfoVehiculo[id][vMulta] != 0) format(multita, sizeof multita, "(multa: $%d)", InfoVehiculo[id][vMulta]),multad++;
			if (InfoVehiculo[id][vSpawned] != 0) format(gformat, sizeof gformat, "{CCCC00}%s {C0C0C0}(%d) %s\n", GetNameVehicle(InfoVehiculo[id][vModelo]), InfoVehiculo[id][vDL], multita);
			else format(gformat, sizeof gformat, "{CCCC00}%s {C0C0C0}(oculto) %s\n", GetNameVehicle(InfoVehiculo[id][vModelo]), multita);
			strcat(dialog, gformat);
			//conteo
			new gformat2[64];
			format(gformat2, sizeof gformat2, "vehmultita%d", iCount);
			SetPVarInt(playerid, gformat2, id);
		}
		iCount++;
    }
	if (iCount == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No hay ningun vehiculo en tu familia.");
	if (multad == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No hay ningun vehiculo de la familia embargado o con multa.");
	Dialog_Show(playerid, ShowFamMultas, DIALOG_STYLE_LIST, "Vehiculos de la familia", dialog, "Continuar", "Salir");
	return 1;
}
CMD:fpagarmulta(playerid) return cmd_fpagarm(playerid);

Dialog:ShowFamMultas(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new string[256];
	if (InfoJugador[playerid][jEstrellas] != 0)
	{
		format(string, sizeof string, "CENTRAL: El sospechoso %s intenta pagar los cargos de un vehiculo | Nivel de busqueda: %i.", NombreJugador(playerid), InfoJugador[playerid][jEstrellas]);
		SendMessageFaction(C_COLORRADIO, string, 1, 2, 3);
		SendClientMessageEx(playerid, 0xEBEB00FF, "Los oficiales fueron comunicados al intentar pagar multas siendo buscado.");
		return 1;
	}
	new ID = listitem, gformat[40];
	format(gformat, sizeof gformat, "vehmultita%d", ID);
	new veh = GetPVarInt(playerid, gformat);
	if (InfoVehiculo[veh][vModelo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste no posee un modelo.");
	if (InfoVehiculo[veh][vEmbargo])
	{
		new multa = InfoVehiculo[veh][vMulta] + (InfoJugador[playerid][jNivel] * 3);
		if (GetPlayerCash(playerid) < multa) { return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero para pagar la multa."); }
		SendClientMessageEx(playerid, 0x33CCFFFF, "Pagaste la multa de $%s para liberar %s de la familia.", diner_coma(multa), GetNameVehicle(InfoVehiculo[veh][vModelo]));
		SendClientMessageEx(playerid, 0xCCCCCCFF, "El vehiculo se encuentra en el deposito, cuando llegues puedes abrir la reja con /deposito.");
		GivePlayerCash(playerid, -multa, "pago embargo");
		DineroEstado += multa;
		InfoVehiculo[veh][vEmbargo] = 0;
		InfoVehiculo[veh][vMulta] = 0;
		guardar_int_mysql("vehiculos", "Embargo", InfoVehiculo[veh][vID], InfoVehiculo[veh][vEmbargo]);
		guardar_int_mysql("vehiculos", "Multa", InfoVehiculo[veh][vID], InfoVehiculo[veh][vMulta]);
		return 1;
	}
	if (InfoVehiculo[veh][vMulta])
	{
		if (GetPlayerCash(playerid) < InfoVehiculo[veh][vMulta]) { return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero para pagar la multa."); }
		GivePlayerCash(playerid, -InfoVehiculo[veh][vMulta], "pago multa");
		DineroEstado += InfoVehiculo[veh][vMulta];
		SendClientMessageEx(playerid, 0x33CCFFFF, "Pagaste la multa de $%s del %s de la familia.", diner_coma(InfoVehiculo[veh][vMulta]), GetNameVehicle(InfoVehiculo[veh][vModelo]));
		InfoVehiculo[veh][vEmbargo] = 0;
		InfoVehiculo[veh][vMulta] = 0;
		guardar_int_mysql("vehiculos", "Embargo", InfoVehiculo[veh][vID], InfoVehiculo[veh][vEmbargo]);
		guardar_int_mysql("vehiculos", "Multa", InfoVehiculo[veh][vID], InfoVehiculo[veh][vMulta]);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo se encuentra limpio en el sistema.");
	return 1;
}

CMD:pagarm(playerid)
{
    if (_enPos(playerid, 3.0, 234.1941, 159.6334, 1003.0182) || _enPos(playerid, 3.0, 250.05, 67.5716, 1003.64))
	{
		if (InfoJugador[playerid][jLicencias][1] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Una licencia de conducir valida es necesaria para liberar su vehiculo del deposito municipal.");
		new dialog[3084], gformat[370], multad, iCount = 0;
		Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vModelo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoVehiculo[id][vPropietario], true) == 0 && InfoVehiculo[id][vFamilia] == 0)
		{
			if (InfoVehiculo[id][vEmbargo] != 0) format(gformat, sizeof gformat, "{FF0000}%s {C0C0C0}(embargado) (multa: $%d)\n", GetNameVehicle(InfoVehiculo[id][vModelo]), InfoVehiculo[id][vMulta] + (InfoJugador[playerid][jNivel] * 3)),multad++;
			else
			{
			    new multita[128] = " ";
			    if (InfoVehiculo[id][vMulta] != 0) format(multita, sizeof multita, "(multa: $%d)", InfoVehiculo[id][vMulta]),multad++;
				if (InfoVehiculo[id][vSpawned] != 0)
				{
					format(gformat, sizeof gformat, "{FF0000}%s {C0C0C0}(%d) %s\n", GetNameVehicle(InfoVehiculo[id][vModelo]), InfoVehiculo[id][vDL], multita);
				}
				else format(gformat, sizeof gformat, "{FF0000}%s {C0C0C0}(oculto) %s\n", GetNameVehicle(InfoVehiculo[id][vModelo]), multita);
			}
			strcat(dialog, gformat);
			//conteo
			new gformat2[64];
			format(gformat2, sizeof gformat2, "vehmultita%d", iCount);
			SetPVarInt(playerid, gformat2, id);
			iCount++;
		}
		if (iCount == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes ningun vehiculo a tu nombre.");
		if (multad == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes ningun vehiculo embargado o con multa.");
		Dialog_Show(playerid, ShowMultas, DIALOG_STYLE_LIST, "Mis vehiculos", dialog, "Continuar", "Volver");
		return 1;
    }
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en la central de SAPD o Ayuntamiento.");
    return 1;
}
CMD:pagarmulta(playerid) return cmd_pagarm(playerid);

CMD:engancharpd(playerid)
{
	if (!Es_Banda(playerid, 1)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD.", 2000);
	if (!IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes que estar en un vehiculo.");
	new carid = GetPlayerVehicleID(playerid);
	if (!EstaAutoEnganche(carid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes remolcar en este tipo de vehiculo.");
	new closestcar = DetectarCerrado(playerid, carid);
	if (CercaDeVehiculo(playerid, closestcar) <= 8 && !IsTrailerAttachedToVehicle(carid))
	{
		AttachTrailerToVehicle(closestcar, carid);
		return 1;
	}
	return 1;
}

CMD:desengancharpd(playerid)
{
	if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	{
		_Mensaje(playerid, 4, "00c200", "Has desenganchado el vehiculo que traias.");
		DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Aun no has enganchado nada.");
	return 1;
}

CMD:dejarmulta(playerid, params[])
{
	if (!Es_Banda(playerid, 1)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD.", 2000);
	new vehicleid;
	if (sscanf(params, "d", vehicleid)) return _Mensaje(playerid, 3, "0", "/dejarmulta [id vehiculo]");
	if (vehicleid > 1999 || vehicleid < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Vehiculo ID incorrecto.");
	new id = verificar_id_vehiculo(vehicleid), Float: x, Float: y, Float: z;
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "Ese ID no figura con propietario.");
	GetVehiclePos(vehicleid, x, y, z);
	if (!_enPos(playerid, 5.0, x, y, z)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas estar cerca del vehiculo seleccionado.");
	if (InfoVehiculo[id][vMulta] >= 3000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo ya excedio el maximo de multas, se debe embargar!");
	InfoVehiculo[id][vMulta] += 1000;
	guardar_int_mysql("vehiculos", "Multa", InfoVehiculo[id][vID], InfoVehiculo[id][vMulta]);
	SendClientMessageEx(playerid, 0x33CCFFFF, "* Dejaste una multa de $1.000 en el coche de %s, modelo %s.", InfoVehiculo[id][vPropietario], GetVehicleName(InfoVehiculo[id][vDL]));
	return 1;
}

//comandos garajes
CMD:creargarage(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Creargarage.");
	new espacio, tipo, propiedad, id = -1, string[190], Ip[18];
	Loop(x, MAX_GARAJES, 1) if (InfoGaraje[x][gTipo] == 0)
	{
		id = x;
		break;
	}
	if (id == -1) return SendClientMessageEx(playerid, 0xBB0000FF, "Se alcanzo el maximo de garajes (%d)", MAX_GARAJES);
	if (sscanf(params, "ddd", espacio, tipo, propiedad))
	{
		_Mensaje(playerid, 3, "0", "/creargarage [espacio] [tipo] [propiedad]");
		_Mensaje(playerid, 1, "1) Chico | 2) Mediano | 3) Grande" , "Espacios:");
		_Mensaje(playerid, 1, "1) Casa | 2) Negocio | 3) Familia | 4) Faccion" , "Tipos:");
		_Mensaje(playerid, 1, "Especifica ya sea el ID de la propiedad o Fam/Fac." , "Propiedad:");
		return 1;
	}
	if (espacio < 1 || espacio > 3) return _Mensaje(playerid, 1, "1) Chico | 2) Mediano | 3) Grande" , "Espacios:");
	if (tipo < 1 || tipo > 4) return _Mensaje(playerid, 1, "1) Casa | 2) Negocio | 3) Familia | 4) Faccion" , "Tipos:");
	switch (tipo)
	{
		case 1:
		{
			if (propiedad < 1 || propiedad > totalcasas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalcasas);
			if (InfoCasa[propiedad][cTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de casa no existe.", propiedad);
		}
		case 2:
		{
			if (propiedad < 1 || propiedad > totalnegocios) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalnegocios);
			if (InfoNegocio[propiedad][nTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de negocio no existe.", propiedad);
		}
		case 3:
		{
			if (propiedad < 1 || propiedad > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de familia incorrecta, intenta entre 1-%d.", id, totalfamilias);
			if (InfoFamilia[propiedad][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de familia inexistente.", propiedad);
		}
		case 4:
		{
			if (propiedad < 1 || propiedad > MAX_FACCIONES) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", MAX_FACCIONES);
		}
	}
	InfoGaraje[id][gEspacio] = espacio;
	InfoGaraje[id][gTipo] = tipo;
	InfoGaraje[id][gPropiedad] = propiedad;
	InfoGaraje[id][gSeguro] = 0;
	GetPlayerPos(playerid, InfoGaraje[id][gEntradaX], InfoGaraje[id][gEntradaY], InfoGaraje[id][gEntradaZ]);
	GetPlayerFacingAngle(playerid, InfoGaraje[id][gEntradaR]);
	GetPosInFrontOfPlayer(playerid, InfoGaraje[id][gEntradaX_V], InfoGaraje[id][gEntradaY_V], 4);
	InfoGaraje[id][gEntradaInt] = GetPlayerInterior(playerid);
	InfoGaraje[id][gEntradaVW] = GetPlayerVirtualWorld(playerid);
	new Float: x, Float: y, Float: z, Float: r, Float: vehx, Float: vehy, Float: vehz, Float: vehr;
	switch (espacio)
	{
		case 1:
		{
			vehx = -2460.0874, vehy = -631.1249, vehz = 12.7172, vehr = 180.0000;
			x = -2464.0464, y = - 627.5127, z = 12.8274, r = 180.0000;
		}
		case 2:
		{
			vehx = -2412.7500, vehy = -636.8614, vehz = 12.5897, vehr = 0.0000;
			x = -2408.7949, y = -640.8134, z = 12.7929, r = 0.0000;
		}
		case 3:
		{
			vehx = -2401.1606, vehy = -595.2474, vehz = 12.3810, vehr = 45.6600;
			x = -2395.1067, y = -594.1697, z = 12.9611, r = 45.6600;
		}
	}
	InfoGaraje[id][gSalidaX] = x; InfoGaraje[id][gSalidaY] = y; InfoGaraje[id][gSalidaZ] = z; InfoGaraje[id][gSalidaR] = r;
	InfoGaraje[id][gSalidaVehX] = vehx; InfoGaraje[id][gSalidaVehY] = vehy; InfoGaraje[id][gSalidaVehZ] = vehz; InfoGaraje[id][gSalidaVehR] = vehr;
	InfoGaraje[id][gSalidaInt] = 20; InfoGaraje[id][gSalidaVW] = id+1850;
	LabelPickup_garaje(id, 1);
	SendClientMessageEx(playerid, -1, "Garaje ID %d | Espacio: %s | Propiedad: %s", id, GetEspacioGaraje(id), GetTypeGaraje(id));
	format(string, sizeof string, "Creo el garaje ID %d.", id);
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 11);
	new que2ry[1500], query[2500];
	//opcion idsql ya creada.
	if (InfoGaraje[id][gID] != 0)
	{
		format(que2ry, sizeof que2ry, "UPDATE garajes SET Espacio = '%d', Tipo = '%d', Propiedad = '%d', Seguro = '%d', EntradaX = '%f', EntradaY = '%f', EntradaZ = '%f', EntradaR = '%f', EntradaX_V = '%f', EntradaY_V = '%f', EntradaInt = '%d', EntradaVW = '%d',",
		InfoGaraje[id][gEspacio],
		InfoGaraje[id][gTipo],
		InfoGaraje[id][gPropiedad],
		InfoGaraje[id][gSeguro],
		InfoGaraje[id][gEntradaX],
		InfoGaraje[id][gEntradaY],
		InfoGaraje[id][gEntradaZ],
		InfoGaraje[id][gEntradaR],
		InfoGaraje[id][gEntradaX_V],
		InfoGaraje[id][gEntradaY_V],
		InfoGaraje[id][gEntradaInt],
		InfoGaraje[id][gEntradaVW]);
		mysql_format(DBngrp, query, sizeof query, "%s SalidaX = '%f', SalidaY = '%f', SalidaZ = '%f', SalidaR = '%f', SalidaVehX = '%f', SalidaVehY = '%f', SalidaVehZ = '%f', SalidaVehR = '%f', SalidaInt = '%d', SalidaVW = '%d' WHERE ID = '%d'",
		que2ry,
		InfoGaraje[id][gSalidaX],
		InfoGaraje[id][gSalidaY],
		InfoGaraje[id][gSalidaZ],
		InfoGaraje[id][gSalidaR],
		InfoGaraje[id][gSalidaVehX],
		InfoGaraje[id][gSalidaVehY],
		InfoGaraje[id][gSalidaVehZ],
		InfoGaraje[id][gSalidaVehR],
		InfoGaraje[id][gSalidaInt],
		InfoGaraje[id][gSalidaVW],
		InfoGaraje[id][gID]);
		mysql_tquery(DBngrp, query);
		return 1;
	}
	format(que2ry, sizeof que2ry, "INSERT INTO garajes (Espacio, Tipo, Propiedad, Seguro, EntradaX, EntradaY, EntradaZ, EntradaR, EntradaX_V, EntradaY_V, EntradaInt, EntradaVW, SalidaX, SalidaY, SalidaZ, SalidaR, SalidaVehX, SalidaVehY, SalidaVehZ, SalidaVehR, SalidaInt, SalidaVW)");
	mysql_format(DBngrp, query, sizeof query, "%s VALUES ('%d', '%d', '%d',  '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d')",
	que2ry,
	InfoGaraje[id][gEspacio],
	InfoGaraje[id][gTipo],
	InfoGaraje[id][gPropiedad],
	InfoGaraje[id][gSeguro],
	InfoGaraje[id][gEntradaX],
	InfoGaraje[id][gEntradaY],
	InfoGaraje[id][gEntradaZ],
	InfoGaraje[id][gEntradaR],
	InfoGaraje[id][gEntradaX_V],
	InfoGaraje[id][gEntradaY_V],
	InfoGaraje[id][gEntradaInt],
	InfoGaraje[id][gEntradaVW],
	InfoGaraje[id][gSalidaX],
	InfoGaraje[id][gSalidaY],
	InfoGaraje[id][gSalidaZ],
	InfoGaraje[id][gSalidaR],
	InfoGaraje[id][gSalidaVehX],
	InfoGaraje[id][gSalidaVehY],
	InfoGaraje[id][gSalidaVehZ],
	InfoGaraje[id][gSalidaVehR],
	InfoGaraje[id][gSalidaInt],
	InfoGaraje[id][gSalidaVW]);
	mysql_tquery(DBngrp, query, "OnGarajeCreate", "i", id);
	return 1;
}
CMD:creargaraje(playerid, params[]) return cmd_creargarage(playerid, params);

forward OnGarajeCreate(id);
public OnGarajeCreate(id)
{
	InfoGaraje[id][gID] = cache_insert_id();
	cache_unset_active();
	totalgarajes++;
    return 1;
}

CMD:editarg(playerid, params[])
{
	new id, input, propiedad;
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Editarg.");
	if (sscanf(params, "s[32]", params))
	{
		_Mensaje(playerid, 3, "0", "/editarg [nombre] [garaje] [codigo]");
		_Mensaje(playerid, 1, "exterior - espacio - tipo", "Nombres:");
		return 1;
	}
	if (!strcmp(params, "exterior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, id)) return _Mensaje(playerid, 3, "0", "/editarg exterior [garaje]");
		if (id < 1 || id > totalgarajes) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalgarajes);
		if (InfoGaraje[id][gTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de garaje no existe.", id);
		GetPlayerPos(playerid, InfoGaraje[id][gEntradaX], InfoGaraje[id][gEntradaY], InfoGaraje[id][gEntradaZ]);
		GetPlayerFacingAngle(playerid, InfoGaraje[id][gEntradaR]);
		GetPosInFrontOfPlayer(playerid, InfoGaraje[id][gEntradaX_V], InfoGaraje[id][gEntradaY_V], 4);
		InfoGaraje[id][gEntradaInt] = GetPlayerInterior(playerid);
		InfoGaraje[id][gEntradaVW] = GetPlayerVirtualWorld(playerid);
		guardar_float_mysql("garajes", "EntradaX", InfoGaraje[id][gID], InfoGaraje[id][gEntradaX]);
		guardar_float_mysql("garajes", "EntradaY", InfoGaraje[id][gID], InfoGaraje[id][gEntradaY]);
		guardar_float_mysql("garajes", "EntradaZ", InfoGaraje[id][gID], InfoGaraje[id][gEntradaZ]);
		guardar_float_mysql("garajes", "EntradaR", InfoGaraje[id][gID], InfoGaraje[id][gEntradaR]);
		guardar_float_mysql("garajes", "EntradaX_V", InfoGaraje[id][gID], InfoGaraje[id][gEntradaX_V]);
		guardar_float_mysql("garajes", "EntradaY_V", InfoGaraje[id][gID], InfoGaraje[id][gEntradaY_V]);
		guardar_int_mysql("garajes", "EntradaInt", InfoGaraje[id][gID], InfoGaraje[id][gEntradaInt]);
		guardar_int_mysql("garajes", "EntradaVW", InfoGaraje[id][gID], InfoGaraje[id][gEntradaVW]);
		LabelPickup_garaje(id, 1);
		SendClientMessageEx(playerid, 0x008BFFFF, "Cambiaste el exterior del garaje %d.", id);
	}
	else if (!strcmp(params, "espacio", true, 7))
	{
		if (sscanf(params, "s[32]ii", params, id, input)) return _Mensaje(playerid, 3, "0", "/editarg interior [garaje] [espacio]");
		if (id < 1 || id > totalgarajes) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalgarajes);
		if (InfoGaraje[id][gTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de garaje no existe.", id);
		if (input < 1 || input > 3) return _Mensaje(playerid, 1, "1) Chico | 2) Mediano | 3) Grande" , "Espacios:");
		new Float: x, Float: y, Float: z, Float: r, Float: vehx, Float: vehy, Float: vehz, Float: vehr;
		switch (input)
		{
			case 1:
			{
				vehx = -2460.0874, vehy = -631.1249, vehz = 12.7172, vehr = 180.0000;
				x = -2464.0464, y = - 627.5127, z = 12.8274, r = 180.0000;
			}
			case 2:
			{
				vehx = -2412.7500, vehy = -636.8614, vehz = 12.5897, vehr = 0.0000;
				x = -2408.7949, y = -640.8134, z = 12.7929, r = 0.0000;
			}
			case 3:
			{
				vehx = -2401.1606, vehy = -595.2474, vehz = 12.3810, vehr = 45.6600;
				x = -2395.1067, y = -594.1697, z = 12.9611, r = 45.6600;
			}
		}
		InfoGaraje[id][gEspacio] = input;
		InfoGaraje[id][gSalidaX] = x; InfoGaraje[id][gSalidaY] = y; InfoGaraje[id][gSalidaZ] = z; InfoGaraje[id][gSalidaR] = r;
		InfoGaraje[id][gSalidaVehX] = vehx; InfoGaraje[id][gSalidaVehY] = vehy; InfoGaraje[id][gSalidaVehZ] = vehz; InfoGaraje[id][gSalidaVehR] = vehr;
		InfoGaraje[id][gSalidaInt] = 20; InfoGaraje[id][gSalidaVW] = id+1850;
		LabelPickup_garaje(id, 1);
		guardar_int_mysql("garajes", "Espacio", InfoGaraje[id][gID], InfoGaraje[id][gEspacio]);
		guardar_float_mysql("garajes", "SalidaX", InfoGaraje[id][gID], InfoGaraje[id][gSalidaX]);
		guardar_float_mysql("garajes", "SalidaY", InfoGaraje[id][gID], InfoGaraje[id][gSalidaY]);
		guardar_float_mysql("garajes", "SalidaZ", InfoGaraje[id][gID], InfoGaraje[id][gSalidaZ]);
		guardar_float_mysql("garajes", "SalidaR", InfoGaraje[id][gID], InfoGaraje[id][gSalidaR]);
		guardar_float_mysql("garajes", "SalidaVehX", InfoGaraje[id][gID], InfoGaraje[id][gSalidaVehX]);
		guardar_float_mysql("garajes", "SalidaVehY", InfoGaraje[id][gID], InfoGaraje[id][gSalidaVehY]);
		guardar_float_mysql("garajes", "SalidaVehZ", InfoGaraje[id][gID], InfoGaraje[id][gSalidaVehZ]);
		guardar_float_mysql("garajes", "SalidaVehR", InfoGaraje[id][gID], InfoGaraje[id][gSalidaVehR]);
		guardar_int_mysql("garajes", "SalidaInt", InfoGaraje[id][gID], InfoGaraje[id][gSalidaInt]);
		guardar_int_mysql("garajes", "SalidaVW", InfoGaraje[id][gID], InfoGaraje[id][gSalidaVW]);
		SendClientMessageEx(playerid, 0x008BFFFF, "Cambiaste el espacio del garaje %d a %s.", id, GetEspacioGaraje(id));
	}
	else if (!strcmp(params, "tipo", true, 4))
	{
		if (sscanf(params, "s[32]iii", params, id, input, propiedad)) return _Mensaje(playerid, 3, "0", "/editarg tipo [garaje] [tipo] [propiedad]");
		if (id < 1 || id > totalgarajes) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalgarajes);
		if (InfoGaraje[id][gTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de garaje no existe.", id);
		if (input < 1 || input > 4) return _Mensaje(playerid, 1, "1) Casa | 2) Negocio | 3) Familia | 4) Faccion" , "Tipos:");
		switch (input)
		{
			case 1:
			{
				if (propiedad < 1 || propiedad > totalcasas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalcasas);
				if (InfoCasa[propiedad][cTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de casa no existe.", propiedad);
			}
			case 2:
			{
				if (propiedad < 1 || propiedad > totalnegocios) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalnegocios);
				if (InfoNegocio[propiedad][nTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de negocio no existe.", propiedad);
			}
			case 3:
			{
				if (propiedad < 1 || propiedad > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de familia incorrecta, intenta entre 1-%d.", id, totalfamilias);
				if (InfoFamilia[propiedad][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de familia inexistente.", propiedad);
			}
			case 4:
			{
				if (propiedad < 1 || propiedad > MAX_FACCIONES) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", MAX_FACCIONES);
			}
		}
		InfoGaraje[id][gTipo] = input;
		InfoGaraje[id][gPropiedad] = propiedad;
		guardar_int_mysql("garajes", "Tipo", InfoGaraje[id][gID], InfoGaraje[id][gTipo]);
		guardar_int_mysql("garajes", "Propiedad", InfoGaraje[id][gID], InfoGaraje[id][gPropiedad]);
		SendClientMessageEx(playerid, 0xCCCC00FF, "Cambiaste el propiedad del garaje %d a %s", id, GetTypeGaraje(id));
	}
	return 1;
}
CMD:editargaraje(playerid, params[]) return cmd_editarg(playerid, params);
CMD:editargarage(playerid, params[]) return cmd_editarg(playerid, params);

CMD:borrargarage(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Borrargarage.");
    new id, string[256], query[1028], Ip[18];
    if (sscanf(params, "i", id)) return _Mensaje(playerid, 3, "0", "/borrarcasa [casa id]");
	if (id < 1 || id > totalgarajes) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalgarajes);
	if (InfoGaraje[id][gTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de garaje no existe.", id);
	format(string, sizeof string, "Borro el garaje ID %d.", id);
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 11);
	InfoGaraje[id][gEspacio] = 0;
	InfoGaraje[id][gTipo] = 0;
	InfoGaraje[id][gPropiedad] = -1;
	InfoGaraje[id][gSeguro] = 0;
	InfoGaraje[id][gEntradaX] = 0.0;
	InfoGaraje[id][gEntradaY] = 0.0;
	InfoGaraje[id][gEntradaZ] = 0.0;
	InfoGaraje[id][gEntradaR] = 0.0;
	InfoGaraje[id][gEntradaX_V] = 0.0;
	InfoGaraje[id][gEntradaY_V] = 0.0;
	InfoGaraje[id][gEntradaInt] = 0;
	InfoGaraje[id][gEntradaVW] = 0;
	InfoGaraje[id][gSalidaX] = 0.0;
	InfoGaraje[id][gSalidaY] = 0.0;
	InfoGaraje[id][gSalidaZ] = 0.0;
	InfoGaraje[id][gSalidaR] = 0.0;
	InfoGaraje[id][gSalidaVehX] = 0.0;
	InfoGaraje[id][gSalidaVehY] = 0.0;
	InfoGaraje[id][gSalidaVehZ] = 0.0;
	InfoGaraje[id][gSalidaVehR] = 0.0;
	InfoGaraje[id][gSalidaInt] = 0;
	InfoGaraje[id][gSalidaVW] = 0;
	noexitgaraje(id);
	mysql_format(DBngrp, query, sizeof query, "UPDATE garajes SET Espacio = 0, Tipo = 0, Propiedad = -1, Seguro = 0, EntradaX = 0.0, EntradaY = 0.0, EntradaZ = 0.0, EntradaR = 0.0, EntradaX_V = 0.0, EntradaY_V = 0.0, EntradaInt = 0, EntradaVW = 0 WHERE ID = '%d'", InfoGaraje[id][gID]);
	mysql_tquery(DBngrp, query);
	mysql_format(DBngrp, query, sizeof query, "UPDATE garajes SET SalidaX = 0.0, SalidaY = 0.0, SalidaZ = 0.0, SalidaR = 0.0, SalidaVehX = 0.0, SalidaVehY = 0.0, SalidaVehZ = 0.0, SalidaVehR = 0.0, SalidaInt = 0, SalidaVW = 0 WHERE ID = '%d'", InfoGaraje[id][gID]);
	mysql_tquery(DBngrp, query);
	return 1;
}
CMD:borrargaraje(playerid, params[]) return cmd_borrargarage(playerid, params);

CMD:gseguro(playerid)
{
	new id = -1;
	Loop(x, totalgarajes, 1)
	{
		if ((IsPlayerInRangeOfPoint(playerid, 7.0, InfoGaraje[x][gEntradaX], InfoGaraje[x][gEntradaY], InfoGaraje[x][gEntradaZ]) && InfoJugador[playerid][jInterior] == InfoGaraje[x][gEntradaInt] && InfoJugador[playerid][jVirtualWorld] == InfoGaraje[x][gEntradaVW]) ||
		(IsPlayerInRangeOfPoint(playerid, 15.0, InfoGaraje[x][gSalidaVehX], InfoGaraje[x][gSalidaVehY], InfoGaraje[x][gSalidaVehZ]) && InfoGaraje[x][gSalidaInt] == InfoJugador[playerid][jInterior] && InfoGaraje[x][gSalidaVW] == InfoJugador[playerid][jVirtualWorld]) )
		{
			id = x;
		}
	}
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en la entrada o salida de ningun garaje.");
	if (PermisosGaraje(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de este garaje.");
	if (InfoGaraje[id][gSeguro] == 0)
	{
		InfoGaraje[id][gSeguro] = 1;
		AccionesRol(playerid, 0, "saca sus llaves de garaje y lo abre.");
		GameTextForPlayer(playerid, "~g~Garaje abierto", 3500, 1);
	}
	else
	{
		InfoGaraje[id][gSeguro] = 0;
		AccionesRol(playerid, 0, "saca sus llaves de garaje y lo cierra.");
		GameTextForPlayer(playerid, "~r~Garaje Cerrado", 3500, 1);
	}
	guardar_int_mysql("garajes", "Seguro", InfoGaraje[id][gID], InfoGaraje[id][gSeguro]);
    return 1;
}

CMD:entrarg(playerid)
{
	new id = -1;
	Loop(x, totalgarajes, 1) if (InfoGaraje[x][gTipo] != 0)
	{
		if (_enPos(playerid, 7, InfoGaraje[x][gEntradaX], InfoGaraje[x][gEntradaY], InfoGaraje[x][gEntradaZ]) &&  InfoJugador[playerid][jInterior] == InfoGaraje[x][gEntradaInt] && InfoJugador[playerid][jVirtualWorld] == InfoGaraje[x][gEntradaVW])
		{
			id = x;
			break;
		}
	}
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en la entrada de ningun garaje.");
	if (InfoGaraje[id][gSeguro] == 0) return GameTextForPlayer(playerid, "~w~Garage ~r~Cerrado", 5000, 1);
	if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0) Pos_Entrada(playerid, InfoGaraje[id][gEntradaX], InfoGaraje[id][gEntradaY], InfoGaraje[id][gEntradaZ], 0.0000, 0, 0);
		SetPosEx(playerid, InfoGaraje[id][gSalidaX], InfoGaraje[id][gSalidaY], InfoGaraje[id][gSalidaZ], InfoGaraje[id][gSalidaR], InfoGaraje[id][gSalidaInt], InfoGaraje[id][gSalidaVW], 1);
		SetCameraBehindPlayer(playerid);
	}
	else if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		SetVehicleVirtualWorld(vehicleid, InfoGaraje[id][gSalidaVW]);
		SetVehicleInterior(vehicleid, InfoGaraje[id][gSalidaInt]);
		MoverVehiclePos(vehicleid, InfoGaraje[id][gSalidaVehX], InfoGaraje[id][gSalidaVehY], InfoGaraje[id][gSalidaVehZ]);
		SetVehicleZAngle(vehicleid, InfoGaraje[id][gSalidaVehR]);
		foreach(Player, p) if (IsPlayerInVehicle(p, vehicleid))
		{
			if (GetPlayerInterior(p) == 0 && GetPlayerVirtualWorld(p) == 0) Pos_Entrada(p, InfoGaraje[id][gEntradaX], InfoGaraje[id][gEntradaY], InfoGaraje[id][gEntradaZ], 0.0000, 0, 0);
			SetPlayerInterior(p, InfoGaraje[id][gSalidaInt]); InfoJugador[p][jInterior] = InfoGaraje[id][gSalidaInt];
			SetPlayerVirtualWorld(p, InfoGaraje[id][gSalidaVW]); InfoJugador[p][jVirtualWorld] = InfoGaraje[id][gSalidaVW];
		}
	}
	return 1;
}

CMD:salirg(playerid)
{
	new id = -1;
	Loop(x, totalgarajes, 1) if (InfoGaraje[x][gTipo] != 0)
	{
		if (_enPos(playerid, 7, InfoGaraje[x][gSalidaX], InfoGaraje[x][gSalidaY], InfoGaraje[x][gSalidaZ]) &&  InfoJugador[playerid][jInterior] == InfoGaraje[x][gSalidaInt] && InfoJugador[playerid][jVirtualWorld] == InfoGaraje[x][gSalidaVW])
		{
			id = x;
			break;
		}
	}
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en la salida de ningun garaje.");
	if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if (InfoGaraje[id][gEntradaInt] == 0 && InfoGaraje[id][gEntradaVW] == 0) Pos_Salida(playerid);
		SetPosEx(playerid, InfoGaraje[id][gEntradaX], InfoGaraje[id][gEntradaY], InfoGaraje[id][gEntradaZ], InfoGaraje[id][gEntradaR], InfoGaraje[id][gEntradaInt], InfoGaraje[id][gEntradaVW], 1);
		SetCameraBehindPlayer(playerid);
	}
	else if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		SetVehicleInterior(vehicleid, InfoGaraje[id][gEntradaInt]);
		SetVehicleVirtualWorld(vehicleid, InfoGaraje[id][gEntradaVW]);
		MoverVehiclePos(vehicleid, InfoGaraje[id][gEntradaX_V], InfoGaraje[id][gEntradaY_V], InfoGaraje[id][gEntradaZ]);
		SetVehicleZAngle(vehicleid, InfoGaraje[id][gEntradaR]);
		foreach(Player, p) if(IsPlayerInVehicle(p, vehicleid))
		{
			if (InfoGaraje[p][gEntradaInt] == 0 && InfoGaraje[p][gEntradaVW] == 0) Pos_Salida(p);
			SetPlayerInterior(p, InfoGaraje[id][gEntradaInt]); InfoJugador[p][jInterior] = InfoGaraje[id][gEntradaInt];
			SetPlayerVirtualWorld(p, InfoGaraje[id][gEntradaVW]); InfoJugador[p][jVirtualWorld] = InfoGaraje[id][gEntradaVW];
		}
	}
	return 1;
}

//comandos casas
CMD:vercasas(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 2) return SendClientMessage(playerid, 0xccccccff, "* No tienes acceso al /Vercasas.");
	OnDuty
	new string[210], idjugador, nombre[128], dialog[2100];
	if (sscanf(params, "d", idjugador)) return _Mensaje(playerid, 3, "0", "/vercasas [id jugador]");
	if (!IsPlayerConnectedEx(idjugador)) return SendClientMessage(playerid, 0xccccccff, "Jugador desconectado.");
	if (CountCasas(idjugador) == 0) return SendClientMessage(playerid, 0xccccccff, "* Ese jugador no tiene ninguna casa a su nombre.");
	Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0 && strmatch(InfoCasa[id][cPropietario], InfoJugador[idjugador][jNombre_Apellido]))
	{
		new location[MAX_ZONE_NAME];
		Get2DZone(location, MAX_ZONE_NAME, InfoCasa[id][cEntradaX], InfoCasa[id][cEntradaY], InfoCasa[id][cEntradaZ]);
		if (InfoCasa[id][cMoneda] == 0) format(string, sizeof string, "{FFFFFF}[ID: %d]. %s [{00cc00}$%s{FFFFFF}] Normal\n", id, location, diner_coma(InfoCasa[id][cPrecio]));
		else format(string, sizeof string, "{FFFFFF}[ID: %d]. %s [%d coins] {ffff00}VIP{FFFFFF}\n", id, location, InfoCasa[id][cPrecio]);
		strcat(dialog, string);
	}
	format(nombre, sizeof nombre, "Casas de %s (ID: %d)", InfoJugador[idjugador][jNombre_Apellido], idjugador);
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_LIST, nombre, dialog, "Cerrar", "");
	return 1;
}


CMD:acomodarcasas(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /acomodarcasas.");
	new count = 0;
	Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0)
	{
		InfoCasa[id][cSalidaVW] = 6000+id;
		guardar_int_mysql("casas", "SalidaVW", InfoCasa[id][cID], InfoCasa[id][cSalidaVW]);
		count++;
	}
	SendClientMessageEx(playerid, 0x00CC00FF, "Solucionaste la VirtualWorld de %d casas.", count);
	return 1;
}

CMD:editarcasa(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Editarcasa.");
	new cid, input;
	if (sscanf(params, "s[32]", params))
	{
		_Mensaje(playerid, 3, "0", "/editarcasa [Nombre] [casaid]");
		_Mensaje(playerid, 1, "exterior - interior - precio - moneda.", "Opciones:");
		return 1;
	}
	if (!strcmp(params, "exterior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, cid)) return _Mensaje(playerid, 3, "0", "/editarcasa exterior [casaid]");
		if (cid < 1 || cid > totalcasas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalcasas);
		if (InfoCasa[cid][cTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de casa no existe.", cid);
		GetPlayerPos(playerid, InfoCasa[cid][cEntradaX], InfoCasa[cid][cEntradaY], InfoCasa[cid][cEntradaZ]);
		GetPlayerFacingAngle(playerid, InfoCasa[cid][cEntradaR]);
		InfoCasa[cid][cEntradaInt] = GetPlayerInterior(playerid);
		InfoCasa[cid][cEntradaVW] = GetPlayerVirtualWorld(playerid);
		LabelPickup_casa(cid, 1);
		guardar_float_mysql("casas", "EntradaX", InfoCasa[cid][cID], InfoCasa[cid][cEntradaX]);
		guardar_float_mysql("casas", "EntradaY", InfoCasa[cid][cID], InfoCasa[cid][cEntradaY]);
		guardar_float_mysql("casas", "EntradaZ", InfoCasa[cid][cID], InfoCasa[cid][cEntradaZ]);
		guardar_float_mysql("casas", "EntradaR", InfoCasa[cid][cID], InfoCasa[cid][cEntradaR]);
		guardar_int_mysql("casas", "EntradaInt", InfoCasa[cid][cID], InfoCasa[cid][cEntradaInt]);
		guardar_int_mysql("casas", "EntradaVW", InfoCasa[cid][cID], InfoCasa[cid][cEntradaVW]);
		SendClientMessageEx(playerid, 0x008BFFFF, "Cambiaste el exterior de la casa.", cid);
	}
	else if (!strcmp(params, "interior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, cid)) return _Mensaje(playerid, 3, "0", "/editarcasa interior [casaid]");
		if (cid < 1 || cid > totalcasas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalcasas);
		if (InfoCasa[cid][cTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de casa no existe.", cid);
		GetPlayerPos(playerid, InfoCasa[cid][cSalidaX], InfoCasa[cid][cSalidaY], InfoCasa[cid][cSalidaZ]);
		GetPlayerFacingAngle(playerid, InfoCasa[cid][cSalidaR]);
		InfoCasa[cid][cSalidaInt] = GetPlayerInterior(playerid);
		InfoCasa[cid][cSalidaVW] = 6000+cid;
		guardar_float_mysql("casas", "SalidaX", InfoCasa[cid][cID], InfoCasa[cid][cSalidaX]);
		guardar_float_mysql("casas", "SalidaY", InfoCasa[cid][cID], InfoCasa[cid][cSalidaY]);
		guardar_float_mysql("casas", "SalidaZ", InfoCasa[cid][cID], InfoCasa[cid][cSalidaZ]);
		guardar_float_mysql("casas", "SalidaR", InfoCasa[cid][cID], InfoCasa[cid][cSalidaR]);
		guardar_int_mysql("casas", "SalidaInt", InfoCasa[cid][cID], InfoCasa[cid][cSalidaInt]);
		guardar_int_mysql("casas", "SalidaVW", InfoCasa[cid][cID], InfoCasa[cid][cSalidaVW]);
		LabelPickup_casa(cid, 1);
		SendClientMessageEx(playerid, 0x008BFFFF, "Cambiaste el interior de la casa %d.", cid);
	}
	else if (!strcmp(params, "precio", true, 5))
	{
		if (sscanf(params, "s[32]ii", params, cid, input)) return _Mensaje(playerid, 3, "0", "/editarcasa precio [casaid] [precio]");
		if (cid < 1 || cid > totalcasas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalcasas);
		if (InfoCasa[cid][cTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de casa no existe.", cid);
		InfoCasa[cid][cPrecio] = input;
		guardar_int_mysql("casas", "Precio", InfoCasa[cid][cID], InfoCasa[cid][cPrecio]);
		if (InfoCasa[cid][cVenta] != 0) LabelPickup_casa(cid, 1);
		else LabelPickup_casa(cid, 2);
		SendClientMessageEx(playerid, 0x008BFFFF, "Cambiaste el precio ($%d) de la casa %d.", input, cid);
	}
	else if (!strcmp(params, "moneda", true, 5))
	{
		if (sscanf(params, "s[32]i", params, cid)) return _Mensaje(playerid, 3, "0", "/editarcasa moneda [casaid]");
		if (cid < 1 || cid > totalcasas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalcasas);
		if (InfoCasa[cid][cTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de casa no existe.", cid);
		if (InfoCasa[cid][cMoneda] != 0)
		{
			InfoCasa[cid][cMoneda] = 0;
			new k = gettime();
			k += 1296000;
			InfoCasa[cid][cTiempoDisponible] = k;
			SendClientMessageEx(playerid, 0x008BFFFF, "Ahora la casa %d no es mas valorada en coins.", cid);
			guardar_int_mysql("casas", "TiempoDisponible", InfoCasa[cid][cID], InfoCasa[cid][cTiempoDisponible]);
		}
		else
		{
		    InfoCasa[cid][cMoneda] = 1;
			SendClientMessageEx(playerid, 0x008BFFFF, "Ahora la casa %d es valorada en coins (precio actual: %d).", cid, InfoCasa[cid][cPrecio]);
		}
		guardar_int_mysql("casas", "Moneda", InfoCasa[cid][cID], InfoCasa[cid][cMoneda]);
		if (InfoCasa[cid][cVenta] != 0) LabelPickup_casa(cid, 1);
		else LabelPickup_casa(cid, 2);
	}
	return 1;
}

CMD:crearcasa(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Crearcasa.");
	new tipo, extra, moneda, string[256];
	if (sscanf(params, "ddd", tipo, moneda, extra))
	{
		_Mensaje(playerid, 3, "0", "/crearcasa [tipo de espacio] [moneda] [figura]");
		_Mensaje(playerid, 1, "1) Habitacion 2) Chico | 3) Mediano | 4) Grande | 5) Gigante", "Tipos:");
		return 1;
	}
	if (tipo < 1 || tipo > 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Las casas estan entre 1 y 5 espacios.");
	switch (tipo)
	{
		case 1: { if (extra < 1 || extra > 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo hay entre 1-4 figuras en el espacio habitacion."); }
		case 2: { if (extra < 1 || extra > 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo hay entre 1-3 figuras en el espacio chico."); }
		case 3: { if (extra < 1 || extra > 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo hay entre 1-3 figuras en el espacio mediano."); }
		case 4: { if (extra < 1 || extra > 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo hay entre 1-3 figuras en el espacio grande."); }
		case 5: { if (extra < 1 || extra > 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo hay entre 1-2 figuras en el espacio gigante."); }
	}
	Loop(cid, MAX_CASAS, 1) if (!InfoCasa[cid][cTipo])
	{
		GetPlayerPos(playerid, InfoCasa[cid][cEntradaX], InfoCasa[cid][cEntradaY], InfoCasa[cid][cEntradaZ]);
		GetPlayerFacingAngle(playerid, InfoCasa[cid][cEntradaR]);
		InfoCasa[cid][cEntradaVW] = GetPlayerVirtualWorld(playerid);
		InfoCasa[cid][cEntradaInt] = GetPlayerInterior(playerid);
		InfoCasa[cid][cSeguro] = 0;
		InfoCasa[cid][cTiempoDisponible] = -1;
		InfoCasa[cid][cVenta] = 0;
		alm(InfoCasa[cid][cPropietario], "none");
		InfoCasa[cid][cTipo] = tipo;
		new Float: x, Float: y, Float: z, Float: r, int, price_mone, price_normal;
		switch (tipo)
		{
			case 1: // habitacion
			{
				switch (extra)
				{
					case 1: x = 255.4378, y = 304.7226, z = 999.1484, r = 274.4021, price_mone = 10, price_normal = 150000, int = 20;
					case 2: x = 2217.9070, y = -1089.1918, z = 1050.4844, r = 96.7639, price_mone = 12, price_normal = 170000, int = 20;
					case 3: x = 222.6111, y = 1272.7428, z = 1082.1406, r = 1.2197, price_mone = 15, price_normal = 210000, int = 20;
					case 4: x = 1457.2540, y = -2589.6572, z = 13.5669, r = 178.5076, price_mone = 12, price_normal = 135000, int = 11;
				}
			}
			case 2: // chico
			{
				switch (extra)
				{
					case 1: x = 263.5031, y = 1266.4988, z = 1080.2578, r = 359.0264, price_mone = 20, price_normal = 300000, int = 21;
					case 2: x = 276.5541, y = 1237.5612, z = 1084.2578, r = 358.0864, price_mone = 20, price_normal = 312000, int = 21;
					case 3: x = 446.1162, y = 1365.7734, z = 1084.3411, r = 0.0000, price_mone = 23, price_normal = 325000, int = 21;
				}
			}
			case 3: // mediano
			{
				switch (extra)
				{
					case 1: x = 294.7744, y = 1446.9458, z = 1080.1368, r = 0.0000, price_mone = 25, price_normal = 350000, int = 22;
					case 2: x = -1.4793, y = 1339.9906, z = 1084.3611, r = 0.0000, price_mone = 25, price_normal = 395000, int = 22;
					case 3: x = 54.1827, y = 1323.2615, z = 1083.7664, r = 0.0000, price_mone = 30, price_normal = 415000, int = 22;
				}
			}
			case 4: // grande
			{
				switch (extra)
				{
					case 1: x = 110.9865, y = 1365.1989, z = 1083.7754, r = 0.0000, price_mone = 32, price_normal = 500000, int = 23;
					case 2: x = 242.7206, y = 1130.7582, z = 1080.9480, r = 0.0000, price_mone = 35, price_normal = 560000, int = 23;
					case 3: x = 198.3604, y = 1059.4149, z = 1084.1519, r = 0.0000, price_mone = 35, price_normal = 560000, int = 23;
				}
			}
			case 5: // gigante
			{
				switch (extra)
				{
				    case 1: x = 188.5331, y = 1007.0297, z = 1083.9316, r = 0.0000, price_mone = 35, price_normal = 560000, int = 24;
					case 2: x = 1298.8577, y = -796.6441, z = 1084.0078, r = 4.1460, price_mone = 50, price_normal = 1500000, int = 5;
				}
			}
		}
		InfoCasa[cid][cSalidaX] = x;
		InfoCasa[cid][cSalidaY] = y;
		InfoCasa[cid][cSalidaZ] = z;
		InfoCasa[cid][cSalidaR] = r;
		if (moneda != 0)
		{
			InfoCasa[cid][cMoneda] = 1, InfoCasa[cid][cPrecio] = price_mone;
			SendClientMessageEx(playerid, 0x90C3D4FF, "Casa nueva ID %d | Precio en monedas %d | Espacio: %s", cid, price_mone, _EspacioC(cid));
			format(string, sizeof string, "Creo la casa ID %d (%d coins).", cid, price_mone);
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 11);
		}
		else
		{
			InfoCasa[cid][cMoneda] = 0, InfoCasa[cid][cPrecio] = price_normal;
			SendClientMessageEx(playerid, 0x90C3D4FF, "Casa nueva ID %d | Precio en $%d | Espacio: %s", cid, price_normal, _EspacioC(cid));
			format(string, sizeof string, "Creo la casa ID %d ($%s).", cid, diner_coma(price_mone));
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 11);
		}
		InfoCasa[cid][cSalidaInt] = int;
		InfoCasa[cid][cSalidaVW] = cid+6000;
		LabelPickup_casa(cid, 1);
		new que2ry[1000], query[1500];
		//opcion idsql ya creada.
		if (InfoCasa[cid][cID] != 0)
		{
			format(que2ry, sizeof que2ry, "UPDATE casas SET Propietario = '%s', Tipo = '%d', Seguro = '%d', Venta = '%d', EntradaX = '%f', EntradaY = '%f', EntradaZ = '%f', EntradaR = '%f', EntradaInt = '%d', EntradaVW = '%d',",
			InfoCasa[cid][cPropietario],
			InfoCasa[cid][cTipo],
			InfoCasa[cid][cSeguro],
			InfoCasa[cid][cVenta],
			InfoCasa[cid][cEntradaX],
			InfoCasa[cid][cEntradaY],
			InfoCasa[cid][cEntradaZ],
			InfoCasa[cid][cEntradaR],
			InfoCasa[cid][cEntradaInt],
			InfoCasa[cid][cEntradaVW]);
			mysql_format(DBngrp, query, sizeof query, "%s SalidaX = '%f', SalidaY = '%f', SalidaZ = '%f', SalidaR = '%f', SalidaInt = '%d', SalidaVW = '%d', Precio = '%d', Moneda = '%d', TiempoDisponible = '%d' WHERE ID = '%d'",
			que2ry,
			InfoCasa[cid][cSalidaX],
			InfoCasa[cid][cSalidaY],
			InfoCasa[cid][cSalidaZ],
			InfoCasa[cid][cSalidaR],
			InfoCasa[cid][cSalidaInt],
			InfoCasa[cid][cSalidaVW],
			InfoCasa[cid][cPrecio],
			InfoCasa[cid][cMoneda],
			InfoCasa[cid][cTiempoDisponible],
			InfoCasa[cid][cID]);
			mysql_tquery(DBngrp, query);
			cid = MAX_CASAS;
			return 1;
		}
		format(que2ry, sizeof que2ry, "INSERT INTO casas (Propietario, Tipo, Seguro, Venta, EntradaX, EntradaY, EntradaZ, EntradaR, EntradaInt, EntradaVW, SalidaX, SalidaY, SalidaZ, SalidaR, SalidaInt, SalidaVW, Precio, Moneda, TiempoDisponible)");
		mysql_format(DBngrp, query, sizeof query, "%s VALUES ('%e', '%d', '%d',  '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d')",
		que2ry,
		InfoCasa[cid][cPropietario],
		InfoCasa[cid][cTipo],
		InfoCasa[cid][cSeguro],
		InfoCasa[cid][cVenta],
		InfoCasa[cid][cEntradaX],
		InfoCasa[cid][cEntradaY],
		InfoCasa[cid][cEntradaZ],
		InfoCasa[cid][cEntradaR],
		InfoCasa[cid][cEntradaInt],
		InfoCasa[cid][cEntradaVW],
		InfoCasa[cid][cSalidaX],
		InfoCasa[cid][cSalidaY],
		InfoCasa[cid][cSalidaZ],
		InfoCasa[cid][cSalidaR],
		InfoCasa[cid][cSalidaInt],
		InfoCasa[cid][cSalidaVW],
		InfoCasa[cid][cPrecio],
		InfoCasa[cid][cMoneda],
		InfoCasa[cid][cTiempoDisponible]);
		mysql_tquery(DBngrp, query, "OnCasaCreate", "i", cid);
		cid = MAX_CASAS;
		return 1;
	}
	SendClientMessageEx(playerid, 0xBB0000FF, "Se alcanzo el maximo de casas (%d)", MAX_CASAS);
	return 1;
}

forward OnCasaCreate(cid);
public OnCasaCreate(cid)
{
	InfoCasa[cid][cID] = cache_insert_id();
	cache_unset_active();
	totalcasas++;
    return 1;
}

CMD:borrarcasa(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Borrarcasa.");
    new id, string[256], query[1028];
    if (sscanf(params, "i", id)) return _Mensaje(playerid, 3, "0", "/borrarcasa [casa id]");
	if (id < 1 || id > totalcasas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalcasas);
	if (InfoCasa[id][cTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de casa no existe.", id);
	//por si tenia due?o
	foreach(Player, p) if (IsPlayerConnectedEx(p) && LlavesCasa(p, id))
	{
		SendClientMessageEx(playerid, 0xCCCC00FF, "Admin %s elimino tu casa %d.", InfoJugador[playerid][jNombre_Apellido], id);
	}
	format(string, sizeof string, "Borro la casa ID %d.", id);
    new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 11);
    alm(InfoCasa[id][cPropietario], "none");
    InfoCasa[id][cTipo] = 0;
    InfoCasa[id][cVenta] = 0;
    InfoCasa[id][cSeguro] = 0;
    InfoCasa[id][cEntradaX] = 0;
    InfoCasa[id][cEntradaY] = 0;
    InfoCasa[id][cEntradaZ] = 0;
    InfoCasa[id][cEntradaR] = 0;
    InfoCasa[id][cEntradaInt] = 0;
    InfoCasa[id][cEntradaVW] = 0;
    InfoCasa[id][cSalidaX] = 0;
    InfoCasa[id][cSalidaY] = 0;
    InfoCasa[id][cSalidaZ] = 0;
    InfoCasa[id][cSalidaR] = 0;
    InfoCasa[id][cSalidaInt] = 0;
    InfoCasa[id][cSalidaVW] = 0;
    InfoCasa[id][cPrecio] = 0;
    InfoCasa[id][cMoneda] = 0;
    InfoCasa[id][cCasaDinero] = 0;
    InfoCasa[id][cRentable] = 0;
    InfoCasa[id][cRentaPrecio] = 0;
	Loop(x, 15, 0)
	{
	    InfoCasa[id][cArmario][x] = 0;
	    InfoCasa[id][cArmarioCantidad][x] = 0;
		mysql_format(DBngrp, string, sizeof string, "UPDATE casas SET Armario%d = 0 , ArmarioCantidad%d = 0 WHERE ID = '%d'", x+1, x+1, InfoCasa[id][cID]);
		mysql_tquery(DBngrp, string);
	}
	alm(InfoCasa[id][cCompartida1], "none");
	alm(InfoCasa[id][cCompartida2], "none");
	alm(InfoCasa[id][cCompartida3], "none");
    InfoCasa[id][cTiempoDisponible] = -1;
	InfoCasa[id][cDestroy] = 0;
	noexitcasa(id);
	mysql_format(DBngrp, query, sizeof query, "UPDATE casas SET Destroy = 0, EntradaX = 0.0, EntradaY = 0.0, EntradaZ = 0.0, EntradaR = 0.0, EntradaInt = 0, EntradaVW = 0, SalidaX = 0.0, SalidaY = 0.0, SalidaZ = 0.0, SalidaR = 0.0, SalidaInt = 0, Moneda = 0 WHERE ID = '%d'", InfoCasa[id][cID]);
	mysql_tquery(DBngrp, query);
	mysql_format(DBngrp, query, sizeof query, "UPDATE casas SET Propietario = '%e', CasaDinero = 0, SalidaVW = 0, Precio = 0, Tipo = 0, TiempoDisponible = -1, Compartida1 = '%e', Compartida2 = '%e', Compartida3 = '%e', Seguro = 0, Venta = 0 WHERE ID = '%d'", InfoCasa[id][cPropietario], InfoCasa[id][cCompartida1], InfoCasa[id][cCompartida2], InfoCasa[id][cCompartida3], InfoCasa[id][cID]);
	mysql_tquery(DBngrp, query);
	SendClientMessageEx(playerid, -1, "Borraste la casa ID %d, SQL vacia: %d", id, InfoCasa[id][cID]);
    return 1;
}

CMD:avecasa(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Avecasa.");
    new casaid, string[256];
    if (sscanf(params, "i", casaid)) return _Mensaje(playerid, 3, "0", "/avecasa [casa id]");
 	if (casaid < 1 || casaid > totalcasas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalcasas);
	if (InfoCasa[casaid][cTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de casa no existe.", casaid);
	if (InfoCasa[casaid][cVenta] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de casa no esta en venta.", casaid);
	foreach(Player, p) if (IsPlayerConnectedEx(p) && LlavesCasa(p, casaid))
	{
		SendClientMessageEx(playerid, 0xCCCC00FF, "Admin %s elimino tu casa %d.", InfoJugador[playerid][jNombre_Apellido], casaid);
	}
	format(string, sizeof string, "Reseteo la casa ID %d. (/avecasa)", casaid);
    new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 11);
	VenderCasa(casaid);
	SendClientMessageEx(playerid, -1, "Vendiste la casa ID %d", casaid);
    return 1;
}

CMD:comprarcasa(playerid)
{
	new id = -1;
	Loop(h, totalcasas, 1) if (_enPos(playerid, 2.0, InfoCasa[h][cEntradaX], InfoCasa[h][cEntradaY], InfoCasa[h][cEntradaZ]) && InfoJugador[playerid][jInterior] == InfoCasa[h][cEntradaInt] && InfoJugador[playerid][jVirtualWorld] == InfoCasa[h][cEntradaVW])
	{
		id = h;
		break;
	}
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "No estas en la entrada de ninguna casa.");
	if (InfoCasa[id][cVenta] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Esta casa ya tiene propietario");
	if (CountCasas(playerid) >= NumberCasasVIP(InfoJugador[playerid][jNivelVIP])) return SendClientMessageEx(playerid, -1, "* No puedes tener mas de %d casas, siendo %s.", NumberCasasVIP(InfoJugador[playerid][jNivelVIP]), GetNameVIP(InfoJugador[playerid][jNivelVIP]));
	if (InfoCasa[id][cMoneda] == 0)
	{
		if (GetPlayerCash(playerid) < InfoCasa[id][cPrecio]) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero para comprar esta casa."); return 1; }
		GivePlayerCash(playerid, -InfoCasa[id][cPrecio], "comprarcasa");
		new k = gettime(), string[512];
		k += 1296000;
		InfoCasa[id][cTiempoDisponible] = k;
		InfoCasa[id][cVenta] = 1;
		alm(InfoCasa[id][cPropietario], InfoJugador[playerid][jNombre_Apellido]);
		mysql_format(DBngrp, string, sizeof string, "UPDATE casas SET Venta = 1, Propietario = '%e', TiempoDisponible = '%d' WHERE ID = '%d'", InfoCasa[id][cPropietario], InfoCasa[id][cTiempoDisponible], InfoCasa[id][cID]);
		mysql_tquery(DBngrp, string);
		SendClientMessageEx(playerid, 0xCCCC00FF, "Compraste esta propiedad por $%d, escribe '/ayuda casa' para mas informacion.", InfoCasa[id][cPrecio]);
		LabelPickup_casa(id, 1);
		return 1;
	}
	if (InfoJugador[playerid][jCoins] < InfoCasa[id][cPrecio]) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente coins para comprar esta casa."); return 1; }
	new k = gettime(), string[512];
	k += 1296000;
	InfoCasa[id][cTiempoDisponible] = k;
	InfoCasa[id][cVenta] = 1;
	alm(InfoCasa[id][cPropietario], InfoJugador[playerid][jNombre_Apellido]);
	mysql_format(DBngrp, string, sizeof string, "UPDATE casas SET Venta = 1, Propietario = '%e', TiempoDisponible = '%d' WHERE ID = '%d'", InfoCasa[id][cPropietario], InfoCasa[id][cTiempoDisponible], InfoCasa[id][cID]);
	mysql_tquery(DBngrp, string);
	InfoJugador[playerid][jCoins] -= InfoCasa[id][cPrecio];
	guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
	LabelPickup_casa(id, 1);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Compraste esta propiedad por %d coins, escribe '/ayuda casa' para mas informacion.", InfoCasa[id][cPrecio]);
	return 1;
}

CMD:vender(playerid, params[])
{
	new item[32], ID, precio, cantidad, string[256];
	if (TiempoVenta[playerid] != 0)
	{
		SendClientMessageEx(playerid, -1, "Por favor espera {FF3300}%d{FFFFFF} segundos para volver a hacer una venta.", TiempoVenta[playerid]);
		return 1;
	}
	if (sscanf(params, "s[32]dd", item, ID, precio)) return _Mensaje(playerid, 3, "0", "/vender coin [id jugador] [cantidad] [precio]");
	if (strcmp(item, "coin", true) == 0)
	{
		if (!sscanf(params, "s[29]ddd", item,ID,cantidad,precio))
		if (precio < 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El valor debe ser mayor a cero.");
		if (ID == playerid) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes venderte coins a ti mismo.");
		if (!IsPlayerConnectedEx(ID)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Esa persona esta muy lejos.");
		if (!CercaDelWeon(5.0, playerid, ID)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Estas muy lejos de la persona.");
		if (cantidad == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ingresa la cantidad que quieres vender.");
		if (InfoJugador[playerid][jCoins] < cantidad) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No cuentas con los coins suficientes para vender.");
		if (precio > cantidad*200000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes vender a mas de $200.000 cada Coin.");
		EVOfrecidos[ID] = cantidad;
		dineropedido[ID] = precio;
		ofertador[ID] = playerid;
		LeOfreci[playerid] = ID;
		Deposito[playerid] = ID;
		format(string, sizeof string, "Estas por ofrecerle %dcoins a %s por $%s.\n\nCada Coins lo estarias cobrando a $%s\n\n?Estas seguro de realizar esta transaccion?", EVOfrecidos[ID],NombreRJugador(ID),diner_coma(dineropedido[ID]),diner_coma(dineropedido[ID]/EVOfrecidos[ID]));
		Dialog_Show(playerid, VentitaCoins, DIALOG_STYLE_MSGBOX, "Confirmacion > Ventas", string, "Si","No");
		YaOfrecio[playerid] = 0;
		if (idTimerOfertaPerdida[ID] != -1)
		{
			KillTimer(idTimerOfertaPerdida[ID]);
			idTimerOfertaPerdida[ID] = -1;
		}
		if (idTimerTiempoVenta[playerid] != -1)
		{
			KillTimer(idTimerTiempoVenta[playerid]);
			idTimerOfertaPerdida[playerid] = -1;
		}
		idTimerTiempoVenta[playerid] = SetTimerEx("TiempoVender", 60000, false, "d", playerid);
		if (precio <= 100)
		{
			format(string, sizeof string, "Administracion: %s(%d | Nivel: %d) ofrece %d Coin por $%d a %s (%d | Nivel: %d)", NombreRJugador(playerid),playerid,GetPlayerScore(playerid),cantidad,precio,NombreRJugador(ID),ID,GetPlayerScore(ID));
			MensajeAdmin(string);
		}
		return 1;
	}
	_Mensaje(playerid, 3, "0", "/vender coin [id jugador] [cantidad] [precio]");
	return 1;
}

Dialog:VentitaCoins(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}Le ofrecistes %d Coin a %s por $%s.",EVOfrecidos[LeOfreci[playerid]],NombreRJugador(LeOfreci[playerid]),diner_coma(dineropedido[LeOfreci[playerid]]));
	YaOfrecio[playerid] = 1;
	idTimerOfertaPerdida[LeOfreci[playerid]] = SetTimerEx("OfertaPerdida", 60000, false, "d", LeOfreci[playerid]);
	TiempoVenta[playerid] = 60;
	SendClientMessageEx(LeOfreci[playerid], 0xccccccFF, "Info: {FFFFFF}%s te ofrece %d Coin por $%s, /aceptarcoins.", NombreRJugador(playerid),EVOfrecidos[LeOfreci[playerid]], diner_coma(dineropedido[LeOfreci[playerid]]));
	return 1;
}

CMD:vendercasa(playerid)
{
    if (EnVentaPropiedad[playerid] != 0) return SendClientMessage(playerid, 0xccccccff, "* No puedes realizar esta funcion en medio de una venta.");
	if (CountCasas(playerid) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes ninguna casa a tu nombre.");
	new id = -1;
	Loop(h, totalcasas, 1) if (_enPos(playerid, 2.0, InfoCasa[h][cEntradaX], InfoCasa[h][cEntradaY], InfoCasa[h][cEntradaZ]) && InfoJugador[playerid][jInterior] == InfoCasa[h][cEntradaInt] && InfoJugador[playerid][jVirtualWorld] == InfoCasa[h][cEntradaVW])
	{
		id = h;
		break;
	}
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "No estas en la entrada de ninguna casa.");
	if (LlavesCasa(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
	new sell = InfoCasa[id][cPrecio];
	if (InfoCasa[id][cMoneda] == 0)
	{
		GivePlayerCash(playerid, sell, "vendercasa");
		SendClientMessageEx(playerid, 0x00CCCCFF, "Vendiste tu casa %d, recuperaste $%s.", id, diner_coma(sell));
	}
	else
	{
		InfoJugador[playerid][jCoins] += sell/2;
		guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
		SendClientMessageEx(playerid, 0x00CCCCFF, "Vendiste tu casa %d, recuperaste %d coins.", id, sell/2);
	}
	VenderCasa(id);
	return 1;
}

CMD:vendermicasa(playerid, params[])
{
    if (EnVentaPropiedad[playerid] != 0) return SendClientMessage(playerid, 0xccccccff, "* No puedes realizar esta funcion en medio de una venta.");
	if (CountCasas(playerid) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes ninguna casa a tu nombre.");
	new id = -1;
	Loop(h, totalcasas, 1) if (InfoCasa[h][cTipo] != 0 && EnEntradaCasa(playerid, h))
	{
	    id = h;
	    break;
	}
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en la entrada de ninguna casa.");
	if (LlavesCasa(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
    if (InfoCasa[id][cMoneda] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes vender una casa con valor en coins.");
    new playerid2, price;
    if (sscanf(params, "dd", playerid2, price)) return _Mensaje(playerid, 3, "0", "/vendermicasa [id jugador] [precio]");
	if (price < 1 || price > 9999999) return SendClientMessage(playerid, 0xccccccff, "* El precio no puede superar $9,999,999.");
    if (playerid == playerid2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes venderte la casa a ti mismo.");
    if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
    if (!CercaDelWeon(8.0, playerid, playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no se encuentra cerca de ti.");
	if (GetPlayerCash(playerid2) < price) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no tiene esa cantidad de dinero."); return 1; }
	CasaOffer[playerid2] = playerid;
	CasaPrice[playerid2] = price;
	CasaSQL_ID[playerid2] = id;
	EnVentaPropiedad[playerid] = 1;
	SendClientMessageEx(playerid, 0x33CCFFFF, "* Ofreciste a %s para comprar tu casa por $%d.", NombreJugador(playerid2), price);
	SendClientMessageEx(playerid2, 0x33CCFFFF, "* %s te ha ofrecido su casa por $%d, (/aceptar).", NombreJugador(playerid), price);
	return 1;
}

VenderCasa(casaid)
{
    alm(InfoCasa[casaid][cPropietario], "none");
    InfoCasa[casaid][cSeguro] = 0;
    InfoCasa[casaid][cVenta] = 0;
    InfoCasa[casaid][cCasaDinero] = 0;
    InfoCasa[casaid][cRentable] = 0;
    InfoCasa[casaid][cRentaPrecio] = 0;
    InfoCasa[casaid][cTiempoDisponible] = -1;
	alm(InfoCasa[casaid][cCompartida1], "none");
	alm(InfoCasa[casaid][cCompartida2], "none");
	alm(InfoCasa[casaid][cCompartida3], "none");
	LabelPickup_casa(casaid, 1);
	new query[1028];
	mysql_format(DBngrp, query, sizeof query, "UPDATE casas SET Propietario = '%e', CasaDinero = 0, Venta = 0, Seguro = 0, TiempoDisponible = -1, Compartida1 = '%e', Compartida2 = '%e', Compartida3 = '%e', Rentable = 0, RentaPrecio = 0 WHERE ID = '%d'", InfoCasa[casaid][cPropietario], InfoCasa[casaid][cCompartida1], InfoCasa[casaid][cCompartida2], InfoCasa[casaid][cCompartida3], InfoCasa[casaid][cID]);
	mysql_tquery(DBngrp, query);
	return 1;
}

//Desde aqui comienza los comandos de las empresas echos por x1.../

CMD:editarempresa(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 10) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Editarempresa.", 2000);
	new eid, input;
	if (sscanf(params, "s[32]", params))
	{
		_Mensaje(playerid, 3, "0", "/editarempresa [Nombre] [empresaid]");
		_Mensaje(playerid, 1, "exterior - precio - moneda.", "Opciones:");
		return 1;
	}
	if (!strcmp(params, "exterior", true, 8))
	{
		if (sscanf(params, "s[32]i", params, eid)) return _Mensaje(playerid, 3, "0", "/editarempresa exterior [empresaid]");
		if (eid < 1 || eid > totalempresas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalempresas);
		if (InfoEmpresa[eid][eTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de empresa no existe.", eid);
		GetPlayerPos(playerid, InfoEmpresa[eid][eEntradaX], InfoEmpresa[eid][eEntradaY], InfoEmpresa[eid][eEntradaZ]);
		GetPlayerFacingAngle(playerid, InfoEmpresa[eid][eEntradaR]);
		InfoEmpresa[eid][eEntradaInt] = GetPlayerInterior(playerid);
		InfoEmpresa[eid][eEntradaVW] = GetPlayerVirtualWorld(playerid);
		LabelPickup_empresa(eid, 1);
		guardar_float_mysql("empresas", "EntradaX", InfoEmpresa[eid][eID], InfoEmpresa[eid][eEntradaX]);
		guardar_float_mysql("empresas", "EntradaY", InfoEmpresa[eid][eID], InfoEmpresa[eid][eEntradaY]);
		guardar_float_mysql("empresas", "EntradaZ", InfoEmpresa[eid][eID], InfoEmpresa[eid][eEntradaZ]);
		guardar_float_mysql("empresas", "EntradaR", InfoEmpresa[eid][eID], InfoEmpresa[eid][eEntradaR]);
		guardar_int_mysql("empresas", "EntradaInt", InfoEmpresa[eid][eID], InfoEmpresa[eid][eEntradaInt]);
		guardar_int_mysql("empresas", "EntradaVW", InfoEmpresa[eid][eID], InfoEmpresa[eid][eEntradaVW]);
		SendClientMessageEx(playerid, 0x008BFFFF, "Cambiaste el exterior de la empresa.", eid);
	}
	else if (!strcmp(params, "precio", true, 5))
	{
		if (sscanf(params, "s[32]ii", params, eid, input)) return _Mensaje(playerid, 3, "0", "/editarempresa precio [empresaid] [precio]");
		if (eid < 1 || eid > totalempresas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalempresas);
		if (InfoEmpresa[eid][eTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de empresa no existe.",eid);
		InfoEmpresa[eid][ePrecio] = input;
		guardar_int_mysql("empresas", "Precio", InfoEmpresa[eid][eID], InfoEmpresa[eid][ePrecio]);
		if (InfoEmpresa[eid][eVenta] != 0) LabelPickup_empresa(eid, 1);
		else LabelPickup_empresa(eid, 2);
		SendClientMessageEx(playerid, 0x008BFFFF, "Cambiaste el precio ($%d) de la empresa %d.", input, eid);
	}
	else if (!strcmp(params, "moneda", true, 5))
	{
		if (sscanf(params, "s[32]i", params, eid)) return _Mensaje(playerid, 3, "0", "/editarempresa moneda [empresaid]");
		if (eid < 1 || eid > totalempresas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalempresas);
		if (InfoEmpresa[eid][eTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de empresa no existe.", eid);
		if (InfoEmpresa[eid][eMoneda] != 0)
		{
			InfoEmpresa[eid][eMoneda] = 0;
			new k = gettime();
			k += 1296000;
			InfoEmpresa[eid][eTiempoDisponible] = k;
			SendClientMessageEx(playerid, 0x008BFFFF, "Ahora la empresa %d no es mas valorada en coins.", eid);
			guardar_int_mysql("casas", "TiempoDisponible", InfoEmpresa[eid][eID], InfoEmpresa[eid][eTiempoDisponible]);
		}
		else
		{
		    InfoEmpresa[eid][eMoneda] = 1;
			SendClientMessageEx(playerid, 0x008BFFFF, "Ahora la empresa %d es valorada en coins (precio actual: %d).", eid, InfoEmpresa[eid][ePrecio]);
		}
		guardar_int_mysql("empresas", "Moneda", InfoEmpresa[eid][eID], InfoEmpresa[eid][eMoneda]);
		if (InfoEmpresa[eid][eVenta] != 0) LabelPickup_empresa(eid, 1);
		else LabelPickup_empresa(eid, 2);
	}
	return 1;
}

CMD:crearempresa(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 12) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Crearempresa.", 2000);
	new tipo, extra, moneda, string[256];
	if (sscanf(params, "ddd", tipo, moneda, extra))
	{
		_Mensaje(playerid, 3, "0", "/crearempresa [tipo] [moneda] [figura]");
		_Mensaje(playerid, 1, "1) Reparto", "Tipos:");
		_Mensaje(playerid, 1, "1) solo 1 figura", "figuras:");
		return 1;
	}
	if (tipo < 1 || tipo > 1) return ShowInfoForPlayer(playerid, "Solo hay un tipo de empresa (1).", 2000);
	switch (tipo)
	{
		case 1: { if (extra < 1 || extra > 1) return ShowInfoForPlayer(playerid, "Solo hay entre 1 figura para las empresas .", 2000); }
	}
	Loop(eid, MAX_EMPRESAS, 1) if (!InfoEmpresa[eid][eTipo])
	{
		GetPlayerPos(playerid, InfoEmpresa[eid][eEntradaX], InfoEmpresa[eid][eEntradaY], InfoEmpresa[eid][eEntradaZ]);
		GetPlayerFacingAngle(playerid, InfoEmpresa[eid][eEntradaR]);
		InfoEmpresa[eid][eEntradaVW] = GetPlayerVirtualWorld(playerid);
		InfoEmpresa[eid][eEntradaInt] = GetPlayerInterior(playerid);
		InfoEmpresa[eid][eSeguro] = 0;
		InfoEmpresa[eid][eTiempoDisponible] = -1;
		InfoEmpresa[eid][eVenta] = 0;
		alm(InfoEmpresa[eid][ePropietario], "none");
		InfoEmpresa[eid][eTipo] = tipo;
		new Float: x, Float: y, Float: z, Float: r, int, price_mone, price_normal;
		switch (tipo)
		{
		    case 1: // reparto
			{
				switch (extra)
				{
					case 1: x = 1033.6868, y = 1204.3094, z = 10.8488, r = 357.1075, price_mone = 350, price_normal = 99999999, int = 15;
				}
			}
		}
		InfoEmpresa[eid][eSalidaX] = x;
		InfoEmpresa[eid][eSalidaY] = y;
		InfoEmpresa[eid][eSalidaZ] = z;
		InfoEmpresa[eid][eSalidaR] = r;
		if (moneda != 0)
		{
			InfoEmpresa[eid][eMoneda] = 1, InfoEmpresa[eid][ePrecio] = price_mone;
			SendClientMessageEx(playerid, 0x90C3D4FF, "Empresa nueva ID %d | Precio en monedas %d | Espacio: %s", eid, price_mone, _EspacioC(eid));
			format(string, sizeof string, "Creo la empresa ID %d (%d coins).", eid, price_mone);
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 11);
		}
		else
		{
			InfoEmpresa[eid][eMoneda] = 0, InfoEmpresa[eid][ePrecio] = price_normal;
			SendClientMessageEx(playerid, 0x90C3D4FF, "Empresa nueva ID %d | Precio en $%d | Espacio: %s", eid, price_normal, _EspacioC(eid));
			format(string, sizeof string, "Creo la empresa ID %d ($%s).", eid, diner_coma(price_mone));
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 11);
		}
		InfoEmpresa[eid][eSalidaInt] = int;
		InfoEmpresa[eid][eSalidaVW] = eid+6000;
		LabelPickup_empresa(eid, 1);
		new que2ry[1000], query[1500];
		//opcion idsql ya creada.
		if (InfoEmpresa[eid][eID] != 0)
		{
			format(que2ry, sizeof que2ry, "UPDATE empresas SET Propietario = '%s', Tipo = '%d', Seguro = '%d', Venta = '%d', EntradaX = '%f', EntradaY = '%f', EntradaZ = '%f', EntradaR = '%f', EntradaInt = '%d', EntradaVW = '%d',",
			InfoEmpresa[eid][ePropietario],
			InfoEmpresa[eid][eTipo],
			InfoEmpresa[eid][eSeguro],
			InfoEmpresa[eid][eVenta],
			InfoEmpresa[eid][eEntradaX],
			InfoEmpresa[eid][eEntradaY],
			InfoEmpresa[eid][eEntradaZ],
			InfoEmpresa[eid][eEntradaR],
			InfoEmpresa[eid][eEntradaInt],
			InfoEmpresa[eid][eEntradaVW]);
			mysql_format(DBngrp, query, sizeof query, "%s SalidaX = '%f', SalidaY = '%f', SalidaZ = '%f', SalidaR = '%f', SalidaInt = '%d', SalidaVW = '%d', Precio = '%d', Moneda = '%d', TiempoDisponible = '%d' WHERE ID = '%d'",
			que2ry,
			InfoEmpresa[eid][eSalidaX],
			InfoEmpresa[eid][eSalidaY],
			InfoEmpresa[eid][eSalidaZ],
			InfoEmpresa[eid][eSalidaR],
			InfoEmpresa[eid][eSalidaInt],
			InfoEmpresa[eid][eSalidaVW],
			InfoEmpresa[eid][ePrecio],
			InfoEmpresa[eid][eMoneda],
			InfoEmpresa[eid][eTiempoDisponible],
			InfoEmpresa[eid][eID]);
			mysql_tquery(DBngrp, query);
			eid = MAX_EMPRESAS;
			return 1;
		}
		format(que2ry, sizeof que2ry, "INSERT INTO empresas (Propietario, Tipo, Seguro, Venta, EntradaX, EntradaY, EntradaZ, EntradaR, EntradaInt, EntradaVW, SalidaX, SalidaY, SalidaZ, SalidaR, SalidaInt, SalidaVW, Precio, Moneda, TiempoDisponible)");
		mysql_format(DBngrp, query, sizeof query, "%s VALUES ('%e', '%d', '%d',  '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d')",
		que2ry,
		InfoEmpresa[eid][ePropietario],
		InfoEmpresa[eid][eTipo],
		InfoEmpresa[eid][eSeguro],
		InfoEmpresa[eid][eVenta],
		InfoEmpresa[eid][eEntradaX],
		InfoEmpresa[eid][eEntradaY],
		InfoEmpresa[eid][eEntradaZ],
		InfoEmpresa[eid][eEntradaR],
		InfoEmpresa[eid][eEntradaInt],
		InfoEmpresa[eid][eEntradaVW],
		InfoEmpresa[eid][eSalidaX],
		InfoEmpresa[eid][eSalidaY],
		InfoEmpresa[eid][eSalidaZ],
		InfoEmpresa[eid][eSalidaR],
		InfoEmpresa[eid][eSalidaInt],
		InfoEmpresa[eid][eSalidaVW],
		InfoEmpresa[eid][ePrecio],
		InfoEmpresa[eid][eMoneda],
		InfoEmpresa[eid][eTiempoDisponible]);
		mysql_tquery(DBngrp, query, "OnEmpresaCreate", "i", eid);
		eid = MAX_EMPRESAS;
		return 1;
	}
	SendClientMessageEx(playerid, 0xBB0000FF, "Se alcanzo el maximo de empresas (%d)", MAX_EMPRESAS);
	return 1;
}

forward OnEmpresaCreate(eid);
public OnEmpresaCreate(eid)
{
	InfoEmpresa[eid][eID] = cache_insert_id();
	cache_unset_active();
	totalempresas++;
    return 1;
}

CMD:borrarempresa(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 12) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Borrarempresa.", 2000);
    new id, string[256], query[1028];
    if (sscanf(params, "i", id)) return _Mensaje(playerid, 3, "0", "/borrarempresa [empresa id]");
	if (id < 1 || id > totalempresas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalempresas);
	if (InfoEmpresa[id][eTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de empresa no existe.", id);
	//por si tenia dueño
	foreach(Player, p) if (IsPlayerConnectedEx(p) && LlavesEmpresa(p, id))
	{
		SendClientMessageEx(playerid, 0xCCCC00FF, "Admin %s elimino tu empresa %d.", InfoJugador[playerid][jNombre_Apellido], id);
	}
	format(string, sizeof string, "Borro la empresa ID %d.", id);
    new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 11);
    alm(InfoEmpresa[id][ePropietario], "none");
    InfoEmpresa[id][eTipo] = 0;
    InfoEmpresa[id][eVenta] = 0;
    InfoEmpresa[id][eSeguro] = 0;
    InfoEmpresa[id][eEntradaX] = 0;
    InfoEmpresa[id][eEntradaY] = 0;
    InfoEmpresa[id][eEntradaZ] = 0;
    InfoEmpresa[id][eEntradaR] = 0;
    InfoEmpresa[id][eEntradaInt] = 0;
    InfoEmpresa[id][eEntradaVW] = 0;
    InfoEmpresa[id][eSalidaX] = 0;
    InfoEmpresa[id][eSalidaY] = 0;
    InfoEmpresa[id][eSalidaZ] = 0;
    InfoEmpresa[id][eSalidaR] = 0;
    InfoEmpresa[id][eSalidaInt] = 0;
    InfoEmpresa[id][eSalidaVW] = 0;
    InfoEmpresa[id][ePrecio] = 0;
    InfoEmpresa[id][eMoneda] = 0;
    InfoEmpresa[id][eEmpresaDinero] = 0;
	Loop(x, 15, 0)
	{
	    InfoEmpresa[id][eArmario][x] = 0;
	    InfoEmpresa[id][eArmarioCantidad][x] = 0;
		mysql_format(DBngrp, string, sizeof string, "UPDATE empresas SET Armario%d = 0 , ArmarioCantidad%d = 0 WHERE ID = '%d'", x+1, x+1, InfoEmpresa[id][eID]);
		mysql_tquery(DBngrp, string);
	}
	alm(InfoEmpresa[id][eCompartida1], "none");
	alm(InfoEmpresa[id][eCompartida2], "none");
	alm(InfoEmpresa[id][eCompartida3], "none");
    InfoEmpresa[id][eTiempoDisponible] = -1;
	InfoEmpresa[id][eDestroy] = 0;
	noexitempresa(id);
	mysql_format(DBngrp, query, sizeof query, "UPDATE empresas SET Destroy = 0, EntradaX = 0.0, EntradaY = 0.0, EntradaZ = 0.0, EntradaR = 0.0, EntradaInt = 0, EntradaVW = 0, SalidaX = 0.0, SalidaY = 0.0, SalidaZ = 0.0, SalidaR = 0.0, SalidaInt = 0, Moneda = 0 WHERE ID = '%d'", InfoEmpresa[id][eID]);
	mysql_tquery(DBngrp, query);
	mysql_format(DBngrp, query, sizeof query, "UPDATE empresas SET Propietario = '%e', CasaDinero = 0, SalidaVW = 0, Precio = 0, Tipo = 0, TiempoDisponible = -1, Compartida1 = '%e', Compartida2 = '%e', Compartida3 = '%e', Seguro = 0, Venta = 0 WHERE ID = '%d'", InfoEmpresa[id][ePropietario], InfoEmpresa[id][eCompartida1], InfoEmpresa[id][eCompartida2], InfoEmpresa[id][eCompartida3], InfoEmpresa[id][eID]);
	mysql_tquery(DBngrp, query);
	SendClientMessageEx(playerid, -1, "Borraste la empresa ID %d, SQL vacia: %d", id, InfoEmpresa[id][eID]);
    return 1;
}

CMD:aveempresa(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 12) return ShowInfoForPlayer(playerid, "Tu no tienes acceso a el comando /Aveempresa.", 2000);
    new empresaid, string[256];
    if (sscanf(params, "i", empresaid)) return _Mensaje(playerid, 3, "0", "/aveempresa [empresa id]");
 	if (empresaid < 1 || empresaid > totalempresas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalempresas);
	if (InfoEmpresa[empresaid][eTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de empresa no existe.", empresaid);
	if (InfoEmpresa[empresaid][eVenta] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de empresa no esta en venta.", empresaid);
	foreach(Player, p) if (IsPlayerConnectedEx(p) && LlavesEmpresa(p, empresaid))
	{
		SendClientMessageEx(playerid, 0xCCCC00FF, "Admin %s elimino tu empresa %d.", InfoJugador[playerid][jNombre_Apellido], empresaid);
	}
	format(string, sizeof string, "Reseteo la empresa ID %d. (/aveempresa)", empresaid);
    new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 11);
	VenderEmpresa(empresaid);
	SendClientMessageEx(playerid, -1, "Vendiste la empresa ID %d", empresaid);
    return 1;
}

CMD:comprarempresa(playerid)
{
	new id = -1;
	Loop(h, totalempresas, 1) if (_enPos(playerid, 2.0, InfoEmpresa[h][eEntradaX], InfoEmpresa[h][eEntradaY], InfoEmpresa[h][eEntradaZ]) && InfoJugador[playerid][jInterior] == InfoEmpresa[h][eEntradaInt] && InfoJugador[playerid][jVirtualWorld] == InfoEmpresa[h][eEntradaVW])
	{
		id = h;
		break;
	}
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "No estas en la entrada de ninguna empresa.");
	if (InfoEmpresa[id][eVenta] != 0) return ShowInfoForPlayer(playerid, "Esta empresa ya tiene propietario", 2000);
	if (CountEmpresas(playerid) >= NumberCasasVIP(InfoJugador[playerid][jNivelVIP])) return SendClientMessageEx(playerid, -1, "* No puedes tener mas de %d empresas, siendo %s.", NumberCasasVIP(InfoJugador[playerid][jNivelVIP]), GetNameVIP(InfoJugador[playerid][jNivelVIP]));
	if (InfoEmpresa[id][eMoneda] == 0)
	{
		if (GetPlayerCash(playerid) < InfoEmpresa[id][ePrecio]) { ShowInfoForPlayer(playerid, "No tienes suficiente dinero para comprar esta empresa.", 2000); return 1; }
		GivePlayerCash(playerid, -InfoEmpresa[id][ePrecio], "comprarempresa");
		new k = gettime(), string[512];
		k += 1296000;
		InfoEmpresa[id][eTiempoDisponible] = k;
		InfoEmpresa[id][eVenta] = 1;
		alm(InfoEmpresa[id][ePropietario], InfoJugador[playerid][jNombre_Apellido]);
		mysql_format(DBngrp, string, sizeof string, "UPDATE empresas SET Venta = 1, Propietario = '%e', TiempoDisponible = '%d' WHERE ID = '%d'", InfoEmpresa[id][ePropietario], InfoEmpresa[id][eTiempoDisponible], InfoEmpresa[id][eID]);
		mysql_tquery(DBngrp, string);
		SendClientMessageEx(playerid, 0xCCCC00FF, "Compraste esta propiedad por $%d, escribe '/ayuda empresas' para mas informacion.", InfoEmpresa[id][ePrecio]);
		LabelPickup_empresa(id, 1);
		return 1;
	}
	if (InfoJugador[playerid][jCoins] < InfoEmpresa[id][ePrecio]) { ShowInfoForPlayer(playerid, "No tienes suficiente coins para comprar esta empresa.", 2000); return 1; }
	new k = gettime(), string[512];
	k += 1296000;
	InfoEmpresa[id][eTiempoDisponible] = k;
	InfoEmpresa[id][eVenta] = 1;
	alm(InfoEmpresa[id][ePropietario], InfoJugador[playerid][jNombre_Apellido]);
	mysql_format(DBngrp, string, sizeof string, "UPDATE empresas SET Venta = 1, Propietario = '%e', TiempoDisponible = '%d' WHERE ID = '%d'", InfoEmpresa[id][ePropietario], InfoEmpresa[id][eTiempoDisponible], InfoEmpresa[id][eID]);
	mysql_tquery(DBngrp, string);
	InfoJugador[playerid][jCoins] -= InfoEmpresa[id][ePrecio];
	guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
	LabelPickup_empresa(id, 1);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Compraste esta propiedad por %d coins, escribe '/ayuda empresas' para mas informacion.", InfoEmpresa[id][ePrecio]);
	return 1;
}

VenderEmpresa(empresaid)
{
    alm(InfoEmpresa[empresaid][ePropietario], "none");
    InfoEmpresa[empresaid][eSeguro] = 0;
    InfoEmpresa[empresaid][eVenta] = 0;
    InfoEmpresa[empresaid][eEmpresaDinero] = 0;
    InfoEmpresa[empresaid][eTiempoDisponible] = -1;
	alm(InfoEmpresa[empresaid][eCompartida1], "none");
	alm(InfoEmpresa[empresaid][eCompartida2], "none");
	alm(InfoEmpresa[empresaid][eCompartida3], "none");
	LabelPickup_empresa(empresaid, 1);
	new query[1028];
	mysql_format(DBngrp, query, sizeof query, "UPDATE casas SET Propietario = '%e', CasaDinero = 0, Venta = 0, Seguro = 0, TiempoDisponible = -1, Compartida1 = '%e', Compartida2 = '%e', Compartida3 = '%e', Rentable = 0, RentaPrecio = 0 WHERE ID = '%d'", InfoEmpresa[empresaid][ePropietario], InfoEmpresa[empresaid][eCompartida1], InfoEmpresa[empresaid][eCompartida2], InfoEmpresa[empresaid][eCompartida3], InfoEmpresa[empresaid][eID]);
	mysql_tquery(DBngrp, query);
	return 1;
}

CMD:ropa(playerid)
{
	if (!EstaEnTiendaRopa(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas estar en una tienda de ropa o en el armario de tu casa");
	new Str[18 * MAX_ROPA], Ropa[MAX_ROPA][20], strI[20], ropita = 4;
	switch (InfoJugador[playerid][jNivelVIP])
	{
		case 1: ropita = 5;
		case 2: ropita = 6;
		case 3: ropita = MAX_ROPA;
	}
	Loop(i, ropita, 0)
	{
		if(!InfoJugador[playerid][jRopa][i])
		{
			Ropa[i] = "Nada";
		} else format(Ropa[i], 20, "%d", InfoJugador[playerid][jRopa][i]);
		format(strI, sizeof(strI), "Ranura %d - '%s'\n", i, Ropa[i]);
		strins(Str, strI, strlen(Str));
	}
	SetPVarInt(playerid, "ROPA_EDITAR", 0);
	Dialog_Show(playerid, ShowEditRopa, DIALOG_STYLE_LIST, "Escoge una ranura de ropa", Str, "Continuar", "Salir");
	return 1;
}

Dialog:ShowEditRopa(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (InfoJugador[playerid][jRopa][listitem] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes nada en ese slot.");
	SetPVarInt(playerid, "ROPA_EDITAR", listitem);
	Dialog_Show(playerid, ShowEditRopa2, DIALOG_STYLE_LIST, "Vestuario", "Colocar ropa\nEliminar ropa", "Continuar", "Salir");
	return 1;
}

Dialog:ShowEditRopa2(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new R = GetPVarInt(playerid, "ROPA_EDITAR");
	if (listitem == 0) { CambiarRopa(playerid, InfoJugador[playerid][jRopa][R], R); }
	else if (listitem == 1)
	{
		InfoJugador[playerid][jRopa][R] = 0;
		_Mensaje(playerid, 2, "0", "Ropa eliminada");
		new grs[12];
		format(grs, sizeof grs, "Ropa%d", R+1);
		guardar_int_mysql("cuentas", grs, InfoJugador[playerid][jID], InfoJugador[playerid][jRopa][R]);
		if (GetPlayerSkin(playerid) == InfoJugador[playerid][jSkin])
		{
			switch (InfoJugador[playerid][jSexo])
			{
				case 1: SetPlayerSkin(playerid, 252);
				case 2: SetPlayerSkin(playerid, 140);
			}
		}
	}
	return 1;
}

CMD:micasa(playerid)
{
	new casa = EnCasa(playerid), dialogShow[512];
	if (casa == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en ninguna casa.");
	if (LlavesCasa(playerid, casa) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
	format(dialogShow, sizeof dialogShow, "{cccccc}Dinero {00cc00}$%d\n{cccccc}Armario\n{cccccc}Ropero\n{cccccc}Llaves prestadas\n{cccccc}Mis muebles", InfoCasa[casa][cCasaDinero]);
	Dialog_Show(playerid, Casa_Opciones, DIALOG_STYLE_LIST, "Mi casa", dialogShow, "Continuar", "Salir");
	return 1;
}
CMD:casa(playerid) return cmd_micasa(playerid);
CMD:armario(playerid) return cmd_micasa(playerid);

Dialog:Casa_Opciones(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new id = EnCasa(playerid), gformat[370];
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en ninguna casa.");
	if (LlavesCasa(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
	switch (listitem)
	{
		case 0:
		{
			format(gformat, sizeof gformat, "Dinero: {00CC00}$%d", InfoCasa[id][cCasaDinero]);
			Dialog_Show(playerid, ShowDineroCasa, DIALOG_STYLE_LIST, gformat, "Retirar dinero\nDepositar dinero", "Continuar", "Volver");
		}
		case 1:
		{
			ActualizarManos(playerid);
			new dialog[1024], string[256];
			//armario
			Loop(x, 15, 0)
			{
				new ArmarioObj = InfoCasa[id][cArmario][x];
				if (ArmarioObj == 0) format(string, sizeof string, "{b0b0b0}Vacio\n");
				else format(string, sizeof string, "{FFFFFF}%s [%d]\n", InfoInventario[ArmarioObj][NombreObjeto], InfoCasa[id][cArmarioCantidad][x]);
				strcat(dialog, string);
			}
			format(string, sizeof string, "{ffffff}-----\n");
			strcat(dialog, string);
			//mano derecha
			if (InfoJugador[playerid][jManoDerecha] == 0) format(string, sizeof string, "{b0b0b0}Mano derecha: vacia\n");
			else format(string, sizeof string, "{FFFFFF}Mano derecha: %s [%d]\n", InfoInventario[InfoJugador[playerid][jManoDerecha]][NombreObjeto], InfoJugador[playerid][jManoDerechaCant]);
			strcat(dialog, string);
			//mano izquierda
			if (InfoJugador[playerid][jManoIzquierda] == 0) format(string, sizeof string, "{b0b0b0}Mano izquierda: vacia\n");
			else format(string, sizeof string, "{FFFFFF}Mano izquierda: %s [%d]\n", InfoInventario[InfoJugador[playerid][jManoIzquierda]][NombreObjeto], InfoJugador[playerid][jManoIzquierdaCant]);
			strcat(dialog, string);
			//show dialog
			Dialog_Show(playerid, ShowHouseArmario, DIALOG_STYLE_LIST, "Armario de casa", dialog, "Continuar", "Volver");
		}
  case 2:
  {
  	        new rStr[18 * MAX_ROPA], Ropa[MAX_ROPA][20], strI[20], ropita = 4;
        	switch (InfoJugador[playerid][jNivelVIP])
			{
				case 1: ropita = 5;
				case 2: ropita = 6;
				case 3: ropita = MAX_ROPA;
			}
			Loop(i, ropita, 0)
			{
				if(!InfoJugador[playerid][jRopa][i])
				{
					Ropa[i] = "Nada";
				} else format(Ropa[i], 20, "%d", InfoJugador[playerid][jRopa][i]);
				format(strI, sizeof strI, "Ranura %d - '%s'\n", i, Ropa[i]);
				strins(rStr, strI, strlen(rStr));
			}
			SetPVarInt(playerid, "ROPA_EDITAR", 0);
			Dialog_Show(playerid, ShowEditRopa, DIALOG_STYLE_LIST, "Escoge una ranura de ropa", rStr, "Continuar", "Salir");
  }
		case 3: CasaShareShow(playerid);
		case 4: cmd_muebles(playerid);
	}
	return 1;
}

Dialog:ShowHouseArmario(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_micasa(playerid);
	new casa = EnCasa(playerid), gformat[370], gold[32];
	if (casa == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en ninguna casa.");
	if (LlavesCasa(playerid, casa) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
	switch (listitem)
	{
		case 0..14: // armario
		{
			new id = listitem;
			ActualizarManos(playerid);
			new ArmarioObj = InfoCasa[casa][cArmario][id], Cant = InfoCasa[casa][cArmarioCantidad][id];
			if (ArmarioObj == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~esta ranura se encuentra vacia.");
			if (ArmarioObj == 131) { if (InfoJugador[playerid][jManoDerecha] == 0 && InfoJugador[playerid][jManoIzquierda] == 0) { SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);	} else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes tener las manos vacias."); 	}
			if (Objeto_Carga(ArmarioObj)) { if (Tiene_Obj_Carga(playerid) != 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya posees objetos de carga en una de tus manos."); return 1; } }
			if (InfoJugador[playerid][jManoDerecha] == 0)
			{
				if (InfoInventario[ArmarioObj][IDArma] > 0)
				{
					new arma = InfoInventario[ArmarioObj][IDArma], municion = Cant;
					if (municion > 0) { GivePlayerWeapon(playerid, arma, municion); }
				}
				InfoJugador[playerid][jManoDerecha] = ArmarioObj;
				InfoJugador[playerid][jManoDerechaCant] = Cant;
				PonerObjeto(playerid, 1, ArmarioObj);
				InfoCasa[casa][cArmario][id] = 0;
				InfoCasa[casa][cArmarioCantidad][id] = 0;
				format(gold, sizeof gold, "Armario%d", id+1);
				guardar_int_mysql("casas", gold, InfoCasa[casa][cID], InfoCasa[casa][cArmario][id]);
				format(gold, sizeof gold, "ArmarioCantidad%d", id+1);
				guardar_int_mysql("casas", gold, InfoCasa[casa][cID], InfoCasa[casa][cArmarioCantidad][id]);
				SendClientMessageEx(playerid, 0xA7CE00FF, "Sacaste del armario %s.", InfoInventario[ArmarioObj][NombreObjeto]);
				format(gformat, sizeof gformat, "Saco %s de la casa %d.", InfoInventario[ArmarioObj][NombreObjeto], casa);
				AddRegistroCasa(playerid, casa+1, gformat);
				ActualizarManos(playerid);
				if (Objeto_Carga(ArmarioObj)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				return 1;
			}
			else if (InfoJugador[playerid][jManoIzquierda] == 0)
			{
				InfoJugador[playerid][jManoIzquierda] = ArmarioObj;
				InfoJugador[playerid][jManoIzquierdaCant] = Cant;
				PonerObjeto(playerid, 2, ArmarioObj);
				InfoCasa[casa][cArmario][id] = 0;
				InfoCasa[casa][cArmarioCantidad][id] = 0;
				format(gold, sizeof gold, "Armario%d", id+1);
				guardar_int_mysql("casas", gold, InfoCasa[casa][cID], InfoCasa[casa][cArmario][id]);
				format(gold, sizeof gold, "ArmarioCantidad%d", id+1);
				guardar_int_mysql("casas", gold, InfoCasa[casa][cID], InfoCasa[casa][cArmarioCantidad][id]);
				SendClientMessageEx(playerid, 0xA7CE00FF, "Sacaste del armario %s.", InfoInventario[ArmarioObj][NombreObjeto]);
				format(gformat, sizeof gformat, "Saco %s de la casa %d.", InfoInventario[ArmarioObj][NombreObjeto], casa);
				AddRegistroCasa(playerid, casa+1, gformat);
				ActualizarManos(playerid);
				if (Objeto_Carga(ArmarioObj)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				return 1;
			}
			ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas, debes tirar o guardar lo que llevas en ellas.");
		}
		case 15: return 1;
		case 16: // mano derecha
		{
			if (InfoJugador[playerid][jManoDerecha] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes nada en tu mano derecha.");
			new Mano = InfoJugador[playerid][jManoDerecha], Cant = InfoJugador[playerid][jManoDerechaCant];
			if (InfoInventario[Mano][IDArma] > 0) //- Si es arma
			{
				if (IntentoChitearBalas(playerid)) return 1;
				Cant = InfoJugador[playerid][jManoDerechaCant];
				RemovePlayerWeapon(playerid, InfoInventario[Mano][IDArma]);
			}
			new id = -1;
			Loop(x, 15, 0) if (InfoCasa[casa][cArmario][x] == 0)
			{
				id = x;
				break;
			}
			if (id == -1) return SendClientMessageEx(playerid, 0xccccccff, "No tienes mas espacios en esta casa (15 slots).");
			if (InfoJugador[playerid][jManoDerecha] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			InfoCasa[casa][cArmario][id] = Mano;
			InfoCasa[casa][cArmarioCantidad][id] = Cant;
			format(gold, sizeof gold, "Armario%d", id+1);
			guardar_int_mysql("casas", gold, InfoCasa[casa][cID], InfoCasa[casa][cArmario][id]);
			format(gold, sizeof gold, "ArmarioCantidad%d", id+1);
			guardar_int_mysql("casas", gold, InfoCasa[casa][cID], InfoCasa[casa][cArmarioCantidad][id]);
			RemovePlayerAttachedObject(playerid, 6);
			if (Objeto_Carga(InfoJugador[playerid][jManoDerecha])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			InfoJugador[playerid][jManoDerecha] = 0;
			InfoJugador[playerid][jManoDerechaCant] = 0;
			SendClientMessageEx(playerid, 0xA7CE00FF, "Guardaste en el armario %s.", InfoInventario[Mano][NombreObjeto]);
			ActualizarManos(playerid);
		}
		case 17: // mano izquierda
		{
			if (InfoJugador[playerid][jManoIzquierda] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes nada en tu mano izquierda.");
			new Mano = InfoJugador[playerid][jManoIzquierda], Cant = InfoJugador[playerid][jManoIzquierdaCant];
			new id = -1;
			Loop(x, 15, 0) if (InfoCasa[casa][cArmario][x] == 0)
			{
				id = x;
				break;
			}
			if (id == -1) return SendClientMessageEx(playerid, 0xccccccff, "No tienes mas espacios en esta casa (15 slots).");
			if (InfoJugador[playerid][jManoIzquierda] == 131) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			InfoCasa[casa][cArmario][id] = Mano;
			InfoCasa[casa][cArmarioCantidad][id] = Cant;
			format(gold, sizeof gold, "Armario%d", id+1);
			guardar_int_mysql("casas", gold, InfoCasa[casa][cID], InfoCasa[casa][cArmario][id]);
			format(gold, sizeof gold, "ArmarioCantidad%d", id+1);
			guardar_int_mysql("casas", gold, InfoCasa[casa][cID], InfoCasa[casa][cArmarioCantidad][id]);
			RemovePlayerAttachedObject(playerid, 7);
			if (Objeto_Carga(InfoJugador[playerid][jManoIzquierda])) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			InfoJugador[playerid][jManoIzquierda] = 0;
			InfoJugador[playerid][jManoIzquierdaCant] = 0;
			SendClientMessageEx(playerid, 0xA7CE00FF, "Guardaste en el armario %s.", InfoInventario[Mano][NombreObjeto]);
			ActualizarManos(playerid);
		}
	}
	return 1;
}

Dialog:ShowDineroCasa(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_micasa(playerid);
	new id = EnCasa(playerid), gformat[370];
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en ninguna casa.");
	if (LlavesCasa(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
	switch (listitem)
	{
		case 0:
		{
			format(gformat, sizeof gformat, "{CCCCCC}Ingresa el monto que quieres retirar del baul tu casa.\n\nTienes {00CC00}$%d.", InfoCasa[id][cCasaDinero]);
			Dialog_Show(playerid, ShowR_DineroCasa, DIALOG_STYLE_INPUT, "Monto a retirar", gformat, "Retirar", "Volver");
		}
		case 1:
		{
			format(gformat, sizeof gformat, "{CCCCCC}Ingresa el monto que quieres depositar en el baul tu casa.\n\nTienes {00CC00}$%d.", InfoCasa[id][cCasaDinero]);
			Dialog_Show(playerid, ShowD_DineroCasa, DIALOG_STYLE_INPUT, "Monto a guardar", gformat, "Depositar", "Volver");
		}
	}
	return 1;
}

Dialog:ShowR_DineroCasa(playerid, response, listitem, inputtext[])
{
	new id = EnCasa(playerid), gformat[256];
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en ninguna casa.");
	if (LlavesCasa(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
	if (!response)
	{
		format(gformat, sizeof gformat, "Dinero: {00CC00}$%d", InfoCasa[id][cCasaDinero]);
		Dialog_Show(playerid, ShowDineroCasa, DIALOG_STYLE_LIST, gformat, "Retirar dinero\nDepositar dinero", "Continuar", "Volver");
		return 1;
	}
	new amount = strval(inputtext);
	if (!isnumeric(inputtext)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo numeros porfavor, vuelve a intentarlo.");
	if (amount < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes retirar menos de un dolar.");
	if (InfoCasa[id][cCasaDinero] >= amount)
	{
		InfoCasa[id][cCasaDinero] -= amount;
		guardar_int_mysql("casas", "CasaDinero", InfoCasa[id][cID], InfoCasa[id][cCasaDinero]);
		GivePlayerCash(playerid, amount, "retiro casa");
		SendClientMessageEx(playerid, 0xCCCC00FF, "Retiraste $%d del baul de tu casa.", amount);
		format(gformat, sizeof gformat, "[+] %s retiro $%s de la casa %d.", InfoJugador[playerid][jNombre_Apellido], diner_coma(amount), id);
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], gformat, 5);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero en tu baul para retirar.");
	return 1;
}

Dialog:ShowD_DineroCasa(playerid, response, listitem, inputtext[])
{
	new id = EnCasa(playerid), gformat[256];
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en ninguna casa.");
	if (LlavesCasa(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
	if (!response)
	{
		format(gformat, sizeof gformat, "Dinero: {00CC00}$%d", InfoCasa[id][cCasaDinero]);
		Dialog_Show(playerid, ShowDineroCasa, DIALOG_STYLE_LIST, gformat, "Retirar dinero\nDepositar dinero", "Continuar", "Volver");
		return 1;
	}
	new amount = strval(inputtext);
	if (!isnumeric(inputtext)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo numeros porfavor, vuelve a intentarlo.");
	if (amount < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes depositar menos de un dolar.");
	if (GetPlayerCash(playerid) >= amount)
	{
		InfoCasa[id][cCasaDinero] += amount;
		guardar_int_mysql("casas", "CasaDinero", InfoCasa[id][cID], InfoCasa[id][cCasaDinero]);
		GivePlayerCash(playerid, -amount, "deposito dinero");
		SendClientMessageEx(playerid, 0xCCCC00FF, "Depositaste $%d en el baul de tu casa.", amount);
		format(gformat, sizeof gformat, "[-] %s deposito $%s en la casa %d.", NombreRJugador(playerid), diner_coma(amount), id);
		new Ip[18];
		GetPlayerIp(playerid, Ip, 18);
		AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], gformat, 5);
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero para depositar.");
	return 1;
}

CasaShareShow(playerid)
{
	new id = EnCasa(playerid), gformat[370], dialog_show[1028];
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en ninguna casa.");
	if (LlavesCasa(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
	//slot1
	if (strcmp(InfoCasa[id][cCompartida1], "none", true) == 0) { strcat(dialog_show, "{EBEBEB}Disponible slot 1\n"); }
	else
	{
		format(gformat, sizeof gformat, "{EBEBEB}Slot 1:{59F37B} %s\n", InfoCasa[id][cCompartida1]);
		strcat(dialog_show, gformat);
	}
	//slot2
	if (strcmp(InfoCasa[id][cCompartida2], "none", true) == 0) { strcat(dialog_show, "{EBEBEB}Disponible slot 2\n"); }
	else
	{
		format(gformat, sizeof gformat, "{EBEBEB}Slot 2:{59F37B} %s\n", InfoCasa[id][cCompartida2]);
		strcat(dialog_show, gformat);
	}
	//slot3
	if (strcmp(InfoCasa[id][cCompartida3], "none", true) == 0) { strcat(dialog_show, "{EBEBEB}Disponible slot 3\n"); }
	else
	{
		format(gformat, sizeof gformat, "{EBEBEB}Slot 3:{59F37B} %s\n", InfoCasa[id][cCompartida3]);
		strcat(dialog_show, gformat);
	}
	//dialog preview
	Dialog_Show(playerid, CompartirCasa, DIALOG_STYLE_LIST, "Llaves de tu casa", dialog_show, "Continuar", "Volver");
	return 1;
}

new ShareCasa[MAX_PLAYERS];

Dialog:CompartirCasa(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_micasa(playerid);
	new n = EnCasa(playerid), gformat[370];
	if (n == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en ninguna casa.");
	if (LlavesCasa(playerid, n) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
	switch (listitem)
	{
	    case 0: //slot1
	    {
			if (strcmp(InfoCasa[n][cCompartida1], "none", true) == 0)
			{
				Dialog_Show(playerid, Compartir2Casa, DIALOG_STYLE_INPUT, "Permisos {59F37B}slot 1", "{ebebeb}Por favor ingrese la ID del jugador que desea compartir llaves de su casa.", "Continuar", "Volver");
				ShareCasa[playerid] = 1;
			}
			else
			{
				format(gformat, sizeof gformat, "{ebebeb}?Deseas quitarle las llaves de tu casa a %s?\n", InfoCasa[n][cCompartida1]);
				Dialog_Show(playerid, Compartir3Casa, DIALOG_STYLE_MSGBOX, "Permisos {59F37B}slot 1", gformat, "Si", "Volver");
				ShareCasa[playerid] = 1;
			}
		}
	    case 1: //slot2
	    {
			if (strcmp(InfoCasa[n][cCompartida2], "none", true) == 0)
			{
				Dialog_Show(playerid, Compartir2Casa, DIALOG_STYLE_INPUT, "Permisos {59F37B}slot 2", "{ebebeb}Por favor ingrese la ID del jugador que desea compartir llaves de su casa.", "Continuar", "Volver");
				ShareCasa[playerid] = 2;
			}
			else
			{
				format(gformat, sizeof gformat, "{ebebeb}?Deseas quitarle las llaves de tu casa a %s?\n", InfoCasa[n][cCompartida2]);
				Dialog_Show(playerid, Compartir3Casa, DIALOG_STYLE_MSGBOX, "Permisos {59F37B}slot 2", gformat, "Si", "Volver");
				ShareCasa[playerid] = 2;
			}
		}
	    case 2: //slot3
	    {
			if (strcmp(InfoCasa[n][cCompartida3], "none", true) == 0)
			{
				Dialog_Show(playerid, Compartir2Casa, DIALOG_STYLE_INPUT, "Permisos {59F37B}slot 3", "{ebebeb}Por favor ingrese la ID del jugador que desea compartir llaves de su casa.", "Continuar", "Volver");
				ShareCasa[playerid] = 3;
			}
			else
			{
				format(gformat, sizeof gformat, "{ebebeb}?Deseas quitarle las llaves de tu casa a %s?\n", InfoCasa[n][cCompartida1]);
				Dialog_Show(playerid, Compartir3Casa, DIALOG_STYLE_MSGBOX, "Permisos {59F37B}slot 3", gformat, "Si", "Volver");
				ShareCasa[playerid] = 3;
			}
		}
	}
	return 1;
}

Dialog:Compartir2Casa(playerid, response, listitem, inputtext[])
{
	if (!response) return CasaShareShow(playerid);
	new n = EnCasa(playerid);
	if (n == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en ninguna casa.");
	if (LlavesCasa(playerid, n) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, 0xccccccff, "* Solo puedes ingresar numeros, intenta de nuevo.");
	new playerid2 = strval(inputtext);
	if (playerid == playerid2) return SendClientMessage(playerid, 0xccccccff, "* No puedes compartir las llaves de la casa a ti mismo.");
	if (!IsPlayerConnectedEx(playerid2)) return SendClientMessage(playerid, 0xccccccff, "* El jugador seleccionado no se encuentra conectado.");
	if (strmatch(InfoCasa[n][cCompartida1], InfoJugador[playerid2][jNombre_Apellido])) { SendClientMessage(playerid, 0xccccccff, "* Ese jugador ya tiene permisos en tu casa, revisa slot 1."); return 1; }
	if (strmatch(InfoCasa[n][cCompartida2], InfoJugador[playerid2][jNombre_Apellido])) { SendClientMessage(playerid, 0xccccccff, "* Ese jugador ya tiene permisos en tu casa, revisa slot 2."); return 1; }
	if (strmatch(InfoCasa[n][cCompartida3], InfoJugador[playerid2][jNombre_Apellido])) { SendClientMessage(playerid, 0xccccccff, "* Ese jugador ya tiene permisos en tu casa, revisa slot 3."); return 1; }
	switch (ShareCasa[playerid])
	{
	    case 1: { alm(InfoCasa[n][cCompartida1], InfoJugador[playerid2][jNombre_Apellido]); guardar_string_mysql("casas", "Compartida1", InfoCasa[n][cID], InfoCasa[n][cCompartida1]); }
	    case 2: { alm(InfoCasa[n][cCompartida2], InfoJugador[playerid2][jNombre_Apellido]); guardar_string_mysql("casas", "Compartida2", InfoCasa[n][cID], InfoCasa[n][cCompartida2]); }
	    case 3: { alm(InfoCasa[n][cCompartida3], InfoJugador[playerid2][jNombre_Apellido]); guardar_string_mysql("casas", "Compartida3", InfoCasa[n][cID], InfoCasa[n][cCompartida3]); }
	}
	SendClientMessageEx(playerid2, 0x59F37BFF, "* %s te ha dado las llaves de su casa %d.", InfoJugador[playerid][jNombre_Apellido], n);
	SendClientMessageEx(playerid, 0x59F37BFF, "* Cediste las llaves de tu casa %d con %s (slot %d).", n, InfoJugador[playerid2][jNombre_Apellido], ShareCasa[playerid]);
	return 1;
}

Dialog:Compartir3Casa(playerid, response, listitem, inputtext[])
{
	if (!response) return CasaShareShow(playerid);
	new n = EnCasa(playerid);
	if (n == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en ninguna casa.");
	if (LlavesCasa(playerid, n) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
	switch (ShareCasa[playerid])
	{
	    case 1:
		{
			if (strmatch(InfoCasa[n][cCompartida1], "none")) { SendClientMessage(playerid, 0xccccccff, "Ya tienes disponible el slot 1."); return 1; }
			new playerid2;
			sscanf(InfoCasa[n][cCompartida1], "u", playerid2);
			if (IsPlayerConnectedEx(playerid2))
			{
				SendClientMessageEx(playerid2, 0x79A5C9FF, "* %s te removio las llaves de su casa %d.", InfoJugador[playerid][jNombre_Apellido], n);
			}
			SendClientMessageEx(playerid, 0x79A5C9FF, "* Removiste las llaves de tu casa %d a %s. (slot 1)", n, InfoCasa[n][cCompartida1]);
			alm(InfoCasa[n][cCompartida1], "none");
			guardar_string_mysql("casas", "Compartida1", InfoCasa[n][cID], InfoCasa[n][cCompartida1]);
		}
	    case 2:
		{
			if (strmatch(InfoCasa[n][cCompartida2], "none")) { SendClientMessage(playerid, 0xccccccff, "Ya tienes disponible el slot 2."); return 1; }
			new playerid2;
			sscanf(InfoCasa[n][cCompartida2], "u", playerid2);
			if (IsPlayerConnectedEx(playerid2))
			{
				SendClientMessageEx(playerid2, 0x79A5C9FF, "* %s te removio las llaves de su casa %d.", InfoJugador[playerid][jNombre_Apellido], n);
			}
			SendClientMessageEx(playerid, 0x79A5C9FF, "* Removiste las llaves de tu casa %d a %s. (slot 2)", n, InfoCasa[n][cCompartida2]);
			alm(InfoCasa[n][cCompartida2], "none");
			guardar_string_mysql("casas", "Compartida2", InfoCasa[n][cID], InfoCasa[n][cCompartida2]);
		}
	    case 3:
		{
			if (strmatch(InfoCasa[n][cCompartida3], "none")) { SendClientMessage(playerid, 0xccccccff, "Ya tienes disponible el slot 3."); return 1; }
			new playerid2;
			sscanf(InfoCasa[n][cCompartida3], "u", playerid2);
			if (IsPlayerConnectedEx(playerid2))
			{
				SendClientMessageEx(playerid2, 0x79A5C9FF, "* %s te removio las llaves de su casa %d.", InfoJugador[playerid][jNombre_Apellido], n);
			}
			SendClientMessageEx(playerid, 0x79A5C9FF, "* Removiste las llaves de tu casa %d a %s. (slot 3)", n, InfoCasa[n][cCompartida3]);
			alm(InfoCasa[n][cCompartida3], "none");
			guardar_string_mysql("casas", "Compartida3", InfoCasa[n][cID], InfoCasa[n][cCompartida3]);
		}
	}
	return 1;
}

CMD:cseguro(playerid)
{
	new casa = -1;
	Loop(x, totalcasas, 1)
	{
		if ((IsPlayerInRangeOfPoint(playerid, 2.0, InfoCasa[x][cEntradaX], InfoCasa[x][cEntradaY], InfoCasa[x][cEntradaZ]) && InfoCasa[x][cEntradaInt] == InfoJugador[playerid][jInterior] && InfoCasa[x][cEntradaVW] == InfoJugador[playerid][jVirtualWorld]) ||
		(IsPlayerInRangeOfPoint(playerid, 5.0, InfoCasa[x][cSalidaX], InfoCasa[x][cSalidaY], InfoCasa[x][cSalidaZ]) && InfoCasa[x][cSalidaInt] == InfoJugador[playerid][jInterior] && InfoCasa[x][cSalidaVW] == InfoJugador[playerid][jVirtualWorld]) )
		{
			casa = x;
		}
	}
	if (casa == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en la entrada o salida de alguna casa.");
	if (PermisosCasa(playerid, casa) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
	if (InfoCasa[casa][cSeguro] == 0)
	{
		InfoCasa[casa][cSeguro] = 1;
		AccionesRol(playerid, 0, "saca sus llaves de casa y la abre.");
	}
	else
	{
		InfoCasa[casa][cSeguro] = 0;
		AccionesRol(playerid, 0, "saca sus llaves de casa y la cierra.");
	}
	guardar_int_mysql("casas", "Seguro", InfoCasa[casa][cID], InfoCasa[casa][cSeguro]);
	return 1;
}
CMD:casaseguro(playerid) return cmd_cseguro(playerid);

CMD:crseguro(playerid)
{
	new casa = -1;
	Loop(x, totalcasas, 1)
	{
		if ((IsPlayerInRangeOfPoint(playerid, 2.0, InfoCasa[x][cEntradaX], InfoCasa[x][cEntradaY], InfoCasa[x][cEntradaZ]) && InfoCasa[x][cEntradaInt] == InfoJugador[playerid][jInterior] && InfoCasa[x][cEntradaVW] == InfoJugador[playerid][jVirtualWorld]) ||
		(IsPlayerInRangeOfPoint(playerid, 5.0, InfoCasa[x][cSalidaX], InfoCasa[x][cSalidaY], InfoCasa[x][cSalidaZ]) && InfoCasa[x][cSalidaInt] == InfoJugador[playerid][jInterior] && InfoCasa[x][cSalidaVW] == InfoJugador[playerid][jVirtualWorld]) )
		{
			casa = x;
		}
	}
	if (casa == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en la entrada o salida de alguna casa.");
	if (InfoJugador[playerid][jAlquilerCasa] != casa) return SendClientMessage(playerid, 0xccccccff, "* No tienes alquiler en esta casa.");
	if (InfoCasa[casa][cSeguro] == 1)
	{
		InfoCasa[casa][cSeguro] = 0;
		AccionesRol(playerid, 0, "saca sus llaves de casa rentable y la cierra.");
	}
	else
	{
		InfoCasa[casa][cSeguro] = 1;
		AccionesRol(playerid, 0, "saca sus llaves de casa rentable y la abre.");
	}
	guardar_int_mysql("casas", "Seguro", InfoCasa[casa][cID], InfoCasa[casa][cSeguro]);
    return 1;
}

CMD:rentar(playerid)
{
	if (InfoJugador[playerid][jAlquilerCasa] != -1) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya tienes una casa en renta, escribe /desrentar si quieres dejar de rentar en la actual."); return 1; }
	new h = -1, string[200];
	Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0 && EnEntradaCasa(playerid, id))
	{
	    h = id;
	    break;
	}
	if (h == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en la entrada de ninguna casa.");
	if (InfoCasa[h][cVenta] == 0) return SendClientMessage(playerid, 0xccccccff, "* No se puede alquilar una casa sin propietario.");
	if (GetPlayerCash(playerid) < InfoCasa[h][cRentaPrecio]) return SendClientMessage(playerid, 0xccccccff, "* No tienes suficiente dinero para alquilar esta casa.");
	InfoJugador[playerid][jAlquilerCasa] = h;
	guardar_int_mysql("cuentas", "AlquilerCasa", InfoJugador[playerid][jID], InfoJugador[playerid][jAlquilerCasa]);
	GivePlayerCash(playerid, -InfoCasa[h][cRentaPrecio], "rentar");
	InfoCasa[h][cCasaDinero] = InfoCasa[h][cCasaDinero] + InfoCasa[h][cRentaPrecio];
	SetPosEx(playerid, InfoCasa[h][cSalidaX], InfoCasa[h][cSalidaY], InfoCasa[h][cSalidaZ], InfoCasa[h][cSalidaR], InfoCasa[h][cSalidaInt], 6000+h, 1);
	CargarObjetos(playerid);
	GameTextForPlayer(playerid, "~w~Bienvenido a Casa", 5000, 3);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Has alquilado esta casa por $%d, usa '/ayuda casa' para mas informacion.", InfoCasa[h][cRentaPrecio]);
	format(string, sizeof string, "[-] %s rento la casa id %d (propietario %s) por $%s.", InfoJugador[playerid][jNombre_Apellido], h, InfoCasa[h][cPropietario], diner_coma(InfoCasa[h][cRentaPrecio]));
	new Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	AddRegistroMoney(Ip, InfoJugador[playerid][jNombre_Apellido], string, 0);
	return 1;
}

CMD:desrentar(playerid)
{
	if (InfoJugador[playerid][jAlquilerCasa] == -1) return SendClientMessage(playerid, 0xccccccff, "* No tienes ninguna casa rentada.");
	InfoJugador[playerid][jAlquilerCasa] = -1;
	guardar_int_mysql("cuentas", "AlquilerCasa", InfoJugador[playerid][jID], InfoJugador[playerid][jAlquilerCasa]);
	_Mensaje(playerid, 2, "0", "Quedaste sin casa.");
	return 1;
}

CMD:timbre(playerid)
{
	new h = -1;
	Loop(id, totalcasas, 1) if (InfoCasa[id][cTipo] != 0 && EnEntradaCasa(playerid, id))
	{
	    h = id;
	    break;
	}
	if (h == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en la entrada de ninguna casa.");
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && GetPlayerVirtualWorld(playerid2) == InfoCasa[h][cSalidaVW] && GetPlayerInterior(playerid2) == InfoCasa[h][cSalidaInt])
	{
		GameTextForPlayer(playerid2, "~n~~n~~n~~n~~n~~n~~n~~w~Timbre...", 4000, 3);
	}
	AccionesRol(playerid, 0, "presiona un boton al lado de la puerta y toca el timbre de la casa.");
	return 1;
}

CMD:irinteriorcasa(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /irinteriorcasa.");
	OnDuty
	new housenum;
	if (sscanf(params, "d", housenum)) return _Mensaje(playerid, 3, "0", "/irinteriorcasa [casa id]");
	if (housenum < 1 || housenum > totalcasas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalcasas);
	if (InfoCasa[housenum][cTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de casa no existe.", housenum);
	SetPosEx(playerid, InfoCasa[housenum][cSalidaX], InfoCasa[housenum][cSalidaY], InfoCasa[housenum][cSalidaZ], 0.0, InfoCasa[housenum][cSalidaInt], InfoCasa[housenum][cSalidaVW], 0);
	GameTextForPlayer(playerid, "~w~Teletransportado", 5000, 1);
	return 1;
}

CMD:preciorenta(playerid, params[])
{
	new casa = -1, fee;
	Loop(h, totalcasas, 1) if (InfoCasa[h][cTipo] != 0 && EnEntradaCasa(playerid, h))
	{
	    casa = h;
	    break;
	}
	if (casa == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en la entrada de ninguna casa.");
	if (LlavesCasa(playerid, casa) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
    if (sscanf(params, "d", fee)) return _Mensaje(playerid, 3, "0", "/preciorenta [precio]");
	InfoCasa[casa][cRentaPrecio] = fee;
	InfoCasa[casa][cRentable] = 1;
	guardar_int_mysql("casas", "RentaPrecio", InfoCasa[casa][cID], InfoCasa[casa][cRentaPrecio]);
	guardar_int_mysql("casas", "Rentable", InfoCasa[casa][cID], InfoCasa[casa][cRentable]);
	SendClientMessageEx(playerid, 0x33CCFFFF, "* Colocaste tu casa en renta y el precio del mismo es de $%d.", InfoCasa[casa][cRentaPrecio]);
	return 1;
}

CMD:ponerrenta(playerid)
{
	new id = -1;
	Loop(h, totalcasas, 1) if (InfoCasa[h][cTipo] != 0 && EnEntradaCasa(playerid, h))
	{
	    id = h;
	    break;
	}
	if (id == -1) return SendClientMessage(playerid, 0xccccccff, "* No estas en la entrada de ninguna casa.");
	if (LlavesCasa(playerid, id) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes las llaves de esta casa.");
	if (!InfoCasa[id][cRentable])
	{
		InfoCasa[id][cRentable] = 1;
		_Mensaje(playerid, 2, "0", "Esta casa ahora esta en renta.");
	}
	else
	{
		InfoCasa[id][cRentable] = 0;
		_Mensaje(playerid, 2, "0", "Esta casa ya no esta en renta.");
	}
	guardar_int_mysql("casas", "Rentable", InfoCasa[id][cID], InfoCasa[id][cRentable]);
    return 1;
}

CMD:ircasa(playerid, params[])
{
    new cid;
    if (InfoJugador[playerid][jAdmin] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Ircasa.");
    OnDuty
    if (sscanf(params, "i", cid)) return _Mensaje(playerid, 3, "0", "/ircasa [casa id]");
	if (cid < 1 || cid > totalcasas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalcasas);
	if (InfoCasa[cid][cTipo] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de casa no existe.", cid);
    SetPosEx(playerid, InfoCasa[cid][cEntradaX], InfoCasa[cid][cEntradaY], InfoCasa[cid][cEntradaZ], 0.0, InfoCasa[cid][cEntradaInt], InfoCasa[cid][cEntradaVW], 1);
	SendClientMessageEx(playerid, -1, "Usted se teletransporto a la Casa ID %d.", cid);
    return 1;
}

CMD:eliminarcheckpoint(playerid)
{
	if (EnModoTrabajo[playerid] != 0) return SendClientMessageEx(playerid, 0xccccccff, "Estas trabajando como %s, termina la labor para empezar esto.", IsLaborJob(EnModoTrabajo[playerid]));
	DisablePlayerCheckpoint(playerid);
	DeletePVar(playerid, "EnCheckPoint");
	_Bomb2Call[playerid] = 0;
	_Medic2Call[playerid] = 0;
	DeletePVar(playerid, "TipoCarga");
	_CamVeh[playerid] = INVALID_VEHICLE_ID;
	TogglePlayerAllDynamicCPs(playerid, true);
	_Mensaje(playerid, 2, "0", "El checkpoint que tenias pendiente fue eliminado, junto a los posibles bugeados.");
	return 1;
}
CMD:eliminarcp(playerid) return cmd_eliminarcheckpoint(playerid);
CMD:borrarcheckpoint(playerid) return cmd_eliminarcheckpoint(playerid);

CMD:spec(playerid, params[]) {
    if(InfoJugador[playerid][jAdmin] < 1) {
        ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando.");
        return 1;
    }
    new tmp[32];
    OnDuty
    if(sscanf(params, "s[32]", tmp)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~/spec (playerid/off)");
    if(strcmp("off", tmp, true, strlen(tmp)) == 0) {
        if(Spectando[playerid] > 0 && InfoJugador[playerid][jAdmin] >= 1) {
            SpectadorID[Spectate[playerid]] = 999;
            Spectando[playerid] = 0;
            new string[210];
			format(string, sizeof string, "Administracion: %s ha salido del modo spec", NombreJugador(playerid));
			MensajeAdmin(string);
            Spectate[playerid] = 999;
            SetPVarInt(playerid, "SpecState", -1);
            TogglePlayerSpectating(playerid, false);
            SetCameraBehindPlayer(playerid);
            SetPlayerPosEx(playerid, InfoJugador[playerid][jPosicionX], InfoJugador[playerid][jPosicionY], InfoJugador[playerid][jPosicionZ]);
            SetPlayerInterior(playerid, InfoJugador[playerid][jInterior]);
            SetPlayerVirtualWorld(playerid, InfoJugador[playerid][jVirtualWorld]);
            CargarObjetos(playerid);
            return 1;
        } else {
            ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes spectar a esta persona.");
            return 1;
        }
    }
    new playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2)) {
        if(playerid2 != INVALID_PLAYER_ID) {
            if(Spectando[playerid] == 0) {
                new string[128];
			    format(string, sizeof string, " [%d] %s - Nivel: %d", playerid2, NombreRJugador(playerid2), InfoJugador[playerid2][jNivel]);
			    SendClientMessage(playerid, 0x969696FF, string);
				format(string, sizeof string, "Administracion: %s esta specteando a %s", NombreJugador(playerid), NombreRJugador(playerid2));
				MensajeAdmin(string);
                GetPlayerPos(playerid, InfoJugador[playerid][jPosicionX], InfoJugador[playerid][jPosicionY], InfoJugador[playerid][jPosicionZ]);
                InfoJugador[playerid][jInterior] = GetPlayerInterior(playerid);
                InfoJugador[playerid][jVirtualWorld] = GetPlayerVirtualWorld(playerid);
                if(IsPlayerInAnyVehicle(playerid2)) {
                    TogglePlayerSpectating(playerid, true);
                    new carid = GetPlayerVehicleID(playerid2);
                    PlayerSpectateVehicle(playerid, carid);
				 	format(string, sizeof string, "Administracion: %s esta specteando a %s", NombreJugador(playerid), NombreRJugador(playerid2));
					MensajeAdmin(string);
                    SetPlayerInterior(playerid, GetPlayerInterior(playerid2));
                    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerid2));
                    SetPVarInt(playerid, "SpecState", GetPlayerState(playerid2));
                } else {
                    TogglePlayerSpectating(playerid, true);
                    PlayerSpectatePlayer(playerid, playerid2);
                    SetPlayerInterior(playerid, GetPlayerInterior(playerid2));
 					format(string, sizeof string, "Administracion: %s esta specteando a %s", NombreJugador(playerid), NombreRJugador(playerid2));
					MensajeAdmin(string);
                    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerid2));
                    SetPVarInt(playerid, "SpecState", GetPlayerState(playerid2));
                }
                SpectadorID[playerid2] = playerid;
                Spectate[playerid] = playerid2;
                Spectando[playerid] = 1;
            } else {
                if(IsPlayerInAnyVehicle(playerid2)) {
                    new string[128];
				    format(string, sizeof string, " [%d] %s - Nivel: %d", playerid2, NombreRJugador(playerid2), InfoJugador[playerid2][jNivel]);
				    SendClientMessage(playerid, 0x969696FF, string);
                    TogglePlayerSpectating(playerid, true);
                    new carid = GetPlayerVehicleID(playerid2);
					format(string, sizeof string, "Administracion: %s esta specteando a %s", NombreJugador(playerid), NombreRJugador(playerid2));
					MensajeAdmin(string);
                    PlayerSpectateVehicle(playerid, carid);
                    SetPlayerInterior(playerid, GetPlayerInterior(playerid2));
                    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerid2));
                    SetPVarInt(playerid, "SpecState", GetPlayerState(playerid2));
                } else {
                    TogglePlayerSpectating(playerid, true);
                    PlayerSpectatePlayer(playerid, playerid2);
                    new string[128];
					format(string, sizeof string, "Administracion: %s esta specteando a %s", NombreJugador(playerid), NombreRJugador(playerid2));
					MensajeAdmin(string);
                    SetPlayerInterior(playerid, GetPlayerInterior(playerid2));
                    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerid2));
                    SetPVarInt(playerid, "SpecState", GetPlayerState(playerid2));
                }
                SpectadorID[Spectate[playerid]] = 999;
                SpectadorID[playerid2] = playerid;
                Spectate[playerid] = playerid2;
                Spectando[playerid] = 1;
            }
        }
    } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador esta desconectado.");
    return 1;
}
CMD:recon(playerid, params[]) return cmd_spec(playerid, params);

CMD:cambiarhora(playerid, params[])
{
	new string[128];
	if (InfoJugador[playerid][jAdmin] < 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a este comando.");
	OnDuty
	if (sscanf(params, "i", params[0])) return _Mensaje(playerid, 3, "0", "/Cambiarhora 'Hora'");
	SetWorldTime(params[0]);
	format(string, sizeof string, "Administracion: %s utilizo /cambiarhora, Hora: %d.", NombreJugador(playerid), params[0]);
	MensajeAdmin(string);
	return 1;
}

CMD:cambiarclima(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a este comando.");
	OnDuty
	new weather, string[128];
	if (sscanf(params, "d", weather)) return _Mensaje(playerid, 3, "0", "/cambiarclima [id clima]");
	if (weather < 0 || weather > 45) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Id's de climas de 0 a 45."); return 1; }
	clima = weather;
	SetWeather(weather);
	SetPlayerWeather(playerid, weather);
	format(string, sizeof string, "Administracion: %s utilizo /cambiarclima, Clima: %d.", NombreRJugador(playerid), weather);
	MensajeAdmin(string);
	return 1;
}

//- Sistema de eventos
CMD:adminevento(playerid, params[]) {
    if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a este comando.");
    OnDuty
    _Mensaje(playerid, 4, "A7CE00", "/lugarevento /tipoevento /editarevento /abrirevento");
    _Mensaje(playerid, 4, "A7CE00", "/anunciar /cerrarevento /iniciarevento /borrarevento");
    return 1;
}

CMD:tipoevento(playerid, params[]) {
    if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a este comando.");
    OnDuty
    if (isnull(params)) {
    	_Mensaje(playerid, 3, "0", "/tipoevento [tipo]");
    	_Mensaje(playerid, 2, "0", "Nombres: normal, cocheb, ninguno.");
    	return 1;
	}
	if (strcmp(params, "normal", true) == 0) {
  		InfoEvento[iTipo] = 1;
		_Mensaje(playerid, 2, "0", "Ajustaste el tipo de evento a normal.");
	} else if (strcmp(params, "cocheb", true) == 0) {
		InfoEvento[iTipo] = 2;
		_Mensaje(playerid, 2, "0", "Ajustaste el tipo de evento a coche bomba.");
    } else if (strcmp(params, "ninguno", true) == 0) {
		InfoEvento[iTipo] = 0;
		_Mensaje(playerid, 2, "0", "Ajustaste el tipo de evento a Ninguno.");
    }
    return 1;
}

CMD:editarevento(playerid, params[]) {
    if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a este comando.");
    OnDuty
	if (InfoEvento[iTipo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No se ha establecido un tipo de evento.");
 	new choice[32], opstring[256];
    if (sscanf(params, "s[32]S[256]", choice, opstring)) {
		_Mensaje(playerid, 3, "0", "/editarevento [nombre]");
		_Mensaje(playerid, 2, "0", "Nombres: mensaje, musica, vida, chaleco");
	}
	if (strcmp(choice, "mensaje", true) == 0) {
		if (!opstring[0]) return _Mensaje(playerid, 3, "0", "/editarevento mensaje [texto]");
		strmid(InfoEvento[iMensaje], opstring, 0, strlen(opstring), 256);
		_Mensaje(playerid, 2, "0", "Ajustaste el mensaje del evento.");
	} else if (strcmp(choice, "musica", true) == 0) {
		if (!opstring[0]) return _Mensaje(playerid, 3, "0", "/editarevento musica [link]");
		strmid(InfoEvento[iMusica], opstring, 0, strlen(opstring), 256);
		_Mensaje(playerid, 2, "0", "Ajustaste la musica del evento.");
	} else if (strcmp(choice, "vida", true) == 0) {
		if (!opstring[0]) return _Mensaje(playerid, 3, "0", "/editarevento vida [cantidad]");
		new Float: health;
		health = floatstr(opstring);
		InfoEvento[iVida] = health;
		_Mensaje(playerid, 2, "0", "Ajustaste el spawn vida del evento.");
	} else if (strcmp(choice, "chaleco", true) == 0) {
		if (!opstring[0]) return _Mensaje(playerid, 3, "0", "/editarevento chaleco [cantidad]");
		new Float: armor;
		armor = floatstr(opstring);
		InfoEvento[iChaleco] = armor;
		_Mensaje(playerid, 2, "0", "Ajustaste la armadura del evento.");
	}
    return 1;
}

CMD:abrirevento(playerid, params[]) {
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a este comando.");
	OnDuty
	if (InfoEvento[iEtapa] == 0) {
		if (InfoEvento[iTipo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No se ha definido el tipo de evento.");
		if (InfoEvento[iVida] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No se ha definido la salud del evento.");
		if (InfoEvento[iPosicionX] == 0 || InfoEvento[iPosicionY] == 0 || InfoEvento[iPosicionZ] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No se ha definido la posicion de evento.");
		InfoEvento[iEtapa] = 1;
		if (InfoEvento[iTipo] == 2) {
    		iObjeto[0] =                 CreateDynamicObject(2990, 1374.70349, 2192.37427, 9.32361,   0.00000, 0.00000, 0.00000);
			iObjeto[1] =                 CreateDynamicObject(2990, 1364.79016, 2192.39355, 9.32361,   0.00000, 0.00000, 0.00000);
			iObjeto[2] =                 CreateDynamicObject(1533, 1358.29321, 2192.39966, 9.88074,   0.00000, 0.00000, 0.00000);
		}
		EscucharMusica(playerid, InfoEvento[iMusica]);
		ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Has abierto el evento, escribe /anunciar para avisar el mismo.");
	} else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya hay un evento creado escribe /borrarevento.");
	return 1;
}

CMD:salirevento(playerid, params[]) {
    if (GetPVarInt(playerid, "EnEvento") == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas dentro de ningun evento.");
    if (InfoEvento[iEtapa] == 1 || InfoEvento[iEtapa] == 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes salir del evento, hasta que comience.");
    SetPVarInt(playerid, "EnEvento", 0);
    TogglePlayerControllable(playerid, 1);
    SetPlayerSkin(playerid, InfoJugador[playerid][jSkin]);
    SetPlayerPosEx(playerid, jEvento[playerid][eVariable][1], jEvento[playerid][eVariable][2], jEvento[playerid][eVariable][3]);
    SetPlayerVirtualWorld(playerid, jEvento[playerid][eVW]);
    SetPlayerFacingAngle(playerid, jEvento[playerid][eVariable][0]);
    SetPlayerInterior(playerid, jEvento[playerid][eInterior]);
    Dar_Vida(playerid, jEvento[playerid][eVariable][4]);
    Dar_Chaleco(playerid, jEvento[playerid][eVariable][5]);
	SetPlayerColor(playerid, 0xFFFFFF00);
    StopAudioStreamForPlayer(playerid);
    for (new i = 0; i < 6; i++) { jEvento[playerid][eVariable][i] = 0; }
    jEvento[playerid][eVW] = 0;
    jEvento[playerid][eInterior] = 0;
    _Mensaje(playerid, 4, "33CCFF", "Has salido del evento de la administracion.");
    return 1;
}

CMD:lugarevento(playerid, params[]) {
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a este comando.");
	OnDuty
	GetPlayerPos(playerid, InfoEvento[iPosicionX], InfoEvento[iPosicionY], InfoEvento[iPosicionZ]);
	InfoEvento[iInterior] = GetPlayerInterior(playerid);
	InfoEvento[iVirtualWorld] = GetPlayerVirtualWorld(playerid);
	_Mensaje(playerid, 2, "0", "Has ajustado el lugar de spawn del evento.");
    return 1;
}

CMD:borrarevento(playerid, params[]) {
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a este comando.");
	OnDuty
	if (InfoEvento[iEtapa] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No hay ningun evento creado.");
	StopAudioStreamForPlayer(playerid);
	foreach(Player, i) {
		if (GetPVarInt(i, "EnEvento") == 1) {
		    TogglePlayerControllable(i, 1);
			SetPlayerSkin(i, InfoJugador[i][jSkin]);
   			SetPlayerPosEx(i, jEvento[i][eVariable][1], jEvento[i][eVariable][2], jEvento[i][eVariable][3]);
            SetPlayerVirtualWorld(i, jEvento[i][eVW]);
            SetPlayerFacingAngle(i, jEvento[i][eVariable][0]);
            SetPlayerInterior(i, jEvento[i][eInterior]);
            Dar_Vida(i, jEvento[i][eVariable][4]);
            Dar_Chaleco(i, jEvento[i][eVariable][5]);
            SetPlayerColor(i, 0xFFFFFF00);
            StopAudioStreamForPlayer(i);
            for (new d = 0; d < 6; d++) { jEvento[i][eVariable][d] = 0.0; }
            jEvento[i][eVW] = 0;
            jEvento[i][eInterior] = 0;
            SetPVarInt(i, "EnEvento", 0);
            _Mensaje(i, 2, "0", "Has sido expulsado del evento dado que el mismo ha terminado.");
		}
	}
	if(InfoEvento[iTipo] == 2)
	{
		Loop(es, 3, 0) if (iObjeto[es] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(iObjeto[es]);
			iObjeto[es] = INVALID_STREAMER_ID;
		}
	}
	InfoEvento[iPosicionX] = 0;
	InfoEvento[iPosicionY] = 0;
	InfoEvento[iPosicionZ] = 0;
	InfoEvento[iEtapa] = 0;
	InfoEvento[iTipo] = 0;
	InfoEvento[iVida] = 0;
	SendClientMessageToAll(C_GCRP, "*{FFFFFF} El evento ha sido terminado por un administrador.");
    return 1;
}

CMD:iniciarevento(playerid, params[]) {
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a este comando.");
	OnDuty
	if (InfoEvento[iEtapa] == 3) {
		InfoEvento[iEtapa] = 4;
		foreach(Player, i) {
			if (GetPVarInt(i, "EnEvento") == 1) {
				if (InfoEvento[iTipo] == 1) {
					SetPlayerHealth(i, InfoEvento[iVida]);
					SetPlayerArmour(i, InfoEvento[iChaleco]);
					TogglePlayerControllable(i, 1);
				} else if (InfoEvento[iTipo] == 2) {
					SetPlayerHealth(i, InfoEvento[iVida]);
					TogglePlayerControllable(i, 0);
				}
				_Mensaje(i, 4, "33CCFF", "Ha iniciado el evento.");
			} else _Mensaje(i, 2, "0", "El evento ha iniciado. Si deseas unirte en el proximo entras con escribir /evento.");
		}
	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Aun no has cerrado el evento, escribe /cerrarevento.");
    return 1;
}

CMD:anunciar(playerid, params[]) {
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a este comando.");
	OnDuty
	if (InfoEvento[iEtapa] == 1) {
		InfoEvento[iEtapa] = 2;
		_Mensaje(playerid, 2, "0", "Para bloquear el evento usa /cerrarevento");
		SendClientMessageToAll(C_GCRP, "*{FFFFFF} Ha comenzado un evento, si deseas entrar escribe /evento.");
	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Aun no has abierto un evento, escribe /abrirevento.");
    return 1;
}

CMD:cerrarevento(playerid, params[]) {
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a este comando.");
	OnDuty
 	if (InfoEvento[iEtapa] == 2) {
		InfoEvento[iEtapa] = 3;
	    if (InfoEvento[iTipo] == 2)
		{
			if (iObjeto[2] != INVALID_STREAMER_ID)
			{
				DestroyDynamicObject(iObjeto[2]);
				iObjeto[2] = INVALID_STREAMER_ID;
			}
		}
		_Mensaje(playerid, 2, "0", "Has bloqueado el evento, utiliza /inicarevento para iniciar oficialmente el evento.");
		SendClientMessageToAll(C_GCRP, "*{FFFFFF} El evento actual ha sido bloqueado, intenta entrar la proxima.");
	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Aun no has anunciado el evento, escribe /anunciar.");
    return 1;
}

CMD:evento(playerid, params[]) {
    if (InfoJugador[playerid][jManoDerecha] > 0) { return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes guardar tu objeto de la mano derecha."); }
    if (InfoJugador[playerid][jManoIzquierda] > 0) { return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes guardar tu objeto de la mano izquierda."); }
	if (IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes ingresar al evento dentro de un vehiculo.");
	if (InfoEvento[iEtapa] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~La administracion no ha creado ningun evento.");
	if (InfoEvento[iEtapa] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~La administracion se encuentra configurando el evento.");
	if (InfoEvento[iEtapa] == 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El evento se encuentra bloqueado, intentalo la proxima vez.");
	if (InfoEvento[iEtapa] == 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El evento se encuentra iniciado, intentalo la proxima vez.");
	SetPVarInt(playerid, "EnEvento", 1);
	GetPlayerHealth(playerid, jEvento[playerid][eVariable][4]);
	jEvento[playerid][eVariable][5] = InfoJugador[playerid][jChaleco];
	jEvento[playerid][eVW] = GetPlayerVirtualWorld(playerid);
	jEvento[playerid][eInterior] = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, jEvento[playerid][eVariable][1], jEvento[playerid][eVariable][2], jEvento[playerid][eVariable][3]);
	GetPlayerFacingAngle(playerid, jEvento[playerid][eVariable][0]);
	SetPlayerPosEx(playerid, InfoEvento[iPosicionX], InfoEvento[iPosicionY], InfoEvento[iPosicionZ]);
	SetPlayerInterior(playerid, InfoEvento[iInterior]);
	SetPlayerVirtualWorld(playerid, InfoEvento[iVirtualWorld]);
	_Mensaje(playerid, 4, "7ADA4F", InfoEvento[iMensaje]);
	SetPlayerHealth(playerid, InfoEvento[iVida]);
	SetPlayerArmour(playerid, InfoEvento[iChaleco]);
	SetPlayerColor(playerid, 0x7ADA4F00);
	EscucharMusica(playerid, InfoEvento[iMusica]);
    return 1;
}

CMD:repetir(playerid, params[]) {
	if (InfoJugador[playerid][jAdmin] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a este comando.");
	OnDuty
	if (InfoEvento[iEtapa] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No hay ningun vehiculo creado.");
	foreach(Player, i) {
		if (GetPVarInt(i, "EnEvento") == 1) {
			EscucharMusica(i, InfoEvento[iMusica]);
		}
	}
	EscucharMusica(playerid, InfoEvento[iMusica]);
    return 1;
}

stock EscucharMusica(playerid, url[], Float: posX = 0.0, Float: posY = 0.0, Float: posZ = 0.0, Float: distance = 50.0, usepos = 0)
{
    if(B_Musica[playerid] == 0) PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
}

stock PlayStream(playerid, url[], Float: posX = 0.0, Float: posY = 0.0, Float: posZ = 0.0, Float: distance = 50.0, usepos = 0) {
    if(GetPVarType(playerid, "MusBB")) StopAudioStreamForPlayer(playerid);
    else SetPVarInt(playerid, "MusBB", 1);
    PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
}

stock ReproducirMVeh(playerid, url[], Float: posX = 0.0, Float: posY = 0.0, Float: posZ = 0.0, Float: distance = 50.0, usepos = 0) {
    if(GetPVarType(playerid, "MusVeh")) StopAudioStreamForPlayer(playerid);
    else SetPVarInt(playerid, "MusVeh", 1);
    PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	//zonas seguras
	Loop(id, MAX_ZONAS, 0) if (areaid == ZonaArea[id])
	{
		EnZonaSegura[playerid] = 0;
		PlayerTextDrawHide(playerid, InfoZS[playerid]);
		DarArmas(playerid);
		break;
	}
	//
	if (MusicaEsc[playerid] != 0) return 1;
	foreach(Player, i) if (IsPlayerConnectedEx(i))
	{
		if (GetPVarType(i, "BBArea")) if (areaid == GetPVarInt(i, "BBArea"))
		{
			StopStream(playerid);
			return 1;
		}
		if (GetPVarType(i, "PartyArea")) if (areaid == GetPVarInt(i, "PartyArea"))
		{
			StopStream(playerid);
			return 1;
		}
		if (GetPVarType(i, "AreaVehMus")) if (areaid == GetPVarInt(i, "AreaVehMus"))
		{
			PararMVeh(playerid);
			return 1;
		}
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	//zonas seguras
	Loop(id, MAX_ZONAS, 0) if (areaid == ZonaArea[id])
	{
		EnZonaSegura[playerid] = 1;
        GameTextForPlayer(playerid,"~n~~n~~n~~w~Entraste en una~n~~r~Zona segura", 2000, 3);
		PlayerTextDrawShow(playerid, InfoZS[playerid]);
		if (Es_Banda(playerid, 1, 2, 3)) return 1;
		else{
		ResetPlayerWeapons(playerid);
		}
		break;
	}
	//
	if (MusicaEsc[playerid] != 0) return 1;
	foreach(Player, i) if (IsPlayerConnectedEx(i))
	{
		// boombox
		if (GetPVarType(i, "BBArea")) if (areaid == GetPVarInt(i, "BBArea"))
		{
			new station[256];
			GetPVarString(i, "BBStation", station, sizeof station);
			if (!isnull(station) && B_Musica[playerid] == 0)
			{
				SendClientMessageEx(playerid, 0x9EC73DAA, "[ENTORNO] Comienzas a oir musica proveniente de un equipo de sonido.");
				PlayStream(playerid, station, GetPVarFloat(i, "BBX"), GetPVarFloat(i, "BBY"), GetPVarFloat(i, "BBZ"), 30.0, 1);
			}
			return 1;
		}
		// party fiesta
		if (GetPVarType(i, "PartyArea")) if (areaid == GetPVarInt(i, "PartyArea"))
		{
			new station[256];
			GetPVarString(i, "PartyStation", station, sizeof station);
			if (!isnull(station) && B_Musica[playerid] == 0)
			{
				SendClientMessageEx(playerid, 0xFFB600FF, "[FIESTA - Party] Comienzas a oir musica proveniente de la plataforma.");
				PlayStream(playerid, station, GetPVarFloat(i, "PartyX"), GetPVarFloat(i, "PartyY"), GetPVarFloat(i, "PartyZ"), 200.0, 1);
			}
			return 1;
		}
		// maletero
		if (GetPVarType(i, "AreaVehMus")) if (areaid == GetPVarInt(i, "AreaVehMus"))
		{
			new station[256];
			GetPVarString(i, "AreaVehAud", station, sizeof station);
			if (!isnull(station) && B_Musica[playerid] == 0)
			{
				if (!GetVehicleModel(GetPVarInt(i, "AreaVehID"))) SendClientMessageEx(playerid, 0x9EC73DAA, "[ENTORNO] Comienzas a oir musica proveniente de un vehiculo.");
				else SendClientMessageEx(playerid, 0x9EC73DAA, "[ENTORNO] Comienzas a oir musica proveniente de un %s.", GetVehicleName(GetPVarInt(i, "AreaVehID")));
				ReproducirMVeh(playerid, station, GetPVarFloat(i, "AreaVehPosX"), GetPVarFloat(i, "AreaVehPosY"), GetPVarFloat(i, "AreaVehPosZ"), 50.0, 1);
			}
			return 1;
		}
	}
	return 1;
}

funcion StopStream(playerid)
{
	DeletePVar(playerid, "MusBB");
	StopAudioStreamForPlayer(playerid);
}

funcion PararMVeh(playerid)
{
	DeletePVar(playerid, "MusVeh");
	StopAudioStreamForPlayer(playerid);
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(GetPlayerState(playerid) == 1) { return 1; }
	switch(Casco[playerid])
	{
		case 1:
		{
			if(EnMotos_Bicis(vehicleid)) AccionesRol(playerid, 0, "pone las manos en su casco, y se lo quita.");
			else AccionesRol(playerid, 0, "pone las manos en su cinturon y se lo quita.");
			Casco[playerid] = 0;
		}
	}
	if(VehSeguro[vehicleid] >= 1)
	{
		if (veh_asiento[playerid] != -1)
		{
			ClearAnimations(playerid);
			PutPlayerInVehicle(playerid, vehicleid, veh_asiento[playerid]);
		    return 1;
		}
	}
	veh_asiento[playerid] = -1;
	SetPVarInt(playerid, "veh_bajo", vehicleid);
	return 1;
}

stock GetPlayerPartName(playerid) {
    new x, name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, MAX_PLAYER_NAME);
    while (x < strlen(name)) {
        if (name[x] == '_') {
            strdel(name, x, MAX_PLAYER_NAME);
            return name;
        }
        x++;
    }
    return name;
}

stock GetPlayerSecondName(playerid) {
    new x, name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, MAX_PLAYER_NAME);
    while (x < strlen(name)) {
        if (name[x] == '_') {
            strdel(name, 0, x + 1);
            return name;
        }
        x++;
    }
    return name;
}

stock PezCosto(playerid, fish){
	if(IsPlayerConnected(playerid)){
		new cost = 0;
		switch (fish){
			case 1: cost = 2;
			case 2: cost = 2;
			case 3: cost = 2;
			case 5: cost = 3;
			case 6: cost = 2;
			case 8: cost = 3;
			case 9: cost = 4;
			case 11: cost = 2;
			case 12: cost = 2;
			case 14: cost = 3;
			case 15: cost = 4;
			case 16: cost = 3;
			case 17: cost = 2;
			case 18: cost = 2;
			case 19: cost = 3;
			case 21: cost = 2;
			case 22: cost = 5;
		}
		return cost;
	}
	return 0;
}

StaffEnLinea(){
	new count;
	foreach(Player, i){
		if(InfoJugador[i][jAdmin] >= 1){
			count++;
		}
	}
	return count;
}

Ayuda(playerid, tip)
{
    switch (tip)
	{
        case 0:
		{
            new ayuda[] = "{CCCCCC}/stats - /admins - /gps - /id - /climpiar - /pagar - /entrar - /salir - /darcheque\n\
			/ceder - /plantar - /verplanta - /sacarplanta - /consumir - /avisarpd - /hora - /dnifalso\n\
			/peaje - /desbug - /borrarcheckpoint - /saldo -/stereo - /estacion - /apagarstereo - /revisar\n\
			/sms - /llamar - /dar - /licencias - /equiposonido - /requiposonido - /abrircuenta - /colgar";
            Dialog_Show(playerid, Help_Show, DIALOG_STYLE_MSGBOX, "{008BFF}Comandos generales", ayuda, "Regresar","Cerrar");
        }
        case 1:
		{
            new ayuda[] = "{CCCCCC}/ceder - /botiquin - /cargar - /inventario - /guadar - /sacar - /cmano\n\
            /espalda - /recoger - /cinturon - /guardarct - /sacarct - /tirar";
            Dialog_Show(playerid, Help_Show, DIALOG_STYLE_MSGBOX, "{008BFF}Comandos de inventario", ayuda, "Regresar","Cerrar");
        }
        case 2:
		{
            new ayuda[] = "{CCCCCC}/me [accion larga]\n\
			/ame [accion corta]\n\
            /do [entorno o aclaracion]\n\
            /g [gritar]\n\
            /s [susurrar]\n\
            /b [chat ooc/fp]\n\
            /re [reportar]\n\
            /mp [mensajes a admin]\n\
            /r [chat faccion ic/dp]\n\
            /fac [chat faccion ooc/fp]\n\
            /fam [chat familia ooc/fp]\n\
            {008BFF}Togeos:{CCCCCC} /togsan /togooc /togfac /togfam /togmusic /togmovil /togradio";
            Dialog_Show(playerid, Help_Show, DIALOG_STYLE_MSGBOX, "{008BFF}Comandos de canales", ayuda, "Regresar","Cerrar");
        }
        case 3:
		{
			if (CountCasas(playerid) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes ninguna casa a tu nombre.");
			new ayuda[] = "{CCCCCC}Sistema de casa, dentro del servidor alrededor de North America Roleplay Oficial existen\n\
			donde tiene la oportunidad de comprar o rentar alguna casa, donde puedes guardar tus items\n\n\
			/micasa - /cseguro - /ponerrenta - /vendermicasa - /muebles - /entrarg - /salirg - /gseguro\n\
			/preciorenta - /vendercasa | rentable: /crseguro - /rentar - /desrentar";
			Dialog_Show(playerid, Help_Show, DIALOG_STYLE_MSGBOX, "{008BFF}Comandos de casas", ayuda, "Regresar","Cerrar");
        }
        case 4:
		{
            new ayuda[] = "{CCCCCC}Sistema de vehiculos, el servidor tiene un amplio sistema de vehiculos mediante \n\
			el cual puedes guardar items, compartir tus llaves, tunear tu vehiculo\n\n\
			/estacionar - /motor - /capo - /maletero - /luces - /seguro(ESPACIO + Y) - /vermaletero - /guantera\n\
			/tablero - /expulsarveh - /cinturons - /coches - /vendercoche - /quitartunning - /combustible - /entrar - /salir";
            Dialog_Show(playerid, Help_Show, DIALOG_STYLE_MSGBOX, "{008BFF}Comandos de vehiculos", ayuda, "Regresar","Cerrar");
        }
		case 5:
  {

	 	 new help_type[1028];
         if (Es_Banda(playerid, 1))
		 {
                strcat(help_type, "Lider:\n");
			    strcat(help_type, "/invitar - /fchat - /fnombre - /frango - /banda\n\n");
			    strcat(help_type, "Miembros:\n");
				strcat(help_type, "/ref /noref /palcohol /optiwand /cachear /computador /destruir /darlicencia /balasgoma /ram\n");
				strcat(help_type, "/verarmario /callsign /sct /ct /reanimar /m /destruirplanta /miranda /bar /qb /qbs /pinchos\n");
				strcat(help_type, "/spinchos /qpinchos /sirena /quitar /detener /arrestar /limpiar /antecedente\n");
				strcat(help_type, "/presos /esposar /togpecho /gct /requisar /mascarapd /multar /embargar /engancharpd /desnengancharpd\n");
				strcat(help_type, "/liberarcargos /dejarmulta /expulsarfacoff - El lider puede expulsar a un miembro de su faccion\n");
				Dialog_Show(playerid, Help_Show, DIALOG_STYLE_MSGBOX, "{008BFF}Policia", help_type, "Regresar", "Cerrar");
			}
			else if (Es_Banda(playerid, 5))
			{
                strcat(help_type, "Lider:\n");
			    strcat(help_type, "/invitar - /fchat - /fnombre - /frango - /banda\n\n");
			    strcat(help_type, "Miembros:\n");
                strcat(help_type, "/entrevista /apgarage /equipo /directo /miembros\n");
                strcat(help_type, "/enservicio /conectar /desconectar /r /maleterosan\n");
                Dialog_Show(playerid, Help_Show, DIALOG_STYLE_MSGBOX, "{008BFF}Noticias", help_type, "Regresar", "Cerrar");
            }
			else if (Es_Banda(playerid, 4))
			{
                strcat(help_type, "Lider:\n");
			    strcat(help_type, "/invitar - /fchat - /fnombre - /frango - /banda\n\n");
			    strcat(help_type, "Miembros:\n");
                strcat(help_type, "/gob /impuesto /sfondos /dfondos /equipo\n");
                strcat(help_type, "/f /r /dep /servicio /miembros /maleteroalc\n");
                Dialog_Show(playerid, Help_Show, DIALOG_STYLE_MSGBOX, "{008BFF}Gobierno", help_type, "Regresar", "Cerrar");
            }
			else if (Es_Banda(playerid, 3))
			{
                strcat(help_type, "Lider:\n");
			    strcat(help_type, "/invitar - /fchat - /fnombre - /frango - /banda\n\n");
			    strcat(help_type, "Miembros:\n");
  	            strcat(help_type, "/f /r /esposar /palcohol /bp /bpc /sirena /taclear /arrestar /cargos /detener\n");
				strcat(help_type, "/equipo /dep /ref /noref /callsign /bar /qb(s) /pinchos /spinchos /qpinchos\n");
				strcat(help_type, "/ram /balasgoma /esposar /revisar /requisar /ct /gct /sct /vercargos /liberarcargos\n");
                Dialog_Show(playerid, Help_Show, DIALOG_STYLE_MSGBOX, "{008BFF}Militares", help_type, "Regresar", "Cerrar");

			}
            else if (Es_Banda(playerid, 2))
		    {
                strcat(help_type, "Lider:\n");
			    strcat(help_type, "/invitar - /fchat - /fnombre - /frango - /banda\n\n");
			    strcat(help_type, "Miembros:\n");
				strcat(help_type, "/f /r /esposar /palcohol /bp /bpc /sirena /taclear /arrestar /cargos /detener\n");
				strcat(help_type, "/equipo /dep /ref /noref /callsign /bar /qb(s) /pinchos /spinchos /qpinchos\n");
				strcat(help_type, "/ram /balasgoma /esposar /revisar /requisar /ct /gct /sct /vercargos /liberarcargos\n");
                Dialog_Show(playerid, Help_Show, DIALOG_STYLE_MSGBOX, "{008BFF}Militares", help_type, "Regresar", "Cerrar");

            }

        }
		case 6:
		{
            if (Es_Pandilla_Mafia(playerid) == 0) return  ShowInfoForPlayer(playerid, "debes ser de una banda ilegal.", 2000);
			new help_type[1028];
			strcat(help_type, "Lider:\n");
			strcat(help_type, "/invitar - /fchat - /fnombre - /frango - /banda - /festacionar\n\n");
			strcat(help_type, "Miembros:\n");
			strcat(help_type, "/fam - /togfam - /wsp - /togwsp - /graffiti - /ref - /noref - /pintar\n");
			strcat(help_type, "/conquistar - /fcoches - /pedido drogas - /cajafuerte - /fpagarm\n");
            Dialog_Show(playerid, Help_Show, DIALOG_STYLE_MSGBOX, "{008BFF}Bandas", help_type, "Regresar", "Cerrar");
        }
		case 7:
		{
			if (CountNegocios(playerid) == 0) return SendClientMessage(playerid, 0xccccccff, "* No tienes ningun negocio a tu nombre.");
			SendClientMessage(playerid, 0x00A04CFF, "NEGOCIO:{FFFFFF} /minegocio /nseguro /vendernegocio /venderminegocio /comprarnegocio");
			return 1;
		}
        case 8:
		{
			SendClientMessage(playerid, 0x00A04CFF, "ACCESORIOS:{ffffff} /accesorios /poneraccesorios /quitaraccesorios /poneracc [0-4 ranura] /recogertoy");
			return 1;
		}
        case 9:
		{
			new showdialog[512];
			strcat(showdialog, "{CCCCCC}Carguero\n");
			strcat(showdialog, "{CCCCCC}Delincuente\n");
			strcat(showdialog, "{CCCCCC}Basurero\n");
			strcat(showdialog, "{CCCCCC}Camionero\n");
			strcat(showdialog, "{CCCCCC}Ladron de coches\n");
			strcat(showdialog, "{CCCCCC}Carpintero\n");
			strcat(showdialog, "{CCCCCC}Aserrador\n");
			strcat(showdialog, "{CCCCCC}Mecanico\n");
			strcat(showdialog, "{CCCCCC}Prostituta\n");
			strcat(showdialog, "{CCCCCC}Granjero\n");
			strcat(showdialog, "{CCCCCC}Traficante\n");
			strcat(showdialog, "{CCCCCC}deshabilitado\n");
			strcat(showdialog, "{CCCCCC}Recolector\n");
			strcat(showdialog, "{CCCCCC}Minero\n");
			strcat(showdialog, "{CCCCCC}Medico\n");
			Dialog_Show(playerid, JobHelp, DIALOG_STYLE_LIST, "Ayuda Trabajos", showdialog, "Continuar", "Volver");
		}
        case 10:
		{
            if (InfoJugador[playerid][jNivelVIP] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres usuario premium.");
			Dialog_Show(playerid, Help_Show, DIALOG_STYLE_MSGBOX, "{008BFF}Premium", "/casillero - /vip - /togvip - /colaborador - /instalarneon - /neon - /repararvip - /vmiembros - /prendas", "Regresar", "Cerrar");
        }
        case 11:
		{
            new danimaccion[3000];
            strcat(danimaccion, "/danzar - /bebido - /movil - /cmovil - /bomba - /apuntar - /dormir\n");
    		strcat(danimaccion, "/adios - /saludo - /trato - /crack - /fumando - /gro - /hablando - /taichi\n");
    		strcat(danimaccion, "/caer - /reir - /tumbarse - /vomitar - /comiendo - /herido - /medico - /oralsex\n");
    		strcat(danimaccion, "/muerto - /brazos - /pandillero - /taxi - /trafico - /golpeado - /besar - /boxear\n");
    		strcat(danimaccion, "/espada /policia  /tortazo - /rodar - /cacheado - /bate - /gritando - /facepalm\n");
    		strcat(danimaccion, "/animar - /esposado - /lanzar - /basket - /cansado - /saltovital - /pelea - /depie\n");
    		strcat(danimaccion, "/rascarse - /apoyarse - /correr - /strip - /bailar - /asientosexi - /spray - /fokear\n");
    		strcat(danimaccion, "/rifle - /mecanico - /carga - /consola - /barandilla - /llorar - /cruzarbrazos\n");
    		strcat(danimaccion, "/discutir /camara  /bofetada - /billar - /beso - /dedo - /mear - /asco - /no - /si\n");
    		strcat(danimaccion, "/cansarme - /asiento - /pararme - /irsecortao - /comerciar - /echarme - /cubrirme\n");
  			strcat(danimaccion, "/coche - /agonizar - /levantarme - /mmm - /paja /oficinaanim /dildosex - /oralsexcar\n");
            Dialog_Show(playerid, Help_Show, DIALOG_STYLE_MSGBOX, "{008BFF}Animaciones", danimaccion, "Regresar", "Cerrar");
        }
        case 12: Dialog_Show(playerid, Help_Show, DIALOG_STYLE_MSGBOX, "{008BFF}Uber", "/uber /suber /auber", "Regresar", "Cerrar");
    }
    return 1;
}

Dialog:JobHelp(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_ayuda(playerid);
	new dialogShow[2056];
	switch (listitem)
	{
		case 0: // carguero
		{
			strcat(dialogShow, "{008BFF}Carguero:\n\n");
			strcat(dialogShow, "{CCCCCC}Para iniciar el trabajo, utiliza {008BFF}/empezarcarga{CCCCCC}, una vez lleves una cantidad favorable de cargas,\n");
			strcat(dialogShow, "{CCCCCC}para dejar de trabajar y cobrar tu pago usa {008BFF}/dcargar{CCCCCC}, entre mas cargas mayor sera tu pago.\n\n");
			strcat(dialogShow, "{CCCCCC}Este trabajo cuenta con {008BFF}/habilidad{CCCCCC}.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
		}
		case 1: // delincuente
		{
			strcat(dialogShow, "{008BFF}Delincuente:\n\n");
			strcat(dialogShow, "{CCCCCC}Para mostrar tu nivel de ladron {008BFF}/delincuente\n");
			strcat(dialogShow, "{CCCCCC}Para revisar a un jugador {008BFF}/cachear [id jugador]\n");
			strcat(dialogShow, "{CCCCCC}Para robar algun articulo de 24-7 {008BFF}/hurtar\n");
			strcat(dialogShow, "{CCCCCC}Para robar una caja fuerta de negocio {008BFF}/robarcaja\n");
			strcat(dialogShow, "{CCCCCC}Para robar un cajero automatico {008BFF}/explotarcajero\n");
			strcat(dialogShow, "{CCCCCC}Para romper una puerta de casa y robarla {008BFF}/explotarcasa\n");
			strcat(dialogShow, "{CCCCCC}Para ubicar puntos de venta de objetos robados {008BFF}/puntosventa\n");
			strcat(dialogShow, "{CCCCCC}Para vender objetos robados de casa {008BFF}/venderobjeto\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
		}
		case 2: // basurero
		{
			strcat(dialogShow, "{008BFF}Basurero:\n\n");
			strcat(dialogShow, "{CCCCCC}Para iniciar el trabajo, utiliza {008BFF}/basurero{CCCCCC} dentro de un camion de basura,\n");
			strcat(dialogShow, "{CCCCCC}se te marcara en el radar los puntos determinados en las venturas para recoger basura.\n\n");
			strcat(dialogShow, "{CCCCCC}Este trabajo cuenta con {008BFF}/habilidad{CCCCCC}.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
		}
		case 3: // camionero
		{
			strcat(dialogShow, "{008BFF}Camionero:\n\n");
			strcat(dialogShow, "{CCCCCC}Para iniciar el trabajo {008BFF}/transportar\n");
			strcat(dialogShow, "{CCCCCC}Para cancelar una carga activa {008BFF}/borrarcarga\n\n");
			strcat(dialogShow, "{CCCCCC}Este trabajo cuenta con {008BFF}/habilidad{CCCCCC}.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
		}
		case 4: // ladron de coches
		{
			strcat(dialogShow, "{008BFF}Ladron de coches:\n\n");
			strcat(dialogShow, "{CCCCCC}Para mostrar tu nivel de ladron {008BFF}/delincuente\n");
			strcat(dialogShow, "{CCCCCC}Para abrir un vehiculo bloqueado {008BFF}/fseguro\n");
			strcat(dialogShow, "{CCCCCC}Para iniciar un robo de camion {008BFF}/pedido camion\n");
			strcat(dialogShow, "{CCCCCC}Para arrancar un camion robado {008BFF}/engine\n");
			strcat(dialogShow, "{CCCCCC}Para cancelar un pedido de camion {008BFF}/pedido cancelar\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
		}
		case 5: // carpintero
		{
			strcat(dialogShow, "{008BFF}Carpintero:\n\n");
			strcat(dialogShow, "{CCCCCC}Para iniciar el trabajo, utiliza {008BFF}/crearmueble{CCCCCC}, una vez lleves una cantidad favorable de muebles,\n");
			strcat(dialogShow, "{CCCCCC}puedes cobrar tu pago con el comando {008BFF}/dmueble{CCCCCC}, entre mas muebles mayor sera tu pago.\n\n");
			strcat(dialogShow, "{CCCCCC}Este trabajo cuenta con {008BFF}/habilidad{CCCCCC}.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
		}
		case 6: // aserrador
		{
			strcat(dialogShow, "{008BFF}Aserrador:\n\n");
			strcat(dialogShow, "{CCCCCC}Para iniciar el trabajo, utiliza {008BFF}/creartronco{CCCCCC}, una vez lleves una cantidad favorable de troncos,\n");
			strcat(dialogShow, "{CCCCCC}puedes cobrar tu pago con el comando {008BFF}/dtronco{CCCCCC}, entre mas troncos mayor sera tu pago.\n\n");
			strcat(dialogShow, "{CCCCCC}Este trabajo cuenta con {008BFF}/habilidad{CCCCCC}.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
		}
		case 7: // mecanico
		{
			strcat(dialogShow, "{008BFF}Mecanico:\n\n");
			strcat(dialogShow, "{CCCCCC}Para colocarte en servicio {008BFF}/mecanicoduty\n");
			strcat(dialogShow, "{CCCCCC}Para atender las solicitudes {008BFF}/llamados\n");
			strcat(dialogShow, "{CCCCCC}Para reparar un vehiculo {008BFF}/reparacion [id jugador] [precio]\n");
			strcat(dialogShow, "{CCCCCC}Para llenar el combustible de un vehiculo {008BFF}/gasolina [id jugador] [precio]\n");
			strcat(dialogShow, "{CCCCCC}Para instalar hidraulica a un vehiculo {008BFF}/hidraulica [id jugador] [precio]\n");
			strcat(dialogShow, "{CCCCCC}Para cambiar la pintura de un vehiculo {008BFF}/pintura [id jugador] [precio] [color 1] [color 2]\n");
			strcat(dialogShow, "{CCCCCC}Para cambiar el paintjob de un vehiculo {008BFF}/paintjob [id jugador] [precio] [color]\n");
			strcat(dialogShow, "{CCCCCC}Para cancelar un llamado activo {008BFF}/cancelarmecanico\n");
			strcat(dialogShow, "{CCCCCC}Para instalar llantas a un vehiculo {008BFF}/llantas [id jugador] [precio]\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
		}
		case 8: // prostituta
		{
			strcat(dialogShow, "{008BFF}Prostituta:\n\n");
			strcat(dialogShow, "{CCCCCC}Este trabajo consiste en realizar servicios placenteros a hombres en sus vehiculos\n");
			strcat(dialogShow, "{00CC00}/oral [id jugador] [precio].{CCCCCC} Este servicio aumenta 5HP a tus clientes.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
		}
		case 9: // granjero
		{
			strcat(dialogShow, "{008BFF}Granjero:\n\n");
			strcat(dialogShow, "{CCCCCC}Para iniciar el trabajo, utiliza {008BFF}/cosechar{CCCCCC}, una vez lleves una cantidad favorable de gramos,\n");
			strcat(dialogShow, "{CCCCCC}puedes cobrar tu pago con el comando {008BFF}/dcosechar{CCCCCC}, entre mas gramos mayor sera tu pago.\n\n");
			strcat(dialogShow, "{CCCCCC}Este trabajo cuenta con {008BFF}/habilidad{CCCCCC}.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
		}
		case 10: // traficante
		{
			strcat(dialogShow, "{008BFF}Traficante:\n\n");
			strcat(dialogShow, "{CCCCCC}Para iniciar el trabajo, utiliza {008BFF}/traficar{CCCCCC}.\n\n");
			strcat(dialogShow, "{CCCCCC}Este trabajo cuenta con {008BFF}/habilidad{CCCCCC}.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
		}
		case 11: // deshabilitado
		{
			strcat(dialogShow, "{008BFF}deshabilitado:\n\n");
			strcat(dialogShow, "{CCCCCC}proximamente\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
		}
		case 12: // recolector
		{
			strcat(dialogShow, "{008BFF}Recolector:\n\n");
			strcat(dialogShow, "{CCCCCC}Para iniciar el trabajo, utiliza {008BFF}/recolectar{CCCCCC} y comienza a recolectar las manzanas.\n\n");
			strcat(dialogShow, "{CCCCCC}Para finalizar el trabajo, utiliza {008BFF}/dejarrecolectar {cccccc}y recibiras la paga automaticamente.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
		}
		case 13: // minero
		{
			strcat(dialogShow, "{008BFF}Minero:\n\n");
			strcat(dialogShow, "{CCCCCC}Es un empleo que te ofrece minar y conseguir dinero mediante diferentes materiales\n");
			strcat(dialogShow, "{CCCCCC}Necesitaras un 'Maso' para picar materiales, como Carbon, Plata.\n");
			strcat(dialogShow, "{CCCCCC}En el transcurso del trabajo es posible conseguir materiales, estos son utlites para la creacion de armas.\n");
			strcat(dialogShow, "{CCCCCC}Este trabajo cuenta con {008BFF}/habilidad{CCCCCC}.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
		}
		case 14: //medico
		{
			strcat(dialogShow, "{008BFF}Medico:\n\n");
			strcat(dialogShow, "{CCCCCC}/servicio - {FFFFFF}ingresar en servicio y ver los llamados del 911\n");
			strcat(dialogShow, "{CCCCCC}/callsign - {FFFFFF}asignacion de unidad\n");
			strcat(dialogShow, "{CCCCCC}/m - {FFFFFF}megafono de unidad\n");
			strcat(dialogShow, "{CCCCCC}/reanimar\n");
			strcat(dialogShow, "{CCCCCC}/curar\n");
			strcat(dialogShow, "{CCCCCC}/sacarsangre\n");
			strcat(dialogShow, "{CCCCCC}/irmedico - {FFFFFF}aceptar llamadas de 911\n");
			strcat(dialogShow, "{CCCCCC}/irbombero - {FFFFFF}aceptar llamadas de 911 sobre incendios\n");
			strcat(dialogShow, "{CCCCCC}/verincendios\n");
			strcat(dialogShow, "{CCCCCC}Debes ir al interior del hospital e ir al casillero para equiparte.\n");
			Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, "Ayuda trabajo", dialogShow, "Aceptar", "");
	    }
	}
	return 1;
}

stock VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z) {
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

stock PlayerToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

encode_tires(tire1, tire2, tire3, tire4) {
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}

funcion LimpiarPantalla(playerid) {
    for(new i = 0; i < 50; i++) {
        SendClientMessage(playerid, 0xAFAFAFFF, "");
    }
    return 1;
}

stock IsWeaponWithAmmo(weaponid)
{
	switch(weaponid)
	{

		case 16..18, 22..39, 41..42: return 1;
		default: return 0;
	}
	return 0;

}

stock GetPlayerWeaponAmmo(playerid,weaponid)
{
	new wd[2][13];
	for(new i; i<13; i++) GetPlayerWeaponData(playerid,i,wd[0][i],wd[1][i]);
	for(new i; i<13; i++)
	{

		if(weaponid == wd[0][i]) return wd[1][i];
	}
	return 0;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(hittype==BULLET_HIT_TYPE_PLAYER){
		if(!(-100.0<=fX<=100.0)||!(-1000.0<=fY<=100.0)||!(-100.0<=fZ<=100.0)){
           //kickorbanthecrasher
			return 0b0;
		}
	}

	if(InfoJugador[playerid][jManoDerecha] == 40 && weaponid == 23){TaserRecarga[playerid] = 1; SetTimerEx("RecargarTaser", 5000, false, "i", playerid);} //Sistema de recarga de taser
    return 1;
}

funcion RecargarTaser(playerid) {
	TaserRecarga[playerid] = 0;
	return 1;
}

stock Random(min, max) {
    new a = random(max - min) + min;
    return a;
}

funcion CargarObjetos(playerid) {
    TogglePlayerControllable(playerid, 0);
	GameTextForPlayer(playerid, "~g~Cargando~n~   ~w~~h~~h~Objetos", 4000, 1);
    SetPVarInt(playerid, "CargandoObjetos", 1);
    return SetTimerEx("RemoverObjetosC", 4000, 0, "d", playerid);
}

CMD:comprar(playerid)
{
	//negocios 'comprar'
	Menu_Compra_Negocios(playerid);
	return 1;
}

Menu_Compra_Negocios(playerid)
{
	if (!_Dnegocio(playerid, 3.5)) return 1;
	new id = EnNegocio(playerid);
	if (id == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en el interior de ningun negocio.");
	if (InfoNegocio[id][nVenta] != 0)
	{
		if (InfoNegocio[id][nProductos] < 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este negocio esta actualmente sin productos.");
	}
	switch (InfoNegocio[id][nTipo])
	{
		case 1: // 24-7
		{
			Dialog_Show(playerid, Show247, DIALOG_STYLE_LIST, "Productos de venta",
			"Recargar saldo\n\
			Telefono(numero): $10\n\
			Modelos de telefono: $200\n\
			Loteria: $2\n\
			Cigarros: $5\n\
			Camara: $120\n\
			Encendedor: $3\n\
			Sprunk: $4\n\
			Agua: $5\n\
			Bolsa de doritos: $5\n\
			Bolsa de patatas: $5\n\
			Bolsa de nachos: $5\n\
			Dados: $5\n\
			Codeine: $5\n\
			Botiquin: 300$", "Continuar", "Salir");
		}
		case 2: // Ropa
		{
			Dialog_Show(playerid, ShowRopa, DIALOG_STYLE_LIST, "Productos de venta", "Ropa\nAccesorios\nMochila {FFCF0D}", "Seleccionar", "Salir");
			DentroNegocio[playerid] = id;
		}
		case 3: // Restaurante
		{
			ShowPlayerDialog(playerid, D_RESTAURANTES, DIALOG_STYLE_LIST, "Productos de venta",
			"Botella de cerveza: $20\n\
			Copa de vino: $30\n\
			Vaso de whisky: $40\n\
			Vaso de ron: $50\n\
			Kids meal: $30\n\
			Bolsa patatas: $20\n\
			Burrito: $30\n\
			Pizza jamon y queso: $45\n\
			Parilla vegetariana: $28", "Continuar", "Salir");
		}
		case 4: //CluckinBell
		{
			ShowPlayerDialog(playerid, D_CLUCKINBELL, DIALOG_STYLE_LIST, "Productos de venta",
			"The little: $20\n\
			Cluker: $20\n\
			Kids meal: $30\n\
			Cluker mediana: $45\n\
			Super cluker: $50\n\
			Cluker' bell + cocacola: $60\n\
			Especial bell: $40", "Continuar", "Salir");
		}
		case 5: //Pizzeria
		{
			ShowPlayerDialog(playerid, D_PIZZASTACK, DIALOG_STYLE_LIST, "Productos de venta",
			"The bustert: $20\n\
			The double d-lux: $35\n\
			The full rack: $30\n\
			Pizza jamon y queso: $40\n\
			Pizza completa + cocacola: $55\n\
			Plato del hoy: $40\n\
			Especial pizza familiar: $60", "Continuar", "Salir");
		}
		case 6: //BurgerShot
		{
			ShowPlayerDialog(playerid, D_BURGERSHOT, DIALOG_STYLE_LIST, "Productos de venta",
			"Simple shot: $20\n\
			Doble barreled: $30\n\
			Buckshot especial: $40\n\
			Parilla vegetariana: $45\n\
			Filete de mariscos: $100\n\
			Pollo bits: $3", "Continuar", "Salir");
		}
		case 7: //Ammu-Nation
		{
			if (InfoJugador[playerid][jLicencias][0] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes licencia de armas.");
			Dialog_Show(playerid, Show_Ammunation, DIALOG_STYLE_LIST, "Productos de venta", "Navaja\t$120\nDesert Eagle\t$10000\nEscopeta\t$12000\nChaleco\t$3000\nCartuchos/Cargadores", "Continuar", "Salir");
		}
		case 8: //Peluqueria
		{
			ShowPlayerDialog(playerid, D_Peluqueria1, DIALOG_STYLE_MSGBOX, "Productos de venta", "\n{ffffff}A continuacion debes elegir la..\nranura donde quieres el {00a2ff}accesorio{ffffff}.\n\n   - Recuerda que cada {00a2ff}accesorio{ffffff} tiene un costo de {00c200}25{ffffff}$.\n\n", "Continuar", "Cancelar"); //- Accesorios
		}
		case 9: //SexShop
		{
			ShowPlayerDialog(playerid, D_SEXSHOP, DIALOG_STYLE_LIST, "Productos de venta", "{FFFFFF}Ropa de mujer\nRopa de hombre\nJuguetes de diversion", "Continuar", "Salir");
		}
		case 10: //Gasolinera
		{
			ShowPlayerDialog(playerid, D_GASOLINERA, DIALOG_STYLE_LIST, "Productos de venta",
			"Bidon de gasolina: $50\n\
			Bolsa patatas: $5\n\
			Refresco: $5\n\
			Encendedor: $10\n\
			Cigarros: $5\n\
			Piezas recambio: $100", "Continuar", "Salir");
		}
		case 11: //Electronica
		{
			Dialog_Show(playerid, ShowElectronica, DIALOG_STYLE_LIST, "Productos de venta",
			"Telefono(objeto): $200\n\
			Camara: $150\n\
			Equipo sonido: $60\n\
 			Estereo de maletero: $500\n\
			Radio portable: $50", "Continuar", "Salir");
		}
		case 12: //Bar
		{
			ShowPlayerDialog(playerid, D_NEG_CLUBS, DIALOG_STYLE_LIST, "Productos de venta",
			"Botella de agua: $4\n\
			Copa de vino: $20\n\
			Vaso de whisky: $30\n\
			Vaso de ron: $20\n\
			Cerveza: $8\n\
			Botella de whisky: $100\n\
			Caja de cigarros: $20\n\
			Encendedor: $10\n\
			Burrito: $30", "Continuar", "Salir");
		}
		case 13: //- Ferreteria
		{
			ShowPlayerDialog(playerid, D_FERRETERIA, DIALOG_STYLE_LIST, "Productos de venta",
			"Lata de gasolina: $30\n\
			Destornillador: $20\n\
			Palanca: $30\n\
			Chaleco naranja: $250\n\
			Pala: $50\n\
			Spray (para graffitis): $18\n\
			Caja vacia: $50\n\
			Bate baseball: $150\n\
			Cuchillo (plantas): $60", "Continuar", "Salir");
		}
		case 14: //- Alhambra
		{
			ShowPlayerDialog(playerid, D_NEG_CLUBS, DIALOG_STYLE_LIST, "Productos de venta",
			"Botella de agua: $4\n\
			Copa de vino: $20\n\
			Vaso de whisky: $20\n\
			Vaso de ron: $30\n\
			Cerveza: $8\n\
			Botella de whisky: $100\n\
			Caja de cigarros: $20\n\
			Encendedor: $10\n\
			Burrito: $30\n\
			Botella de vino: $150\n\
			Botella de ron: $100", "Continuar", "Salir");
		}
		case 15: //- Strip club
		{
			ShowPlayerDialog(playerid, D_NEG_CLUBS, DIALOG_STYLE_LIST, "Productos de venta",
		"Botella de agua $4\n\
			Copa de vino $20\n\
			Vaso de whisky $20\n\
			Vaso de ron $30\n\
			Cerveza $8\n\
			Botella de whisky: $100\n\
			Caja de cigarros: $20\n\
			Encendedor: $10\n\
			Burrito: $30\n\
			Botella de vino: $150\n\
			Botella de ron: $100", "Continuar", "Salir");
		}
		case 16: //- Club private
		{
			ShowPlayerDialog(playerid, D_NEG_CLUBS, DIALOG_STYLE_LIST, "Productos de venta",
			"Botella de agua: $4\n\
			Copa de vino: $20\n\
			Vaso de whisky: $20\n\
			Vaso de ron: $30\n\
			Cerveza: $8\n\
			Botella de whisky: $100\n\
			Caja de cigarros: $20\n\
			Encendedor: $10\n\
			Burrito: $30\n\
			Botella de vino: $150\n\
			Botella de ron: $100", "Continuar", "Salir");
		}
		case 18: // 24-7 robable
		{
			Dialog_Show(playerid, Show247, DIALOG_STYLE_LIST, "Productos de venta",
			"Recargar saldo\n\
			Telefono(numero): $200\n\
			Modelos de telefono: $30\n\
			Loteria: $2\n\
			Cigarros: $4\n\
			Camara: $120\n\
			Encendedor: $3\n\
			Sprunk: $5\n\
			Agua: $5\n\
			Bolsa de doritos: $5\n\
			Bolsa de patatas: $5\n\
			Bolsa de nachos: $5\n\
			Dados: $8\n\
			Codeine: $30\n\
			Botiquin: 300$", "Continuar", "Salir");
		}
	}
	return 1;
}

Dialog:Show_Ammunation(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new id = EnNegocio(playerid), obj, dinero, gformat[190];
	if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
	switch (listitem)
	{
		case 0: dinero = 12, obj = 4;
		case 1: dinero = 10000, obj = 24;
		case 2: dinero = 12000, obj = 25;
		case 3: dinero = 3000, obj = 72;

	}
	if (GetPlayerCash(playerid) < dinero) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero."); return 1; }
	if (InfoJugador[playerid][jManoDerecha] > 0 && InfoJugador[playerid][jManoIzquierda] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes tener una mano vacia.");
	if (InfoJugador[playerid][jManoDerecha] == 0)
	{
		if (obj == 24 || obj == 25 || obj == 4)
		{
			if (InfoJugador[playerid][jTiempos][8] > 0) { SendClientMessageEx(playerid, -1, "* Debes esperar %d minutos para otra compra.", InfoJugador[playerid][jTiempos][8]); return 1; }
			if (InfoInventario[obj][IDArma] > 0) { DarArma(playerid,obj); }
			format(gformat, sizeof gformat, "compra %s", InfoInventario[obj][NombreObjeto]);
			ActualizarArmas(playerid);
			GivePlayerCash(playerid, -dinero, gformat);
			RestarNegocio(id, dinero);
			if (obj == 24) InfoJugador[playerid][jTiempos][8] = 5;
			else if(obj == 35) InfoJugador[playerid][jTiempos][8] = 5;
			else if (obj == 4) InfoJugador[playerid][jTiempos][8] = 5;
			ActualizarManos(playerid);
			guardar_int_mysql("cuentas", "Tiempos9", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][8]);
			return 1;
		}
		else if (obj == 72)
		{
			if (InfoJugador[playerid][jTiempos][8] > 0) { SendClientMessageEx(playerid, -1, "* Debes esperar %d minutos para otra compra.", InfoJugador[playerid][jTiempos][8]); return 1; }
			InfoJugador[playerid][jManoDerecha] = obj;
			InfoJugador[playerid][jManoDerechaCant] = InfoInventario[obj][Capacidad];
			PonerObjeto(playerid, 1, obj);
			if (InfoInventario[obj][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[obj][IDArma], InfoInventario[obj][Capacidad]); }
			format(gformat, sizeof gformat, "compra %s", InfoInventario[obj][NombreObjeto]);
			GivePlayerCash(playerid, -dinero, gformat);
			RestarNegocio(id, dinero);
			if (obj == 72) InfoJugador[playerid][jTiempos][8] = 5;
			ActualizarManos(playerid);
			guardar_int_mysql("cuentas", "Tiempos9", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][8]);
			return 1;
		}
		else
		{
			if (InfoInventario[obj][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[obj][IDArma], InfoInventario[obj][Capacidad]); }
			format(gformat, sizeof gformat, "compra %s", InfoInventario[obj][NombreObjeto]);
			ActualizarArmas(playerid);
			GivePlayerCash(playerid, -dinero, gformat);
			RestarNegocio(id, dinero);
			ActualizarManos(playerid);
			return 1;
		}
	}
	else if (InfoJugador[playerid][jManoDerecha] != 0)
	{
		format(gformat, sizeof gformat, "compra %s", InfoInventario[obj][NombreObjeto]);
		ActualizarArmas(playerid);
		GivePlayerCash(playerid, -dinero, gformat);
		RestarNegocio(id, dinero);
		ActualizarManos(playerid);
		return 1;
	}
	return 1;
}

Dialog:Show_2Ammunation(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
		if (InfoJugador[playerid][jLicencias][0] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes licencia de armas.");
		Dialog_Show(playerid, Show_Ammunation, DIALOG_STYLE_LIST, "Productos de venta", "Navaja\t$12\nDesert Eagle\t$370\nEscopeta\t$1.500\nChaleco\t$500\nCartuchos/Cargadores", "Continuar", "Salir");
		return 1;
	}
	new id = EnNegocio(playerid), obj, dinero, gformat[190];
	if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
	switch (listitem)
	{
		case 0: dinero = 5, obj = 41;
		case 1: dinero = 7, obj = 42;
		case 2: dinero = 5, obj = 43;
		case 3: dinero = 10, obj = 44;
		case 4: dinero = 5, obj = 45;
		case 5: dinero = 15, obj = 46;
		case 6: dinero = 14, obj = 47;
		case 7: dinero = 20, obj = 48;
		case 8: dinero = 25, obj = 49;
	}
	if (InfoJugador[playerid][jTiempos][19] > 0) { SendClientMessageEx(playerid, -1, "* Debes esperar %d minutos para otra compra.", InfoJugador[playerid][jTiempos][19]); return 1; }
	if (GetPlayerCash(playerid) < dinero) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero."); return 1; }
	if (InfoJugador[playerid][jManoDerecha] > 0 && InfoJugador[playerid][jManoIzquierda] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes tener una mano vacia.");
	if (InfoJugador[playerid][jManoDerecha] == 0)
	{
		InfoJugador[playerid][jManoDerecha] = obj;
		InfoJugador[playerid][jManoDerechaCant] = InfoInventario[obj][Capacidad];
		PonerObjeto(playerid, 1, obj);
		InfoJugador[playerid][jTiempos][19] = 5;
		guardar_int_mysql("cuentas", "Tiempos20", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][19]);
		ActualizarManos(playerid);
		if (InfoJugador[playerid][jNivelVIP] == 0)
		{
			format(gformat, sizeof gformat, "compra %s", InfoInventario[obj][NombreObjeto]);
			GivePlayerCash(playerid, -dinero, gformat);
			RestarNegocio(id, dinero);
		}
		else
		{
			format(gformat, sizeof gformat, "compra %s", InfoInventario[obj][NombreObjeto]);
			GivePlayerCash(playerid, -(dinero*75)/100, gformat);
			RestarNegocio(id, (dinero*75)/100);
			SendClientMessageEx(playerid, 0xC93CCEFF, "Descuento premium! precio original $%d, a ti te costo $%d.", dinero, (dinero*75)/100);
		}
		return 1;
	}
	else if (InfoJugador[playerid][jManoDerecha] != 0)
	{
		InfoJugador[playerid][jManoIzquierda] = obj;
		InfoJugador[playerid][jManoIzquierdaCant] = InfoInventario[obj][Capacidad];
		PonerObjeto(playerid, 2, obj);
		InfoJugador[playerid][jTiempos][19] = 5;
		guardar_int_mysql("cuentas", "Tiempos20", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][19]);
		ActualizarManos(playerid);
		if (InfoJugador[playerid][jNivelVIP] == 0)
		{
			format(gformat, sizeof gformat, "compra %s", InfoInventario[obj][NombreObjeto]);
			GivePlayerCash(playerid, -dinero, gformat);
			RestarNegocio(id, dinero);
		}
		else
		{
			format(gformat, sizeof gformat, "compra %s", InfoInventario[obj][NombreObjeto]);
			GivePlayerCash(playerid, -(dinero*75)/100, gformat);
			RestarNegocio(id, (dinero*75)/100);
			SendClientMessageEx(playerid, 0xC93CCEFF, "Descuento premium! precio original $%d, a ti te costo $%d.", dinero, (dinero*75)/100);
		}
		return 1;
	}
	return 1;
}

Dialog:AccionComisaria(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0: cmd_fpagarm(playerid);
		case 1: cmd_pagarm(playerid);
		case 2:
		{
			if (InfoJugador[playerid][jEstrellas] == 0 || InfoJugador[playerid][jEstrellas] == 1) return SendClientMessageEx(playerid, 0xccccccff, "Tu nivel de busqueda es %d, no es necesario entregarse.", InfoJugador[playerid][jEstrellas]);
			Set_Wasted_Player(playerid, 10, 1000*InfoJugador[playerid][jEstrellas], 0, 0, 0);
		}
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if (IsPlayerNPC(playerid)) return 1;
	if (!IsPlayerConnectedEx(playerid)) return 1;
	// graffitear
	if (PRESSED(KEY_FIRE) && GetPlayerWeapon(playerid) == WEAPON_SPRAYCAN && GetPVarInt(playerid, "ModoSpray") == 0 && InfoJugador[playerid][jFamMiembro] != 0)
	{
		new bool: nearGraffiti;
		Loop(id, totalgraffitis, 1) if (InfoGraffiti[id][gr_PosX] != 0)
		{
			if (IsPlayerInRangeOfPoint(playerid, 2.0, InfoGraffiti[id][gr_PosX], InfoGraffiti[id][gr_PosY], InfoGraffiti[id][gr_PosZ]))
			{
				nearGraffiti = true;
				SetPVarInt(playerid, "ModoSpray", 1);
				SetPVarInt(playerid, "GraffitiID", id);
			}
		}
		if (nearGraffiti)
			playerGraffitiTimer[playerid] = SetTimerEx("UsandoSpray", 1000, true, "i", playerid);
	}
	if (RELEASED(KEY_FIRE) && GetPlayerWeapon(playerid) == WEAPON_SPRAYCAN && GetPVarInt(playerid, "ModoSpray") == 1)
	{
		KillTimer(playerGraffitiTimer[playerid]);
		DeletePVar(playerid, "ModoSpray");
		DeletePVar(playerid, "GraffitiID");
		GameTextForPlayer(playerid, "~n~~w~Pintura ~r~cancelada", 3000, 5);
	}
	//
	//basurero
	if (con_basura_mano[playerid] != 0)
	{
     	if(idcompanero[playerid] == INVALID_PLAYER_ID)
	    {
			if (IsPlayerInRangeOfVehicle(playerid, tu_veh_basura[playerid], 8.0))
			{
				if (newkeys == KEY_FIRE)
				{
					if (IsPlayerInAnyVehicle(playerid)) return 1;

					RemovePlayerAttachedObject(playerid, 9);
					con_basura_mano[playerid] = 0;
					puntos_recorridos_basu[playerid]++;
					if (puntos_recorridos_basu[playerid] == sizeof(point_basura))
					{
						SetPlayerCheckpoint(playerid, 1066.5154, 1357.0149, 10.3095, 6.0);
						SendClientMessage(playerid, 0x00CC00FF, "Entrega el camion de basura para recibir tu paga.");
						SetPVarInt(playerid, "act_point", 2);
					    return 1;
					}
					SetPlayerCheckpoint(playerid, point_basura[puntos_recorridos_basu[playerid]][0], point_basura[puntos_recorridos_basu[playerid]][1], point_basura[puntos_recorridos_basu[playerid]][2], 2.0);
					GameTextForPlayer(playerid, "~y~Siguiente punto...", 5000, 5);
				}
			}
		}
		else
		{
			if (IsPlayerInRangeOfVehicle(playerid, tu_veh_basura[playerid], 8.0) || IsPlayerInRangeOfVehicle(playerid, tu_veh_basura[idcompanero[playerid]], 8.0))
			{
				if (newkeys == KEY_FIRE)
				{
					if (IsPlayerInAnyVehicle(playerid)) return 1;

					RemovePlayerAttachedObject(playerid, 9);
					con_basura_mano[playerid] = 0;
					puntos_recorridos_basu[playerid]++;
					puntos_recorridos_basu[idcompanero[playerid]]++;
					if (puntos_recorridos_basu[playerid] == sizeof(point_basura) || puntos_recorridos_basu[idcompanero[playerid]] == sizeof(point_basura))
					{
						SetPlayerCheckpoint(playerid, 1066.5154, 1357.0149, 10.3095, 6.0);
						SendClientMessage(playerid, 0x00CC00FF, "Entrega el camion de basura para recibir tu paga.");
						SetPVarInt(playerid, "act_point", 2);
					    return 1;
					}
					SetPlayerCheckpoint(playerid, point_basura[puntos_recorridos_basu[playerid]][0], point_basura[puntos_recorridos_basu[playerid]][1], point_basura[puntos_recorridos_basu[playerid]][2], 2.0);
					GameTextForPlayer(playerid, "~y~Siguiente punto...", 5000, 5);
					SetPlayerCheckpoint(idcompanero[playerid], point_basura[puntos_recorridos_basu[idcompanero[playerid]]][0], point_basura[puntos_recorridos_basu[idcompanero[playerid]]][1], point_basura[puntos_recorridos_basu[idcompanero[playerid]]][2], 2.0);
					GameTextForPlayer(idcompanero[playerid], "~y~Siguiente punto...", 5000, 5);
				}
			}
		}
	    return 1;
	}
	//saed
	if (Es_job(playerid, 15))
	{
		if (PRESSED(KEY_FIRE) && InfoJugador[playerid][jManoDerecha] == 37 && InfoJugador[playerid][jManoDerechaCant] > 1)
		{
			new FireID = CercaIncendio(playerid);
			if (FireID != -1)
			{
				if (InfoIncendio[FireID][pI_intensidad] > 0)
				{
					if (InfoIncendio[FireID][pI_intensidad]-2 < 0) InfoIncendio[FireID][pI_intensidad] = 0;
					else InfoIncendio[FireID][pI_intensidad]--;
					if (InfoIncendio[FireID][pI_intensidad] != 0)
					{
						new text[128];
						format(text, sizeof text, "~n~~n~~n~~n~~n~~n~~n~ ~y~Intensidad de incendio:~n~~w~%d restante", InfoIncendio[FireID][pI_intensidad]);
						GameTextForPlayer(playerid, text, 2000, 3);
					}
					else
					{
						DestroyFire(FireID);
						GivePlayerCash(playerid, 1800, "apagar incendio");
						SendClientMessageEx(playerid, 0x00CCCCFF, "Recibiste $1.800 por apagar el incendio.");
					}
				}
			}
		}
	}
	// tecla N
	if (newkeys == KEY_NO)
	{
		// robando banco
		if (ID_Banco_Robando[playerid] != -1) cmd_tomarbolsa(playerid);
		//
		if (InfoJugador[playerid][jTeclaEspalda] == 3) { cmd_espalda(playerid); }
		if (IsPlayerInAnyVehicle(playerid)) cmd_tablero(playerid);
		if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) // a pie
		{
			//negocios 'comprar'
			Menu_Compra_Negocios(playerid);
		    //otr0s
	        if(HaciendoPressBanca[playerid] == 1)
			{
	            RepeticionesPressBanca[playerid]++;
	            ProgresoPressBanca[playerid]++;
	            if(ProgresoPressBanca[playerid] >= 20) {
	                ApplyAnimation(playerid, "benchpress", "gym_bp_up_B", 1, 0, 0, 0, 1, 0, 1);
	                ProgresoPressBanca[playerid] = 0;
	                return 1;
	            }
	        }
	        if (ID_Cajero(playerid) != -1) cmd_banco(playerid);
            if (_enPos(playerid, 3.0, 234.0532,159.7177,1003.0234) || _enPos(playerid, 3.0, 250.05, 67.5716, 1003.64))
            {
                Dialog_Show(playerid, AccionComisaria, DIALOG_STYLE_LIST, "Comisiaria", "Vehiculos de familia\nVehiculo Propio\nEntregarse", "Continuar", "Volver");
            }
			if (_enPos(playerid, 5, 312.5109,-165.8690,999.6010))
			{
				Dialog_Show(playerid, Show_Mercado_Negro, DIALOG_STYLE_LIST, "Mercado negro",
			   "Nudillera\t$35\n\
				Mascara\t$500\n\
				Ganzuas\t$250\n\
				Cuerda y venda\t$60\n\
				DNI falso\t$2,000\n\
				Vender telefono\t\n\
				9mm Silenciada\t$2,500\n\
				Materiales de armas(+120)\t3,000$\n\
				Semilla de marihuana\t100$\n\
				Dinamita\t5,000$", "Continuar", "Salir");
			}
			static
				id = -1,
				string[550*5];
			if((id = Fabrica_Nearest(playerid)) != -1)
			{
			    if(InfoFabrica[id][fabricaConquistada] == 0)
			    {
			        format(string, sizeof string, "{FFFFFF}Esta fabrica esta libre de {ff7575}conquista{FFFFFF}.\nNecesitas ser Lider de una faccion tipo {ff7575}Mafia{FFFFFF}, {ff7575}Pandilla{FFFFFF}.\n{FFFFFF}Tener mas de cinco miembros conectados simultaneamente.\n\nPara la creacion de armas necesitas {FFFF00}Materiales {FFFFFF}los cuales puedes ganar en {FFFF00}'Minero'\n\n{5c8f8e}**Comandos disponibles:\n\n/conquistar {FFFFFF}para obtener por 1hora la fabrica.");
			        ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "{FFFFFF}Propiedad {ff7575}? {ffffff}Fabrica sin conquistar", string, "Aceptar", "");
				}
				else if(InfoFabrica[id][fabricaConquistada] == 1)
				{
				    format(string, sizeof string, "{FFFFFF}Esta fabrica esta conquistada por una faccion {ff7575}%s{FFFFFF}.\n\n{FFFFFF}Tiempo restante: {ff7575}%s{FFFFFF}.", InfoFabrica[id][fabricaQuienConquisto], generarTiempo(InfoFabrica[id][fabricaTiempoConquista]));
				    ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_MSGBOX, "{FFFFFF}Propiedad {ff7575}? {ffffff}Fabrica conquistada", string, "Aceptar", "");
				}
				
				return 1;
			}
		}
	}
    if((newkeys & KEY_SECONDARY_ATTACK))
	{
	    if (Es_job(playerid, 14))
	    {
	        if(_enPos(playerid, 4.0, -752.0788,-371.9366,1738.3269))
	        {
			    if(ConRoca[playerid] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya tienes una roca en las manos, entragala en la procesadora.");
			    if(InfoJugador[playerid][jManoDerecha] != 137) return 1;
			    if(Picando[playerid] > 0) return 1;
			    TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "IsFrozen", 0);
				ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,20000,1);
				GameTextForPlayer(playerid, "~g~Picando ~w~Roca...", 30000, 3);
				Picando[playerid]++;
				hands[playerid] = SetTimerEx("TimeMiner",1000,true,"id",playerid, 1);
			}
			else if(_enPos(playerid, 4.0, 661.2281,135.7510,54.6579))
	        {
	            if(InfoJugador[playerid][jHabilidad2][8] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres nivel 2 de minero para picar aqui.");
	            if(ConRoca[playerid] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya tienes una roca en las manos, entragala en la procesadora.");
			    if(InfoJugador[playerid][jManoDerecha] != 137) return 1;
			    if(Picando[playerid] > 0) return 1;
			    TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "IsFrozen", 0);
				ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,20000,1);
				GameTextForPlayer(playerid, "~g~Picando ~w~Roca...", 30000, 3);
				Picando[playerid]++;
				hands[playerid] = SetTimerEx("TimeMiner",1000,true,"id",playerid, 2);
			}
			else if(_enPos(playerid, 4.0, 672.7699,155.8111,54.2593))
	        {
	            if(InfoJugador[playerid][jHabilidad2][8] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres nivel 3 de minero para picar aqui.");
	            if(ConRoca[playerid] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya tienes una roca en las manos, entragala en la procesadora.");
			    if(InfoJugador[playerid][jManoDerecha] != 137) return 1;
			    if(Picando[playerid] > 0) return 1;
			    TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "IsFrozen", 0);
				ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,20000,1);
				GameTextForPlayer(playerid, "~g~Picando ~w~Roca...", 30000, 3);
				Picando[playerid]++;
				hands[playerid] = SetTimerEx("TimeMiner",1000,true,"id",playerid, 3);
			}
			else if(_enPos(playerid, 4.0, -761.4437,-402.4356,1736.7665))
	        {
	            if(InfoJugador[playerid][jHabilidad2][8] < 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres nivel 3 de minero para picar aqui.");
	            if(ConRoca[playerid] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya tienes una roca en las manos, entragala en la procesadora.");
			    if(InfoJugador[playerid][jManoDerecha] != 137) return 1;
			    if(Picando[playerid] > 0) return 1;
			    TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "IsFrozen", 0);
				ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,20000,1);
				GameTextForPlayer(playerid, "~g~Picando ~w~Roca...", 30000, 3);
				Picando[playerid]++;
				hands[playerid] = SetTimerEx("TimeMiner",1000,true,"id",playerid, 3);
			}

		}
	}
 	if((newkeys & KEY_WALK))
	{
	    if (!Es_job(playerid, 14)) return 1;
	    if (IsPlayerInRangeOfPoint(playerid,1.0,-750.0787,-377.1798,1738.4974) || IsPlayerInRangeOfPoint(playerid,1.0,-751.3654,-382.7716,1738.5060) || IsPlayerInRangeOfPoint(playerid,1.0,691.9836,139.9159,54.6945))
	   	{
	   	    if(ConRoca[playerid] == 1)
		    {
			    SendClientMessage(playerid, 0xACC97F22A, "tiro la roca a la procesadora.");
			    new ganancias, string[210];
			    switch(mineral[playerid])
				{
					case 1:
					{
						new intento = random(3);
						switch(intento)
						{
							case 0: {	ganancias=210;	}
							case 1: {	ganancias=225;	}
							case 2: {	ganancias=240;	}
						}
					}
					case 2:
					{
						new intento = random(3);
						switch(intento)
						{
							case 0: {	ganancias=255;	}
							case 1: {	ganancias=275;	}
							case 2: {	ganancias=300;	}
						}
					}
					case 3..100:
					{
						new intento = random(3);
						switch(intento)
						{
							case 0: {	ganancias=320;	}
							case 1: {	ganancias=355;	}
							case 2: {	ganancias=400;	}
						}
					}
				}
				GivePlayerCash(playerid, ganancias, "pago minero");
				format(string, sizeof string, "* Recibiste $%s por el trabajo.", diner_coma(ganancias));
				SendClientMessage(playerid, 0xFFFF00FF, string);
				InfoJugador[playerid][jHabilidad1][8] += 1;
				guardar_int_mysql("cuentas", "Habilidad1_9", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad1][8]);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(playerid,4);
				ConRoca[playerid] = 0;
				mineral[playerid] = 0;
				TogglePlayerAllDynamicCPs(playerid, true);
				DisablePlayerCheckpoint(playerid);
			}
			return 1;
		}
		return 1;
	}
	if(newkeys == KEY_CTRL_BACK)
	{
		if (InfoJugador[playerid][jTeclaEspalda] == 1) { cmd_espalda(playerid); }
		cmd_puertas(playerid);
		cmd_entrar(playerid);
		cmd_salir(playerid);
		cmd_ayuntamiento(playerid);
		if (_enPos(playerid, 2.5, 1440.7760,-2290.7625,13.5469))
		{
			ShowPlayerDialog(playerid, 4379, DIALOG_STYLE_LIST, "Bienvenido > North America Oficial", "- Conocer facciones\n- Conocer bancos de la ciudad\n- Sistema de Bolsillos\n- Los trabajos que tenemos\n- Talleres mecanicos y que son", ">", "?");
		}
		else if (_enPos(playerid, 2.5, 1887.6332,-1869.7506,13.5474))
		{
	    	ShowPlayerDialog(playerid, 4380, DIALOG_STYLE_LIST, "Trabajos > North America Oficial", "- ?Como empezar?\n- ?Que necesitas saber?\n- {FFFF00}?Implementaciones!", ">", "?");
		}
		else if (_enPos(playerid, 2.5, 608.8870,144.1534,9.2761))
		{
			ShowPlayerDialog(playerid, 4381, DIALOG_STYLE_LIST, "Trabajos > North America Oficial", "- ?Como empezar?\n- ?Que necesitas saber?\n- {FFFF00}?Implementaciones!", ">", "?");
		}
		else if (_enPos(playerid, 2.5, 2183.1450,-2253.7949,14.7734))
	  	{
	    	ShowPlayerDialog(playerid, 4382, DIALOG_STYLE_LIST, "Trabajos > North America Oficial", "- ?Como empezar?\n- ?Que necesitas saber?\n- {FFFF00}?Implementaciones!", ">", "?");
		}
		else if (_enPos(playerid, 2.5, 1048.5063,1313.6018,10.8203))
	 	{
	    	ShowPlayerDialog(playerid, 4383, DIALOG_STYLE_LIST, "Trabajos > North America Oficial", "- ?Como empezar?\n- ?Que necesitas saber?\n- {FFFF00}?Implementaciones!", ">", "?");
		}
		else if (_enPos(playerid, 2.5, 1658.4202,759.4255,10.8203))
		{
	   		ShowPlayerDialog(playerid, 4384, DIALOG_STYLE_LIST, "Trabajos > North America Oficial", "- ?Como empezar?\n- ?Que necesitas saber?\n- {FFFF00}?Implementaciones!", ">", "?");
		}
		else if (_enPos(playerid, 2.5, -415.2265,-1759.8402,5.8383))
		{
	   		ShowPlayerDialog(playerid, 4385, DIALOG_STYLE_LIST, "Trabajos > North America Oficial", "- ?Como empezar?\n- ?Que necesitas saber?\n- {FFFF00}?Implementaciones!", ">", "?");
		}
		else if (_enPos(playerid, 2.5, -1060.5051,-1206.3903,129.2188))
		{
	   		ShowPlayerDialog(playerid, 4386, DIALOG_STYLE_LIST, "Trabajos > North America Oficial", "- ?Como empezar?\n- ?Que necesitas saber?\n- {FFFF00}?Implementaciones!", ">", "?");
		}
		else if (_enPos(playerid, 2.5, 1181.4335,-1330.4563,13.5857))
		{
	   		ShowPlayerDialog(playerid, 4387, DIALOG_STYLE_LIST, "Trabajos > North America Oficial", "- ?Como empezar?\n- ?Que necesitas saber?\n- {FFFF00}?Implementaciones!", ">", "?");
		}
		else if (_enPos(playerid, 2.5, -382.9461,-1426.1866,26.3113))
		{
	   		ShowPlayerDialog(playerid, 4388, DIALOG_STYLE_LIST, "Trabajos > North America Oficial", "- ?Como empezar?\n- ?Que necesitas saber?\n- {FFFF00}?Implementaciones!", ">", "?");
		}
		Loop(id, totalpuntosvehtmp, 1) if (InfoVehTemporal[id][veh_PosX] != 0.0)
		{
			if (_enPos(playerid, 2, InfoVehTemporal[id][veh_PosX], InfoVehTemporal[id][veh_PosY], InfoVehTemporal[id][veh_PosZ]) && InfoJugador[playerid][jInterior] == 0 && InfoJugador[playerid][jVirtualWorld] == 0)
			{
				if (InfoJugador[playerid][jFamMiembro] != InfoVehTemporal[id][veh_familia]) return SendClientMessage(playerid, 0xccccccFF, "*** No eres miembro de la banda legal al que pertenece este punto.");
				if(id_coche_temporal_fac[playerid] != INVALID_VEHICLE_ID) return SendClientMessage(playerid, 0xccccccFF, "*** Ya spawneaste un vehiculo de faccion, deberas eliminar el anterior.");
				new conteo = 0, dialog[950], string[120], string2[40], title[45];
				Loop(slot, 10, 0) if(InfoVehTemporal[id][veh_vehicles_models][slot] != 0)
				{
					format(string, sizeof string, "%d. %s\n", slot+1, GetNameVehicle(InfoVehTemporal[id][veh_vehicles_models][slot]));
					strcat(dialog, string);
					format(string2, sizeof string2, "RanuraSacarVeh%d", conteo);
					SetPVarInt(playerid, string2, slot);
					conteo++;
				}
				format(title, sizeof title, "Veh?culos de %s", InfoVehTemporal[id][veh_Nombre]);
				Dialog_Show(playerid, Sacar_VehTemporal, DIALOG_STYLE_LIST, title, dialog, "Aceptar", "Cancelar");
				SetPVarInt(playerid, "id_punto", id);
			}
		}
	}
	// Este } Termina el "KEY_CTRL_BACK" Letra H.
	if (newkeys==KEY_CROUCH)
	{
		if (InfoJugador[playerid][jTeclaEspalda] == 1) { cmd_espalda(playerid); }
		else{
		if (IsPlayerInAnyVehicle(playerid)){
				cmd_puertas(playerid);
				cmd_peaje(playerid);
				cmd_taller(playerid);
				cmd_combustible(playerid);
			}
			}
	}
	if (newkeys == KEY_FIRE)
    {
     new params[1];
     {
     cmd_comer(playerid, params);
     cmd_beber(playerid, params);
     }
     return 1;
    }

	if (newkeys == KEY_YES)
	{
		if (InfoJugador[playerid][jDutyPD] == 0) { cmd_bol(playerid); }
		else
		{
			if (InfoJugador[playerid][jManoDerecha] == 40 && InfoJugador[playerid][jManoDerechaCant] == 0)
			{
				if (TaserRecarga[playerid] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Espera 5 segundos antes de recargar.");
				AccionesRol(playerid, 0, "recarga su pistola taser (400V).");
				GivePlayerWeapon(playerid, 23, 2);
				InfoJugador[playerid][jManoDerechaCant] = 2;
				ApplyAnimation(playerid,"SILENCED","Silence_reload",4.1,0,1,1,0,0,1);
			}
		}
	}
    if(IsKeyJustDown(KEY_SPRINT, newkeys, oldkeys) && JugadorUsandoAnimacion[playerid] == 1) {
        JugadorSentado[playerid] = 0;
        JugadorUsandoAnimacion[playerid] = 0;
  	    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    }
    if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 1.5, 0, 0, 0, 0, 0, 1);
    if(newkeys & KEY_SPRINT && !(oldkeys & KEY_SPRINT) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 1.5, 0, 0, 0, 0, 0, 1);
    if(newkeys & KEY_SPRINT) {
        if(IsPlayerConnected(playerid)) {
            if(InfoJugador[playerid][jAlcohol] > 35) { if (!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1, 1); }
        }
    }
	if((newkeys & KEY_YES))
	{
	    if(_enPos(playerid, 2.5, 1155.0530,-1734.1528,13.7734))
	    {
     		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
     		if(EstadoRentas == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En este momento no se pueden rentar [Sistema deshabilitado]");
    		ShowPlayerDialog(playerid, 4378, DIALOG_STYLE_MSGBOX, "Rentas de Faggio-Motos >{008BFF} North America Oficial", "{FFFFFF}?Estas seguro que deseas rentar una moto?\n\nCosto: {1EB032}200$\n\n{CCCCCC}Importante:{FFFFFF} El vehiculo desaparece a los 40 segundos de estar sin uso.", ">", "?");
		}
		else if(_enPos(playerid, 2.5, 1814.5594,-1876.3534,13.5781))
	    {
	        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
            if(EstadoRentas == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En este momento no se pueden rentar [Sistema deshabilitado]");
	        ShowPlayerDialog(playerid, 4378, DIALOG_STYLE_MSGBOX, "Rentas de Faggio-Motos >{008BFF} North America Oficial", "{FFFFFF}?Estas seguro que deseas rentar una moto?\n\nCosto: {1EB032}200$\n\n{CCCCCC}Importante:{FFFFFF} El vehiculo desaparece a los 40 segundos de estar sin uso.", ">", "?");
		}
		else if(_enPos(playerid, 2.5, 2407.2253,-1530.8224,23.9922))
	    {
	        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
            if(EstadoRentas == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En este momento no se pueden rentar [Sistema deshabilitado]");
	        ShowPlayerDialog(playerid, 4378, DIALOG_STYLE_MSGBOX, "Rentas de Faggio-Motos >{008BFF} North America Oficial", "{FFFFFF}?Estas seguro que deseas rentar una moto?\n\nCosto: {1EB032}200$\n\n{CCCCCC}Importante:{FFFFFF} El vehiculo desaparece a los 40 segundos de estar sin uso.", ">", "?");
		}
		else if(_enPos(playerid, 2.5, 1212.4705,-1327.8193,13.5601))
	    {
	        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
            if(EstadoRentas == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En este momento no se pueden rentar [Sistema deshabilitado]");
	        ShowPlayerDialog(playerid, 4378, DIALOG_STYLE_MSGBOX, "Rentas de Faggio-Motos >{008BFF} North America Oficial", "{FFFFFF}?Estas seguro que deseas rentar una moto?\n\nCosto: {1EB032}200$\n\n{CCCCCC}Importante:{FFFFFF} El vehiculo desaparece a los 40 segundos de estar sin uso.", ">", "?");
		}
		else if(_enPos(playerid, 2.5, 515.4665,138.4498,24.1811))
	    {
	        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
  			if(EstadoRentas == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En este momento no se pueden rentar [Sistema deshabilitado]");
	        ShowPlayerDialog(playerid, 4378, DIALOG_STYLE_MSGBOX, "Rentas de Faggio-Motos >{008BFF} North America Oficial", "{FFFFFF}?Estas seguro que deseas rentar una moto?\n\nCosto: {1EB032}200$\n\n{CCCCCC}Importante:{FFFFFF} El vehiculo desaparece a los 40 segundos de estar sin uso.", ">", "?");
		}
		else if(_enPos(playerid, 2.5, 2407.7251,-2096.6748,13.5469))
	    {
	        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
			if(EstadoRentas == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En este momento no se pueden rentar [Sistema deshabilitado]");
	        ShowPlayerDialog(playerid, 4378, DIALOG_STYLE_MSGBOX, "Rentas de Faggio-Motos >{008BFF} North America Oficial", "{FFFFFF}?Estas seguro que deseas rentar una moto?\n\nCosto: {1EB032}200$\n\n{CCCCCC}Importante:{FFFFFF} El vehiculo desaparece a los 40 segundos de estar sin uso.", ">", "?");
		}
		else if(_enPos(playerid, 2.5, 1870.0323,-1178.6909,23.8281))
	    {
	        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
     		if(EstadoRentas == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En este momento no se pueden rentar [Sistema deshabilitado]");
	        ShowPlayerDialog(playerid, 4378, DIALOG_STYLE_MSGBOX, "Rentas de Faggio-Motos >{008BFF} North America Oficial", "{FFFFFF}?Estas seguro que deseas rentar una moto?\n\nCosto: {1EB032}200$\n\n{CCCCCC}Importante:{FFFFFF} El vehiculo desaparece a los 40 segundos de estar sin uso.", ">", "?");
		}
		else if(_enPos(playerid, 2.5, 1083.5105,1367.4147,10.8203) || _enPos(playerid, 2.5, 1641.9050,825.2701,6.8314))
	    {
	        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
     		if(EstadoRentas == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En este momento no se pueden rentar [Sistema deshabilitado]");
	        ShowPlayerDialog(playerid, 4378, DIALOG_STYLE_MSGBOX, "Rentas de Faggio-Motos >{008BFF} Los Venturas", "{FFFFFF}?Estas seguro que deseas rentar una moto?\n\nCosto: {1EB032}200$\n\n{CCCCCC}Importante: {FFFFFF}El vehiculo desaparece a los 40 segundos de estar sin uso.", ">", "?");
		}
		else if(_enPos(playerid, 2.5, 2084.9177,883.6021,7.3590) || _enPos(playerid, 2.5, 2112.7393,2005.6913,10.8203))
	    {
	        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
     		if(EstadoRentas == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En este momento no se pueden rentar [Sistema deshabilitado]");
	        ShowPlayerDialog(playerid, 4378, DIALOG_STYLE_MSGBOX, "Rentas de Faggio-Motos >{008BFF} Los Venturas", "{FFFFFF}?Estas seguro que deseas rentar una moto?\n\nCosto: {1EB032}200$\n\n{CCCCCC}Importante: {FFFFFF}El vehiculo desaparece a los 40 segundos de estar sin uso.", ">", "?");
		}
		else if(_enPos(playerid, 2.5, 2306.9006,2406.0198,10.8203) || _enPos(playerid, 2.5, 1625.8264,1866.6997,10.8203))
	    {
	        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
     		if(EstadoRentas == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En este momento no se pueden rentar [Sistema deshabilitado]");
	        ShowPlayerDialog(playerid, 4378, DIALOG_STYLE_MSGBOX, "Rentas de Faggio-Motos >{008BFF} Los Venturas", "{FFFFFF}?Estas seguro que deseas rentar una moto?\n\nCosto: {1EB032}200$\n\n{CCCCCC}Importante: {FFFFFF}El vehiculo desaparece a los 40 segundos de estar sin uso.", ">", "?");
		}
		else if(_enPos(playerid, 2.5, 1778.6791,1420.3652,6.8552))
	    {
	        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
     		if(EstadoRentas == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En este momento no se pueden rentar [Sistema deshabilitado]");
	        ShowPlayerDialog(playerid, 4378, DIALOG_STYLE_MSGBOX, "Rentas de Faggio-Motos >{008BFF} Los Venturas", "{FFFFFF}?Estas seguro que deseas rentar una moto?\n\nCosto: {1EB032}200$\n\n{CCCCCC}Importante: {FFFFFF}El vehiculo desaparece a los 40 segundos de estar sin uso.", ">", "?");
        }
		else if(_enPos(playerid, 2.5, 1436.2965,-2277.9526,13.5469))
	    {
	        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
     		if(EstadoRentas == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~En este momento no se pueden rentar [Sistema deshabilitado]");
	        ShowPlayerDialog(playerid, 4378, DIALOG_STYLE_MSGBOX, "Rentas de Faggio-Motos >{008BFF} Los Venturas", "{FFFFFF}?Estas seguro que deseas rentar una moto?\n\nCosto: {1EB032}200$\n\n{CCCCCC}Importante: {FFFFFF}El vehiculo desaparece a los 40 segundos de estar sin uso.", ">", "?");
		}
	}
	if ((newkeys & KEY_HANDBRAKE))
	{
		if (!_Dnegocio(playerid, 3.5)) return 1;
		if (IsPlayerJob(playerid, 2) == 0) return 1;
		new id = EnNegocio(playerid);
		if (id != -1)
		{
			if (InfoJugador[playerid][pTiempoRobo] > 0)
			{
				new string[210];
				format(string, sizeof string, "~n~~n~~n~~n~~r~Debes esperar %s para volver a robar un negocio.", generarTiempo(InfoJugador[playerid][pTiempoRobo]));
				ShowPlayerFooter(playerid, string);
				return 1;
			}
			if (ID_Negocio_Robo[playerid] != -1) return 1;
			if (InfoNegocio[id][nEstadoRobo] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este negocio ya fue robado.");
			new arma = GetPlayerWeapon(playerid);
			if (arma != 22 && arma != 23 && arma != 24 && arma != 25 && arma != 29) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas una arma tamano pequena/mediana para robar un 24/7.");
			TextDrawShowForPlayer(playerid, Textdraws[RoboNegocio][0]);
			TextDrawShowForPlayer(playerid, Textdraws[RoboNegocio][1]);
			TextDrawShowForPlayer(playerid, Textdraws[RoboNegocio][3]);
			GameTextForPlayer(playerid, "~y~Continua apuntando al cajero...", 9000, 3);
			new location[MAX_ZONE_NAME], string[256];
			Get2DZone(location, MAX_ZONE_NAME, InfoNegocio[id][nEntradaX], InfoNegocio[id][nEntradaY], InfoNegocio[id][nEntradaZ]);
			format(string, sizeof string, "CENTRAL: Informo de robo en el negocio %s en %s.", InfoNegocio[id][nNombre], location);
            SendMessageFaction(C_COLORPOLICIA, string, 1, 2, 3);
			if (InfoNegocio[id][nActorX] != 0.0) ApplyDynamicActorAnimation(InfoNegocio[id][nInteriorActor], "PED", "handsup", 4.1, 0, 0, 0, 1, 0);
			Robando[playerid]++;
			ID_Negocio_Robo[playerid] = id;
			Robo[playerid] = SetTimerEx("TimeRobo", 1000, true, "i", playerid);
			LugarRobo[playerid] = 1;
			new Float:PosAudio[3];
			GetPlayerPos(playerid, PosAudio[0],PosAudio[1],PosAudio[2]);
			AudioAlarma(PosAudio[0],PosAudio[1],PosAudio[2]);
			return 1;
		}
	}
	if ((oldkeys & KEY_HANDBRAKE))
	{
	    Robando[playerid] = 0;
	    KillTimer(Robo[playerid]);
	    LugarRobo[playerid] = 0;
	    if (ID_Negocio_Robo[playerid] != -1)
		{
			new id = ID_Negocio_Robo[playerid];
			if (InfoNegocio[id][nActorX] != 0.0) ClearDynamicActorAnimations(InfoNegocio[id][nInteriorActor]);
		}
		ID_Negocio_Robo[playerid] = -1;
	    TextDrawHideForPlayer(playerid, Textdraws[RoboNegocio][0]);
	    TextDrawHideForPlayer(playerid, Textdraws[RoboNegocio][1]);
	    TextDrawHideForPlayer(playerid, Textdraws[RoboNegocio][3]);
	}
    if((newkeys & KEY_FIRE))
	{
        if(GetPVarInt(playerid, "TomoCarpintero") == 1 && EnModoTrabajo[playerid] == 6) {
            if(GetPVarInt(playerid,"MueblesCreados") == 0) {
			    Tronco(playerid);
                return 1;
		    }
        }
        if(GetPVarInt(playerid, "TrabajandoC") == 1 && EnModoTrabajo[playerid] == 6) {
            if(GetPVarInt(playerid,"MueblesCreados") == 0) {
		        HacerMueble(playerid);
                return 1;
            }
        }
        if(GetPVarInt(playerid, "TrabajandoL") == 1 && EnModoTrabajo[playerid] == 7) {
            if(GetPVarInt(playerid,"TroncosCreados") == 0) {
                if (InfoJugador[playerid][jTroncos] < 351) {
			        TalarArbol(playerid);
                    return 1;
				} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Has alcanzado el maximo de troncos (350), vendelos en la carpinteria.");
	        }
        }

    }
    if (((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT))
		&& GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
    return 1;
}

forward UsandoSpray(playerid);
public UsandoSpray(playerid)
{
	//check
	new sprayCounter = GetPVarInt(playerid, "LetraGraffiti"), id = GetPVarInt(playerid, "GraffitiID"), counter[60], graffitiText[128];
	GetPVarString(playerid, "TextoGraffiti", graffitiText, sizeof graffitiText);
	if (isnull(graffitiText)) return SendClientMessage(playerid, 0xEBEBEBFF, "No tienes nada asignado a rociar, usa /graffiti.");
	//spray
	if (IsPlayerInRangeOfPoint(playerid, 2.0, InfoGraffiti[id][gr_PosX], InfoGraffiti[id][gr_PosY], InfoGraffiti[id][gr_PosZ]))
	{
		sprayCounter--;
		SetPVarInt(playerid, "LetraGraffiti", sprayCounter);
		format(counter, sizeof counter, "~p~Pintando~n~~w~&~g~%d]", sprayCounter);
		GameTextForPlayer(playerid, counter, 3000, 3);
		if (sprayCounter <= 0)
		{
			alm(InfoGraffiti[id][gr_Mensaje], graffitiText);
			strreplace(graffitiText, "(n)", "\n");
			strreplace(graffitiText, "(a)", "{0000FF}"); //azul
			strreplace(graffitiText, "(b)", "{FFFFFF}"); //blanco
			strreplace(graffitiText, "(am)", "{FFFF00}"); //amarillo
			strreplace(graffitiText, "(v)", "{00C200}"); //verde
			strreplace(graffitiText, "(ne)", "{000000}"); //negro
			strreplace(graffitiText, "(na)", "{FFBF00}"); //naranja
			strreplace(graffitiText, "(r)", "{FF0000}"); //rojo
			strreplace(graffitiText, "(ce)", "{00FFFF}"); //celeste
			SetDynamicObjectMaterialText(InfoGraffiti[id][gr_Objeto], 0, graffitiText, OBJECT_MATERIAL_SIZE_256x256, "Arial", 32, 1, 0xFFFFFFFF, 0, 1);
			GameTextForPlayer(playerid, "~g~Terminado", 3500, 3);
			alm(InfoGraffiti[id][gr_Creador], InfoJugador[playerid][jNombre_Apellido]);
			InfoGraffiti[id][gr_Fecha] = gettime();
			SetPVarInt(playerid, "LetraGraffiti", GetPVarInt(playerid, "SetraGraffiti"));
			DeletePVar(playerid, "GraffitiID");
			DeletePVar(playerid, "ModoSpray");
			KillTimer(playerGraffitiTimer[playerid]);
			new query[512];
			mysql_format(DBngrp, query, sizeof query, "UPDATE graffitis SET Mensaje = '%e', Creador = '%e', Fecha = '%d' WHERE ID = '%d'", InfoGraffiti[id][gr_Mensaje], InfoGraffiti[id][gr_Creador], InfoGraffiti[id][gr_Fecha], InfoGraffiti[id][grID_sql]);
			mysql_tquery(DBngrp, query);
		}
	}
	else
	{
		SetPVarInt(playerid, "LetraGraffiti", GetPVarInt(playerid, "SetraGraffiti"));
		DeletePVar(playerid, "GraffitiID");
		DeletePVar(playerid, "ModoSpray");
		KillTimer(playerGraffitiTimer[playerid]);
		GameTextForPlayer(playerid, "~n~~w~Pintura ~r~cancelada", 3000, 5);
	}
	return 1;
}

stock strreplace(string[], const search[], const replacement[], bool:ignorecase = false, pos = 0, limit = -1, maxlength = sizeof(string))
{
    // No need to do anything if the limit is 0.
    if (limit == 0)
        return 0;

    new
             sublen = strlen(search),
             replen = strlen(replacement),
        bool:packed = ispacked(string),
             maxlen = maxlength,
             len = strlen(string),
             count = 0
    ;
    // "maxlen" holds the max string length (not to be confused with "maxlength", which holds the max. array size).
    // Since packed strings hold 4 characters per array slot, we multiply "maxlen" by 4.
    if (packed)
        maxlen *= 4;

    // If the length of the substring is 0, we have nothing to look for..
    if (!sublen)
        return 0;

    // In this line we both assign the return value from "strfind" to "pos" then check if it's -1.
    while (-1 != (pos = strfind(string, search, ignorecase, pos))) {
        // Delete the string we found
        strdel(string, pos, pos + sublen);

        len -= sublen;

        // If there's anything to put as replacement, insert it. Make sure there's enough room first.
        if (replen && len + replen < maxlen) {
            strins(string, replacement, pos, maxlength);

            pos += replen;
            len += replen;
        }

        // Is there a limit of number of replacements, if so, did we break it?
        if (limit != -1 && ++count >= limit)
            break;
    }

    return count;
}

Dialog:Show_Mercado_Negro(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (GetPlayerCash(playerid) < 35) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar $35 dolares.");
			if (SetPlayerObject(playerid, 1, 1) == 0) return 1;
			GivePlayerCash(playerid, -35, "nudillera");
			_Mensaje(playerid, 2, "0", "Compraste una nudillera.");
		}
		case 1:
		{
			if (GetPlayerCash(playerid) < 500) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar $500 dolares.");
			if (InfoJugador[playerid][jMascara] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya posees una mascara.");
			GivePlayerCash(playerid, -500, "mascara");
			_Mensaje(playerid, 2, "0", "Compraste una Mascara, comandos: /mascara.");
			InfoJugador[playerid][jMascara] = 1;
			guardar_int_mysql("cuentas", "Mascara", InfoJugador[playerid][jID], InfoJugador[playerid][jMascara]);
		}
		case 2:
		{
			if (GetPlayerCash(playerid) < 250) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar $250 dolares.");
			if (InfoJugador[playerid][jNivel] < 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes ser mayor a nivel de 4.");
			InfoJugador[playerid][jGanzuas] += 1;
			guardar_int_mysql("cuentas", "Ganzuas", InfoJugador[playerid][jID], InfoJugador[playerid][jGanzuas]);
			GivePlayerCash(playerid, -250, "ganzuas");
			_Mensaje(playerid, 2, "0", "Compraste unas ganzuas, comandos: /puente.");
		}
		case 3:
		{
			if (GetPlayerCash(playerid) < 60) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar $60 dolares.");
			if (InfoJugador[playerid][jNivel] < 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes ser mayor a nivel de 4.");
			_Mensaje(playerid, 2, "0", "Compraste un kit de secuestro, comandos: /atar - /vendar.");
			VendasYSoga[playerid] = 1;
			GivePlayerCash(playerid, -8, "kit de secuestro");
		}
		case 4:
		{
			if (GetPlayerCash(playerid) < 2000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar $2,000 dolares.");
			if (InfoJugador[playerid][jFakeDNI] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes comprar otro documento falso, usa /tirardni.");
			ShowPlayerDialog(playerid, D_Cdnifalso, DIALOG_STYLE_INPUT, "{FFFFFF}Falsificacion 1", "Escribe el 'Nombre Apellido' que tendra el documento:", "Siguiente", "Cancelar");
		}
		case 5:
		{
			if (!_Telefono(playerid)){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un telefono en ninguna mano."); return 1;}
			if (_Telefono2(playerid, 1)) { InfoJugador[playerid][jManoDerechaCant] = 0; InfoJugador[playerid][jManoDerecha] = 0; }
			else if (_Telefono2(playerid, 2)) { InfoJugador[playerid][jManoIzquierdaCant] = 0;InfoJugador[playerid][jManoIzquierda] = 0; }
			ActualizarManos(playerid);
			GivePlayerCash(playerid, -8, "movil robado");
			_Mensaje(playerid, 2, "0", "Vendiste el telefono robado por 8$.");
		}
		case 6:
		{
			if (GetPlayerCash(playerid) < 2500) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar 2500$ dolares.");
			DarArma(playerid,23);
			ActualizarArmas(playerid);
			GivePlayerCash(playerid, -2500, "9mm silend mercado negro");
			_Mensaje(playerid, 2, "0", "Compraste una .45 Colt");
		}
		case 7:
		{
			if (GetPlayerCash(playerid) < 3000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar $3000.");
			if (InfoJugador[playerid][jNivel] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes ser mayor a nivel de 2.");
			InfoJugador[playerid][jMateriales] += 120;
			guardar_int_mysql("cuentas", "Materiales", InfoJugador[playerid][jID], InfoJugador[playerid][jMateriales]);
			GivePlayerCash(playerid, -3000, "materiales");
			_Mensaje(playerid, 2, "0", "Compraste materiales, busca una fabrica para crear armas.");
		}
		case 8:
		{
			if (GetPlayerCash(playerid) < 100) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar 100$ dolares.");
			if (SetPlayerObject(playerid, 79, 1) == 0) return 1;
			GivePlayerCash(playerid, -100, "semilla marihuana mercado negro");
			_Mensaje(playerid, 2, "0", "Compraste una semilla de marihuana.");
		}
		case 9:
		{
			if (InfoJugador[playerid][jNivel] < 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes ser mayor a nivel de 5.");
			if (GetPlayerCash(playerid) < 5000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes pagar 5000$ dolares.");
			if (SetPlayerObject(playerid, 142, 1) == 0) return 1;
			GivePlayerCash(playerid, -5000, "dinamita");
			_Mensaje(playerid, 2, "0", "Compraste una dinamita por $5.000, uso /dinamita.");
		}
	}
	return 1;
}

Dialog:Show247(playerid, response, listitem, inputtext[])
{
	new id = EnNegocio(playerid);
	if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
	if (!response) return 1;
	switch (listitem)
	{
		case 0:
		{
			if (InfoJugador[playerid][jTelefono] == 0 || InfoJugador[playerid][jTelefono] == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes numero de telefono, consigue uno en un 24-7 o tienda electronica.");
			ShowPlayerDialog(playerid, D_SALDO, DIALOG_STYLE_INPUT, "{D6E1EB}Monto de saldo", "{FFFFFF}Por favor, escribe la cantidad de saldo que desea recargar a tu telefono.\n\n{FFFFFF}- Escribe unicamente el {00C200}MONTON (EN NUMEROS){FFFFFF}.", "Aceptar", "");
		}
		case 1:
		{
			if (RevisarDinero(playerid, 10))
			{
				new randphone = 40000 + random(69999);
				InfoJugador[playerid][jTelefono] = randphone;
				SendClientMessageEx(playerid, 0x8080FFFF, "Compraste un numero de telefono (%d).", InfoJugador[playerid][jTelefono]);
				if(InfoJugador[playerid][jNivelVIP] == 0) PagarNegocio(playerid, id, 6);
				else PagarNegocio(playerid, id, 4), _Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $6, a ti te costo $4.");
				guardar_int_mysql("cuentas", "Telefono", InfoJugador[playerid][jID], InfoJugador[playerid][jTelefono]);
			}
		}
		case 2:
		{
			if(RevisarDinero(playerid, 200))
			{
				Dialog_Show(playerid, ShowTelefonos, DIALOG_STYLE_LIST, "{D6E1EB}Modelos de telefonos", "Naranja\nCeleste\nLadrillo\nNegro\nMorado\nRojo\nVerde\nAzul\nAmarillo", "Continuar", "Salir");
			}
		}
		case 3:
		{
			if(RevisarDinero(playerid, 2))
			{
				Dialog_Show(playerid, ShowLoteria, DIALOG_STYLE_INPUT, "{D6E1EB}Loteria Nacional", "Inserta un numero entre 1 y 120. exitos!", "Comprar", "Cancelar");
				PagarNegocio(playerid, id, 2);
			}
		}
		case 4:
		{
			if(RevisarDinero(playerid, 5))
			{
				new objeto = 88;
				if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
				if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 5;}
				else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 5;}
				_Mensaje(playerid, 2, "0", "Has comprado una caja de cigarro, comandos: /fumar - /cfumar");
				PagarNegocio(playerid, id, 5);
				ActualizarManos(playerid);
			}
		}
		case 5:
		{
			if(RevisarDinero(playerid, 120))
			{
				new objeto = 38;
				if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
				if(InfoJugador[playerid][jManoDerecha] == 0){
				PonerObjeto(playerid, 1, objeto);
				InfoJugador[playerid][jManoDerecha] = objeto;
				InfoJugador[playerid][jManoDerechaCant] = 30;
				if (InfoInventario[objeto][IDArma] > 0) { GivePlayerWeapon(playerid, InfoInventario[objeto][IDArma], 30); } }
				else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 30;}
				_Mensaje(playerid, 2, "0", "Has comprado una camara.");
				if(InfoJugador[playerid][jNivelVIP] == 0) PagarNegocio(playerid, id, 12);
				else PagarNegocio(playerid, id, 120), _Mensaje(playerid, 4, "C93CCE", "Descuento premium! precio original $12, a ti te costo $10.");
				ActualizarManos(playerid);
			}
		}
		case 6:
		{
			if(RevisarDinero(playerid, 3))
			{
				new objeto = 87;
				if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
				if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 10;}
				else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 10;}
				_Mensaje(playerid, 2, "0", "Has comprado un encendedor.");
				PagarNegocio(playerid, id, 3);
				ActualizarManos(playerid);
			}
		}
		case 7:
		{
			if(GetPlayerCash(playerid) < 4) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero."); return 1; }
			new objeto = 93;
			if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
			if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 1;}
			else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
			PagarNegocio(playerid, id, 4);
			ActualizarManos(playerid);
		}
		case 8:
		{
			if(GetPlayerCash(playerid) < 5) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero."); return 1; }
			new objeto = 95;
			if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
			if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 1;}
			else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
			PagarNegocio(playerid, id, 5);
			ActualizarManos(playerid);
		}
		case 9:
		{
			if(GetPlayerCash(playerid) < 5) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero."); return 1; }
			new objeto = 90;
			if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
			if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 3;}
			else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 3;}
			PagarNegocio(playerid, id, 5);
			ActualizarManos(playerid);
		}
		case 10:
		{
			if(GetPlayerCash(playerid) < 5) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero."); return 1; }
			new objeto = 91;
			if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
			if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 3;}
			else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 3;}
			PagarNegocio(playerid, id, 5);
			ActualizarManos(playerid);
		}
		case 11:
		{
			if(GetPlayerCash(playerid) < 5) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero."); return 1; }
			new objeto = 92;
			if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
			if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 3;}
			else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 3;}
			PagarNegocio(playerid, id, 5);
			ActualizarManos(playerid);
		}
		case 12:
		{
			if(GetPlayerCash(playerid) < 5) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero."); return 1; }
			new objeto = 83;
			if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
			if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 3;}
			else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 3;}
			PagarNegocio(playerid, id, 5);
			ActualizarManos(playerid);
		}
		case 13:
		{
			if(GetPlayerCash(playerid) < 5) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero."); return 1; }
			new objeto = 125;
			if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
			if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 2;}
			else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 2;}
			PagarNegocio(playerid, id, 5);
			ActualizarManos(playerid);
		}
		case 14:
		{
			if(GetPlayerCash(playerid) < 300) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero."); return 1; }
			new objeto = 139;
			if(InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
			if(InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 1;}
			else if(InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
			PagarNegocio(playerid, id, 300);
			ActualizarManos(playerid);
		}
	}
	return 1;
}

Dialog:ShowTelefonos(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (InfoJugador[playerid][jManoDerecha] != 0 && InfoJugador[playerid][jManoIzquierda] != 0){ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas, guarda lo que tienes o tiralo."); return 1;}
	new objeto, id = EnNegocio(playerid);
    if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
	switch (listitem)
	{
		case 0: objeto = 115;
		case 1: objeto = 116;
		case 2: objeto = 117;
		case 3: objeto = 118;
		case 4: objeto = 119;
		case 5: objeto = 120;
		case 6: objeto = 121;
		case 7: objeto = 122;
		case 8: objeto = 123;
	}
	if (InfoJugador[playerid][jManoDerecha] == 0){PonerObjeto(playerid, 1, objeto); InfoJugador[playerid][jManoDerecha] = objeto, InfoJugador[playerid][jManoDerechaCant] = 1;}
	else if (InfoJugador[playerid][jManoIzquierda] == 0){PonerObjeto(playerid, 2, objeto); InfoJugador[playerid][jManoIzquierda] = objeto, InfoJugador[playerid][jManoIzquierdaCant] = 1;}
	SendClientMessage(playerid, 0x8080FFFF, "Compraste un telefono, comandos: /telefono");
	GivePlayerCash(playerid, -15, "pago telefono 2");
	RestarNegocio(id, 15);
	ActualizarManos(playerid);
	return 1;
}

Dialog:ShowLoteria(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new lenght = strlen(inputtext);
	if (lenght > 0 && lenght < 4)
	{
		InfoJugador[playerid][jLoteria] = strval(inputtext);
		guardar_int_mysql("cuentas", "Loteria", InfoJugador[playerid][jID], InfoJugador[playerid][jLoteria]);
		SendClientMessageEx(playerid, 0x8080FFFF, "Compraste la boleta numero %d, exitos.", InfoJugador[playerid][jLoteria]);
	}
	return 1;
}

Dialog:ShowRopa(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	if (listitem == 0) //skins
	{
		//guardado de posicion
		GetPlayerPos(playerid, NegocioPos[playerid][0], NegocioPos[playerid][1], NegocioPos[playerid][2]);
		GetPlayerFacingAngle(playerid, NegocioPos[playerid][3]);
		NegocioVW[playerid] = GetPlayerVirtualWorld(playerid);
		NegocioInt[playerid] = GetPlayerInterior(playerid);
		//camara del negocio
        if (InfoJugador[playerid][jSexo] == 1) ShowModelSelectionMenu(playerid, SkinsHombre, "Selecciona skin");
		else ShowModelSelectionMenu(playerid, SkinsMujer, "Selecciona skin");
		//muestra
		showmenushop(playerid);
	}
	else if (listitem == 1) //toys
	{
		if (CountPlayerToy(playerid) == 5) return SendClientMessage(playerid, 0xccccccff, "* No puedes comprar mas de cinco accesorios, elimina alguno para comprar otro.");
		//guardado de posicion
		GetPlayerPos(playerid, NegocioPos[playerid][0], NegocioPos[playerid][1], NegocioPos[playerid][2]);
		GetPlayerFacingAngle(playerid, NegocioPos[playerid][3]);
		NegocioVW[playerid] = GetPlayerVirtualWorld(playerid);
		NegocioInt[playerid] = GetPlayerInterior(playerid);
		//camara del negocio
		new id = ShowCameraSkin(playerid, 3);
		if (id == 0) return SendClientMessage(playerid, 0xccccccff, "* Este negocio no posee ropa para comprar.");
		//muestra
		Loop(x, 5, 0) { TextDrawShowForPlayer(playerid, BuyToy[x]); }
		Toy_ID[playerid] = 0;
		new gformat[128];
		format(gformat, sizeof gformat, "~b~~h~%s~n~~w~~h~~h~Precio: ~g~~h~%d$", NameToyObject(InfoToi[0][tModelo]), GetPriceToy(InfoToi[0][tModelo]));
		PlayerTextDrawSetString(playerid, ToyBuy[playerid], gformat);
		PlayerTextDrawShow(playerid, ToyBuy[playerid]);
		SelectTextDraw(playerid, 0xB2B2B2BB);
		PlayerTextDrawHide(playerid, InfoInferior[playerid]);
		Loop(x, 6, 0) { PlayerTextDrawHide(playerid, TD_PantallaHG[playerid][x]); }
		HidePlayerProgressBar(playerid, BarraExp[playerid]);
		HidePlayerProgressBar(playerid, BarraSed[playerid]);
		HidePlayerProgressBar(playerid, BarraHambre[playerid]);
        TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
		TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
		CreateShowToy(playerid, InfoToi[0][tModelo]);
 }
	else if(listitem == 2)
	{
		if(InfoJugador[playerid][jPuntosRol] < 1) return SendClientMessage(playerid, 0xccccccFF, "* No cuentas con puntos de rol no puedes comprar una mochila.");
		if (GetPlayerCash(playerid) < 150000) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No posees 15.000$ para comprar la mochila.");
		SendClientMessageEx(playerid, 0xFFFF00FF, "* Compraste una Mochila de 9 slots por 15.000$.");
		generar_mochila(playerid);
	}
	return 1;
}

	
CreateShowToy(playerid, modelo)
{
	switch (GetPlayerInterior(playerid))
	{
		case 15: { ToyObject[playerid] = CreatePlayerObject(playerid, modelo, 202.39929, -96.68066, 1005.24164, 0.0, 0.0, 0.0, 50.0); }
		case 14: { ToyObject[playerid] = CreatePlayerObject(playerid, modelo, 198.84196, -160.16364, 1000.55725, 0.0, 0.0, 0.0, 50.0); }
		case 3: { ToyObject[playerid] = CreatePlayerObject(playerid, modelo, 213.39580, -127.83930, 1003.54138, 0.0, 0.0, 0.0, 50.0); }
		case 1: { ToyObject[playerid] = CreatePlayerObject(playerid, modelo, 209.23981, -33.53190, 1001.97015, 0.0, 0.0, 0.0, 50.0); }
		case 5: { ToyObject[playerid] = CreatePlayerObject(playerid, modelo, 206.26149, -11.01961, 1005.28973, 0.0, 0.0, 0.0, 50.0); }
		case 18: { ToyObject[playerid] = CreatePlayerObject(playerid, modelo, 175.29530, -71.27520, 1001.87683, 0.0, 0.0, 0.0, 50.0); }
		//case 5: { ToyObject[playerid] = CreatePlayerObject(playerid, modelo, -2306.93457, 170.73595, 35.32614, 0.0, 0.0, 0.0, 50.0); }
	}
	return 1;
}

ShowCameraSkin(playerid, type)
{
	switch (GetPlayerInterior(playerid))
	{
		case 15: //binco
		{
		    if (type == 2) return 1;
			SetPlayerCameraPos(playerid, 203.3121, -99.0387, 1006.6979);
			SetPlayerCameraLookAt(playerid, 202.9880, -98.0942, 1006.0990);
			if (type == 1) SetPosEx(playerid, 202.39929, -96.68066, 1005.24164, -185.15991, 15, playerid, 0);
			return 1;
		}
		case 14: //Didier sachs
		{
		    if (type == 2) return 1;
			SetPlayerCameraPos(playerid, 201.8743, -160.5968, 1001.7025);
			SetPlayerCameraLookAt(playerid, 200.9350, -160.2581, 1001.2424);
			if (type == 1) SetPosEx(playerid, 198.84196, -160.16364, 1000.55725, -96.36005, 14, playerid, 0);
			return 1;
		}
		case 3: //Prolaps
		{
		    if (type == 2) return 1;
			SetPlayerCameraPos(playerid, 215.0351, -131.2327, 1004.4999);
			SetPlayerCameraLookAt(playerid, 214.7758, -130.2684, 1004.2000);
			if (type == 1) SetPosEx(playerid, 213.39580, -127.83930, 1003.54138, -160.68002, 3, playerid, 0);
			return 1;
		}
		case 1: //Suburban
		{
		    if (type == 2) return 1;
			SetPlayerCameraPos(playerid, 207.3782, -36.2983, 1002.9725);
			SetPlayerCameraLookAt(playerid, 208.0555, -35.5645, 1002.6483);
			if (type == 1) SetPosEx(playerid, 209.23981, -33.53190, 1001.97015, 143.99997, 1, playerid, 0);
			return 1;
		}
		case 5: //Victim
		{
		    if (type == 2) return 1;
			SetPlayerCameraPos(playerid, 205.0047, -7.8560, 1006.2341);
			SetPlayerCameraLookAt(playerid, 205.2034, -8.8346, 1005.8897);
			if (type == 1) SetPosEx(playerid, 206.26149, -11.01961, 1005.28973, 20.88000, 5, playerid, 0);
			return 1;
		}
		case 18: //ZIP
		{
		    if (type == 2) return 1;
			SetPlayerCameraPos(playerid, 172.6770, -73.2629, 1002.7513);
			SetPlayerCameraLookAt(playerid, 173.5832, -72.8435, 1002.4310);
			if (type == 1) SetPosEx(playerid, 175.29530, -71.27520, 1001.87683, 125.88000, 18, playerid, 0);
			return 1;
		}
		/*case 5: //VIP
		{
		    if (type == 2) return 1;
			SetPlayerCameraPos(playerid, -2305.3743, 173.8470, 36.6756);
			SetPlayerCameraLookAt(playerid, -2306.0076, 173.0736, 36.2256);
			if (type == 1) SetPosEx(playerid, -2306.93457, 170.73595, 35.32614, -31.44001, 5, playerid, 0);
			return 1;
		}*/
	}
	return 0;
}

forward WalkAnim(playerid);
public  WalkAnim(playerid) {
	new keys, updown, leftright;
	GetPlayerKeys(playerid,keys,updown,leftright);
 	if (GetPVarInt(playerid, "HaciendoMueble") == 1) return 1;
    if (GetPVarInt(playerid, "EnCrack") == 1) return 1;
    if (GetPVarInt(playerid, "_heridoC") == 1) return 1;
    if (GetPVarInt(playerid, "EnEvento") == 1) return 1;
	if (GetPlayerWalkingStyle(playerid) == WALK_PED) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WALK_civi",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WALK_gang1",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA2) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WALK_gang2",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_OLD) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WALK_old",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_FAT_OLD) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WALK_fatold",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_FAT) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WALK_fat",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_LADY) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_LADY2) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE2) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_DRUNK) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","WALK_drunk",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	} else if (GetPlayerWalkingStyle(playerid) == WALK_BLIND) {
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT)) {
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		} else ApplyAnimation(playerid,"PED","Walk_Wuzi",4.0,0,0,0,0,1,1), KillTimer(walktime[playerid]);
	}
	return 1;
}

stock SetPlayerWalkingStyle(playerid, style) {
	WalkStyle[playerid] = style;
}

stock GetPlayerWalkingStyle(playerid) {
	return WalkStyle[playerid];
}

funcion RemovePlayerWeapon(playerid, weaponid) { //Quitar un arma de un jugador
    if(!IsPlayerConnected(playerid) || weaponid < 0 || weaponid > 50) return;
    new saveweapon[13], saveammo[13];
    for(new slot = 0; slot < 13; slot++)
    GetPlayerWeaponData(playerid, slot, saveweapon[slot], saveammo[slot]);
    ResetPlayerWeapons(playerid);
    for(new slot; slot < 13; slot++) {
        if(saveweapon[slot] == weaponid || saveammo[slot] == 0) continue;
        GivePlayerWeapon(playerid, saveweapon[slot], saveammo[slot]);
    }
    GivePlayerWeapon(playerid, 0, 1);
}

funcion FinEntrenar(playerid, entrenamiento) {
    if(HaciendoPressBanca[playerid] == 1) {
        new string[128];
        if(RepeticionesPressBanca[playerid] / 20 <= 30) { format(string, sizeof string, "Has hecho %d repeticiones en press banca.", RepeticionesPressBanca[playerid] / 20); }
        else { format(string, sizeof string, "Has hecho 30 repeticiones en press banca."); RepeticionesPressBanca[playerid] = 600; }
        _Mensaje(playerid, 2, "0", string);
        TogglePlayerControllable(playerid, 1);
        ApplyAnimation(playerid, "benchpress", "gym_bp_getoff", 1, 0, 0, 0, 0, 0, 1);
        RemovePlayerAttachedObject(playerid, 9);
        new fuerza = RepeticionesPressBanca[playerid] / 20 / 2 + random(10);
        format(string, sizeof string, "Tu fuerza ha aumentado en %.2f.", float(fuerza) / 100);
        _Mensaje(playerid, 2, "0", string);
        InfoJugador[playerid][jFuerza] += fuerza;
		guardar_int_mysql("cuentas", "Fuerza", InfoJugador[playerid][jID], InfoJugador[playerid][jFuerza]);
        RepeticionesPressBanca[playerid] = 0;
        HaciendoPressBanca[playerid] = 0;
        InfoJugador[playerid][jTiempos][2] += 5;
		guardar_int_mysql("cuentas", "Tiempos3", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][2]);
        UsandoGym[entrenamiento-1] = 0;
		switch (entrenamiento)
		{
			case 1: PressBancaBarraObjeto[0] = CreateDynamicObject(2913, barbell_pos[0][0], barbell_pos[0][1], barbell_pos[0][2], barbell_pos[0][3], barbell_pos[0][4], barbell_pos[0][5]);
			case 2: PressBancaBarraObjeto[1] = CreateDynamicObject(2913, barbell_pos[1][0], barbell_pos[1][1], barbell_pos[1][2], barbell_pos[1][3], barbell_pos[1][4], barbell_pos[1][5]);
			case 3: PressBancaBarraObjeto[2] = CreateDynamicObject(2913, barbell_pos[2][0], barbell_pos[2][1], barbell_pos[2][2], barbell_pos[2][3], barbell_pos[2][4], barbell_pos[2][5]);
			case 4: PressBancaBarraObjeto[3] = CreateDynamicObject(2913, barbell_pos[3][0], barbell_pos[3][1], barbell_pos[3][2], barbell_pos[3][3], barbell_pos[3][4], barbell_pos[3][5]);
		}
        return 1;
    }
    return 1;
}

stock RevisarDinero(playerid, money) {
    if(IsPlayerConnected(playerid)) {
        new b[64];
        new xx;
        xx = money - (GetPlayerCash(playerid));
        if(GetPlayerCash(playerid) >= money) {
            return 1;
        } else {
            format(b, sizeof(b), "No tienes dinero suficiente! Te faltan %d$", xx);
            ShowPlayerFooter(playerid, b);
            return 0;
        }
    }
    return 0;
}

stock Admin(lvl, playerid) {
    if(IsPlayerConnected(playerid)) {
        new admin = InfoJugador[playerid][jAdmin];
        if(admin >= lvl) {
            return 1;
        }
    }
    return 0;
}

HaciendoAnimacion(playerid, animlib[], animname[], Float: Speed, looping, lockx, locky, lockz, lp) {
    if (GetPVarInt(playerid, "HaciendoMueble") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes utilizar una animacion en este momento.");
    if (IsPlayerInAnyVehicle(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes hacer una animacion en un vehiculo.");
    if (GetPVarInt(playerid, "EnEvento") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en un evento.");
	if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar animaciones en este momento.");
    if (GetPVarInt(playerid, "_heridoC") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar animaciones en este momento.");
	JugadorUsandoAnimacion[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, 1);
    return 1;
}

PreCargaAnim(playerid, animlib[]){
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

CargarAnim(playerid) {
    PreCargaAnim(playerid, "CARRY");
    PreCargaAnim(playerid, "PAULNMAC");
    PreCargaAnim(playerid, "DEALER");
    PreCargaAnim(playerid, "INT_HOUSE");
    PreCargaAnim(playerid, "PED");
    PreCargaAnim(playerid, "ped");
    PreCargaAnim(playerid, "BAR");
    PreCargaAnim(playerid, "FOOD");
    PreCargaAnim(playerid, "SUNBATHE");
    PreCargaAnim(playerid, "COP_AMBIENT");
    PreCargaAnim(playerid, "KISSING");
    PreCargaAnim(playerid, "WUZI");
    PreCargaAnim(playerid, "GANGS");
    PreCargaAnim(playerid, "GRAVEYARD");
    PreCargaAnim(playerid, "MISC");
    PreCargaAnim(playerid, "BD_FIRE");
    PreCargaAnim(playerid, "BUDDY");
    PreCargaAnim(playerid, "BOMBER");
    PreCargaAnim(playerid, "RAPPING");
    PreCargaAnim(playerid, "BEACH");
	PreCargaAnim(playerid, "CHAINSAW");
    PreCargaAnim(playerid, "PARK");
    PreCargaAnim(playerid, "SWEET");
    PreCargaAnim(playerid, "SPRAYCAN");
    PreCargaAnim(playerid, "MEDIC");
    PreCargaAnim(playerid, "POLICE");
    PreCargaAnim(playerid, "GYMNASIUM");
    PreCargaAnim(playerid, "RIOT");
    PreCargaAnim(playerid, "SWORD");
	PreCargaAnim(playerid, "GRENADE");
    PreCargaAnim(playerid, "DANCING");
    PreCargaAnim(playerid, "CASINO");
    PreCargaAnim(playerid, "CRACK");
    PreCargaAnim(playerid, "SMOKING");
    PreCargaAnim(playerid, "Attractors");
    PreCargaAnim(playerid, "ON_LOOKERS");
    PreCargaAnim(playerid, "GHANDS");
    PreCargaAnim(playerid, "benchpress");
    PreCargaAnim(playerid, "LOWRIDER");
    PreCargaAnim(playerid, "RIOT");
    PreCargaAnim(playerid, "SCRATCHING");
    PreCargaAnim(playerid, "BLOWJOBZ");
    PreCargaAnim(playerid, "BSKTBALL");
    PreCargaAnim(playerid, "FAT");
    PreCargaAnim(playerid, "POOL");
    PreCargaAnim(playerid, "SNM");
    PreCargaAnim(playerid, "SHOP");
    PreCargaAnim(playerid, "STRIP");
    PreCargaAnim(playerid, "CAR");
    PreCargaAnim(playerid, "GHETTO_DB");
    PreCargaAnim(playerid, "CRIB");
    PreCargaAnim(playerid, "SWAT");
    PreCargaAnim(playerid, "GRAFFITI");
    PreCargaAnim(playerid, "BASEBALL");
    PreCargaAnim(playerid, "INT_OFFICE");
    PreCargaAnim(playerid, "PYTHON");
    PreCargaAnim(playerid, "CAR_CHAT");
    PreCargaAnim(playerid, "CAMERA");
}

funcion RemoverObjetosC(playerid) {
    if(GetPVarType(playerid, "CargandoObjetos")) {
        DeletePVar(playerid, "CargandoObjetos");
        TogglePlayerControllable(playerid, 1);
    }
}

stock Float:GetPlayerSpeed(playerid)
{
	static Float:velocity[3];

	if (IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
	else
	    GetPlayerVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);

	return floatsqroot((velocity[0] * velocity[0]) + (velocity[1] * velocity[1]) + (velocity[2] * velocity[2])) * 100.0;
}

IsValidIP(ip[])
{
    new a;
	for (new i = 0; i < strlen(ip); i++)
	{
		if (ip[i] == '.')
		{
		    a++;
		}
	}
	if (a != 3)
	{
	    return 1;
	}
	return 0;
}

CheckBan(ip[])
{
	new query[160];
	new Cache:result;
	mysql_format(DBngrp, query, sizeof query, "SELECT * FROM ips WHERE IP = '%e'", ip);
	result = mysql_query(DBngrp, query);
	new nm = cache_num_rows();
	cache_delete(result);
	return nm;
}

AddBan(ip[], admin[], razon[])
{
	if (CheckBan(ip) == 0)
	{
		new query[1028];
		mysql_format(DBngrp, query, sizeof query, "INSERT INTO ips (IP, Admin, Fecha, Razon) VALUES ('%e', '%e', '%e', '%e')", ip, admin, FechaHoy(), razon);
		mysql_tquery(DBngrp, query);
	 	foreach(Player, playerid)
		{
		    new playerIP[18];
			GetPlayerIp(playerid, playerIP, sizeof playerIP);
			if (strcmp(playerIP, ip) == 0)
			{
	            SendClientMessageEx(playerid, 0xCCCC00FF, "Has sido expulsado del servidor, tu IP se encuentra bloqueada por %s.", razon);
				SetTimerEx("TimerKICK", 1000, false, "d", playerid);
			}
		}
		return 1;
	}
	return 0;
}

CheckBlackList(nombre[])
{
	new query[160];
	new Cache:result;
	mysql_format(DBngrp, query, sizeof query, "SELECT * FROM blacklist WHERE Nombre_Apellido = '%s'", nombre);
	result = mysql_query(DBngrp, query);
	new nm = cache_num_rows();
	cache_delete(result);
	return nm;
}

CheckChangeName(nombre[])
{
	new query[160];
	new Cache:result;
	mysql_format(DBngrp, query, sizeof query, "SELECT * FROM nombres_cambiados WHERE Nombre_Apellido = '%s'", nombre);
	result = mysql_query(DBngrp, query);
	new nm = cache_num_rows();
	cache_delete(result);
	return nm;
}

public OnPlayerUpdate(playerid)
{
	if (IsPlayerConnectedEx(playerid))
	{
		//
		LastUpdate[playerid] = GetTickCount ();
	    //afk
		if (InfoJugador[playerid][jModoAFK] > 300)
		{
			SendClientMessageEx(playerid, 0xCCCC00FF, "Estuviste en pausa por %s.", Segundos_tiempo(InfoJugador[playerid][jModoAFK]));
		}
		InfoJugador[playerid][jModoAFK] = 0;
		//
		if(GetPVarInt(playerid, "Congelado") == 1) TogglePlayerControllable(playerid, 0);
		if (InfoJugador[playerid][jDutyPD] == 1 && SolicitaRefuerzos[playerid] == 0)
		{
		    if (Es_Banda(playerid, 1)) SetPlayerColor(playerid, 0x3399FF00);	// policia
		    if (Es_Banda(playerid, 2)) SetPlayerColor(playerid, 0x00A64400);  // militares
            if (Es_Banda(playerid, 3)) SetPlayerColor(playerid, 0x8A653A00);  // sheriff
            if (Es_job(playerid, 15) && InfoJugador[playerid][jEstrellas] == 0) SetPlayerColor(playerid, 0xFFB6C100);  // medico
		}
		else
		{
			if (InfoJugador[playerid][jNivelVIP] == 3 && InfoJugador[playerid][jEstrellas] == 0) SetPlayerColor(playerid, 0xE7C94400); //Vip ultra
			if (InfoJugador[playerid][jNivelVIP] == 4 && InfoJugador[playerid][jEstrellas] == 0) SetPlayerColor(playerid, 0x8A4DBD00); //Vip socio
		}
	    new namezone[64];
		GetPlayer3DZone(playerid, namezone, sizeof namezone);
		PlayerTextDrawSetString(playerid, InfoZona[playerid], namezone);
		new string[300];
		format(string, sizeof string, "Frecuencia: %dKhz", InfoJugador[playerid][jFrecuencia], string);
		PlayerTextDrawSetString(playerid, radio2[playerid], string);
		//sync
		for (new i = 0; i < MAX_SYNC_TYPES; ++i)
		{
		    if (InfoSync[playerid][i][sTimeSync])
		    {
		        if (LastUpdate[playerid] - InfoSync[playerid][i][sLastSyncUpdate] > 1000)
		        {
		            InfoSync[playerid][i][sTimeSync]--;
		            InfoSync[playerid][i][sLastSyncUpdate] = LastUpdate[playerid];
		        }
		    }
		}
		//vehicle teleport (type 2)
		if (cheat_Vehicle2teleport != 0)
		{
			new ivar = GetPlayerState(playerid);
			new vehicleid = GetPlayerVehicleID(playerid);
			if (ivar == PLAYER_STATE_DRIVER)
			{
				if (LastVehicle[playerid] != 0 && vehicleid != 0)
				{
					if (LastVehicle[playerid] != vehicleid)
					{
						if (!InfoSync[playerid][SYNC_TYPE_POS][sTimeSync])
						{
				 			Adv2Vehs[playerid]++;
			 		   		if (Adv2Vehs[playerid] >= 2)
		 		   			{
								CheatDetected(playerid, "Vehicle teleport (type 2)", 2);
								//JB::Ban (playerid, "Vehicle teleport");
								return 1;
							}
							else
							{
								format(string, sizeof string, "Vehicle teleport con %s (type 2)", GetVehicleName(vehicleid));
								CheatDetected(playerid, string, 1);
							}
						}
					}
				}
				LastVehicle[playerid] = vehicleid;
			}
		}
	}
	return 1;
}

funcion OtherTimerEx(playerid, type) {
    if(type == TIPO_TELEPORTTRAFICANTE) {
        if(GetPVarInt(playerid, "TeleportTafricante") > 0) {
            SetPVarInt(playerid, "TeleportTafricante", GetPVarInt(playerid, "TeleportTafricante") - 1);
            SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTTRAFICANTE);
        }
    } else if(type == TIPO_TELEPORTCAMIONERO) {
        if(GetPVarInt(playerid, "TeleportCamionero") > 0) {
            SetPVarInt(playerid, "TeleportCamionero", GetPVarInt(playerid, "TeleportCamionero") - 1);
            SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTCAMIONERO);
        }
    } else if(type == TIPO_TELEPORTGRANJERO) {
        if(GetPVarInt(playerid, "TeleportGranjero") > 0) {
            SetPVarInt(playerid, "TeleportGranjero", GetPVarInt(playerid, "TeleportGranjero") - 1);
            SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTGRANJERO);
        }
    } else if(type == TIPO_TELEPORTTRABAJO1) {
        if(GetPVarInt(playerid, "TeleportTrabajo1") > 0) {
            SetPVarInt(playerid, "TeleportTrabajo1", GetPVarInt(playerid, "TeleportTrabajo1") - 1);
            SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TIPO_TELEPORTTRABAJO1);
        }
    }
}

funcion RevisarVIP(playerid) {
    new year, month, day;
    getdate(year, month, day);
    if(InfoJugador[playerid][jNivelVIP] == 0) {
        InfoJugador[playerid][jDiaVIP] = -1;
        InfoJugador[playerid][jMesVIP] = -1;
		guardar_int_mysql("cuentas", "DiaVIP", InfoJugador[playerid][jID], InfoJugador[playerid][jDiaVIP]);
		guardar_int_mysql("cuentas", "MesVIP", InfoJugador[playerid][jID], InfoJugador[playerid][jMesVIP]);
		SetPlayerColor(playerid, 0xFFFFFF00);
        return 1;
    }
    if(InfoJugador[playerid][jDiaVIP] >= 1 && InfoJugador[playerid][jMesVIP] >= 1) {
        if(InfoJugador[playerid][jNivelVIP] >= 1) {
            if(day >= InfoJugador[playerid][jDiaVIP] && month >= InfoJugador[playerid][jMesVIP]) {
                InfoJugador[playerid][jDiaVIP] = -1;
                InfoJugador[playerid][jMesVIP] = -1;
                InfoJugador[playerid][jNivelVIP] = 0;
                InfoJugador[playerid][jDiscordNitro] = 0;
				guardar_int_mysql("cuentas", "DiaVIP", InfoJugador[playerid][jID], InfoJugador[playerid][jDiaVIP]);
				guardar_int_mysql("cuentas", "MesVIP", InfoJugador[playerid][jID], InfoJugador[playerid][jMesVIP]);
				guardar_int_mysql("cuentas", "NivelVIP", InfoJugador[playerid][jID], InfoJugador[playerid][jNivelVIP]);
				guardar_int_mysql("cuentas", "DiscordNitro", InfoJugador[playerid][jID], InfoJugador[playerid][jDiscordNitro]);
				SetPlayerColor(playerid, 0xFFFFFF00);
				InfoJugador[playerid][jColorVIP] = 0;
				guardar_int_mysql("cuentas", "ColorVIP", InfoJugador[playerid][jID], InfoJugador[playerid][jColorVIP]);
                return _Mensaje(playerid, 4, "C93CCE", "[VIP]:{ffffff} Tu VIP ha expirado, puedes hacer tu orden de renovacion ahora mismo.");
            }
        }
    }
    return 1;
}

stock EnviarTextoRadio(playerid, string[]) {
    new MiscString[256], Float: aaaPositions[3];
    foreach(Player, i) {
        if(InfoJugador[i][jFrecuencia] == InfoJugador[playerid][jFrecuencia] && B_Radio[i] != 0) {
			GetPlayerPos(i, aaaPositions[0], aaaPositions[1], aaaPositions[2]);
            format(MiscString, sizeof(MiscString), "{D4AB5C}(RADIO - %dkhz) %s:{ffffff} %s", InfoJugador[playerid][jFrecuencia], NombreJugador(playerid), string);
            SendSplitMessage(i, 0xffffffff, MiscString);
        }
    }
    format(MiscString, sizeof(MiscString), "%s por radio: %s", NombreJugador(playerid), string);
	ProxDetector(10.0, playerid, MiscString, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
}

stock fcreate(filename[]) {
    if(fexist(filename)) return false;
    new File: fhnd;
    fhnd = fopen(filename, io_write);
    if(fhnd) {
        fclose(fhnd);
        return true;
    }
    return false;
}

funcion splits(const strsrc[], strdest[][], delimiter) {
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
		if(strsrc[i]==delimiter || i==strlen(strsrc)){
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

IsKeyJustDown(key, newkeys, oldkeys) {
    if((newkeys & key) && !(oldkeys & key)) return 1;
    return 0;
}

stock RandomEx(min, max) {
    new randval = random(max - min) + min;
    return randval;
}

IsVehicleBusy(vehicleid) { // The_Chaoz ?????
    for(new i; i<GetMaxPlayers(); i++)
    	if(IsPlayerConnected(i) && IsPlayerInVehicle(i, vehicleid))
    		return 1;
    return 0;
}

funcion ReturnUser(text[]) {
    new strPos, returnID = 0, bool: isnum = true;
    while(text[strPos]) {
        if(isnum) {
            if('0' <= text[strPos] <= '9') returnID = (returnID * 10) + (text[strPos] - '0');
            else isnum = false;
        }
        strPos++;
    }
    if(isnum) {
        if(IsPlayerConnected(returnID)) return returnID;
    } else {
        new sz_playerName[MAX_PLAYER_NAME];

        foreach(Player, i) {
            GetPlayerName(i, sz_playerName, MAX_PLAYER_NAME);
            if(!strcmp(sz_playerName, text, true, strPos)) return i;
        }
    }
    return INVALID_PLAYER_ID;
}

GuardarVehiculos(playerid)
{
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vSpawned] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoVehiculo[id][vPropietario], true) == 0 && InfoVehiculo[id][vFamilia] == 0)
	{
		VehiculoGuardar(id);
	}
}

// vehiculos renovacion 27-10-2020
VehiculoSacar(id)
{
	if (InfoVehiculo[id][vModelo] == 0) return 1;
	new Coche = CreateVehicle(InfoVehiculo[id][vModelo], InfoVehiculo[id][vPosicionX], InfoVehiculo[id][vPosicionY], InfoVehiculo[id][vPosicionZ], InfoVehiculo[id][vPosicionR], InfoVehiculo[id][vColor1], InfoVehiculo[id][vColor2], -1);
	InfoVehiculo[id][vDL] = Coche;
	InfoVehiculo[id][vSpawned] = 1;
	GasolinaInicialVeh[Coche] = InfoVehiculo[id][vGasolina];
	SetVehicleHealth(Coche, InfoVehiculo[id][vVida]);
	new Float: cvida;
	GetVehicleHealth(Coche, cvida);
	if (cvida < 400) { SetVehicleHealth(Coche, 450); }
	SetVehicleVirtualWorld(Coche, InfoVehiculo[id][vVirtualWorld]);
	SetVehicleInterior(Coche, InfoVehiculo[id][vInterior]);
	UpdateVehicleDamageStatus(Coche, InfoVehiculo[id][vDanioSuperficie], InfoVehiculo[id][vDanioPuertas], InfoVehiculo[id][vDanioLuces], InfoVehiculo[id][vDanioRuedas]);
	DarMatricula(Coche, InfoVehiculo[id][vID]+1000);
	ChangeVehicleColor(Coche, InfoVehiculo[id][vColor1], InfoVehiculo[id][vColor2]);
	ChangeVehiclePaintjob(Coche, InfoVehiculo[id][vPaintJob]);
	Loop(m, MAX_MODIFICACIONES, 0) { AddVehicleComponent(Coche, InfoVehiculo[id][vModificacion][m]); }
	Colocar_Neon(id, Coche);
	InfoVehiculo[id][vLockGuantera] = 0;
	estacionveh[Coche] = 0;
	if (InfoVehiculo[id][vSeguro] == 1) { VehSeguro[Coche] = 1; vehicle_lock_doors(Coche); }
	else { VehSeguro[Coche] = 0; vehicle_unlock_doors(Coche); }
	return 1;
}

VehiculoGuardar(id)
{
	if (InfoVehiculo[id][vModelo] == 0) return 1;
	new vehicleid = InfoVehiculo[id][vDL], query[2056];
	if (VehSeguro[vehicleid] != 0) { VehSeguro[vehicleid] = 0; vehicle_unlock_doors(vehicleid); }
	InfoVehiculo[id][vGasolina] = GasolinaInicialVeh[vehicleid];
	InfoVehiculo[id][vVirtualWorld] = GetVehicleVirtualWorld(vehicleid);
	InfoVehiculo[id][vInterior] = GetVehicleInterior(vehicleid);
	GetVehiclePos(vehicleid, InfoVehiculo[id][vPosicionX], InfoVehiculo[id][vPosicionY], InfoVehiculo[id][vPosicionZ]);
	GetVehicleZAngle(vehicleid, InfoVehiculo[id][vPosicionR]);
	GetVehicleHealth(vehicleid, InfoVehiculo[id][vVida]);
	GetVehicleDamageStatus(vehicleid, InfoVehiculo[id][vDanioSuperficie], InfoVehiculo[id][vDanioPuertas], InfoVehiculo[id][vDanioLuces], InfoVehiculo[id][vDanioRuedas]);
	SaveVehicleMods(vehicleid);
	if (InfoVehiculo[id][vModeloNeon] != 0 && InfoVehiculo[id][vOnNeon] != 0)
	{
		Delete_Neon(id);
	}
	DestroyVehicle(vehicleid);
	InfoVehiculo[id][vDL] = INVALID_PLAYER_VEHICLE_ID;
	InfoVehiculo[id][vSpawned] = 0;
	InfoVehiculo[id][vLockGuantera] = 0;
	mysql_format(DBngrp, query, sizeof query, "UPDATE vehiculos SET PosicionX = '%f', PosicionY = '%f', PosicionZ = '%f', PosicionR = '%f', Interior = '%d', VirtualWorld = '%d', Vida = '%f', DanioSuperficie = '%d', DanioPuertas = '%d', DanioLuces = '%d', DanioRuedas = '%d', Gasolina = '%d' WHERE ID = '%d'",
	InfoVehiculo[id][vPosicionX], InfoVehiculo[id][vPosicionY], InfoVehiculo[id][vPosicionZ], InfoVehiculo[id][vPosicionR], InfoVehiculo[id][vInterior], InfoVehiculo[id][vVirtualWorld],
	InfoVehiculo[id][vVida], InfoVehiculo[id][vDanioSuperficie], InfoVehiculo[id][vDanioPuertas], InfoVehiculo[id][vDanioLuces], InfoVehiculo[id][vDanioRuedas], InfoVehiculo[id][vGasolina], InfoVehiculo[id][vID]);
	mysql_tquery(DBngrp, query);
	return 1;
}

GetVehicleMaxMaletero(vehicleid)
{
	new MaxMal = 2;
	if (EstaEnAvion(vehicleid)) MaxMal = 12;
	else if (EstaEnBote(vehicleid)) MaxMal = 7;
	else if (Veh_MaleteroGrande(vehicleid)) MaxMal = 12;
	else MaxMal = 8;
	return MaxMal;
}

DeleteVehiclePlayer(vid)
{
	if (InfoVehiculo[vid][vModeloNeon] != 0 && InfoVehiculo[vid][vOnNeon] != 0)
	{
		Delete_Neon(vid);
	}
	if (InfoVehiculo[vid][vSpawned] != 0)
	{
		DestroyVehicle(InfoVehiculo[vid][vDL]);
	}
	InfoVehiculo[vid][vDL] = 0;
	InfoVehiculo[vid][vSpawned] = 0;
	alm(InfoVehiculo[vid][vNombre], "none");
	alm(InfoVehiculo[vid][vPropietario], "none");
	InfoVehiculo[vid][vModelo] = 0;
	InfoVehiculo[vid][vPosicionX] = 0.0;
	InfoVehiculo[vid][vPosicionY] = 0.0;
	InfoVehiculo[vid][vPosicionZ] = 0.0;
	InfoVehiculo[vid][vPosicionR] = 0.0;
	InfoVehiculo[vid][vVirtualWorld] = 0;
	InfoVehiculo[vid][vInterior] = 0;
	InfoVehiculo[vid][vVida] = 0.0;
	InfoVehiculo[vid][vDanioSuperficie] = 0;
	InfoVehiculo[vid][vDanioPuertas] = 0;
	InfoVehiculo[vid][vDanioLuces] = 0;
	InfoVehiculo[vid][vDanioRuedas] = 0;
	InfoVehiculo[vid][vGasolina] = 200;
	InfoVehiculo[vid][vColor1] = 1;
	InfoVehiculo[vid][vColor2] = 1;
	InfoVehiculo[vid][vPaintJob] = 3;
	InfoVehiculo[vid][vSeguro] = 0;
	InfoVehiculo[vid][vPrecio] = 0;
	InfoVehiculo[vid][vMoneda] = 0;
	InfoVehiculo[vid][vEmbargo] = 0;
	InfoVehiculo[vid][vMulta] = 0;
	InfoVehiculo[vid][vFamilia] = 0;
	new dex_query[170];
	Loop(x, 15, 0)
	{
		InfoVehiculo[vid][vMaletero][x] = 0;
		InfoVehiculo[vid][vMaleteroTipo][x] = 0;
		InfoVehiculo[vid][vMaleteroCantidad][x] = 0;
		mysql_format(DBngrp, dex_query, sizeof dex_query, "UPDATE vehiculos SET Maletero%d = 0, MaleteroTipo%d = 0, MaleteroCantidad%d = 0 WHERE ID = '%d'", x+1, x+1, x+1, InfoVehiculo[vid][vID]);
		mysql_tquery(DBngrp, dex_query);
	}
	Loop(x, 3, 0)
	{
		InfoVehiculo[vid][vGuantera][x] = 0;
		InfoVehiculo[vid][vGuanteraCantidad][x] = 0;
		mysql_format(DBngrp, dex_query, sizeof dex_query, "UPDATE vehiculos SET Guantera%d = 0, GuanteraCantidad%d = 0 WHERE ID = '%d'", x+1, x+1, InfoVehiculo[vid][vID]);
		mysql_tquery(DBngrp, dex_query);
	}
	InfoVehiculo[vid][vMaxMaletero] = 5;
	Loop(x, MAX_MODIFICACIONES, 0)
	{
		InfoVehiculo[vid][vModificacion][x] = 0;
		mysql_format(DBngrp, dex_query, sizeof dex_query, "UPDATE vehiculos SET Modificacion%d = 0 WHERE ID = '%d'", x+1, InfoVehiculo[vid][vID]);
		mysql_tquery(DBngrp, dex_query);
	}
	InfoVehiculo[vid][vStereo] = 0;
	InfoVehiculo[vid][vLockGuantera] = 0;
	InfoVehiculo[vid][vModeloNeon] = 0;
	InfoVehiculo[vid][vOnNeon] = 0;
	new que2ry[3000], query[4000];
	format(que2ry, sizeof que2ry, "UPDATE vehiculos SET Nombre = '%s', Propietario = '%s', Moneda = 0, Modelo = 0, PosicionX = 0.0, PosicionY = 0.0, PosicionZ = 0.0, PosicionR = 0.0,", InfoVehiculo[vid][vNombre], InfoVehiculo[vid][vPropietario]);
	format(que2ry, sizeof que2ry, "%s Interior = 0, VirtualWorld = 0, Vida = 1000.0, DanioSuperficie = 0, DanioPuertas = 0, DanioLuces = 0, DanioRuedas = 0, Gasolina = 200, Color1 = 1,", que2ry);
	mysql_format(DBngrp, query, sizeof query, "%s Stereo = 0, Familia = 0, Color2 = 1, ModeloNeon = 0, OnNeon = 0, PaintJob = 3, Seguro = 0, Precio = 0, Embargo = 0, Multa = 0, MaxMaletero = 5 WHERE ID = '%d'", que2ry, InfoVehiculo[vid][vID]);
	mysql_tquery(DBngrp, query);
	return 1;
}

CreateVehiclePlayer(playerid, modelid, Float: x, Float: y, Float: z, Float: angle, vehint, vehvw, color1, color2, precio, d, moneda)
{
	Loop(vid, MAX_VEHICULOS, 1) if (!InfoVehiculo[vid][vModelo])
	{
		alm(InfoVehiculo[vid][vPropietario], InfoJugador[playerid][jNombre_Apellido]);
		alm(InfoVehiculo[vid][vNombre], GetNameVehicle(modelid));
		InfoVehiculo[vid][vModelo] = modelid;
		InfoVehiculo[vid][vPosicionX] = x;
		InfoVehiculo[vid][vPosicionY] = y;
		InfoVehiculo[vid][vPosicionZ] = z;
		InfoVehiculo[vid][vPosicionR] = angle;
		InfoVehiculo[vid][vInterior] = vehint;
		InfoVehiculo[vid][vVirtualWorld] = vehvw;
		// create vehicle
		new vehicleid = CreateVehicle(modelid, x, y, z, angle, color1, color2, -1);
		InfoVehiculo[vid][vDL] = vehicleid;
		InfoVehiculo[vid][vSpawned] = 1;
		// comprado en concesionaria de segunda mano
		if (d != -1)
		{
			InfoVehiculo[vid][vGasolina] = i_Usado[d][uGasolina];
			InfoVehiculo[vid][vVida] = i_Usado[d][uVida];
			InfoVehiculo[vid][vSeguro] = 0;
			InfoVehiculo[vid][vStereo] = i_Usado[d][uStereo];
			InfoVehiculo[vid][vPaintJob] = i_Usado[d][uPaintJob];
			Loop(m, MAX_MODIFICACIONES, 0)
			{
				AddVehicleComponent(vehicleid, i_Usado[d][uModificaciones][m]);
				InfoVehiculo[vid][vModificacion][m] = i_Usado[d][uModificaciones][m];
			}
			GasolinaInicialVeh[vehicleid] = i_Usado[d][uGasolina];
			SetVehicleHealth(vehicleid, i_Usado[d][uVida]);
			UpdateVehicleDamageStatus(vehicleid, i_Usado[d][uDanioSuperficie], i_Usado[d][uDanioPuertas], i_Usado[d][uDanioLuces], i_Usado[d][uDanioRuedas]);
		}
		else // comprado como nuevo
		{
			InfoVehiculo[vid][vGasolina] = 200;
			InfoVehiculo[vid][vVida] = 1000.0;
			InfoVehiculo[vid][vDanioSuperficie] = 0;
			InfoVehiculo[vid][vDanioPuertas] = 0;
			InfoVehiculo[vid][vDanioLuces] = 0;
			InfoVehiculo[vid][vDanioRuedas] = 0;
			InfoVehiculo[vid][vColor1] = color1;
			InfoVehiculo[vid][vColor2] = color2;
			InfoVehiculo[vid][vPaintJob] = 3;
			InfoVehiculo[vid][vSeguro] = 0;
			Loop(m, MAX_MODIFICACIONES, 0) { InfoVehiculo[vid][vModificacion][m] = 0; }
		}
		Loop(m, 15, 0) { InfoVehiculo[vid][vMaletero][m] = 0; InfoVehiculo[vid][vMaleteroTipo][m] = 0; InfoVehiculo[vid][vMaleteroCantidad][m] = 0; }
		InfoVehiculo[vid][vPrecio] = precio;
		InfoVehiculo[vid][vMoneda] = moneda;
		InfoVehiculo[vid][vEmbargo] = 0;
		InfoVehiculo[vid][vMulta] = 0;
		InfoVehiculo[vid][vMaxMaletero] = GetVehicleMaxMaletero(vehicleid);
		GasolinaInicialVeh[vehicleid] = InfoVehiculo[vid][vGasolina];
		SetVehicleVirtualWorld(vehicleid, InfoVehiculo[vid][vVirtualWorld]);
		SetVehicleInterior(vehicleid, InfoVehiculo[vid][vInterior]);
		if (playerid != -1)
		{
			SetPlayerPosEx(playerid, x, y, z);
			PutPlayerInVehicleEx(playerid, vehicleid, 0);
			InfoVehiculo[vid][vMaxMaletero] = GetVehicleMaxMaletero(vehicleid)+InfoJugador[playerid][jNivelVIP];
		}
		InfoVehiculo[vid][vLockGuantera] = 0;
		new query[2050];
		//opcion idsql ya creada.
		if (InfoVehiculo[vid][vID] != 0)
		{
			mysql_format(DBngrp, query, sizeof query, "UPDATE vehiculos SET Nombre = '%e', Propietario = '%e', Modelo = '%d', PosicionX = '%f', PosicionY = '%f', PosicionZ = '%f', PosicionR = '%f', Interior = '%d', VirtualWorld = '%d', Vida = '%f', \
			Gasolina = '%d', Color1 = '%d', Color2 = '%d', Precio = '%d', MaxMaletero = '%d', Moneda = '%d' WHERE ID = '%d'",
			InfoVehiculo[vid][vNombre],
			InfoVehiculo[vid][vPropietario],
			InfoVehiculo[vid][vModelo],
			InfoVehiculo[vid][vPosicionX],
			InfoVehiculo[vid][vPosicionY],
			InfoVehiculo[vid][vPosicionZ],
			InfoVehiculo[vid][vPosicionR],
			InfoVehiculo[vid][vInterior],
			InfoVehiculo[vid][vVirtualWorld],
			InfoVehiculo[vid][vVida],
			InfoVehiculo[vid][vGasolina],
			InfoVehiculo[vid][vColor1],
			InfoVehiculo[vid][vColor2],
			InfoVehiculo[vid][vPrecio],
			InfoVehiculo[vid][vMaxMaletero],
			InfoVehiculo[vid][vMoneda],
			InfoVehiculo[vid][vID]);
			mysql_tquery(DBngrp, query);
			vid = MAX_VEHICULOS;
			return 1;
		}
		mysql_format(DBngrp, query, sizeof query, "INSERT INTO vehiculos (Nombre, Propietario, Modelo, PosicionX, PosicionY, PosicionZ, PosicionR, Interior, VirtualWorld, Vida, Gasolina, Color1, \
		Color2, Precio, MaxMaletero, Moneda) VALUES ('%e', '%e', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%f', '%d', '%d', '%d', '%d', '%d', '%d')",
		InfoVehiculo[vid][vNombre],
		InfoVehiculo[vid][vPropietario],
		InfoVehiculo[vid][vModelo],
		InfoVehiculo[vid][vPosicionX],
		InfoVehiculo[vid][vPosicionY],
		InfoVehiculo[vid][vPosicionZ],
		InfoVehiculo[vid][vPosicionR],
		InfoVehiculo[vid][vInterior],
		InfoVehiculo[vid][vVirtualWorld],
		InfoVehiculo[vid][vVida],
		InfoVehiculo[vid][vGasolina],
		InfoVehiculo[vid][vColor1],
		InfoVehiculo[vid][vColor2],
		InfoVehiculo[vid][vPrecio],
		InfoVehiculo[vid][vMaxMaletero],
		InfoVehiculo[vid][vMoneda]);
		mysql_tquery(DBngrp, query, "CreateVehicleUser", "i", vid);
		vid = MAX_VEHICULOS;
	}
	return 1;
}

forward CreateVehicleUser(id);
public CreateVehicleUser(id)
{
	totalvehiculos++;
	InfoVehiculo[id][vID] = cache_insert_id();
	cache_unset_active();
	DarMatricula(InfoVehiculo[id][vDL], InfoVehiculo[id][vID]+1000);
    return 1;
}

forward SaveVehicleMods(vehiculo);
public SaveVehicleMods(vehiculo)
{
	new id = verificar_id_vehiculo(vehiculo), dex_query[64];
	if (id != -1)
	{
		new exhaust, frontbumper, rearbumper, roof, spoilers, sideskirt1, sideskirt2, wheels, hydraulics, nitro, hood, lamps, stereo, ventright, ventleft;
		exhaust = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_EXHAUST);
		frontbumper = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_FRONT_BUMPER);
		rearbumper = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_REAR_BUMPER);
		roof = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_ROOF);
		spoilers = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_SPOILER);
		sideskirt1 = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_SIDESKIRT);
		sideskirt2 = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_SIDESKIRT);
		wheels = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_WHEELS);
		hydraulics = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_HYDRAULICS);
		nitro = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_NITRO);
		hood = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_HOOD);
		lamps = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_LAMPS);
		stereo = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_STEREO);
		ventright = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_VENT_RIGHT);
		ventleft = GetVehicleComponentInSlot(vehiculo, CARMODTYPE_VENT_LEFT);
		if (spoilers >= 1000) InfoVehiculo[id][vModificacion][0] = spoilers;
		if (hood >= 1000) InfoVehiculo[id][vModificacion][1] = hood;
		if (roof >= 1000) InfoVehiculo[id][vModificacion][2] = roof;
		if (sideskirt1 >= 1000) InfoVehiculo[id][vModificacion][3] = sideskirt1;
		if (lamps >= 1000) InfoVehiculo[id][vModificacion][4] = lamps;
		if (nitro >= 1000) InfoVehiculo[id][vModificacion][5] = nitro;
		if (exhaust >= 1000) InfoVehiculo[id][vModificacion][6] = exhaust;
		if (wheels >= 1000) InfoVehiculo[id][vModificacion][7] = wheels;
		if (stereo >= 1000) InfoVehiculo[id][vModificacion][8] = stereo;
		if (hydraulics >= 1000) InfoVehiculo[id][vModificacion][9] = hydraulics;
		if (frontbumper >= 1000) InfoVehiculo[id][vModificacion][10] = frontbumper;
		if (rearbumper >= 1000) InfoVehiculo[id][vModificacion][11] = rearbumper;
		if (ventright >= 1000) InfoVehiculo[id][vModificacion][12] = ventright;
		if (ventleft >= 1000) InfoVehiculo[id][vModificacion][13] = ventleft;
		if (sideskirt2 >= 1000) InfoVehiculo[id][vModificacion][14] = sideskirt2;
		Loop(x, MAX_MODIFICACIONES, 0)
		{
			format(dex_query, sizeof dex_query, "Modificacion%d", x+1);
			guardar_int_mysql("vehiculos", dex_query, InfoVehiculo[id][vID], InfoVehiculo[id][vModificacion][x]);
		}
	}
}

new OneSeatVehicles[38] =
{
    425, 430, 432, 441, 446, 448, 452, 453,
    454, 464, 465, 472, 473, 476, 481, 484,
    485, 486, 493, 501, 509, 510, 519, 520,
    530, 531, 532, 539, 553, 564, 568, 571,
    572, 574, 583, 592, 594, 595
};

funcion IsSeatAvailable(vehicleid, seat)
{
    new carmodel = GetVehicleModel(vehicleid);
    for(new i = 0; i < sizeof(OneSeatVehicles); i++)
	{
        if(carmodel == OneSeatVehicles[i]) return 0;
    }
    foreach(Player, i)
	{
        if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seat) return 0;
    }
    return 1;
}

funcion VehiculoLuces(vehicleid, playerid) {
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    if(lights == VEHICLE_PARAMS_ON) {
        SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
        _Mensaje(playerid, 2, "0", "Luces del vehiculo fueron apagadas.");
    } else if(lights == VEHICLE_PARAMS_OFF || lights == VEHICLE_PARAMS_UNSET) {
        SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
        _Mensaje(playerid, 2, "0", "Luces del vehiculo encendidas con exito.");
    }
    return 1;
}

funcion VehiculoCapo(vehicleid, playerid) {
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    if(bonnet == VEHICLE_PARAMS_ON) {
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, VEHICLE_PARAMS_OFF, boot, objective);
        _Mensaje(playerid, 2, "0", "Capo del vehiculo fue cerrado.");
    } else if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET) {
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, VEHICLE_PARAMS_ON, boot, objective);
        _Mensaje(playerid, 2, "0", "Capo del vehiculo fue abierto.");
    }
    return 1;
}

stock DetectarCerrado(playerid, exception = INVALID_VEHICLE_ID) {
    new Float: Distance,
    target = -1;
    for(new v; v < MAX_VEHICLES; v++) if(VehNoExiste(v)) {
        if(v != exception && (target < 0 || Distance > CercaDeVehiculo(playerid, v))) {
            target = v;
            Distance = CercaDeVehiculo(playerid, v);
        }
    }
    return target;
}

funcion VehiculoMaletero(vehicleid, playerid) {
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    if(boot == VEHICLE_PARAMS_ON) {
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_OFF, objective);
        _Mensaje(playerid, 2, "0", "Maletero del vehiculo fue cerrado.");
    } else if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) {
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_ON, objective);
        _Mensaje(playerid, 2, "0", "Maletero del vehiculo fue abierto.");
    }
    return 1;
}

stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius) {
	new
		Float:Floats[3];
	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

stock VehNoExiste(vehicleid) {
    if(GetVehicleModel(vehicleid) >= 400) {
        return 1;
    }
    return 0;
}

funcion CercaDeVehiculo(playerid, veh) {
    new Float: Floats[7];
    GetPlayerPos(playerid, Floats[0], Floats[1], Floats[2]);
    GetVehiclePos(veh, Floats[3], Floats[4], Floats[5]);
    Floats[6] = floatsqroot((Floats[3] - Floats[0]) * (Floats[3] - Floats[0]) + (Floats[4] - Floats[1]) * (Floats[4] - Floats[1]) + (Floats[5] - Floats[2]) * (Floats[5] - Floats[2]));
    return floatround(Floats[6]);
}

funcion SkinsValidos(skinid) {
    if(skinid < 0 || skinid > 311) return false;
    return true;
}

funcion EncenderVehiculo(vehicleid, playerid) {
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    if(engine == VEHICLE_PARAMS_ON) {
        SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
        AccionesRol(playerid, 0, "apaga el motor del vehiculo y retira las llaves del contacto.");
        arr_Engine {vehicleid} = 0;
		PlayerTextDrawHide(playerid, TD_Velocimetro[playerid][0]);
		PlayerTextDrawHide(playerid, TD_Velocimetro[playerid][1]);
    } else if(engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET) {
        new Float: f_vHealth;
        GetVehicleHealth(vehicleid, f_vHealth);
        if(f_vHealth < 350.0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Vehiculo averiado, lo mejor seria llamar un mecanico o comprar piezas de recambio.");
        if(GasolinaInicialVeh[vehicleid] <= 0) return _Mensaje(playerid, 0, "642", "Vehiculo sin gasolina, lo mejor seria llamar un mecanico o comprar una lata de gasolina.");
        SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
		new gformat[190];
		if (!EstaEnBicis(vehicleid))  format(gformat, sizeof gformat, "%03d", floatround(GetVehicleSpeed(vehicleid)));
		PlayerTextDrawSetString(playerid, TD_Velocimetro[playerid][0], gformat);
		PlayerTextDrawShow(playerid, TD_Velocimetro[playerid][0]);
		if (!EstaEnBicis(vehicleid)) format(gformat, sizeof gformat, "%0.2d", GasolinaInicialVeh[vehicleid]);
		PlayerTextDrawSetString(playerid, TD_Velocimetro[playerid][1], gformat);
		PlayerTextDrawShow(playerid, TD_Velocimetro[playerid][1]);
        arr_Engine {vehicleid} = 1;
    }
    return 1;
}

CreateVehicleFam(fam_id, modelid, Float: x, Float: y, Float: z, Float: angle, vehint, vehvw, color1, color2)
{
	Loop(vid, MAX_VEHICULOS, 1) if (!InfoVehiculo[vid][vModelo])
	{
		alm(InfoVehiculo[vid][vPropietario], InfoFamilia[fam_id][fLogo]);
		alm(InfoVehiculo[vid][vNombre], GetNameVehicle(modelid));
		InfoVehiculo[vid][vModelo] = modelid;
		InfoVehiculo[vid][vPosicionX] = x;
		InfoVehiculo[vid][vPosicionY] = y;
		InfoVehiculo[vid][vPosicionZ] = z;
		InfoVehiculo[vid][vPosicionR] = angle;
		InfoVehiculo[vid][vInterior] = vehint;
		InfoVehiculo[vid][vVirtualWorld] = vehvw;
		InfoVehiculo[vid][vFamilia] = fam_id;
		// create vehicle
		new vehicleid = CreateVehicle(modelid, x, y, z, angle, color1, color2, -1);
		InfoVehiculo[vid][vDL] = vehicleid;
		InfoVehiculo[vid][vSpawned] = 1;
		InfoVehiculo[vid][vGasolina] = 200;
		InfoVehiculo[vid][vVida] = 1000.0;
		InfoVehiculo[vid][vDanioSuperficie] = 0;
		InfoVehiculo[vid][vDanioPuertas] = 0;
		InfoVehiculo[vid][vDanioLuces] = 0;
		InfoVehiculo[vid][vDanioRuedas] = 0;
		InfoVehiculo[vid][vColor1] = color1;
		InfoVehiculo[vid][vColor2] = color2;
		InfoVehiculo[vid][vPaintJob] = 3;
		InfoVehiculo[vid][vSeguro] = 0;
		Loop(m, MAX_MODIFICACIONES, 0) { InfoVehiculo[vid][vModificacion][m] = 0; }
		Loop(m, 15, 0) { InfoVehiculo[vid][vMaletero][m] = 0; InfoVehiculo[vid][vMaleteroCantidad][m] = 0; }
		InfoVehiculo[vid][vPrecio] = 0;
		InfoVehiculo[vid][vMoneda] = 0;
		InfoVehiculo[vid][vEmbargo] = 0;
		InfoVehiculo[vid][vMulta] = 0;
		InfoVehiculo[vid][vMaxMaletero] = GetVehicleMaxMaletero(vehicleid);
		GasolinaInicialVeh[vehicleid] = InfoVehiculo[vid][vGasolina];
		SetVehicleVirtualWorld(vehicleid, InfoVehiculo[vid][vVirtualWorld]);
		SetVehicleInterior(vehicleid, InfoVehiculo[vid][vInterior]);
		InfoVehiculo[vid][vLockGuantera] = 0;
		new query[2050];
		//opcion idsql ya creada.
		if (InfoVehiculo[vid][vID] != 0)
		{
			mysql_format(DBngrp, query, sizeof query, "UPDATE vehiculos SET Nombre = '%e', Propietario = '%e', Modelo = '%d', PosicionX = '%f', PosicionY = '%f', PosicionZ = '%f', PosicionR = '%f', Interior = '%d', VirtualWorld = '%d', Vida = '%f', \
			Gasolina = '%d', Color1 = '%d', Color2 = '%d', Precio = '%d', MaxMaletero = '%d', Moneda = '%d', Familia = '%d' WHERE ID = '%d'",
			InfoVehiculo[vid][vNombre],
			InfoVehiculo[vid][vPropietario],
			InfoVehiculo[vid][vModelo],
			InfoVehiculo[vid][vPosicionX],
			InfoVehiculo[vid][vPosicionY],
			InfoVehiculo[vid][vPosicionZ],
			InfoVehiculo[vid][vPosicionR],
			InfoVehiculo[vid][vInterior],
			InfoVehiculo[vid][vVirtualWorld],
			InfoVehiculo[vid][vVida],
			InfoVehiculo[vid][vGasolina],
			InfoVehiculo[vid][vColor1],
			InfoVehiculo[vid][vColor2],
			InfoVehiculo[vid][vPrecio],
			InfoVehiculo[vid][vMaxMaletero],
			InfoVehiculo[vid][vMoneda],
			InfoVehiculo[vid][vFamilia],
			InfoVehiculo[vid][vID]);
			mysql_tquery(DBngrp, query);
			vid = MAX_VEHICULOS;
			return 1;
		}
		mysql_format(DBngrp, query, sizeof query, "INSERT INTO vehiculos (Nombre, Propietario, Modelo, PosicionX, PosicionY, PosicionZ, PosicionR, Interior, VirtualWorld, Vida, Gasolina, Color1, \
		Color2, Precio, MaxMaletero, Moneda, Familia) VALUES ('%e', '%e', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%f', '%d', '%d', '%d', '%d', '%d', '%d', '%d')",
		InfoVehiculo[vid][vNombre],
		InfoVehiculo[vid][vPropietario],
		InfoVehiculo[vid][vModelo],
		InfoVehiculo[vid][vPosicionX],
		InfoVehiculo[vid][vPosicionY],
		InfoVehiculo[vid][vPosicionZ],
		InfoVehiculo[vid][vPosicionR],
		InfoVehiculo[vid][vInterior],
		InfoVehiculo[vid][vVirtualWorld],
		InfoVehiculo[vid][vVida],
		InfoVehiculo[vid][vGasolina],
		InfoVehiculo[vid][vColor1],
		InfoVehiculo[vid][vColor2],
		InfoVehiculo[vid][vPrecio],
		InfoVehiculo[vid][vMaxMaletero],
		InfoVehiculo[vid][vMoneda],
		InfoVehiculo[vid][vFamilia]);
		mysql_tquery(DBngrp, query, "CreateVehicleFamily", "i", vid);
		vid = MAX_VEHICULOS;
	}
	return 1;
}

forward CreateVehicleFamily(id);
public CreateVehicleFamily(id)
{
	totalvehiculos++;
	InfoVehiculo[id][vID] = cache_insert_id();
	cache_unset_active();
	DarMatricula(InfoVehiculo[id][vDL], InfoVehiculo[id][vID]+1000);
    return 1;
}

// Funcion: Otros Timers.
funcion PagoDiario(i)
{
	new pagobase = 150*InfoJugador[i][jNivel];
	new string[2056], sueldo, cobro_negocios = 0, cobro_vehiculos = 0, medico = 0;
	// impuestos
	new businessamount = CountNegocios(i);
	if (businessamount != 0) cobro_negocios += 100*businessamount;
	new carsamount = VehicleCount(i);
	if (carsamount != 0) cobro_vehiculos += 25*carsamount;
	if (InfoJugador[i][jSeguroMedico] != 0) medico = 15;
	// adiciones
	if(InfoJugador[i][jAdiccion][0] > 10) { _Mensaje(i, 4, "ef0041", "Sientes la necesidad de consumir crack."); }
	if(InfoJugador[i][jAdiccion][1] > 10) { _Mensaje(i, 4, "ef0041", "Sientes la necesidad de consumir marihuana."); }
	if(InfoJugador[i][jAdiccion][2] > 10) { _Mensaje(i, 4, "ef0041", "Sientes la necesidad de consumir heroina."); }
	if(InfoJugador[i][jAdiccion][3] > 10) { _Mensaje(i, 4, "ef0041", "Sientes la necesidad de consumir cocaina."); }
	if(InfoJugador[i][jAdiccion][4] > 10) { _Mensaje(i, 4, "ef0041", "Sientes la necesidad de consumir LSD."); }
	if(InfoJugador[i][jAdiccion][0] > 0) InfoJugador[i][jAdiccion][0]--,guardar_int_mysql("cuentas", "Adiccion1", InfoJugador[i][jID], InfoJugador[i][jAdiccion][0]);
	if(InfoJugador[i][jAdiccion][1] > 0) InfoJugador[i][jAdiccion][1]--,guardar_int_mysql("cuentas", "Adiccion2", InfoJugador[i][jID], InfoJugador[i][jAdiccion][1]);
	if(InfoJugador[i][jAdiccion][2] > 0) InfoJugador[i][jAdiccion][2]--,guardar_int_mysql("cuentas", "Adiccion3", InfoJugador[i][jID], InfoJugador[i][jAdiccion][2]);
	if(InfoJugador[i][jAdiccion][3] > 0) InfoJugador[i][jAdiccion][3]--,guardar_int_mysql("cuentas", "Adiccion4", InfoJugador[i][jID], InfoJugador[i][jAdiccion][3]);
	if(InfoJugador[i][jAdiccion][4] > 0) InfoJugador[i][jAdiccion][4]--,guardar_int_mysql("cuentas", "Adiccion5", InfoJugador[i][jID], InfoJugador[i][jAdiccion][4]);
	if(InfoJugador[i][jFuerza] > 1000) InfoJugador[i][jFuerza] = 999,guardar_int_mysql("cuentas", "Fuerza", InfoJugador[i][jID], InfoJugador[i][jFuerza]);
	DineroEstado += cobro_negocios+cobro_vehiculos+medico;
 	InfoJugador[i][jBanco] -= cobro_negocios+cobro_vehiculos+medico;
	// ingresos
	switch (InfoJugador[i][jFacMiembro])
	{
		case 1: sueldo = 1250; // SAPD
		case 2: sueldo = 0; // none
		case 3: sueldo = 600; // MTV
		case 4: sueldo = 1000; // Gobierno
		case 5: sueldo = 1050; // SAED
		case 6: sueldo = 1200; // fbi
	}
	InfoJugador[i][jBanco] += sueldo+pagobase;
	InfoJugador[i][jBanco] += InfoJugador[i][jCheques];
	switch(InfoJugador[i][jNivelVIP])
	{
		case 1:  InfoJugador[i][jBanco] += 400;
		case 2:  InfoJugador[i][jBanco] += 550;
		case 3:  InfoJugador[i][jBanco] += 900;
        case 4:  InfoJugador[i][jBanco] += 2000;
		default: InfoJugador[i][jBanco] += 0;
	}
	format(string, sizeof string, "~g~~h~~h~Pago Diario~n~~w~Impuestos__~r~~h~$%s~n~~w~Ganancias~n~Gobierno___~g~+$%s~n~~w~Premium___~y~+$%s~n~~w~Nuevo saldo bancario~n~~g~$%s", diner_coma(cobro_negocios+medico+cobro_vehiculos), diner_coma(sueldo+pagobase), diner_coma(2000*InfoJugador[i][jNivelVIP]), diner_coma(InfoJugador[i][jBanco]));
	PlayerTextDrawSetString(i, PayDayTD[i], string);
	PlayerTextDrawShow(i, PayDayTD[i]);
	SetTimerEx("RetirarPayDay", 10000, false, "i", i);
	InfoJugador[i][jCheques] = 0;
	guardar_int_mysql("cuentas", "Cheques", InfoJugador[i][jID], InfoJugador[i][jCheques]);
	guardar_int_mysql("cuentas", "Banco", InfoJugador[i][jID], InfoJugador[i][jBanco]);
	InfoJugador[i][jPayday] = 0;
	guardar_int_mysql("cuentas", "Payday", InfoJugador[i][jID], InfoJugador[i][jPayday]);
	PlayerPlaySound(i,1133,0.0,0.0,0.0);
	//- extras
	if (DobleExperiencia == 0) InfoJugador[i][jExperiencia] += 1,guardar_int_mysql("cuentas", "Experiencia", InfoJugador[i][jID], InfoJugador[i][jExperiencia]);
	else InfoJugador[i][jExperiencia] += 2,guardar_int_mysql("cuentas", "Experiencia", InfoJugador[i][jID], InfoJugador[i][jExperiencia]);
	if (FalsoPD[i] == 0)
	{
		InfoJugador[i][jHorasConectado] += 1;
		guardar_int_mysql("cuentas", "HorasConectado", InfoJugador[i][jID], InfoJugador[i][jHorasConectado]);
	}
	InfoJugador[i][jTiempos][9] = 0;
	new proximonvl = InfoJugador[i][jNivel] + 1, cantidadexp = proximonvl * nivelexp;
	if (InfoJugador[i][jExperiencia] >= cantidadexp)
	{
		format(string, sizeof string, "~w~nivel ~g~%d", proximonvl);
		GameTextForPlayer(i, string, 5000, 1);
		PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
		InfoJugador[i][jNivel]++;
		InfoJugador[i][jExperiencia] = 0;
		SetPlayerScore(i, InfoJugador[i][jNivel]);
		guardar_int_mysql("cuentas", "Nivel", InfoJugador[i][jID], InfoJugador[i][jNivel]);
		guardar_int_mysql("cuentas", "Experiencia", InfoJugador[i][jID], InfoJugador[i][jExperiencia]);
	}
	//territorio pago
	new conteo = 0;
	Loop(p, totalterritorios, 1) if (InfoTerritorio[p][tLugarX] != 0.0)
	{
		if (InfoTerritorio[p][tBandaID] == InfoJugador[i][jFamMiembro]) conteo++;
	}
	if (conteo != 0)
	{
	    if(FalsoPD[i] == 0)
	    {

			SendClientMessageEx(i, 0xFFF000FF, "Info: {FFFFFF}Tu negocio tiene.", diner_coma(conteo*1000), conteo);
		}
	}
	//
	if(InfoJugador[i][jNivel] >= 4)
	{
	    if(InfoJugador[i][jReferido] == 1 && InfoJugador[i][jCobroReferido] == 0)
	    {
	        new ref_id = InfoJugador[i][jNombreAmigo];
	        new to_player = GetPlayerID(NombreRJugador(ref_id));
	        if(to_player != INVALID_PLAYER_ID)
			{
			    InfoJugador[i][jCoins] += 1;
			    InfoJugador[i][jCobroReferido] = 1;
				guardar_int_mysql("cuentas", "Coins", InfoJugador[i][jID], InfoJugador[i][jCoins]);
				guardar_int_mysql("cuentas", "CobroReferido", InfoJugador[i][jID], InfoJugador[i][jCobroReferido]);
			    SendClientMessage(i, 0xccccccFF, "Info: {FFFFFF}Recibiste un Coin, por completar tu metodo de referido.");
			}
			else
			{
			    InfoJugador[i][jCoins] += 1;
			    InfoJugador[i][jCobroReferido] = 1;
				guardar_int_mysql("cuentas", "Coins", InfoJugador[i][jID], InfoJugador[i][jCoins]);
				guardar_int_mysql("cuentas", "CobroReferido", InfoJugador[i][jID], InfoJugador[i][jCobroReferido]);
			    SendClientMessage(i, 0xccccccFF, "Info: {FFFFFF}Recibiste un Coin, por completar tu metodo de referido.");
			}
		}
	}
    Actualizar(i);
	FalsoPD[i] = 0;
    return 1;
}

function RetirarPayDay(jugadors)
{
	PlayerTextDrawHide(jugadors, PayDayTD[jugadors]);
	return 1;
}

function RetirarTexdraw(jugador)
{
	PlayerTextDrawHide(jugador, TD_PantallaHG[jugador][0]);
	return 1;
}

funcion RespawnAutomatico()
{
	new bool: unwanted[MAX_VEHICLES];
	for(new player = 0; player < MAX_PLAYERS; player++)
	{
		if(IsPlayerInAnyVehicle(player))
		{
			unwanted[GetPlayerVehicleID(player)] = true;
		}
	}
	for(new car = 157; car < 227; car++)
	{
		if(!unwanted[car]) SetVehicleToRespawn(car);
		SetVehicleParamsEx(car, 0, 0, 0, 0, 0, 0, 0);
		arr_Engine {car} = 0;
	}
	return 1;
}

forward timer_segundo();
public timer_segundo()
{
	new string[356];
	Loop(id, 5, 0) if (Timer_Banco[id] != 0)
	{
		Timer_Banco[id]--;
		format(string, sizeof string, "{A9D159}Banco %s\n{EBEBEB}%s para volver a robarse", GetNombreBanco(id), Segundos_tiempo(Timer_Banco[id]));
		UpdateDynamic3DTextLabelText(Label_Banco[id], -1, string);
		if (Timer_Banco[id] == 0) RestaurarBanco(id);
	}
	Loop(id, totalcajeros, 1)
	{
		if (InfoCajero[id][atmTiempo] != 0)
		{
			InfoCajero[id][atmTiempo]--;
			guardar_int_mysql("cajeros", "Tiempo", InfoCajero[id][atmID], InfoCajero[id][atmTiempo]);
			if (InfoCajero[id][atmTiempo] == 0) RecobrarCajero(id);
		}
	}
	Loop(id, totalcasas, 1)
	{
		if (InfoCasa[id][cDestroy] != 0)
		{
			InfoCasa[id][cDestroy]--;
			guardar_int_mysql("casas", "Destroy", InfoCasa[id][cID], InfoCasa[id][cDestroy]);
		}
	}
	Loop(id, MAX_REPORTES, 1)
	{

		if(InfoReporte[id][rTiempoReporte] > 0)
		{
			InfoReporte[id][rTiempoReporte]++;
			if(InfoReporte[id][rTiempoReporte] >= 1800000)
			{
				SendClientMessageEx(InfoReporte[id][rUsuario], 0xccccccFF, "Info: Tu reporte #%d tiene más de 30 minutos activo, fue cancelado.", id);
				InfoReporte[id][rID] = 0;
				InfoReporte[id][rTiempoReporte] = 0;
			}
		}
	}
	foreach(Player, playerid)
	{
	    if (IsPlayerConnectedEx(playerid))
	    {
			if (GetPlayerPing(playerid) > 1500) { _Expulsar(playerid, 1, "Ping mayor a 1500."); }
			//robo casas
			if (Tiempo_Robo_Casa[playerid] != 0)
			{
				Tiempo_Robo_Casa[playerid]--;
				if (Tiempo_Robo_Casa[playerid] == 60) SendClientMessageEx(playerid, 0x00CC00FF, "Te quedan menos de 60 segundos, toma todo lo que puedas.");
				if (Tiempo_Robo_Casa[playerid] == 30) SendClientMessageEx(playerid, 0x00CC00FF, "Te quedan menos de 30 segundos, toma todo lo que puedas.");
				if (Tiempo_Robo_Casa[playerid] == 15) SendClientMessageEx(playerid, 0x00CC00FF, "Te quedan menos de 15 segundos, toma todo lo que puedas.");
				if (Tiempo_Robo_Casa[playerid] == 0)
				{
					SendClientMessageEx(playerid, 0x00CC00FF, "Se acabo el tiempo de robo, no puedes robar mas.");
					Fin_Robo_Casa(playerid);
				}
			}
			//
			if (GetPVarInt(playerid, "_heridoC") == 1) ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
			//afk
			InfoJugador[playerid][jModoAFK]++;
			//
			if (timer_muerte[playerid] != 0 && InfoJugador[playerid][jAbatido] == 0)
			{
				timer_muerte[playerid]--;
				if (timer_muerte[playerid] == 0) VoiAlHospital(playerid);
			}
			// cargos update
			if (InfoJugador[playerid][jDutyPD] != 0)
			{
				foreach(Player, playerid2)
				{
				    if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jEstrellas] != 0)
				    {
					    if(InfoJugador[playerid2][jMuerto] == 0)
					    {
						    switch(InfoJugador[playerid2][jEstrellas])
						    {
						        case 1: SetPlayerMarkerForPlayer(playerid, playerid2, 0xFFF48BFF);
						        case 2: SetPlayerMarkerForPlayer(playerid, playerid2, 0xF5C518FF);
						        case 3: SetPlayerMarkerForPlayer(playerid, playerid2, 0xE7B504FF);
						        case 4: SetPlayerMarkerForPlayer(playerid, playerid2, 0xE78A04FF);
						        case 5: SetPlayerMarkerForPlayer(playerid, playerid2, 0xE75A04FF);
						        case 6: SetPlayerMarkerForPlayer(playerid, playerid2, 0xE73E04FF);
							}
						}
						else
						{
						    SetPlayerMarkerForPlayer(playerid, playerid2, 0x3EFF00FF);
						}
					}
				}
			}
		}
		// anticheat weapon
 	// ref update
		if (SolicitaRefuerzos[playerid] != 0 && InfoJugador[playerid][jFamMiembro] != 0) // sistema de refuerzos by x1
		{
		    new familia = InfoJugador[playerid][jFamMiembro];
            new Float: X, Float: Y, Float: Z;
			foreach(Player, playerid2)
			{
			    if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jFamMiembro] == familia)
			    {
                    GetPlayerPos(playerid, X, Y, Z);
                    SetPlayerCheckpoint(playerid2, X, Y, Z, 3);
 			        SetPVarInt(playerid2, "EnCheckPoint", 0);
				    TogglePlayerAllDynamicCPs(playerid2, true);
		            DisablePlayerCheckpoint(playerid2);
				}
			}
		}
  //CODIGO BUGEADO
		/*
		countGameTime[playerid]++;
		if (countGameTime[playerid] == 5)
		{
			if (Spectate[playerid] == 999 && GetPVarInt(playerid, "EnEvento") == 0 && Ropa_ID[playerid] == 0 && Toy_ID[playerid] == -1 && UsandoOptiwand[playerid] == -1 && SaliendoServer[playerid] == 0)
			{
				GetPlayerPos(playerid, InfoJugador[playerid][jPosicionX], InfoJugador[playerid][jPosicionY], InfoJugador[playerid][jPosicionZ]);
				GetPlayerFacingAngle(playerid, InfoJugador[playerid][jPosicionR]);
				InfoJugador[playerid][jInterior] = GetPlayerInterior(playerid);
				InfoJugador[playerid][jVirtualWorld] = GetPlayerVirtualWorld(playerid);
			}
			new query[1500];
			mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET PosicionX = '%f', PosicionY = '%f', PosicionZ = '%f', PosicionR = '%f', Interior = '%d', VirtualWorld = '%d' WHERE ID = '%d'",
			InfoJugador[playerid][jPosicionX], InfoJugador[playerid][jPosicionY], InfoJugador[playerid][jPosicionZ], InfoJugador[playerid][jPosicionR], InfoJugador[playerid][jInterior], InfoJugador[playerid][jVirtualWorld], InfoJugador[playerid][jID]);
			mysql_tquery(DBngrp, query);
			countGameTime[playerid] = 0;
		}
  */
		//
		if (GetPlayerCash(playerid) != GetPlayerMoney(playerid))
		{
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, InfoJugador[playerid][jDinero]);
		}
		if (ConquistandoMercado[playerid] != -1)
		{
			if (ConquistandoMercado[playerid] >= 0 && MercadoData[ConquistandoMercado[playerid]][mConquistado] == 0)
			{
				new mercadoid = ConquistandoMercado[playerid];
				MercadoData[mercadoid][mTiempoConquista2]++/2;
				new ftipo[60];
				alm(ftipo, GetTypeFamily(InfoFamilia[InfoJugador[MercadoData[mercadoid][mQuienEstaConquistando]][jFamMiembro]][fTipo]));
				if (InfoJugador[playerid][jFamMiembro])
				{
					format(string, sizeof string, "Mercado negro de~n~~r~%s~n~~w~Bajo ataque de la %s ~y~%s~r~~n~%d%% de proceso.", MercadoData[mercadoid][mLocalizacion], ftipo, InfoFamilia[InfoJugador[MercadoData[mercadoid][mQuienEstaConquistando]][jFamMiembro]][fNombre], MercadoData[mercadoid][mTiempoConquista2]/2);
					PlayerTextDrawSetString(playerid, ConquistaMercado[playerid], string);
				}
				if (MercadoData[mercadoid][mTiempoConquista2] >= 200)
				{
					format(string, sizeof string, "(( [Familia] El mercado (%d) de %s fue conquistado por tu familia ))", mercadoid, MercadoData[mercadoid][mLocalizacion]);
					SendFamilyMessage(InfoJugador[MercadoData[mercadoid][mQuienEstaConquistando]][jFamMiembro], 0x6BBFA0FF, string);
					MercadoData[mercadoid][mConquistado] = 1;
					alm(MercadoData[mercadoid][mQuienConquisto], InfoFamilia[InfoJugador[playerid][jFamMiembro]][fNombre]);
					MercadoData[mercadoid][mIDFamilia] = InfoJugador[playerid][jFamMiembro];
					MercadoData[mercadoid][mTiempoConquista] = 86400;
					MercadoData[mercadoid][mTiempoConquista2] = 0;
					Mercado_Refresh(mercadoid);
					if (InfoJugador[playerid][jFamMiembro]) { PlayerTextDrawHide(playerid, ConquistaMercado[playerid]); }
					Mercado_Save(mercadoid);
				}
			}
		}
		if (InfoJugador[playerid][pTiempoRobo] > 0) { InfoJugador[playerid][pTiempoRobo]--; guardar_int_mysql("cuentas", "TiempoRobo", InfoJugador[playerid][jID], InfoJugador[playerid][pTiempoRobo]); }
		if (TiempoVenta[playerid] > 0) { TiempoVenta[playerid]--; }
		if (InfoJugador[playerid][jTiempoServicio] != 0) InfoJugador[playerid][jTiempoServicio]--;
		if (InfoJugador[playerid][jHorasConectado] < 2)
		{
		
		}
		if (InfoJugador[playerid][jAlcohol] > 40)
		{
			if (!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1, 1);
			SetPlayerDrunkLevel(playerid, InfoJugador[playerid][jAlcohol] * 250);
		}
		if (Atado[playerid] > 0) TogglePlayerControllable(playerid, 0);
		if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && JetPack[playerid] == 0 && InfoJugador[playerid][jAdmin] < 1)
		{
			format(string, sizeof string, "Fue expulsado. Razon: JetPack (server).");
			AddRegistroAC(playerid, string);
			format(string, sizeof string, "Administracion: %s ha sido expulsado. {E00000}Razon: jetpack hack.", NombreRJugador(playerid), playerid);
			MensajeAdmin(string);
			Kick(playerid);
		}
		//repaircar
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new Float: cvida;
			GetVehicleHealth(GetPlayerVehicleID(playerid), cvida);
			if (cvida > 1001.0)
			{
				SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
				format(string, sizeof string, "Administracion: %s puede ser posible RepairCar.", NombreRJugador(playerid));
				MensajeAdmin(string);
			}
		}
		//teleport cheats
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		if (cheat_PlayerTeleport != 0)
		{
			new reason[170], bool: surfing;
			if (!InfoSync[playerid][SYNC_TYPE_POS][sTimeSync])
			{
				surfing = (GetPlayerSurfingVehicleID (playerid) != INVALID_VEHICLE_ID || GetPlayerSurfingObjectID (playerid) != INVALID_OBJECT_ID);
				if ((z < 900.0) == (CurrentPos[playerid][2] < 900.0))//Prevent kick when entering buildings.
				{
					if (GetPlayerState(playerid) != PLAYER_STATE_PASSENGER && !surfing && !IsPlayerInRangeOfPoint(playerid, 350.0, CurrentPos[playerid][0], CurrentPos[playerid][1], CurrentPos[playerid][2]))
					{
						if (!IsPlayerInRangeOfPoint(playerid, 5.0, pSetPos[playerid][0], pSetPos[playerid][1], pSetPos[playerid][2]))
						{
							alm(reason, GetPlayerNameZone(playerid));
							if (IsCheatPosition (playerid))
							{
								format(reason, sizeof reason, "Teleport cheats #1 (%s)", reason);
							}
							else
							{
								format(reason, sizeof reason, "Teleport cheats #2 (%s)", reason);
							}
							WarningTPlayer[playerid]++;
							//funcion
							if (WarningTPlayer[playerid] >= 3)
							{
					 			CheatDetected(playerid, reason, 2);
					 		}
					 		else //posible
					 		{
								CheatDetected(playerid, reason, 1);
					 		}
						}
					}
				}
			}
		}
		//
		CurrentPos[playerid][0] = x;
		CurrentPos[playerid][1] = y;
		CurrentPos[playerid][2] = z;
		// si esta herido o abatido
		if (GetPlayerState(playerid) == 1 && GetPVarInt(playerid, "EnCrack") == 1)
		{
			if (GetPlayerAnimationIndex(playerid) != 1701 && InfoJugador[playerid][jAbatido] == 0)
			{
				ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
			}
			if (InfoJugador[playerid][jAbatido] == 1)
			{
				ApplyAnimation(playerid, "SWEET", "sweet_injuredloop", 4.0, 1, 0, 0, 1, 0, 1);
				ApplyAnimation(playerid, "SWEET", "sweet_injuredloop", 4.0, 1, 0, 0, 1, 0, 1);
				SetPlayerArmedWeapon(playerid, 0);
			}
		}
		// anticheat de armas
		new weapons4[MAX_PLAYERS],weapons8[MAX_PLAYERS],municion;
		if(Quitando[playerid] == 0 && InfoJugador[playerid][jAdmin] < 3) // minimo mod. 3
		{
			GetPlayerWeaponData(playerid, 4, weapons4[playerid], municion);
			GetPlayerWeaponData(playerid, 8, weapons8[playerid], municion);
			if(!CheckArma(playerid,weapons4[playerid]))
			{
 				format(string, sizeof(string), "{DC1005}[AC-UwU]{FFFFFF} Se detecto a %s[%d] de posible cheat de armas ('%d').", NombreJugador(playerid), playerid, GetPlayerWeapon(playerid));
				SendAdminMessage(0xFFFFFFFF, string);
			}
			if(weapons8[playerid] != 0 && municion != 0) { InfoJugador[playerid][jArmas][8] = 16; }
			else { InfoJugador[playerid][jArmas][8] = 0; }
			if(GetPlayerWeapon(playerid) != 46)
			{
				if(GetPlayerWeapon(playerid) == InfoJugador[playerid][jArmas][0]) { }
				else if(GetPlayerWeapon(playerid) == InfoJugador[playerid][jArmas][1])  { }
				else if(GetPlayerWeapon(playerid) == InfoJugador[playerid][jArmas][2])  { }
				else if(GetPlayerWeapon(playerid) == InfoJugador[playerid][jArmas][3])  { }
				else if(GetPlayerWeapon(playerid) == InfoJugador[playerid][jArmas][4])  { }
				else if(GetPlayerWeapon(playerid) == InfoJugador[playerid][jArmas][5])  { }
				else if(GetPlayerWeapon(playerid) == InfoJugador[playerid][jArmas][6])  { }
				else if(GetPlayerWeapon(playerid) == InfoJugador[playerid][jArmas][7])  { }
				else if(GetPlayerWeapon(playerid) == InfoJugador[playerid][jArmas][8])  { }
				else if(GetPlayerWeapon(playerid) == InfoJugador[playerid][jArmas][9])  { }
				else if(GetPlayerWeapon(playerid) == InfoJugador[playerid][jArmas][10]) { }
				else if(GetPlayerWeapon(playerid) == InfoJugador[playerid][jArmas][11]) { }
				else
				{
					if(TieneArmaCheat(playerid) && InfoJugador[playerid][jAdmin] != 3)
					{
 						format(string, sizeof(string), "{DC1005}[AC-UwU]{FFFFFF} Se detecto a %s[%d] de posible cheat de armas ('%d').", NombreJugador(playerid), playerid, GetPlayerWeapon(playerid));
						SendAdminMessage(0xFFFFFFFF, string);
					}
					if(Anti[playerid][BalasW] >= 3)
					{
 						format(string, sizeof(string), "{DC1005}[AC-UwU]{FFFFFF} Se detecto a %s[%d] de posible cheat de armas ('%d').", NombreJugador(playerid), playerid, GetPlayerWeapon(playerid));
						SendAdminMessage(0xFFFFFFFF, string);
					}
					else
					{
						Anti[playerid][BalasW]++;
					}
				}
			}
		}
		ActualizarManos(playerid);
	}
	Loop(f, totalfabricas, 1) if (InfoFabrica[f][fabricaConquistada] == 1)
	{
		InfoFabrica[f][fabricaTiempoConquista]--;
		Fabrica_Save(f);
		if (InfoFabrica[f][fabricaTiempoConquista] <= 1)
		{
			InfoFabrica[f][fabricaConquistada] = 0;
			alm(InfoFabrica[f][fabricaQuienConquisto], "Nadie");
			InfoFabrica[f][fabricaIDFaccion] = -1;
			InfoFabrica[f][fabricaTiempoConquista] = 0;
			Fabrica_Refresh(f);
			Fabrica_Save(f);
		}
	}
	Loop(id, totalterritorios, 1) if (InfoTerritorio[id][tConquistado] == 1)
	{
		if (InfoTerritorio[id][tTiempoConquista] != 0)
		{
			InfoTerritorio[id][tTiempoConquista]--;
			guardar_int_mysql("territorios", "TiempoConquista", InfoTerritorio[id][tID], InfoTerritorio[id][tTiempoConquista]);
		}
	}
	new hour, minute, second;
	gettime(hour, minute, second);
	if(minute == 2 && second == 00)
	{
		BuscarGanadorCoin();
		foreach(Player, playerid2)
		{
		    if (IsPlayerConnectedEx(playerid2))
		    {
			    if (InfoJugador[playerid2][jModoAFK] < 3)
				{
				    if(InfoJugador[playerid2][jPayday] > 30) PagoDiario(playerid2);
				    else SendClientMessage(playerid2, 0xccccccFF, "* No jugaste el tiempo necesario para recibir el pago diario.");
				}
			    else SendClientMessage(playerid2, 0xccccccFF, "* No recibiste el payday por estar AFK.");
			}
		}
	}
	Loop(id, totalterritorios, 1) if (InfoTerritorio[id][tLugarX] != 0.0 && InfoTerritorio[id][tBajoConquista] != 0)
	{
		new familia = InfoTerritorio[id][tBajoDominador], familia2 = InfoTerritorio[id][tBajoDominador];
		//actualizar tiempo de conquista
		new attackers_in_area = CountCrewPlayersInTerritory(InfoTerritorio[id][tBajoDominador], id);
		if(attackers_in_area <= 0)
		{
			InfoTerritorio[id][tTiempoAtaque] = 0;
			InfoTerritorio[id][tBajoDominador] = -1;
			InfoTerritorio[id][tBajoConquista] = 0;

			for(new p = 0, j = GetPlayerPoolSize(); p <= j; p++)
			{
				if(IsPlayerConnected(p))
				{
					if (InfoJugador[p][jFamMiembro] == familia || InfoJugador[p][jFamMiembro] == familia2)
					{
						SendClientMessageEx(p, -1, "Banda {FFFF00}%s {FFFFFF}ha perdido la conquista del territorio %d.", InfoFamilia[familia][fNombre], id);

						Update_Conquista_Territorio(p, id);
						TextDrawHideForPlayer(p, Box_Conquista);
						PlayerTextDrawHide(p, TD_Conquista[p]);
						Player_Color_Conquista[p] = 0;
						SetPlayerColor(p, 0xFFFFFF00);
						RemovePlayerMapIcon(p, 1);
					}
				}
			}
			Articulos_Territorio(id);
			break;
		}
		InfoTerritorio[id][tTiempoAtaque]++;
		foreach(Player, p) if (IsPlayerConnectedEx(p))
		{
			if (InfoJugador[p][jFamMiembro] == familia)
			{
				Update_Conquista_Territorio(p, id);
				if (Player_Color_Conquista[p] == 0)
				{
					TextDrawShowForPlayer(p, Box_Conquista);
					PlayerTextDrawShow(p, TD_Conquista[p]);
					Player_Color_Conquista[p] = 0xFF0000FF;
					new r, g, b, a;
					HexToRGBA(InfoFamilia[familia][fColor], r, g, b, a);
					SetPlayerColor(p, RGBAToHex(r, g, b, 0));
				}
			}
		}
		//se acabo el tiempo de conquista
		if (InfoTerritorio[id][tTiempoAtaque] >= TiempoParaConquistar)
		{
			new bool:success;
			if (PandillerosEnTerritorio(familia, id))
			{
				Loop(f, totalfamilias, 1) if (InfoFamilia[f][fTipo] == 1)
				{
					if (PandillerosEnTerritorio(familia, id) < PandillerosEnTerritorio(f, id))
					{
						InfoTerritorio[id][tBajoDominador] = f;
					}
				}
				success = true;
			}
			else
			{
				printf("- Territorio ID %d volvio a su viejo estado, porque no habian atacantes", id);
				success = false;
			}
			if (!success)
			{
				familia2 = InfoTerritorio[id][tBajoDominador];
				InfoTerritorio[id][tConquistado] = 1;
				InfoTerritorio[id][tTiempoAtaque] = 0;
				InfoTerritorio[id][tBajoConquista] = 0;
				InfoTerritorio[id][tBandaID] = familia2;
				alm(InfoTerritorio[id][tDominador], InfoFamilia[familia2][fNombre]);
				InfoTerritorio[id][tTiempoConquista] = 3600;
				guardar_int_mysql("territorios", "Conquistado", InfoTerritorio[id][tID], InfoTerritorio[id][tConquistado]);
				guardar_string_mysql("territorios", "Dominador", InfoTerritorio[id][tID], InfoTerritorio[id][tDominador]);
				guardar_int_mysql("territorios", "BandaID", InfoTerritorio[id][tID], InfoTerritorio[id][tBandaID]);
				guardar_int_mysql("territorios", "TiempoConquista", InfoTerritorio[id][tID], InfoTerritorio[id][tTiempoConquista]);
				foreach(Player, p) if (IsPlayerConnectedEx(p))
				{
					if (Es_Pandilla_Mafia(p))
					{
						SendClientMessageEx(p, -1, "Banda {FFFF00}%s {FFFFFF}gano el territorio %d, ahora lo dominaran hasta que reconquisten.", InfoFamilia[familia2][fNombre], id);
					}
					if (InfoJugador[p][jFamMiembro] == familia2)
					{
						SendClientMessage(p, 0xccccccFF, "Info: {FFFFFF}Recibiste 5.000$ por conquistar un territorio con tu familia.");
						GivePlayerCash(p, 5000, "territorio conquistas");
					}
					if (InfoJugador[p][jFamMiembro] == familia || InfoJugador[p][jFamMiembro] == familia2)
					{
						Update_Conquista_Territorio(p, id);
						TextDrawHideForPlayer(p, Box_Conquista);
						PlayerTextDrawHide(p, TD_Conquista[p]);
						Player_Color_Conquista[p] = 0;
						SetPlayerColor(p, 0xFFFFFF00);
						RemovePlayerMapIcon(p, 1);
					}
				}
				Articulos_Territorio(id);
				continue;
			}
			InfoTerritorio[id][tTiempoAtaque] = 0;
			InfoTerritorio[id][tBajoDominador] = -1;
			InfoTerritorio[id][tBajoConquista] = 0;
			Articulos_Territorio(id);
			foreach(Player, p) if (IsPlayerConnectedEx(p))
			{
				RemovePlayerMapIcon(p, 1);
			}
		}
	}
	Loop(v, MAX_VEHICLES, 0) if (GetVehicleModel(v))
	{
	    if (TiempoCar[v] > 0) TiempoCar[v]++;
	    if (TiempoCar[v] >= 120)
	    {
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(v, engine, lights, alarm, doors, bonnet, boot, objective);
	        if (ZonaRespawn[v] == 1)
	        {
		        format(string, sizeof string, "Administracion: El vehiculo [ID: %d] fue llevado al estacionamiento de Carpintero.", v);
		        MensajeAdmin(string);
		    	foreach(new playerid: Player) if (IsPlayerConnectedEx(playerid))
				{
					if (llaves_vehiculo(playerid, v) != -1)
					{
						SendClientMessageEx(playerid, 0x008BFFFF, "Tu %s fue remolcado al estacionamiento de Carpintero.", GetVehicleName(v));
					}
				}
			    if (engine == VEHICLE_PARAMS_ON) SetVehicleParamsEx(v, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
		        SetVehiclePassengersInteriorEx(v, 6);
				SetVehiclePassengersVWEx(v, 2);
				new rand = random(sizeof(EstacionamientoSpawn));
				MoverVehiclePos(v, EstacionamientoSpawn[rand][0], EstacionamientoSpawn[rand][1], EstacionamientoSpawn[rand][2]);
				SetVehicleZAngle(v, EstacionamientoSpawn[rand][3]);
		        TiempoCar[v] = 0;
		        ZonaRespawn[v] = 0;
		        break;
			}
			else if (ZonaRespawn[v] == 2)
			{
		        format(string, sizeof string, "Administracion: El vehiculo [ID: %d] fue llevado al estacionamiento de Camionero.", v);
		        MensajeAdmin(string);
		    	foreach(new playerid: Player) if (IsPlayerConnectedEx(playerid))
				{
					if (llaves_vehiculo(playerid, v) != -1)
					{
						SendClientMessageEx(playerid, 0x008BFFFF, "Tu %s fue remolcado al estacionamiento de Camionero.", GetVehicleName(v));
					}
				}
			    if (engine == VEHICLE_PARAMS_ON) SetVehicleParamsEx(v, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
		        SetVehiclePassengersInteriorEx(v, 7);
				SetVehiclePassengersVWEx(v, 2);
				new rand = random(sizeof(EstacionamientoSpawn));
				MoverVehiclePos(v, EstacionamientoSpawn[rand][0], EstacionamientoSpawn[rand][1], EstacionamientoSpawn[rand][2]);
				SetVehicleZAngle(v, EstacionamientoSpawn[rand][3]);
		        TiempoCar[v] = 0;
		        ZonaRespawn[v] = 0;
		        break;
			}
		}
	}
}

forward timer_minuto();
public timer_minuto()
{
	// sistema loteria
	if (Tiempo_Loteria != 0)
	{
		Tiempo_Loteria--;
		if (Tiempo_Loteria == 30) _MensajeSAN(0x00DC76FF, "[SAN] Loteria en 30 minutos, compra tu boleta en un 24-7 e intenta ganar!");
		if (Tiempo_Loteria == 10) _MensajeSAN(0x00DC76FF, "[SAN] Loteria en 10 minutos, compra tu boleta en un 24-7 e intenta ganar!");
		if (Tiempo_Loteria == 0)
		{
			new pay = Random(1, 120);
			Jugar_Loteria(pay);
			Tiempo_Loteria = 120;
		}
	}
	//
	new time[3];
	gettime(time[0], time[1], time[2]);
	new string[256];
	//plantas de marihuana
	Loop(id, totalplantas, 1) if (InfoPlanta[id][sPosicionX] != 0.0)
	{
		if (InfoPlanta[id][sTiempo] != 0 && InfoPlanta[id][sGramos] == 0)
		{
			InfoPlanta[id][sTiempo]--;
			guardar_int_mysql("plantas", "Tiempo", InfoPlanta[id][sID], InfoPlanta[id][sTiempo]);
			format(string, sizeof string, "Planta de marihuana {cccccc}(ID: {009F46}%d{cccccc})\n{ffffff}Madura en {FFFF00}%s", id, Minutos_tiempo(InfoPlanta[id][sTiempo]));
			if (InfoPlanta[id][sTiempo] == 0)
			{
				new gramitos = Random(6, 15);
				InfoPlanta[id][sGramos] = gramitos;
				guardar_int_mysql("plantas", "Gramos", InfoPlanta[id][sID], InfoPlanta[id][sGramos]);
				format(string, sizeof string, "Planta de marihuana {cccccc}(ID: {009F46}%d{cccccc})\n{ffffff}Madurada ({FFFF00}/splanta{ffffff})", id);
			}
			UpdateDynamic3DTextLabelText(InfoPlanta[id][sLabel], 0x009F46FF, string);
		}
	}
	Loop(f, totalfabricas, 1) if (InfoFabrica[f][fabricaConquistada] == 1)
	{
		Fabrica_Refresh(f);
	}
	if(TiempoReinicio > 0) TiempoReinicio--;
	if(TiempoReinicio == 5)
	{
	    for(new i; i < MAX_PLAYERS; i++) ShowPlayerFooter(i, "~n~~n~~w~Cuentas y datos guardados~n~~r~Tiempo para reinicio 5 minutos.");
		ActualizarEst();
		ActualizarUVeh();
	}
	if(TiempoReinicio == 4)
	{
	    for(new i; i < MAX_PLAYERS; i++) if (IsPlayerConnectedEx(i))
	    {
	        ShowPlayerFooter(i, "~n~~n~~w~Cuentas y datos guardados~n~~r~Tiempo para reinicio 4 minutos~n~~w~Cargos y combate retirados.");
			ActualizarEst();
			ActualizarUVeh();
		}
	}
	if(TiempoReinicio == 3)
	{
	    for(new i; i < MAX_PLAYERS; i++)
		{
			ShowPlayerFooter(i, "~n~~n~~w~Cuentas y datos guardados~n~~r~Tiempo para reinicio 3 minutos~n~~w~Autos estacionados.");
	    	cmd_estacionar(i);
		}
		ActualizarEst();
		ActualizarUVeh();
	}
	if(TiempoReinicio == 2)
	{
	    for(new i; i < MAX_PLAYERS; i++) ShowPlayerFooter(i, "~n~~n~~w~Cuentas y datos guardados~n~~r~Tiempo para reinicio 2 minutos~n~~w~Detectores de velocidad desactivados.");
		ActualizarEst();
		ActualizarUVeh();
	}
	if(TiempoReinicio == 1)
	{
	    for(new i; i < MAX_PLAYERS; i++) ShowPlayerFooter(i, "~n~~n~~w~Cuentas y datos guardados~n~~r~Tiempo para reinicio 1 minutos.");
		ActualizarEst();
		ActualizarUVeh();
	}
	if(Reinicio == 1 && TiempoReinicio == 0)
	{
	    for(new i; i < MAX_PLAYERS; i++) ShowPlayerFooter(i, "~n~~n~~w~Reiniciando servidor~n~Todos seran ~r~expulsados.");
		ActualizarEst();
		ActualizarUVeh();
	    SetTimer("restart_server", 5000, 0);
	}
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid))
	{
		SetPlayerTime(playerid, time[0], time[1]);
		if(MuteadoDiscord[playerid] > 0)
		{
		    MuteadoDiscord[playerid]--;
		    if(MuteadoDiscord[playerid] == 0)
		    {
		         _Mensaje(playerid, 5, "0", "Has sido desmuteado, no mal uses de nuevo del canal de discord");
		    }
		}
		// cargos
		if (InfoJugador[playerid][jMinEstrellas] != 0)
		{
			InfoJugador[playerid][jMinEstrellas]--;
			if (InfoJugador[playerid][jMinEstrellas] == 0)
			{
				InfoJugador[playerid][jEstrellas] = 0;
				Sin_Cargos(playerid);
				Set_Player_Wasted(playerid, 0);
				guardar_int_mysql("cuentas", "Estrellas", InfoJugador[playerid][jID], InfoJugador[playerid][jEstrellas]);
				foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jDutyPD] != 0)
				{
					SetPlayerMarkerForPlayer(playerid2, playerid, 0xFFFFFF00);
				}
			}
			guardar_int_mysql("cuentas", "MinEstrellas", InfoJugador[playerid][jID], InfoJugador[playerid][jMinEstrellas]);
		}
        // payday
        if (InfoJugador[playerid][jPayday] < 60)
        {
        	InfoJugador[playerid][jPayday]++;
			guardar_int_mysql("cuentas", "Payday", InfoJugador[playerid][jID], InfoJugador[playerid][jPayday]);
		}
        if(DudaTiempo[playerid] > 0 && DudaB[playerid] == 1)
        {
            DudaTiempo[playerid]--;
            _Mensaje(playerid, 5, "0", "Has sido desmuteado, no mal uses de nuevo");

        }
        if(InfoJugador[playerid][jTiempoMuteoAD] > 0 && InfoJugador[playerid][jMutedAnuncios] == 1)
        {
            InfoJugador[playerid][jTiempoMuteoAD]--;
			if(InfoJugador[playerid][jTiempoMuteoAD] == 0)
			{
            	SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Tu tiempo de muteo del canal de anuncios termino.");
            	InfoJugador[playerid][jTiempoMuteoAD] = 0;
				InfoJugador[playerid][jMutedAnuncios] = 0;
				guardar_int_mysql("cuentas", "MutedAnuncios", InfoJugador[playerid][jID], InfoJugador[playerid][jMutedAnuncios]);
				guardar_int_mysql("cuentas", "TiempoMuteoAD", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempoMuteoAD]);
			}

        }
        if(InfoJugador[playerid][jT_fabrica] == 1)
		{
            InfoJugador[playerid][jT_fabrica] = -1;
			InfoJugador[playerid][jI_fabrica] = 0;
			guardar_int_mysql("cuentas", "T_fabrica", InfoJugador[playerid][jID], InfoJugador[playerid][jT_fabrica]);
			guardar_int_mysql("cuentas", "I_fabrica", InfoJugador[playerid][jID], InfoJugador[playerid][jI_fabrica]);
  		}
   		if(InfoJugador[playerid][jT_fabrica2] == 1)
	   	{
            InfoJugador[playerid][jT_fabrica2] = -1;
			InfoJugador[playerid][jI_fabrica2] = 0;
			guardar_int_mysql("cuentas", "T_fabrica2", InfoJugador[playerid][jID], InfoJugador[playerid][jT_fabrica2]);
			guardar_int_mysql("cuentas", "I_fabrica2", InfoJugador[playerid][jID], InfoJugador[playerid][jI_fabrica2]);
  		}
        if(InfoJugador[playerid][jT_fabrica] != -1) InfoJugador[playerid][jT_fabrica] --,guardar_int_mysql("cuentas", "T_fabrica", InfoJugador[playerid][jID], InfoJugador[playerid][jT_fabrica]);
        if(InfoJugador[playerid][jT_fabrica2] != -1) InfoJugador[playerid][jT_fabrica2] --,guardar_int_mysql("cuentas", "T_fabrica2", InfoJugador[playerid][jID], InfoJugador[playerid][jT_fabrica2]);
        if (InfoJugador[playerid][jTiempos][1] > 0) InfoJugador[playerid][jTiempos][1]--,guardar_int_mysql("cuentas", "Tiempos2", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][1]); //- Llenar Vida
        if (InfoJugador[playerid][jTiempos][2] > 0) InfoJugador[playerid][jTiempos][2]--,guardar_int_mysql("cuentas", "Tiempos3", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][2]); //- /entrenar
        if (InfoJugador[playerid][jTiempos][3] > 0) InfoJugador[playerid][jTiempos][3]--,guardar_int_mysql("cuentas", "Tiempos4", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][3]); //- Robo banco
        if (InfoJugador[playerid][jTiempos][4] > 0) InfoJugador[playerid][jTiempos][4]--,guardar_int_mysql("cuentas", "Tiempos5", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][4]); //- Robo negocio
        if (InfoJugador[playerid][jTiempos][5] > 0) InfoJugador[playerid][jTiempos][5]--,guardar_int_mysql("cuentas", "Tiempos6", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][5]); //- Tiempo Regalo
        if (InfoJugador[playerid][jTiempos][6] > 0) InfoJugador[playerid][jTiempos][6]--,guardar_int_mysql("cuentas", "Tiempos7", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][6]); //- /traficar - Trabajo traficante
        if (InfoJugador[playerid][jTiempos][7] > 0) InfoJugador[playerid][jTiempos][7]--,guardar_int_mysql("cuentas", "Tiempos8", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][7]); //- /comprarnegocio
        if (InfoJugador[playerid][jTiempos][8] > 0) InfoJugador[playerid][jTiempos][8]--,guardar_int_mysql("cuentas", "Tiempos9", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][8]); //- /comprar > ammunation
        if (InfoJugador[playerid][jTiempos][11] > 0) InfoJugador[playerid][jTiempos][11]--,guardar_int_mysql("cuentas", "Tiempos12", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][11]); //- /Regalo
        if (InfoJugador[playerid][jTiempos][12] > 0) InfoJugador[playerid][jTiempos][12]--,guardar_int_mysql("cuentas", "Tiempos13", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][12]); //- /Ads
        if (InfoJugador[playerid][jAlcohol] > 0) InfoJugador[playerid][jAlcohol]--,guardar_int_mysql("cuentas", "Alcohol", InfoJugador[playerid][jID], InfoJugador[playerid][jAlcohol]); //- /Beber
        if (InfoJugador[playerid][jTiempos][13] > 0) InfoJugador[playerid][jTiempos][13]--,guardar_int_mysql("cuentas", "Tiempos14", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][13]); //robar banco
        if (InfoJugador[playerid][jTiempos][14] > 0) InfoJugador[playerid][jTiempos][14]--,guardar_int_mysql("cuentas", "Tiempos15", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][14]); //robar casa
        if (InfoJugador[playerid][jTiempos][15] > 0) InfoJugador[playerid][jTiempos][15]--,guardar_int_mysql("cuentas", "Tiempos16", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][15]); //robar cajero
        if (InfoJugador[playerid][jTiempos][16] > 0) InfoJugador[playerid][jTiempos][16]--,guardar_int_mysql("cuentas", "Tiempos17", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][16]); //- delincuente
        if (InfoJugador[playerid][jTiempos][17] > 0) InfoJugador[playerid][jTiempos][17]--,guardar_int_mysql("cuentas", "Tiempos18", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][17]); //- robo coches
        if (InfoJugador[playerid][jTiempos][18] > 0) InfoJugador[playerid][jTiempos][18]--,guardar_int_mysql("cuentas", "Tiempos19", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][18]); //- /fseguro
        if (InfoJugador[playerid][jTiempos][19] > 0) InfoJugador[playerid][jTiempos][19]--,guardar_int_mysql("cuentas", "Tiempos20", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][19]); //- /comprar > ammunation
        if (VisitaTimer2[playerid] > 0) VisitaTimer2[playerid]--;
        //Hambre y sed
		Loop(id, totalnegocios, 1) if (InfoNegocio[id][nVenta] != 0 && InfoNegocio[id][nTipo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoNegocio[id][nPropietario], true) == 0)
		{
		if(InfoNegocio[id][nProductos]<=100) return SendClientMessageEx(playerid, -1, "Tu {008BFF}negocio {ffffff}(%d) %s {ffffff}tiene menos de {008BFF}100 productos (%d){ffffff}, ve a llenarlo vago.", id, InfoNegocio[id][nNombre], InfoNegocio[id][nProductos]);
		}
		if (InfoJugador[playerid][jMuerto] == 0 && InfoJugador[playerid][jEncarcelado] == 0 && EnServicioADM[playerid] == 0 && GetPVarInt(playerid, "Logueado") == 1)
		{
            //Hambre
			if(InfoJugador[playerid][jHambre] < MIN_HAMBRE)InfoJugador[playerid][jHambre] = MIN_HAMBRE+1; //Si hambre menor a minimo, setea minimo+1 para que se actualice
			ActualizarHambre(playerid);
			//Sed
			if(InfoJugador[playerid][jSed] < MIN_SED)InfoJugador[playerid][jSed] = MIN_SED+1; //Si sed menor a minimo, setea minimo+1 para que se actualice
			ActualizarSed(playerid);
			//Le va quitando vida por hambre y sed
			new Float:cvida; GetPlayerHealth(playerid, cvida);
			if(InfoJugador[playerid][jSed] <= MIN_SED && InfoJugador[playerid][jHambre] <= MIN_HAMBRE) { if(cvida > 10)Quitar_Vida(playerid, -2); }
			else if(InfoJugador[playerid][jSed] <= MIN_SED) { if(cvida > 10)Quitar_Vida(playerid, -1); }
			else if(InfoJugador[playerid][jHambre] <= MIN_HAMBRE) { if(cvida > 10)Quitar_Vida(playerid, -1); }
			guardar_int_mysql("cuentas", "Sed", InfoJugador[playerid][jID], InfoJugador[playerid][jSed]);
			guardar_int_mysql("cuentas", "Hambre", InfoJugador[playerid][jID], InfoJugador[playerid][jHambre]);
		}
		if(InfoJugador[playerid][jEncarcelado] > 0)
		{
            if(InfoJugador[playerid][jEncarcelado] > 0) { InfoJugador[playerid][jTiempoCarcel]--; }
			guardar_int_mysql("cuentas", "TiempoCarcel", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempoCarcel]);
            if(InfoJugador[playerid][jTiempoCarcel] <= 0)
			{
                InfoJugador[playerid][jTiempoCarcel] = 0;
				guardar_int_mysql("cuentas", "TiempoCarcel", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempoCarcel]);
                switch(InfoJugador[playerid][jEncarcelado]) {
                    case 1: {  // OOC
                        EliminarHerido(playerid);
                        Dar_Vida(playerid, 100);
                        _Mensaje(playerid, 4, "FF0000", "*{ffffff} Recuerda porque fuiste sancionado, trata de evitarlo nuevamente.");
                        SetPosEx(playerid, 1612.6682, -1648.4236, 13.6149, 0, 0, 0, 1);
                        DeletePVar(playerid, "Congelado");
                        TogglePlayerControllable(playerid, 1);
                        format(InfoJugador[playerid][jSancionador], 50, "Ninguno");
                        PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
                    }
                    case 2: {   // LSPD
                        EliminarHerido(playerid);
                        Dar_Vida(playerid, 100);
                        _Mensaje(playerid, 4, "8D8DFF", "[Guardia]:{ffffff} Usted ha cumplido el tiempo estimado y fue dejado en libertad.");
                        SetPosEx(playerid, 1609.4005,-1645.6492,13.5469, 0, 0, 0, 1);
                    }
                    case 3: {   // Prision Federal
                        EliminarHerido(playerid);
                        Dar_Vida(playerid, 100);
                        _Mensaje(playerid, 4, "8D8DFF", "[Guardia]:{ffffff} Usted ha cumplido el tiempo estimado y fue dejado en libertad.");
                        SetPosEx(playerid, 1609.4005,-1645.6492,13.5469, 0, 0, 0, 1);
                    }
                }
                InfoJugador[playerid][jEncarcelado] = 0;
                B_Telefono[playerid] = 0;
                GameTextForPlayer(playerid, "~g~Libre", 5000, 1);
                Set_Player_Wasted(playerid, 0);
                InfoJugador[playerid][jEstrellas] = 0;
                Sin_Cargos(playerid);
                InfoJugador[playerid][jMinEstrellas] = 0;
				guardar_int_mysql("cuentas", "Encarcelado", InfoJugador[playerid][jID], InfoJugador[playerid][jEncarcelado]);
				guardar_int_mysql("cuentas", "Estrellas", InfoJugador[playerid][jID], InfoJugador[playerid][jEstrellas]);
				guardar_int_mysql("cuentas", "MinEstrellas", InfoJugador[playerid][jID], InfoJugador[playerid][jMinEstrellas]);
            }
        }
    }
    return 1;
}

forward timer_necesidades();
public timer_necesidades()
{
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid))
	{
        if (EnServicioADM[playerid] == 0)
        {
			InfoJugador[playerid][jFuerza] -= 2;
			if (InfoJugador[playerid][jHambre] > MIN_HAMBRE) { InfoJugador[playerid][jHambre] -= 4; }
			if (InfoJugador[playerid][jSed] > MIN_SED) { InfoJugador[playerid][jSed] -= 6; }
			if (InfoJugador[playerid][jFuerza] < 50) InfoJugador[playerid][jFuerza] = 50;
			PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
			guardar_int_mysql("cuentas", "Fuerza", InfoJugador[playerid][jID], InfoJugador[playerid][jFuerza]);
			guardar_int_mysql("cuentas", "Sed", InfoJugador[playerid][jID], InfoJugador[playerid][jSed]);
			guardar_int_mysql("cuentas", "Hambre", InfoJugador[playerid][jID], InfoJugador[playerid][jHambre]);
			SetPlayerProgressBarValue(playerid, BarraSed[playerid], InfoJugador[playerid][jSed]);
			UpdatePlayerProgressBar(playerid, BarraSed[playerid]);
			SetPlayerProgressBarValue(playerid, BarraHambre[playerid], InfoJugador[playerid][jHambre]);
			UpdatePlayerProgressBar(playerid, BarraHambre[playerid]);
			TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
        	TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
   	    }
   	}
    return 1;
}

forward timer_hora();
public timer_hora()
{
	Loop(id, totalnegocios, 1) if (InfoNegocio[id][nTipo] != 0 && InfoNegocio[id][nVenta] == 1 && InfoNegocio[id][nSeguro] == 1)
	{
		InfoNegocio[id][nEstadoRobo] = 0;
		foreach(Player, playerid) if (IsPlayerConnectedEx(playerid) && IsPlayerJob(playerid, 2) != 0)
		{
		    SendClientMessageEx(playerid, 0x00FF00FF, "Ya se puede robar cualquier negocio.");
		    return 1;
		}
		if (InfoNegocio[id][nProductos] > 10)
		{
			new pagan;
			switch (InfoNegocio[id][nTipo])
			{
				case 1: pagan = 13000;
				case 2: pagan = 12500;
				case 3: pagan = 9000;
				case 4: pagan = 9000;
				case 5: pagan = 9000;
				case 6: pagan = 9000;
				case 7: pagan = 20000;
				case 8: pagan = 9500;
				case 9: pagan = 9000;
				case 10: pagan = 19000;
				case 11: pagan = 14000;
				case 12: pagan = 10000;
				case 13: pagan = 12000;
				case 14: pagan = 17000;
				case 15: pagan = 17000;
				case 16: pagan = 13000;
				case 17: pagan = 13000;
			}
			InfoNegocio[id][nDinero] += pagan;
			InfoNegocio[id][nProductos] -= 15;
			guardar_int_mysql("negocios", "Dinero", InfoNegocio[id][nID], InfoNegocio[id][nDinero]);
			guardar_int_mysql("negocios", "Productos", InfoNegocio[id][nID], InfoNegocio[id][nProductos]);
		}
	}
	ActualizarEst();
	GenerarIncendio();
	SetTimer("RespawnAutomatico", 60000, 0);
	foreach(Player, playerid) if (IsPlayerConnectedEx(playerid)) { _Mensaje(playerid, 4, "FFB600", "[OOC] [STAFF]: Respawn de vehiculos automatico en 60 segundos."); }
	CheckPropiedades();
	return 1;
}

forward timer_vehiculos();
public timer_vehiculos()
{
	new engine, lights, alarm, doors, bonnet, boot, objective, modelid;
	Loop(v, MAX_VEHICLES, v) if (GetVehicleModel(v))
	{
		modelid = GetVehicleModel(v);
		GetVehicleParamsEx(v, engine, lights, alarm, doors, bonnet, boot, objective);
		switch (modelid)
		{
			case 520, 476, 593, 553, 513, 512, 577, 592, 511, 539, 464, 519: GasolinaInicialVeh[v] = 500;
			case 509, 481, 510: GasolinaInicialVeh[v] = 500, arr_Engine {v} = 1, SetVehicleParamsEx(v, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
		}
		if (engine == VEHICLE_PARAMS_ON)
		{
			if (GasolinaInicialVeh[v] > 0 && !Camionero_Vehicle(v) && !Granjero_Vehicle(v) && !Basurero_Vehicle(v))
			{
				GasolinaInicialVeh[v] -= 1;
				if (GasolinaInicialVeh[v] <= 0) SetVehicleParamsEx(v, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
			}
			if (arr_Engine {v} == 0) SetVehicleParamsEx(v, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
		}
	}
}

forward timer_microashas();
public timer_microashas()
{
	new vehiculo, _danoveh[4], arrVehParams[7], texttrab[80];
	foreach(Player, i) if (IsPlayerConnectedEx(i))
	{
		if (GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			vehiculo = GetPlayerVehicleID(i);
			Loop(s, MAX_PINCHOS, 0) if (InfoPincho[s][sX] != 0)
			{
				if (VehicleToPoint(3.0, vehiculo, InfoPincho[s][sX], InfoPincho[s][sY], InfoPincho[s][sZ]))
				{
					GetVehicleDamageStatus(vehiculo, _danoveh[0], _danoveh[1], _danoveh[2], _danoveh[3]);
					_danoveh[3] = encode_tires(1, 1, 1, 1);
					UpdateVehicleDamageStatus(vehiculo, _danoveh[0], _danoveh[1], _danoveh[2], _danoveh[3]);
				}
			}
			if (InfoEvento[iEtapa] == 0)
			{
				new gformat[190], Float:vehVi;
				GetVehicleHealth(vehiculo, vehVi);
				if (_rVeh[i] == 0)
				{
					if (vehVi < 350.0)
					{
						SetVehicleHealth(vehiculo, 251.0);
						GetVehicleParamsEx(vehiculo, arrVehParams[0], arrVehParams[1], arrVehParams[2], arrVehParams[3], arrVehParams[4], arrVehParams[5], arrVehParams[6]);
						if (arrVehParams[0] == VEHICLE_PARAMS_ON) SetVehicleParamsEx(vehiculo, VEHICLE_PARAMS_OFF, arrVehParams[1], arrVehParams[2], arrVehParams[3], arrVehParams[4], arrVehParams[5], arrVehParams[6]);
						GameTextForPlayer(i, "~w~Motor ~r~averiado", 2500, 3);
						arr_Engine {vehiculo} = 0;
					}
				}
				if (arr_Engine {vehiculo} == 1)
				{
					if (!EstaEnBicis(vehiculo)) format(gformat, sizeof gformat, "%03d", floatround(GetVehicleSpeed(vehiculo)));
					PlayerTextDrawSetString(i, TD_Velocimetro[i][0], gformat);
					if (!EstaEnBicis(vehiculo)) format(gformat, sizeof gformat, "%0.2d", GasolinaInicialVeh[vehiculo]);
					PlayerTextDrawSetString(i, TD_Velocimetro[i][1], gformat);
				}
			}
		}
		//
		//EstaEnFuego(i);
		//
		if (EnModoTrabajo[i] != 0)
		{
			switch (EnModoTrabajo[i])
			{
				case 1: format(texttrab, sizeof texttrab, "Cargas: ~g~~h~%d", InfoJugador[i][jCargas]);
				case 6: format(texttrab, sizeof texttrab, "Muebles: ~g~~h~%d", InfoJugador[i][jMuebles]);
				case 7: format(texttrab, sizeof texttrab, "Troncos: ~g~~h~%d", InfoJugador[i][jTroncos]);
				case 10: format(texttrab, sizeof texttrab, "Gramos: ~g~~h~%d", InfoJugador[i][jCosechas]);
				case 12: format(texttrab, sizeof texttrab, "Piedras: ~g~~h~%d", InfoJugador[i][jPiedras]);
				case 13: format(texttrab, sizeof texttrab, "Manzanas: ~g~~h~%d", AmmountWood[i]);
			}
			PlayerTextDrawSetString(i, TextTrabajo[i], texttrab);
		}
		else
		{
			if (InfoJugador[i][jEncarcelado] == 1)
			{
				format(texttrab, sizeof texttrab, "Tiempo: ~g~~h~%dmin", InfoJugador[i][jTiempoCarcel]);
				PlayerTextDrawSetString(i, TextTrabajo[i], texttrab);
			}
		}
	}
	return 1;
}

forward timer_spec();
public timer_spec()
{
	foreach(Player, i) if (IsPlayerConnectedEx(i) && InfoJugador[i][jAdmin] != 0)
	{
		if (Spectando[i] >= 1)
		{
			if (Spectate[i] < 553)
			{
				new playerid2 = Spectate[i];
				if (!IsPlayerConnected(playerid2))
				{
					_Mensaje(i, 2, "0", "El jugador que estabas specteando salio del servidor.");
					SpectadorID[Spectate[i]] = 999;
					Spectando[i] = 0;
					Spectate[i] = 999;
					TogglePlayerSpectating(i, false);
					SetPosEx(i, InfoJugador[i][jPosicionX], InfoJugador[i][jPosicionY], InfoJugador[i][jPosicionZ], 0.0, InfoJugador[i][jInterior], InfoJugador[i][jVirtualWorld], 1);
					SetCameraBehindPlayer(i);
				}
			}
			if (Spectate[i] == 554)
			{
				TogglePlayerControllable(i, 1);
				SetPlayerInterior(i, Unspec[i][sPint]);
				InfoJugador[i][jInterior] = Unspec[i][sPint];
				SetPlayerPosEx(i, Unspec[i][Coords][0], Unspec[i][Coords][1], Unspec[i][Coords][2]);
				Spectate[i] = 999;
			}
			if (Spectate[i] == 556) Spectate[i] = 999;
			if (Spectate[i] == 557) Spectate[i] = 554;
		}
	}
}

Dialog:Comprar2Muebles(playerid, response, listitem, inputtext[])
{
	new modelid = MuebleActual[playerid], OBJ_INDEX;
	if (DentroCasa[playerid] == -1) return SendClientMessageEx(playerid, 0xccccccff, "* No estas dentro de una casa para comprar muebles.");
	//inicio
	if (!response)
	{
		MuebleActual[playerid] = 0;
		cmd_muebles(playerid);
		return 1;
	}
	if (modelid == 0) return SendClientMessage(playerid, 0xccccccff, "* Ocurrio un error con la compra de muebles (2) Habre ticket en el dc principal de North America Oficial.");
	BuscarModeIndexIntC(modelid, OBJ_INDEX);
	Adquirir_mueble(playerid, 1, modelid, ObjetosInteriorC[OBJ_INDEX][1], DentroCasa[playerid]);
	return 1;
}

Dialog:Comprar3Muebles(playerid, response, listitem, inputtext[])
{
	new modelid = MuebleActual[playerid], OBJ_INDEX;
	if (DentroNegocio[playerid] == -1) return SendClientMessageEx(playerid, 0xccccccff, "* No estas dentro de un negocio para comprar muebles.");
	//inicio
	if (!response)
	{
		MuebleActual[playerid] = 0;
		cmd_muebles(playerid);
		return 1;
	}
	if (modelid == 0) return SendClientMessage(playerid, 0xccccccff, "* Ocurrio un error con la compra de muebles (2) Habre ticket en el dc principal de North America Oficial. **");
	BuscarModeIndexIntN(modelid, OBJ_INDEX);
	Adquirir_mueble(playerid, 2, modelid, ObjetosInteriorN[OBJ_INDEX][1], DentroNegocio[playerid]);
	return 1;
}

Adquirir_mueble(playerid, tipo, modelid, precio, propiedad)
{
	if (propiedad == -1) return SendClientMessage(playerid, 0xccccccff, "* Ocurrio un error con la compra de muebles (1) Habre ticket en el dc principal de North America Oficial.");
	new OBJ_INDEX, nameP[10], limite = InfoJugador[playerid][jMaxMuebles], VW = -1, name_mueble[128];
	if (tipo == 1)
	{
		alm(nameP, "casa");
		BuscarModeIndexIntC(modelid, OBJ_INDEX);
		alm(name_mueble, ObjetosInteriorC[OBJ_INDEX][2]);
		VW = InfoCasa[propiedad][cSalidaVW];
	}
	else if (tipo == 2)
	{
		alm(nameP, "negocio");
		BuscarModeIndexIntN(modelid, OBJ_INDEX);
		alm(name_mueble, ObjetosInteriorN[OBJ_INDEX][2]);
		VW = InfoNegocio[propiedad][nSalidaVW];
	}
	if (limite == CountMuebles(playerid))
	{
		SendClientMessageEx(playerid, 0xccccccff, "* No puedes tener mas de %d muebles en tu %s.", limite, nameP);
		return 1;
	}
	if (VW == -1) return SendClientMessage(playerid, 0xccccccff, "* Error de compra, intentalo de nuevo.");
	SendClientMessageEx(playerid, 0xFFFFFFFF, "Nuevo mueble {008BFF}%s{FFFFFF} para tu {008BFF}%s{FFFFFF}.", name_mueble, nameP);
	MuebleActual[playerid] = 0;
	//opcion idsql ya creada.
	new query[1028];
	Loop(id, totalmuebles+10, 1) if (InfoMueble[id][mModelo] == 0)
	{
		InfoMueble[id][mTipo] = tipo;
		InfoMueble[id][mPropiedad] = propiedad;
		InfoMueble[id][mModelo] = modelid;
		InfoMueble[id][mInterior] = -1;
		InfoMueble[id][mVirtualWorld] = VW;
		InfoMueble[id][mPrecio] = precio;
		alm(InfoMueble[id][mNombre], name_mueble);
		//con id sql creado
		if (InfoMueble[id][mID_sql] != 0)
		{
			mysql_format(DBngrp, query, sizeof query, "UPDATE muebles SET Tipo = '%d', Propiedad = '%d', Modelo = '%d', Nombre = '%e', VirtualWorld = '%d', Precio = '%d' WHERE ID = '%d'", InfoMueble[id][mTipo], InfoMueble[id][mPropiedad], InfoMueble[id][mModelo], InfoMueble[id][mNombre], InfoMueble[id][mVirtualWorld], InfoMueble[id][mPrecio], InfoMueble[id][mID_sql]);
			mysql_tquery(DBngrp, query);
			id = totalmuebles+10;
			return 1;
		}
		//crear
		mysql_format(DBngrp, query, sizeof query, "INSERT INTO muebles (Tipo, Propiedad, Modelo, Nombre, VirtualWorld, Precio) VALUES ('%d', '%d', '%d', '%e', '%d', '%d')", InfoMueble[id][mTipo], InfoMueble[id][mPropiedad], InfoMueble[id][mModelo], InfoMueble[id][mNombre], InfoMueble[id][mVirtualWorld], InfoMueble[id][mPrecio]);
		mysql_tquery(DBngrp, query, "OnCreateMueble", "i", id);
		id = totalmuebles+10;
	}
	return 1;
}

forward OnCreateMueble(id);
public OnCreateMueble(id)
{
	totalmuebles++;
	InfoMueble[id][mID_sql] = cache_insert_id();
	cache_unset_active();
    return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    if (listid == MueblesCasa)
	{
		if (!response) return cmd_muebles(playerid);
		new OBJ_INDEX, gformat[256];
		BuscarModeIndexIntC(modelid, OBJ_INDEX);
		MuebleActual[playerid] = modelid;
		format(gformat, sizeof gformat, "{EBEBEB}Modelo {2CE59E}%d{EBEBEB} ({2CE59E}%s{EBEBEB})\nPara agregar este objeto a tu lista de muebles, clic '{FF0000}continuar{EBEBEB}'", modelid, ObjetosInteriorC[OBJ_INDEX][2]);
		Dialog_Show(playerid, Comprar2Muebles, DIALOG_STYLE_MSGBOX, "Nuevo mueble", gformat, "Continuar", "Volver");
		return 1;
	}
	else if (listid == MueblesNegocios)
	{
		if (!response) return cmd_muebles(playerid);
		new OBJ_INDEX, gformat[256];
		BuscarModeIndexIntN(modelid, OBJ_INDEX);
		MuebleActual[playerid] = modelid;
		format(gformat, sizeof gformat, "{EBEBEB}Modelo {2CE59E}%d{EBEBEB} ({2CE59E}%s{EBEBEB})\nPara agregar este objeto a tu lista de muebles, clic '{FF0000}continuar{EBEBEB}'", modelid, ObjetosInteriorN[OBJ_INDEX][2]);
		Dialog_Show(playerid, Comprar3Muebles, DIALOG_STYLE_MSGBOX, "Nuevo mueble", gformat, "Continuar", "Volver");
		return 1;
 }
	else if (listid == SkinsMujer || listid == SkinsHombre)
	{
		if (!response) return 1;
		SendClientMessageEx(playerid, 0x00CCCCFF, "Adquiriste la ropa %d, puedes cambiarte de ropa en tu casa.", modelid);
		InfoJugador[playerid][jSkin] = modelid;
		ElegirRopa(playerid, modelid);
		return 1;
	}
	else if (listid == AccesoriosVIP)
	{
		if (!response) return 1;
		new ranura = RanuraSeleccionada[playerid];
		InfoJugador[playerid][aModelo][ranura] = modelid;
		InfoJugador[playerid][aHueso][ranura] = 1;
		InfoJugador[playerid][aPosicionX][ranura] = 0.0;
		InfoJugador[playerid][aPosicionY][ranura] = 0.0;
		InfoJugador[playerid][aPosicionZ][ranura] = 0.0;
		InfoJugador[playerid][aRotacionX][ranura] = 0.0;
		InfoJugador[playerid][aRotacionY][ranura] = 0.0;
		InfoJugador[playerid][aRotacionZ][ranura] = 0.0;
		InfoJugador[playerid][aEscalaX][ranura] = 1;
		InfoJugador[playerid][aEscalaY][ranura] = 1;
		InfoJugador[playerid][aEscalaZ][ranura] = 1;
		ActualizarToy(playerid, ranura);
		SendClientMessageEx(playerid, 0xA7CE00FF, "Adquiriste un accesorio gratis. (slot %d) Comandos: /accesorios", ranura);
	}
	return 1;
}

Dialog:Buy_Confirmed_Vehicle(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_catalogo(playerid);
	new carsamount = VehicleCount(playerid);
	if (InfoJugador[playerid][jNivelVIP] == 0 && carsamount >= 3) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo puedes tener 3 vehiculos.");
	if (InfoJugador[playerid][jNivelVIP] == 1 && carsamount >= 4) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo puedes tener 4 vehiculos.");
	if (InfoJugador[playerid][jNivelVIP] == 2 && carsamount >= 5) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo puedes tener 5 vehiculos.");
	new id = compra_Veh[playerid], Float: xv, Float: yv, Float: zv, Float: av;
	if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "Error de compra de vehiculo, si el mismo continua, Habre ticket en el dc de North America Oficial.");
	new precio = InfoConcesionario[id][csPrecio], modelo = InfoConcesionario[id][csModelo], moneda = InfoConcesionario[id][csMoneda], lugar = InfoConcesionario[id][csTipo], isprecio[64];
	if (moneda == 0)
	{
		if (InfoJugador[playerid][jNivelVIP] == 1) precio = (precio*90)/(100);
		else if (InfoJugador[playerid][jNivelVIP] == 2) precio = (precio*75)/(100);
		else if (InfoJugador[playerid][jNivelVIP] == 3) precio = (precio*58)/(100);
		format(isprecio, sizeof isprecio, "$%s", diner_coma(precio));
		if (GetPlayerCash(playerid) < precio)
		{
		    SendClientMessageEx(playerid, 0xBB0000FF, "* No tienes %s para comprar el vehiculo %s.", isprecio, GetNameVehicle(modelo));
			return 1;
		}
		GivePlayerCash(playerid, -precio, "vehiculo nuevo");
		DineroEstado += precio;
	}
	else
	{
		format(isprecio, sizeof isprecio, "%d coins", precio);
		if (InfoJugador[playerid][jCoins] < precio)
		{
		    SendClientMessageEx(playerid, 0xBB0000FF, "* No tienes %s para comprar el vehiculo %s.", isprecio, GetNameVehicle(modelo));
			return 1;
		}
	    InfoJugador[playerid][jCoins] -= precio;
		guardar_int_mysql("cuentas", "Coins", InfoJugador[playerid][jID], InfoJugador[playerid][jCoins]);
		new playerip[18];
		GetPlayerIp(playerid, playerip, sizeof playerip);
		new query[1028];
		mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_menuvip` (`IP`, `Nombre_Apellido`, `Fecha`, `Dato`) VALUES ('%e', '%e', '%e', '%e - %dCoins')", playerip, InfoJugador[playerid][jNombre_Apellido], FechaHoy(), GetNameVehicle(modelo), precio);
		mysql_tquery(DBngrp, query);
	}
	switch (lugar)
	{
		case 1: { xv=1999.2615; yv=-2096.8396; zv=13.2972; av=180.0000; }
		case 2: { xv=2121.6123; yv=-1127.4148; zv=25.0506; av=-34.8000; }
		case 3: { xv=554.6847; yv=-1283.4102; zv=16.8277; av=0.0000; }
		case 4: { xv=2905.0713; yv=-1129.6624; zv=10.8713; av=180.0000; }
		case 5: { xv=1885.031616; yv=-2445.458251; zv=13.808096; av=-221.160003; }
		case 6: { xv=2498.2854; yv=-1948.6980; zv=13.1011; av=90.0000; }
	}
	CreateVehiclePlayer(playerid, modelo, xv, yv, zv, av, 0, 0, 1, 1, InfoConcesionario[id][csPrecio], -1, moneda);
	SendClientMessageEx(playerid, 0xCCCC00FF, "?Felicitaciones! Compraste %s nuevo por %s.", GetNameVehicle(modelo), isprecio);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Recuerda /estacionar el vehiculo en un lugar seguro, para mas informacion en /ayuda.");
	compra_Veh[playerid] = -1;
	return 1;
}
public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if (!response) return 1;
	if (extraid == Buy_Vehicle_Show)
	{
		new id = -1;
		Loop(x, sizeof InfoConcesionario, 0) if (InfoConcesionario[x][csModelo] == modelid)
		{
			id = x;
			break;
		}
		if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "Error de compra de vehiculo, si el mismo continua, Habre ticket en el dc de North America Oficial.");
		new precio = InfoConcesionario[id][csPrecio], modelo = InfoConcesionario[id][csModelo], moneda = InfoConcesionario[id][csMoneda], isprecio[64];
		if (moneda == 0) format(isprecio, sizeof isprecio, "$%s", diner_coma(precio));
		else format(isprecio, sizeof isprecio, "%d coins", precio);
		compra_Veh[playerid] = id;
		new gformat[512];
		format(gformat, sizeof gformat, "{CCCCCC}Modelo: %d {008BFF}%s\n{CCCCCC}Precio: {00CC00}%s\n\n{CCCCCC}?Estas seguro de comprar este vehiculo?\n", modelo, GetNameVehicle(modelo), isprecio);
		Dialog_Show(playerid, Buy_Confirmed_Vehicle, DIALOG_STYLE_MSGBOX, "{D6E1EB}Adquirir vehiculo", gformat, "Comprar", "Volver");
		return 1;
	}
	new string[128];
	if(extraid == D_OBJETOSADMIN)
	{
		if(response)
		{
		    new objeto = -1;
		    for(new a = 0; a < MAX_POBJETOS;a++)
		    {
				if(cObjeto[a][pOID] == 0)
				{
					objeto = a;
					break;
				}
		    }
		    if(objeto == -1) return _Mensaje(playerid, 4, "b00000", "Se alcanzo el limite de objetos admin.");
			GetPlayerPos(playerid, cObjeto[objeto][pPosX], cObjeto[objeto][pPosY], cObjeto[objeto][pPosZ]);
			cObjeto[objeto][pOID] = modelid;
			cObjeto[objeto][pObjeto]  = CreateDynamicObject(modelid, cObjeto[objeto][pPosX]-2.0, cObjeto[objeto][pPosY]-1.0, cObjeto[objeto][pPosZ], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, MAX_RADIO_STREAM_MIN);
			cObjeto[objeto][pInt] = GetPlayerInterior(playerid);
			cObjeto[objeto][pVw] = GetPlayerVirtualWorld(playerid);
			EditDynamicObject(playerid, cObjeto[objeto][pObjeto]);
			SetPVarInt(playerid, "OBJ_ADM", 1);
		}
	}
	else if(extraid == D_UNIFORMESSAN || extraid == D_UNIFORMESALC || extraid == D_UNIFORMESES)
	{
		if(response)
		{
			SetPlayerSkin(playerid, modelid);
			_Mensaje(playerid, 4, "A7CE00", "Te has colocado un uniforme.");
		} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Has salido del catalogo de uniformes.");
	}
	else if(extraid == D_UNIFORMESPD)
	{
		if(response)
		{
			Dar_Skin(playerid, modelid);
			_Mensaje(playerid, 4, "A7CE00", "Te has colocado un uniforme.");
		} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Has salido del catalogo de uniformes.");
	}
	else if (extraid == D_OBJETOS_TRAFICO)
	{
		if (!response) return 1;
		new id = -1;
		Loop(bar, MAX_BARRERAS, 0) if (InfoBar[bar][bPosX] == 0.0)
		{
			id = bar;
			break;
		}
		if (id == -1) return SendClientMessageEx(playerid, 0xccccccff, "Se alcanzo el maximo de barreras. (%d)", MAX_BARRERAS);
		GetPlayerPos(playerid, InfoBar[id][bPosX], InfoBar[id][bPosY], InfoBar[id][bPosZ]);
		InfoBar[id][bModelo] = modelid;
		InfoBar[id][bObjeto] = CreateDynamicObject(InfoBar[id][bModelo], InfoBar[id][bPosX]-2.0, InfoBar[id][bPosY]-1.0, InfoBar[id][bPosZ], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, MAX_RADIO_STREAM_MIN);
		EditDynamicObject(playerid, InfoBar[id][bObjeto]);
		SetPVarInt(playerid, "TT_BAR", id);
		return 1;
	}
	else if (extraid == D_Peluqueria3)
	{
		if (!response) return 1;
		if (GetPlayerCash(playerid) < 25) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes suficiente dinero.");
		new ranura = RanuraSeleccionada[playerid], id = EnNegocio(playerid);
		if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
		GivePlayerCash(playerid, -25, "toy peluqueria");
		RestarNegocio(id, 25);
		InfoJugador[playerid][aModelo][ranura] = modelid;
		InfoJugador[playerid][aHueso][ranura] = 2;
		InfoJugador[playerid][aPosicionX][ranura] = 0.0;
		InfoJugador[playerid][aPosicionY][ranura] = 0.0;
		InfoJugador[playerid][aPosicionZ][ranura] = 0.0;
		InfoJugador[playerid][aRotacionX][ranura] = 0.0;
		InfoJugador[playerid][aRotacionY][ranura] = 0.0;
		InfoJugador[playerid][aRotacionZ][ranura] = 0.0;
		InfoJugador[playerid][aEscalaX][ranura] = 1;
		InfoJugador[playerid][aEscalaY][ranura] = 1;
		InfoJugador[playerid][aEscalaZ][ranura] = 1;
		ActualizarToy(playerid, ranura);
		format(string, sizeof string, "Compraste un accesorio por $25 [Ranura: %d]", ranura);
		_Mensaje(playerid, 4, "A7CE00", string);
		_Mensaje(playerid, 4, "FFFFFF", " Escribe /accesorios para editarlos.");
	}
    return 1;
}

forward CuadroRemove(playerid);
public CuadroRemove(playerid)
{
    PlayerTextDrawHide(playerid, CuadroAyuda[playerid]);
    return 1;
}

stock BuscarModeIndexIntC(model, &dest) {
	Loop(i, sizeof ObjetosInteriorC, 0) {
		if(model == ObjetosInteriorC[i][0]) dest = i;
	}
	return 0;
}

stock BuscarModeIndexIntN(model, &dest) {
	Loop(i, sizeof ObjetosInteriorN, 0) {
		if(model == ObjetosInteriorN[i][0]) dest = i;
	}
	return 0;
}

//concesionarias
funcion bV_usado(veh)
{
	i_Usado[veh][uModeloVeh] = 0;
	i_Usado[veh][uPrecioVeh] = 0;
	i_Usado[veh][uSeguro] = 0;
	i_Usado[veh][uColor_1] = 0;
	i_Usado[veh][uColor_2] = 0;
	i_Usado[veh][uDanioSuperficie] = 0;
	i_Usado[veh][uDanioPuertas] = 0;
	i_Usado[veh][uDanioLuces] = 0;
	i_Usado[veh][uDanioRuedas] = 0;
	i_Usado[veh][uVida] = 0;
	i_Usado[veh][uModificaciones][0] = 0;
	i_Usado[veh][uModificaciones][1] = 0;
	i_Usado[veh][uModificaciones][2] = 0;
	i_Usado[veh][uModificaciones][3] = 0;
	i_Usado[veh][uModificaciones][4] = 0;
	i_Usado[veh][uModificaciones][5] = 0;
	i_Usado[veh][uModificaciones][6] = 0;
	i_Usado[veh][uModificaciones][7] = 0;
	i_Usado[veh][uModificaciones][8] = 0;
	i_Usado[veh][uModificaciones][9] = 0;
	i_Usado[veh][uModificaciones][10] = 0;
	i_Usado[veh][uModificaciones][11] = 0;
	i_Usado[veh][uModificaciones][12] = 0;
	i_Usado[veh][uModificaciones][13] = 0;
	i_Usado[veh][uModificaciones][14] = 0;
	i_Usado[veh][uGasolina] = 0;
	i_Usado[veh][uStereo] = 0;
	i_Usado[veh][uNeon] = 0;
}

stock GetPlayer2DZone(playerid, zone[], len) {
    new Float: x, Float: y, Float: z;
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0; i != sizeof(NombreZona); i++) {
        if(x >= NombreZona[i][sz_Area][0] && x <= NombreZona[i][sz_Area][3] && y >= NombreZona[i][sz_Area][1] && y <= NombreZona[i][sz_Area][4]) {
            return format(zone, len, NombreZona[i][sz_Nombre], 0);
        }
    }
    return 0;
}

stock GetPlayer3DZone(playerid, zone[], len) {
    new Float: x, Float: y, Float: z;
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0; i != sizeof(NombreZona); i++) {
        if(x >= NombreZona[i][sz_Area][0] && x <= NombreZona[i][sz_Area][3] && y >= NombreZona[i][sz_Area][1] && y <= NombreZona[i][sz_Area][4] && z >= NombreZona[i][sz_Area][2] && z <= NombreZona[i][sz_Area][5]) {
            return format(zone, len, NombreZona[i][sz_Nombre], 0);
        }
    }
    return 0;
}

stock IsPlayerInZone(playerid, zone[]) {
    new TmpZone[MAX_ZONE_NAME];
    GetPlayer3DZone(playerid, TmpZone, sizeof(TmpZone));
    for(new i = 0; i != sizeof(NombreZona); i++) {
        if(strfind(TmpZone, zone, true) != -1) return 1;
    }
    return 0;
}

stock GetCar3DZone(vehicleid, zone[], len) {
    new Float: x, Float: y, Float: z;
    GetVehiclePos(vehicleid, x, y, z);
    for(new i = 0; i != sizeof(NombreZona); i++) {
        if(x >= NombreZona[i][sz_Area][0] && x <= NombreZona[i][sz_Area][3] && y >= NombreZona[i][sz_Area][1] && y <= NombreZona[i][sz_Area][4] && z >= NombreZona[i][sz_Area][2] && z <= NombreZona[i][sz_Area][5]) {
            return format(zone, len, NombreZona[i][sz_Nombre], 0);
        }
    }
    return 0;
}

stock _MapIcon(Float: x, Float: y, Float: z, tipo, distancia = 300) {
    CreateDynamicMapIcon(x, y, z, tipo, 0, 0, 0, -1, distancia);
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    new string[256];
    Loop(id, totalnegocios, 1) if (InfoNegocio[id][nTipo] != 0)
	{
	 	if (pickupid == InfoNegocio[id][nEntradaPickup])
	 	{

            if (InfoNegocio[id][nVenta] == 0) format(string, sizeof string, "~n~~n~~w~%s (ID: %d)~n~~g~En venta~n~~w~Precio: ~g~%d~n~~p~", TypeBusiness(id), id, InfoNegocio[id][nPrecio]);
            GameTextForPlayer(playerid,"~r~Pulsa 'H' para entrar", 2000, 3);
	    }
	}

	Loop(id, totalpuertas, 1) if (InfoPuerta[id][pEntradaX] != 0)
	{
		if (pickupid == InfoPuerta[id][pEntradaPickup] || pickupid == InfoPuerta[id][pSalidaPickup])
		{
			if (!CheckTimer(10, TimerPuertas[playerid]))
			{
                cmd_entrar(playerid);
				cmd_salir(playerid);
				TimerPuertas[playerid] = gettime();
			}
		}
	}
	if(_Minando[playerid] == 0 && EnModoTrabajo[playerid] == 12 && _Piedras[playerid] == 0)
	{
		if(pickupid == pickupspf[1] || pickupid == pickupspf[2] || pickupid == pickupspf[3] || pickupid == pickupspf[4])
		{
			_Minando[playerid] = 1;
        	SetTimerEx("Minan2", 4000, 0, "%d", playerid);
			SetPlayerAttachedObject(playerid, 9, 18634, 5, 0.136999, 0.022000, 0.006999, 0.000000, 0.000000, 0.000000, 0.9, 0.0, 0.9);
        	GameTextForPlayer(playerid, "~g~Minando...", 5000, 3);
			TogglePlayerControllable(playerid,0);
			ApplyAnimation(playerid, "CHAINSAW", "CSAW_1", 4.0, 1, 0, 0, 0, 0, 1);
		}
	}
	if(EnModoTrabajo[playerid] == 12 && pickupid == pickupspf[0])
	{
		if(_Minando[playerid] == 1)
		{
			new text_[128];
			format(text_, sizeof(text_), "{FF6347}Administracion: %s fue expulsado. Razon:[Cheat de /minar]", NombreRJugador(playerid));
			MensajeAdmin(text_);
			_Expulsar(playerid, 0, "Cheat de /minar");
		}
		else
		{
			if(_Piedras[playerid] > 0)
			{
				InfoJugador[playerid][jPiedras] += _Piedras[playerid];
				guardar_int_mysql("cuentas", "Piedras", InfoJugador[playerid][jID], InfoJugador[playerid][jPiedras]);
				_Piedras[playerid] = 0;
				if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
				ApplyAnimation(playerid, "PED", "IDLE_tired", 4.1, 1, 0, 0, 0, 1500, 1);
            }
        }
    }
    if(pickupid == pickupspf[5])
	{
	    if (InfoJugador[playerid][jVida] != 100.0) {
		    if (InfoJugador[playerid][jTiempos][1] > 0) {
				new text_[128];
				format(text_, sizeof(text_), " Debes esperar %d minutos para curarte de nuevo.", InfoJugador[playerid][jTiempos][1]);
				_Mensaje(playerid, 4, "FFFFFF", text_);
				return 1;
			}
			_Limuerte(playerid);
			InfoJugador[playerid][jTiempos][1] += 30;
			guardar_int_mysql("cuentas", "Tiempos2", InfoJugador[playerid][jID], InfoJugador[playerid][jTiempos][1]);
			Dar_Vida(playerid, 100);
	    }
	}
    if(pickupid == pickupspf[6])
	{
		if(InfoJugador[playerid][jHambre] >= MAX_HAMBRE && InfoJugador[playerid][jSed] >= MAX_SED){_Mensaje(playerid, 4, "FFFFFF", " No tienes hambre ni tampoco sed."); return 1;}
		if(InfoJugador[playerid][jHambre] < MAX_HAMBRE)InfoJugador[playerid][jHambre] = MAX_HAMBRE, ActualizarHambre(playerid);
		if(InfoJugador[playerid][jSed] < MAX_SED)InfoJugador[playerid][jSed] = MAX_SED, ActualizarSed(playerid);
		AccionesRol(playerid, 0, "toma una bandeja del comedor, directamente come de lo que se encuentra en ella.");
		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 1, 1, 0, 0, 1);
	}
    return 1;
}

funcion Minan2(playerid)
{
	new a = random(5);
	if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	_Minando[playerid] = 0;
	_Piedras[playerid] += a+1;
	TogglePlayerControllable(playerid,1);
	ClearAnimations(playerid);
	SetPlayerAttachedObject(playerid, 9, 905, 5, 0.136999, 0.022000, 0.006999, 0.000000, 0.000000, 0.000000, 0.236000, 0.091000, 0.275000);
	GameTextForPlayer(playerid, "Lleva la piedra", 3000, 5);
	return 1;
}

TypeBusiness(id)
{
    new string[32];
	switch (InfoNegocio[id][nTipo])
	{
		case 1: alm(string, "24-7");
		case 2: alm(string, "Ropa");
		case 3: alm(string, "Restaurante");
		case 4: alm(string, "Cluckin bell");
		case 5: alm(string, "Pizzeria");
		case 6: alm(string, "Burger Shot");
		case 7: alm(string, "Ammu-Nation");
		case 8: alm(string, "Peluqueria");
		case 9: alm(string, "Sex Shop");
		case 10: alm(string, "Gasolinera");
		case 11: alm(string, "Electronica");
		case 12: alm(string, "Bar");
		case 13: alm(string, "Ferreteria");
		case 14: alm(string, "Alhambra");
		case 15: alm(string, "Strip club");
		case 16: alm(string, "Club private");
		case 17: alm(string, "Casino");
		default: alm(string, "Desconocido");
	}
	return string;
}

StatusBusiness(id, tipo)
{
	new string[50];
	if (tipo == 1)
	{
			if (!InfoNegocio[id][nSeguro]) format(string, sizeof string, "~r~Cerrado");
			else if (InfoNegocio[id][nSeguro]) format(string, sizeof string, "~b~Abierto");
	}
	else if (tipo == 2)
	{
		if (!InfoNegocio[id][nSeguro]) format(string, sizeof string, "{FF0000}Cerrada");
		else if (InfoNegocio[id][nSeguro]) format(string, sizeof string, "{00C200}Abierta");
	}
	return string;
}

//mensajes
new C_MESSAGES[6] = {
    0xff7800FF, // 0 - Error
    0xFFD97FFF, // 1 - Ayuda
    0xea2c2cFF, // 2 - Informacion
    0xFF7C7CFF, // 3 - Comando
    -1, // 4 - Eleccion.
    0x1EB032FF // 5 - Verde.
};

funcion _Mensaje(playerid, type, optional[], message[]) {
    new InfoMsg[150];
    switch (type) {
        case 0 :format(InfoMsg, sizeof(InfoMsg), "* {E0ECED}%s", message); // Error
        case 1: format(InfoMsg, sizeof(InfoMsg), "%s %s", message, optional); // Ayuda
        case 2: format(InfoMsg, sizeof(InfoMsg), "?{FFFFFF} %s", message); // Informacion
        case 3: format(InfoMsg, sizeof(InfoMsg), "USO:{FFFFFF} %s", message); // CMD
        case 4: format(InfoMsg, sizeof(InfoMsg), "{cccccc}Info: {FFFFFF}%s", message); // Con color mensaje
        case 5: format(InfoMsg, sizeof(InfoMsg), "%s", message); // Color verde
    }
    SendClientMessage(playerid, C_MESSAGES[type], InfoMsg);
    return 1;
}

funcion AccionesRol(playerid, type, text[]) {
    new MensajeAR[150];
    switch (type) {
        case 0: {
			format(MensajeAR, sizeof(MensajeAR), "%s %s", NombreJugador(playerid), text);
 			SetPlayerChatBubble(playerid, MensajeAR, AccionesColors[type], 15.0, 5000);
 			format(MensajeAR, sizeof(MensajeAR), "%s %s", NombreJugador(playerid), text);
        } // 0 - /me (Acciones largas)
        case 1: {
			format(MensajeAR, sizeof(MensajeAR), "%s %s", NombreJugador(playerid), text);
			SetPlayerChatBubble(playerid, MensajeAR, AccionesColors[1], 15.0, 5000);
			format(MensajeAR, sizeof(MensajeAR), "> %s", text);
			SendClientMessage(playerid, AccionesColors[1], MensajeAR);
		} // 1 - /ame (Acciones cortas)
        case 2: format(MensajeAR, sizeof(MensajeAR), "((%d | %s)) %s", playerid, NombreJugador(playerid), text); // 2 - /do (Entorno o Aclaracion)
	    case 3: format(MensajeAR, sizeof(MensajeAR), "%s grita: ¡¡%s!!", NombreJugador(playerid), text); // 3 - Gritar
        case 4: format(MensajeAR, sizeof(MensajeAR), "%s susurra: %s", NombreJugador(playerid), text); // 4 - Susurrar
        case 5: format(MensajeAR, sizeof(MensajeAR), "[Megafono: [ID]:%d] %s o< %s]", playerid, NombreJugador(playerid), text); // 5 - Megafono
    }
    new Float: PosMensajeX, Float: PosMensajeY, Float: PosMensajeZ, MyWorrld = GetPlayerVirtualWorld(playerid);
    GetPlayerPos(playerid, Float: PosMensajeX, Float: PosMensajeY, Float: PosMensajeZ);
    for (new i = 0; i < MAX_PLAYERS; i++) {
        if (IsPlayerConnected(i) && _enPos(i,AccionesRadios[type],Float: PosMensajeX,Float: PosMensajeY, Float: PosMensajeZ) && GetPlayerVirtualWorld(i) == MyWorrld && state_on[i] == 3) {
            if (type == 0) SendSplitMessage(i, AccionesColors[type], MensajeAR);
			else if (type == 1) return 1;
			else SendSplitMessage(i, AccionesColors[type], MensajeAR);
        }
    }
    return 1;
}

stock PrecioObjetosNegocio(modelid) {
    switch (modelid) {
        case 2822,2820: return 20;
        case 2515,1715,1716,1720,1721,1714,1811: return 400;
        case 2518,1737,2119,2116,2115,2111,1739,1810: return 450;
        case 2516,2002,2160,2334,2335,2112,2079,2121: return 950;
        case 2514,2015,2157,2159,2029,1825: return 1000;
        case 2517,2014,2018,2156,2120: return 1200;
        case 2336,2337,2013,2019: return 2000;
        case 2519, 2520,2523,2524,2136: return 3000;
        case 2521,2525,2528,2529,2135,2339,14720: return 4000;
        case 2522,1208,2340,2415: return 5000;
        default: {
                new priceex = random(500);
                priceex += 4000;
                return priceex;
            }
    }
    return 1;
}

stock Get2DZone(zone[], len, Float: x, Float: y, Float: z) {
    #pragma unused z
    for (new i = 0; i != sizeof(NombreZona); i++) {
        if (x >= NombreZona[i][sz_Area][0] && x <= NombreZona[i][sz_Area][3] && y >= NombreZona[i][sz_Area][1] && y <= NombreZona[i][sz_Area][4]) {
            return format(zone, len, NombreZona[i][sz_Nombre]);
        }
    }
    return format(zone, len, "San Andreas");
}

stock GetXYInFrontOfPlayer(playerid, & Float: x, & Float: y, Float: distance) {
    new Float: a;
    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);
    if (GetPlayerVehicleID(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	return 1;
}

GuardarObjetosAdmin()
{
    new szFileStr[1024],
    File: fHandle = fopen("ObjetosAdmin.rp", io_write);
    for (new objeto; objeto < MAX_POBJETOS; objeto++)
	{
        format(szFileStr, sizeof(szFileStr), "%d|%d|%d|%f|%f|%f|%f|%f|%f|\r\n",
        cObjeto[objeto][pOID],
        cObjeto[objeto][pVw],
        cObjeto[objeto][pInt],
        cObjeto[objeto][pPosX],
        cObjeto[objeto][pPosY],
        cObjeto[objeto][pPosZ],
        cObjeto[objeto][pPosRX],
        cObjeto[objeto][pPosRY],
        cObjeto[objeto][pPosRZ]);
        fwrite(fHandle, szFileStr);
    }
    return fclose(fHandle);
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float: x, Float: y, Float: z, Float: rx, Float: ry, Float: rz)
{
	new query[1028];
	// cmd_creargraffiti
	if (InfoJugador[playerid][pEditingMode] == 13)
	{
		new id = edicion_sql_actual[playerid];
		if (id == -1) return SendClientMessage(playerid, -1, "Error edicion.");
		if (objectid == InfoGraffiti[id][gr_Objeto])
		{
			if (response == EDIT_RESPONSE_FINAL)
			{
				InfoGraffiti[id][gr_PosX] = x;
				InfoGraffiti[id][gr_PosY] = y;
				InfoGraffiti[id][gr_PosZ] = z;
				InfoGraffiti[id][gr_RotX] = rx;
				InfoGraffiti[id][gr_RotY] = ry;
				InfoGraffiti[id][gr_RotZ] = rz;
				SetDynamicObjectPos(InfoGraffiti[id][gr_Objeto], x, y, z);
				SetDynamicObjectRot(InfoGraffiti[id][gr_Objeto], rx, ry, rz);
				SendClientMessageEx(playerid, -1, "Posicion de graffiti actualizada correctamente.", id);
				InfoJugador[playerid][pEditingMode] = 0;
				edicion_sql_actual[playerid] = -1;
				//opcion idsql ya creada.
				if (InfoGraffiti[id][grID_sql] != 0)
				{
					mysql_format(DBngrp, query, sizeof query, "UPDATE graffitis SET PotX = '%f', PotY = '%f', PotZ = '%f', RotX = '%f', RotY = '%f', RotZ = '%f', Interior = '%d', VirtualWorld = '%d' WHERE ID = '%d'",
					InfoGraffiti[id][gr_PosX],
					InfoGraffiti[id][gr_PosY],
					InfoGraffiti[id][gr_PosZ],
					InfoGraffiti[id][gr_RotX],
					InfoGraffiti[id][gr_RotY],
					InfoGraffiti[id][gr_RotZ],
					InfoGraffiti[id][gr_Interior],
					InfoGraffiti[id][gr_VirtualWorld],
					InfoGraffiti[id][grID_sql]);
					mysql_tquery(DBngrp, query);
					return 1;
				}
				mysql_format(DBngrp, query, sizeof query, "INSERT INTO graffitis (PotX, PotY, PotZ, RotX, RotY, RotZ, Interior, VirtualWorld) VALUES ('%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d')",
				InfoGraffiti[id][gr_PosX],
				InfoGraffiti[id][gr_PosY],
				InfoGraffiti[id][gr_PosZ],
				InfoGraffiti[id][gr_RotX],
				InfoGraffiti[id][gr_RotY],
				InfoGraffiti[id][gr_RotZ],
				InfoGraffiti[id][gr_Interior],
				InfoGraffiti[id][gr_VirtualWorld]);
				mysql_tquery(DBngrp, query, "OnGraffitiCreate", "i", id);
			}
			else if (response == EDIT_RESPONSE_CANCEL)
			{
				InfoGraffiti[id][gr_PosX] = 0.0;
				InfoGraffiti[id][gr_PosY] = 0.0;
				InfoGraffiti[id][gr_PosZ] = 0.0;
				InfoGraffiti[id][gr_RotX] = 0.0;
				InfoGraffiti[id][gr_RotY] = 0.0;
				InfoGraffiti[id][gr_RotZ] = 0.0;
				InfoGraffiti[id][gr_Interior] = 0;
				InfoGraffiti[id][gr_VirtualWorld] = 0;
				InfoGraffiti[id][gr_Fecha] = 0;
				if (InfoGraffiti[id][gr_Objeto] != INVALID_STREAMER_ID)
				{
					DestroyDynamicObject(InfoGraffiti[id][gr_Objeto]);
					InfoGraffiti[id][gr_Objeto] = INVALID_STREAMER_ID;
				}
				SendClientMessage(playerid, -1, "Cancelaste la edicion de graffiti.");
				InfoJugador[playerid][pEditingMode] = 0;
				edicion_sql_actual[playerid] = -1;
			}
		}
	}
	// cmd_muebles
	if (InfoJugador[playerid][pEditingMode] == 55)
	{
		new id = edicion_sql_actual[playerid];
		if (id == -1) return SendClientMessage(playerid, -1, "Error edicion de mueble, Habre ticket en el dc de North America Oficial.");
		if (objectid == InfoMueble[id][mObjeto])
		{
			if (response == EDIT_RESPONSE_FINAL)
			{
				InfoMueble[id][mPotX] = x;
				InfoMueble[id][mPotY] = y;
				InfoMueble[id][mPotZ] = z;
				InfoMueble[id][mRotX] = rx;
				InfoMueble[id][mRotY] = ry;
				InfoMueble[id][mRotZ] = rz;
				SetDynamicObjectPos(objectid, InfoMueble[id][mPotX], InfoMueble[id][mPotY], InfoMueble[id][mPotZ]);
				SetDynamicObjectRot(objectid, InfoMueble[id][mRotX], InfoMueble[id][mRotY], InfoMueble[id][mRotZ]);
				mysql_format(DBngrp, query, sizeof query, "UPDATE muebles SET PotX = '%f', PotY = '%f', PotZ = '%f', RotX = '%f', RotY = '%f', RotZ = '%f', Interior = '%d', VirtualWorld = '%d' WHERE ID = '%d'",
				InfoMueble[id][mPotX], InfoMueble[id][mPotY], InfoMueble[id][mPotZ], InfoMueble[id][mRotX], InfoMueble[id][mRotY], InfoMueble[id][mRotZ], InfoMueble[id][mInterior], InfoMueble[id][mVirtualWorld], InfoMueble[id][mID_sql]);
				mysql_tquery(DBngrp, query);
				InfoJugador[playerid][pEditingMode] = 0;
				edicion_sql_actual[playerid] = -1;
				is_mueble_actual[playerid] = 0;
			}
			else if (response == EDIT_RESPONSE_CANCEL)
			{
				SetDynamicObjectPos(objectid, InfoMueble[id][mPotX], InfoMueble[id][mPotY], InfoMueble[id][mPotZ]);
				SetDynamicObjectRot(objectid, InfoMueble[id][mRotX], InfoMueble[id][mRotY], InfoMueble[id][mRotZ]);
				mysql_format(DBngrp, query, sizeof query, "UPDATE muebles SET PotX = '%f', PotY = '%f', PotZ = '%f', RotX = '%f', RotY = '%f', RotZ = '%f', Interior = '%d', VirtualWorld = '%d' WHERE ID = '%d'",
				InfoMueble[id][mPotX], InfoMueble[id][mPotY], InfoMueble[id][mPotZ], InfoMueble[id][mRotX], InfoMueble[id][mRotY], InfoMueble[id][mRotZ], InfoMueble[id][mInterior], InfoMueble[id][mVirtualWorld], InfoMueble[id][mID_sql]);
				mysql_tquery(DBngrp, query);
				InfoJugador[playerid][pEditingMode] = 0;
				edicion_sql_actual[playerid] = -1;
				is_mueble_actual[playerid] = 0;
			}
		}
	}
	// cmd_crearcajero
	if (InfoJugador[playerid][pEditingMode] == 74)
	{
		new id = edicion_sql_actual[playerid];
		if (id == -1) return SendClientMessage(playerid, -1, "Error edicion de cajero, Habre ticket en el dc de North America Oficial.");
		if (objectid == InfoCajero[id][atmObject])
		{
			if (response == EDIT_RESPONSE_CANCEL)
			{
				if (InfoJugador[playerid][pEditingMode] != 0)
				{
					InfoJugador[playerid][pEditingMode] = 0;
					SetDynamicObjectPos(InfoCajero[id][atmObject], InfoCajero[id][atmPosX], InfoCajero[id][atmPosY], InfoCajero[id][atmPosZ]);
					SetDynamicObjectRot(InfoCajero[id][atmObject], InfoCajero[id][atmRotX], InfoCajero[id][atmRotY], InfoCajero[id][atmRotZ]);
					Articulos_Cajero(id);
					edicion_sql_actual[playerid] = -1;
					return 1;
				}
			}
			else if (response == EDIT_RESPONSE_FINAL)
			{
				InfoJugador[playerid][pEditingMode] = 0;
				InfoCajero[id][atmPosX] = x;
				InfoCajero[id][atmPosY] = y;
				InfoCajero[id][atmPosZ] = z;
				InfoCajero[id][atmRotX] = rx;
				InfoCajero[id][atmRotY] = ry;
				InfoCajero[id][atmRotZ] = rz;
				SetDynamicObjectPos(InfoCajero[id][atmObject], x, y, z);
				SetDynamicObjectRot(InfoCajero[id][atmObject], rx, ry, rz);
				SendClientMessageEx(playerid, 0xCCCC00FF, "** ATM %d terminado con exito.", id);
				Articulos_Cajero(id);
				mysql_format(DBngrp, query, sizeof query, "UPDATE cajeros SET Pos_X = '%f', Pos_Y = '%f', Pos_Z = '%f', Rot_X = '%f', Rot_Y = '%f', Rot_Z = '%f' WHERE ID = '%d'",
				InfoCajero[id][atmPosX],
				InfoCajero[id][atmPosY],
				InfoCajero[id][atmPosZ],
				InfoCajero[id][atmRotX],
				InfoCajero[id][atmRotY],
				InfoCajero[id][atmRotZ],
				InfoCajero[id][atmID]);
				mysql_tquery(DBngrp, query);
				edicion_sql_actual[playerid] = -1;
				return 1;
			}
		}
	}
	if(GetPVarInt(playerid,"OBJ_ADM"))
	{
		for (new objeto = 0; objeto < MAX_POBJETOS; objeto++)
		{
  			if (objectid == cObjeto[objeto][pObjeto])
  			{
         		if(response == EDIT_RESPONSE_FINAL)
	 			{
					cObjeto[objeto][pPosX] = x;
					cObjeto[objeto][pPosY] = y;
					cObjeto[objeto][pPosZ] = z;
					cObjeto[objeto][pPosRX] = rx;
					cObjeto[objeto][pPosRY] = ry;
					cObjeto[objeto][pPosRZ] = rz;
					SetDynamicObjectPos(cObjeto[objeto][pObjeto], x, y, z);
			    	SetDynamicObjectRot(cObjeto[objeto][pObjeto], rx, ry, rz);
		    		GuardarObjetosAdmin();
		    		DeletePVar(playerid, "OBJ_ADM");
		    		SendClientMessage(playerid, -1, "Creaste un objeto admin.");
	    		}
	    		else if (response == EDIT_RESPONSE_CANCEL)
				{
					cObjeto[objeto][pPosX] = x;
					cObjeto[objeto][pPosY] = y;
					cObjeto[objeto][pPosZ] = z;
					cObjeto[objeto][pPosRX] = rx;
					cObjeto[objeto][pPosRY] = ry;
					cObjeto[objeto][pPosRZ] = rz;
					SetDynamicObjectPos(cObjeto[objeto][pObjeto], x, y, z);
			    	SetDynamicObjectRot(cObjeto[objeto][pObjeto], rx, ry, rz);
		    		GuardarObjetosAdmin();
                    DeletePVar(playerid, "OBJ_ADM");
                    SendClientMessage(playerid, -1, "Creaste un objeto admin.");
				}
			}
		}
		return 1;
	}
	if(GetPVarInt(playerid,"Editando_F")) {
    	if(objectid == InfoFogata[playerid][fObjeto]) {
		    if(response == EDIT_RESPONSE_FINAL) {
           	    InfoFogata[playerid][fPosicionX] = x;
			    InfoFogata[playerid][fPosicionY] = y;
			    InfoFogata[playerid][fPosicionZ] = z;
			    InfoFogata[playerid][fPosicionRX] = rx;
			    InfoFogata[playerid][fPosicionRY] = ry;
			    InfoFogata[playerid][fPosicionRZ] = rz;
			    SetDynamicObjectPos(InfoFogata[playerid][fObjeto], x, y, z);
			    SetDynamicObjectRot(InfoFogata[playerid][fObjeto], rx, ry, rz);
		        if (InfoFogata[playerid][fObjeto2] != INVALID_STREAMER_ID)
				{
					DestroyDynamicObject(InfoFogata[playerid][fObjeto2]);
					InfoFogata[playerid][fObjeto2] = INVALID_STREAMER_ID;
				}
   	            InfoFogata[playerid][fObjeto2] = CreateDynamicObject(18688, x, y, z-2, rx, ry, rz);
                DeletePVar(playerid, "Editando_F");
				return 1;
		    } else if(response == EDIT_RESPONSE_CANCEL) {
           	    SetDynamicObjectPos(InfoFogata[playerid][fObjeto], InfoFogata[playerid][fPosicionX], InfoFogata[playerid][fPosicionY], InfoFogata[playerid][fPosicionZ]);
			    SetDynamicObjectRot(InfoFogata[playerid][fObjeto], 0, 0, 0);
				DeletePVar(playerid, "Editando_F");
				return 1;
		    }
	    }
    }
	if (GetPVarInt(playerid, "TT_BAR") != -1) // cmd_bar
	{
		new id = GetPVarInt(playerid, "TT_BAR");
		if (objectid == InfoBar[id][bObjeto])
		{
			if (response == EDIT_RESPONSE_FINAL)
			{
				AccionesRol(playerid, 1, "acomoda un objeto de trafico.");
				InfoBar[id][bPosX] = x;
				InfoBar[id][bPosY] = y;
				InfoBar[id][bPosZ] = z;
				InfoBar[id][bPosRX] = rx;
				InfoBar[id][bPosRY] = ry;
				InfoBar[id][bPosRZ] = rz;
				SetDynamicObjectPos(InfoBar[id][bObjeto], x, y, z);
				SetDynamicObjectRot(InfoBar[id][bObjeto], rx, ry, rz);
				SetPVarInt(playerid, "TT_BAR", -1);
			}
			else if (response == EDIT_RESPONSE_CANCEL)
			{
				SetDynamicObjectPos(InfoBar[id][bObjeto], InfoBar[id][bPosX], InfoBar[id][bPosY], InfoBar[id][bPosZ]);
				SetDynamicObjectRot(InfoBar[id][bObjeto], InfoBar[id][bPosRX], InfoBar[id][bPosRY], InfoBar[id][bPosRZ]);
				SetPVarInt(playerid, "TT_BAR", -1);
			}
		}
		return 1;
	}
    return 1;
}

forward OnGraffitiCreate(id);
public OnGraffitiCreate(id)
{
	InfoGraffiti[id][grID_sql] = cache_insert_id();
	cache_unset_active();
    totalgraffitis++;
    return 1;
}

//casas
stock _EstadoC(cid, tipo)
{
    new string[24];
	if (tipo == 1) {
		if (!InfoCasa[cid][cSeguro]) format(string, sizeof string, "~r~Cerrado");
		else if (InfoCasa[cid][cSeguro]) format(string, sizeof string, "~b~Abierto");
	} else if (tipo == 2) {
		if (!InfoCasa[cid][cSeguro]) format(string, sizeof string, "{FF0000}Cerrada");
		else if (InfoCasa[cid][cSeguro]) format(string, sizeof string, "{00C200}Abierta");
	}
	return string;
}

stock _EspacioC(id)
{
	new nametype[24];
	switch (InfoCasa[id][cTipo])
	{
		case 1: alm(nametype, "Habitacion");
		case 2: alm(nametype, "Chico");
		case 3: alm(nametype, "Mediano");
		case 4: alm(nametype, "Grande");
		case 5: alm(nametype, "Gigante");
		default: alm(nametype, "Custom");
	}
	return nametype;
}

//- Sistema de Ropa con ranuras
funcion CambiarRopa(playerid, skinid, slot) {
    switch(InfoJugador[playerid][jSexo]) {
        case 1: SetPlayerSkin(playerid, 252);
        case 2: SetPlayerSkin(playerid, 140);
    }
    AccionesRol(playerid, 0, "se esta cambiando de ropa.");
    SetTimerEx("CambiarEx", 4000, false, "ii", playerid, skinid);
    InfoJugador[playerid][jRopa][slot] = skinid;
	new gds[32];
	format(gds, sizeof gds, "Ropa%d", slot+1);
	guardar_int_mysql("cuentas", gds, InfoJugador[playerid][jID], InfoJugador[playerid][jRopa][slot]);
    InfoJugador[playerid][jSkin] = skinid;
    GameTextForPlayer(playerid, "~w~Cambiando ropa...", 4000, 3);
    CongelarEx(playerid, 4);
    return 1;
}

funcion CambiarEx(playerid, skinid) {
    Dar_Skin(playerid, skinid);
    return 1;
}

stock CongelarEx(playerid, segundos = 0) {
    if(!segundos) return TogglePlayerControllable(playerid, false);
    else if(segundos) {
        TogglePlayerControllable(playerid, false);
        SetTimerEx("Descongelar", segundos * 1000, false, "i", playerid);
    }
    return 1;
}
funcion Descongelar(playerid) return TogglePlayerControllable(playerid, true);

funcion combate(playerid){
	DeletePVar(playerid, "combate");
	return 1;
}

funcion ElegirRopa(playerid, skin) {
    new Str[18 * MAX_ROPA], Ropa[MAX_ROPA][20], strI[20], ropita;
    if(InfoJugador[playerid][jNivelVIP] == 0) ropita = 4;
    else if(InfoJugador[playerid][jNivelVIP] == 1) ropita = 4;
    else if(InfoJugador[playerid][jNivelVIP] == 2) ropita = 5;
    else if(InfoJugador[playerid][jNivelVIP] == 3) ropita = MAX_ROPA;
    Loop(i, ropita, 0) {
        if(!InfoJugador[playerid][jRopa][i]) {
            Ropa[i] = "Nada";
        } else format(Ropa[i], 20, "%d", InfoJugador[playerid][jRopa][i]);
        format(strI, sizeof(strI), "Ranura %d - '%s'\n", i, Ropa[i]);
        strins(Str, strI, strlen(Str));
    }
    ShowPlayerDialog(playerid, D_ELEGIRROPA, DIALOG_STYLE_LIST, "{D6E1EB}Escoge la ranura para guardar", Str, "Elegir", "");
    SetPVarInt(playerid, "ROPA_SELECCIONADA", skin);
    return 1;
}

// strmatch
stock strmatch(const String1[], const String2[]) {
    if((strcmp(String1, String2, true, strlen(String2)) == 0) && (strlen(String2) == strlen(String1))) {
        return true;
    } else {
        return false;
    }
}

//- Carpintero
funcion Tronco(playerid) {
    if(_enPos(playerid, 2.0, 1897.9568,-1851.2993,13.5590)) {
    	SetPlayerAttachedObject(playerid, 5, 1463, 17, -0.028000, 0.424000, -0.049999, -10.499997, 97.500030, 1.200000, 0.446000, 0.249000, 0.490000);
        if(TroncosDis == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No hay mas troncos en la carpinteria.");
        SetPVarInt(playerid, "TrabajandoC", 1);
        SetPVarInt(playerid, "TomoCarpintero", 0);
        _Mensaje(playerid, 2, "0", "Has recogido los troncos, ve a la mesa y da clic.");
        ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1);
        TroncosDis -= 2;
        ActualizarTroncoLabel();
    }
    return 1;
}

funcion HacerMueble(playerid) {
    if(EstaEnPuntosDeMesas(playerid)) {
        if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
        ClearAnimations(playerid);
        B_Manos[playerid] = 1;
        SetPVarInt(playerid, "HaciendoMueble", 1);
        SetPVarInt(playerid, "MueblesCreados", 1);
        GameTextForPlayer(playerid, "~g~Creando mueble...", 21000, 3);
        SetTimerEx("TerminarMueble", 20000, 0, "%d", playerid);
        ApplyAnimation(playerid, "BASEBALL", "bat_part", 4.1, 1, 1, 0, 0, 0, 1);
        return 1;
    }
    return 1;
}

funcion TerminarMueble(playerid) {
    if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
    TogglePlayerControllable(playerid, 1);
    SetPlayerAttachedObject(playerid, 5, ObjetoIDs[random(sizeof(ObjetoIDs))], 17, -0.278000, 0.187000, 0.455999, -4.800001, 94.299995, -0.099999, 1.000000, 1.000000, 1.000000);
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1);
    SetPlayerCheckpoint(playerid, 1867.4004,-1851.4243,13.5784, 1.5);
    SetPVarInt(playerid, "EnCheckPoint", 5);
    B_Manos[playerid] = 0;
    _Mensaje(playerid, 2, "0", "Has hecho un mueble, llevalo al deposito.");
    return 1;
}

funcion ActualizarTroncoLabel()
{
    new string[128];
	if (IsValidDynamic3DTextLabel(LabelTroncos))
	{
		DestroyDynamic3DTextLabel(LabelTroncos);
		LabelTroncos = Text3D:INVALID_3DTEXT_ID;
	}
    format(string, sizeof string, "Troncos: %d disponibles\nPresiona '{ea2c2c}clic{D6E1EB}'",TroncosDis);
    LabelTroncos = CreateDynamic3DTextLabel(string, 0xD6E1EBFF, 1897.9568,-1851.2993,13.5590, 8.0);
    return 1;
}

//- Aserrador
funcion TalarArbol(playerid)
{
    if(EstaEnPuntosDeArboles(playerid))
	{
        if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
        ClearAnimations(playerid);
        TogglePlayerControllable(playerid, 0);
        B_Manos[playerid] = 1;
        SetPVarInt(playerid, "TrabajandoL", 0);
        SetPVarInt(playerid, "HaciendoMueble", 1);
        SetPVarInt(playerid, "TroncosCreados", 1);
        GameTextForPlayer(playerid, "~g~Talando arbol...", 16000, 3);
        SetTimerEx("TerminarArbol", 15000, 0, "%d", playerid);
        ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.1, 1, 1, 0, 0, 15000, 1);
        return 1;
    }
    return 1;
}

funcion TerminarArbol(playerid)
{
    TogglePlayerControllable(playerid, true);
	SetPlayerCheckpoint(playerid, -422.8372, -1767.0865, 5.1262, 5.0);
	SendClientMessage(playerid, 0xCCCC00FF, "Talaste el arbol, ahora lleva los troncos al punto marcado.");
	SetPlayerAttachedObject(playerid, 5, 1463, 1, 0.20, 0.36, 0.0, 0.0, 90.0, 0.0, 0.4, 0.3, 0.6);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

funcion CargarPeajes() {
    // Peaje LS Izquierda
    Peajes[MAX_PEAJE][objectmodel] = 968;
    Peajes[MAX_PEAJE][PosXTrue] = 60.769035;
    Peajes[MAX_PEAJE][PosYTrue] = -1529.067626;
    Peajes[MAX_PEAJE][PosZTrue] = 4.864842;
    Peajes[MAX_PEAJE][PosRotXTrue] = -1.200000;
    Peajes[MAX_PEAJE][PosRotYTrue] = -90.90000;
    Peajes[MAX_PEAJE][PosRotZTrue] = -94.200027;
    Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
    Peajes[MAX_PEAJE][PosXFalse] = 53.86662300;
    Peajes[MAX_PEAJE][PosYFalse] = -1526.99951200;
    Peajes[MAX_PEAJE][PosZFalse] = 4.77926100;
    Peajes[MAX_PEAJE][PosRotXFalse] = 0;
    Peajes[MAX_PEAJE][PosRotYFalse] = 0;
    Peajes[MAX_PEAJE][PosRotZFalse] = -97.81226081;
    Peajes[MAX_PEAJE][typePeajeOrParqueo] = 0;
    Peajes[MAX_PEAJE][PosCommandX] = 62.9867;
    Peajes[MAX_PEAJE][PosCommandY] = -1525.8798;
    Peajes[MAX_PEAJE][PosCommandZ] = 4.9153;

    // Peaje LS 1 Derecha
    MAX_PEAJE++;
    Peajes[MAX_PEAJE][objectmodel] = 968;
    Peajes[MAX_PEAJE][PosXTrue] = 41.225547;
    Peajes[MAX_PEAJE][PosYTrue] = -1534.463745;
    Peajes[MAX_PEAJE][PosZTrue] = 5.064504;
    Peajes[MAX_PEAJE][PosRotXTrue] = 0;
    Peajes[MAX_PEAJE][PosRotYTrue] = -90.700004;
    Peajes[MAX_PEAJE][PosRotZTrue] = 83.600021;
    Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
    Peajes[MAX_PEAJE][PosXFalse] = 52.44144100;
    Peajes[MAX_PEAJE][PosYFalse] = -1536.91735800;
    Peajes[MAX_PEAJE][PosZFalse] = 4.86119400;
    Peajes[MAX_PEAJE][PosRotXFalse] = 0;
    Peajes[MAX_PEAJE][PosRotYFalse] = 0;
    Peajes[MAX_PEAJE][PosRotZFalse] = 82.18770174;
    Peajes[MAX_PEAJE][typePeajeOrParqueo] = 0;
    Peajes[MAX_PEAJE][PosCommandX] = 37.4695;
    Peajes[MAX_PEAJE][PosCommandY] = -1537.5255;
    Peajes[MAX_PEAJE][PosCommandZ] = 5.2364;


    // Peaje LV-LS 1
    MAX_PEAJE++;
    Peajes[MAX_PEAJE][objectmodel] = 968;
    Peajes[MAX_PEAJE][PosXTrue] = 1734.230957;
    Peajes[MAX_PEAJE][PosYTrue] = 541.568481;
    Peajes[MAX_PEAJE][PosZTrue] = 27.024927;
    Peajes[MAX_PEAJE][PosRotXTrue] = -3.900002;
    Peajes[MAX_PEAJE][PosRotYTrue] = -91.600028;
    Peajes[MAX_PEAJE][PosRotZTrue] = -19.899993;
    Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
    Peajes[MAX_PEAJE][PosXFalse] = 1736.79529;
    Peajes[MAX_PEAJE][PosYFalse] = 532.78387;
    Peajes[MAX_PEAJE][PosZFalse] = 27.31380;
    Peajes[MAX_PEAJE][PosRotXFalse] = 0;
    Peajes[MAX_PEAJE][PosRotYFalse] = 0;
    Peajes[MAX_PEAJE][PosRotZFalse] = 82.18770174;
    Peajes[MAX_PEAJE][typePeajeOrParqueo] = 0;
    Peajes[MAX_PEAJE][PosCommandX] = 1731.5371;
    Peajes[MAX_PEAJE][PosCommandY] = 544.9289;
    Peajes[MAX_PEAJE][PosCommandZ] = 26.8230;

    // Peaje LV-LS 2
    MAX_PEAJE++;
    Peajes[MAX_PEAJE][objectmodel] = 968;
    Peajes[MAX_PEAJE][PosXTrue] = 1742.840332;
    Peajes[MAX_PEAJE][PosYTrue] = 538.466430;
    Peajes[MAX_PEAJE][PosZTrue] = 26.778860;
    Peajes[MAX_PEAJE][PosRotXTrue] = -3.900002;
    Peajes[MAX_PEAJE][PosRotYTrue] = -91.600028;
    Peajes[MAX_PEAJE][PosRotZTrue] = -19.899993;
    Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
    Peajes[MAX_PEAJE][PosXFalse] = 1736.79529;
    Peajes[MAX_PEAJE][PosYFalse] = 532.78387;
    Peajes[MAX_PEAJE][PosZFalse] = 27.31380;
    Peajes[MAX_PEAJE][PosRotXFalse] = 0;
    Peajes[MAX_PEAJE][PosRotYFalse] = 0;
    Peajes[MAX_PEAJE][PosRotZFalse] = 82.18770174;
    Peajes[MAX_PEAJE][typePeajeOrParqueo] = 0;
    Peajes[MAX_PEAJE][PosCommandX] = 1740.0405;
    Peajes[MAX_PEAJE][PosCommandY] = 541.1727;
    Peajes[MAX_PEAJE][PosCommandZ] = 26.8827;

    // Peaje LS-LV 1
    MAX_PEAJE++;
    Peajes[MAX_PEAJE][objectmodel] = 968;
    Peajes[MAX_PEAJE][PosXTrue] = 1744.740844;
    Peajes[MAX_PEAJE][PosYTrue] = 537.621826;
    Peajes[MAX_PEAJE][PosZTrue] = 27.282545;
    Peajes[MAX_PEAJE][PosRotXTrue] = -0.200001;
    Peajes[MAX_PEAJE][PosRotYTrue] = -90.799980;
    Peajes[MAX_PEAJE][PosRotZTrue] = 159.699996;
    Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
    Peajes[MAX_PEAJE][PosXFalse] = 1754.87512;
    Peajes[MAX_PEAJE][PosYFalse] = 532.37903;
    Peajes[MAX_PEAJE][PosZFalse] = 27.12970;
    Peajes[MAX_PEAJE][PosRotXFalse] = 0;
    Peajes[MAX_PEAJE][PosRotYFalse] = 0;
    Peajes[MAX_PEAJE][PosRotZFalse] = 82.18770174;
    Peajes[MAX_PEAJE][typePeajeOrParqueo] = 0;
    Peajes[MAX_PEAJE][PosCommandX] = 1747.4525;
    Peajes[MAX_PEAJE][PosCommandY] = 535.5032;
    Peajes[MAX_PEAJE][PosCommandZ] = 27.0627;

    // Peaje LS-LV 2
    MAX_PEAJE++;
    Peajes[MAX_PEAJE][objectmodel] = 968;
    Peajes[MAX_PEAJE][PosXTrue] = 1753.145629;
    Peajes[MAX_PEAJE][PosYTrue] = 534.471618;
    Peajes[MAX_PEAJE][PosZTrue] = 26.887054;
    Peajes[MAX_PEAJE][PosRotXTrue] = -0.200001;
    Peajes[MAX_PEAJE][PosRotYTrue] = -90.799980;
    Peajes[MAX_PEAJE][PosRotZTrue] = 159.699996;
    Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
    Peajes[MAX_PEAJE][PosXFalse] = 1754.87512;
    Peajes[MAX_PEAJE][PosYFalse] = 532.37903;
    Peajes[MAX_PEAJE][PosZFalse] = 27.12970;
    Peajes[MAX_PEAJE][PosRotXFalse] = 0;
    Peajes[MAX_PEAJE][PosRotYFalse] = 0;
    Peajes[MAX_PEAJE][PosRotZFalse] = 82.18770174;
    Peajes[MAX_PEAJE][typePeajeOrParqueo] = 0;
    Peajes[MAX_PEAJE][PosCommandX] = 1755.8710;
    Peajes[MAX_PEAJE][PosCommandY] = 531.7097;
    Peajes[MAX_PEAJE][PosCommandZ] = 27.1239;
}

funcion JugadorCercaPeaje(playerid, option, price, funcional)
{
    new MsgPeaje[150];
    new PeajeOrParking[20];
    if (!option) {
        PeajeOrParking = "Peaje";
    } else {
        PeajeOrParking = "Parqueo";
    }
    new Float: Conteo;
    do {
        Conteo++;
        for (new i = 0; i <= MAX_PEAJE; i++) {
            if (Peajes[i][typePeajeOrParqueo] == option) {
                if (Peajes[i][PosCommandX] == 0 && _enPos(playerid, Conteo, Peajes[i][PosXTrue], Peajes[i][PosYTrue], Peajes[i][PosZTrue]) || Peajes[i][PosCommandX] != 0 && _enPos(playerid, 5.0, Peajes[i][PosCommandX], Peajes[i][PosCommandY], Peajes[i][PosCommandZ])) {
                    new Float: ObjectPosRot[3];
                    GetDynamicObjectRot(Peajes[i][objectid_peaje], ObjectPosRot[0], ObjectPosRot[1], ObjectPosRot[2]);
                    new Float: ObjectPos[3];
                    GetDynamicObjectPos(Peajes[i][objectid_peaje], ObjectPos[0], ObjectPos[1], ObjectPos[2]);
                    if (Peajes[i][PosRotXTrue] == ObjectPosRot[0] && Peajes[i][PosRotYTrue] == ObjectPosRot[1] && Peajes[i][PosRotZTrue] == ObjectPosRot[2] && Peajes[i][PosXTrue] == ObjectPos[0] && Peajes[i][PosYTrue] == ObjectPos[1] && Peajes[i][PosZTrue] == ObjectPos[2]) {
                        if (GetPlayerCash(playerid) >= price) {
                            DineroEstado += price;
                            /*SetDynamicObjectPos(Peajes[i][objectid_peaje], Peajes[i][PosXFalse], Peajes[i][PosYFalse], Peajes[i][PosZFalse]);
                             SetDynamicObjectRot(Peajes[i][objectid_peaje], Peajes[i][PosRotXFalse], Peajes[i][PosRotYFalse], Peajes[i][PosRotZFalse]);*/
					        if (Peajes[i][objectid_peaje] != INVALID_STREAMER_ID)
							{
								DestroyDynamicObject(Peajes[i][objectid_peaje]);
								Peajes[i][objectid_peaje] = INVALID_STREAMER_ID;
							}
                            SetTimerEx("CerrarPeaje", 3000, false, "d", i);
                            new vehicleid = GetPlayerVehicleID(playerid);
                            if (LSPD_Veh(vehicleid) || LSPD_Veh(vehicleid) || CNN_Veh(vehicleid) || GOB_Vehicle(vehicleid) ||
					   		LAFD_Veh(vehicleid) || Basurero_Vehicle(vehicleid) || Camionero_Vehicle(vehicleid) || Granjero_Vehicle(vehicleid) || GN_Vehicle(vehicleid) ||
					  		(veh_info[vehicleid][vStatus] == 2 && vehicle_rent_owner[vehicleid] == playerid))
							{
							    format(MsgPeaje, sizeof(MsgPeaje), "El pago del peaje lo cubre la Gobernacion, no pagaste nada.");
							    _Mensaje(playerid, 2, "0", MsgPeaje);
							}
							else
							{
	       						format(MsgPeaje, sizeof(MsgPeaje), "Has pagado el %s, te costo $%i", PeajeOrParking, price);
	                            _Mensaje(playerid, 2, "0", MsgPeaje);
	                            GivePlayerCash(playerid, -price, "peaje");
							}
                        } else {
                            format(MsgPeaje, sizeof(MsgPeaje), "No tienes dinero para pagar el %s! Cuesta $%i", PeajeOrParking, price);
                            _Mensaje(playerid, 0, "741", MsgPeaje);
                        }
                    } else {
                        format(MsgPeaje, sizeof(MsgPeaje), "El %s todavia se encuentra abierto, no necesita pagarlo!", PeajeOrParking);
                        _Mensaje(playerid, 0, "742", MsgPeaje);
                    }
                    return true;
                }
            }
        }
    }
    while (Conteo != 10);
	if(funcional == 1) return 1;
    return false;
}

funcion CerrarPeaje(peajeid) {
    Peajes[peajeid][objectid_peaje] = CreateDynamicObject(Peajes[peajeid][objectmodel], Peajes[peajeid][PosXTrue], Peajes[peajeid][PosYTrue], Peajes[peajeid][PosZTrue], Peajes[peajeid][PosRotXTrue], Peajes[peajeid][PosRotYTrue], Peajes[peajeid][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
    return 1;
}

funcion MovePeajeDynamicOne(peajeid, Float: Progress) {
    new Float: NextPos[6];
    NextPos[0] = Peajes[peajeid][PosXTrue];
    NextPos[1] = Peajes[peajeid][PosYTrue];
    NextPos[2] = Peajes[peajeid][PosZTrue];
    NextPos[3] = Peajes[peajeid][PosRotXTrue];
    NextPos[4] = Peajes[peajeid][PosRotYTrue];
    NextPos[5] = Peajes[peajeid][PosRotZTrue];
    Progress += VELOCITY_PEAJE_PORCENT;
    //- Posicion X
    if (Peajes[peajeid][PosXTrue] > Peajes[peajeid][PosXFalse]) {
        NextPos[0] -= ((Peajes[peajeid][PosXTrue] - Peajes[peajeid][PosXFalse]) * Progress) / 100;
    } else {
        NextPos[0] += ((Peajes[peajeid][PosXFalse] - Peajes[peajeid][PosXTrue]) * Progress) / 100;
    }
    //- Posicion Y
    if (Peajes[peajeid][PosYTrue] > Peajes[peajeid][PosYFalse]) {
        NextPos[1] -= ((Peajes[peajeid][PosYTrue] - Peajes[peajeid][PosYFalse]) * Progress) / 100;
    } else {
        NextPos[1] += ((Peajes[peajeid][PosYFalse] - Peajes[peajeid][PosYTrue]) * Progress) / 100;
    }
    //- Posicion Z
    if (Peajes[peajeid][PosZTrue] > Peajes[peajeid][PosZFalse]) {
        NextPos[2] -= ((Peajes[peajeid][PosZTrue] - Peajes[peajeid][PosZFalse]) * Progress) / 100;
    } else {
        NextPos[2] += ((Peajes[peajeid][PosZFalse] - Peajes[peajeid][PosZTrue]) * Progress) / 100;
    }
    //- Rotacion X
    if (Peajes[peajeid][PosRotXTrue] > Peajes[peajeid][PosRotXFalse]) {
        NextPos[3] -= ((Peajes[peajeid][PosRotXTrue] - Peajes[peajeid][PosRotXFalse]) * Progress) / 100;
    } else {
        NextPos[3] += ((Peajes[peajeid][PosRotXFalse] - Peajes[peajeid][PosRotXTrue]) * Progress) / 100;
    }
    //- Rotacion Y
    if (Peajes[peajeid][PosRotYTrue] > Peajes[peajeid][PosRotYFalse]) {
        NextPos[4] -= ((Peajes[peajeid][PosRotYTrue] - Peajes[peajeid][PosRotYFalse]) * Progress) / 100;
    } else {
        NextPos[4] += ((Peajes[peajeid][PosRotYFalse] - Peajes[peajeid][PosRotYTrue]) * Progress) / 100;
    }
    //- Rotacion Z
    if (Peajes[peajeid][PosRotZTrue] > Peajes[peajeid][PosRotZFalse]) {
        NextPos[5] -= ((Peajes[peajeid][PosRotZTrue] - Peajes[peajeid][PosRotZFalse]) * Progress) / 100;
    } else {
        NextPos[5] += ((Peajes[peajeid][PosRotZFalse] - Peajes[peajeid][PosRotZTrue]) * Progress) / 100;
    }
    if (Progress < 100.0) {
        SetDynamicObjectPos(Peajes[peajeid][objectid_peaje], NextPos[0], NextPos[1], NextPos[2]);
        SetDynamicObjectRot(Peajes[peajeid][objectid_peaje], NextPos[3], NextPos[4], NextPos[5]);
        SetTimerEx("MovePeajeDynamicOne", VELOCITY_PEAJE_TIME, false, "df", peajeid, Progress);
    } else {
        SetDynamicObjectPos(Peajes[peajeid][objectid_peaje], Peajes[peajeid][PosXFalse], Peajes[peajeid][PosYFalse], Peajes[peajeid][PosZFalse]);
        SetDynamicObjectRot(Peajes[peajeid][objectid_peaje], Peajes[peajeid][PosRotXFalse], Peajes[peajeid][PosRotYFalse], Peajes[peajeid][PosRotZFalse]);
        SetTimerEx("MovePeajeDynamicTwo", 3000, false, "df", peajeid, 0.0);
    }
}

funcion MovePeajeDynamicTwo(peajeid, Float: Progress) {
    new Float: NextPos[6];
    NextPos[0] = Peajes[peajeid][PosXFalse];
    NextPos[1] = Peajes[peajeid][PosYFalse];
    NextPos[2] = Peajes[peajeid][PosZFalse];
    NextPos[3] = Peajes[peajeid][PosRotXFalse];
    NextPos[4] = Peajes[peajeid][PosRotYFalse];
    NextPos[5] = Peajes[peajeid][PosRotZFalse];
    Progress += VELOCITY_PEAJE_PORCENT;
    //- Posicion X
    if (Peajes[peajeid][PosXFalse] > Peajes[peajeid][PosXTrue]) {
        NextPos[0] -= ((Peajes[peajeid][PosXFalse] - Peajes[peajeid][PosXTrue]) * Progress) / 100;
    } else {
        NextPos[0] += ((Peajes[peajeid][PosXTrue] - Peajes[peajeid][PosXFalse]) * Progress) / 100;
    }
    //- Posicion Y
    if (Peajes[peajeid][PosYFalse] > Peajes[peajeid][PosYTrue]) {
        NextPos[1] -= ((Peajes[peajeid][PosYFalse] - Peajes[peajeid][PosYTrue]) * Progress) / 100;
    } else {
        NextPos[1] += ((Peajes[peajeid][PosYTrue] - Peajes[peajeid][PosYFalse]) * Progress) / 100;
    }
    //- Posicion Z
    if (Peajes[peajeid][PosZFalse] > Peajes[peajeid][PosZTrue]) {
        NextPos[2] -= ((Peajes[peajeid][PosZFalse] - Peajes[peajeid][PosZTrue]) * Progress) / 100;
    } else {
        NextPos[2] += ((Peajes[peajeid][PosZTrue] - Peajes[peajeid][PosZFalse]) * Progress) / 100;
    }
    //- Rotacion X
    if (Peajes[peajeid][PosRotXFalse] > Peajes[peajeid][PosRotXTrue]) {
        NextPos[3] -= ((Peajes[peajeid][PosRotXFalse] - Peajes[peajeid][PosRotXTrue]) * Progress) / 100;
    } else {
        NextPos[3] += ((Peajes[peajeid][PosRotXTrue] - Peajes[peajeid][PosRotXFalse]) * Progress) / 100;
    }
    //- Rotacion Y
    if (Peajes[peajeid][PosRotYFalse] > Peajes[peajeid][PosRotYTrue]) {
        NextPos[4] -= ((Peajes[peajeid][PosRotYFalse] - Peajes[peajeid][PosRotYTrue]) * Progress) / 100;
    } else {
        NextPos[4] += ((Peajes[peajeid][PosRotYTrue] - Peajes[peajeid][PosRotYFalse]) * Progress) / 100;
    }
    //- Rotacion Z
    if (Peajes[peajeid][PosRotZFalse] > Peajes[peajeid][PosRotZTrue]) {
        NextPos[5] -= ((Peajes[peajeid][PosRotZFalse] - Peajes[peajeid][PosRotZTrue]) * Progress) / 100;
    } else {
        NextPos[5] += ((Peajes[peajeid][PosRotZTrue] - Peajes[peajeid][PosRotZFalse]) * Progress) / 100;
    }
    if (Progress < 100.0) {
        SetDynamicObjectPos(Peajes[peajeid][objectid_peaje], NextPos[0], NextPos[1], NextPos[2]);
        SetDynamicObjectRot(Peajes[peajeid][objectid_peaje], NextPos[3], NextPos[4], NextPos[5]);
        SetTimerEx("MovePeajeDynamicTwo", VELOCITY_PEAJE_TIME, false, "df", peajeid, Progress);
    } else {
        SetDynamicObjectPos(Peajes[peajeid][objectid_peaje], Peajes[peajeid][PosXTrue], Peajes[peajeid][PosYTrue], Peajes[peajeid][PosZTrue]);
        SetDynamicObjectRot(Peajes[peajeid][objectid_peaje], Peajes[peajeid][PosRotXTrue], Peajes[peajeid][PosRotYTrue], Peajes[peajeid][PosRotZTrue]);
    }
}

public OnRconLoginAttempt(ip[], password[], success)
{
    if(success)
    {
        {
		    new Ip[18], string[320];
		    for(new i = 0; i < MAX_PLAYERS; i++)
		    {
		   		if(IsPlayerConnectedEx(i))
				{
			        GetPlayerIp(i,Ip,sizeof(Ip));
			        if(!strcmp(ip,Ip))
			        {
						GetPlayerIp(i, Ip, 18);
						//format(string, sizeof string, "El jugador %s ha sido bloqueado por %s, Razon:[Intento de RCON]", NombreRJugador(i));
						_MensajeOOC(0xAA3333FF, string);
						GetPlayerIp(i, Ip, 18);
						format(string, sizeof(string), "{ffba00}[A] IP del jugador: %s | IP registrada en la DB: %s", Ip, InfoJugador[i][jIP]);
						MensajeAdmin(string);
						guardar_int_mysql("cuentas", "Baneado", InfoJugador[i][jID], 20);
						guardar_string_mysql("cuentas", "Ban_m", InfoJugador[i][jID], FechaHoy());
						guardar_string_mysql("cuentas", "Ban_c", InfoJugador[i][jID], NombreRJugador(i));
						guardar_string_mysql("cuentas", "Ban_r", InfoJugador[i][jID], "RCON");
						guardar_int_mysql("cuentas", "JuegaleOwo", InfoJugador[i][jID], 0);
						guardar_int_mysql("cuentas", "Encargado_1", InfoJugador[i][jID], 0);
						guardar_int_mysql("cuentas", "Encargado_2", InfoJugador[i][jID], 0);
						guardar_int_mysql("cuentas", "Encargado_3", InfoJugador[i][jID], 0);
						guardar_int_mysql("cuentas", "Encargado_4", InfoJugador[i][jID], 0);
						guardar_int_mysql("cuentas", "Encargado_5", InfoJugador[i][jID], 0);
						guardar_int_mysql("cuentas", "Encargado_6", InfoJugador[i][jID], 0);
						guardar_int_mysql("cuentas", "Encargado_7", InfoJugador[i][jID], 0);
						//_Expulsar(i, 0, "Intento de RCON");
				    }
				}
		 	}
		}
    }
    return 1;
}

funcion IsPlayerAdminCall(playerid) {
    if(InfoJugador[playerid][jAdmin] >= 1) return 1;
    else return 0;
}

funcion CheckTimer(time, ref) {
    new seconds = (time - (gettime() - ref));
    if(ref == 0) return -1;
    else if(seconds <= 0) return 0;
    else return seconds;
}

stock SeleccionSkin(skinid){
	if(skinid < 0 || skinid > 311) return false;
	return true;
}

stock _text(string[])
{
	new szFixed[1024], iPos, iLen;
	for (iLen = strlen(string); iPos < iLen; iPos ++)
		switch (string[iPos])
		{
			case '?':   szFixed[iPos] = 174;
			case '?':   szFixed[iPos] = 173;
			case '?':   szFixed[iPos] = 64;
			case '?':   szFixed[iPos] = 175;
			case '`':   szFixed[iPos] = 177;
			case '&':   szFixed[iPos] = 38;
			default:    szFixed[iPos] = string[iPos];
	}
	return szFixed;
}

forward RemoveBuildingForPlayerEx(playerid);
public RemoveBuildingForPlayerEx(playerid)
{
	//graffitis - 9
	RemoveBuildingForPlayer(playerid, 1490, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1524, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1525, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1526, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1527, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1528, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1529, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1530, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1531, 0.0, 0.0, 0.0, 6000.0);
	//Unity
	RemoveBuildingForPlayer(playerid, 4983, 1961.0313, -1871.4063, 23.7734, 0.25);
	//Militares
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1989.5469, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1955.7656, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 347.1953, 1799.2656, 18.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 342.9375, 1796.2891, 18.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 16670, 330.7891, 1813.2188, 17.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 16096, 120.5078, 1934.0313, 19.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 16671, 193.9531, 2051.7969, 20.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 267.0625, 1895.2969, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1989.5469, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1955.7656, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 16668, 357.9375, 2049.4219, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 16669, 380.2578, 1914.9609, 17.4297, 0.25);
	//idlewood
	RemoveBuildingForPlayer(playerid, 1412, 1951.6094, -1815.8594, 13.8125, 0.3);
	RemoveBuildingForPlayer(playerid, 1412, 1951.6094, -1810.5938, 13.8125, 0.3);
	//ganton
	RemoveBuildingForPlayer(playerid, 1311, 2528.6406, -1778.4063, 16.5547, 0.3);
	RemoveBuildingForPlayer(playerid, 1226, 2531.7422, -1783.5781, 16.2578, 0.3);
	//market
	RemoveBuildingForPlayer(playerid, 1438, 998.0391, -1383.9688, 12.2422, 0.3);

	//corona
	RemoveBuildingForPlayer(playerid, 3573, 1798.6484, -2057.9141, 14.9844, 0.25);

	//Transportista
	RemoveBuildingForPlayer(playerid, 3290, 2503.1250, -2073.3750, 12.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 2515.4219, -2073.3750, 12.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3745, 2475.1016, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3745, 2482.0234, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3745, 2489.1016, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3745, 2496.0938, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3567, 2446.8281, -2075.8438, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3567, 2438.3594, -2075.8438, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3643, 2489.1016, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3643, 2482.0234, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3643, 2475.1016, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3643, 2496.0938, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 2515.4219, -2073.3750, 12.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 2503.1250, -2073.3750, 12.4297, 0.25);
	//Transportador
    RemoveBuildingForPlayer(playerid, 3747, 2234.3906, -2244.8281, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2226.9688, -2252.1406, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2219.4219, -2259.5234, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2212.0938, -2267.0703, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2204.6328, -2274.4141, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2204.6328, -2274.4141, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2212.0938, -2267.0703, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2219.4219, -2259.5234, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2217.2188, -2250.3594, 16.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2226.9688, -2252.1406, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2234.3906, -2244.8281, 14.9375, 0.25);

	RemoveBuildingForPlayer(playerid, 1544, 505.7188, -69.5781, 998.6250, 0.25);// Interiores de negocios | by Bernal
	RemoveBuildingForPlayer(playerid, 2112, 506.1875, -69.7734, 998.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 506.5469, -69.3906, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1805, 507.1641, -69.0938, 998.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1805, 509.1875, -69.7266, 998.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2112, 509.9531, -69.7734, 998.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 510.0703, -69.3828, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 510.3438, -69.5703, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 2660, 487.3516, -81.2109, 999.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2695, 487.3594, -78.3203, 999.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2964, 489.7500, -80.2109, 997.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 18091, 491.8750, -81.8438, 995.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2350, 492.0547, -81.1563, 998.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 2350, 492.0547, -78.9531, 998.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 1548, 492.7969, -78.7500, 998.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 492.7656, -81.0000, 998.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 492.9297, -81.1484, 998.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1517, 496.6094, -79.7891, 999.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1517, 496.4219, -79.5859, 999.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 496.7656, -79.5938, 998.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1517, 497.0000, -79.5859, 999.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 497.3438, -79.5938, 998.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1517, 499.3438, -79.8516, 999.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1517, 499.5781, -80.0000, 999.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1517, 499.8438, -79.8672, 999.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1517, 500.1797, -80.0547, 999.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 500.2344, -79.6172, 998.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 2657, 504.3438, -88.0313, 999.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 2691, 504.3750, -81.3281, 1000.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 2778, 504.8203, -79.9297, 997.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 2681, 504.8359, -81.1719, 997.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 505.2344, -78.8281, 998.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2695, 505.3594, -89.0781, 1000.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 505.4922, -81.2969, 998.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 506.1484, -87.9688, 998.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2964, 506.4844, -84.8359, 997.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 2232, 507.1797, -88.3906, 998.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 2662, 507.5078, -89.0703, 1000.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 508.4141, -88.9844, 998.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2660, 509.8516, -89.0781, 1000.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 2964, 510.1016, -84.8359, 997.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 2232, 510.5234, -88.2578, 998.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 510.8984, -84.8906, 998.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 511.1484, -87.3672, 998.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2659, 512.3828, -86.6641, 1000.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2696, 512.3906, -85.2422, 999.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 2662, 487.3516, -76.7422, 1000.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2112, 489.0469, -75.0938, 998.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 489.3047, -75.4297, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1805, 488.9375, -75.8047, 998.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2350, 491.9141, -77.8828, 998.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 492.6797, -76.0156, 997.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 492.8594, -76.9609, 998.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 492.8594, -77.1563, 998.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 492.6875, -77.1328, 998.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 492.6484, -77.3203, 998.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1547, 493.7344, -76.7656, 998.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1547, 494.5703, -76.8125, 998.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1548, 495.6875, -76.7891, 998.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 496.9609, -76.6406, 998.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 497.1250, -76.7891, 998.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1548, 498.4219, -76.7891, 998.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 499.2422, -76.6250, 998.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1547, 499.7188, -76.8594, 998.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 499.5938, -75.9141, 997.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 500.8125, -76.7500, 998.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 501.3281, -76.6250, 998.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 500.9922, -76.0469, 997.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 504.8672, -77.1797, 997.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 489.5625, -74.8438, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 489.4688, -74.6563, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1805, 489.6797, -74.3828, 998.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2112, 491.5156, -73.2109, 998.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 491.1406, -73.6719, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 491.3516, -73.3125, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1805, 492.1797, -73.6641, 998.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2112, 493.9766, -73.2109, 998.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 494.1406, -73.1328, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 493.9844, -73.7500, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 493.6563, -73.3906, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 2112, 496.5469, -73.2109, 998.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 496.2578, -72.9531, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1805, 495.7891, -73.4531, 998.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 496.9219, -73.2891, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 497.0156, -73.4766, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1805, 497.2188, -73.7422, 998.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2112, 499.1094, -73.2109, 998.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1805, 500.2031, -72.9219, 998.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 501.8438, -71.7734, 997.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1805, 507.0469, -70.5938, 998.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1805, 510.1484, -70.6953, 998.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 506.3906, -70.1563, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1543, 510.3594, -70.2344, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1805, 505.4297, -70.0781, 998.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 506.7109, -70.0547, 998.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 2379, 146.0156, -88.4297, 1000.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2397, 146.5938, -88.4609, 1001.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2397, 146.5938, -87.6250, 1001.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2397, 146.5938, -88.4609, 1002.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2397, 146.5938, -87.6250, 1002.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2390, 146.5938, -85.9609, 1001.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2390, 146.5938, -86.7813, 1001.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2390, 146.5938, -85.9609, 1002.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2390, 146.5938, -86.7813, 1002.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2734, 144.6875, -83.2500, 1003.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 2374, 144.8203, -83.7031, 1001.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2374, 144.8203, -84.5469, 1001.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2374, 144.8125, -83.7031, 1002.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2374, 144.8125, -84.5469, 1002.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2374, 144.8203, -82.0078, 1001.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2374, 144.8203, -82.8281, 1001.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2374, 144.8125, -82.0078, 1002.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2374, 144.8125, -82.8281, 1002.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2387, 153.7266, -94.1484, 1000.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 150.7188, -92.7500, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 150.7188, -93.2500, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 149.7891, -93.2422, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 149.7891, -92.7500, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 150.7188, -91.7109, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 150.7188, -92.2109, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 149.7891, -92.2031, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 149.7891, -91.7031, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2387, 153.7266, -91.0547, 1000.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 156.1719, -88.4219, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 155.6719, -88.4219, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 155.1328, -88.4219, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 154.6328, -88.4219, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2375, 151.9375, -82.3594, 1000.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 154.6406, -87.4922, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 155.1328, -87.4922, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 155.6797, -87.4922, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 156.1797, -87.4922, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2387, 165.6016, -94.1484, 1000.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 2387, 168.9844, -94.1484, 1000.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 2387, 157.1094, -94.1484, 1000.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 171.9844, -92.7500, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 171.9844, -93.2422, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2387, 157.1094, -91.0547, 1000.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 2387, 165.6016, -91.0547, 1000.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 171.9844, -91.7031, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 171.9844, -92.2031, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2387, 168.9844, -91.0547, 1000.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 18071, 161.4063, -83.5859, 1000.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 168.0625, -88.4219, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 167.0234, -88.4219, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 167.5625, -88.4219, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 166.5234, -88.4219, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 166.5313, -87.4922, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 167.5703, -87.4922, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 167.0234, -87.4922, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 168.0703, -87.4922, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2375, 171.3516, -82.3594, 1000.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2379, 146.0156, -80.5781, 1000.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2397, 146.5938, -80.6094, 1001.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2397, 146.5938, -79.7734, 1001.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2390, 146.5938, -78.1094, 1001.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2390, 146.5938, -78.9297, 1001.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2375, 154.1719, -75.0078, 1000.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2379, 154.3594, -71.0703, 1000.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2398, 154.3125, -71.6563, 1001.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2372, 159.9531, -77.9375, 1000.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2398, 155.1563, -71.6563, 1001.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2397, 156.0078, -71.6563, 1001.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2397, 156.8203, -71.6563, 1001.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2399, 160.7266, -69.8906, 1002.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2399, 161.4453, -69.8906, 1002.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2399, 162.1406, -69.8906, 1002.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2734, 161.3984, -69.7734, 1004.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 166.5547, -75.7734, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 167.0391, -75.7734, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 166.5313, -74.8594, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 167.0234, -74.8594, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 168.0625, -75.7734, 1001.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 167.5781, -75.7734, 1001.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 167.5703, -74.8594, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 168.0703, -74.8594, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2397, 164.7422, -69.8906, 1001.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 164.7422, -69.8906, 1002.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2397, 165.5547, -69.8906, 1001.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 165.5625, -69.8906, 1002.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2735, 165.9922, -69.7734, 1004.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 2397, 166.4688, -69.8906, 1001.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2397, 167.2813, -69.8906, 1001.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 167.2813, -69.8906, 1002.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 166.4688, -69.8906, 1002.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 169.3281, -70.0625, 1001.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 168.7969, -70.0625, 1001.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 169.3281, -70.0625, 1001.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 168.7969, -70.0625, 1001.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 170.3906, -70.0625, 1001.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 169.8516, -70.0625, 1001.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 170.3906, -70.0625, 1001.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 169.8516, -70.0625, 1001.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 171.8906, -70.0625, 1001.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 172.4219, -70.0625, 1001.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 172.4219, -70.0625, 1001.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 171.8906, -70.0625, 1001.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 172.9141, -92.7500, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 172.9141, -93.2500, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 172.9141, -92.2109, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 172.9141, -91.7109, 1001.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 176.2188, -84.3906, 1001.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 176.2188, -83.5625, 1001.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2392, 177.5781, -84.3359, 1002.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 176.2188, -83.5625, 1002.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 176.2188, -84.3906, 1002.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2372, 178.9922, -87.0859, 1001.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2382, 179.8594, -86.8750, 1001.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 2382, 174.9375, -77.3359, 1002.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 176.2422, -77.3750, 1001.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 176.2188, -82.7188, 1001.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 176.2188, -81.8906, 1001.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 176.2188, -82.7188, 1002.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 176.2188, -81.8906, 1002.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2379, 176.7969, -81.8125, 1000.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2392, 177.0859, -81.7500, 1002.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 176.7813, -77.3750, 1001.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 178.0078, -80.7969, 1002.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 178.0078, -79.9688, 1002.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2377, 178.0078, -79.9844, 1001.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2377, 178.0078, -80.8047, 1001.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2734, 178.1250, -79.5781, 1003.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 178.0078, -79.1328, 1002.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2377, 178.0078, -79.1484, 1001.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 178.0078, -78.3047, 1002.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2377, 178.0078, -78.3047, 1001.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 177.3203, -77.3750, 1001.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 177.8125, -77.3750, 1001.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2382, 177.2266, -77.4375, 1002.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 172.9531, -70.0625, 1001.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 172.9531, -70.0625, 1001.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 173.4844, -70.0625, 1001.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2386, 173.4844, -70.0625, 1001.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 2391, 173.8281, -76.4531, 1001.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2391, 173.8281, -77.2734, 1001.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2374, 173.8203, -76.4531, 1002.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2374, 173.8203, -77.2656, 1002.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2377, 173.8203, -74.7422, 1001.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2377, 173.8281, -75.5781, 1001.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2374, 173.8203, -75.5703, 1002.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2374, 173.8203, -74.7344, 1002.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2379, 174.4063, -74.7969, 1000.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 175.3281, -69.8906, 1001.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 174.5000, -69.8906, 1001.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 175.3281, -69.8906, 1002.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2378, 174.5000, -69.8906, 1002.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2733, 174.8984, -69.7734, 1004.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 2377, 178.0000, -73.6406, 1002.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2391, 178.0000, -73.6484, 1001.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2382, 176.5078, -74.6641, 1002.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 2732, 178.1172, -72.4297, 1003.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 2377, 178.0000, -72.8203, 1002.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2391, 178.0000, -72.8281, 1001.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2377, 178.0000, -71.9922, 1002.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2391, 178.0078, -71.9922, 1001.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2377, 178.0000, -71.1406, 1002.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2391, 178.0078, -71.1406, 1001.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 176.2422, -70.0469, 1001.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 176.7813, -70.0469, 1001.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 177.3203, -70.0469, 1001.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 177.8125, -70.0469, 1001.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 176.2422, -70.0469, 1001.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 176.7813, -70.0469, 1001.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 177.3203, -70.0469, 1001.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2384, 177.8125, -70.0469, 1001.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2732, 176.3047, -96.5000, 1002.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2733, 168.7813, -96.5000, 1002.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2734, 165.8359, -96.5000, 1002.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2735, 173.4063, -96.5000, 1002.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2733, 157.1719, -96.5000, 1002.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2732, 154.1406, -96.5000, 1002.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2735, 149.5156, -96.5000, 1002.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2734, 146.5469, -96.5000, 1002.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2358, 285.6328, -112.7344, 1000.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 2358, 284.8203, -112.6250, 1001.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 2358, 284.7656, -112.6016, 1000.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 2358, 284.8047, -112.6172, 1000.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 2358, 285.6719, -112.7344, 1000.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 2358, 285.6875, -112.7344, 1001.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 2358, 286.5469, -112.7266, 1000.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 2358, 286.5078, -112.7344, 1000.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 2358, 286.5938, -112.7422, 1001.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 2358, 284.0703, -112.4531, 1000.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 2358, 284.0781, -112.4922, 1000.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 2358, 284.0781, -112.5078, 1001.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 2359, 284.4141, -111.9141, 1000.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 2358, 287.3438, -112.7266, 1000.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 2358, 287.3125, -112.7422, 1000.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 2358, 287.3984, -112.7266, 1001.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 2619, 295.4063, -112.6875, 1003.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 18044, 287.8672, -109.9922, 1002.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 18048, 290.2266, -105.3203, 1000.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 2204, 219.9375, 152.2969, 1002.0156, 0.25); //-int
	RemoveBuildingForPlayer(playerid, 2184, 219.9844, 148.0703, 1002.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1715, 220.1797, 147.2969, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1715, 221.4531, 147.2031, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2194, 222.0078, 148.1406, 1003.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1714, 221.1094, 149.2969, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 5935, 1120.1563, -1303.4531, 18.5703, 0.25);//- Hospital Hollywood | By Bernal | 11 Objetos
	RemoveBuildingForPlayer(playerid, 1440, 1141.9844, -1346.1094, 13.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5737, 1120.1563, -1303.4531, 18.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 5855, 1095.6797, -1212.7813, 18.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, -533.5391, -559.6953, 38.5469, 0.25);//- Deposito | By yefferson bernal
	RemoveBuildingForPlayer(playerid, 1415, -541.4297, -561.2266, 24.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -513.7578, -561.0078, 24.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1441, -503.6172, -540.5313, 25.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1441, -502.4063, -513.0156, 25.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, -553.6875, -481.6328, 25.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1441, -554.4531, -496.1797, 25.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1441, -537.0391, -469.1172, 25.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, -516.9453, -496.6484, 25.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, -503.1250, -509.0000, 25.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 17020, -475.9766, -544.8516, 28.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3769, 1961.4453, -2216.1719, 14.9844, 0.25);//- Aero puerto | By bernal| 35 objetos
	RemoveBuildingForPlayer(playerid, 3744, 2061.5313, -2209.8125, 14.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 3664, 1960.6953, -2236.4297, 19.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1949.3438, -2227.5156, 13.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1944.0625, -2227.5156, 13.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1954.6172, -2227.4844, 13.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1965.1719, -2227.4141, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1959.8984, -2227.4453, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3625, 1961.4453, -2216.1719, 14.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1975.7266, -2227.4141, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1970.4453, -2227.4141, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1981.0000, -2227.4141, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1996.8281, -2227.3828, 13.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1991.5547, -2227.4141, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1986.2813, -2227.4141, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2002.1094, -2227.3438, 13.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2055.0547, -2224.3828, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2055.0547, -2219.1094, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2054.9844, -2213.7891, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2054.9219, -2208.4609, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2054.9219, -2203.1875, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2061.5313, -2209.8125, 14.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1957.3906, -2176.7109, 16.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2054.9297, -2181.3594, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2054.9297, -2186.6328, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1624.6875, -2190.3750, 16.3125, 0.25);// Casas Aeropuerto | By Edinson Walker | 18 Objetos
	RemoveBuildingForPlayer(playerid, 1226, 1482.0391, -2190.5781, 16.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1526.8438, -2190.3750, 16.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1575.7656, -2190.3750, 16.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2193.2578, -2286.2891, 14.8125, 0.25);// Trabajo Carguero | By Edinson Walker | 6 Objetos
	RemoveBuildingForPlayer(playerid, 3574, 2193.2578, -2286.2891, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3630, 2217.5859, -2284.6641, 15.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 3425, -370.3750, -1446.9688, 35.9531, 0.25);// Trabajo Granjero | Edinson Walker | 1 Objeto
	RemoveBuildingForPlayer(playerid, 17298, -366.6719, -1422.6875, 30.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -372.1797, -1434.6094, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -369.1953, -1434.6094, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -366.2031, -1434.6094, 25.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, -361.8125, -1407.5391, 25.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -363.2109, -1434.6094, 25.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 1721.6719, -1721.2891, 13.2266, 0.25);	//- Telefonos publicos
	RemoveBuildingForPlayer(playerid, 1216, 1721.6719, -1720.3906, 13.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 1722.6094, -1721.2891, 13.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 1722.6094, -1720.3906, 13.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 1805.4063, -1600.4609, 13.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 1806.3906, -1599.6172, 13.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 1807.3828, -1598.7813, 13.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 1808.3750, -1597.9219, 13.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 1809.3438, -1597.0859, 13.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 2165.9219, -1155.8047, 24.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 2165.9219, -1154.9609, 24.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 2257.6563, -1211.1875, 23.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 2259.2031, -1211.2109, 23.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 2069.0000, -1766.6641, 13.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 2068.9375, -1767.8359, 13.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1363, 339.1875, -1398.0469, 14.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 355.8047, -1364.9531, 14.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 356.3828, -1364.6797, 14.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1363, 523.1563, -1525.6172, 14.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1363, 523.1563, -1516.4219, 14.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 638.0313, -1228.6641, 17.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 638.0313, -1228.0234, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2726, 1203.0859, -11.5156, 1001.1016, 0.25);//- Negocios de lujo
	RemoveBuildingForPlayer(playerid, 2725, 1203.1484, -11.3438, 1000.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2725, 1203.1484, -2.3203, 1000.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2726, 1203.1797, -5.1250, 1001.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 2725, 1203.1484, -5.0938, 1000.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2723, 1203.3828, -3.3906, 1000.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2726, 1203.2734, -2.5000, 1001.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 2723, 1203.7188, -10.2969, 1000.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2724, 1204.1016, -12.1953, 1000.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2723, 1204.0547, -5.8438, 1000.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2776, 1208.4219, -29.2656, 1000.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 2724, 1204.3594, -4.3750, 1000.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2726, 1202.3984, 8.1406, 1001.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 2725, 1202.2734, 8.3203, 1000.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2725, 1203.1484, 0.3594, 1000.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2723, 1204.1328, -0.5156, 1000.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2726, 1203.0938, 0.5781, 1001.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 2724, 1204.1250, 1.2578, 1000.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2723, 1208.7109, 0.6172, 1000.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2726, 1207.8672, 1.0703, 1001.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 2725, 1207.7500, 1.2500, 1000.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2724, 1206.5391, 1.6328, 1000.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2724, 1208.5938, 2.0391, 1000.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 14810, 1211.2500, -32.5156, 1001.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 14811, 1211.2734, -32.5469, 1001.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 2776, 1214.2422, -37.7266, 1000.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 14809, 1212.4453, -36.7344, 1001.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2776, 1214.0625, -36.6016, 1000.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 2776, 1209.4063, -29.6797, 1000.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 2776, 1212.3984, -31.8594, 1000.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 2776, 1211.9063, -30.8906, 1000.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 2776, 1214.7422, -28.8438, 1000.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 2776, 1215.8359, -29.0313, 1000.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 14829, 1212.1875, -2.1719, 1001.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 2723, 1220.1797, -0.9688, 1000.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2724, 1219.8125, 0.9688, 1000.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2726, 1215.7188, 4.9297, 1001.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 2725, 1215.7656, 4.8203, 1000.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2723, 1216.4375, 3.7891, 1000.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2724, 1216.9453, 4.9922, 1000.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2723, 1216.3828, 6.0781, 1000.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2725, 1215.8047, 7.4531, 1000.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2726, 1215.9297, 7.2734, 1001.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 2724, 1216.5781, 8.1484, 1000.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2723, 1221.3984, -0.7031, 1000.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2726, 1220.9219, 0.5781, 1001.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 2725, 1220.9766, 0.3516, 1000.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 1823, 482.0625, -25.0938, 1002.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 482.3906, -24.8672, 1002.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1754, 482.0469, -23.2891, 1002.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 482.8906, -24.5547, 1002.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2290, 483.5156, -26.3516, 1002.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 1754, 484.1250, -24.6172, 1002.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 2596, 482.4453, -20.5938, 1002.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 482.2656, -20.5078, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 484.8359, -20.5000, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 479.5078, -20.3828, 999.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1754, 485.4531, -24.7031, 1002.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1823, 486.3906, -25.2891, 1002.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 486.6797, -24.6406, 1002.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 486.8125, -24.7500, 1002.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2596, 485.7422, -20.5938, 1002.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 486.0859, -20.5625, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2290, 487.8203, -26.3516, 1002.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 487.2031, -24.5859, 1002.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 487.1797, -25.1094, 1002.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1517, 487.2266, -20.5391, 1000.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1754, 488.4219, -25.1719, 1002.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1754, 488.0313, -23.3906, 1002.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 488.2266, -20.5000, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 490.6328, -24.3906, 999.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 2372, 497.8438, -24.6563, 999.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 1775, 495.9688, -24.3203, 1000.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 2350, 499.8359, -23.3359, 1000.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2350, 499.8594, -21.6328, 1000.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 478.2188, -19.4141, 999.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 18102, 477.2656, -18.1719, 1001.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 482.6094, -19.5156, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 477.2109, -16.1016, 1003.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 2173, 476.5313, -14.4453, 1002.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 477.3203, -13.9375, 1003.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 483.3359, -20.1094, 1000.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 483.6797, -20.1016, 1000.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 484.2266, -19.5547, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1823, 484.1094, -19.9141, 999.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 486.0938, -19.5938, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 487.3359, -20.1484, 1000.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 488.3281, -19.6094, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1823, 487.6250, -19.9141, 999.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 18089, 488.3828, -13.4063, 1000.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1823, 493.3750, -18.1250, 999.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 493.3516, -18.6641, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 494.3906, -18.6563, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1517, 494.1797, -17.6016, 1000.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 494.3281, -16.5234, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 493.5391, -16.4219, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1823, 495.9844, -17.4844, 999.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 495.9922, -16.0000, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 495.9219, -18.1719, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 496.0156, -14.9688, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1823, 495.6484, -14.5703, 999.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 495.7891, -13.1797, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 496.1484, -13.8672, 1000.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1517, 496.7656, -16.8359, 1000.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1517, 496.4297, -16.7734, 1000.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 496.9375, -15.8828, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 497.0859, -17.9922, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 497.2813, -13.7422, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2350, 499.8359, -19.6875, 1000.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2350, 499.8594, -17.9844, 1000.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2350, 499.8516, -16.1484, 1000.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2780, 478.2188, -9.1250, 994.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 2649, 477.8438, -7.7266, 1003.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 478.1953, -7.1719, 999.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 478.6016, -7.6953, 999.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1436, 479.5938, -8.9922, 1001.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 2232, 478.3359, -5.5859, 1001.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 479.2891, -5.4063, 1001.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 479.8203, -5.8125, 1001.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2232, 480.7969, -5.1016, 1001.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 480.8594, -5.0156, 1002.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1436, 479.5938, -4.2969, 1002.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 2232, 482.5781, -3.2188, 1001.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 493.2266, -12.3906, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 494.3672, -12.3984, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1823, 493.3750, -11.9688, 999.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 494.3281, -10.3672, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 493.2266, -10.2656, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 495.9531, -9.3828, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 495.9531, -11.5078, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1823, 496.1016, -11.0859, 999.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 497.1172, -11.6172, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 497.0547, -9.4844, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1517, 496.8906, -10.4063, 1000.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2596, 499.9922, -8.9688, 1003.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 501.4141, -7.5547, 999.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 2779, 501.4688, -10.3672, 999.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 2778, 502.4063, -7.5313, 999.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 2681, 503.6484, -7.5156, 999.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 2232, 495.0391, -5.4063, 1001.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 495.0078, -5.4453, 1002.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1544, 495.2031, -5.3828, 1002.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 497.1563, -7.1094, 999.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 2232, 496.3750, -5.6953, 1001.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 505.6797, -7.0156, 999.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 2653, 506.1406, -4.3672, 1004.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2232, 494.0625, -2.5156, 1001.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 502.1641, -1.8906, 999.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 499.8438, -1.6172, 999.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 505.8125, -1.5625, 999.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1776, 500.5625, -1.3672, 1000.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1775, 501.8281, -1.4297, 1000.7344, 0.25);


	//talleres mecanicos
	RemoveBuildingForPlayer(playerid, 1468, 1837.2031, 907.8750, 11.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 1837.2031, 918.4297, 11.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 1837.2031, 913.1484, 11.0313, 0.25);

	//basurero NG
	RemoveBuildingForPlayer(playerid, 8136, 1038.229, 1263.949, 14.687, 0.250);
	RemoveBuildingForPlayer(playerid, 8138, 1038.229, 1263.949, 14.687, 0.250);

	//camionero ng
	RemoveBuildingForPlayer(playerid, 8254, 1665.170, 687.046, 14.390, 0.250);
	RemoveBuildingForPlayer(playerid, 8113, 1665.170, 687.046, 14.390, 0.250);
	RemoveBuildingForPlayer(playerid, 8255, 1665.560, 753.828, 14.390, 0.250);
	RemoveBuildingForPlayer(playerid, 8159, 1665.560, 753.828, 14.390, 0.250);
	RemoveBuildingForPlayer(playerid, 8078, 1634.719, 772.843, 13.820, 0.250);
	RemoveBuildingForPlayer(playerid, 8114, 1634.719, 772.843, 13.820, 0.250);
	RemoveBuildingForPlayer(playerid, 1335, 1651.050, 774.804, 10.945, 0.250);
	RemoveBuildingForPlayer(playerid, 1358, 1679.699, 767.429, 11.007, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1709.050, 744.429, 10.914, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1709.050, 745.617, 10.468, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1709.050, 744.375, 10.062, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1709.189, 745.492, 11.359, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1709.050, 742.718, 10.468, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1709.050, 741.546, 10.062, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1709.050, 747.078, 10.914, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1709.050, 747.273, 10.062, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1709.050, 748.437, 10.468, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1709.050, 750.093, 10.062, 0.250);
	RemoveBuildingForPlayer(playerid, 1358, 1756.030, 771.640, 10.984, 0.250);
	RemoveBuildingForPlayer(playerid, 1503, 1749.709, 776.437, 10.210, 0.250);
	RemoveBuildingForPlayer(playerid, 8077, 1695.489, 673.218, 13.820, 0.250);
	RemoveBuildingForPlayer(playerid, 8115, 1695.489, 673.218, 13.820, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1648.550, 674.843, 10.062, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1648.550, 671.945, 10.062, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1648.550, 669.117, 10.062, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1648.550, 677.664, 10.062, 0.250);
	RemoveBuildingForPlayer(playerid, 1334, 1634.680, 663.984, 10.929, 0.250);
	RemoveBuildingForPlayer(playerid, 1334, 1632.020, 663.984, 10.929, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1589.910, 671.945, 10.062, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1589.910, 669.117, 10.062, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1589.910, 674.843, 10.062, 0.250);
	RemoveBuildingForPlayer(playerid, 1219, 1589.910, 677.664, 10.062, 0.250);
	RemoveBuildingForPlayer(playerid, 1421, 1620.630, 703.968, 10.500, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 1580.040, 783.250, 11.093, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 1585.319, 783.250, 11.093, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 1590.589, 783.250, 11.093, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 1595.869, 783.250, 11.093, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 1601.150, 783.250, 11.093, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 1606.420, 783.250, 11.093, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 1611.699, 783.250, 11.093, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 1616.979, 783.250, 11.093, 0.250);
	RemoveBuildingForPlayer(playerid, 1267, 1625.010, 819.687, 21.976, 0.250);
	RemoveBuildingForPlayer(playerid, 1261, 1625.010, 819.687, 21.976, 0.250);
	RemoveBuildingForPlayer(playerid, 8310, 1624.790, 818.960, 27.312, 0.250);
	//Carguero
	RemoveBuildingForPlayer(playerid, 3569, 2204.629, -2274.409, 14.937, 0.250);
	RemoveBuildingForPlayer(playerid, 3747, 2204.629, -2274.409, 14.937, 0.250);
	RemoveBuildingForPlayer(playerid, 3569, 2212.090, -2267.070, 14.937, 0.250);
	RemoveBuildingForPlayer(playerid, 3747, 2212.090, -2267.070, 14.937, 0.250);
	RemoveBuildingForPlayer(playerid, 3569, 2219.419, -2259.520, 14.882, 0.250);
	RemoveBuildingForPlayer(playerid, 3747, 2219.419, -2259.520, 14.882, 0.250);
	RemoveBuildingForPlayer(playerid, 3627, 2220.780, -2261.050, 15.906, 0.250);
	RemoveBuildingForPlayer(playerid, 3686, 2220.780, -2261.050, 15.906, 0.250);
	RemoveBuildingForPlayer(playerid, 3569, 2226.969, -2252.139, 14.937, 0.250);
	RemoveBuildingForPlayer(playerid, 3747, 2226.969, -2252.139, 14.937, 0.250);
	RemoveBuildingForPlayer(playerid, 3569, 2234.389, -2244.830, 14.937, 0.250);
	RemoveBuildingForPlayer(playerid, 3747, 2234.389, -2244.830, 14.937, 0.250);
	RemoveBuildingForPlayer(playerid, 1226, 2240.780, -2240.899, 16.367, 0.250);
	RemoveBuildingForPlayer(playerid, 3578, 2235.159, -2231.850, 13.257, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2726.550, -1902.239, 9.671, 0.250);
	RemoveBuildingForPlayer(playerid, 1226, 2217.219, -2250.360, 16.367, 0.250);
	RemoveBuildingForPlayer(playerid, 3627, 2195.090, -2216.840, 15.906, 0.250);
	RemoveBuildingForPlayer(playerid, 3686, 2195.090, -2216.840, 15.906, 0.250);
	RemoveBuildingForPlayer(playerid, 5244, 2198.850, -2213.919, 14.882, 0.250);
	RemoveBuildingForPlayer(playerid, 5305, 2198.850, -2213.919, 14.882, 0.250);
	RemoveBuildingForPlayer(playerid, 3574, 2183.169, -2237.270, 14.812, 0.250);
	RemoveBuildingForPlayer(playerid, 3744, 2183.169, -2237.270, 14.812, 0.250);
	RemoveBuildingForPlayer(playerid, 3578, 2194.479, -2242.879, 13.257, 0.250);
	RemoveBuildingForPlayer(playerid, 3574, 2193.060, -2196.639, 15.101, 0.250);
	RemoveBuildingForPlayer(playerid, 3744, 2193.060, -2196.639, 15.101, 0.250);
	RemoveBuildingForPlayer(playerid, 1226, 2207.879, -2191.250, 16.312, 0.250);
	RemoveBuildingForPlayer(playerid, 3574, 2174.639, -2215.659, 15.101, 0.250);
	RemoveBuildingForPlayer(playerid, 3744, 2174.639, -2215.659, 15.101, 0.250);




	//SalonVIP
	RemoveBuildingForPlayer(playerid, 1284, 550.843, -1420.689, 18.250, 0.250);
	RemoveBuildingForPlayer(playerid, 716, 553.695, -1433.530, 14.703, 0.250);
	RemoveBuildingForPlayer(playerid, 716, 554.281, -1445.949, 14.343, 0.250);


	//BlueBerry
	RemoveBuildingForPlayer(playerid, 13292, 166.6172, -106.5781, 4.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 13293, 201.0938, -106.5781, 4.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 13493, 224.4922, -68.2578, 5.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 196.3438, -131.0313, 1.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 154.7188, -129.1719, 1.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 143.4531, -125.6563, 0.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 781, 164.7266, -130.1953, 0.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 781, 176.9766, -131.1406, 0.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 149.3594, -120.8359, 1.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1536, 207.5000, -113.1250, 3.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1345, 196.7109, -121.4063, 1.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 781, 146.0625, -112.0391, 0.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 209.5469, -131.1797, 1.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 781, 220.6250, -134.5859, 0.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 781, 220.6953, -124.3203, 0.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 209.7656, -123.0547, 1.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 12938, 201.0938, -106.5781, 4.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 12940, 166.6172, -106.5781, 4.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 201.0156, -107.6172, 0.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 764, 186.4141, -107.2578, 0.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 766, 180.7734, -108.8047, 0.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 13450, 183.8516, -107.6094, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1345, 165.9219, -107.6328, 1.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 781, 220.9375, -107.3672, 0.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 781, 146.4375, -102.9766, 0.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 781, 221.0000, -97.1016, 0.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 147.8438, -95.6875, 1.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1345, 182.9922, -93.6172, 1.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 1345, 171.4453, -93.4453, 1.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 155.6797, -85.4375, 1.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 222.8359, -86.1016, 0.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 148.0469, -82.2422, 0.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 781, 165.1719, -82.9766, 0.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 781, 175.6250, -82.8125, 0.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 781, 188.7266, -83.0313, 0.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 781, 201.8125, -83.2422, 0.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 13436, 252.3281, -28.8906, 9.1094, 0.25);

	//Camionero nivel 2 y 3
	RemoveBuildingForPlayer(playerid, 7346, 2956.406, 2111.390, -31.570, 0.250);
	RemoveBuildingForPlayer(playerid, 7347, 2956.406, 2111.390, -31.570, 0.250);
	return 1;
}

funcion PedidoFabrica(playerid, objeto, materiales, tamano, tipo)
{
	KillTimer(jPt_fabrica[playerid]);
	jPt_fabrica[playerid] = 0;
	new p = 1;
	if (!_Fabrica(playerid)) _Mensaje(playerid, 4, "ffffff", "{ADC3E7}Ya no estas en un punto de fabrica, se cancelo el pedido."), p = 0;
	if (InfoJugador[playerid][jMateriales] < materiales) _Mensaje(playerid, 4, "ffffff", "{ADC3E7}No tienes los materiales requeridos para la fabricacion, se cancelo el pedido."), p = 0;
	if (InfoJugador[playerid][jManoDerecha] > 0 && InfoJugador[playerid][jManoIzquierda] > 0) _Mensaje(playerid, 4, "ffffff", "{ADC3E7}No tienes ninguna mano vacia, se cancelo el pedido."), p = 0;
	if(p == 1)
	{
		_Mensaje(playerid, 4, "ffffff", "Jorge dice: Aqui esta tu pedido.");
		new string[200];
		format(string, sizeof string, "* Jorge te entrego un arma.");
		_Mensaje(playerid, 4, "33CCFF", string);
		if (InfoJugador[playerid][jManoDerecha] == 0)
		{
		InfoJugador[playerid][jMateriales] -= materiales;
		DarArma(playerid, objeto);
		}
		else
		{
		InfoJugador[playerid][jMateriales] -= materiales;
		DarArma(playerid, objeto);
		}
		if(tipo == 1)
		{
		if(InfoJugador[playerid][jI_fabrica] == 3 || InfoJugador[playerid][jI_fabrica] < 0) InfoJugador[playerid][jT_fabrica] = 60, InfoJugador[playerid][jI_fabrica] = 3;
		else InfoJugador[playerid][jI_fabrica]--;
		}
		else
		{
		if(InfoJugador[playerid][jI_fabrica2] == 3 || InfoJugador[playerid][jI_fabrica2] < 0) InfoJugador[playerid][jT_fabrica2] = 30, InfoJugador[playerid][jI_fabrica2] = 3;
		else InfoJugador[playerid][jI_fabrica2]--;
		}
		ActualizarManos(playerid);
		ActualizarArmas(playerid);
		guardar_int_mysql("cuentas", "Materiales", InfoJugador[playerid][jID], InfoJugador[playerid][jMateriales]);
		guardar_int_mysql("cuentas", "T_fabrica", InfoJugador[playerid][jID], InfoJugador[playerid][jT_fabrica]);
		guardar_int_mysql("cuentas", "I_fabrica", InfoJugador[playerid][jID], InfoJugador[playerid][jI_fabrica]);
		guardar_int_mysql("cuentas", "T_fabrica2", InfoJugador[playerid][jID], InfoJugador[playerid][jT_fabrica2]);
		guardar_int_mysql("cuentas", "I_fabrica2", InfoJugador[playerid][jID], InfoJugador[playerid][jI_fabrica2]);
		SendRadioFaction(1, C_COLORPOLICIA, "CENTRAL: Un sospechoso salio de la zona del trafico de armas.");
		return true;
	}
	else
	{
	    if(InfoJugador[playerid][jManoDerecha] == 0|| InfoJugador[playerid][jManoIzquierda] == 0)
	    {
	        if(InfoJugador[playerid][jManoDerecha] == 0)	InfoJugador[playerid][jManoDerecha] = 50, InfoJugador[playerid][jManoDerechaCant] = 1, PonerObjeto(playerid, 1, 50);
	        else InfoJugador[playerid][jManoIzquierda] = 50, InfoJugador[playerid][jManoIzquierdaCant] = 1, PonerObjeto(playerid, 2, 50);
	    	ActualizarManos(playerid);
			_Mensaje(playerid, 2, "0", "Se te ha devuelto tu caja vacia.");
			return true;
		}
		SendClientMessage(playerid, -1, "No tienes donde ocupar tu caja de nuevo, se perdio.");
		return false;
	}
}

IntentoChitearBalas(playerid)
{
	if(cheat_balas != 0 && GetPlayerAmmo(playerid) > InfoJugador[playerid][jManoDerechaCant])
	{
		if (CheatDetected(playerid, "Cheat de balas (type 2)", 2) == 1)
			QuitarManos(playerid);
		return 1;
	}
	return 0;
}

stock ocultarradio(playerid)
{
	PlayerTextDrawHide(playerid, radio2[playerid]);
	return 1;
}
stock mostrarradio(playerid)
{
	PlayerTextDrawShow(playerid, radio2[playerid]);
	return 1;
}

stock CargarMaps()
{

	//Arboooles
	CreateDynamicObject(887,-1092.6999000,-1156.8890000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1092.0510000,-1169.9239000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1091.8979000,-1185.5379000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1138.7440000,-1218.0770000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1105.8380000,-1157.0570000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1105.8160000,-1169.5970000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1105.6120000,-1185.7740000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1119.6259000,-1158.0820000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1119.1519000,-1169.8490000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1119.5439000,-1182.9820000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1152.5360000,-1218.4439000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1168.2419000,-1218.8890000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1184.7390000,-1219.1739000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1138.6860000,-1205.4119000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1152.7440000,-1206.3490000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1168.1860000,-1206.7189000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1184.5350000,-1207.2690000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1138.6560000,-1194.1190000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1152.2929000,-1194.5040000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1167.7669000,-1195.2769000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1138.7450000,-1182.6490000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1183.9072000,-1195.5283000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1152.4849000,-1183.0939000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1168.5589000,-1182.0050000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(887,-1182.5860000,-1181.8459000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3276,-1209.9300000,-1173.5770000,129.1210000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3276,-1198.4599000,-1173.6490000,129.1210000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3276,-1186.9150000,-1173.6540000,129.1210000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3276,-1175.3330000,-1173.6600000,129.1210000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3276,-1163.8010000,-1173.6760000,129.1210000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3276,-1152.2810000,-1173.6989000,129.1210000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3276,-1140.6960000,-1173.7349000,129.1210000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3276,-1093.8540000,-1255.2039000,129.1210000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3276,-1124.2910000,-1168.0949000,129.1210000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3276,-1124.2960000,-1156.7290000,129.1210000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3425,-1130.9930000,-1169.9859000,139.6620000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(17324,-1115.1629000,-1242.8859000,128.2189000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(13367,-1150.1689000,-1225.2939000,140.2130000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(12921,-1088.3869000,-1226.6149000,131.5770000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3252,-1134.5100000,-1177.0109000,128.2189000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3276,-1130.0332000,-1173.7460000,129.1210000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1458,-1107.0140000,-1232.9300000,128.2189000,20.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1452,-1107.0410000,-1238.4370000,129.2780000,0.0000000,0.0000000,132.0000000); //
	CreateDynamicObject(1452,-1107.0229000,-1236.6519000,129.2780000,0.0000000,0.0000000,131.9950000); //
	CreateDynamicObject(17298,-1093.6309000,-1245.4229000,133.6080000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(944,-1119.0529000,-1253.5920000,129.1040000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(944,-1114.9919000,-1253.5030000,129.1040000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(944,-1110.6760000,-1253.4890000,129.1040000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(917,-1119.9360000,-1253.8310000,129.7980000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(917,-1119.0169000,-1253.8029000,129.7980000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(917,-1119.5429000,-1253.2159000,129.7980000,0.0000000,0.0000000,306.0000000); //
	CreateDynamicObject(916,-1114.3060000,-1253.8020000,129.7480000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(916,-1115.0620000,-1253.3659000,129.7480000,0.0000000,0.0000000,228.0000000); //
	CreateDynamicObject(916,-1115.8380000,-1253.3199000,129.7480000,0.0000000,0.0000000,227.9990000); //
	CreateDynamicObject(2991,-1119.9060000,-1248.9460000,128.8459000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2991,-1119.8499000,-1244.0770000,128.8459000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2991,-1119.7819000,-1239.2089000,128.8459000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(944,-1120.3070000,-1235.7640000,129.1040000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(944,-1120.2440000,-1232.9940000,129.1040000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(916,-1119.3230000,-1232.9899000,129.7480000,0.0000000,0.0000000,227.9990000); //
	CreateDynamicObject(916,-1120.1040000,-1232.7939000,129.7480000,0.0000000,0.0000000,227.9990000); //
	CreateDynamicObject(1280,-1122.0319000,-1228.8559000,128.6200000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1280,-1121.9730000,-1225.6510000,128.6200000,0.0000000,0.0000000,179.9950000); //
	CreateDynamicObject(1280,-1121.9420000,-1222.5080000,128.6200000,0.0000000,0.0000000,179.9950000); //
    //centro de licencias By Lucas ;D
	  //herreria

 //interior sheriff's

/*
Objects converted: 117
Vehicles converted: 0
Vehicle models found: 0
----------------------
In the time this conversion took to finish light could have travelled around the world 0.27 times!
*/
	//INTERIOR DEL GARAJE
	CreateObject(10051, 1411.61267, 18.33863, -92.45334,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8378, 1370.37451, 47.67143, -89.24210,   0.00000, 0.00000, 90.00000);
	//DIC - 27 objetos - By Jerry
	CreateObject(10051, 636.24695, -593.18921, -54.55059,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 643.93750, -611.98480, 15.05871,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 643.94196, -610.17450, 15.05871,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 642.25574, -607.41211, 15.87294,   0.00000, 0.00000, -33.65997);
	CreateDynamicObject(970, 639.27551, -605.42712, 15.87294,   0.00000, 0.00000, -33.65997);
	CreateDynamicObject(966, 637.24255, -603.92303, 15.31399,   0.00000, 0.00000, -57.06002);
	CreateDynamicObject(970, 632.82184, -595.68713, 15.87294,   0.00000, 0.00000, -78.41997);
	CreateDynamicObject(970, 631.98492, -590.81805, 15.87294,   0.00000, 0.00000, -82.67995);
	CreateDynamicObject(9131, 631.37524, -583.76324, 16.38192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 630.61829, -583.76318, 16.38190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 629.86890, -583.76318, 16.38190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 629.10663, -583.76318, 16.38190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 628.36877, -583.76318, 16.38190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 627.61963, -583.76318, 16.38190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 628.36877, -583.01038, 16.38190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 627.61963, -583.01038, 16.38190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 631.71265, -585.94818, 15.87290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19121, 632.29169, -593.25928, 15.83083,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 631.65088, -588.41589, 15.83083,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1223, 627.92664, -574.05255, 14.16710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1223, 627.92657, -569.41040, 14.16710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13028, 617.96649, -601.50909, 17.94932,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13028, 617.96649, -597.02148, 17.94930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2885, 595.52039, -562.50897, -49.07603,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2885, 595.51172, -566.54590, -49.07603,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(13028, 595.64978, -570.22534, -52.84945,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13028, 595.64978, -565.73981, -52.84940,   0.00000, 0.00000, 0.00000);

	//Bug Puerta de Ganton - By Desconocido - 1 Objeto
	CreateDynamicObject(1498, 2401.76562500, -1714.42370600, 13.14058300, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	// Hospital Int LA | By Max | 158 objetos
	//-
	//-
	CreateDynamicObject(1498, 2294.43848, 2492.88940, 2.46963,   0.00000, 0.00000, 90.00000);
	//-int
	CreateDynamicObject(1535, 295.19067, 189.37677, 1006.17322,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1535, 298.15189, 189.40451, 1006.17322,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1535, 274.14661, 189.32817, 1006.17322,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1535, 277.13193, 189.36572, 1006.17322,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19377, 235.82520, 193.79520, 1007.16913,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1535, 229.99292, 169.83296, 1002.02551,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1535, 232.94814, 169.85588, 1002.02551,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1535, 228.22322, 159.80409, 1002.02289,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1535, 228.20541, 162.81633, 1002.02289,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19377, 228.24721, 145.96919, 1002.02618,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14782, 218.95338, 147.48479, 1002.94812,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14782, 223.10741, 149.22139, 1002.94812,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1431, 219.57713, 151.70505, 1002.00372,   0.00000, 0.00000, 0.00000);
	// Exterior Faro LA | By Dieguito | 11 Objetos
	// Trabajo Carpintero | By Dieguito | 40 Objetos
	// Interiores de negocios | by Dieguito
	CreateDynamicObject(2708, 183.31508, -88.59669, 1000.94312,   0.00000, 0.00000, 89.64000);
	CreateDynamicObject(2708, 183.31287, -88.98791, 1000.94312,   0.00000, 0.00000, 89.64000);

	// Interiores de garages | Dieguito
	new garg;
	 //- Portones
	CreateObject(3354, -2460.04688, -626.38354, 13.01109,   0.00000, 0.00000, 90.00000);
	CreateObject(3354, -2412.56616, -642.18176, 12.99715,   0.00000, 0.00000, 90.00000);
	CreateObject(3354, -2397.39404, -598.26202, 13.01110,   0.00000, 0.00000, 133.32021);
	//- Peque?o
	garg = CreateObject(18981, -2461.87158, -633.33533, 11.23182,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(garg, 0, 16639, "a51_labs", "ws_trainstationwin1", 0);
	garg = CreateObject(18981, -2461.91162, -633.33679, 16.82644,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(garg, 0, 16639, "a51_labs", "ws_trainstationwin1", 0);
	garg = CreateDynamicObject(18981, -2458.95630, -637.70593, 11.71500,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(garg, 0, 18082, "cj_barb", "ws_stationfloor", 0);
	garg = CreateDynamicObject(18981, -2455.97437, -630.51752, 11.71500,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(garg, 0, 18082, "cj_barb", "ws_stationfloor", 0);
	garg = CreateDynamicObject(18981, -2466.09595, -630.39453, 11.71500,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(garg, 0, 18082, "cj_barb", "ws_stationfloor", 0);
	garg = CreateDynamicObject(18981, -2458.91211, -625.88312, 11.71500,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(garg, 0, 18082, "cj_barb", "ws_stationfloor", 0);

	//- Mediano
	garg = CreateObject(18981, -2413.29858, -636.12415, 11.23182,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(garg, 0, 16639, "a51_labs", "ws_trainstationwin1", 0);
	garg = CreateObject(18981, -2413.29858, -636.12415, 17.22640,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(garg, 0, 16639, "a51_labs", "ws_trainstationwin1", 0);
	garg = CreateDynamicObject(18981, -2406.50415, -634.00873, 11.23180,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(garg, 0, 18082, "cj_barb", "ws_stationfloor", 0);
	garg = CreateDynamicObject(18981, -2415.04199, -642.64331, 11.23180,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(garg, 0, 18082, "cj_barb", "ws_stationfloor", 0);
	garg = CreateDynamicObject(18981, -2423.60986, -639.16626, 11.23180,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(garg, 0, 18082, "cj_barb", "ws_stationfloor", 0);
	garg = CreateDynamicObject(18981, -2415.74731, -629.33917, 11.23180,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(garg, 0, 18082, "cj_barb", "ws_stationfloor", 0);
	//- Grande
	garg = CreateObject(18981, -2402.85938, -592.28430, 11.33661,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(garg, 0, 16639, "a51_labs", "ws_trainstationwin1", 0);
	garg = CreateObject(18981, -2402.85938, -592.28430, 18.15434,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(garg, 0, 16639, "a51_labs", "ws_trainstationwin1", 0);
	garg = CreateDynamicObject(18981, -2402.52710, -581.26819, 11.23180,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(garg, 0, 18082, "cj_barb", "ws_stationfloor", 0);
	garg = CreateDynamicObject(18981, -2396.96826, -598.51227, 11.23180,   0.00000, 0.00000, 133.32021);
	SetDynamicObjectMaterial(garg, 0, 18082, "cj_barb", "ws_stationfloor", 0);
	garg = CreateDynamicObject(18981, -2412.33765, -592.73846, 11.23180,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(garg, 0, 18082, "cj_barb", "ws_stationfloor", 0);
	garg = CreateDynamicObject(18981, -2408.76904, -603.04407, 11.23180,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(garg, 0, 18082, "cj_barb", "ws_stationfloor", 0);
	garg = CreateDynamicObject(18981, -2391.55151, -589.30396, 11.23180,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(garg, 0, 18082, "cj_barb", "ws_stationfloor", 0);
	// MTV Ext | by Dieguito | 60 Objetos
	CreateDynamicObject(11544, 733.21167, -1365.43005, 24.45701,   0.00000, 0.00000, 179.79999);
	CreateDynamicObject(11544, 733.28497, -1359.12000, 24.45701,   0.00000, 0.00000, 359.79675);
	CreateDynamicObject(3934, 742.88409, -1371.27698, 24.69221,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3876, 721.75098, -1376.67383, 27.56019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1694, 719.47748, -1339.83081, 36.57013,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 751.20898, -1330.85742, 13.09988,   0.00000, 0.00000, 359.29688);
	CreateDynamicObject(970, 759.44531, -1330.94824, 13.09969,   0.00000, 0.00000, 359.29688);
	CreateDynamicObject(970, 755.33008, -1330.90234, 13.09979,   0.00000, 0.00000, 359.29688);
	CreateDynamicObject(970, 749.14319, -1332.90100, 13.09540,   0.00000, 0.00000, 89.29688);
	CreateDynamicObject(970, 757.37109, -1332.99170, 13.09520,   0.00000, 0.00000, 89.29688);
	CreateDynamicObject(970, 753.26263, -1332.95496, 13.09528,   0.00000, 0.00000, 89.29688);
	CreateDynamicObject(970, 761.50116, -1333.04150, 13.09509,   0.00000, 0.00000, 89.29688);
	CreateDynamicObject(5837, 768.58295, -1332.14124, 14.26333,   0.00000, 0.00000, 177.99500);
	CreateDynamicObject(1223, 761.48291, -1335.24841, 12.53876,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1223, 754.40918, -1361.43262, 11.11260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 648.04456, -1330.14172, 20.19147,   0.00000, 0.00000, 297.99866);
	CreateDynamicObject(1232, 647.73792, -1348.21631, 20.19147,   0.00000, 0.00000, 297.99316);
	CreateDynamicObject(2921, 781.89844, -1330.33691, 16.26960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2921, 773.99976, -1384.79834, 16.42263,   0.00000, 0.00000, 186.00000);
	CreateDynamicObject(3522, 755.38379, -1368.49609, 12.59153,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(862, 755.23096, -1370.29395, 12.68120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 754.36847, -1369.00464, 12.92332,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(859, 755.22089, -1366.68433, 12.68145,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(861, 755.28284, -1367.66296, 12.68145,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 647.84656, -1367.07043, 20.19147,   0.00000, 0.00000, 297.99316);
	CreateDynamicObject(1232, 647.81659, -1384.33496, 20.19147,   0.00000, 0.00000, 297.99316);
	CreateDynamicObject(1280, 647.23267, -1339.24219, 12.94823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 647.15228, -1375.67383, 13.07805,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(738, 644.89606, -1366.99109, 12.72225,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 644.88678, -1348.50513, 12.64688,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3873, 699.70898, -1355.22559, 28.24851,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7586, 699.70801, -1355.12500, 49.63910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10357, 702.12280, -1354.90942, 20.87460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(717, 678.35925, -1388.48865, 12.70875,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(717, 699.71106, -1388.52637, 12.78964,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(717, 724.66650, -1388.47412, 12.78557,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(717, 675.83221, -1326.12366, 12.76604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(717, 698.34253, -1326.02344, 12.76604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(717, 721.59460, -1326.03455, 12.76604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 738.95190, -1374.79175, 24.70590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 746.64551, -1367.93359, 24.70590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 746.58398, -1374.79785, 24.70590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 739.00482, -1367.96008, 24.70590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8550, 655.64587, -1357.12720, 25.01492,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 754.41406, -1359.99023, 25.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 754.29749, -1384.08496, 25.25653,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 750.94049, -1359.19177, 21.33766,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(638, 743.58636, -1359.17859, 21.33766,   0.00000, 0.00000, 269.98901);
	CreateDynamicObject(2946, 748.85895, -1359.59802, 20.64063,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2946, 745.69000, -1359.59766, 20.64063,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1215, 740.78064, -1354.32971, 21.20292,   0.00000, 0.00000, 12.00000);
	CreateDynamicObject(1483, 747.22998, -1358.35999, 22.40000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(970, 747.10284, -1330.83691, 13.09988,   0.00000, 0.00000, 359.29688);
	CreateDynamicObject(970, 744.99109, -1332.86707, 13.09540,   0.00000, 0.00000, 89.29688);
	CreateDynamicObject(970, 742.97632, -1330.78296, 13.09988,   0.00000, 0.00000, 359.29688);
	CreateDynamicObject(970, 740.86353, -1332.82605, 13.09540,   0.00000, 0.00000, 89.29688);
	CreateDynamicObject(970, 738.83606, -1330.73743, 13.09988,   0.00000, 0.00000, 359.29688);
	CreateDynamicObject(970, 736.74249, -1332.77893, 13.09540,   0.00000, 0.00000, 89.35687);
	CreateDynamicObject(1223, 736.72314, -1334.92969, 12.53876,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(717, 785.45599, -1383.00586, 12.78366,   0.00000, 0.00000, 0.06000);
	// Mercado Negro Ext - Int | By Dieguito| 50 Objetos
	CreateDynamicObject(18981, 2113.49634, -1999.67468, -0.58289,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(3050, 2119.14551, -2012.48022, 9.15464,   0.00000, 0.00000, 17.34000);
	CreateDynamicObject(3050, 2127.13770, -2005.59766, 9.15464,   0.00000, 0.00000, 41.34000);
	CreateDynamicObject(3050, 2123.64917, -2008.59717, 9.15464,   0.00000, 0.00000, 75.30000);
	CreateDynamicObject(1271, 2120.17993, -2001.39001, 7.31000,   0.00000, 0.00000, 41.88000);
	CreateDynamicObject(1271, 2119.64990, -2000.79004, 7.31000,   0.00000, 0.00000, 41.88000);
	CreateDynamicObject(3014, 2118.83008, -2000.48999, 7.19000,   0.00000, 0.00000, 41.40000);
	CreateDynamicObject(2359, 2119.04004, -2000.43994, 7.92000,   0.00000, 0.00000, -37.50000);
	CreateDynamicObject(2040, 2118.84009, -2000.34998, 7.80000,   0.00000, 0.00000, 52.92000);
	CreateDynamicObject(2358, 2119.35010, -1999.95996, 7.83000,   0.00000, 0.00000, -26.64000);
	CreateDynamicObject(2041, 2119.76001, -2000.37000, 7.91000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2042, 2119.39990, -1999.94995, 8.03000,   0.00000, 0.00000, -29.94000);
	CreateDynamicObject(2037, 2119.76001, -2000.77002, 7.78000,   0.00000, 0.00000, -39.48000);
	CreateDynamicObject(2038, 2119.76001, -2000.60999, 7.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2037, 2119.56006, -2000.78003, 7.78000,   0.00000, 0.00000, 13.50000);
	CreateDynamicObject(1650, 2120.70996, -2002.05005, 8.02000,   0.00000, 0.00000, -115.02000);
	CreateDynamicObject(3016, 2120.82007, -2001.65002, 7.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1650, 2120.40991, -2001.96997, 8.02000,   0.00000, 0.00000, -153.66000);
	CreateDynamicObject(3028, 2119.92993, -2001.91003, 7.72000,   98.16000, 46.74000, 0.00000);
	CreateDynamicObject(2358, 2121.06006, -2001.45996, 7.10000,   0.00000, 0.00000, 78.36000);
	CreateDynamicObject(2358, 2120.54004, -2002.04004, 7.08000,   0.00000, 0.00000, 45.30000);
	CreateDynamicObject(2358, 2121.81006, -2001.07996, 7.10000,   0.00000, 0.00000, 219.42000);
	CreateDynamicObject(335, 2120.51001, -2001.70996, 7.70000,   90.78000, 26.40000, 110.52000);
	CreateDynamicObject(3862, 2120.33008, -2000.53003, 8.09000,   0.00000, 0.00000, -45.60000);
	CreateDynamicObject(335, 2120.38989, -2001.40002, 7.70000,   90.78000, 26.40000, 238.74001);
	CreateDynamicObject(335, 2120.35010, -2001.87000, 7.70000,   90.78000, 26.40000, 70.44000);
	CreateDynamicObject(2359, 2121.39990, -2000.66003, 7.19000,   0.00000, 0.00000, -147.48000);
	CreateDynamicObject(2619, 2121.61011, -2000.05005, 8.35000,   2.16000, 1.02000, 44.28000);
	CreateDynamicObject(2619, 2120.65991, -1999.09998, 8.35000,   -18.96000, -0.06000, 44.28000);
	CreateDynamicObject(337, 2111.14990, -2005.28003, 7.33000,   -1.02000, -6.78000, 28.50000);
	CreateDynamicObject(337, 2111.02002, -2004.97998, 7.33000,   -1.02000, -6.78000, 28.50000);
	CreateDynamicObject(18633, 2110.98999, -2005.38000, 7.77000,   -1.20000, 95.64000, 26.94000);
	CreateDynamicObject(18634, 2110.43994, -2005.78003, 7.77000,   -0.30000, -96.12000, -132.42000);
	CreateDynamicObject(3863, 2110.31006, -2006.71997, 8.12000,   0.00000, 0.00000, 114.06000);
	CreateDynamicObject(18635, 2110.82007, -2006.59998, 7.81000,   -88.80000, -76.86000, 0.00000);
	CreateDynamicObject(18635, 2110.88989, -2006.72998, 7.81000,   -88.80000, -76.86000, 66.84000);
	CreateDynamicObject(18633, 2111.56006, -2007.35999, 7.77000,   0.00000, 0.00000, -31.32000);
	CreateDynamicObject(18633, 2111.48999, -2007.37000, 7.77000,   0.00000, 0.00000, -32.82000);
	CreateDynamicObject(1575, 2114.52002, -2010.56006, 7.69000,   -0.30000, 15.72000, 21.78000);
	CreateDynamicObject(3861, 2114.65991, -2011.63000, 8.05000,   0.00000, 0.00000, 136.80000);
	CreateDynamicObject(1575, 2114.17993, -2010.60999, 7.65000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1577, 2115.63086, -2011.59753, 7.65000,   0.00000, 0.00000, -86.04000);
	CreateDynamicObject(18451, 2126.25684, -2010.36853, 7.51649,   0.00000, 0.00000, 70.56002);
	CreateDynamicObject(4227, 2116.98584, -1997.30798, 9.49283,   0.00000, 0.00000, 39.91999);
	CreateDynamicObject(1458, 2123.44482, -2005.02600, 7.20789,   0.00000, 0.00000, -196.80000);
	CreateDynamicObject(2969, 2123.73999, -2002.88000, 7.31000,   0.00000, 0.00000, 46.56000);
	CreateDynamicObject(2969, 2124.12988, -2003.46997, 7.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2969, 2123.73999, -2002.88000, 7.10000,   0.00000, 0.00000, 46.56000);
	CreateDynamicObject(2969, 2124.68994, -2003.84998, 7.07000,   0.00000, 0.00000, 63.36000);
	CreateDynamicObject(1438, 2117.82373, -2014.41174, 6.96544,   0.00000, 0.00000, 17.64000);

	//Vallas del canal de desag?e - nexusrp
	CreateDynamicObject(973,1579.9000000,-1757.4000000,13.0000000,0.0000000,0.0000000,90.0000000); //object(sub_roadbarrier) (2)
	CreateDynamicObject(973,1579.9000000,-1751.0000000,13.0000000,0.0000000,0.0000000,90.0000000); //object(sub_roadbarrier) (3)
	CreateDynamicObject(973,1580.5110000,-1771.5000000,12.7500000,0.0000000,358.0000000,93.0000000); //object(sub_roadbarrier) (4)
	CreateDynamicObject(973,1579.9000000,-1757.4000000,13.9000000,0.0000000,0.0000000,90.0000000); //object(sub_roadbarrier) (5)
	CreateDynamicObject(973,1579.9000000,-1751.0000000,13.8900000,0.0000000,0.0000000,90.0000000); //object(sub_roadbarrier) (6)
	CreateDynamicObject(973,1580.5100000,-1771.5000000,13.7000000,0.0000000,357.9950000,92.9990000); //object(sub_roadbarrier) (7)
	CreateDynamicObject(973,1679.0000000,-1788.0000000,12.8000000,0.0000000,0.0000000,269.9950000); //object(sub_roadbarrier) (9)
	CreateDynamicObject(973,1358.7000000,-1722.1000000,13.0000000,0.0000000,0.0000000,180.0000000); //object(sub_roadbarrier) (12)
	CreateDynamicObject(973,1358.7000000,-1722.0900000,13.9000000,0.0000000,0.0000000,179.9950000); //object(sub_roadbarrier) (13)
	CreateDynamicObject(973,1360.0000000,-1722.1000000,13.0000000,0.0000000,0.0000000,179.9950000); //object(sub_roadbarrier) (14)
	CreateDynamicObject(973,1360.0000000,-1722.0800000,13.8900000,0.0000000,0.0000000,179.9950000); //object(sub_roadbarrier) (15)
	CreateDynamicObject(973,1359.9000000,-1684.2000000,13.3000000,0.0000000,0.0000000,0.0000000); //object(sub_roadbarrier) (16)
	CreateDynamicObject(973,1359.9000000,-1684.1900000,14.2000000,0.0000000,0.0000000,0.0000000); //object(sub_roadbarrier) (17)
	CreateDynamicObject(973,1358.8000000,-1684.1900000,13.3000000,0.0000000,0.0000000,0.0000000); //object(sub_roadbarrier) (18)
	CreateDynamicObject(973,1358.8000000,-1684.1800000,14.1900000,0.0000000,0.0000000,0.0000000); //object(sub_roadbarrier) (19)
	CreateDynamicObject(973,1359.7000000,-1618.7000000,13.3000000,0.0000000,0.0000000,180.0000000); //object(sub_roadbarrier) (20)
	CreateDynamicObject(973,1358.4000000,-1618.6900000,13.3000000,0.0000000,0.0000000,179.9950000); //object(sub_roadbarrier) (21)
	CreateDynamicObject(973,1359.7000000,-1618.7000000,14.2000000,0.0000000,0.0000000,179.9950000); //object(sub_roadbarrier) (22)
	CreateDynamicObject(973,1358.4000000,-1618.6900000,14.2000000,0.0000000,0.0000000,179.9950000); //object(sub_roadbarrier) (23)
	CreateDynamicObject(973,1363.6000000,-1592.5000000,13.2000000,0.0000000,0.0000000,344.0000000); //object(sub_roadbarrier) (24)
	CreateDynamicObject(973,1363.6000000,-1592.5000000,14.1000000,0.0000000,0.0000000,343.9980000); //object(sub_roadbarrier) (25)
	CreateDynamicObject(973,1362.4000200,-1592.1099900,13.2000000,0.0000000,0.0000000,344.0000000); //object(sub_roadbarrier) (26)
	CreateDynamicObject(973,1362.4000000,-1592.1000000,14.1200000,0.0000000,0.0000000,343.9980000); //object(sub_roadbarrier) (27)
	CreateDynamicObject(973,1367.5000000,-1573.7000000,13.2000000,0.0000000,0.0000000,164.0000000); //object(sub_roadbarrier) (28)
	CreateDynamicObject(973,1368.6000000,-1574.0000000,13.2000000,0.0000000,0.0000000,163.9980000); //object(sub_roadbarrier) (29)
	CreateDynamicObject(973,1368.6500000,-1573.9000000,13.9000000,0.0000000,0.0000000,163.9980000); //object(sub_roadbarrier) (30)
	CreateDynamicObject(973,1367.4000000,-1573.5400000,13.8900000,0.0000000,0.0000000,163.9980000); //object(sub_roadbarrier) (31)
	CreateDynamicObject(973,1402.4000000,-1450.4000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(sub_roadbarrier) (32)
	CreateDynamicObject(973,1401.2000000,-1450.4000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(sub_roadbarrier) (33)
	CreateDynamicObject(973,1402.4000000,-1450.4000000,13.8000000,0.0000000,0.0000000,0.0000000); //object(sub_roadbarrier) (34)
	CreateDynamicObject(973,1401.1900000,-1450.4000000,13.8000000,0.0000000,0.0000000,0.0000000); //object(sub_roadbarrier) (35)
	// Ayuntamiento Ext | by Un Player 2010 | 49 Objetos
	//- Fabrica + negocio | By Edinson Walker | 7 objetos
	// Motel Ext - Int | by Un Player | 4 Objetos
	CreateObjectEx(3596, -333.24868800, -888.47235100, 50.13629500, 0, 0, 157.49996723, MAX_RADIO_STREAM); // Motel
	CreateDynamicObject(3051, 966.39483642578, -52.608592987061, 1001.4867553711, 0, 0, 45.75, -1, -1, -1, MAX_RADIO_STREAM); // PUERTA INTERIOR Motel
	CreateDynamicObject(3051, 966.40460205078, -53.733352661133, 1001.4867553711, 0, 0, 226.97766113281, -1, -1, -1, MAX_RADIO_STREAM); // PUERTA INTERIOR Motel
	CreateDynamicObject(3051, 966.38757324219, -53.166976928711, 1003.3112182617, 40.500152587891, 270, 89.7275390625, -1, -1, -1, MAX_RADIO_STREAM); // PUERTA INTERIOR Motel
	//interiores ramdoms
	//- Hospital Hollywood | By YeffersonBernal | 11 Objetos
	CreateDynamicObject(3578, 1112.84229, -1291.60425, 13.36130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1142.68127, -1347.45032, 13.36130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1123.13721, -1291.60425, 13.36130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(966, 1131.03235, -1291.36438, 12.51630,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3578, 1144.88135, -1291.46216, 13.36130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1152.97717, -1347.46338, 13.36130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1498, 1150.05762, -1297.78979, 12.57600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1498, 1160.68872, -1330.49524, 30.42221,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11008, 1099.08643, -1189.92358, 23.40820,   0.00000, 0.00000, 269.81992);
	// Trabajo Granjero | Edinson Walker | 1 Objeto
	CreateDynamicObject(1522, -383.50250, -1438.09363, 25.28196, 0.00000, 0.00000, -89.88002);
	//Paso autopista | By Logan | 26 Objetos
	CreateDynamicObject(1698, 1052.56140137, -1844.63635254, 12.48890209, 0.00000000, 0.00000000, 0.00000000); //object(esc_step8) (1)
	CreateDynamicObject(1698, 1052.56054688, -1847.93579102, 12.48890209, 0.00000000, 0.00000000, 0.00000000); //object(esc_step8) (2)
	CreateDynamicObject(1698, 1052.56054688, -1851.23559570, 12.48890209, 0.00000000, 0.00000000, 0.00000000); //object(esc_step8) (3)
	CreateDynamicObject(1698, 1052.56054688, -1854.23535156, 12.48390198, 0.00000000, 0.00000000, 0.00000000); //object(esc_step8) (4)
	CreateDynamicObject(1698, 1052.56054688, -1857.53540039, 12.48890209, 0.00000000, 0.00000000, 0.00000000); //object(esc_step8) (5)
	CreateDynamicObject(1698, 1053.90551758, -1844.63574219, 12.48890209, 0.00000000, 0.00000000, 0.00000000); //object(esc_step8) (6)
	CreateDynamicObject(1698, 1053.91052246, -1847.93554688, 12.48890209, 0.00000000, 0.00000000, 0.00000000); //object(esc_step8) (7)
	CreateDynamicObject(1698, 1053.90051270, -1851.23535156, 12.48890209, 0.00000000, 0.00000000, 0.00000000); //object(esc_step8) (8)
	CreateDynamicObject(1698, 1053.90051270, -1854.23535156, 12.48390198, 0.00000000, 0.00000000, 0.00000000); //object(esc_step8) (9)
	CreateDynamicObject(1698, 1053.90051270, -1857.53515625, 12.48890209, 0.00000000, 0.00000000, 0.00000000); //object(esc_step8) (10)
	CreateDynamicObject(1698, 1054.90527344, -1844.63574219, 12.48190212, 0.00000000, 0.00000000, 0.00000000); //object(esc_step8) (11)
	CreateDynamicObject(1698, 1054.91015625, -1847.93554688, 12.48290253, 0.00000000, 0.00000000, 0.00000000); //object(esc_step8) (12)
	CreateDynamicObject(1698, 1054.90039062, -1851.23535156, 12.48690224, 0.00000000, 0.00000000, 0.00000000); //object(esc_step8) (13)
	CreateDynamicObject(1698, 1054.90039062, -1854.23535156, 12.48190212, 0.00000000, 0.00000000, 0.00000000); //object(esc_step8) (14)
	CreateDynamicObject(1698, 1054.90039062, -1857.53515625, 12.48490238, 0.00000000, 0.00000000, 0.00000000); //object(esc_step8) (15)
	CreateDynamicObject(1283, 1055.66955566, -1854.27990723, 15.47527790, 0.00000000, 0.00000000, 270.00000000); //object(mtraffic1) (1)
	CreateDynamicObject(1215, 1052.10522461, -1859.23962402, 13.13463593, 0.00000000, 0.00000000, 0.00000000); //object(bollardlight) (1)
	CreateDynamicObject(1215, 1055.42968750, -1842.87402344, 13.13463593, 0.00000000, 0.00000000, 0.00000000); //object(bollardlight) (2)
	CreateDynamicObject(1215, 1051.96875000, -1842.81640625, 13.13820648, 0.00000000, 0.00000000, 0.00000000); //object(bollardlight) (3)
	CreateDynamicObject(1215, 1055.33630371, -1859.27746582, 13.13463593, 0.00000000, 0.00000000, 0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215, 1053.69738770, -1859.27380371, 13.13463593, 0.00000000, 0.00000000, 0.00000000); //object(bollardlight) (5)
	CreateDynamicObject(1233, 1052.94128418, -1859.45385742, 14.12999249, 0.00000000, 0.00000000, 180.00000000); //object(noparkingsign1) (1)
	CreateDynamicObject(1214, 1055.34387207, -1851.12438965, 12.61253357, 0.00000000, 0.00000000, 0.00000000); //object(bollard) (1)
	CreateDynamicObject(1214, 1054.34375000, -1851.12402344, 12.61253357, 0.00000000, 0.00000000, 0.00000000); //object(bollard) (2)
	CreateDynamicObject(1214, 1053.34375000, -1851.12402344, 12.61253357, 0.00000000, 0.00000000, 0.00000000); //object(bollard) (3)
	CreateDynamicObject(1214, 1052.34375000, -1851.12402344, 12.61253357, 0.00000000, 0.00000000, 0.00000000); //object(bollard) (4)
	// Casas Aeropuerto LA | By Edinson Walker | 18 Objetos
	CreateDynamicObject(12951, 1624.94666, -2178.78516, 12.55664, 0.00000, 0.00000, -91.02000);
	//- Aero puerto |
	//- Trabajo Aserrador
	CreateDynamicObject(727, -418.76709, -1793.77551, 2.25781,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(731, -431.82001, -1787.10413, 2.45866,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(734, -441.89230, -1768.45129, 4.60836,   0.00000, 0.00000, -100.80001);
	CreateDynamicObject(791, -456.07584, -1788.44702, 3.37143,   0.00000, 0.00000, -63.30000);
	CreateDynamicObject(726, -397.75208, -1770.27917, 3.63385,   0.00000, 0.00000, -99.96001);
	//-Interiores de Bancos by Yefferson
	//- Casas
	CreateObject(14865, 259.13370, 305.38049, 1000.14838,   0.00000, 0.00000, 0.00000);
	CreateObject(15033, 2205.65869, -1085.48645, 1049.47656,   0.00000, 0.00000, 0.00000);
	CreateObject(1535, 2218.36011, -1088.38489, 1049.46875,   0.00000, 0.00000, -90.00000);
	CreateObject(1567, 2214.59668, -1087.06494, 1049.46875,   0.00000, 0.00000, 0.00000);
	CreateObject(14718, 219.61659, 1277.26379, 1081.13281,   0.00000, 0.00000, 0.00000);
	CreateObject(1498, 221.85809, 1272.29016, 1081.12500,   0.00000, 0.00000, 0.00000);
	CreateObject(14713, 258.33710, 1271.09192, 1081.06250,   0.00000, 0.00000, 0.00000);
	CreateObject(1498, 262.73065, 1266.04517, 1079.24219,   0.00000, 0.00000, 0.00000);
	CreateObject(14712, 273.61560, 1244.68835, 1084.82813,   0.00000, 0.00000, 0.00000);
	CreateObject(1498, 275.82266, 1237.10156, 1083.23438,   0.00000, 0.00000, 0.00000);
	CreateObject(14714, 294.78439, 1454.53613, 1081.06250,   0.00000, 0.00000, 0.00000);
	CreateObject(1498, 294.02231, 1446.28625, 1079.24219,   0.00000, 0.00000, 0.00000);
	CreateObject(14750, 1.75480, 1348.52454, 1089.87500,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, -2.28832, 1339.14124, 1083.35938,   0.00000, 0.00000, 0.00000);
	CreateObject(14754, 56.82720, 1331.97510, 1086.80469,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 53.36470, 1322.73560, 1082.85156,   0.00000, 0.00000, 0.00000);
	CreateObject(14758, 110.28250, 1364.65344, 1084.73438,   0.00000, 0.00000, 0.00000);
	CreateObject(14757, 125.01830, 1368.62329, 1084.52344,   0.00000, 0.00000, 0.00000);
	CreateObject(14764, 110.25930, 1364.63989, 1084.73438,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 111.04979, 1364.57605, 1082.85156,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 109.54440, 1364.56702, 1082.85156,   0.00000, 0.00000, 0.00000);
	CreateObject(14708, 243.76343, 1139.50049, 1081.75781,   0.00000, 0.00000, 0.00000);
	CreateObject(14706, 198.15530, 1071.49500, 1086.41406,   0.00000, 0.00000, 0.00000);
	CreateObject(14707, 200.94640, 1021.23450, 1087.60156,   0.00000, 0.00000, 0.00000);
	CreateObject(14701, 446.51010, 1375.65417, 1085.37500,   0.00000, 0.00000, 0.00000);
	CreateObject(1506, 445.39056, 1365.22546, 1083.28125,   0.00000, 0.00000, 0.00000);
	//- gobierno
	// Lugares de Modificaciones "Cerradas" | By Edinson Walker | 20 Objetos
	CreateDynamicObject(980, -2716.371826, 217.276764, 6.192754, 0, 0, 89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(980, -2716.371826, 217.276764, 6.192754, 0, 0, 89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(980, -1936.045898, 238.765091, 36.085892, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(980, -1903.888550, 277.860413, 42.820267, 0, 0, 180, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(980, 488.477295, -1735.528442, 12.917402, 0, 0, 171, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(976, 2071.255859, -1827.541138, 12.708785, 0, 0, -89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(976, 1028.865479, -1029.366455, 31.263472, 0, 0, 179, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(980, 1043.933350, -1026.021729, 33.874954, 0, 0, 180, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(975, 720.169312, -462.474487, 17.010628, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(980, 1968.566895, 2162.555664, 12.621687, 0, 0, 270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(980, 2386.587402, 1043.470947, 12.593704, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(986, -99.714607, 1111.534424, 20.452366, 0, 0, 179, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(980, -2425.477051, 1028.070923, 52.171051, 0, 0, 180, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(976, 2001.490601, 2317.493164, 9.982223, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(985, 2393.687256, 1483.140381, 11.530980, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(985, 2405.697510, 1483.226807, 11.570413, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(969, 1843.411621, -1858.589478, 12.549690, 0, 0, 89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(980, -1421.735718, 2591.065430, 57.616653, 0, 0, 179, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(976, 2000.855103, 2303.761963, 10.004567, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObject(971, 2644.899902, -2039.394531, 11.919919, 0.000000, 90.000000, 0.000000, -1, -1, -1, MAX_RADIO_STREAM);
	//decoraciones
	CreateDynamicObject(1712, 2483.10010, -1704.59998, 12.50000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(1712, 2479.00000, -1706.00000, 12.50000,   0.00000, 0.00000, 87.99646);
	CreateDynamicObject(2311, 2481.00000, -1706.09998, 12.50000,   0.00000, 0.00000, 88.00000);
	CreateDynamicObject(2670, 2478.89990, -1687.19995, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2673, 2482.60010, -1702.40002, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 2479.50000, -1708.69995, 12.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1358, 2480.50000, -1718.80005, 13.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1712, 2435.30005, -1636.50000, 12.40000,   0.00000, 0.00000, 267.99500);
	CreateDynamicObject(17615, 2459.59375, -1695.60156, 13.59375,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2673, 2434.69995, -1639.90002, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 2434.80005, -1633.80005, 12.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1459, 2418.00000, -1694.00000, 13.40000,   0.00000, 0.00000, 328.00000);
	CreateDynamicObject(8673, 2570.10010, -2120.50000, 1.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8673, 2594.10010, -2120.50000, 1.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8673, 2570.10010, -2120.50000, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8673, 2581.19995, -2120.50000, 6.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8673, 2581.19995, -2120.50000, 9.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8673, 2594.10010, -2120.50000, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8673, 2563.89990, -2206.80005, 0.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8673, 2591.00000, -2206.69995, 0.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8673, 2611.39990, -2206.69995, 0.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11544, 836.53003, -2066.58008, 10.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 822.53998, -2067.68994, 12.53000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 825.01001, -2067.73999, 12.52000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 827.51001, -2067.66992, 12.53000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 829.95001, -2067.70996, 12.52000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 832.44000, -2067.65991, 12.53000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 834.81000, -2067.72998, 12.52000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 850.08002, -2067.71997, 12.53000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 852.56000, -2067.63989, 12.52000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 820.14001, -2067.73999, 12.52000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 847.69000, -2067.64990, 12.52000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 845.28003, -2067.70996, 12.53000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 842.81000, -2067.64990, 12.52000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 840.37000, -2067.71997, 12.53000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 838.07001, -2067.73999, 12.52000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 835.34998, -2071.62012, 4.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 835.34998, -2071.62012, -4.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 835.34998, -2071.62012, -13.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 837.71997, -2071.59009, 4.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 837.71997, -2071.59009, -4.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 837.71997, -2071.59009, -13.49000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 836.50000, -2079.94995, 9.03000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1491, 835.78003, -2075.37988, 9.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 831.34998, -2079.95996, 10.85000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 834.20001, -2084.75000, 10.86000,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(19435, 832.59003, -2084.75000, 10.86000,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(1649, 836.48999, -2084.72998, 10.61000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 840.78003, -2075.21997, 10.86000,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(19435, 839.17999, -2075.20996, 10.86000,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(19435, 832.23999, -2075.23999, 10.86000,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(19435, 833.84003, -2075.23999, 10.86000,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(3498, 834.92999, -2075.43994, 8.07000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 835.51001, -2075.42993, 8.07000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 838.10999, -2075.44995, 8.06000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 838.10999, -2075.44995, -0.95000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 837.54999, -2075.44995, -0.96000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 837.54999, -2075.44995, -9.99000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 838.10999, -2075.44995, -9.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 835.51001, -2075.42993, -0.93000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 834.92999, -2075.43994, -0.94000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 834.92999, -2075.43994, -9.98000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 835.51001, -2075.42993, -9.96000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 831.62000, -2084.56006, -0.64000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 831.62000, -2084.56006, -9.96000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.39001, -2084.60010, -0.76000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.42999, -2084.58008, -26.06000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 836.50000, -2079.98999, 12.66000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 841.65002, -2082.34009, 10.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 841.65002, -2083.93994, 10.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 841.62000, -2077.52002, 10.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 841.62000, -2075.92993, 10.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 841.67999, -2080.73999, 9.10000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3498, 841.52002, -2081.00000, 8.07000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.51001, -2081.58008, 8.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.53003, -2078.93994, 8.07000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.52002, -2078.36011, 8.07000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.51001, -2081.58008, -0.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.51001, -2081.58008, -9.94000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.52002, -2081.00000, -0.92000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.52002, -2081.00000, -9.91000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.53003, -2078.93994, -0.92000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.38000, -2078.93994, -10.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.52002, -2078.36011, -0.94000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.52002, -2078.36011, -9.96000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12950, 847.03003, -2079.92993, 5.78000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(12950, 853.29999, -2079.92993, 1.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11495, 864.57001, -2079.95996, 0.11000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11495, 874.66998, -2091.82007, 0.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11495, 855.46002, -2091.80005, 0.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11495, 886.53998, -2080.01001, 0.11000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11495, 896.64001, -2091.89990, 0.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11495, 908.51001, -2080.04004, 0.11000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11495, 918.60999, -2091.85010, 0.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2605, 833.29999, -2082.77002, 9.52000,   0.00000, 0.00000, -33.72000);
	CreateDynamicObject(1671, 832.47998, -2083.86011, 9.57000,   0.00000, 0.00000, 151.74001);
	CreateDynamicObject(1726, 832.07001, -2076.12012, 9.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1827, 833.06000, -2078.15991, 9.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 834.07001, -2080.29004, 9.12000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1726, 836.88000, -2084.13989, 9.12000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 840.62000, -2082.18994, 9.12000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1827, 838.73999, -2083.23999, 9.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19408, 836.59003, -2084.73999, 10.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 838.98999, -2084.75000, 10.86000,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(19435, 840.59998, -2084.75000, 10.86000,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(1649, 836.46997, -2084.73999, 10.61000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 837.54999, -2075.44995, 8.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 838.10999, -2075.44995, -0.95000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 837.54999, -2075.44995, -0.96000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 831.62000, -2084.56006, 8.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.39001, -2084.60010, 8.21000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.42999, -2084.58008, -26.06000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 841.40997, -2084.59009, -9.98000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 836.09998, -2084.68994, 10.61000,   0.00000, 0.00000, 180.31000);
	CreateDynamicObject(19379, 834.11877, -1380.18176, 21.43816,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 842.14325, -1380.16992, 21.45820,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 842.12970, -1370.57397, 21.45820,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 842.10559, -1361.00439, 21.45820,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 831.64093, -1370.59448, 21.45820,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 831.62433, -1360.99084, 21.45820,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 821.11938, -1360.97241, 21.45820,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 812.95135, -1360.97693, 21.46157,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 812.96143, -1351.37085, 21.46360,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 812.96271, -1342.24133, 21.46160,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 823.43762, -1351.35437, 21.46360,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 833.86658, -1351.37390, 21.46157,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 823.45398, -1342.23657, 21.46560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 833.91449, -1342.23547, 21.46360,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 842.08124, -1341.53870, 24.96497,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 852.57520, -1341.55042, 24.96497,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 862.83905, -1341.54504, 24.96497,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 862.84161, -1351.18201, 24.96500,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 852.35187, -1351.16980, 24.96500,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 842.07019, -1351.17004, 24.96500,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 841.63977, -1357.72107, 25.02170,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 851.28290, -1357.73438, 25.02170,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 860.92322, -1357.75024, 25.02170,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 863.24341, -1357.75171, 25.02170,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 866.32092, -1364.30725, 25.02170,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 872.47449, -1367.37415, 23.22549,   22.00000, 90.00000, 90.00000);
	CreateDynamicObject(3850, 847.38696, -1383.20801, 22.01992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 847.38721, -1379.76807, 22.01990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 847.38721, -1376.34009, 22.01990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 847.38867, -1372.90002, 22.01990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 847.38660, -1369.47253, 22.01990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 847.35571, -1366.02405, 22.01990,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3850, 847.32617, -1362.58350, 22.01990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 847.32532, -1359.15967, 22.01990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 845.59357, -1385.00037, 22.01492,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 845.59357, -1385.00037, 22.01492,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 842.13361, -1385.00037, 22.01490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 845.59357, -1385.00037, 22.01492,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 838.69080, -1385.00110, 22.01490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 835.26611, -1385.00146, 22.01490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 831.84052, -1385.00220, 22.01490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16151, 841.18292, -1360.11755, 21.86800,   0.00000, 0.00000, 88.00000);
	CreateDynamicObject(1541, 843.11432, -1359.07813, 23.01832,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1545, 844.07739, -1359.11914, 23.07462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 829.58490, -1384.48511, 22.27880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 845.46033, -1359.13062, 21.54400,   0.00000, 0.00000, -2.00000);
	CreateDynamicObject(1472, 828.86798, -1383.04919, 21.90031,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1472, 828.86798, -1381.58521, 21.90030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1472, 828.86798, -1380.12122, 21.90030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1472, 828.86798, -1378.65723, 21.90030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1472, 828.86798, -1377.19324, 21.90030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1472, 828.86719, -1375.74927, 21.90030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1472, 828.86719, -1374.28528, 21.90030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1472, 828.86719, -1372.82129, 21.90030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1472, 828.86719, -1371.35730, 21.90030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1472, 828.86719, -1369.89331, 21.90030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1472, 828.86719, -1368.42932, 21.90030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1472, 828.86719, -1366.96533, 21.90030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1472, 828.86719, -1365.50134, 21.90030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1472, 828.87720, -1364.52954, 21.90030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1472, 828.31506, -1363.96912, 21.90030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1472, 826.85107, -1363.96912, 21.90030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1472, 825.34686, -1363.96558, 21.90030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1472, 823.88287, -1363.96558, 21.90030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1472, 822.41888, -1363.96558, 21.90030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1472, 820.95490, -1363.96558, 21.90030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1472, 819.49091, -1363.96558, 21.90030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1472, 818.02692, -1363.96558, 21.90030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1472, 816.56293, -1363.96558, 21.90030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1472, 815.09888, -1363.96558, 21.90030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1472, 813.63489, -1363.96558, 21.90030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1472, 812.17090, -1363.96558, 21.90030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1472, 810.66418, -1363.97290, 21.90030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1472, 809.20020, -1363.97290, 21.90030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1472, 808.46820, -1363.97290, 21.89830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1361, 829.56976, -1363.23682, 22.27880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8572, 835.92615, -1356.55591, 23.82050,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 864.57739, -1361.47559, 25.61310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 862.85925, -1359.73975, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 859.41595, -1359.73572, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 855.97577, -1359.73669, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 852.54181, -1359.73645, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 849.08820, -1359.73669, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 845.64630, -1359.69702, 25.61310,   0.00000, 0.00000, -91.00000);
	CreateDynamicObject(3850, 842.20337, -1359.64026, 25.61310,   0.00000, 0.00000, -91.00000);
	CreateDynamicObject(3850, 838.75861, -1359.55017, 25.61310,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(3850, 864.57080, -1364.93787, 25.61310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 864.57507, -1367.37756, 25.61310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 866.32947, -1369.10474, 25.61310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 868.06519, -1363.90771, 25.61310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 868.06348, -1360.45935, 25.61310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 868.06427, -1357.01074, 25.61310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 868.07483, -1350.12903, 25.61310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 868.06604, -1353.56409, 25.61310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 868.07605, -1346.66797, 25.61310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 868.06659, -1343.20837, 25.61310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 868.07086, -1339.74841, 25.61310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 868.05237, -1338.50793, 25.61310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 866.31329, -1336.74243, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 862.87213, -1336.74487, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 859.41144, -1336.74841, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 855.96509, -1336.74915, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 852.50482, -1336.74976, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 849.04279, -1336.74976, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 845.58185, -1336.74561, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 842.12036, -1336.74084, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 838.65814, -1336.74963, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19458, 832.69263, -1342.18286, 24.91060,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19428, 835.15228, -1340.61035, 23.18740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19458, 836.19818, -1342.17871, 24.91060,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19439, 834.96252, -1337.45264, 23.18750,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19439, 836.56409, -1337.45764, 23.18750,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19439, 838.08606, -1337.46741, 23.18750,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19439, 831.03229, -1340.07690, 23.18750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19439, 831.03522, -1341.51843, 23.18750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19439, 831.03265, -1343.10144, 23.18750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19439, 831.03271, -1344.54944, 23.18750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19439, 831.03271, -1346.13843, 23.18750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19439, 831.75281, -1346.87268, 23.18750,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19439, 833.35278, -1346.87268, 23.18750,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19439, 834.95282, -1346.87268, 23.18750,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19439, 836.55280, -1346.87268, 23.18750,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19439, 838.15277, -1346.87268, 23.18750,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19385, 834.43842, -1339.12830, 23.19448,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19385, 834.43842, -1345.35425, 23.19450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19385, 834.43842, -1342.24121, 23.19450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 836.75232, -1340.61096, 23.18740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 835.23230, -1337.56421, 23.18740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 836.80133, -1337.56616, 23.18740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 837.52643, -1338.45227, 23.18740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 837.53363, -1339.75732, 23.18740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 835.19714, -1343.86987, 23.18740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 836.77716, -1343.86707, 23.18740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 835.61469, -1346.84753, 23.18740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 837.22852, -1346.85693, 23.18740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 835.22162, -1346.85071, 23.18740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19439, 833.38647, -1337.45264, 23.18750,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19439, 831.78851, -1337.45264, 23.18750,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1502, 834.37262, -1338.32813, 21.55080,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1502, 834.37543, -1341.45959, 21.55080,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1502, 834.38281, -1344.56201, 21.55080,   0.02000, 0.04000, -90.00000);
	CreateDynamicObject(2742, 833.17950, -1346.62915, 23.01263,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2742, 832.09949, -1346.62915, 23.01260,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2515, 831.40271, -1344.01636, 22.69629,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2515, 831.40271, -1342.93640, 22.69630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2515, 831.40271, -1341.85645, 22.69630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2515, 831.40271, -1340.77637, 22.69630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 837.54388, -1341.48413, 23.18740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 837.54694, -1343.06470, 23.18740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 837.53064, -1344.70435, 23.18740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 837.53033, -1346.06458, 23.18740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11706, 833.37488, -1337.77051, 21.55110,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1778, 832.89655, -1337.57373, 21.55170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2525, 836.94287, -1339.29346, 21.55190,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2525, 836.91901, -1345.57446, 21.55190,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2602, 837.49750, -1341.23792, 22.34740,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(2602, 837.49750, -1342.04785, 22.34740,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(2602, 837.49750, -1342.85791, 22.34740,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(2602, 837.49750, -1343.66785, 22.34740,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(19454, 836.19653, -1342.41357, 21.46461,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(638, 830.58813, -1343.72559, 22.17200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 830.58118, -1341.07214, 22.17200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19873, 837.27856, -1337.83716, 21.61228,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19873, 837.12085, -1337.77124, 21.61228,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19873, 837.19580, -1344.31885, 21.59196,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19873, 837.30817, -1344.13892, 21.59196,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19873, 837.07837, -1344.09497, 21.59196,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2796, 830.98083, -1338.48035, 24.64742,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19458, 837.54980, -1351.71936, 22.61601,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 837.54919, -1354.04822, 22.61600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 842.29102, -1358.94312, 22.61600,   0.00000, 0.00000, 88.00000);
	CreateDynamicObject(19458, 842.53381, -1358.92786, 22.61600,   0.00000, 0.00000, 88.00000);
	CreateDynamicObject(14537, 856.35602, -1346.16040, 27.01831,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19129, 818.30035, -1374.41614, 22.52033,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 823.79504, -1380.19885, 22.46661,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 823.81104, -1370.57910, 22.46661,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 823.82397, -1368.57385, 22.46460,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 813.32312, -1368.57361, 22.46460,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 812.73462, -1368.58435, 22.46260,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 808.26923, -1373.24695, 22.46610,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(19443, 808.25641, -1374.78503, 22.47010,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(19443, 808.25336, -1376.61450, 22.47410,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(19443, 808.24500, -1378.33447, 22.48210,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(19443, 808.24622, -1381.81323, 22.48810,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(19443, 808.19971, -1383.31201, 22.49410,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(19443, 809.80670, -1383.31226, 22.49010,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(19443, 811.40649, -1383.31067, 22.48810,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(3850, 827.26239, -1385.00488, 23.07879,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 823.80688, -1384.99878, 23.07879,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 820.36401, -1385.00354, 23.07879,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 809.29889, -1385.04565, 23.07879,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 807.43439, -1383.33923, 23.07880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 807.43500, -1379.90271, 23.07880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 807.43805, -1376.44238, 23.07880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 807.46899, -1373.00134, 23.07880,   0.00000, 0.00000, -1.00000);
	CreateDynamicObject(3850, 807.49329, -1369.54016, 23.07880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 807.49225, -1366.07410, 23.07880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 807.49219, -1365.51379, 23.07880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2685, 831.14716, -1344.01575, 23.52350,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2685, 831.14722, -1342.97473, 23.52350,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2685, 831.14722, -1341.93372, 23.52350,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2685, 831.15057, -1340.79272, 23.52350,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19608, 812.26019, -1380.40735, 22.55234,   0.00000, 0.00000, 155.00000);
	CreateDynamicObject(19370, 810.81622, -1377.46423, 21.93448,   0.00000, 0.00000, 65.00000);
	CreateDynamicObject(19370, 813.69800, -1378.80762, 21.93450,   0.00000, 0.00000, 65.00000);
	CreateDynamicObject(1826, 810.93152, -1378.10303, 22.60060,   0.00000, 0.00000, -24.00000);
	CreateDynamicObject(1826, 812.91443, -1378.98608, 22.60060,   0.00000, 0.00000, -24.00000);
	CreateDynamicObject(14820, 812.62604, -1378.76904, 23.53005,   0.00000, 0.00000, -24.00000);
	CreateDynamicObject(19612, 810.95184, -1378.26733, 23.42256,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19611, 813.96625, -1379.70959, 22.20387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19610, 813.88324, -1379.74402, 23.85570,   14.00000, 6.00000, 110.00000);
	CreateDynamicObject(19808, 811.85626, -1378.82703, 23.43763,   0.00000, 0.00000, -24.00000);
	CreateDynamicObject(19835, 813.71149, -1379.45166, 23.49483,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, 810.95978, -1378.27539, 23.62330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19613, 810.48267, -1377.08179, 22.58540,   0.00000, 0.00000, 155.00000);
	CreateDynamicObject(19613, 811.15015, -1377.38245, 22.58540,   0.00000, 0.00000, 155.00000);
	CreateDynamicObject(19613, 811.81671, -1377.70459, 22.58540,   0.00000, 0.00000, 155.00000);
	CreateDynamicObject(19613, 812.48981, -1378.01270, 22.58540,   0.00000, 0.00000, 155.00000);
	CreateDynamicObject(19613, 813.15863, -1378.32483, 22.58540,   0.00000, 0.00000, 155.00000);
	CreateDynamicObject(19613, 813.83466, -1378.63574, 22.58540,   0.00000, 0.00000, 155.00000);
	CreateDynamicObject(19613, 814.48511, -1378.94727, 22.58540,   0.00000, 0.00000, 155.00000);
	CreateDynamicObject(2176, 809.37964, -1383.40527, 25.22960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 814.19055, -1387.14087, 13.12498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 818.45135, -1387.10999, 13.12498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 819.46466, -1389.06592, 13.13100,   0.00000, 0.00000, 47.00000);
	CreateDynamicObject(2773, 813.11841, -1388.98584, 13.13100,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(1536, 814.71869, -1385.70679, 12.58796,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 817.73370, -1385.67871, 12.58800,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2714, 816.21411, -1385.89661, 15.57780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3524, 819.04254, -1387.50806, 13.96578,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 838.56488, -1355.95435, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 841.99548, -1355.95569, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 851.00726, -1355.96301, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 854.46851, -1355.96472, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 857.92450, -1355.97253, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 861.37048, -1355.97400, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 864.83063, -1355.97205, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 866.31042, -1355.97278, 25.61310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 836.84668, -1354.23328, 25.61310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 836.84796, -1350.78760, 25.61310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 836.84857, -1349.02026, 25.61310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 835.09302, -1346.91101, 25.50054,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 832.69885, -1346.90991, 25.50054,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 830.96912, -1345.17798, 25.50050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 830.97650, -1341.72583, 25.50050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 830.98969, -1339.10120, 25.50050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 832.74573, -1337.39624, 25.50054,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 835.14215, -1337.37561, 25.50054,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1361, 837.33600, -1337.32043, 25.77489,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 837.18439, -1347.22632, 25.77489,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 843.94183, -1355.45471, 25.77489,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 849.00403, -1355.46289, 25.77489,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2125, 861.90338, -1350.21155, 25.39097,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2125, 861.92297, -1348.19080, 25.39097,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2125, 860.73285, -1351.98706, 25.39097,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2125, 858.33228, -1351.97791, 25.39097,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2125, 853.96826, -1351.88965, 25.39097,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2125, 851.98828, -1351.91675, 25.39097,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 835.96973, -1346.14172, 24.99780,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, 831.71619, -1343.63928, 24.99780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 831.71484, -1340.20959, 24.99780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1704, 832.37360, -1345.78418, 24.99760,   0.00000, 0.00000, 132.00000);
	CreateDynamicObject(3094, 834.71448, -1339.63672, 24.99780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3094, 834.81549, -1343.05042, 24.99783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 835.33649, -1343.32617, 25.82380,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(338, 835.38654, -1342.93555, 25.82380,   0.00000, -90.00000, -16.00000);
	CreateDynamicObject(338, 835.10638, -1340.00488, 25.82380,   0.00000, -90.00000, -16.00000);
	CreateDynamicObject(338, 835.21454, -1339.42407, 25.82380,   0.00000, -90.00000, 2.00000);
	CreateDynamicObject(1723, 846.73120, -1370.38184, 21.53970,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 846.71930, -1376.64502, 21.53970,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 846.83203, -1380.90894, 21.53970,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 842.20154, -1384.42981, 21.54040,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, 834.55341, -1384.47729, 21.54040,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2315, 840.54865, -1383.09155, 21.38606,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 832.96887, -1383.26074, 21.38606,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 837.18738, -1384.49719, 22.19400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(638, 844.63721, -1384.57690, 22.19400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(638, 847.02460, -1374.57471, 22.17605,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 846.96423, -1368.29053, 22.17605,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 807.67444, -1362.00366, 22.02283,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 807.67377, -1358.56104, 22.02283,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 807.67432, -1355.10144, 22.02280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 807.67352, -1351.66431, 22.02280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 807.67468, -1348.21863, 22.02280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 807.67749, -1344.77490, 22.02280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 807.67865, -1341.32068, 22.02280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 807.67932, -1339.13245, 22.02280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 809.40991, -1337.38501, 22.02312,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 812.86853, -1337.38550, 22.02310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 816.28918, -1337.38513, 22.02310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 819.73407, -1337.38843, 22.02310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 823.17676, -1337.40491, 22.02310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 826.63019, -1337.41357, 22.02310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 830.07520, -1337.40063, 22.02310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2229, 814.66620, -1379.19373, 22.58380,   0.00000, 0.00000, -205.00000);
	CreateDynamicObject(2229, 809.65808, -1376.82654, 22.58380,   0.00000, 0.00000, -205.00000);
	CreateDynamicObject(2232, 829.62738, -1384.57874, 23.16063,   0.00000, 0.00000, -135.00000);
	CreateDynamicObject(2232, 829.64532, -1363.21985, 23.17951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2232, 807.36957, -1363.95581, 24.85530,   11.00000, 0.00000, 69.00000);
	CreateDynamicObject(2232, 851.17981, -1347.87805, 25.63026,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2232, 855.96814, -1351.17188, 26.76530,   0.00000, 0.00000, -69.00000);
	CreateDynamicObject(2232, 861.49554, -1344.57019, 25.63695,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 837.70074, -1359.75696, 23.09734,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(19603, 811.55457, -1341.38965, 22.09088,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 812.31598, -1338.83459, 22.02310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 814.05640, -1340.57471, 22.02310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 814.05768, -1342.16614, 22.02310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 812.32452, -1343.89490, 22.02310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 810.70398, -1343.89441, 22.02310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3850, 808.97900, -1342.16772, 22.02310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 808.99414, -1340.54431, 22.02310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 810.71930, -1338.80640, 22.02310,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(7922, 813.80017, -1343.81030, 20.74843,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(7922, 809.07446, -1343.64636, 20.74840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7922, 809.25018, -1338.91199, 20.74840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7922, 813.98743, -1339.10925, 20.74840,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3515, 811.63318, -1341.42273, 22.08618,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2241, 836.99304, -1356.60144, 25.54611,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2241, 814.40161, -1344.35815, 22.60144,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2241, 808.36481, -1344.40527, 22.60144,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(639, 864.53229, -1365.00513, 22.92640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(639, 867.76459, -1351.74609, 22.37080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 843.18042, -1378.19604, 22.17920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 843.58990, -1377.83423, 22.19419,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 839.22394, -1360.99353, 22.49492,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1669, 841.72498, -1361.11267, 22.65296,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1484, 838.12018, -1360.83862, 22.44810,   0.00000, -53.00000, 0.00000);
	CreateDynamicObject(19428, 811.55518, -1355.58948, 22.02061,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2783, 811.92108, -1353.21765, 22.10401,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 811.54468, -1350.78906, 22.02061,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2783, 811.19312, -1353.19873, 22.10400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2636, 810.18170, -1354.53247, 22.11300,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2636, 810.16437, -1355.25671, 22.11300,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2636, 810.15991, -1355.96106, 22.11300,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2636, 810.15552, -1356.68152, 22.11300,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2636, 813.09576, -1356.64661, 22.11300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2636, 813.11328, -1355.19324, 22.11300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2636, 813.10706, -1351.21802, 22.11300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2636, 810.24420, -1350.43384, 22.11300,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2636, 810.17975, -1351.95398, 22.11300,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1724, 810.78088, -1344.53235, 21.54813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1724, 814.68036, -1342.00903, 21.54800,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 815.83252, -1338.23193, 21.54801,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 822.13092, -1338.28333, 21.54801,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 819.86444, -1338.11011, 22.19400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2188, 817.06244, -1356.05139, 22.49916,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2188, 820.26440, -1356.03577, 22.49916,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1724, 816.28778, -1354.81384, 21.54813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1724, 819.89740, -1354.75623, 21.54813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2636, 821.81720, -1357.54724, 22.12580,   0.00000, 0.00000, -62.00000);
	CreateDynamicObject(2636, 820.44397, -1358.06665, 22.12580,   0.00000, 0.00000, -80.00000);
	CreateDynamicObject(2636, 818.81763, -1357.47046, 22.12580,   0.00000, 0.00000, -130.00000);
	CreateDynamicObject(2636, 816.81982, -1358.03101, 22.12580,   0.00000, 90.00000, -33.00000);
	CreateDynamicObject(2636, 817.94434, -1358.04346, 22.12580,   0.00000, 0.00000, -62.00000);
	CreateDynamicObject(2636, 815.28442, -1357.41956, 22.12580,   0.00000, 0.00000, -130.00000);
	CreateDynamicObject(19458, 835.81372, -1349.71448, 23.19820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19458, 835.80945, -1348.03162, 24.88671,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(2371, 836.31018, -1348.33337, 21.54610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2399, 833.04321, -1347.15906, 22.14812,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2399, 833.66321, -1347.15906, 22.14810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2399, 832.42322, -1347.15906, 22.14810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2394, 835.67877, -1347.94824, 22.21260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2394, 835.67877, -1348.62024, 22.21260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2390, 833.42444, -1349.38489, 22.46508,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2390, 832.61737, -1349.38489, 22.46510,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1824, 818.51971, -1350.62891, 21.54706,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2115, 831.37372, -1347.88489, 21.54910,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2636, 832.69745, -1348.28687, 22.18482,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2059, 831.26349, -1348.64819, 22.36857,   0.00000, 0.00000, 62.00000);
	CreateDynamicObject(19152, 830.91571, -1346.96179, 24.75810,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(19152, 817.05487, -1380.21448, 25.67850,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(638, 832.35352, -1350.21643, 22.21819,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 835.81927, -1350.21680, 22.21819,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11711, 846.18182, -1359.16870, 24.20494,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18651, 808.38464, -1385.09106, 22.54404,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18651, 810.23260, -1385.09106, 22.54400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18651, 822.37659, -1385.09106, 22.54400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18651, 824.37457, -1385.09106, 22.54400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18651, 808.38464, -1385.09106, 22.54404,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18651, 826.36646, -1385.10449, 22.54400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18651, 828.04431, -1385.10522, 22.54400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2241, 814.36011, -1338.57336, 22.60144,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2241, 808.53357, -1338.38074, 22.60144,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 816.10114, -1339.62769, 21.44613,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 822.39252, -1339.75000, 21.44613,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14467, 833.91693, -1348.65234, 27.65250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3471, 836.31726, -1357.89282, 22.71543,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(8674, 870.11407, -1337.47095, 13.95989,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 875.27606, -1337.47266, 13.95989,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 907.41748, -1360.08142, 13.70328,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 844.91858, -1384.26428, 13.51871,   0.00000, 0.00000, -3.00000);
	CreateDynamicObject(8674, 862.87164, -1384.90076, 13.51870,   0.00000, 0.00000, -1.00000);
	CreateDynamicObject(1432, 832.93750, -1378.20032, 21.58579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 838.19818, -1378.15149, 21.58579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 843.35730, -1377.90662, 21.58579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 838.01514, -1372.07166, 21.58579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 832.99323, -1372.13904, 21.58579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 842.91876, -1371.88806, 21.58579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 833.07947, -1366.09717, 21.58579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 838.43823, -1365.73499, 21.58579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 843.02673, -1365.62158, 21.58579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 825.13062, -1350.71912, 21.58579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 824.76569, -1344.86218, 21.58579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 818.92767, -1344.67859, 21.58579,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 838.56110, -1352.81384, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 843.07367, -1352.71777, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 848.05548, -1352.63281, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 848.21069, -1347.60193, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 842.80292, -1347.52234, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 838.19037, -1342.88635, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 842.72437, -1343.14160, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 848.33936, -1342.91272, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 848.53900, -1338.48071, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 842.45032, -1338.38916, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 854.02521, -1338.64319, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 859.21820, -1338.61182, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 865.12665, -1339.03601, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 865.35071, -1344.43127, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 865.27960, -1349.43188, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 865.32922, -1354.24719, 25.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3934, 891.84949, -1373.61365, 24.16372,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19820, 851.97388, -1350.62268, 26.18495,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19820, 853.50549, -1350.64087, 26.18495,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19824, 858.29095, -1350.46289, 26.18543,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19824, 860.26782, -1350.71472, 26.18543,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2687, 834.34857, -1340.72571, 23.31100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2686, 832.83374, -1337.57983, 23.74341,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3524, 813.62048, -1387.60901, 13.96578,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16151, 1299.64050, -785.65228, 87.65184,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1704, 1296.67468, -792.85168, 87.31060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1704, 1301.06128, -791.88910, 87.31060,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1297.93298, -790.67383, 87.31033,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1299.99683, -794.05609, 87.31030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2115, 1298.29614, -792.41455, 86.90247,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19786, 1294.94385, -789.69873, 89.47276,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2231, 1294.67957, -790.27441, 87.62028,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2231, 1294.69946, -788.61206, 87.62030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1227, 2204.80005, -1319.80005, 23.75000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1265, 2204.89990, -1318.09998, 23.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 2171.89990, -1507.09998, 23.30000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1227, 2171.69995, -1508.80005, 23.70000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(12957, 2115.29980, -1171.20020, 24.00000,   2.00000, 0.00000, 49.99900);
	CreateDynamicObject(1224, 2123.89990, -1167.59998, 23.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1224, 2146.00000, -1250.40002, 24.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1224, 2133.80005, -1338.40002, 25.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 2102.39990, -1321.69995, 25.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 2126.39990, -1363.09998, 24.79900,   0.00000, 90.00000, 240.00000);
	CreateDynamicObject(1328, 2234.80005, -1469.50000, 23.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 2258.10010, -1467.50000, 23.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 2254.39990, -1397.19995, 23.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 2231.60010, -1280.00000, 24.85000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 2190.00000, -1277.09998, 24.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 2208.39990, -1240.09998, 23.65000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 2189.39990, -1352.09998, 24.78000,   0.00000, 90.00000, 239.99600);
	CreateDynamicObject(1328, 2188.89990, -1237.30005, 23.33000,   0.00000, 90.00000, 50.00000);
	CreateDynamicObject(1428, 2240.69995, -1407.69995, 24.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1428, 2162.69995, -1448.50000, 26.10000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1428, 2150.19995, -1355.69995, 26.10000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1428, 2129.60010, -1253.50000, 24.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(960, 2112.89990, -1234.40002, 24.78000,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(960, 2183.89990, -1401.80005, 24.87000,   0.00000, 0.00000, 19.99500);
	CreateDynamicObject(3035, 2225.00000, -1401.80005, 23.70000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2971, 2178.50000, -1417.09998, 24.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2744, 2223.89990, -1434.00000, 25.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2759, 2223.30005, -1438.09998, 23.03000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1777, 2238.60010, -1461.00000, 23.30000,   0.00000, 90.00000, 200.00000);
	CreateDynamicObject(1733, 2134.69995, -1348.69995, 25.00000,   270.00000, 90.00000, 340.00000);
	CreateDynamicObject(1462, 2083.69995, -1196.19995, 22.85000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1462, 2105.69995, -1272.30005, 24.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1450, 2109.00000, -1324.40002, 25.05000,   0.00000, 0.00000, 92.00000);
	CreateDynamicObject(1450, 2194.69995, -1249.80005, 23.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1441, 2203.89990, -1197.09998, 23.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1441, 2120.39990, -1196.19995, 23.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1439, 2123.19995, -1196.19995, 22.90000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1438, 2130.19995, -1255.90002, 22.95000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1438, 2128.00000, -1334.50000, 24.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1438, 2159.69995, -1452.30005, 24.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1431, 2180.69995, -1453.80005, 25.05000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1431, 2236.00000, -1404.09998, 23.45000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1431, 2257.69995, -1273.90002, 24.85000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1358, 2055.60010, -1102.30005, 24.68000,   0.00000, 0.00000, 3.00000);
	CreateDynamicObject(1357, 2228.19995, -1241.50000, 24.90000,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1349, 2207.60010, -1331.90002, 23.35000,   90.00000, 0.00000, 49.99900);
	CreateDynamicObject(1338, 2196.60010, -1402.69995, 25.25000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1220, 2162.39990, -1398.50000, 24.85000,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(1220, 2151.30005, -1355.50000, 24.85000,   0.00000, 0.00000, 29.99800);
	CreateDynamicObject(2670, 2139.60010, -1391.80005, 23.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2670, 2222.19995, -1407.19995, 23.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2670, 2215.60010, -1259.40002, 22.97000,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(2671, 2099.00000, -1360.09998, 23.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2673, 2124.30005, -1469.19995, 22.99900,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(2673, 2201.50000, -1502.00000, 23.10000,   0.00000, 0.00000, 19.99500);
	CreateDynamicObject(2676, 2301.39990, -1502.59998, 24.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2677, 2356.19995, -1472.00000, 23.20000,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(922, 2160.39990, -1435.40002, 25.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(923, 2269.30005, -1464.19995, 23.65000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1328, 2190.60010, -1469.00000, 25.35000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2110, 2178.19995, -1438.30005, 24.50000,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(1770, 2087.10010, -1321.40002, 23.00000,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(1768, 2228.60010, -1251.00000, 24.35000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1737, 2259.80005, -1431.69995, 22.90000,   0.00000, 0.00000, 85.00000);
	CreateDynamicObject(1709, 2258.60010, -1433.40002, 22.95000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1712, 2261.80005, -1428.90002, 23.00000,   0.00000, 0.00000, 300.00000);
	CreateDynamicObject(1755, 2185.69995, -1406.80005, 24.45000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1762, 2113.69995, -1267.80005, 24.40000,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(2063, 2124.30005, -1178.00000, 23.80000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1280, 2213.80005, -1331.69995, 23.35000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1280, 2221.10010, -1312.09998, 23.35000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1432, 2120.00000, -1351.69995, 24.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1679, 2085.89990, -1283.19995, 24.95000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1810, 2150.50000, -1319.40002, 24.62000,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(1810, 2150.30005, -1397.90002, 24.70000,   0.00000, 0.00000, 310.00000);
	CreateDynamicObject(1810, 2261.60010, -1432.80005, 22.88000,   0.00000, 0.00000, 260.00000);
	CreateDynamicObject(2096, 2105.30005, -1333.09998, 24.49900,   0.00000, 0.00000, 340.00000);
	CreateDynamicObject(2121, 2088.80005, -1322.00000, 23.40000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2121, 2087.69995, -1319.19995, 23.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2121, 2086.19995, -1320.00000, 23.40000,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(1487, 2088.10010, -1320.90002, 24.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1510, 2087.30005, -1321.09998, 23.82000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 2086.69995, -1319.59998, 23.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2673, 2087.19995, -1321.00000, 23.10000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1543, 2261.10010, -1428.30005, 22.95000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 2260.80005, -1438.09998, 23.91000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 2119.69995, -1351.59998, 25.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 2259.69995, -1431.69995, 23.73000,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1666, 2260.10010, -1430.59998, 23.74000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 2266.00000, -1425.69995, 23.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2673, 2259.00000, -1431.19995, 23.10000,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(1512, 2150.89990, -1397.90002, 24.95000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2673, 2220.60010, -1423.50000, 23.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2671, 2230.30005, -1495.40002, 22.80000,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(2674, 2214.80005, -1333.19995, 22.99000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2670, 2262.89990, -1265.09998, 23.10000,   0.00000, 0.00000, 330.00000);
	CreateDynamicObject(1359, 2213.69995, -1334.90002, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1359, 2223.39990, -1312.09998, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1415, 2255.10010, -1341.00000, 22.99000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1431, 2390.69995, -1468.50000, 23.58000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 2300.50000, -1548.19995, 26.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2121, 2296.69995, -1546.90002, 26.30000,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(2121, 2298.30005, -1545.69995, 26.30000,   0.00000, 0.00000, 230.00000);
	CreateDynamicObject(1760, 2318.19995, -1512.00000, 24.15000,   0.00000, 2.00000, 20.00000);
	CreateDynamicObject(1810, 2322.00000, -1512.40002, 24.15000,   0.00000, 0.00000, 330.00000);
	CreateDynamicObject(2673, 2321.00000, -1512.80005, 24.38000,   354.00000, 0.00000, 19.99500);
	//garage puertas pd
	//ammunation
	//Ammu Nation exteriores adornos
	CreateDynamicObject(2773, 1366.09998, -1277.40002, 13.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2773, 1366.09998, -1282.30005, 13.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2773, 1364.19995, -1277.40002, 13.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2773, 1364.19995, -1282.30005, 13.10000,   0.00000, 0.00000, 272.00000);
	CreateDynamicObject(3578, 1493.50000, -1297.80005, 10.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1363.90002, -1285.59998, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1363.80005, -1273.90002, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, 1503.80005, -1026.09998, 24.30000,   0.00000, 0.00000, 86.00000);
	CreateDynamicObject(1251, 1365.40002, -1287.80005, 12.70000,   0.00000, 0.00000, 312.00000);
	CreateDynamicObject(1251, 1365.50000, -1291.50000, 12.70000,   0.00000, 0.00000, 311.99500);
	CreateDynamicObject(1251, 1365.69995, -1295.30005, 12.70000,   0.00000, 0.00000, 311.99500);
	CreateDynamicObject(1251, 1365.80005, -1299.19995, 12.70000,   0.00000, 0.00000, 311.99500);
	CreateDynamicObject(1251, 1367.59998, -1294.19995, 12.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1367.59998, -1289.30005, 12.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2232, 1512.09998, -663.00000, 95.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2232, 1515.09998, -663.09998, 95.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 1515.00000, -661.70001, 95.10000,   0.00000, 0.00000, 309.75000);
	CreateDynamicObject(1723, 1506.59998, -661.79999, 94.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1724, 1504.69995, -663.00000, 94.60000,   0.00000, 0.00000, 54.75000);
	CreateDynamicObject(1826, 1513.00000, -663.00000, 94.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1515.69995, -675.29999, 94.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 1515.80005, -678.29999, 93.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 1512.69995, -678.29999, 93.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14820, 1513.50000, -663.09998, 95.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2833, 1513.00000, -664.90002, 94.60000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(355, 1369.19995, -1278.69995, 15.70000,   0.00000, 0.00000, 284.00000);
	//CARPINTERO
	CreateDynamicObject(3624, 1883.661743, -1855.222167, 16.784078, 0.000000, 0.000000, 88.399932, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1684, 1899.405517, -1874.428344, 13.965169, -0.500000, 0.299999, -89.799964, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(19313, 1868.541503, -1836.174926, 15.866222, 0.000000, 0.000000, -4.199995, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(19313, 1861.652832, -1842.762573, 15.866780, 0.000000, 0.000000, -89.799942, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(19313, 1864.114746, -1856.375854, 15.866780, 0.000000, 0.000000, -70.199981, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(19313, 1901.452270, -1849.479492, 15.839826, 0.000000, 0.000000, -89.799987, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(19313, 1901.501098, -1863.499633, 15.839826, 0.000000, 0.000000, -89.799987, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(19313, 1894.544067, -1840.971435, 15.839715, 0.000000, 0.000000, -12.700017, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(19313, 1880.886352, -1837.894653, 15.839715, 0.000000, 0.000000, -12.700017, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(942, 1864.394653, -1837.169555, 14.846750, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(942, 1869.666870, -1837.354858, 14.846750, 0.000000, 0.000000, -4.099998, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(2567, 1862.801513, -1840.891723, 14.426465, 0.000000, 0.000000, -88.999984, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(16599, 1868.996948, -1860.871582, 17.199834, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(2636, 1864.330810, -1852.572021, 13.138710, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(2636, 1864.330810, -1853.382324, 13.138710, 0.000000, 0.000000, -45.099994, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(2636, 1863.321655, -1852.369873, 13.138710, 0.000000, 0.000000, -85.299995, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(2636, 1863.577636, -1853.041381, 13.138710, 0.000000, 0.000000, -85.299995, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(2636, 1863.997802, -1854.120483, 13.138710, 0.000000, 0.000000, 177.900039, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(2180, 1864.819702, -1855.630126, 12.489136, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(2180, 1864.819702, -1854.699707, 12.489136, 0.000000, 0.000000, 33.799995, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(2180, 1865.379638, -1857.296752, 12.489136, 0.000000, 0.000000, -56.200004, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(2180, 1867.012573, -1856.324340, 12.489134, 0.000000, 0.000000, -118.899993, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(2205, 1868.971801, -1858.090087, 12.558339, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(2205, 1867.360351, -1857.765991, 12.558339, 0.000000, 0.000000, -52.899993, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(2205, 1869.481689, -1856.161254, 12.558339, 0.000000, 0.000000, -155.499954, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.474487, -1847.810424, 12.910184, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.444335, -1849.739746, 12.910184, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.414184, -1851.650024, 12.910184, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.383666, -1853.579956, 12.910184, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.377685, -1852.669555, 13.490181, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.415893, -1850.838989, 13.490181, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.446533, -1848.899169, 13.490181, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.477783, -1846.928710, 13.490181, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.495361, -1845.817871, 12.900176, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.525634, -1843.887329, 12.900176, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.506347, -1845.048461, 13.650176, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.482666, -1846.578369, 14.080176, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.453491, -1848.427978, 14.080176, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.422973, -1850.368408, 14.080176, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.391601, -1852.378784, 14.080176, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.360961, -1854.309082, 14.090182, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.360961, -1854.309082, 13.410178, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.340576, -1855.590332, 12.890175, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.335083, -1855.940673, 13.430175, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.335083, -1855.940673, 14.170178, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.303955, -1857.910888, 13.570172, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1463, 1900.307250, -1857.710693, 12.900172, 0.000000, 0.000000, -90.900032, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(941, 1889.579223, -1860.005859, 12.895689, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(941, 1889.579223, -1855.136108, 12.895689, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(941, 1889.579223, -1850.115844, 12.895689, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(941, 1884.258666, -1850.115844, 12.895689, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(941, 1880.137817, -1850.115844, 12.895689, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(941, 1876.166992, -1850.115844, 12.895689, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(941, 1880.137817, -1855.106567, 12.895689, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(941, 1880.137817, -1860.106811, 12.895689, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(941, 1884.258666, -1855.185546, 12.895689, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(941, 1884.258666, -1860.116333, 12.895689, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(941, 1876.166992, -1855.066406, 12.895689, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(941, 1876.166992, -1860.147216, 12.895689, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1360, 1891.919067, -1869.988037, 13.338540, 0.000000, 0.000000, 88.399978, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1360, 1874.504638, -1869.500976, 13.338540, 0.000000, 0.000000, 88.399978, -1, -1, -1, 500.00, 500.00);
    CreateDynamicObject(1472, 1873.04614, -1843.26599, 12.92170,   0.00000, 0.00000, 91.00000);

	//Mineria Exterior
    CreateDynamicObject(16001, 594.928710, 206.402069, 20.853124, 0.000000, -1.699998, 34.299995, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(17026, 558.886535, 24.595670, 14.698116, 0.899999, 1.799998, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(17026, 582.275268, -15.487844, 13.333337, 4.499999, 17.799997, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(17026, 624.800231, -35.532299, 6.868315, 4.499999, 17.799997, 48.500007, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(17026, 656.844970, -8.564515, 13.724293, -8.000003, 17.799997, 143.400009, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(17026, 649.800231, 28.851448, 8.289056, -8.000003, 17.799997, 143.400009, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(17026, 642.469177, 60.890464, 4.821337, -8.000003, 17.799997, 143.400009, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18225, 616.915649, -24.168054, 8.215231, -0.699992, 4.199998, 177.300018, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18225, 572.954956, 3.661458, 11.826625, -0.699992, 4.199998, 177.300018, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18225, 649.755981, -20.820192, 10.469035, -0.699992, 4.199998, -63.699970, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18225, 648.516235, 33.602607, 12.156888, -0.699992, 4.199998, -63.699970, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18225, 662.504211, 104.938270, 14.094134, -0.699992, 4.199998, -63.699970, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 613.546997, 3.422049, 3.796927, 0.000000, 0.000000, -173.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 610.963378, 24.464027, 3.796927, 0.000000, 0.000000, -173.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 614.639099, -5.471164, 14.466925, 0.000000, 0.000000, -173.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 627.405029, 65.251747, 3.766915, 0.000000, 0.000000, -173.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 624.504455, 88.874343, 3.766915, 0.000000, 0.000000, -173.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 649.401611, 77.211570, 22.016912, 0.000000, 0.000000, -173.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 670.100219, 73.566925, 25.646915, 0.000000, 0.000000, -173.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(17054, 611.953857, 121.807174, 6.889855, 3.500000, 0.000000, -65.100006, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3498, 603.058532, 137.548141, 9.472168, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(19379, 604.492736, 132.764266, 6.890229, 0.000000, 0.000000, 16.199998, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3498, 608.518676, 139.848175, 9.472168, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(19379, 610.026306, 135.255706, 6.936184, 1.699998, -2.899998, 16.199998, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3498, 605.935791, 138.988174, 12.197725, 22.400001, -91.799964, 22.399999, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(900, 607.725036, 130.081024, 14.143613, 5.499999, 0.199999, -3.499999, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(900, 623.901489, 125.291511, 8.872961, 0.000000, 0.000000, -74.999992, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(899, 596.050964, 127.254669, 6.590091, -4.900002, -84.899993, -16.900022, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(899, 617.031188, 132.620590, 9.355142, -149.100021, -84.899993, 31.199968, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 635.847534, 150.247421, 5.699675, 0.000000, -2.399996, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 641.268432, 142.107467, 15.345138, 0.000000, -2.399996, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 642.140319, 119.373374, 11.548455, 0.000000, -2.399996, -130.700027, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 634.354797, 126.070419, 11.548455, 0.000000, -2.399996, -130.700027, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 624.834289, 98.409049, 6.161886, 0.000000, -2.399996, -130.700027, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 628.852294, 106.224273, 18.284681, 0.000000, -2.399996, -130.700027, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 594.102478, 94.576965, 4.841577, 0.000000, -2.399996, -130.700027, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 589.692504, 106.686195, 4.577342, 0.000000, -2.399996, -130.700027, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 577.789367, 92.847221, 5.342410, 0.000000, -2.399996, -130.700027, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 582.993896, 72.674873, 5.841149, 0.000000, -2.399996, -130.700027, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 605.836486, 53.027145, 5.841149, 0.000000, -2.399996, -130.700027, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 600.076965, 46.331119, 6.211330, 0.000000, -2.399996, -130.700027, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 613.960998, 62.472782, 5.318960, 0.000000, -2.399996, -130.700027, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 560.617736, 55.324317, 7.004034, 0.000000, -2.399996, -130.700027, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 565.557495, 36.684379, 7.461316, 0.000000, -2.399996, -130.700027, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 576.408874, 49.300567, 14.780887, 0.000000, -2.399996, -130.700027, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 603.069763, 94.818878, 12.605871, 0.000000, -2.399996, -130.700027, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3214, 624.097534, 180.422760, 23.248598, 0.899995, 0.500000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(10985, 618.568054, 167.786224, 13.232488, -4.899998, 0.200000, 158.100036, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18248, 621.664367, 171.514083, 20.526260, 0.000000, 0.000000, -96.499977, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16076, 601.305419, 165.353790, 16.029081, 1.699998, 5.599997, -47.399997, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16309, 617.581054, 169.793716, 12.259898, 3.099997, 17.700010, 43.899925, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3427, 570.892700, 154.168655, 14.337127, 1.600002, -9.600001, 120.000038, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3864, 612.627746, 186.531997, 21.605762, 0.000000, 0.000000, 62.800003, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3864, 602.596130, 182.405059, 20.877536, 0.000000, 0.000000, 83.700004, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3864, 576.553100, 160.847274, 19.762296, 0.000000, 0.000000, 78.299987, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16601, 587.830383, 156.713638, 15.246536, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3256, 589.597351, 148.448928, 5.565176, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(6934, 580.426086, 146.891372, 60.198566, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3502, 578.279907, 135.691757, 11.537117, -3.000000, 0.000000, 142.600021, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3502, 571.593200, 140.644104, 13.963788, 1.599998, 0.000000, 142.600021, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3643, 558.112182, 124.201942, 18.463342, 0.000000, 0.000000, -16.400001, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3864, 554.520812, 111.213821, 17.711776, 0.000000, 0.000000, -179.800064, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3864, 550.449707, 125.839691, 21.051771, 0.000000, 0.000000, -179.800064, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3633, 606.074279, 130.032165, 7.492754, 0.000000, 0.000000, 18.300001, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3633, 606.074279, 130.032165, 8.452754, 0.000000, 0.000000, -15.699995, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1685, 605.646423, 132.280044, 7.794884, 0.000000, 0.000000, 15.399991, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(19922, 604.942077, 134.719009, 7.251966, 0.000000, 0.000000, -75.500015, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(19631, 605.060058, 133.919876, 8.153659, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(19904, 604.515075, 134.920028, 8.219102, -85.299972, 0.000000, 105.099975, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18638, 604.713562, 135.735321, 8.134189, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3525, 604.459594, 133.693939, 9.453429, 0.000000, 0.000000, 105.600013, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3525, 609.588012, 135.109878, 9.793432, 0.000000, 0.000000, -70.999969, -1, -1, -1, 400.00, 400.00);
	//Mineria Interior
    CreateDynamicObject(4327, -687.165283, -324.965728, 1765.649291, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(4818, -756.322204, -319.728088, 1743.960937, 1.499998, -3.299999, 57.800014, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(17053, -722.977172, -329.741333, 1738.782104, -1.500000, 0.000000, -120.600013, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3498, -731.502685, -334.997497, 1741.750976, 2.899999, -88.999992, -32.300006, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3498, -723.892517, -339.799224, 1741.593627, 2.899999, -88.999992, -32.300006, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3498, -725.827453, -338.574554, 1741.569702, 2.899999, -178.599945, -32.300006, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3498, -729.463867, -336.282012, 1741.674682, 2.899999, -177.899963, -32.300006, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3066, -726.679565, -343.451812, 1739.211059, 0.000000, 0.000000, -32.200008, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3066, -733.762023, -338.991699, 1739.211059, 0.000000, 0.000000, -32.200008, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1685, -729.694763, -348.435577, 1738.891967, 2.999999, 0.000000, -31.499998, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1685, -736.849182, -343.900543, 1739.119262, 2.999999, 0.000000, -31.499998, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3861, -731.499084, -350.927703, 1739.132202, -0.799999, 2.599999, -123.199989, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3861, -733.267456, -353.626586, 1738.986083, -0.799999, 2.599999, -123.199989, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3861, -738.263122, -346.488586, 1739.201293, -0.799999, -2.000000, 58.000030, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3861, -739.988464, -349.252502, 1739.087646, -0.799999, -2.000000, 58.000030, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(900, -741.580566, -360.243988, 1734.216308, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(17033, -737.618041, -365.702484, 1737.082153, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(17033, -750.637817, -358.282531, 1737.082153, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(900, -748.283569, -362.266845, 1745.264770, 0.000000, -1.200016, -41.699989, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(1380, -751.861022, -378.626800, 1754.538085, 0.000000, 0.000000, -108.000022, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(896, -756.502624, -373.715423, 1731.465820, 0.000000, 0.000000, 80.299995, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(17031, -770.907531, -367.599700, 1737.380981, 0.000000, 0.000000, -4.500002, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(17031, -731.691650, -392.267333, 1736.901245, 0.000000, 0.000000, 168.599929, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(900, -759.438293, -374.246612, 1749.537597, 64.300003, 35.499988, -150.099929, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(900, -741.211242, -374.825225, 1745.468994, 103.899993, -138.299987, -155.799896, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(900, -745.455139, -375.725677, 1749.225463, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3498, -759.291015, -376.371582, 1740.875000, 13.899997, 60.400005, -5.299999, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3498, -758.718444, -383.208068, 1740.818847, 13.899997, 60.400005, -5.299999, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18688, -755.223815, -377.432434, 1741.248291, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18688, -754.973876, -384.162445, 1741.388427, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3498, -744.594055, -381.438934, 1741.569824, 13.799998, 74.300071, 159.100036, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(18688, -748.693969, -379.682342, 1740.607299, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16446, -750.597167, -379.989837, 1733.929931, 0.000000, 0.000000, -11.599975, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(5152, -749.661560, -375.673309, 1736.679565, 0.000000, 0.000000, -103.899963, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(5152, -751.837036, -384.282531, 1736.679565, 0.000000, 0.000000, 74.600028, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3930, -753.041503, -370.395263, 1738.023681, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3930, -751.221557, -368.455261, 1737.142822, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3930, -751.221557, -371.115173, 1736.782470, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3930, -753.911865, -372.955108, 1738.122802, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3930, -752.541748, -372.955108, 1737.262939, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3930, -753.121826, -374.694976, 1736.852539, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(906, -734.074890, -359.460266, 1742.134643, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(900, -745.455139, -386.335510, 1749.225463, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(900, -765.454162, -388.520660, 1745.022949, 64.300003, 35.499988, -150.099929, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(900, -746.799011, -395.020660, 1749.459716, 103.899993, -138.299987, -155.799896, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(17031, -745.158386, -424.078826, 1736.901245, 0.000000, 0.000000, 155.499908, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(17031, -779.522888, -401.106567, 1737.380981, 0.000000, 0.000000, 19.399991, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(900, -756.284606, -403.955688, 1747.133422, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(900, -753.375854, -414.685729, 1745.955200, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3931, -762.041809, -403.602569, 1737.126953, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3931, -764.002014, -401.502685, 1737.126953, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3931, -761.331787, -404.872619, 1738.156616, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3931, -760.501586, -404.382598, 1736.416259, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3931, -764.121887, -402.582611, 1738.906372, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(3931, -762.481323, -402.582611, 1736.295776, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);

    //Interior Mineria - nivel 2 y 3
    CreateDynamicObject(19551, 650.986267, 127.913467, 52.630756, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(11496, 617.445678, 120.982246, 54.103298, 0.000000, -17.300003, -179.799987, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(17052, 607.817993, 125.707931, 53.910766, 0.000000, 0.000000, 5.099997, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(19548, 564.799011, 97.868995, 52.110744, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(899, 609.360229, 140.440887, 58.304035, 28.099996, 30.100000, 26.299976, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(899, 612.195678, 109.843719, 58.558063, -3.200005, 11.200000, 26.299976, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(900, 611.050598, 122.906860, 61.160758, 0.000000, 0.000000, 52.700008, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(17031, 640.644836, 112.548858, 49.590763, 0.000000, 0.000000, -66.999977, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(17031, 631.499511, 153.365646, 45.040767, 0.000000, 0.000000, 109.200042, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(879, 664.939636, 134.058776, 53.160751, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(879, 676.009399, 153.473785, 52.630756, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18762, 626.560607, 135.605026, 54.950763, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18762, 626.560607, 135.605026, 59.900775, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18762, 639.957580, 129.064422, 54.930736, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18762, 639.957580, 129.064422, 59.850734, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18762, 651.855773, 145.476669, 54.990756, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18762, 651.855773, 145.476669, 59.930767, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18762, 670.899597, 143.570266, 54.940750, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18762, 670.899597, 143.570266, 59.890773, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18762, 676.926208, 129.259384, 55.010757, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18762, 676.926208, 129.259384, 59.940765, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(16083, 694.584289, 140.360580, 48.960742, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(1698, 691.390930, 139.738143, 52.861053, 0.000000, -41.099994, 9.800007, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(1698, 691.695129, 139.790695, 53.130603, 0.000000, -41.099994, 9.800007, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(16133, 680.097106, 115.434837, 52.630756, 0.000000, 0.000000, -97.499992, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(16133, 712.459838, 139.242538, 51.680755, 0.000000, 0.000000, -17.199993, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 674.309692, 187.192382, 58.040756, 0.000000, 0.000000, -21.699995, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18228, 710.319458, 175.623748, 58.040756, 0.000000, 0.000000, -65.500000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18762, 639.957580, 129.064422, 64.690757, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18762, 626.560607, 135.605026, 64.640754, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18762, 651.855773, 145.476669, 64.660758, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18762, 670.899597, 143.570266, 64.650779, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(18762, 676.926208, 129.259384, 64.770759, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(19551, 656.724121, 140.643554, 64.055374, 0.000000, 0.000000, 5.699998, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(899, 619.210815, 157.159515, 60.311370, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(899, 619.210815, 105.969505, 60.311370, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(899, 648.270751, 105.969505, 61.091369, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(899, 638.880676, 166.389511, 61.701370, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(899, 647.730712, 172.239501, 61.701370, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(899, 654.230651, 108.989501, 61.701370, 0.000000, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(3525, 616.728393, 129.607299, 56.592842, 0.000000, 46.200004, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(3525, 626.582641, 134.707672, 57.290332, 31.299995, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(3525, 639.945129, 129.779830, 56.619876, 30.299999, 0.000000, 178.699966, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(3525, 651.875305, 144.577133, 57.829799, 25.999998, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(3525, 676.757507, 130.230194, 58.817012, 41.499996, 0.000000, -179.500000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(3525, 670.956665, 142.722030, 57.851303, 25.099996, 0.000000, 0.000000, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(3643, 688.717468, 151.383758, 57.700744, 0.000000, 0.000000, 44.300003, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(8624, 649.296936, 131.827636, 52.740753, 0.000000, 0.000000, 100.199981, 5, 8, -1, 400.00, 400.00);
    CreateDynamicObject(8624, 708.319335, 142.447387, 52.740753, 0.000000, 0.000000, 100.199981, 5, 8, -1, 400.00, 400.00);

	//Mercado negro dinamico
	new tmpobjid;

	CreateObject(16150,2266.0996094,-1577.0996094,1492.5999756,0.0000000,0.0000000,0.5000000); //object(ufo_barinterior) (1)
	CreateObject(941,2268.1999512,-1589.8000488,1493.6999512,0.0000000,0.0000000,0.0000000); //object(cj_df_worktop_3) (1)
	CreateObject(941,2265.8000488,-1589.8000488,1493.6999512,0.0000000,0.0000000,0.0000000); //object(cj_df_worktop_3) (2)
	CreateObject(941,2263.3999023,-1589.8000488,1493.6999512,0.0000000,0.0000000,0.0000000); //object(cj_df_worktop_3) (3)
	CreateObject(2035,2269.1000977,-1589.5000000,1494.1999512,0.0000000,0.0000000,0.0000000); //object(cj_m16) (1)
	CreateObject(2035,2269.1000977,-1590.0999756,1494.1999512,0.0000000,0.0000000,0.0000000); //object(cj_m16) (3)
	CreateObject(2035,2268.0000000,-1589.5000000,1494.1999512,0.0000000,0.0000000,0.0000000); //object(cj_m16) (4)
	CreateObject(2035,2268.0000000,-1590.0999756,1494.1999512,0.0000000,0.0000000,0.0000000); //object(cj_m16) (6)
	CreateObject(2036,2266.1999512,-1589.5000000,1494.1999512,0.0000000,0.0000000,0.0000000); //object(cj_psg1) (1)
	CreateObject(2036,2266.1999512,-1590.0000000,1494.1999512,0.0000000,0.0000000,0.0000000); //object(cj_psg1) (2)
	CreateObject(2044,2264.3999023,-1589.5000000,1494.1999512,0.0000000,0.0000000,0.0000000); //object(cj_mp5k) (1)
	CreateObject(2044,2264.3994141,-1590.0996094,1494.1999512,0.0000000,0.0000000,0.0000000); //object(cj_mp5k) (2)
	CreateObject(2044,2263.8000488,-1590.0999756,1494.1999512,0.0000000,0.0000000,0.0000000); //object(cj_mp5k) (3)
	CreateObject(2044,2263.8000488,-1589.5000000,1494.1999512,0.0000000,0.0000000,0.0000000); //object(cj_mp5k) (4)
	CreateObject(2044,2263.1999512,-1589.5000000,1494.1999512,0.0000000,0.0000000,0.0000000); //object(cj_mp5k) (5)
	CreateObject(2044,2263.1999512,-1590.0999756,1494.1999512,0.0000000,0.0000000,0.0000000); //object(cj_mp5k) (6)
	CreateObject(3052,2263.0000000,-1571.9000244,1493.6999512,0.0000000,0.0000000,0.0000000); //object(db_ammo) (1)
	CreateObject(3052,2263.8999023,-1571.9000244,1493.6999512,0.0000000,0.0000000,0.0000000); //object(db_ammo) (2)
	CreateObject(2358,2265.3999023,-1571.8000488,1493.6999512,0.0000000,0.0000000,0.0000000); //object(ammo_box_c2) (1)
	CreateObject(2358,2266.3000488,-1571.8000488,1493.6999512,0.0000000,0.0000000,0.0000000); //object(ammo_box_c2) (2)
	CreateObject(1431,2271.1000977,-1576.4000244,1493.1999512,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile) (1)
	CreateObject(1431,2273.3000488,-1576.3000488,1493.1999512,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile) (2)
	CreateObject(941,2263.3000488,-1571.8000488,1493.0999756,0.0000000,0.0000000,0.0000000); //object(cj_df_worktop_3) (4)
	CreateObject(941,2265.6999512,-1571.8000488,1493.0999756,0.0000000,0.0000000,0.0000000); //object(cj_df_worktop_3) (5)
	CreateObject(941,2268.1999512,-1571.8000488,1493.0999756,0.0000000,0.0000000,0.0000000); //object(cj_df_worktop_3) (6)
	CreateObject(3013,2267.6000977,-1571.9000244,1493.6999512,0.0000000,0.0000000,0.0000000); //object(cr_ammobox) (1)
	CreateObject(3013,2268.0000000,-1571.9000244,1493.6999512,0.0000000,0.0000000,0.0000000); //object(cr_ammobox) (2)
	CreateObject(3013,2268.3999023,-1571.9000244,1493.6999512,0.0000000,0.0000000,0.0000000); //object(cr_ammobox) (3)
	CreateObject(3013,2268.8000488,-1571.9000244,1493.6999512,0.0000000,0.0000000,0.0000000); //object(cr_ammobox) (4)
	CreateObject(3013,2269.1999512,-1571.9000244,1493.6999512,0.0000000,0.0000000,0.0000000); //object(cr_ammobox) (5)
	CreateObject(2048,2265.6999512,-1571.3000488,1494.5999756,0.0000000,0.0000000,0.0000000); //object(cj_flag2) (1)
	CreateObject(2047,2266.3000488,-1590.3000488,1494.9000244,0.0000000,0.0000000,177.0000000); //object(cj_flag1) (1)
	CreateObject(2619,2269.6999512,-1581.6999512,1494.0999756,0.0000000,0.0000000,0.0000000); //object(mp_ammoambient) (1)
	CreateObject(2977,2270.6999512,-1583.0000000,1492.5999756,0.0000000,0.0000000,0.0000000); //object(kmilitary_crate) (2)
	CreateObject(2977,2271.8000488,-1583.0000000,1492.5999756,0.0000000,0.0000000,0.0000000); //object(kmilitary_crate) (3)
	CreateObject(2977,2272.8999023,-1583.0000000,1492.5999756,0.0000000,0.0000000,0.0000000); //object(kmilitary_crate) (4)
	CreateObject(2977,2274.0000000,-1583.0000000,1492.5999756,0.0000000,0.0000000,0.0000000); //object(kmilitary_crate) (5)
	CreateObject(941,2262.8999023,-1575.0000000,1493.0999756,0.0000000,0.0000000,270.2500000); //object(cj_df_worktop_3) (9)
	CreateObject(941,2262.8999023,-1577.4000244,1493.0999756,0.0000000,0.0000000,270.2471924); //object(cj_df_worktop_3) (10)
	CreateObject(1575,2263.0000000,-1578.3000488,1493.5999756,0.0000000,0.0000000,0.0000000); //object(drug_white) (3)
	CreateObject(1575,2263.0000000,-1577.5999756,1493.5999756,0.0000000,0.0000000,0.0000000); //object(drug_white) (4)
	CreateObject(1575,2263.0000000,-1576.9000244,1493.5999756,0.0000000,0.0000000,0.0000000); //object(drug_white) (5)
	CreateObject(1578,2263.0000000,-1576.0999756,1493.5999756,0.0000000,0.0000000,0.0000000); //object(drug_green) (2)
	CreateObject(1578,2263.0000000,-1575.3000488,1493.5999756,0.0000000,0.0000000,0.0000000); //object(drug_green) (3)
	CreateObject(1578,2263.0000000,-1574.5000000,1493.5999756,0.0000000,0.0000000,0.0000000); //object(drug_green) (4)
	CreateObject(964,2274.0000000,-1577.9000244,1492.5999756,0.0000000,0.0000000,270.7500000); //object(cj_metal_crate) (1)
	CreateObject(964,2274.0000000,-1579.3000488,1492.5999756,0.0000000,0.0000000,270.7470703); //object(cj_metal_crate) (2)
	CreateObject(941,2269.1999512,-1577.6999512,1493.0999756,0.0000000,0.0000000,270.2471924); //object(cj_df_worktop_3) (11)
	CreateObject(941,2269.1999512,-1575.3000488,1493.0999756,0.0000000,0.0000000,270.2471924); //object(cj_df_worktop_3) (13)
	CreateObject(2041,2269.1000977,-1574.6999512,1493.8000488,0.0000000,0.0000000,272.0000000); //object(ammo_box_m2) (2)
	CreateObject(2041,2269.1000977,-1575.1999512,1493.8000488,0.0000000,0.0000000,271.9995117); //object(ammo_box_m2) (7)
	CreateObject(2041,2269.1000977,-1575.6999512,1493.8000488,0.0000000,0.0000000,271.9995117); //object(ammo_box_m2) (8)
	CreateObject(2041,2269.1000977,-1576.1999512,1493.8000488,0.0000000,0.0000000,271.9995117); //object(ammo_box_m2) (9)
	CreateObject(2043,2269.1999512,-1577.3000488,1493.6999512,0.0000000,0.0000000,269.9999695); //object(ammo_box_m4) (1)
	CreateObject(2043,2269.1999512,-1577.8000488,1493.6999512,0.0000000,0.0000000,269.9945068); //object(ammo_box_m4) (2)
	CreateObject(2042,2269.0000000,-1578.5999756,1493.6999512,0.0000000,0.0000000,193.9999542); //object(ammo_box_m3) (1)
	CreateObject(2680,2274.6999512,-1580.5999756,1493.4000244,0.0000000,0.0000000,282.0000000); //object(cj_padlock) (1)
	CreateObject(2680,2269.6000977,-1573.9000244,1493.4000244,0.0000000,0.0000000,281.9970703); //object(cj_padlock) (2)
	CreateObject(2680,2269.6000977,-1572.6999512,1493.4000244,0.0000000,0.0000000,281.9970703); //object(cj_padlock) (3)
	CreateObject(2395,2262.3999023,-1583.5999756,1492.5999756,0.0000000,0.0000000,90.2500000); //object(cj_sports_wall) (1)
	CreateObject(1508,2262.3999023,-1581.0999756,1494.3000488,0.0000000,0.0000000,0.0000000); //object(dyn_garage_door) (1)
	//mercado prueba
	tmpobjid = CreateDynamicObject(19451, 1771.141845, -1379.413330, 1236.213867, 0.000000, 0.000000, -87.599998, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1771.141845, -1379.413330, 1237.953857, 0.000000, 0.000000, -87.599998, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1780.593627, -1379.016967, 1237.953857, 0.000000, 0.000000, -87.599998, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1780.593505, -1379.017089, 1236.083618, 0.000000, 0.000000, -87.599998, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1783.474853, -1383.366210, 1236.083618, 0.000000, 0.000000, 179.400039, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1783.474853, -1383.366210, 1238.264160, 0.000000, 0.000000, 179.400039, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1770.715209, -1384.109008, 1236.083618, 0.000000, 0.000000, -89.799964, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1770.715209, -1384.109008, 1237.734375, 0.000000, 0.000000, -89.799964, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1768.215698, -1383.205688, 1236.083618, 0.000000, 0.000000, 179.400039, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1768.215698, -1383.205688, 1237.953613, 0.000000, 0.000000, 179.400039, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1781.834350, -1384.071166, 1236.083618, 0.000000, 0.000000, -89.799964, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1781.834350, -1384.071166, 1238.224487, 0.000000, 0.000000, -89.799964, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1778.783569, -1384.081909, 1238.885009, 0.000000, 0.000000, -89.799964, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1783.379028, -1392.506103, 1236.083618, 0.000000, 0.000000, 179.400039, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1783.379028, -1392.506103, 1237.844482, 0.000000, 0.000000, 179.400039, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1782.688598, -1395.283813, 1237.844482, 0.000000, 0.000000, 150.500030, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1782.688598, -1395.283813, 1236.345092, 0.000000, 0.000000, 150.500030, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1768.117187, -1392.565307, 1236.083618, 0.000000, 0.000000, 179.400039, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1768.117187, -1392.565307, 1238.413574, 0.000000, 0.000000, 179.400039, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1769.051635, -1397.042602, 1238.413574, 0.000000, 0.000000, -121.399917, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1769.051635, -1397.042602, 1235.254272, 0.000000, 0.000000, -121.399917, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1776.577026, -1399.243286, 1236.083618, 0.000000, 0.000000, -87.599998, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1776.577026, -1399.243286, 1238.655029, 0.000000, 0.000000, -87.599998, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1768.804565, -1388.043945, 1236.083618, 0.000000, 0.000000, -90.199989, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1768.804565, -1388.043945, 1238.983764, 0.000000, 0.000000, -90.199989, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1774.046875, -1398.359619, 1236.083618, 0.000000, 0.000000, 179.400039, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1767.605957, -1393.904541, 1236.083618, 0.000000, 0.000000, -87.599998, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1767.605957, -1393.904541, 1237.954711, 0.000000, 0.000000, -87.599998, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19451, 1774.046875, -1398.359619, 1238.544799, 0.000000, 0.000000, 179.400039, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(6959, 1776.106689, -1397.491577, 1234.735229, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2955, 1775.891479, -1379.254394, 1235.873535, 0.000000, 0.000000, 92.199958, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1345, 1771.160766, -1381.195922, 1235.374633, 0.000000, 0.000000, 48.899993, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2047, 1783.386718, -1381.009887, 1238.084716, 0.000000, 0.000000, -90.599998, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3632, 1781.161254, -1380.038208, 1235.134033, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(6959, 1776.106689, -1397.491577, 1238.856079, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1302, 1778.880615, -1379.397949, 1234.703979, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1499, 1775.510009, -1384.092407, 1234.633911, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3632, 1782.041992, -1379.757934, 1235.134033, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3632, 1782.842773, -1379.407592, 1235.134033, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3632, 1783.012939, -1380.427612, 1235.134033, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3632, 1782.242187, -1380.427612, 1235.134033, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3632, 1781.553100, -1380.547729, 1235.134033, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2641, 1773.463378, -1383.960693, 1236.584716, 0.000000, 0.000000, 179.700042, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(910, 1782.779907, -1385.876953, 1235.885009, 0.000000, 0.000000, -90.200027, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3524, 1772.521362, -1384.737670, 1235.354370, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1337, 1773.504272, -1384.911743, 1234.979980, -108.700004, -178.800064, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1712, 1768.675170, -1386.737915, 1234.703979, 0.000000, 0.000000, 89.699989, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2048, 1768.306274, -1385.990844, 1237.334228, 0.000000, 0.000000, 90.099914, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1642, 1776.536621, -1379.899047, 1234.703979, 0.000000, 0.000000, -87.200035, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2231, 1783.128173, -1387.579467, 1234.673950, 0.000000, 0.000000, -77.999977, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2231, 1783.198608, -1388.438598, 1234.673950, 0.000000, 0.000000, -102.899971, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2414, 1782.925903, -1389.183593, 1234.703979, 0.000000, 0.000000, -91.600021, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(14772, 1782.812866, -1389.214477, 1235.974121, 0.000000, 0.000000, -139.799972, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1790, 1782.869873, -1390.040161, 1235.845092, 0.000000, 0.000000, -104.699981, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1338, 1782.423095, -1391.692993, 1235.424682, 0.000000, 0.000000, 57.500000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1338, 1782.488647, -1393.231201, 1235.424682, 0.000000, 0.000000, 110.799980, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(933, 1778.303588, -1393.995117, 1234.643920, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3498, 1776.406982, -1391.156982, 1234.703979, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1431, 1782.041992, -1395.313232, 1235.244506, 0.000000, 0.000000, 60.099994, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2040, 1778.649902, -1394.438232, 1235.684936, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2040, 1778.840087, -1393.987792, 1235.684936, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2040, 1778.756347, -1393.586181, 1235.684936, 0.000000, 0.000000, -58.200000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2039, 1778.474975, -1393.285278, 1235.684814, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2039, 1778.302001, -1393.403198, 1235.684814, 0.000000, 0.000000, -30.899997, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2039, 1778.097778, -1393.359008, 1235.684814, 0.000000, 0.000000, -73.700012, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(923, 1780.987670, -1397.101318, 1235.563720, 0.000000, 0.000000, 62.299995, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3577, 1778.492919, -1399.262695, 1235.394287, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2358, 1777.223144, -1393.751831, 1234.804077, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2358, 1777.223144, -1393.751831, 1235.064331, 0.000000, 0.000000, -1.800000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2358, 1777.223144, -1393.751831, 1235.304565, 0.000000, 0.000000, 6.499999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2358, 1777.223144, -1393.751831, 1235.564819, 0.000000, 0.000000, 75.699989, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(935, 1776.464965, -1398.810913, 1235.244506, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(935, 1776.464965, -1398.040405, 1235.244506, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(935, 1775.654174, -1398.110473, 1235.244506, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(935, 1775.654174, -1398.841064, 1235.244506, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2714, 1779.168823, -1399.021850, 1237.776000, 0.000000, 0.000000, -176.600006, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(14467, 1770.176391, -1389.038940, 1236.864746, 0.000000, 0.000000, 71.300018, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1369, 1769.310302, -1390.970581, 1235.254516, 0.000000, 0.000000, 64.299995, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2677, 1773.285156, -1386.739135, 1234.994262, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2526, 1770.407104, -1397.181762, 1234.633911, 0.000000, 0.000000, -31.700000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(851, 1769.299804, -1395.338745, 1234.964233, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1335, 1773.107666, -1398.315551, 1235.785034, 0.000000, 0.000000, -176.199981, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2619, 1774.175170, -1396.370117, 1237.115722, 0.000000, 0.000000, 179.599929, -1, -1, -1, 400.00, 400.00);

	//Renta de motos
	CreateDynamicObject(16003, 1155.257446, -1732.922363, 14.173435, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
	CreateDynamicObject(16003, 1813.098632, -1876.569335, 13.968138, 0.000000, 0.000000, -90.299995, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16003, 2407.472656, -1532.280517, 24.312215, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16003, 1213.932861, -1327.597045, 13.959989, 0.000000, 0.000000, 90.200035, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16003, 514.012878, 138.086074, 24.764675, 0.000000, 0.000000, -84.500022, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16003, 2406.273437, -2096.888916, 13.916879, 0.000000, 0.000000, -90.000015, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16003, 1871.440307, -1179.172485, 24.248134, 0.000000, 0.000000, 62.399982, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16003, 1436.5668, -2276.0002, 13.5469, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
	//lv
	CreateDynamicObject(16003, 1083.751342, 1365.961669, 11.200307, 0.000000, 0.000000, 0.699999, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16003, 1642.117187, 823.808959, 7.225398, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16003, 2086.393554, 883.788574, 7.805052, 0.000000, 0.000000, 89.899986, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16003, 2111.510986, 2005.902221, 11.220312, 0.000000, 0.000000, 89.299987, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16003, 2307.120117, 2404.568115, 11.190312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16003, 1626.056274, 1865.230224, 11.240315, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    CreateDynamicObject(16003, 1777.217163, 1420.102783, 7.270743, 0.000000, 0.000000, -88.499992, -1, -1, -1, 400.00, 400.00);
	 //CNN interior by Bernal
    CreateDynamicObject(19376, 247.74001, 1783.14001, 700.00000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19376, 258.23999, 1783.14001, 700.00000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19376, 247.74001, 1773.51001, 700.00000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19376, 258.23999, 1773.51001, 700.00000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19450, 250.44000, 1784.43994, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19450, 245.63000, 1779.93994, 701.65002,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19450, 253.91000, 1780.12000, 701.65002,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19450, 253.03000, 1775.83997, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19404, 252.33000, 1778.41003, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19388, 249.64999, 1777.30005, 701.65002,   0.00000, 0.00000, -45.00000);
    CreateDynamicObject(19388, 246.66000, 1775.83997, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19466, 252.38000, 1778.39001, 702.42999,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1502, 249.13000, 1776.76001, 699.95001,   0.00000, 0.00000, 45.00000);
    CreateDynamicObject(2165, 251.81000, 1777.84998, 700.09003,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19358, 248.53999, 1774.62000, 701.65002,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1714, 252.63000, 1777.00000, 700.09003,   0.00000, 0.00000, 230.00000);
    CreateDynamicObject(2007, 253.70000, 1776.69995, 700.01001,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1961, 250.82001, 1775.96997, 701.85999,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1962, 251.55000, 1775.96997, 701.85999,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1960, 252.27000, 1775.96997, 701.85999,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1569, 247.05000, 1784.39001, 700.02002,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1569, 250.03000, 1784.39001, 700.02002,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1703, 251.10001, 1783.83997, 700.09003,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1703, 246.23000, 1779.16003, 700.09003,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2315, 247.52000, 1779.45996, 700.09003,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2315, 251.39000, 1782.50000, 700.09003,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2250, 251.42000, 1782.51001, 701.03003,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2250, 247.52000, 1780.31006, 701.03003,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2852, 252.61000, 1782.48999, 700.58002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2894, 247.42000, 1779.67004, 700.58002,   0.00000, 0.00000, 39.00000);
    CreateDynamicObject(2011, 246.21001, 1783.96997, 700.09003,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2011, 253.24001, 1779.06995, 700.09003,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 245.88000, 1775.81006, 699.95001,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19450, 245.63000, 1770.30005, 701.65002,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19358, 250.13000, 1773.12000, 701.65002,   0.00000, 0.00000, 90.40000);
    CreateDynamicObject(19388, 252.80000, 1774.22998, 701.65002,   0.00000, 0.00000, -45.00000);
    CreateDynamicObject(1502, 252.28999, 1773.68994, 699.95001,   0.00000, 0.00000, 45.00000);
    CreateDynamicObject(1778, 253.53000, 1775.81006, 700.09003,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2712, 253.57001, 1775.31995, 700.67999,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19450, 249.17999, 1768.97998, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1705, 246.30000, 1770.17004, 700.09003,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1705, 247.85001, 1769.63000, 700.09003,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1705, 251.83000, 1769.63000, 700.09003,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2315, 248.60001, 1769.55005, 700.09003,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2855, 248.78000, 1769.55005, 700.58002,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2251, 249.67000, 1769.35999, 701.40997,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1667, 249.91000, 1769.75000, 700.69000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1667, 250.08000, 1769.65002, 700.69000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2817, 248.02000, 1783.18005, 700.08002,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19450, 254.81000, 1780.65002, 701.65002,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(14393, 255.23000, 1759.94995, 702.32001,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19450, 261.73001, 1768.97998, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19450, 249.19000, 1768.82996, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19388, 255.31000, 1768.97803, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19388, 255.31000, 1768.82996, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19450, 261.73001, 1768.82996, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(14391, 256.13000, 1760.85999, 701.04999,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1705, 257.10999, 1767.64001, 700.09003,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1705, 258.67999, 1767.02002, 700.09003,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2332, 259.63000, 1764.35999, 700.38000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(638, 254.72000, 1765.19995, 701.42999,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(638, 258.07001, 1765.19995, 701.42999,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2894, 256.39999, 1765.18005, 701.09998,   0.00000, 0.00000, 80.00000);
    CreateDynamicObject(1714, 257.10999, 1762.81006, 700.09998,   0.00000, 0.00000, -45.00000);
    CreateDynamicObject(1714, 254.17999, 1762.77002, 700.09998,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 251.39999, 1759.68005, 699.95001,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2395, 250.95000, 1759.81995, 700.09998,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2395, 252.48000, 1759.81897, 702.46002,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2395, 249.78999, 1759.58997, 702.46002,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2395, 248.19000, 1759.57996, 700.09998,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1704, 254.31000, 1753.90002, 700.09003,   0.00000, 0.00000, 135.00000);
    CreateDynamicObject(1704, 256.22000, 1754.48999, 700.09003,   0.00000, 0.00000, -135.00000);
    CreateDynamicObject(1815, 254.42000, 1754.72998, 700.09003,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2247, 254.89000, 1755.31995, 700.98999,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2010, 253.33000, 1754.94995, 700.09998,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2010, 256.59000, 1754.91003, 700.09998,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19466, 253.95000, 1759.94995, 701.91998,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19466, 256.17001, 1759.94995, 701.91998,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19466, 258.39999, 1759.94995, 701.91998,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19376, 259.00000, 1763.90002, 699.99200,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(1502, 254.53000, 1768.95996, 699.95001,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19450, 262.60999, 1772.18005, 701.65002,   0.00000, 0.00000, -45.00000);
    CreateDynamicObject(19450, 263.67001, 1770.76001, 701.65002,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19450, 257.75000, 1783.81995, 701.65002,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19388, 257.75000, 1777.43005, 701.65002,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19388, 259.37000, 1782.07996, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19388, 265.76001, 1782.07996, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19450, 268.39999, 1775.63000, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19358, 256.17001, 1781.31006, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19376, 268.73999, 1783.14001, 700.00000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19376, 268.73999, 1773.51001, 700.00000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19450, 262.09000, 1787.44995, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19450, 269.72000, 1784.41003, 701.65002,   0.00000, 0.00000, 45.00000);
    CreateDynamicObject(19450, 269.60999, 1780.35999, 701.65002,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19450, 272.14999, 1782.07996, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19358, 262.57001, 1782.07996, 701.65002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19450, 262.67999, 1786.88000, 701.65002,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1702, 261.92999, 1772.37000, 700.08002,   0.00000, 0.00000, 225.00000);
    CreateDynamicObject(2315, 259.75000, 1772.14001, 700.09003,   0.00000, 0.00000, 45.00000);
    CreateDynamicObject(2315, 266.10001, 1777.94995, 700.09003,   0.00000, 0.00000, 45.00000);
    CreateDynamicObject(1702, 268.89001, 1779.57996, 700.08002,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(1702, 267.63000, 1776.32996, 700.08002,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2251, 260.10001, 1772.70996, 701.40997,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2251, 266.94000, 1779.01001, 701.40997,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1667, 260.76001, 1772.72998, 700.69000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1667, 266.26001, 1777.77002, 700.69000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1667, 266.34000, 1777.85999, 700.69000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1667, 266.20001, 1777.88000, 700.69000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 258.59000, 1782.06006, 699.95001,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 264.98001, 1782.06006, 699.95001,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2207, 265.48999, 1785.14001, 700.09003,   0.00000, 0.00000, -45.00000);
    CreateDynamicObject(1714, 267.48199, 1785.68604, 700.09998,   0.00000, 0.00000, -45.00000);
    CreateDynamicObject(330, 266.98001, 1784.23999, 700.85999,   90.00000, 0.00000, 90.00000);
    CreateDynamicObject(2894, 265.87000, 1785.32996, 700.85999,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2608, 263.00000, 1785.06995, 701.21002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1962, 267.85001, 1786.13000, 701.85999,   0.00000, 0.00000, -45.00000);
    CreateDynamicObject(2185, 258.67001, 1785.34998, 700.09003,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1714, 260.03000, 1786.59998, 700.09998,   0.00000, 0.00000, -45.00000);
    CreateDynamicObject(1704, 260.01999, 1783.92004, 700.09003,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2078, 262.38000, 1784.88000, 700.10999,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2007, 257.95001, 1786.73999, 700.01001,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1569, 257.72726, 1776.61902, 700.02002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2886, 257.82001, 1778.51001, 701.44000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2886, 257.70999, 1778.47998, 701.44000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1569, 257.72729, 1778.09998, 700.02002,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19378, 247.74001, 1783.13000, 703.42999,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19378, 247.74001, 1773.55005, 703.42999,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19378, 258.23001, 1773.55005, 703.42999,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19378, 268.67999, 1783.12000, 703.42999,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19378, 268.70999, 1773.53003, 703.42999,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19378, 258.23999, 1783.14001, 703.42999,   0.00000, 90.00000, 0.00000);

	//24/7 robable
	tmpobjid = CreateDynamicObject(18981, 1640.515136, 1611.465698, 1159.335693, 0.000000, 90.200019, 0.000000, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14385, "trailerkb", "tr_wood1", 0x00000000);
    tmpobjid = CreateDynamicObject(18981, 1640.531127, 1611.465698, 1163.757446, 0.000000, 90.200019, 0.000000, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-90-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19445, 1641.834228, 1623.906127, 1161.541015, 0.000000, 0.000000, -89.699966, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19445, 1634.804687, 1623.869995, 1161.541015, 0.000000, 0.000000, -89.699966, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-93-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19445, 1652.793212, 1619.618164, 1161.530395, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19445, 1652.793212, 1609.997802, 1161.530395, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19445, 1652.793212, 1600.428955, 1161.530395, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19445, 1647.906616, 1623.817138, 1161.541015, 0.000000, 0.000000, -89.699966, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1569, 1637.419433, 1623.668945, 1159.828735, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19445, 1628.827270, 1623.716674, 1161.541015, 0.000000, 0.000000, -89.699966, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19445, 1628.212158, 1619.308837, 1161.530395, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19445, 1628.212158, 1609.738769, 1161.530395, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19445, 1628.212158, 1600.179809, 1161.530395, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19445, 1632.984497, 1599.197998, 1161.541015, 0.000000, 0.000000, -89.699966, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19445, 1642.574340, 1599.248779, 1161.541015, 0.000000, 0.000000, -89.699966, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19445, 1652.034179, 1599.298583, 1161.541015, 0.000000, 0.000000, -89.699966, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19383, 1638.155273, 1623.739501, 1161.585449, 0.000000, 0.000000, -91.000015, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19325, 1641.657714, 1623.706298, 1161.772705, 0.000000, 0.000000, -89.200027, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19325, 1633.927612, 1623.698974, 1161.772705, 0.000000, 0.000000, -89.200027, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1885, 1639.309570, 1623.217895, 1159.800170, 0.000000, 0.000000, -91.700035, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1883, 1642.236938, 1620.203857, 1159.759643, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2439, 1645.078247, 1612.433471, 1159.819824, 0.000000, 0.000000, 179.700012, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2439, 1644.077514, 1612.438476, 1159.819824, 0.000000, 0.000000, 179.700012, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2439, 1643.106933, 1612.442993, 1159.819824, 0.000000, 0.000000, 179.700012, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2439, 1642.126342, 1612.447998, 1159.819824, 0.000000, 0.000000, 179.700012, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2439, 1641.125854, 1612.453247, 1159.819824, 0.000000, 0.000000, 179.700012, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2439, 1646.069213, 1612.429199, 1159.819824, 0.000000, 0.000000, 179.700012, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2440, 1647.050292, 1612.379638, 1159.808959, 0.000000, 0.000000, 87.999992, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2440, 1640.143920, 1612.455444, 1159.808959, 0.000000, 0.000000, -179.700042, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2439, 1647.016357, 1611.385009, 1159.819946, 0.000000, 0.000000, 88.600013, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2439, 1646.991943, 1610.385009, 1159.819946, 0.000000, 0.000000, 88.600013, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2439, 1646.967773, 1609.394042, 1159.819946, 0.000000, 0.000000, 88.600013, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2439, 1640.117065, 1611.451660, 1159.819946, 0.000000, 0.000000, -89.300041, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2439, 1640.129028, 1610.471069, 1159.819946, 0.000000, 0.000000, -89.300041, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2439, 1640.141235, 1609.470458, 1159.819946, 0.000000, 0.000000, -89.300041, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2440, 1646.904296, 1608.396362, 1159.808959, 0.000000, 0.000000, -2.100011, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2440, 1640.158203, 1608.481567, 1159.808959, 0.000000, 0.000000, -88.600051, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2369, 1641.459594, 1612.221557, 1160.868408, 0.000000, 0.000000, 179.499984, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19563, 1640.232666, 1610.276489, 1160.875366, 0.000000, 0.000000, -35.199996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19569, 1640.282714, 1610.056640, 1160.875122, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19564, 1640.065795, 1610.079345, 1160.885620, 0.000000, 0.000000, -77.699996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1546, 1647.165649, 1609.938476, 1160.960937, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1546, 1647.165649, 1610.098632, 1160.960937, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1546, 1647.035522, 1610.008544, 1160.960937, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1546, 1647.035522, 1609.818359, 1160.960937, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1546, 1647.035522, 1609.818359, 1160.960937, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2369, 1645.220214, 1612.188720, 1160.868408, 0.000000, 0.000000, 179.499984, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2532, 1652.187011, 1603.400878, 1159.784057, 0.000000, 0.000000, -91.000022, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2452, 1652.312377, 1605.022216, 1159.760864, 0.000000, 0.000000, -89.999977, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1843, 1652.180786, 1607.035400, 1159.750000, 0.000000, 0.000000, -90.000015, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19640, 1647.321899, 1599.862182, 1159.812011, 0.000000, 0.000000, 179.799942, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2433, 1645.826538, 1599.726196, 1159.770507, 0.000000, 0.000000, -179.599975, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1892, 1637.658813, 1623.402954, 1159.854125, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1848, 1641.646850, 1599.873901, 1159.781616, 0.000000, 0.000000, -179.500045, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1886, 1652.203491, 1599.735229, 1163.426879, 14.800000, 0.000000, -124.300018, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1886, 1628.783203, 1599.753051, 1163.496215, 15.700003, 0.000000, 129.500015, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2658, 1652.678833, 1611.465942, 1162.065551, 0.000000, 0.000000, -90.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19326, 1650.795043, 1599.401123, 1162.290405, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2714, 1638.192993, 1623.612915, 1162.745361, 0.000000, 0.000000, -1.300000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19329, 1633.948242, 1599.298706, 1162.394775, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2471, 1645.866333, 1623.588989, 1161.936279, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2447, 1645.746826, 1623.437255, 1159.815307, 0.000000, 0.000000, 0.899999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2449, 1646.825073, 1623.426879, 1159.810913, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1842, 1630.402343, 1609.816162, 1160.281250, 0.000000, 0.000000, -89.799980, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1888, 1628.864624, 1612.893554, 1159.798339, 0.000000, 0.000000, 89.799987, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1889, 1628.634887, 1616.157958, 1159.859619, 0.000000, 0.000000, 88.600013, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1849, 1628.724975, 1605.848754, 1159.864990, 0.000000, 0.000000, 90.900009, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2435, 1635.837158, 1602.965332, 1159.761718, 0.000000, 0.000000, 179.799987, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2435, 1634.906494, 1602.968994, 1159.761718, 0.000000, 0.000000, 179.799987, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2435, 1633.975830, 1602.972534, 1159.761718, 0.000000, 0.000000, 179.799987, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2435, 1633.044921, 1602.975708, 1159.761718, 0.000000, 0.000000, 179.799987, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2434, 1636.942871, 1602.766235, 1159.758666, 0.000000, 0.000000, 88.700073, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2434, 1632.117553, 1602.978027, 1159.758666, 0.000000, 0.000000, 179.799911, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2435, 1636.918701, 1601.837402, 1159.761718, 0.000000, 0.000000, 88.599998, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2435, 1636.895996, 1600.907104, 1159.761718, 0.000000, 0.000000, 88.599998, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2435, 1631.937988, 1601.856567, 1159.761718, 0.000000, 0.000000, -90.100059, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2435, 1631.936523, 1600.936035, 1159.761718, 0.000000, 0.000000, -90.100059, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2369, 1635.335693, 1602.665283, 1160.798339, 0.000000, 0.000000, 179.499984, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2369, 1632.844604, 1602.686767, 1160.798339, 0.000000, 0.000000, 179.499984, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19328, 1628.307006, 1609.910400, 1162.052612, 0.000000, 0.000000, 89.999946, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1842, 1632.402709, 1609.823120, 1160.281250, 0.000000, 0.000000, -89.799980, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2644, 1632.002441, 1619.175781, 1160.272827, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1968, 1629.589721, 1619.490112, 1160.378784, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1968, 1629.589721, 1621.090942, 1160.378784, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1825, 1632.592773, 1621.682617, 1159.831665, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1720, 1631.988281, 1619.783691, 1159.779785, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1720, 1632.760009, 1619.372192, 1159.779785, 0.000000, 0.000000, -51.499996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1720, 1632.064941, 1618.560668, 1159.779785, 0.000000, 0.000000, -174.999954, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19328, 1652.677368, 1619.829101, 1162.052612, 0.000000, 0.000000, -89.900146, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2770, 1652.369262, 1623.455078, 1160.463745, 0.000000, 0.000000, 34.699996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2637, 1652.045410, 1620.981079, 1160.211669, 0.000000, 0.000000, -90.000022, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1545, 1652.622802, 1621.031250, 1161.299194, 0.000000, 0.000000, -91.600028, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2637, 1652.045410, 1618.629394, 1160.211669, 0.000000, 0.000000, -90.000022, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2620, 1652.302856, 1617.063110, 1160.569946, 0.000000, 0.000000, -12.499999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2872, 1652.188476, 1615.896972, 1159.748413, 0.000000, 0.000000, -89.899948, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2872, 1652.189086, 1615.016235, 1159.748413, 0.000000, 0.000000, -89.899948, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2457, 1652.273803, 1613.393798, 1159.801513, 0.000000, 0.000000, -89.800041, -1, -1, -1, 400.00, 400.00);

	//Interior de estacionamiento Camionero
	CreateDynamicObject(19459, 2006.68298, 2223.49268, 13.16890,   0.00000, 0.00000, 89.00000);
	CreateDynamicObject(19459, 1997.21423, 2223.57568, 13.88390,   7.00000, 1.00000, 90.00000);
	CreateDynamicObject(19459, 1987.63159, 2223.62817, 14.98390,   7.00000, 1.00000, 90.00000);
	CreateDynamicObject(19459, 1977.99915, 2223.67139, 15.97390,   7.00000, 1.00000, 90.00000);
	CreateDynamicObject(19459, 1981.84753, 2233.55273, 14.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 1981.66650, 2223.92871, 14.43390,   0.00000, 3.00000, -1.00000);
	CreateDynamicObject(19459, 1981.73669, 2223.95435, 17.89890,   0.00000, 3.00000, -1.00000);
	CreateDynamicObject(19459, 1981.84753, 2233.55273, 17.89890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, 1982.05994, 2227.34473, 15.16930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3055, 1982.00903, 2235.09473, 15.16930,   0.00000, 0.00000, -90.00000);

	//?????????????????????????????Fabrica de armas Underest???????????????????????????????????//
    tmpobjid = CreateDynamicObject(12814, 1387.032470, 1031.193969, 1463.193969, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 19598, "sfbuilding1", "darkwood1", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1388.390380, 1055.803222, 1464.732666, 0.000000, 0.000000, -89.399993, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1388.390380, 1055.803222, 1468.213500, 0.000000, 0.000000, -89.399993, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1397.951416, 1055.895629, 1464.732666, 0.000000, 0.000000, -89.399993, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1397.951416, 1055.895629, 1468.222412, 0.000000, 0.000000, -89.399993, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1378.771606, 1055.703002, 1464.732666, 0.000000, 0.000000, -89.399993, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1378.771606, 1055.703002, 1468.234130, 0.000000, 0.000000, -89.399993, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(12814, 1387.032470, 1031.193969, 1469.707397, 179.299987, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 19598, "sfbuilding1", "darkwood1", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1374.231323, 1050.823242, 1464.732666, 0.000000, 0.000000, 179.500015, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1374.231323, 1050.823242, 1468.222290, 0.000000, 0.000000, 179.500015, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1374.147094, 1041.193725, 1464.732666, 0.000000, 0.000000, 179.500015, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1374.147094, 1041.193725, 1468.233276, 0.000000, 0.000000, 179.500015, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1374.063964, 1031.583740, 1464.732666, 0.000000, 0.000000, 179.500015, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1374.063964, 1031.583740, 1468.213500, 0.000000, 0.000000, 179.500015, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1401.744628, 1031.342163, 1464.732666, 0.000000, 0.000000, -179.599975, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1401.744628, 1031.342163, 1468.203491, 0.000000, 0.000000, -179.599975, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1401.677368, 1040.951538, 1464.732666, 0.000000, 0.000000, -179.599975, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1401.677368, 1040.951538, 1468.232910, 0.000000, 0.000000, -179.599975, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1401.610229, 1050.571655, 1464.732666, 0.000000, 0.000000, -179.599975, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1401.610229, 1050.571655, 1468.233764, 0.000000, 0.000000, -179.599975, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1401.543457, 1060.172729, 1464.732666, 0.000000, 0.000000, -179.599975, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1401.543334, 1060.192749, 1468.214111, 0.000000, 0.000000, -179.599975, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1388.692016, 1026.935668, 1464.732666, 0.000000, 0.000000, -89.399993, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1388.692016, 1026.935668, 1468.222167, 0.000000, 0.000000, -89.399993, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1379.062500, 1026.834960, 1464.732666, 0.000000, 0.000000, -89.399993, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1379.072509, 1026.835083, 1468.223144, 0.000000, 0.000000, -89.399993, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1398.321655, 1027.036987, 1464.732666, 0.000000, 0.000000, -89.399993, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1398.321655, 1027.036987, 1468.222900, 0.000000, 0.000000, -89.399993, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1369.431640, 1026.732299, 1464.732666, 0.000000, 0.000000, -89.399993, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1369.441650, 1026.732421, 1468.213012, 0.000000, 0.000000, -89.399993, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 12976, "sw_diner1", "sw_roof01", 0x00000000);
    tmpobjid = CreateDynamicObject(941, 1394.489379, 1043.816528, 1463.602172, 0.000000, 0.000000, -91.099967, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "CJ_plating", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
    tmpobjid = CreateDynamicObject(941, 1394.443847, 1041.456909, 1463.602172, 0.000000, 0.000000, -91.099967, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "CJ_plating", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
    tmpobjid = CreateDynamicObject(941, 1394.397949, 1039.096313, 1463.602172, 0.000000, 0.000000, -91.099967, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "CJ_plating", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
    tmpobjid = CreateDynamicObject(941, 1394.352050, 1036.716430, 1463.602172, 0.000000, 0.000000, -91.099967, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "CJ_plating", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
    tmpobjid = CreateDynamicObject(941, 1396.952026, 1036.666259, 1463.602172, 0.000000, 0.000000, -91.099967, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "CJ_plating", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
    tmpobjid = CreateDynamicObject(941, 1396.997314, 1039.025756, 1463.602172, 0.000000, 0.000000, -91.099967, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "CJ_plating", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
    tmpobjid = CreateDynamicObject(941, 1397.042480, 1041.386230, 1463.602172, 0.000000, 0.000000, -91.099967, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "CJ_plating", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
    tmpobjid = CreateDynamicObject(941, 1397.087524, 1043.726440, 1463.602172, 0.000000, 0.000000, -91.099967, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "CJ_plating", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
    tmpobjid = CreateDynamicObject(1508, 1388.203979, 1055.792724, 1464.782836, 0.000000, 0.000000, 90.499961, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2653, 1390.261230, 1051.912109, 1468.914306, 0.000000, -178.699996, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2653, 1390.261230, 1044.081542, 1468.914306, 0.000000, -178.699996, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2653, 1393.805297, 1040.458862, 1468.866943, 0.099999, -178.699996, 89.299926, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2653, 1397.379760, 1036.812500, 1468.850952, 0.099999, 179.399887, -179.600097, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2653, 1393.887939, 1033.283569, 1468.829833, 0.099999, -179.800048, 89.299926, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2653, 1386.038696, 1033.379394, 1468.843994, 0.099999, -179.800048, 89.299926, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2653, 1382.478637, 1029.821777, 1468.829101, 0.000000, -178.699996, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3631, 1375.347900, 1051.836425, 1463.740844, 0.000000, 0.000000, -90.300018, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3631, 1375.347900, 1051.836425, 1464.911132, 0.000000, 0.000000, -90.300018, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(943, 1378.438110, 1046.426635, 1463.942504, 0.000000, 0.000000, 179.500045, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(943, 1378.411987, 1043.337402, 1463.942504, 0.000000, 0.000000, 179.500045, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(934, 1378.217773, 1039.228637, 1464.442993, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(934, 1378.217407, 1033.937133, 1464.442993, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2567, 1376.773925, 1028.192138, 1465.083374, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2567, 1382.024169, 1028.192138, 1465.083374, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2567, 1387.264892, 1028.192138, 1465.083374, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(939, 1392.951049, 1028.241333, 1465.593505, 0.000000, 0.000000, 0.399999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(939, 1398.539184, 1028.311645, 1465.593505, 0.000000, 0.000000, 0.399999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3761, 1400.836547, 1046.096801, 1465.143188, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2974, 1400.586303, 1053.949462, 1463.191772, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1893, 1392.923706, 1045.482910, 1469.624511, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1893, 1395.464355, 1045.482910, 1469.624511, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1893, 1395.464355, 1042.552612, 1469.624511, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1893, 1392.873291, 1042.552612, 1469.624511, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1893, 1387.723144, 1042.552612, 1469.624511, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1893, 1384.731933, 1042.552612, 1469.624511, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1893, 1381.931274, 1042.552612, 1469.624511, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1893, 1386.060791, 1039.172607, 1469.624511, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1893, 1382.379516, 1038.832153, 1469.624511, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1893, 1394.359863, 1035.394287, 1469.624511, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1893, 1391.338623, 1037.774414, 1469.624511, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1893, 1381.828735, 1048.044921, 1469.624511, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1893, 1384.659179, 1048.044921, 1469.624511, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1893, 1387.560058, 1048.044921, 1469.624511, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3577, 1399.996582, 1031.481811, 1463.931518, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3577, 1399.996582, 1035.002319, 1463.931518, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3761, 1400.836547, 1039.726806, 1465.143188, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2974, 1400.586303, 1050.908569, 1463.191772, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2991, 1377.455688, 1051.137817, 1463.792114, 0.000000, 0.000000, 90.800003, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2991, 1377.455688, 1051.137817, 1465.092407, 0.000000, 0.000000, 90.800003, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3287, 1394.228759, 1053.871582, 1467.844604, 0.000000, 0.000000, 89.700035, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3630, 1375.785766, 1034.367797, 1464.642333, 0.000000, 0.000000, -89.900009, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3630, 1375.768920, 1043.918334, 1464.642333, 0.000000, 0.000000, -89.900009, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3630, 1375.768920, 1043.918334, 1467.683227, 0.000000, 0.000000, -89.900009, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3630, 1375.786376, 1034.368408, 1467.683227, 0.000000, 0.000000, -89.900009, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1379.251342, 1033.926269, 1466.512939, 0.000000, 0.000000, -89.599975, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1379.153442, 1047.956665, 1466.512939, 0.000000, 0.000000, -89.599975, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1379.055053, 1061.976928, 1466.512939, 0.000000, 0.000000, -89.599975, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2991, 1377.399169, 1055.217529, 1463.792114, 0.000000, 0.000000, 90.800003, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2991, 1377.399169, 1055.217529, 1465.093139, 0.000000, 0.000000, 90.800003, -1, -1, -1, 400.00, 400.00);


	//Banco Spectrum
	CreateDynamicObject(3515, 1339.06543, -1000.61053, 32.88829,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 1339.15295, -969.55792, 32.88813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1364, 1333.24756, -968.26031, 33.75084,   0.00000, 0.00000, 90.27708);
	CreateDynamicObject(1364, 1329.50122, -1000.00641, 33.67313,   0.00000, 0.00000, 90.41676);
	CreateDynamicObject(1361, 1329.93848, -996.39813, 33.70366,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3802, 1332.71582, -978.98438, 44.07392,   0.00000, 0.00000, 347.50046);
	CreateDynamicObject(3802, 1332.66101, -990.54150, 44.21531,   0.00000, 0.00000, 1.04622);
	CreateDynamicObject(1597, 1340.21826, -959.33118, 38.12740,   0.00000, 0.00000, 0.26810);
	CreateDynamicObject(3920, 1332.90942, -984.99402, 45.89510,   0.00000, 0.00000, 270.04471);
	CreateDynamicObject(3521, 1340.41602, -1009.22070, 31.24434,   0.00000, 0.00000, 89.65807);
	CreateDynamicObject(1569, 1328.82666, -986.23785, 32.87348,   0.00000, 0.00000, 89.49810);
	CreateDynamicObject(1569, 1328.78625, -983.23120, 32.86760,   0.00000, 0.00000, 272.15009);


	//Basurero Spectrum
	tmpobjid = CreateDynamicObject(6959, 1038.856323, 1285.036621, 9.840310, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(6959, 1038.856323, 1243.617675, 9.840310, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(18249, 1034.076904, 1264.291992, 14.350316, 0.000000, 0.000000, 89.399864, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(18253, 1053.865234, 1263.658691, 12.439060, 0.000000, 0.000000, -0.599999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(18250, 1034.988037, 1240.429931, 16.027458, 0.799998, 0.000000, 89.800109, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(18248, 1037.852416, 1285.249267, 17.699089, 0.000000, 0.000000, 52.300006, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3593, 1040.868164, 1288.131713, 19.049039, 0.000000, 0.000000, 169.800033, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(13591, 1047.638183, 1273.500976, 10.339064, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(13591, 1037.398193, 1273.181640, 10.339064, 0.000000, 0.000000, -178.100021, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(13591, 1027.149291, 1272.776611, 10.339064, 0.000000, 0.000000, -0.500015, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1025.329833, 1302.487060, 13.100329, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1039.380493, 1302.487060, 13.100329, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1052.897705, 1278.360229, 13.100329, 0.000000, 0.000000, -90.299957, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1052.970825, 1292.360107, 13.100329, 0.000000, 0.000000, -90.299957, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(910, 1053.558715, 1293.936523, 11.009064, 0.000000, 0.000000, 88.099914, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(910, 1053.642333, 1296.465576, 11.009064, 0.000000, 0.000000, 88.099914, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(714, 1022.791748, 1288.647338, 9.979067, 0.000000, 0.000000, -29.899999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(18245, 1073.448608, 1241.971435, 21.910306, 0.000000, 0.000000, -89.499992, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1358, 1050.730468, 1231.725830, 10.989057, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1358, 1050.730468, 1234.615966, 10.989057, 0.000000, 0.000000, 10.999998, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1358, 1050.990112, 1243.112915, 10.989057, 0.000000, 0.000000, -44.300014, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1358, 1050.725341, 1247.309692, 10.989057, 0.000000, 0.000000, 20.899986, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(851, 1048.462158, 1237.945434, 10.182483, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3006, 1048.177246, 1240.746582, 9.802482, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(10985, 1042.738525, 1284.098632, 10.479060, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(18748, 1044.562011, 1285.923339, 10.514249, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(18748, 1043.925781, 1284.614257, 10.000494, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3242, 1045.084228, 1318.567138, 11.640303, 0.000000, 0.000000, 84.499992, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(12957, 1047.903686, 1327.429077, 10.470309, 0.000000, 0.000000, 51.599994, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1450, 1029.509887, 1306.734863, 10.390316, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1439, 1029.633789, 1308.712036, 9.960315, 0.000000, 0.000000, 56.199996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(852, 1026.336059, 1306.777099, 9.780310, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(849, 1027.161010, 1309.577880, 10.090317, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(850, 1034.223754, 1308.922973, 9.907476, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3073, 1037.297485, 1322.705932, 11.537498, 0.000000, 0.000000, 123.099990, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(10984, 1036.059814, 1315.598144, 9.827475, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(833, 1041.826416, 1304.677612, 10.400321, 0.000000, 0.000000, 32.100002, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(833, 1044.770751, 1305.718383, 10.400321, 0.000000, 0.000000, -20.600000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(833, 1043.293212, 1308.557006, 10.400321, 0.000000, 0.000000, 115.699996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(833, 1041.099487, 1310.680541, 10.400321, 0.000000, 0.000000, -3.099997, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(10985, 1086.400512, 1344.896606, 10.970314, 0.899998, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(10985, 1080.980834, 1334.484008, 10.486851, 0.899998, 0.000000, 80.100021, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2743, 1090.643432, 1332.841552, 10.620313, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1345, 1091.348632, 1331.410034, 10.360316, 0.000000, 0.000000, 36.700000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(849, 1088.193115, 1330.372924, 10.089814, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(910, 1089.771240, 1335.065551, 10.800318, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(952, 1095.474121, 1334.162719, 11.050309, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19380, 1092.153198, 1293.812377, 9.820311, 0.000000, 90.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19380, 1081.693603, 1293.812377, 9.820311, 0.000000, 90.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19380, 1071.224975, 1293.812377, 9.820311, 0.000000, 90.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19380, 1060.755004, 1293.812377, 9.820311, 0.000000, 90.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1090.370361, 1289.166748, 13.100329, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1081.750000, 1289.166748, 13.100329, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1062.109863, 1289.166748, 13.100329, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(18249, 1091.916870, 1273.389038, 14.350316, 0.000000, 0.000000, -179.700286, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(18249, 1082.226196, 1273.338134, 14.350316, 0.000000, 0.000000, -179.700286, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(18249, 1063.696044, 1273.241210, 14.350316, 0.000000, 0.000000, -179.700286, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(13190, 1086.895751, 1314.371093, 13.442649, 0.000000, -0.099999, -0.499976, -1, -1, -1, 400.00, 400.00);

	//camionero ng
	tmpobjid = CreateDynamicObject(4731, 1623.795654, 803.033142, 26.268053, 0.000000, 0.000000, -115.300041, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18901, "matclothes", "hatmancblk", 0x00000000);
    tmpobjid = CreateDynamicObject(4731, 1623.795654, 803.033142, 26.268053, 0.000000, 0.000000, -115.300041, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18901, "matclothes", "hatmancblk", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF}Empresa Camionera\nLas Vegas", 110, "Ariel", 35, 1, 0x00000000, 0x00000000, 1);
    tmpobjid = CreateDynamicObject(3627, 1591.011352, 681.445800, 13.410308, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3627, 1608.832153, 681.445800, 13.410308, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1601.760498, 697.423095, 13.100313, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1587.690673, 697.423095, 13.100313, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(16564, 1672.812988, 764.955139, 9.860303, 0.000000, 0.000000, 89.899940, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1672.926635, 783.098388, 14.340323, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1686.957519, 783.098388, 14.340323, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1700.987915, 783.098388, 14.340323, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1715.057861, 783.098388, 14.340323, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1729.118164, 783.098388, 14.340323, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1743.188232, 783.098388, 14.340323, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1750.527709, 783.098388, 14.340323, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1757.550659, 775.975219, 14.300314, 0.000000, 0.000000, 90.000083, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1757.550659, 761.935668, 14.300314, 0.000000, 0.000000, 90.000083, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1757.550659, 747.855468, 14.300314, 0.000000, 0.000000, 90.000083, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1757.550659, 733.784912, 14.300314, 0.000000, 0.000000, 90.000083, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1757.550659, 719.684570, 14.300314, 0.000000, 0.000000, 90.000083, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1757.550659, 705.644653, 14.300314, 0.000000, 0.000000, 90.000083, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1757.550659, 691.614379, 14.300314, 0.000000, 0.000000, 90.000083, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1757.550659, 677.564208, 14.300314, 0.000000, 0.000000, 90.000083, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19313, 1757.550659, 670.124145, 14.300314, 0.000000, 0.000000, 90.000083, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(12805, 1708.068481, 690.149414, 23.870309, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(8041, 1601.084960, 781.572631, 15.380313, 0.000000, 0.000000, 90.099967, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1582.488525, 782.872314, 10.561043, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1586.579956, 782.872314, 10.561043, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1614.912353, 783.050781, 10.660314, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1654.356445, 744.695190, 10.540314, 0.000000, 0.000000, 175.599990, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1645.091430, 745.486145, 10.540314, 0.000000, 0.000000, 174.800018, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1637.626342, 749.492004, 10.540314, 0.000000, 0.000000, 128.799987, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1634.066650, 757.673156, 10.540314, 0.000000, 0.000000, 98.099960, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1632.460693, 778.188354, 10.540314, 0.000000, 0.000000, 93.599998, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(8335, 1723.077758, 772.740356, 13.770314, 0.000000, 0.000000, 179.599990, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3066, 1703.141845, 777.526123, 10.820308, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3066, 1703.141845, 766.905883, 10.820308, 0.000000, 0.000000, 8.099999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3569, 1694.717895, 774.013854, 12.160306, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3569, 1699.027954, 774.013854, 12.160306, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3630, 1735.579101, 781.325012, 11.227850, 0.000000, 0.000000, 179.900085, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3630, 1745.138916, 781.308715, 11.227850, 0.000000, 0.000000, 179.900085, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2934, 1753.773681, 781.265136, 11.210312, 0.000000, 0.000000, 89.400016, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1663.811523, 712.450866, 10.590314, 0.000000, 0.000000, 87.399948, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1663.517333, 703.089538, 10.590314, 0.000000, 0.000000, 88.999916, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19960, 1597.302734, 843.127380, 5.703125, 0.000000, 0.000000, 91.699996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1260, 1623.998535, 803.583801, 20.647768, 0.000000, 0.000000, -55.599983, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1611.308715, 787.623474, 10.660314, 0.000000, 0.000000, 78.299995, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1613.188232, 796.700744, 10.660314, 0.000000, 0.000000, 78.299995, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1615.058837, 805.734802, 9.914768, 0.000000, 9.400000, 78.299995, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1616.881835, 814.535766, 8.426868, 0.000000, 9.400000, 78.299995, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1621.863525, 821.043212, 7.073243, 0.000000, 7.399994, 26.999979, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1577.243041, 788.041748, 10.915244, 0.000000, -3.500000, 90.799987, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1577.100952, 798.283203, 11.541596, 0.000000, -3.500000, 90.799987, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(5126, 1637.657836, 674.165649, 24.590282, 0.000000, 0.000000, 91.099975, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2917, 1637.011596, 700.389709, 23.352544, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(18260, 1643.078613, 687.307678, 11.280314, 0.000000, 0.000000, 107.900062, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(8886, 1633.268432, 688.041137, 13.150316, 0.000000, 0.000000, 2.399999, -1, -1, -1, 400.00, 400.00);

	//estacionamiento interior
	CreateDynamicObject(8948, 2058.68994, 2437.64990, 11.58000,   0.00000, 0.00000, 90.00000, 2);
	CreateDynamicObject(3448, 2082.19995, 2417.37988, 9.96000,   0.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(3448, 2082.19995, 2417.37988, 14.24000,   0.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(3448, 2082.19995, 2417.37988, 18.56000,   0.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(3448, 2082.19995, 2417.37988, 22.84000,   0.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(6873, 2053.02002, 2403.21997, 9.82000,   0.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(3448, 2082.19995, 2417.37988, 27.16000,   0.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(3448, 2082.19995, 2417.37988, 31.46000,   0.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(3448, 2082.19995, 2417.37988, 35.74000,   0.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(3448, 2082.19995, 2417.37988, 40.06000,   0.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(3448, 2082.19995, 2417.37988, 44.34000,   0.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(3448, 2082.19995, 2417.37988, 48.66000,   0.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(6971, 2098.87012, 2402.58008, 9.83000,   0.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(19305, 2117.87988, 2414.71997, 11.15000,   0.00000, 0.00000, 190.00000, 2);
	CreateDynamicObject(19305, 2117.87988, 2414.71997, 15.45000,   0.00000, 0.00000, 190.00000, 2);
	CreateDynamicObject(19305, 2117.87988, 2414.71997, 19.75000,   0.00000, 0.00000, 190.00000, 2);
	CreateDynamicObject(19305, 2117.87988, 2414.71997, 24.05000,   0.00000, 0.00000, 190.00000, 2);
	CreateDynamicObject(19552, 2111.54004, 2437.66992, 49.44000,   90.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(19305, 2117.87988, 2414.71997, 28.35000,   0.00000, 0.00000, 190.00000, 2);
	CreateDynamicObject(6972, 2053.62988, 2374.30005, 30.75000,   0.00000, 0.00000, 180.00000, 2);
	CreateDynamicObject(6972, 2116.37988, 2409.83008, 30.75000,   0.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(19305, 2117.87988, 2414.71997, 32.65000,   0.00000, 0.00000, 190.00000, 2);
	CreateDynamicObject(19305, 2117.87988, 2414.71997, 36.95000,   0.00000, 0.00000, 190.00000, 2);
	CreateDynamicObject(19305, 2117.87988, 2414.71997, 41.25000,   0.00000, 0.00000, 190.00000, 2);
	CreateDynamicObject(19305, 2117.87988, 2414.71997, 45.55000,   0.00000, 0.00000, 190.00000, 2);
	CreateDynamicObject(19305, 2117.87988, 2414.71997, 49.85000,   0.00000, 0.00000, 190.00000, 2);
	CreateDynamicObject(19552, 2116.96997, 2489.23999, 49.44000,   90.00000, 0.00000, 90.00000, 2);
	CreateDynamicObject(6972, 2116.83008, 2374.30005, 30.75000,   0.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(19552, 2103.80005, 2367.11011, 49.44000,   90.00000, 0.00000, 0.00000, 2);
	CreateDynamicObject(19552, 2116.96997, 2345.83008, 49.44000,   90.00000, 0.00000, 90.00000, 2);

	// Hospital LS
	CreateDynamicObject(630, 1181.32996, -1366.15002, 14.24000,   0.00000, 0.00000, 0.30000, -1, -1, -1, 600.0);
	CreateDynamicObject(630, 1181.26001, -1355.62000, 14.24000,   0.00000, 0.00000, 0.30000, -1, -1, -1, 600.0);
	CreateDynamicObject(630, 1159.00000, -1312.40002, -10.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(630, 1154.59998, -1312.59998, -10.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(948, 1173.33997, -1354.72998, 13.20000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(970, 1181.85999, -1364.68005, 13.71000,   0.00000, 0.00000, 90.09000, -1, -1, -1, 600.0);
	CreateDynamicObject(970, 1181.83997, -1357.17004, 13.71000,   0.00000, 0.00000, 90.09000, -1, -1, -1, 600.0);
	CreateDynamicObject(1210, 1169.22998, -1355.05005, -11.65000,   0.00000, 0.00000, 180.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1523, 1156.19995, -1337.90002, -11.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1523, 1181.80005, -1362.46997, 13.20000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1523, 1181.80005, -1359.43005, 13.20000,   0.00000, 0.00000, 268.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1649, 1166.83997, -1354.69995, 14.86000,   0.00000, 0.00000, -90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1649, 1181.80005, -1364.68005, 14.06000,   0.00000, 0.00000, -90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1649, 1181.80005, -1364.65002, 14.06000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1649, 1181.80005, -1357.26001, 14.06000,   0.00000, 0.00000, -90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1649, 1181.80005, -1357.21997, 14.06000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1714, 1168.10999, -1354.44995, -11.80000,   0.00000, 0.00000, 145.81000, -1, -1, -1, 600.0);
	CreateDynamicObject(1714, 1145.80005, -1321.50000, -11.80000,   0.00000, 0.00000, 66.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1723, 1157.00000, -1363.09998, -11.80000,   0.00000, 0.00000, 180.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1723, 1159.50000, -1359.09998, -11.80000,   0.00000, 0.00000, 270.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1723, 1154.50000, -1346.69995, -11.80000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1723, 1159.50000, -1348.09998, -11.80000,   0.00000, 0.00000, 270.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1723, 1148.00000, -1329.09998, -11.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1723, 1164.19995, -1329.09998, -11.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1723, 1162.50000, -1321.30005, -11.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1723, 1150.80005, -1321.40002, -11.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1724, 1158.90002, -1362.40002, -11.80000,   0.00000, 0.00000, 216.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1724, 1159.09998, -1327.80005, -11.80000,   0.00000, 0.00000, 270.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1724, 1159.00000, -1319.19995, -11.80000,   0.00000, 0.00000, 216.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1724, 1154.30005, -1319.80005, -11.80000,   0.00000, 0.00000, 88.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1738, 1150.80005, -1328.19995, -11.10000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1746, 1155.30005, -1360.90002, -11.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1808, 1153.80005, -1322.80005, -11.70000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1886, 1170.32996, -1348.34998, -7.75000,   25.00000, 0.00000, -33.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1971, 1170.69995, -1353.43005, -9.95000,   0.00000, 0.00000, -90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1990, 1170.31006, -1354.54004, -11.80000,   0.00000, 0.00000, -90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1997, 1144.90002, -1334.90002, -11.80000,   0.00000, 0.00000, 180.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1997, 1147.00000, -1334.90002, -11.80000,   0.00000, 0.00000, 179.99001, -1, -1, -1, 600.0);
	CreateDynamicObject(1997, 1149.09998, -1334.90002, -11.80000,   0.00000, 0.00000, 179.99001, -1, -1, -1, 600.0);
	CreateDynamicObject(1997, 1151.09998, -1334.80005, -11.80000,   0.00000, 0.00000, 179.99001, -1, -1, -1, 600.0);
	CreateDynamicObject(1997, 1165.69995, -1348.28003, -11.80000,   0.00000, 0.00000, 91.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1997, 1167.19995, -1348.59998, -11.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1997, 1169.27002, -1348.51001, -11.80000,   0.00000, 0.00000, 84.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1997, 1159.19995, -1330.50000, -11.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(1997, 1168.90002, -1329.90002, -11.80000,   0.00000, 0.00000, 343.98999, -1, -1, -1, 600.0);
	CreateDynamicObject(2000, 1173.27002, -1366.96997, 13.21000,   0.00000, 0.00000, 180.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2002, 1179.93005, -1367.00000, 13.19000,   0.00000, 0.00000, 180.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2007, 1174.02002, -1366.95996, 13.21000,   0.00000, 0.00000, 180.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2066, 1170.44995, -1353.73999, -11.80000,   0.00000, 0.00000, -90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2066, 1170.81006, -1353.16003, -11.80000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2164, 1170.76001, -1351.56006, -11.80000,   0.00000, 0.00000, -90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2186, 1143.59998, -1322.30005, -11.80000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2190, 1147.50000, -1323.40002, -10.70000,   0.00000, 0.00000, 270.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2190, 1147.50000, -1321.69995, -10.70000,   0.00000, 0.00000, 270.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2251, 1143.40002, -1327.90002, -10.90000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2273, 1169.80005, -1324.90002, -9.80000,   0.00000, 0.00000, 272.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2284, 1143.59998, -1326.59998, -10.70000,   0.00000, 0.00000, 88.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2287, 1143.69995, -1323.80005, -10.60000,   0.00000, 0.00000, 88.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2289, 1153.90002, -1316.40002, -9.10000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2356, 1173.59998, -1366.04004, 13.23000,   0.00000, 0.00000, 328.28000, -1, -1, -1, 600.0);
	CreateDynamicObject(2434, 1147.00000, -1325.00000, -11.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2435, 1146.08997, -1325.00000, -11.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2435, 1147.17004, -1323.87000, -11.80000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2435, 1145.19995, -1325.00000, -11.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2435, 1147.17004, -1322.93994, -11.80000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2435, 1147.16003, -1322.01001, -11.80000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2435, 1147.16003, -1321.28003, -11.80000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2596, 1144.19995, -1329.00000, -8.80000,   0.00000, 0.00000, 16.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2596, 1175.64001, -1354.71997, 15.78000,   0.00000, 0.00000, 359.75000, -1, -1, -1, 600.0);
	CreateDynamicObject(2596, 1150.30005, -1328.59998, -8.90000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2596, 1164.80005, -1328.90002, -8.70000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2596, 1167.90002, -1328.90002, -8.70000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2596, 1162.09998, -1320.90002, -8.90000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2596, 1166.59998, -1320.90002, -8.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1145.19995, -1349.00000, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1148.00000, -1349.09998, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1145.00000, -1346.00000, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1150.90002, -1349.19995, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1148.00000, -1346.09998, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1150.59998, -1346.00000, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1145.09998, -1341.09998, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1147.59998, -1341.00000, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1150.30005, -1341.19995, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1162.00000, -1345.90002, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1164.50000, -1346.09998, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1167.19995, -1345.80005, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1164.59998, -1341.30005, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1169.90002, -1345.69995, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1167.09998, -1341.19995, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1162.19995, -1334.90002, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1169.56006, -1341.02002, -11.30000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1164.90002, -1334.90002, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1161.80005, -1329.90002, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1168.40002, -1334.69995, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1162.50000, -1327.09998, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1165.50000, -1327.00000, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2603, 1168.50000, -1327.00000, -11.41000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2605, 1176.28003, -1366.41003, 13.60000,   0.00000, 0.00000, 269.73001, -1, -1, -1, 600.0);
	CreateDynamicObject(2607, 1173.98999, -1365.05005, 13.60000,   0.00000, 0.00000, 180.10001, -1, -1, -1, 600.0);
	CreateDynamicObject(2635, 1157.09998, -1360.30005, -11.40000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2637, 1162.70996, -1349.80005, -11.40000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2639, 1162.69995, -1348.09998, -11.20000,   0.00000, 0.00000, 180.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2685, 1179.53003, -1367.42004, 15.04000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2738, 1169.19995, -1321.19995, -11.20000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2739, 1167.69995, -1321.30005, -11.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2742, 1168.19995, -1320.90002, -10.20000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2774, 1181.01001, -1367.66003, 3.26000,   180.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2774, 1181.01001, -1360.05005, 16.53000,   90.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2774, 1181.01001, -1354.18005, 3.26000,   180.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2813, 1146.40002, -1325.09998, -10.70000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2828, 1146.90002, -1324.80005, -10.76000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2878, 1160.06995, -1356.14001, -10.63000,   0.00000, 0.00000, -90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2946, 1158.50000, -1311.63000, -11.80000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2946, 1155.31995, -1311.63000, -11.80000,   0.00000, 0.00000, 270.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(2994, 1154.19995, -1327.40002, -11.30000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(3440, 1156.09998, -1337.80005, -9.40000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(3440, 1158.00000, -1337.90002, -9.40000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(3440, 1158.59998, -1337.90002, -9.00000,   0.00000, 90.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(14494, 1168.50000, -1321.50000, -10.20000,   0.00000, 0.00000, 176.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(14532, 1145.80005, -1354.40002, -10.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(14532, 1150.40002, -1354.40002, -10.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(14532, 1162.60999, -1354.62000, -10.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(14532, 1165.93005, -1354.63000, -10.80000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(14597, 1156.69995, -1324.80005, -9.80000,   0.00000, 0.00000, 270.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(14597, 1157.19995, -1351.06995, -9.80000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(14680, 1177.53003, -1367.71997, 15.30000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(14680, 1177.65002, -1363.42004, 15.30000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(14680, 1177.75000, -1359.54004, 15.30000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(14680, 1180.68994, -1368.00000, 15.30000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(14680, 1180.68994, -1363.56006, 15.30000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(14680, 1180.68005, -1359.45996, 15.30000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(19003, 1170.76001, -1360.67004, 16.90000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 600.0);
	CreateDynamicObject(19003, 1172.06006, -1360.53003, 13.21000,   0.00000, 180.00000, 0.00000, -1, -1, -1, 600.0);

    //*******************Bomberos Los Santos Interior*******************
	CreateDynamicObject(19446, -1686.90381, -2047.37549, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -1674.08691, -2047.37549, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -1669.25024, -2052.12354, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -1678.80066, -2052.15527, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -1669.25024, -2061.75903, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -1696.55322, -2047.37549, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -1670.83081, -2066.54297, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -1678.74475, -2061.76758, 17.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -1669.75452, -2071.33667, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -1669.23450, -2080.87646, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -1673.82996, -2072.90723, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -1678.57092, -2080.76904, 20.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19446, -1674.10095, -2082.69336, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -1691.79297, -2052.14478, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -1701.33740, -2052.13721, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -1683.69495, -2056.86230, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, -1704.88745, -2052.14600, 18.16000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1694.41333, -2052.14600, 18.16000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19384, -1680.48328, -2047.36890, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, -1683.90979, -2052.14600, 18.16000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19384, -1690.11255, -2056.86230, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, -1694.41333, -2061.75562, 18.16000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1683.90979, -2061.75562, 18.16000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1673.58984, -2052.14600, 18.16000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1673.58984, -2061.75488, 18.16000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19384, -1677.23499, -2066.53076, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, -1673.62866, -2071.37744, 18.16000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1683.90979, -2071.36816, 18.16000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1694.41333, -2071.36816, 18.16000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19384, -1693.48413, -2056.86230, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -1699.88647, -2056.87231, 17.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -1696.65552, -2056.92041, 19.64000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, -1699.96130, -2056.91724, 19.64000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19446, -1701.33081, -2061.73950, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, -1704.88745, -2061.75562, 18.16000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1704.88745, -2071.36816, 18.16000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3440, -1685.50305, -2062.98779, 19.44000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1685.50305, -2066.13086, 19.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -1685.68311, -2064.43359, 19.64000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19446, -1690.07153, -2066.23022, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -1690.07153, -2063.07227, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3440, -1694.76501, -2062.96777, 19.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, -1694.73560, -2066.37012, 19.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -1678.74280, -2064.91797, 19.56000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1649, -1678.74280, -2061.59131, 19.64000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1649, -1678.74976, 19.64000, 19.56000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, -1674.04468, -2080.99292, 18.16000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19384, -1673.99548, -2074.45752, 20.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19384, -1673.99548, -2077.65552, 20.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19384, -1673.99548, -2080.85718, 20.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19446, -1669.27515, -2076.06226, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -1669.20898, -2079.25220, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -1669.26123, -2082.46899, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -1706.26355, -2070.96851, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -1683.29968, -2075.75562, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19384, -1678.57092, -2074.35791, 20.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19446, -1692.91614, -2075.75562, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1536, -1681.27002, -2047.40649, 18.24456,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, -1679.34790, -2047.92334, 18.24193,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, -1681.75427, -2047.90491, 18.24193,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, -1690.49805, -2049.79883, 18.68000,   0.00000, 0.00000, 122.04002);
	CreateDynamicObject(1671, -1690.40869, -2052.88721, 18.68000,   0.00000, 0.00000, -304.85989);
	CreateDynamicObject(1671, -1681.33606, -2055.62134, 18.68000,   0.00000, 0.00000, 194.69997);
	CreateDynamicObject(1671, -1684.89819, -2055.58691, 18.68000,   0.00000, 0.00000, 194.69997);
	CreateDynamicObject(948, -1691.23267, -2056.30078, 18.24560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, -1689.14185, -2049.22656, 18.24560,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2165, -1689.14185, -2052.38794, 18.24560,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2165, -1685.62000, -2054.45337, 18.24560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, -1682.09937, -2054.45337, 18.24560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1235, -1683.23059, -2054.33643, 18.72440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1235, -1686.67419, -2054.48218, 18.72440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1235, -1689.11755, -2051.30298, 18.72440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1235, -1688.98254, -2048.18018, 18.72440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2608, -1683.14551, -2056.57373, 19.91900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2608, -1685.02112, -2056.48071, 20.39900,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2186, -1688.35059, -2056.34155, 18.24454,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, -1691.64160, -2051.37427, 20.29070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2272, -1686.46375, -2047.96338, 20.22470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2276, -1684.70081, -2047.95813, 19.65770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2278, -1679.42065, -2051.32983, 20.00000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2281, -1679.38464, -2053.68433, 19.41710,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1703, -1686.56116, -2048.20728, 18.24528,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, -1679.48669, -2051.32642, 18.24530,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19427, -1688.26550, -2063.83911, 19.96000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19427, -1688.28442, -2065.44580, 19.96000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19427, -1687.39758, -2065.40137, 18.82000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19427, -1687.39758, -2063.79834, 18.82000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19427, -1685.69727, -2065.25293, 17.16000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19427, -1685.69727, -2063.71143, 17.16000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1613, -1688.53967, -2064.65552, 20.35250,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19331, -1687.11829, -2065.51733, 19.00820,   0.00000, 270.00000, -90.00000);
	CreateDynamicObject(19331, -1686.42993, -2064.60889, 19.00820,   0.00000, 270.00000, -90.00000);
	CreateDynamicObject(19331, -1687.00098, -2063.69287, 19.00820,   0.00000, 270.00000, -90.00000);
	CreateDynamicObject(2809, -1687.66064, -2064.51538, 18.06870,   0.00000, 0.00000, 91.14000);
	CreateDynamicObject(1649, -1678.74976, -2058.26245, 19.64000,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(1649, -1678.74280, -2061.59131, 19.64000,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(1649, -1678.74280, -2064.91797, 19.64000,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(1649, -1696.65552, -2056.90039, 19.64000,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(1649, -1699.94165, -2056.89380, 19.64000,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(948, -1700.33313, -2056.00806, 18.24560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2205, -1694.08899, -2050.45581, 18.24800,   0.00000, 0.00000, -179.58000);
	CreateDynamicObject(1671, -1695.00476, -2049.33472, 18.68630,   0.00000, 0.00000, 17.70000);
	CreateDynamicObject(2205, -1697.80615, -2050.47900, 18.24800,   0.00000, 0.00000, -179.58000);
	CreateDynamicObject(1671, -1698.63013, -2049.23462, 18.68630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1704, -1700.45679, -2054.78540, 18.24730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1827, -1698.41968, -2054.46191, 18.24739,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2608, -1696.62854, -2047.52148, 20.13175,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2186, -1700.76196, -2049.40527, 18.24454,   0.00000, 0.00000, 88.73997);
	CreateDynamicObject(1235, -1692.43518, -2047.98877, 18.72440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18870, -1693.83655, -2050.51733, 19.18354,   0.00000, 0.00000, -175.56001);
	CreateDynamicObject(18870, -1697.56750, -2050.52075, 19.18354,   0.00000, 0.00000, -175.56001);
	CreateDynamicObject(2251, -1695.75952, -2050.72241, 19.78370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2250, -1699.33569, -2050.68115, 19.65000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, -1698.49963, -2050.63623, 19.18260,   0.00000, 0.00000, -188.76006);
	CreateDynamicObject(2190, -1694.88904, -2050.63989, 19.18260,   0.00000, 0.00000, -188.76006);
	CreateDynamicObject(1703, -1697.19995, -2056.25073, 18.24440,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2284, -1700.76160, -2051.61279, 19.84700,   0.00000, 0.00000, 89.64000);
	CreateDynamicObject(2283, -1701.22351, -2054.43628, 20.14000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, -1704.88745, -2052.14600, 21.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1694.41333, -2052.14600, 21.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1683.90979, -2052.14600, 21.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2631, -1673.82874, -2052.10645, 18.24070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2631, -1673.81653, -2054.04590, 18.24074,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2632, -1673.77454, -2058.43555, 18.24290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2632, -1673.77124, -2060.37720, 18.24290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2628, -1672.43445, -2048.56958, 18.23981,   0.00000, 0.00000, 0.96000);
	CreateDynamicObject(2628, -1673.80225, -2049.24707, 18.23981,   0.00000, 0.00000, 0.96000);
	CreateDynamicObject(2628, -1675.39978, -2048.49438, 18.23981,   0.00000, 0.00000, 0.96000);
	CreateDynamicObject(2630, -1677.58716, -2056.29370, 18.24500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2630, -1670.57727, -2056.29370, 18.24500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2629, -1670.56067, -2065.07275, 18.24595,   0.00000, 0.00000, 180.35992);
	CreateDynamicObject(2629, -1673.01050, -2064.49756, 18.24595,   0.00000, 0.00000, 180.35992);
	CreateDynamicObject(2629, -1675.08984, -2065.05298, 18.24595,   0.00000, 0.00000, 180.35992);
	CreateDynamicObject(2630, -1677.58716, -2059.29370, 18.24500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2630, -1677.58716, -2053.29370, 18.24500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2630, -1670.57727, -2059.29370, 18.24500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2630, -1670.57727, -2053.29370, 18.24500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, -1673.58984, -2052.14600, 21.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1673.58984, -2061.75488, 21.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1491, -1674.01221, -2076.90796, 18.24400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1491, -1674.01855, -2073.71118, 18.24400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1491, -1673.99255, -2080.10303, 18.24400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1491, -1701.28259, -2067.39502, 18.22400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1491, -1678.02466, -2066.53540, 18.22400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, -1690.89612, -2056.86401, 18.22400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, -1694.26685, -2056.87280, 18.22400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, -1683.90979, -2061.75562, 21.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1674.04468, -2080.99292, 21.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1673.58984, -2071.36816, 21.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1683.90979, -2071.36816, 21.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1694.41333, -2061.75562, 21.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1704.88745, -2061.75562, 21.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1694.41333, -2071.36816, 21.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, -1704.88745, -2071.36816, 21.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19427, -1694.52112, -2063.92847, 19.96000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19427, -1694.52112, -2065.53516, 19.96000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2147, -1693.97131, -2066.85132, 18.12520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2170, -1693.17175, -2066.83325, 18.16530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2170, -1692.51050, -2066.82642, 18.16530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2335, -1691.66980, -2066.89844, 18.24660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2334, -1690.68127, -2066.89844, 18.24660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2336, -1689.68555, -2066.89844, 18.24700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2334, -1687.67944, -2066.89844, 18.24660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2335, -1686.68909, -2066.89844, 18.24660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, -1685.81860, -2066.81812, 18.24676,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2297, -1689.63403, -2075.41016, 18.24547,   0.00000, 0.00000, 133.68007);
	CreateDynamicObject(19384, -1701.33081, -2068.14307, 20.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19446, -1701.33081, -2074.51782, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -1710.00378, -2061.73950, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -1710.00378, -2071.36914, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19427, -1707.96838, -2065.48267, 17.22000,   0.00000, 0.00000, 211.98007);
	CreateDynamicObject(14411, -1709.27966, -2067.39404, 15.76000,   0.00000, 0.00000, 27.66000);
	CreateDynamicObject(1491, -1678.58167, -2073.60742, 18.22400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19379, -1707.99524, -2059.39331, 18.88000,   0.00000, 90.00000, 23.28000);
	CreateDynamicObject(19446, -1706.05945, -2061.23608, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19427, -1706.46960, -2064.05640, 17.22000,   0.00000, 0.00000, 114.06010);
	CreateDynamicObject(19427, -1705.03320, -2063.42383, 17.22000,   0.00000, 0.00000, 113.58009);
	CreateDynamicObject(19427, -1703.58704, -2062.79785, 17.22000,   0.00000, 0.00000, 113.28010);
	CreateDynamicObject(19427, -1702.11670, -2062.12134, 17.22000,   0.00000, 0.00000, 114.78011);
	CreateDynamicObject(19427, -1707.67078, -2064.59912, 17.22000,   0.00000, 0.00000, 114.78010);
	CreateDynamicObject(3077, -1707.81152, -2062.19116, 18.68650,   0.00000, 0.00000, 14.58000);
	CreateDynamicObject(1811, -1706.60669, -2065.64795, 18.66610,   0.00000, 0.00000, -57.84000);
	CreateDynamicObject(1811, -1705.53516, -2065.07275, 18.66610,   0.00000, 0.00000, -65.34001);
	CreateDynamicObject(1811, -1704.52039, -2064.51636, 18.66610,   0.00000, 0.00000, -60.48001);
	CreateDynamicObject(1811, -1703.50574, -2063.89697, 18.66610,   0.00000, 0.00000, -60.48001);
	CreateDynamicObject(1811, -1702.53210, -2065.18164, 18.66610,   0.00000, 0.00000, -23.34000);
	CreateDynamicObject(1811, -1703.55994, -2066.06445, 18.66610,   0.00000, 0.00000, -46.56001);
	CreateDynamicObject(1811, -1704.83606, -2066.72363, 18.66610,   0.00000, 0.00000, -57.96000);
	CreateDynamicObject(1811, -1706.29456, -2067.00244, 18.66610,   0.00000, 0.00000, -71.88002);
	CreateDynamicObject(1811, -1702.33704, -2069.75146, 18.66610,   0.00000, 0.00000, -92.16000);
	CreateDynamicObject(1811, -1703.49854, -2069.79688, 18.66610,   0.00000, 0.00000, -79.92001);
	CreateDynamicObject(1811, -1704.66772, -2069.83252, 18.66610,   0.00000, 0.00000, -82.86004);
	CreateDynamicObject(1811, -1705.96130, -2069.88062, 18.66610,   0.00000, 0.00000, -90.60003);
	CreateDynamicObject(1811, -1707.45959, -2069.80957, 18.66610,   0.00000, 0.00000, -90.60003);
	CreateDynamicObject(1811, -1708.74719, -2069.50879, 18.66610,   0.00000, 0.00000, -101.82005);
	CreateDynamicObject(19446, -1702.51782, -2075.75562, 20.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, -1691.62769, -2062.34570, 18.24440,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1703, -1686.86926, -2062.32764, 18.24440,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2011, -1690.32141, -2062.48071, 18.02190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2256, -1690.41846, -2062.82153, 20.59580,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1775, -1673.86157, -2067.78540, 19.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1775, -1673.86169, -2071.73364, 19.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2614, -1673.57861, -2069.74634, 20.52590,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2282, -1695.08276, -2064.54688, 20.10980,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19427, -1673.43359, -2072.18286, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2029, -1687.90613, -2071.18530, 18.24615,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2029, -1692.74365, -2071.11182, 18.24615,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16377, -1704.30994, -2061.87158, 19.78550,   0.00000, 0.00000, -182.16000);
	CreateDynamicObject(2254, -1689.84302, -2066.36426, 20.62510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19427, -1673.43359, -2067.37256, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19427, -1673.43359, -2068.97388, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19427, -1673.43359, -2070.57300, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, -1671.86401, -2073.50122, 18.24768,   0.00000, 0.00000, 0.06005);
	CreateDynamicObject(2528, -1671.90881, -2076.68994, 18.24768,   0.00000, 0.00000, -0.24001);
	CreateDynamicObject(2517, -1670.59338, -2076.34448, 18.24676,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2517, -1670.19629, -2079.51147, 18.24676,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, -1671.83374, -2079.88940, 18.24768,   0.00000, 0.00000, -0.24001);
	CreateDynamicObject(2517, -1670.30969, -2082.71924, 18.24676,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2523, -1671.87878, -2078.70703, 18.24790,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2523, -1671.91187, -2081.90015, 18.24790,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2523, -1671.68542, -2075.51074, 18.24790,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2124, -1691.87659, -2072.08130, 19.00000,   0.00000, 0.00000, -85.02000);
	CreateDynamicObject(2124, -1692.59851, -2069.87866, 19.00000,   0.00000, 0.00000, -248.40004);
	CreateDynamicObject(2124, -1691.58752, -2070.04395, 19.00000,   0.00000, 0.00000, -311.75995);
	CreateDynamicObject(2124, -1686.85498, -2070.20410, 19.00000,   0.00000, 0.00000, -311.75995);
	CreateDynamicObject(2124, -1687.92993, -2070.03906, 19.00000,   0.00000, 0.00000, -271.62000);
	CreateDynamicObject(2124, -1686.88062, -2072.37573, 19.00000,   0.00000, 0.00000, -437.03976);
	CreateDynamicObject(2124, -1687.93201, -2072.09082, 19.00000,   0.00000, 0.00000, -492.23999);
	CreateDynamicObject(14782, -1695.61365, -2075.16528, 19.16000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14782, -1685.31763, -2075.16528, 19.16000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19330, -1692.85376, -2075.38354, 20.29600,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19330, -1694.39514, -2075.31177, 20.29600,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19330, -1695.15930, -2075.30688, 20.29600,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19330, -1684.77332, -2075.24512, 20.29600,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19330, -1685.48364, -2075.25732, 20.29600,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19330, -1687.03650, -2075.22339, 20.29600,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19330, -1688.08142, -2075.30737, 20.29600,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19330, -1683.26697, -2075.45166, 20.29600,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19331, -1684.05591, -2075.30737, 20.27410,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19331, -1682.47546, -2075.42603, 20.27410,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19331, -1693.57947, -2075.42969, 20.27410,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19331, -1695.89612, -2075.38745, 20.27410,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19331, -1698.72974, -2075.52515, 20.27410,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19331, -1697.64136, -2075.55078, 20.27410,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(14455, -1701.09741, -2060.06665, 19.62380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2010, -1700.86523, -2066.77930, 18.24434,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, -1700.85193, -2057.76440, 18.24434,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, -1700.53601, -2073.31079, 18.20540,   0.00000, 0.00000, 90.06000);
	CreateDynamicObject(2276, -1700.75330, -2073.68848, 19.72830,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2281, -1700.76074, -2070.85376, 20.24270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2204, -1691.97461, -2051.86304, 18.24620,   0.00000, 0.00000, -89.10000);
	CreateDynamicObject(2200, -1691.90662, -2054.80811, 18.24620,   0.00000, 0.00000, -90.00000);
	//calabozo
	CreateDynamicObject(19302, 320.92380, 312.89761, 999.40869,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19302, 320.90057, 316.90176, 999.40869,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1495, 321.45419, 310.06000, 998.14001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1886, 323.12170, 310.55511, 1002.34003,   25.00000, 0.00000, 236.00000);
	//*********************Hospital interior*********************
	CreateDynamicObject(18030, 1174.79004, -1343.57422, 2424.41333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14466, 1214.54846, -1360.71301, 2432.20532,   0.00000, 0.00000, 270.50000);
	CreateDynamicObject(7191, 1191.82813, -1351.01074, 2421.62085,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(14782, 1187.80005, -1353.69995, 2423.30005,   0.00000, 0.00000, 90.50000);
	CreateDynamicObject(1523, 1189.00000, -1350.00000, 2422.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4724, 1158.58862, -1353.60535, 2423.75122,   0.00000, 0.00000, 0.25000);
	CreateDynamicObject(2001, 1159.30005, -1348.59998, 2422.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(932, 1185.46716, -1355.87146, 2422.04590,   0.00000, 0.00000, 272.50000);
	CreateDynamicObject(932, 1183.69995, -1356.00000, 2422.00000,   0.00000, 0.00000, 272.49939);
	CreateDynamicObject(932, 1183.69995, -1353.90002, 2422.00000,   0.00000, 0.00000, 272.49939);
	CreateDynamicObject(932, 1185.40002, -1353.80005, 2422.00000,   0.00000, 0.00000, 272.49939);
	CreateDynamicObject(1557, 1168.15161, -1357.04126, 2422.04614,   0.00000, 0.00000, 359.50000);
	CreateDynamicObject(1557, 1171.19995, -1357.00000, 2422.04614,   0.00000, 0.00000, 182.24463);
	CreateDynamicObject(2596, 1156.79395, -1348.47595, 2425.34521,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 1163.46863, -1354.67188, 2425.30835,   0.00000, 0.00000, 270.25003);
	CreateDynamicObject(2190, 1170.09998, -1347.80005, 2422.89990,   0.00000, 0.25000, 182.75000);
	CreateDynamicObject(1663, 1169.69995, -1346.19995, 2422.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7930, 1189.56934, -1345.94604, 2423.54419,   90.00000, 180.00549, 269.98352);
	CreateDynamicObject(3962, 1156.31921, -1357.05176, 2424.26025,   0.00000, 0.00000, 268.50000);
	CreateDynamicObject(1726, 1154.69995, -1348.80005, 2422.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1153.59998, -1353.59998, 2422.00000,   0.00000, 0.00000, 90.50000);
	CreateDynamicObject(1726, 1157.31653, -1355.79578, 2422.04614,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1727, 1157.59998, -1348.80005, 2422.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 1153.19995, -1355.09998, 2425.80005,   0.00000, 0.00000, 88.00000);
	CreateDynamicObject(1727, 1163.30005, -1354.19995, 2422.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(7191, 1157.67419, -1339.11780, 2424.02075,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(7191, 1157.67017, -1338.37537, 2424.02075,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1209, 1153.30005, -1350.30005, 2422.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1209, 1153.30005, -1343.50000, 2422.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7191, 1167.70007, -1313.43201, 2427.98071,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(7191, 1191.17395, -1335.54907, 2424.02075,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7191, 1167.69922, -1313.43164, 2424.02075,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2603, 1154.30847, -1331.02600, 2422.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1157.90002, -1330.90002, 2422.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1161.50000, -1330.80005, 2422.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 1156.29089, -1337.96643, 2424.77637,   0.00000, 0.00000, 179.25000);
	CreateDynamicObject(2596, 1160.69995, -1337.90002, 2424.80005,   0.00000, 0.00000, 179.24744);
	CreateDynamicObject(3383, 1175.95190, -1330.56775, 2422.04614,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3383, 1183.39758, -1330.39929, 2422.04614,   0.00000, 0.00000, 179.74731);
	CreateDynamicObject(3388, 1172.56311, -1329.85693, 2422.04614,   0.00000, 0.00000, 90.25000);
	CreateDynamicObject(3388, 1180.31531, -1329.85449, 2422.04614,   0.00000, 0.00000, 90.24719);
	CreateDynamicObject(3394, 1184.66553, -1334.90222, 2422.04614,   0.00000, 0.00000, 269.75000);
	CreateDynamicObject(3394, 1174.50000, -1334.80005, 2422.00000,   0.00000, 0.00000, 269.74731);
	CreateDynamicObject(2894, 1169.00000, -1347.59998, 2422.89990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2257, 1158.19995, -1348.19995, 2424.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2256, 1153.00000, -1352.69995, 2424.69995,   0.00000, 0.00000, 89.50000);
	CreateDynamicObject(2208, 1168.40002, -1347.80005, 2422.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2208, 1167.09998, -1344.69995, 2422.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2208, 1172.40002, -1344.80005, 2422.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2161, 1172.59998, -1346.80005, 2422.39990,   0.00000, 0.00000, 269.99756);
	CreateDynamicObject(2161, 1172.59998, -1345.40002, 2422.39990,   0.00000, 0.00000, 269.99756);
	CreateDynamicObject(2126, 1156.59998, -1353.00000, 2422.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1154.19995, -1355.09998, 2422.00000,   0.00000, 0.00000, 136.00000);
	CreateDynamicObject(2001, 1163.40002, -1353.09998, 2422.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1167.40002, -1355.80005, 2422.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1180.19995, -1348.09998, 2422.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2286, 1186.50000, -1352.80005, 2425.19995,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2257, 1169.00000, -1339.30005, 2424.39990,   0.00000, 0.00000, 0.00000);
	new iglesiav2[174];
	iglesiav2[0] = CreateObject(19447, -2930.9057, -1290.6866, 5002.4921, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[0], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[1] = CreateObject(19447, -2940.2280, -1280.9394, 5009.9672, 0.0000, 30.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[1], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[2] = CreateObject(19377, -2935.8310, -1276.3238, 5000.8242, 0.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[2], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[3] = CreateObject(19377, -2935.5334, -1274.9820, 5013.5107, 75.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[3], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[4] = CreateObject(19447, -2938.3203, -1286.7567, 5006.8012, 0.0000, 0.0000, -325.8835); //
	SetObjectMaterial(iglesiav2[4], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[5] = CreateObject(19447, -2941.0410, -1280.9200, 5006.8012, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[5], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[6] = CreateObject(19447, -2930.8730, -1271.6180, 5002.4921, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[6], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[7] = CreateObject(19447, -2920.1813, -1286.1074, 5002.4921, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[7], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[8] = CreateObject(19377, -2930.7905, -1286.1816, 5008.9331, 0.0000, 75.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[8], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[9] = CreateObject(19447, -2921.2963, -1290.6870, 5002.4921, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[9], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[10] = CreateObject(19447, -2938.3242, -1275.5747, 5003.3168, 0.0000, 0.0000, 325.8835); //
	SetObjectMaterial(iglesiav2[10], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[11] = CreateObject(19447, -2920.1713, -1276.4764, 5002.4824, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[11], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[12] = CreateObject(19943, -2935.4140, -1272.1855, 5000.7036, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[12], 0, -1, "none", "none", 0xFF696969);
	SetObjectMaterial(iglesiav2[12], 1, -1, "none", "none", 0xFF696969);
	iglesiav2[13] = CreateObject(19943, -2935.4140, -1290.2624, 5000.7036, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[13], 0, -1, "none", "none", 0xFF696969);
	SetObjectMaterial(iglesiav2[13], 1, -1, "none", "none", 0xFF696969);
	iglesiav2[14] = CreateObject(19943, -2920.7375, -1272.1500, 5000.7036, 0.0000, 0.0000, 261.3164); //
	SetObjectMaterial(iglesiav2[14], 0, -1, "none", "none", 0xFF696969);
	SetObjectMaterial(iglesiav2[14], 1, -1, "none", "none", 0xFF696969);
	iglesiav2[15] = CreateObject(19943, -2920.6606, -1290.1518, 5000.7036, 0.0000, 0.0000, 6.1792); //
	SetObjectMaterial(iglesiav2[15], 0, -1, "none", "none", 0xFF696969);
	SetObjectMaterial(iglesiav2[15], 1, -1, "none", "none", 0xFF696969);
	iglesiav2[16] = CreateObject(19447, -2930.9057, -1290.6866, 5005.9790, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[16], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[17] = CreateObject(19377, -2935.5444, -1275.7158, 5011.3798, 0.0000, 90.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[17], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[18] = CreateObject(19377, -2921.1896, -1286.1872, 5008.9331, 0.0000, 75.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[18], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[19] = CreateObject(19447, -2938.2023, -1286.9310, 5003.3168, 0.0000, 0.0000, -325.8835); //
	SetObjectMaterial(iglesiav2[19], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[20] = CreateObject(19377, -2935.5815, -1286.2027, 5011.3798, 0.0000, 90.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[20], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[21] = CreateObject(19447, -2921.2963, -1290.6870, 5005.9790, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[21], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[22] = CreateObject(2894, -2937.0588, -1281.1916, 5002.6225, 0.0000, 0.0000, 90.0000); //
	iglesiav2[23] = CreateObject(19447, -2920.1813, -1276.4864, 5005.9790, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[23], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[24] = CreateObject(19447, -2921.2500, -1271.6186, 5005.9790, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[24], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[25] = CreateObject(2842, -2934.4372, -1282.1534, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[25], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[26] = CreateObject(2842, -2932.6323, -1282.1573, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[26], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[27] = CreateObject(2842, -2930.8452, -1282.1560, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[27], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[28] = CreateObject(2842, -2929.0253, -1282.1604, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[28], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[29] = CreateObject(2842, -2927.2080, -1282.1623, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[29], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[30] = CreateObject(2842, -2925.3937, -1282.1617, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[30], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[31] = CreateObject(2842, -2923.5812, -1282.1606, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[31], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[32] = CreateObject(2842, -2921.7500, -1282.1566, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[32], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[33] = CreateObject(2842, -2934.4418, -1281.2579, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[33], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[34] = CreateObject(2842, -2932.6408, -1281.2578, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[34], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[35] = CreateObject(2842, -2930.8437, -1281.2546, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[35], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[36] = CreateObject(2842, -2929.0241, -1281.2567, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[36], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[37] = CreateObject(2842, -2927.2160, -1281.2574, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[37], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[38] = CreateObject(2842, -2925.3999, -1281.2556, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[38], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[39] = CreateObject(2842, -2923.5800, -1281.2535, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[39], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[40] = CreateObject(2842, -2921.7497, -1281.2519, 5000.9067, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[40], 0, -1, "none", "none", 0xFFFF0000);
	iglesiav2[41] = CreateObject(1256, -2929.3085, -1287.6379, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[41], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[41], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[42] = CreateObject(1256, -2929.3085, -1283.8785, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[42], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[42], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[43] = CreateObject(1256, -2931.1694, -1283.8785, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[43], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[43], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[44] = CreateObject(1256, -2931.1694, -1287.6379, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[44], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[44], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[45] = CreateObject(1256, -2927.4230, -1287.6379, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[45], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[45], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[46] = CreateObject(1256, -2927.4230, -1283.8785, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[46], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[46], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[47] = CreateObject(1256, -2925.5358, -1283.8785, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[47], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[47], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[48] = CreateObject(1256, -2925.5358, -1287.6379, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[48], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[48], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[49] = CreateObject(1256, -2923.4443, -1283.8785, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[49], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[49], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[50] = CreateObject(1256, -2923.4443, -1287.6379, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[50], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[50], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[51] = CreateObject(3061, -2920.2954, -1282.2270, 5002.1181, 0.0000, 0.0000, 0.0000); //
	iglesiav2[52] = CreateObject(3061, -2920.2016, -1280.1147, 5002.1181, 0.0000, 0.0000, 180.0000); //
	iglesiav2[53] = CreateObject(19433, -2919.4846, -1279.9183, 5001.7382, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[53], 0, -1, "none", "none", 0xFFDEB887);
	iglesiav2[54] = CreateObject(19433, -2919.4846, -1282.4117, 5001.7431, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[54], 0, -1, "none", "none", 0xFFDEB887);
	iglesiav2[55] = CreateObject(19433, -2918.5368, -1280.6390, 5003.4082, 0.0000, 90.0000, 180.0000); //
	SetObjectMaterial(iglesiav2[55], 0, -1, "none", "none", 0xFFDEB887);
	iglesiav2[56] = CreateObject(19433, -2918.5368, -1281.7032, 5003.4082, 0.0000, 90.0000, 180.0000); //
	SetObjectMaterial(iglesiav2[56], 0, -1, "none", "none", 0xFFDEB887);
	iglesiav2[57] = CreateObject(11712, -2920.2697, -1281.1948, 5003.7919, 0.0000, 0.0000, 0.0000); //
	iglesiav2[58] = CreateObject(19447, -2935.9887, -1285.4349, 4999.7958, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[58], 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	iglesiav2[59] = CreateObject(19447, -2935.9807, -1275.8238, 4999.7958, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[59], 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	iglesiav2[60] = CreateObject(19377, -2941.1245, -1276.2889, 5001.6279, 0.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[60], 0, 2023, "bitsnbobs", "CJ_LIGHTWOOD", 0xFFDEB887);
	iglesiav2[61] = CreateObject(2208, -2936.9694, -1282.4951, 5001.7109, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[61], 0, -1, "none", "none", 0xFFA0522D);
	iglesiav2[62] = CreateObject(1491, -2941.0305, -1280.3847, 5001.5761, 0.0000, 0.0000, -88.8999); //
	iglesiav2[63] = CreateObject(19818, -2936.8933, -1280.6339, 5002.6547, 0.0000, 0.0000, 0.0000); //
	iglesiav2[64] = CreateObject(19428, -2937.3044, -1281.1322, 5001.4633, 0.0000, 90.0000, 0.0000); //
	iglesiav2[65] = CreateObject(19428, -2937.0722, -1281.1479, 5001.2871, 0.0000, 90.0000, 0.0000); //
	iglesiav2[66] = CreateObject(19428, -2936.8322, -1281.1479, 5001.1113, 0.0000, 90.0000, 0.0000); //
	iglesiav2[67] = CreateObject(19428, -2936.6162, -1281.1479, 5000.9433, 0.0000, 90.0000, 0.0000); //
	iglesiav2[68] = CreateObject(1256, -2931.1694, -1274.6843, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[68], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[68], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[69] = CreateObject(1256, -2929.3085, -1274.6843, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[69], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[69], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[70] = CreateObject(1256, -2927.4230, -1274.6843, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[70], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[70], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[71] = CreateObject(1256, -2925.5358, -1274.6843, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[71], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[71], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[72] = CreateObject(1256, -2923.4443, -1274.6843, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[72], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[72], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[73] = CreateObject(1256, -2923.4423, -1278.4300, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[73], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[73], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[74] = CreateObject(1256, -2925.5358, -1278.4300, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[74], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[74], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[75] = CreateObject(1256, -2927.4230, -1278.4289, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[75], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[75], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[76] = CreateObject(1256, -2929.3085, -1278.4289, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[76], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[76], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[77] = CreateObject(1256, -2931.1694, -1278.4289, 5001.6118, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[77], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[77], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[78] = CreateObject(19638, -2944.0522, -1289.5594, 5002.9887, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[78], 1, 6351, "rodeo02_law2", "woodboards1", 0xFFDEB887);
	iglesiav2[79] = CreateObject(19636, -2942.9426, -1289.5583, 5002.9887, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[79], 0, -1, "none", "none", 0xFFFF4500);
	SetObjectMaterial(iglesiav2[79], 1, 6351, "rodeo02_law2", "woodboards1", 0xFFDEB887);
	iglesiav2[80] = CreateObject(19391, -2941.0048, -1281.1694, 5003.3178, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[80], 0, 14383, "burg_1", "mp_diner_woodwall", 0x00000000);
	iglesiav2[81] = CreateObject(19447, -2938.3242, -1275.5747, 5006.8012, 0.0000, 0.0000, 325.8835); //
	SetObjectMaterial(iglesiav2[81], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[82] = CreateObject(1256, -2938.3312, -1276.4709, 5002.3564, 0.0000, 0.0000, 145.9494); //
	SetObjectMaterial(iglesiav2[82], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[82], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[83] = CreateObject(1256, -2938.1647, -1286.0716, 5002.3564, 0.0000, 0.0000, 213.9147); //
	SetObjectMaterial(iglesiav2[83], 0, 14415, "carter_block_2", "mp_shop_floor2", 0xFFDC143C);
	SetObjectMaterial(iglesiav2[83], 1, 14650, "ab_trukstpc", "sa_wood08_128", 0xFFDEB887);
	iglesiav2[84] = CreateObject(19447, -2930.8730, -1271.6180, 5005.9790, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[84], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[85] = CreateObject(19447, -2937.5869, -1286.3066, 5009.9765, 0.0000, 30.0000, -325.8835); //
	SetObjectMaterial(iglesiav2[85], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[86] = CreateObject(19447, -2920.1853, -1286.1074, 5005.9790, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[86], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[87] = CreateObject(19377, -2925.3312, -1276.3177, 5000.8242, 0.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[87], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[88] = CreateObject(19377, -2921.1896, -1276.1402, 5008.9331, 0.0000, -75.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[88], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[89] = CreateObject(19447, -2921.2500, -1271.6186, 5002.4921, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[89], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[90] = CreateObject(19377, -2946.2585, -1284.3764, 5005.0043, 0.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[90], 0, 3314, "ce_burbhouse", "shingles4", 0xFF696969);
	iglesiav2[91] = CreateObject(19377, -2935.5324, -1287.0683, 5013.6147, -75.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[91], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[92] = CreateObject(19447, -2937.6508, -1276.0306, 5009.9765, 0.0000, 30.0000, 325.8835); //
	SetObjectMaterial(iglesiav2[92], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[93] = CreateObject(19377, -2930.7878, -1276.1499, 5008.9331, 0.0000, -75.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[93], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[94] = CreateObject(19447, -2920.1853, -1286.1074, 5009.4584, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[94], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[95] = CreateObject(19447, -2920.1813, -1276.4864, 5009.4584, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[95], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[96] = CreateObject(19447, -2941.0644, -1274.7650, 5003.3388, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[96], 0, 14383, "burg_1", "mp_diner_woodwall", 0x00000000);
	iglesiav2[97] = CreateObject(19377, -2951.6044, -1276.2869, 5001.6279, 0.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[97], 0, 2023, "bitsnbobs", "CJ_LIGHTWOOD", 0xFFDEB887);
	iglesiav2[98] = CreateObject(19447, -2941.0031, -1287.5847, 5003.3291, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[98], 0, 14383, "burg_1", "mp_diner_woodwall", 0x00000000);
	iglesiav2[99] = CreateObject(19428, -2946.1423, -1289.6811, 5004.5468, 0.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[99], 0, 13691, "bevcunto2_lahills", "adeta", 0x00000000);
	iglesiav2[100] = CreateObject(19447, -2950.6008, -1285.6567, 5003.3178, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[100], 0, 14383, "burg_1", "mp_diner_woodwall", 0x00000000);
	iglesiav2[101] = CreateObject(19447, -2956.6435, -1274.9162, 5003.3291, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[101], 0, 14383, "burg_1", "mp_diner_woodwall", 0x00000000);
	iglesiav2[102] = CreateObject(19447, -2945.7724, -1271.7945, 5003.3291, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[102], 0, 14383, "burg_1", "mp_diner_woodwall", 0x00000000);
	iglesiav2[103] = CreateObject(19447, -2952.1599, -1279.6839, 5003.2402, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[103], 0, 14383, "burg_1", "mp_diner_woodwall", 0x00000000);
	iglesiav2[104] = CreateObject(19391, -2945.7456, -1279.6771, 5003.1850, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[104], 0, 14383, "burg_1", "mp_diner_woodwall", 0x00000000);
	iglesiav2[105] = CreateObject(19447, -2955.3459, -1271.7882, 5003.3291, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[105], 0, 14383, "burg_1", "mp_diner_woodwall", 0x00000000);
	iglesiav2[106] = CreateObject(19439, -2950.5415, -1280.4206, 5003.1718, 0.0000, 0.0000, 0.0000); //wall079
	iglesiav2[107] = CreateObject(19355, -2942.5527, -1279.6953, 5003.3291, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[107], 0, 14383, "burg_1", "mp_diner_woodwall", 0x00000000);
	iglesiav2[108] = CreateObject(1491, -2946.5295, -1279.7055, 5001.4282, 0.0000, 0.0000, 0.0000); //
	iglesiav2[109] = CreateObject(11712, -2945.7319, -1279.7749, 5004.3593, 0.0000, 0.0000, 90.0000); //
	iglesiav2[110] = CreateObject(1796, -2954.8090, -1275.4283, 5001.7128, 0.0000, 0.0000, 0.0000); //
	iglesiav2[111] = CreateObject(1796, -2951.9726, -1275.4283, 5001.7128, 0.0000, 0.0000, 0.0000); //
	iglesiav2[112] = CreateObject(1796, -2946.2282, -1275.4283, 5001.7128, 0.0000, 0.0000, 0.0000); //
	iglesiav2[113] = CreateObject(19377, -2946.2585, -1274.8463, 5005.0043, 0.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[113], 0, 3314, "ce_burbhouse", "shingles4", 0xFF696969);
	iglesiav2[114] = CreateObject(1796, -2949.0717, -1275.4283, 5001.7128, 0.0000, 0.0000, 0.0000); //
	iglesiav2[115] = CreateObject(19355, -2950.5949, -1278.1219, 5003.3291, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[115], 0, 14383, "burg_1", "mp_diner_woodwall", 0x00000000);
	iglesiav2[116] = CreateObject(19391, -2952.1171, -1276.6081, 5003.3178, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[116], 0, 14383, "burg_1", "mp_diner_woodwall", 0x00000000);
	iglesiav2[117] = CreateObject(19355, -2955.2739, -1276.6046, 5003.3291, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[117], 0, 14383, "burg_1", "mp_diner_woodwall", 0x00000000);
	iglesiav2[118] = CreateObject(19428, -2944.4790, -1289.7047, 5002.7211, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[118], 0, 13691, "bevcunto2_lahills", "adeta", 0x00000000);
	iglesiav2[119] = CreateObject(1491, -2952.8801, -1276.5819, 5001.5527, 0.0000, 0.0000, 0.0000); //
	iglesiav2[120] = CreateObject(19428, -2946.1411, -1289.7010, 5001.1752, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[120], 0, 13691, "bevcunto2_lahills", "adeta", 0x00000000);
	iglesiav2[121] = CreateObject(19447, -2943.0390, -1290.5495, 5003.3486, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[121], 0, 3881, "apsecurity_sfxrf", "lostonclad1", 0x00000000);
	iglesiav2[122] = CreateObject(19428, -2947.7988, -1289.6832, 5002.7211, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[122], 0, 13691, "bevcunto2_lahills", "adeta", 0x00000000);
	iglesiav2[123] = CreateObject(19428, -2946.1345, -1288.9813, 5001.4189, 90.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[123], 0, 13691, "bevcunto2_lahills", "adeta", 0x00000000);
	iglesiav2[124] = CreateObject(19428, -2942.6577, -1288.9813, 5002.0253, 90.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[124], 0, 3555, "comedhos1_la", "comptroof1", 0x00000000);
	iglesiav2[125] = CreateObject(19632, -2944.8957, -1290.0378, 5001.7163, 0.0000, 0.0000, 0.0000); //
	iglesiav2[126] = CreateObject(19632, -2945.7834, -1290.0240, 5001.7163, 0.0000, 0.0000, 0.0000); //
	iglesiav2[127] = CreateObject(19632, -2945.6735, -1289.5185, 5001.7163, 0.0000, 0.0000, 0.0000); //
	iglesiav2[128] = CreateObject(19632, -2944.8989, -1289.5970, 5001.7163, 0.0000, 0.0000, 0.0000); //
	iglesiav2[129] = CreateObject(3929, -2945.2766, -1289.8951, 5001.8666, 0.0000, 0.0000, 0.0000); //
	iglesiav2[130] = CreateObject(19527, -2945.3139, -1289.3177, 5002.9716, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[130], 0, 1560, "7_11_door", "CJ_CHROME2", 0x00000000);
	SetObjectMaterial(iglesiav2[130], 1, -1, "none", "none", 0xFF0000CD);
	iglesiav2[131] = CreateObject(19304, -2946.0834, -1288.9464, 5002.3227, 0.0000, 0.0000, 0.0000); //
	iglesiav2[132] = CreateObject(19428, -2942.6616, -1289.6811, 5002.9111, 0.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[132], 0, 3555, "comedhos1_la", "comptroof1", 0x00000000);
	iglesiav2[133] = CreateObject(19632, -2946.5437, -1290.0382, 5001.7163, 0.0000, 0.0000, 0.0000); //
	iglesiav2[134] = CreateObject(19632, -2946.5146, -1289.5570, 5001.7163, 0.0000, 0.0000, 0.0000); //
	iglesiav2[135] = CreateObject(19632, -2947.3044, -1290.0118, 5001.7163, 0.0000, 0.0000, 0.0000); //
	iglesiav2[136] = CreateObject(19632, -2947.2148, -1289.5102, 5001.7163, 0.0000, 0.0000, 0.0000); //
	iglesiav2[137] = CreateObject(3929, -2946.9958, -1289.9068, 5001.8666, 0.0000, 0.0000, 0.0000); //
	iglesiav2[138] = CreateObject(2803, -2941.8986, -1289.6346, 5003.4106, 0.0000, 0.0000, 118.4477); //
	iglesiav2[139] = CreateObject(19637, -2943.5007, -1289.5600, 5002.9887, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[139], 1, 6351, "rodeo02_law2", "woodboards1", 0xFFDEB887);
	iglesiav2[140] = CreateObject(2357, -2943.6042, -1284.3789, 5002.1914, 0.0000, 0.0000, 90.0000); //
	iglesiav2[141] = CreateObject(2357, -2947.8886, -1284.3789, 5002.1914, 0.0000, 0.0000, 90.0000); //
	iglesiav2[142] = CreateObject(2120, -2944.9921, -1283.0399, 5002.3593, 0.0000, 0.0000, 180.0000); //
	iglesiav2[143] = CreateObject(19584, -2944.9299, -1288.8629, 5004.4223, 90.0000, 0.0000, 0.0000); //
	iglesiav2[144] = CreateObject(19584, -2944.4958, -1288.8643, 5004.4223, 90.0000, 0.0000, 0.0000); //
	iglesiav2[145] = CreateObject(19428, -2946.1423, -1289.6811, 5002.9111, 0.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[145], 0, 13691, "bevcunto2_lahills", "adeta", 0x00000000);
	iglesiav2[146] = CreateObject(19527, -2946.8840, -1289.3879, 5002.9716, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[146], 0, 1560, "7_11_door", "CJ_CHROME2", 0x00000000);
	SetObjectMaterial(iglesiav2[146], 1, -1, "none", "none", 0xFF0000CD);
	iglesiav2[147] = CreateObject(2161, -2941.2111, -1275.7773, 5001.7280, 0.0000, 0.0000, -89.7997); //MED_OFFICE_UNIT_4
	SetObjectMaterial(iglesiav2[147], 0, 19426, "all_walls", "mirror01", 0x00000000);
	SetObjectMaterial(iglesiav2[147], 2, 19426, "all_walls", "mirror01", 0x00000000);
	iglesiav2[148] = CreateObject(2161, -2941.2089, -1277.0986, 5001.7280, 0.0000, 0.0000, -89.7997); //MED_OFFICE_UNIT_4
	SetObjectMaterial(iglesiav2[148], 0, 19426, "all_walls", "mirror01", 0x00000000);
	SetObjectMaterial(iglesiav2[148], 2, 19426, "all_walls", "mirror01", 0x00000000);
	iglesiav2[149] = CreateObject(2161, -2941.2111, -1275.7773, 5003.0761, 0.0000, 0.0000, -89.7997); //MED_OFFICE_UNIT_4
	SetObjectMaterial(iglesiav2[149], 0, 19426, "all_walls", "mirror01", 0x00000000);
	SetObjectMaterial(iglesiav2[149], 2, 19426, "all_walls", "mirror01", 0x00000000);
	iglesiav2[150] = CreateObject(2161, -2941.2089, -1277.0986, 5003.0732, 0.0000, 0.0000, -89.7997); //MED_OFFICE_UNIT_4
	SetObjectMaterial(iglesiav2[150], 0, 19426, "all_walls", "mirror01", 0x00000000);
	SetObjectMaterial(iglesiav2[150], 2, 19426, "all_walls", "mirror01", 0x00000000);
	iglesiav2[151] = CreateObject(19439, -2941.9240, -1276.0653, 5002.6801, 0.0000, 0.0000, -23.8999); //wall079
	SetObjectMaterial(iglesiav2[151], 0, 1491, "int_doors", "CJ_WOODDOOR1", 0xFFCD853F);
	iglesiav2[152] = CreateObject(19439, -2942.1232, -1277.2801, 5002.6489, 0.0000, 0.0000, 39.7999); //wall079
	SetObjectMaterial(iglesiav2[152], 0, 1491, "int_doors", "CJ_WOODDOOR1", 0xFFCD853F);
	iglesiav2[153] = CreateObject(2521, -2955.0346, -1279.0825, 5001.7153, 0.0000, 0.0000, 180.0000); //
	iglesiav2[154] = CreateObject(19377, -2941.1245, -1285.9128, 5001.6279, 0.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[154], 0, 2023, "bitsnbobs", "CJ_LIGHTWOOD", 0xFFDEB887);
	iglesiav2[155] = CreateObject(19377, -2946.2585, -1294.0075, 5005.0043, 0.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[155], 0, 3314, "ce_burbhouse", "shingles4", 0xFF696969);
	iglesiav2[156] = CreateObject(19377, -2951.6184, -1285.9173, 5001.6279, 0.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[156], 0, 2023, "bitsnbobs", "CJ_LIGHTWOOD", 0xFFDEB887);
	iglesiav2[157] = CreateObject(19377, -2925.3278, -1285.9195, 5000.8242, 0.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[157], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	iglesiav2[158] = CreateObject(19377, -2956.7575, -1274.8569, 5005.0043, 0.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[158], 0, 3314, "ce_burbhouse", "shingles4", 0xFF696969);
	iglesiav2[159] = CreateObject(2120, -2942.1821, -1285.2562, 5002.3593, 0.0000, 0.0000, 0.0000); //
	iglesiav2[160] = CreateObject(2120, -2944.9902, -1285.2320, 5002.3593, 0.0000, 0.0000, 180.0000); //
	iglesiav2[161] = CreateObject(2120, -2942.1821, -1283.0399, 5002.3593, 0.0000, 0.0000, 0.0000); //
	iglesiav2[162] = CreateObject(2120, -2946.4836, -1283.0399, 5002.3593, 0.0000, 0.0000, 0.0000); //
	iglesiav2[163] = CreateObject(2120, -2946.4836, -1285.2320, 5002.3593, 0.0000, 0.0000, 0.0000); //
	iglesiav2[164] = CreateObject(2120, -2949.3627, -1283.0399, 5002.3593, 0.0000, 0.0000, 180.0000); //
	iglesiav2[165] = CreateObject(2120, -2949.3627, -1285.2320, 5002.3593, 0.0000, 0.0000, 180.0000); //
	iglesiav2[166] = CreateObject(2097, -2955.4958, -1277.1092, 5002.0141, 0.0000, 0.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[166], 0, 15048, "labigsave", "ah_wallstyle1", 0x00000000);
	iglesiav2[167] = CreateObject(19438, -2952.2700, -1277.4508, 5001.6479, 0.0000, -90.3999, 0.2998); //wall078
	SetObjectMaterial(iglesiav2[167], 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	iglesiav2[168] = CreateObject(19438, -2952.2639, -1279.0516, 5001.6479, 0.0000, -90.3999, 0.2998); //wall078
	SetObjectMaterial(iglesiav2[168], 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	iglesiav2[169] = CreateObject(19438, -2955.7233, -1279.0699, 5001.6425, 0.0000, -90.3999, 0.2998); //wall078
	SetObjectMaterial(iglesiav2[169], 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	iglesiav2[170] = CreateObject(19438, -2955.7299, -1277.4693, 5001.6425, 0.0000, -90.3999, 0.2998); //wall078
	SetObjectMaterial(iglesiav2[170], 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	iglesiav2[171] = CreateObject(19447, -2952.6721, -1290.5495, 5003.2973, 0.0000, 0.0000, 90.0000); //
	SetObjectMaterial(iglesiav2[171], 0, 14383, "burg_1", "mp_diner_woodwall", 0x00000000);
	iglesiav2[172] = CreateObject(1796, -2943.0686, -1275.4283, 5001.7128, 0.0000, 0.0000, 0.0000); //
	iglesiav2[173] = CreateObject(19377, -2935.8283, -1285.9150, 5000.8242, 0.0000, 90.0000, 0.0000); //
	SetObjectMaterial(iglesiav2[173], 0, 10386, "mountainsfs", "ws_stonewall", 0x00000000);
	//motoqueros//
	CreateDynamicObject(997, 692.70001, -471.70001, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(997, 692.70001, -468.60001, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(997, 692.70001, -465.50000, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(997, 692.70001, -462.39999, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(997, 692.70001, -459.20001, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(997, 708.00000, -466.00000, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(997, 708.00000, -463.00000, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(997, 708.00000, -459.79999, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(997, 707.90002, -456.70001, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(997, 666.79999, -456.79999, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(997, 667.00000, -459.79999, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(997, 667.09998, -463.00000, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(997, 667.00000, -466.10001, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(997, 667.00000, -469.20001, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(997, 667.09998, -472.39999, 15.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3524, 670.50000, -474.89999, 18.40000,   0.00000, 0.00000, 2.00000);
	CreateDynamicObject(3524, 692.40002, -475.00000, 18.40000,   0.00000, 0.00000, 1.99951);
	CreateDynamicObject(3528, 681.20001, -473.10001, 26.50000,   0.00000, 0.00000, 270.00000);



    //isla nueva  bernal 13-10-2020
    CreateObject(16430, 963.55792, -2331.14941, 11.80200,   0.00000, 0.00000, 26.00000);
    CreateObject(16430, 819.73169, -2401.22729, 11.80200,   0.00000, 0.00000, 26.00000);
    CreateObject(16430, 675.95258, -2471.33984, 11.80200,   0.00000, 0.00000, 26.00000);
    CreateObject(6448, 541.08661, -2498.08398, 6.02370,   0.00000, 0.00000, -64.00000);
    CreateObject(19539, 515.20203, -2522.23047, 1.63700,   0.00000, 0.00000, 25.00000);
    CreateObject(19539, 541.61609, -2578.86279, 1.63700,   0.00000, 0.00000, 25.00000);
    CreateObject(19540, 502.03156, -2493.93896, 1.61080,   0.00000, 0.00000, 25.00000);
    CreateObject(19540, 554.81982, -2607.17944, 1.63300,   0.00000, 0.00000, -65.00000);
    CreateObject(19542, 498.17120, -2633.57349, 1.63560,   0.00000, 0.00000, -65.00000);
    CreateObject(19550, 471.77689, -2576.98242, 1.63690,   0.00000, 0.00000, 25.00000);
    CreateObject(19542, 445.38870, -2520.34692, 1.62690,   0.00000, 0.00000, 115.00000);
    CreateObject(19540, 388.74539, -2546.76245, 1.62880,   0.00000, 0.00000, 115.00000);
    CreateObject(19542, 415.15079, -2603.40503, 1.63320,   0.00000, 0.00000, 205.00000);
    CreateObject(19540, 441.63672, -2659.99292, 1.64100,   0.00000, 0.00000, 205.00000);
    CreateObject(3330, 889.66217, -2367.28955, -0.30760,   0.00000, 0.00000, -55.00000);
    CreateObject(3330, 746.99805, -2436.72656, -0.30760,   0.00000, 0.00000, -55.00000);
    CreateObject(3331, 975.57330, -2334.58447, 21.68420,   0.00000, 0.00000, 116.00000);
    CreateObject(3331, 903.42511, -2369.85474, 21.68420,   0.00000, 0.00000, 116.00000);
    CreateObject(3331, 831.22076, -2405.04028, 21.68420,   0.00000, 0.00000, 116.00000);
    CreateObject(3331, 759.02448, -2440.20166, 21.68420,   0.00000, 0.00000, 116.00000);
    CreateObject(3331, 686.78314, -2475.31519, 21.68420,   0.00000, 0.00000, 116.00000);
    CreateObject(3331, 613.96472, -2510.74585, 19.62720,   -4.00000, 0.00000, 116.00000);
    CreateObject(19425, 605.14233, -2508.84131, 12.09570,   0.00000, 0.00000, -64.00000);
    CreateObject(19425, 603.69702, -2505.87354, 12.09570,   0.00000, 0.00000, -64.00000);
    CreateObject(19425, 602.24060, -2502.91333, 12.09570,   0.00000, 0.00000, -64.00000);
    CreateObject(7605, 433.94839, -2587.81958, 1.73800,   0.00000, 0.00000, 25.00000);
    CreateObject(7337, 514.04102, -2549.71460, 1.80070,   0.00000, 0.00000, 116.00000);
    CreateObject(6522, 479.41049, -2530.48633, 9.93690,   0.00000, 0.00000, -155.00000);
    CreateObject(7932, 521.89392, -2573.51196, 4.64150,   0.00000, 0.00000, -64.00000);
    CreateObject(7932, 500.53876, -2583.80786, 4.64150,   0.00000, 0.00000, -64.00000);
    CreateObject(7932, 479.04034, -2594.02490, 4.64150,   0.00000, 0.00000, -65.00000);
    CreateObject(16767, 500.63931, -2527.32544, 7.52490,   0.00000, 0.00000, -64.00000);
    CreateObject(7916, 401.22601, -2620.00562, 3.19720,   0.00000, 0.00000, 129.00000);
    CreateObject(7588, 386.92279, -2605.43555, 5.58570,   0.00000, 0.00000, 23.00000);
    CreateObject(6965, 433.94580, -2588.05835, 5.47920,   0.00000, 0.00000, 0.00000);
    CreateObject(645, 542.80878, -2524.25049, 1.09870,   0.00000, 0.00000, 0.00000);
    CreateObject(645, 550.06702, -2543.09839, -0.25830,   0.00000, 0.00000, 0.00000);
    CreateObject(645, 357.65533, -2537.14136, 1.17546,   0.00000, 0.00000, 0.00000);
    CreateObject(645, 362.81158, -2549.85864, 1.17546,   0.00000, 0.00000, 0.00000);
    CreateObject(645, 368.74362, -2564.02319, 1.17546,   0.00000, 0.00000, 0.00000);
    CreateObject(19467, 607.81000, -2511.63989, 12.14340,   -15.00000, 0.00000, -69.00000);
    CreateObject(19467, 603.36908, -2498.47803, 12.14340,   -15.00000, 0.00000, -68.00000);
    CreateObject(1660, 546.48859, -2537.03027, 1.35630,   -26.00000, 0.00000, -64.00000);
    CreateObject(1660, 544.06915, -2532.40137, 1.34130,   -26.00000, 0.00000, -64.00000);
    CreateObject(19452, 536.91364, -2577.06714, 1.63010,   0.00000, 0.00000, 26.00000);
    CreateObject(19452, 532.70068, -2568.40454, 1.63010,   0.00000, 0.00000, 26.00000);
    CreateObject(19452, 528.47449, -2559.75073, 1.63010,   0.00000, 0.00000, 26.00000);
    CreateObject(5520, 526.87848, -2505.72021, 6.46870,   0.00000, 0.00000, 115.00000);
    CreateObject(11490, 553.36334, -2572.15112, 1.58460,   0.00000, 0.00000, 117.00000);
    CreateObject(7885, 409.75861, -2540.35522, 1.50680,   0.00000, 0.00000, 117.00000);
    CreateObject(10847, 485.25302, -2619.40137, 7.90280,   0.00000, 0.00000, -156.00000);
    CreateObject(8061, 438.49149, -2654.91748, 6.50630,   0.00000, 0.00000, -153.00000);
    CreateObject(18850, 500.86081, -2486.68188, -9.66690,   0.00000, 0.00000, -64.00000);
    CreateObject(3940, 493.09610, -2645.93530, 4.72420,   0.00000, 0.00000, 207.00000);
    CreateObject(19452, 544.39722, -2546.09399, 1.63010,   0.00000, 0.00000, 116.00000);
    CreateObject(19452, 539.06311, -2526.33838, 1.63010,   0.00000, 0.00000, 116.00000);
    CreateObject(8418, 461.22275, -2635.55786, 2.16290,   0.00000, 0.00000, 27.00000);
    CreateObject(2600, 451.33209, -2518.12085, 6.30690,   0.00000, 0.00000, -164.00000);
    CreateObject(2600, 403.21051, -2527.64722, 10.11990,   0.00000, 0.00000, -164.00000);
    CreateObject(623, 522.45276, -2631.16113, 1.59650,   0.00000, 0.00000, -164.00000);
    CreateObject(623, 503.75348, -2625.52759, 1.59650,   0.00000, 0.00000, -164.00000);
    CreateObject(19467, 476.58521, -2563.99561, 1.70580,   5.00000, 0.00000, -65.00000);
    CreateObject(19467, 478.53052, -2568.07324, 1.70580,   5.00000, 0.00000, -65.00000);
    CreateObject(19467, 480.45801, -2572.15649, 1.70580,   5.00000, 0.00000, -65.00000);
    CreateObject(3763, 486.54779, -2619.79883, 10.04250,   0.00000, 0.00000, 0.00000);
    CreateObject(4022, 525.73682, -2528.62036, 4.85740,   0.00000, 0.00000, 25.00000);
    CreateObject(19859, 527.92627, -2533.02490, 3.13670,   0.00000, 0.00000, 25.00000);
    CreateObject(2955, 501.71667, -2579.92749, 3.52970,   0.00000, 0.00000, -64.00000);
    CreateObject(2955, 480.29691, -2590.18945, 3.53210,   0.00000, 0.00000, -67.00000);
    CreateObject(2955, 523.09332, -2569.63306, 3.52500,   0.00000, 0.00000, -65.00000);
    CreateObject(8377, 590.93158, -2674.45093, 2.11070,   0.00000, 0.00000, 26.00000);
    CreateObject(19540, 636.21863, -2804.95386, 1.63300,   0.00000, 0.00000, -65.00000);
    CreateObject(19539, 623.14978, -2776.85034, 1.61300,   0.00000, 0.00000, 25.00000);
    CreateObject(19540, 609.90161, -2748.74268, 1.65280,   0.00000, 0.00000, 25.00000);
    CreateObject(19542, 579.64954, -2831.47241, 1.62160,   0.00000, 0.00000, -65.00000);
    CreateObject(19542, 553.57782, -2774.86768, 1.61260,   0.00000, 0.00000, 115.00000);
    CreateObject(19540, 523.08118, -2858.03223, 1.55680,   0.00000, 0.00000, -155.00000);
    CreateObject(19540, 497.09579, -2801.31958, 1.62480,   0.00000, 0.00000, -245.00000);
    CreateObject(19539, 510.29871, -2829.64282, 1.62200,   0.00000, 0.00000, -155.00000);
    CreateObject(7337, 547.12671, -2584.76123, 1.79710,   0.00000, 0.00000, 26.00000);
    CreateObject(6300, 700.86920, -2877.65625, -6.03730,   0.00000, 0.00000, 26.00000);
    CreateObject(6450, 655.04468, -2783.29492, -6.04050,   0.00000, 0.00000, 26.00000);
    CreateObject(19467, 610.69965, -2730.62646, 1.85670,   -14.00000, 0.00000, 26.00000);
    CreateObject(19467, 623.11377, -2724.59253, 1.85670,   -14.00000, 0.00000, 26.00000);
    CreateObject(19425, 619.98651, -2726.90942, 1.75640,   0.00000, 0.00000, 25.00000);
    CreateObject(19425, 616.98663, -2728.30322, 1.75640,   0.00000, 0.00000, 25.00000);
    CreateObject(19425, 614.00555, -2729.70093, 1.75640,   0.00000, 0.00000, 25.00000);
    CreateObject(19425, 677.95148, -2845.88550, 1.84260,   0.00000, 0.00000, 25.00000);
    CreateObject(19425, 674.97906, -2847.27612, 1.84260,   0.00000, 0.00000, 25.00000);
    CreateObject(19425, 671.98615, -2848.66357, 1.84260,   0.00000, 0.00000, 25.00000);
    CreateObject(2600, 683.86090, -2842.91846, 2.65530,   0.00000, 0.00000, 135.00000);
    CreateObject(16281, 690.53168, -2878.76367, 4.70140,   0.00000, 0.00000, 206.00000);
    CreateObject(1653, 704.72076, -2840.18726, 2.66720,   0.00000, 0.00000, -64.00000);
    CreateObject(1653, 710.34753, -2851.77783, 2.66720,   0.00000, 0.00000, -64.00000);
    CreateObject(1653, 714.57501, -2860.39819, 2.66720,   0.00000, 0.00000, -64.00000);
    CreateObject(1653, 720.88629, -2864.32788, 2.66720,   0.00000, 0.00000, 27.00000);
    CreateObject(1653, 655.78571, -2768.40674, 2.64460,   0.00000, 0.00000, 26.00000);
    CreateObject(1653, 661.27478, -2765.73999, 2.64460,   0.00000, 0.00000, 26.00000);
    CreateObject(1653, 664.18787, -2757.16333, 2.64460,   0.00000, 0.00000, 116.00000);
    CreateObject(1653, 652.06061, -2732.85229, 2.64460,   0.00000, 0.00000, 116.00000);
    CreateObject(1653, 646.42377, -2721.22314, 2.64460,   0.00000, 0.00000, 116.00000);
    CreateObject(6450, 586.74261, -2838.47583, -5.99320,   0.00000, 0.00000, 115.00000);
    CreateObject(7932, 527.43390, -2600.98267, 4.64150,   0.00000, 0.00000, -154.00000);
    CreateObject(7932, 537.66089, -2622.64600, 4.64150,   0.00000, 0.00000, -154.00000);
    CreateObject(19452, 571.43384, -2611.95435, 1.61720,   0.00000, 0.00000, 26.00000);
    CreateObject(19452, 567.21008, -2603.28589, 1.61720,   0.00000, 0.00000, 26.00000);
    CreateObject(19452, 562.95740, -2594.62915, 1.61720,   0.00000, 0.00000, 26.00000);
    CreateObject(19452, 558.77802, -2585.93628, 1.61720,   0.00000, 0.00000, 26.00000);
    CreateObject(19452, 534.03845, -2637.71387, 1.81400,   0.00000, 0.00000, -64.00000);
    CreateObject(19452, 542.66779, -2633.50659, 1.81400,   0.00000, 0.00000, -64.00000);
    CreateObject(19452, 551.34155, -2629.27930, 1.81400,   0.00000, 0.00000, -64.00000);
    CreateObject(19467, 553.80737, -2622.48291, 1.64490,   -13.00000, 1.00000, 118.00000);
    CreateObject(19467, 555.77808, -2626.54980, 1.69090,   -13.00000, 1.00000, 118.00000);
    CreateObject(2955, 540.99835, -2622.66626, 3.57050,   0.00000, 0.00000, 25.00000);
    CreateObject(2955, 530.70911, -2601.02710, 3.54360,   0.00000, 0.00000, 25.00000);
    CreateObject(16287, 717.13123, -2874.57495, 1.97520,   0.00000, 0.00000, -154.00000);
    CreateObject(18552, 605.52869, -2743.50439, 1.76850,   0.00000, 0.00000, -244.00000);
    CreateObject(1432, 709.82349, -2903.14136, 2.00050,   0.00000, 0.00000, 0.00000);
    CreateObject(1432, 707.51886, -2898.54565, 2.00050,   0.00000, 0.00000, 0.00000);
    CreateObject(1432, 705.62830, -2894.37500, 2.00050,   0.00000, 0.00000, 0.00000);
    CreateObject(3620, 670.32312, -2755.02368, 14.93070,   0.00000, 0.00000, 118.00000);
    CreateObject(1608, 682.31152, -2748.11816, 15.21420,   98.00000, -11.00000, 98.00000);
    CreateObject(18553, 503.21280, -2545.04053, 3.05280,   0.00000, 0.00000, -65.00000);
    CreateObject(19452, 533.15509, -2879.91626, 0.34440,   0.00000, 0.00000, 25.00000);
    CreateObject(19452, 529.16425, -2871.18164, 0.34440,   0.00000, 0.00000, 25.00000);
    CreateObject(19452, 525.55988, -2863.45850, 1.36640,   0.00000, 0.00000, 25.00000);
    CreateObject(10398, 546.71014, -2790.99292, 29.83510,   0.00000, 0.00000, -154.00000);
    CreateObject(5134, 508.43640, -2845.59888, 5.72180,   0.00000, 0.00000, 25.00000);
    CreateObject(6296, 635.52979, -2800.60962, 3.79860,   0.00000, 0.00000, 207.00000);
    CreateObject(6213, 573.51544, -2823.22900, 1.99570,   0.00000, 0.00000, 115.00000);
    CreateObject(19452, 519.15253, -2861.29199, 1.38780,   0.00000, 0.00000, -65.00000);
    CreateObject(5017, 696.63843, -2905.96436, 5.33900,   0.00000, 0.00000, 116.00000);
    CreateObject(3034, 692.29834, -2897.10547, 7.93800,   0.00000, 0.00000, -154.00000);
    CreateObject(745, 587.03503, -2787.64380, 1.84526,   0.00000, 0.00000, 0.00000);
    CreateObject(745, 610.43011, -2752.31738, 1.44670,   0.00000, 0.00000, 0.00000);
    CreateObject(14781, 520.10034, -2868.72119, 2.64730,   0.00000, 0.00000, -65.00000);
    CreateObject(1255, 512.36719, -2878.70239, 1.90040,   0.00000, 0.00000, -149.00000);
    CreateObject(1255, 513.53564, -2881.35449, 1.90040,   0.00000, 0.00000, -149.00000);
    CreateObject(1255, 515.60822, -2883.35083, 1.90040,   0.00000, 0.00000, -149.00000);
    CreateObject(1255, 510.45789, -2875.71973, 1.90040,   0.00000, 0.00000, -149.00000);
    CreateObject(14782, 525.09943, -2863.78003, 2.03190,   0.00000, 0.00000, -65.00000);
    CreateObject(6462, 536.54041, -2867.39893, 3.42880,   0.00000, 0.00000, -65.00000);
    CreateObject(1569, 686.17932, -2903.10156, 2.08420,   0.00000, 0.00000, 26.00000);
    CreateObject(1569, 612.91229, -2741.57983, 1.79570,   0.00000, 0.00000, -66.00000);
    CreateObject(640, 630.12030, -2790.95337, 2.28150,   0.00000, 0.00000, 25.00000);
    CreateObject(640, 627.93604, -2785.97241, 2.28150,   0.00000, 0.00000, 23.00000);
    CreateObject(640, 625.86609, -2780.99365, 2.28150,   0.00000, 0.00000, 22.00000);
    CreateObject(640, 623.83008, -2775.98828, 2.28150,   0.00000, 0.00000, 22.00000);
    CreateObject(640, 621.85986, -2770.96973, 2.28150,   0.00000, 0.00000, 22.00000);
    CreateObject(640, 638.41241, -2811.12256, 2.29830,   0.00000, 0.00000, 18.00000);
    CreateObject(19608, 675.82092, -2890.40259, 2.01320,   0.00000, 0.00000, 116.00000);
    CreateObject(19129, 685.36920, -2892.18359, 1.99220,   0.00000, 0.00000, 26.00000);
    CreateObject(19129, 703.35638, -2883.41260, 1.99220,   0.00000, 0.00000, 26.00000);
    CreateObject(19129, 712.12378, -2901.37427, 1.99220,   0.00000, 0.00000, 26.00000);
    CreateObject(1653, 710.69562, -2875.77100, 2.75000,   0.00000, 0.00000, -64.00000);
    CreateObject(1653, 716.29468, -2887.35010, 2.75000,   0.00000, 0.00000, -64.12000);
    CreateObject(1653, 719.62592, -2908.85889, 2.75000,   0.00000, 0.00000, -154.00000);
    CreateObject(1653, 702.08984, -2872.90308, 2.75000,   0.00000, 0.00000, 26.00000);
    CreateObject(1653, 679.13013, -2884.17432, 2.43980,   0.00000, 0.00000, 26.00000);
    CreateObject(1609, 717.42065, -2879.66675, 2.28350,   0.00000, 0.00000, 0.00000);
    CreateObject(7392, 696.07025, -2904.06299, 14.39820,   0.00000, 0.00000, -62.00000);
    CreateObject(18632, 722.01367, -2877.04395, 2.04690,   91.00000, -2.00000, 2.00000);
    CreateObject(18632, 722.19702, -2877.96753, 2.04690,   91.00000, -2.00000, 2.00000);
    CreateObject(18632, 722.45874, -2878.29834, 2.04690,   91.00000, -2.00000, 2.00000);
    CreateObject(18632, 722.52069, -2878.89258, 2.04690,   91.00000, -2.00000, 2.00000);
    CreateObject(18632, 722.31903, -2878.97021, 2.04690,   91.00000, -2.00000, 2.00000);
    CreateObject(19452, 489.98889, -2838.64502, 0.72910,   0.00000, 0.00000, 25.00000);
    CreateObject(19452, 493.67215, -2846.54053, 0.72910,   0.00000, 0.00000, 25.00000);
    CreateObject(19452, 497.75751, -2855.24048, 0.72910,   0.00000, 0.00000, 25.00000);
    CreateObject(19452, 501.82401, -2863.98730, 0.72910,   0.00000, 0.00000, 25.00000);
    CreateObject(1653, 708.01611, -2914.52246, 2.75000,   0.00000, 0.00000, -154.00000);
    CreateObject(1653, 696.42432, -2920.19629, 2.75000,   0.00000, 0.00000, -154.00000);
    CreateObject(16287, 729.28131, -2896.71851, 1.97520,   0.00000, 0.00000, -64.00000);
    CreateObject(1609, 734.99872, -2896.76660, 2.49210,   4.00000, -4.00000, -69.00000);
    CreateObject(19862, 527.24548, -2567.71362, 4.77890,   0.00000, 0.00000, 26.00000);
    CreateObject(19862, 505.86765, -2577.99146, 4.77890,   0.00000, 0.00000, 26.00000);
    CreateObject(19862, 484.55481, -2588.49390, 4.77890,   0.00000, 0.00000, 26.00000);
    CreateObject(19862, 533.22333, -2606.29492, 4.86060,   0.00000, 0.00000, -64.00000);
    CreateObject(19862, 543.49792, -2628.00049, 4.86060,   0.00000, 0.00000, -64.00000);

   //Isla Vendida 1
    CreateObject(16037, 2788.11401, -2623.48071, 16.49040,   0.00000, 0.00000, 90.00000);
    CreateObject(16037, 2788.10767, -2744.33594, 16.49040,   0.00000, 0.00000, 90.00000);
    CreateObject(16037, 2788.07446, -2865.28467, 16.49040,   0.00000, 0.00000, 90.00000);
    CreateObject(16037, 2788.08057, -2986.29150, 16.49040,   0.00000, 0.00000, 90.00000);
    CreateObject(16037, 2788.12061, -3107.32104, 16.49040,   0.00000, 0.00000, 90.00000);
    CreateObject(16037, 2788.15430, -3228.29248, 16.49040,   0.00000, 0.00000, 90.00000);
    CreateObject(16037, 2788.14453, -3349.23022, 16.49040,   0.00000, 0.00000, 90.00000);
    CreateObject(16037, 2788.16724, -3470.25732, 16.57040,   0.00000, 0.00000, 90.00000);
    CreateObject(19539, 2789.24268, -3554.18457, 12.37180,   0.00000, 0.00000, 91.00000);
    CreateObject(19539, 2727.50195, -3555.25146, 12.43580,   0.00000, 0.00000, 91.00000);
    CreateObject(19539, 2851.42944, -3553.13794, 12.43780,   0.00000, 0.00000, 91.00000);
    CreateObject(19539, 2858.45605, -3560.17700, 12.37180,   0.00000, 0.00000, 1.00000);
    CreateObject(19540, 2857.87744, -3552.45825, 12.19860,   0.00000, 0.00000, 0.00000);
    CreateObject(19539, 2859.60742, -3622.59424, 12.37180,   0.00000, 0.00000, 1.00000);
    CreateObject(19539, 2860.68335, -3684.98486, 12.37180,   0.00000, 0.00000, 1.00000);
    CreateObject(19539, 2861.74072, -3747.00684, 12.37180,   0.00000, 0.00000, 1.00000);
    CreateObject(19539, 2848.89844, -3754.39282, 12.37180,   0.00000, 0.00000, -89.00000);
    CreateObject(19539, 2718.65991, -3562.29370, 12.43580,   0.00000, 0.00000, -180.00000);
    CreateObject(19540, 2719.14624, -3556.46973, 12.71860,   0.00000, 0.00000, 90.00000);
    CreateObject(19539, 2718.69727, -3624.43750, 12.43580,   0.00000, 0.00000, -180.00000);
    CreateObject(19539, 2718.68555, -3686.18286, 12.43580,   0.00000, 0.00000, -180.00000);
    CreateObject(19539, 2718.62598, -3747.92944, 12.43580,   0.00000, 0.00000, -180.00000);
    CreateObject(19539, 2786.41504, -3755.22803, 12.37180,   0.00000, 0.00000, -89.00000);
    CreateObject(19539, 2724.05933, -3756.12354, 12.37180,   0.00000, 0.00000, -89.00000);
    CreateObject(19540, 2717.37842, -3757.26563, 11.75860,   0.00000, 0.00000, -179.00000);
    CreateObject(19540, 2862.41089, -3754.92261, 11.75860,   0.00000, 0.00000, -89.00000);
    CreateObject(19529, 2807.88843, -3615.56152, 12.40900,   0.00000, 0.00000, 0.00000);
    CreateObject(19529, 2807.84229, -3701.00195, 12.36500,   0.00000, 0.00000, 0.00000);
    CreateObject(19529, 2775.40405, -3616.29150, 12.36700,   0.00000, 0.00000, 0.00000);
    CreateObject(19529, 2777.01978, -3693.62402, 12.36700,   0.00000, 0.00000, 0.00000);
    CreateObject(19535, 2787.56079, -3524.64038, 12.59980,   0.00000, 0.00000, 91.00000);
    CreateObject(3749, 2787.91357, -3532.15771, 18.13610,   0.00000, 0.00000, 0.00000);
    CreateObject(8210, 2824.81738, -3530.90137, 15.13920,   0.00000, 0.00000, 2.00000);
    CreateObject(8210, 2853.73804, -3529.86938, 15.13920,   0.00000, 0.00000, 2.00000);
    CreateObject(8210, 2881.51831, -3556.75244, 15.13920,   0.00000, 0.00000, -90.00000);
    CreateObject(8210, 2882.40967, -3610.20679, 15.13920,   0.00000, 0.00000, -88.00000);
    CreateObject(8210, 2884.10620, -3659.24951, 15.13920,   0.00000, 0.00000, -88.00000);
    CreateObject(8210, 2885.81348, -3708.28589, 15.13920,   0.00000, 0.00000, -88.00000);
    CreateObject(8210, 2886.64331, -3750.49341, 15.13920,   0.00000, 0.00000, -90.00000);
    CreateObject(8210, 2750.22461, -3532.98145, 15.13920,   0.00000, 0.00000, 2.00000);
    CreateObject(8210, 2723.81909, -3533.84180, 15.13920,   0.00000, 0.00000, 2.00000);
    CreateObject(8210, 2696.30811, -3562.56812, 15.01620,   0.00000, 0.00000, 89.00000);
    CreateObject(8210, 2695.37793, -3618.05615, 15.13920,   0.00000, 0.00000, 89.00000);
    CreateObject(8210, 2695.28931, -3673.00903, 15.13920,   0.00000, 0.00000, 91.00000);
    CreateObject(8210, 2696.24951, -3728.29077, 15.13920,   0.00000, 0.00000, 91.00000);
    CreateObject(8210, 2696.71265, -3753.01099, 15.13920,   0.00000, 0.00000, 91.00000);
    CreateObject(8210, 2858.61621, -3778.30737, 15.13920,   0.00000, 0.00000, -179.00000);
    CreateObject(8210, 2803.39648, -3779.24365, 15.13920,   0.00000, 0.00000, -179.00000);
    CreateObject(8210, 2747.88916, -3780.20776, 15.13920,   0.00000, 0.00000, -179.00000);
    CreateObject(8210, 2725.06787, -3780.32764, 15.13920,   0.00000, 0.00000, -179.00000);
    CreateObject(10757, 2787.60864, -3533.53003, 24.94930,   0.00000, 8.00000, 176.00000);
    CreateObject(8172, 2717.78296, -3616.61572, 12.73730,   0.00000, 0.00000, -180.00000);
    CreateObject(8355, 2717.77490, -3711.09009, 12.70620,   0.00000, 0.00000, -180.00000);
    CreateObject(3491, 2766.30273, -3744.56104, 20.74180,   0.00000, 0.00000, -90.00000);
    CreateObject(3491, 2766.27368, -3675.31860, 20.74180,   0.00000, 0.00000, -90.00000);
    CreateObject(9241, 2762.40405, -3552.53369, 14.27380,   0.00000, 0.00000, 0.00000);
    CreateObject(9241, 2762.43726, -3584.66553, 14.27380,   0.00000, 0.00000, 0.00000);
    CreateObject(9241, 2762.43188, -3616.71167, 14.27380,   0.00000, 0.00000, 0.00000);
    CreateObject(5441, 2787.77222, -3586.57642, 12.70190,   0.00000, 0.00000, -90.00000);
    CreateObject(17513, 2865.94238, -3555.03247, 5.03600,   0.00000, 0.00000, -179.00000);
    CreateObject(17513, 2837.62183, -3555.31372, 5.03600,   0.00000, 0.00000, -179.00000);
    CreateObject(17513, 2810.74316, -3555.60962, 4.55600,   0.00000, 0.00000, -179.00000);
    CreateObject(1278, 2740.63550, -3558.77393, 12.50930,   0.00000, 0.00000, -115.00000);
    CreateObject(1278, 2822.83276, -3533.53418, 12.50929,   0.00000, 0.00000, 0.00000);
    CreateObject(1278, 2851.13452, -3532.62378, 12.50929,   0.00000, 0.00000, 0.00000);
    CreateObject(1278, 2879.63647, -3532.23022, 12.50929,   0.00000, 0.00000, 0.00000);
    CreateObject(17563, 2837.57397, -3598.63135, 11.43670,   0.00000, 0.00000, -269.00000);
    CreateObject(17563, 2857.33813, -3611.70142, 11.43670,   0.00000, 0.00000, 2.00000);
    CreateObject(13666, 2809.41113, -3590.71387, 17.51450,   0.00000, 0.00000, 5.00000);
    CreateObject(4825, 2838.83423, -3712.01563, 10.11690,   0.00000, 0.00000, 91.00000);
    CreateObject(3486, 2812.07715, -3705.94385, 19.58520,   0.00000, 0.00000, 90.00000);
    CreateObject(3486, 2812.11572, -3631.71948, 19.58520,   0.00000, 0.00000, -1.00000);
    CreateObject(3605, 2855.44946, -3663.04565, 18.38070,   0.00000, 0.00000, 91.00000);
    CreateObject(3605, 2856.03564, -3701.24878, 18.38070,   0.00000, 0.00000, 91.00000);
    CreateObject(1281, 2877.50635, -3588.50269, 13.55070,   0.00000, 0.00000, -88.00000);
    CreateObject(1281, 2867.16724, -3576.11353, 13.55070,   0.00000, 0.00000, 0.00000);
    CreateObject(1281, 2837.14355, -3577.83325, 13.55070,   0.00000, 0.00000, 0.00000);
    CreateObject(1281, 2810.74316, -3608.36475, 13.55070,   0.00000, 0.00000, 87.00000);
    CreateObject(621, 2874.28613, -3648.65234, 12.23870,   0.00000, 0.00000, 0.00000);
    CreateObject(620, 2875.02222, -3663.79565, 12.58060,   0.00000, 0.00000, 0.00000);
    CreateObject(621, 2874.95093, -3682.35571, 12.23870,   0.00000, 0.00000, 0.00000);
    CreateObject(620, 2876.51001, -3701.55469, 12.58060,   0.00000, 0.00000, 0.00000);
    CreateObject(621, 2875.93604, -3718.08325, 12.23870,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2838.79907, -3617.14233, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2835.74463, -3617.32764, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2832.83984, -3617.57104, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2829.33032, -3617.51831, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2828.77661, -3621.38892, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2828.89087, -3625.38721, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2828.73560, -3629.27393, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2828.79419, -3633.40601, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2828.36353, -3637.38281, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2828.69727, -3640.85132, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2828.70483, -3644.75977, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2832.36133, -3644.83374, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2835.69995, -3644.90576, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2839.31860, -3645.00562, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2840.32471, -3641.11108, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2840.36011, -3637.59961, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2840.14258, -3633.82373, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2839.93652, -3630.40771, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2839.53979, -3626.88867, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2839.27612, -3624.15723, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2838.92603, -3620.46973, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(621, 2833.88086, -3623.52173, 12.23870,   0.00000, 0.00000, 0.00000);
    CreateObject(620, 2834.53906, -3631.95728, 12.58060,   0.00000, 0.00000, 0.00000);
    CreateObject(621, 2834.01855, -3639.56641, 12.23870,   0.00000, 0.00000, 0.00000);
    CreateObject(1278, 2837.05835, -3598.38159, 11.92430,   0.00000, 0.00000, -87.00000);
    CreateObject(621, 2865.67822, -3730.79883, 12.23870,   0.00000, 0.00000, 0.00000);
    CreateObject(620, 2857.67847, -3730.03662, 12.58060,   0.00000, 0.00000, 0.00000);
    CreateObject(621, 2847.84619, -3730.24072, 12.23870,   0.00000, 0.00000, 0.00000);
    CreateObject(621, 2830.22412, -3730.28052, 12.23870,   0.00000, 0.00000, 0.00000);
    CreateObject(620, 2821.09204, -3730.22241, 12.58060,   0.00000, 0.00000, 0.00000);
    CreateObject(621, 2811.76172, -3730.54541, 12.23870,   0.00000, 0.00000, 0.00000);
    CreateObject(620, 2771.58594, -3534.93604, 12.58060,   0.00000, 0.00000, 0.00000);
    CreateObject(620, 2804.88672, -3533.72729, 12.58060,   0.00000, 0.00000, 0.00000);
    CreateObject(620, 2754.95825, -3534.99829, 12.58060,   0.00000, 0.00000, 0.00000);
    CreateObject(620, 2742.39844, -3536.31641, 12.58060,   0.00000, 0.00000, 0.00000);
    CreateObject(620, 2741.94580, -3568.94458, 12.58060,   0.00000, 0.00000, 0.00000);
    CreateObject(620, 2742.18408, -3599.44678, 12.58060,   0.00000, 0.00000, 0.00000);
    CreateObject(620, 2742.66504, -3635.36499, 12.58060,   0.00000, 0.00000, 0.00000);
    CreateObject(708, 2865.96289, -3765.62158, 12.30360,   0.00000, 0.00000, 0.00000);
    CreateObject(708, 2812.08643, -3764.66626, 12.30360,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2881.78125, -3771.96191, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2854.00049, -3771.91333, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2870.50098, -3771.36206, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2878.37842, -3758.10645, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2856.97070, -3758.11523, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2825.46411, -3769.70044, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2800.50073, -3775.07031, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2814.73950, -3775.13892, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2800.48022, -3757.40259, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2818.50684, -3757.85400, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(1278, 2837.59253, -3648.34692, 11.92430,   0.00000, 0.00000, 1.00000);
    CreateObject(1278, 2829.81006, -3674.33643, 11.92430,   0.00000, 0.00000, 47.00000);
    CreateObject(1278, 2830.40210, -3692.27881, 11.92430,   0.00000, 0.00000, -222.00000);
    CreateObject(647, 2797.30566, -3651.90015, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2801.89111, -3656.87012, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2798.29321, -3660.51416, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2801.85742, -3665.10864, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2798.09644, -3668.60400, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2801.84814, -3671.63159, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2797.32520, -3674.67554, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2802.27979, -3678.04004, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2797.54297, -3682.35474, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2801.77808, -3686.54614, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2775.29980, -3634.45776, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2770.66406, -3638.68652, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2767.02686, -3635.00293, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2762.70264, -3638.61865, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2758.94482, -3634.46143, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2755.27490, -3638.08276, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2751.73901, -3634.24194, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2747.03589, -3638.63281, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2744.37769, -3633.49707, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2740.51904, -3638.45264, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2739.27783, -3629.57202, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2744.23169, -3625.98584, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2740.27368, -3623.24438, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2744.53076, -3619.78662, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2740.22168, -3616.95093, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2744.87109, -3613.55566, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2740.77026, -3611.59180, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2745.07935, -3607.83691, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2740.14380, -3604.96729, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2744.73853, -3601.52905, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2739.66528, -3597.93042, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2744.75195, -3594.68896, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2740.17603, -3590.68115, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2744.99268, -3588.33081, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2740.40381, -3584.63672, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2744.97192, -3581.47021, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2740.04712, -3578.28369, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2744.21606, -3575.08838, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2740.04688, -3572.68311, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2744.79395, -3566.96875, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2740.22754, -3564.40601, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2744.66455, -3559.50000, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2740.25659, -3557.46069, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2744.63574, -3552.52905, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2740.43774, -3549.08350, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2744.82715, -3545.58276, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2740.00684, -3541.78027, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2744.84839, -3536.86328, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2750.73633, -3535.13013, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2763.37915, -3534.67407, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(647, 2774.83398, -3534.58032, 13.44090,   0.00000, 0.00000, 0.00000);
    CreateObject(1278, 2799.79761, -3534.11230, 12.50929,   0.00000, 0.00000, 0.00000);
    CreateObject(19535, 2744.88403, -3674.51343, 11.83980,   6.00000, 0.00000, 91.00000);
    CreateObject(19535, 2744.59180, -3745.74927, 11.83980,   6.00000, 0.00000, 91.00000);

    //Interior Pandillas
    //Interior Pandillas
	CreateObject(19378, 321.85, -1513.85, 3.09,   0.00, 90.00, 0.00);
	CreateObject(14387, 316.24, -1516.10, 3.67,   0.00, 0.00, 0.00);
	CreateObject(14387, 316.25, -1511.40, 3.67,   0.00, 0.00, 0.00);
	CreateObject(19366, 313.12, -1510.66, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 313.16, -1516.86, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 309.70, -1510.65, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 309.68, -1516.87, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 309.68, -1513.76, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 309.67, -1507.46, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 313.14, -1507.46, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 316.57, -1507.46, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 320.04, -1507.45, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 323.53, -1507.45, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 326.99, -1507.43, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 309.70, -1520.05, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 313.16, -1520.07, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 316.61, -1520.06, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 320.04, -1520.05, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 323.51, -1520.05, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 326.99, -1520.06, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 306.20, -1513.75, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 306.20, -1516.86, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19366, 306.21, -1510.65, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19362, 325.49, -1518.49, 2.98,   0.00, 0.00, 90.00);
	CreateObject(19362, 322.64, -1518.49, 2.98,   0.00, 0.00, 90.00);
	CreateObject(19362, 319.44, -1518.50, 2.98,   0.00, 0.00, 90.00);
	CreateObject(19362, 316.52, -1518.51, 2.98,   0.00, 0.00, 90.00);
	CreateObject(19362, 325.49, -1508.99, 2.98,   0.00, 0.00, 90.00);
	CreateObject(19362, 322.67, -1509.00, 2.98,   0.00, 0.00, 90.00);
	CreateObject(19362, 319.48, -1509.00, 2.98,   0.00, 0.00, 90.00);
	CreateObject(19362, 316.50, -1508.99, 2.98,   0.00, 0.00, 90.00);
	CreateObject(19454, 322.28, -1505.76, 6.44,   0.00, 0.00, 90.00);
	CreateObject(19454, 312.74, -1505.79, 6.44,   0.00, 0.00, 90.00);
	CreateObject(19454, 322.39, -1521.75, 6.44,   0.00, 0.00, 90.00);
	CreateObject(19454, 312.80, -1521.75, 6.44,   0.00, 0.00, 90.00);
	CreateObject(19362, 307.91, -1520.08, 6.44,   0.00, 0.00, 0.00);
	CreateObject(19362, 307.83, -1507.47, 6.44,   0.00, 0.00, 0.00);
	CreateObject(19362, 306.25, -1518.54, 6.44,   0.00, 0.00, 90.00);
	CreateObject(19362, 306.17, -1508.99, 6.44,   0.00, 0.00, 90.00);
	CreateObject(19362, 304.74, -1516.97, 6.44,   0.00, 0.00, 0.00);
	CreateObject(19362, 304.73, -1513.78, 6.44,   0.00, 0.00, 0.00);
	CreateObject(19362, 304.74, -1510.57, 6.44,   0.00, 0.00, 0.00);
	CreateObject(19362, 311.51, -1513.77, 6.44,   0.00, 0.00, 0.00);
	CreateObject(19362, 313.21, -1515.29, 6.44,   0.00, 0.00, 90.00);
	CreateObject(19362, 313.23, -1512.25, 6.44,   0.00, 0.00, 90.00);
	CreateObject(19362, 314.88, -1513.77, 6.44,   0.00, 0.00, 0.00);
	CreateObject(19366, 316.43, -1513.75, 4.61,   0.00, 90.00, 0.00);
	CreateObject(19362, 316.59, -1515.28, 2.98,   0.00, 0.00, 90.00);
	CreateObject(19362, 316.59, -1512.21, 2.98,   0.00, 0.00, 90.00);
	CreateObject(19362, 318.12, -1513.77, 2.98,   0.00, 0.00, 0.00);
	CreateObject(19454, 327.00, -1510.58, 6.44,   0.00, 0.00, 0.00);
	CreateObject(19454, 327.02, -1517.11, 6.44,   0.00, 0.00, 0.00);
	CreateObject(19454, 326.99, -1513.69, 4.53,   0.00, 0.00, 0.00);
	CreateObject(1726, 319.13, -1514.79, 3.18,   0.00, 0.00, 90.00);
	CreateObject(1726, 322.37, -1512.92, 3.18,   0.00, 0.00, -90.00);
	CreateObject(2292, 326.39, -1521.11, 4.70,   0.00, 0.00, 180.00);
	CreateObject(2291, 325.91, -1521.10, 4.70,   0.00, 0.00, 180.00);
	CreateObject(2291, 324.93, -1521.10, 4.70,   0.00, 0.00, 180.00);
	CreateObject(2291, 323.95, -1521.12, 4.70,   0.00, 0.00, 180.00);
	CreateObject(2291, 326.39, -1519.65, 4.70,   0.00, 0.00, -90.00);
	CreateObject(2291, 326.38, -1518.65, 4.70,   0.00, 0.00, -90.00);
	CreateObject(2291, 326.31, -1507.89, 4.70,   0.00, 0.00, -90.00);
	CreateObject(2291, 326.33, -1506.84, 4.70,   0.00, 0.00, -90.00);
	CreateObject(2292, 326.34, -1506.38, 4.70,   0.00, 0.00, -90.00);
	CreateObject(2291, 324.85, -1506.38, 4.70,   0.00, 0.00, 0.00);
	CreateObject(2291, 323.85, -1506.36, 4.70,   0.00, 0.00, 0.00);
	CreateObject(2291, 322.84, -1506.39, 4.70,   0.00, 0.00, 0.00);
	CreateObject(1823, 323.96, -1508.35, 4.70,   0.00, 0.00, 0.00);
	CreateObject(1823, 324.16, -1520.23, 4.70,   0.00, 0.00, 0.00);
	CreateObject(2099, 321.89, -1505.85, 4.70,   0.00, 0.00, 0.00);
	CreateObject(2099, 322.34, -1521.45, 4.70,   0.00, 0.00, 180.00);
	CreateObject(2229, 314.92, -1514.86, 4.70,   0.00, 0.00, 90.00);
	CreateObject(2229, 314.90, -1512.06, 4.70,   0.00, 0.00, 90.00);
	CreateObject(2207, 308.15, -1514.67, 4.70,   0.00, 0.00, 90.00);
	CreateObject(1671, 306.26, -1513.69, 5.22,   0.00, 0.00, 90.00);
	CreateObject(1829, 305.58, -1516.13, 5.22,   0.00, 0.00, 90.00);
	CreateObject(2162, 304.86, -1517.91, 4.70,   0.00, 0.00, 90.00);
	CreateObject(2162, 304.89, -1510.41, 4.70,   0.00, 0.00, 90.00);
	CreateObject(2007, 305.38, -1511.43, 4.70,   0.00, 0.00, 90.00);
	CreateObject(1727, 308.47, -1507.27, 4.70,   0.00, 0.00, 50.00);
	CreateObject(1727, 309.26, -1521.04, 4.70,   0.00, 0.00, 140.00);
	CreateObject(2200, 314.96, -1521.48, 4.70,   0.00, 0.00, 180.00);
	CreateObject(2200, 313.77, -1505.90, 4.70,   0.00, 0.00, 0.00);
	CreateObject(1726, 315.83, -1506.42, 4.70,   0.00, 0.00, 0.00);
	CreateObject(1726, 317.82, -1520.90, 4.70,   0.00, 0.00, 180.00);
	CreateObject(1827, 320.82, -1513.85, 3.18,   0.00, 0.00, 0.00);
	CreateObject(1536, 326.94, -1515.43, 3.18,   0.00, 0.00, 90.00);
	CreateObject(1536, 326.89, -1512.42, 3.18,   0.00, 0.00, -90.00);
	CreateObject(948, 326.57, -1509.45, 3.18,   0.00, 0.00, 0.00);
	CreateObject(948, 326.53, -1518.02, 3.18,   0.00, 0.00, 0.00);
	CreateObject(2297, 311.20, -1513.00, 4.70,   0.00, 0.00, 225.00);
	CreateObject(1727, 306.72, -1509.71, 4.70,   0.00, 0.00, 0.00);
	CreateObject(1727, 307.74, -1517.60, 4.70,   0.00, 0.00, 180.00);
	CreateObject(970, 325.55, -1518.60, 5.15,   0.00, 0.00, 0.00);
	CreateObject(970, 321.40, -1518.63, 5.15,   0.00, 0.00, 0.00);
	CreateObject(970, 317.24, -1518.62, 5.15,   0.00, 0.00, 0.00);
	CreateObject(970, 325.44, -1508.91, 5.15,   0.00, 0.00, 0.00);
	CreateObject(970, 321.32, -1508.89, 5.15,   0.00, 0.00, 0.00);
	CreateObject(970, 317.17, -1508.91, 5.15,   0.00, 0.00, 0.00);
	CreateObject(2162, 318.57, -1505.92, 4.70,   0.00, 0.00, 0.00);
	CreateObject(2162, 319.49, -1521.46, 4.70,   0.00, 0.00, 180.00);
	CreateObject(19378, 321.84, -1517.07, 8.14,   0.00, 90.00, 0.00);
	CreateObject(19378, 321.85, -1510.48, 8.15,   0.00, 90.00, 0.00);
	CreateObject(19378, 312.92, -1517.07, 8.15,   0.00, 90.00, 0.00);
	CreateObject(19378, 313.03, -1510.51, 8.14,   0.00, 90.00, 0.00);
	CreateObject(19378, 309.88, -1513.86, 8.16,   0.00, 90.00, 0.00);

    //ISLA YAIR
    CreateDynamicObject(16037, 2965.03760, -791.04871, 13.91140,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16037, 3086.02905, -791.08374, 13.91140,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(7605, 3195.12036, -790.69202, 10.16980,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(3607, 3246.58057, -792.69324, 15.98620,   0.00000, 0.00000, 89.00000);
    CreateDynamicObject(3607, 3245.78247, -830.63879, 15.98620,   0.00000, 0.00000, 89.00000);
    CreateDynamicObject(3607, 3247.34375, -754.74597, 15.98620,   0.00000, 0.00000, 89.00000);
    CreateDynamicObject(620, 3166.76733, -801.33514, 9.66240,   356.85840, 0.00000, 3.14160);
    CreateDynamicObject(620, 3166.87354, -780.23004, 9.66240,   356.85840, 0.00000, 3.14160);
    CreateDynamicObject(620, 3174.56592, -762.28741, 9.66240,   356.85840, 0.00000, 3.14160);
    CreateDynamicObject(620, 3186.58716, -754.41748, 9.66240,   356.85840, 0.00000, 3.14160);
    CreateDynamicObject(620, 3210.42480, -757.87579, 9.66240,   356.85840, 0.00000, 3.14160);
    CreateDynamicObject(620, 3174.49536, -819.42108, 9.66240,   356.85840, 0.00000, 3.14160);
    CreateDynamicObject(620, 3185.20557, -826.00671, 9.66240,   356.85840, 0.00000, 3.14160);
    CreateDynamicObject(620, 3206.45020, -825.97479, 9.66240,   356.85840, 0.00000, 3.14160);
    CreateDynamicObject(620, 3223.94604, -802.88727, 9.66240,   356.85840, 0.00000, 3.14160);
    CreateDynamicObject(620, 3224.06885, -781.02704, 9.66240,   356.85840, 0.00000, 3.14160);
    CreateDynamicObject(620, 3195.74097, -805.91980, 9.66240,   356.85840, 0.00000, 3.14160);
    CreateDynamicObject(620, 3195.88940, -774.36731, 9.66240,   356.85840, 0.00000, 3.14160);
    CreateDynamicObject(3471, 3194.89087, -791.12805, 11.57900,   0.00000, 0.00000, 181.00000);
    CreateDynamicObject(3439, 3187.58252, -801.85657, 14.38860,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3439, 3202.33643, -802.01593, 14.38860,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3439, 3202.51489, -780.26099, 14.38860,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3439, 3187.72729, -780.21368, 14.38860,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1597, 3196.35181, -790.91479, 12.78960,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(759, 3187.64233, -794.17529, 10.23710,   0.00000, 0.00000, 18.00000);
    CreateDynamicObject(759, 3187.65698, -796.85638, 10.23710,   0.00000, 0.00000, 18.00000);
    CreateDynamicObject(759, 3187.70752, -799.39581, 10.23710,   0.00000, 0.00000, 18.00000);
    CreateDynamicObject(759, 3188.24097, -801.44775, 10.23710,   0.00000, 0.00000, 18.00000);
    CreateDynamicObject(759, 3189.06421, -803.72998, 10.23710,   0.00000, 0.00000, 38.00000);
    CreateDynamicObject(759, 3190.63892, -805.59821, 10.23710,   0.00000, 0.00000, 84.00000);
    CreateDynamicObject(759, 3193.21802, -805.73724, 10.23710,   0.00000, 0.00000, 100.00000);
    CreateDynamicObject(759, 3195.74121, -805.69263, 10.23710,   0.00000, 0.00000, 100.00000);
    CreateDynamicObject(759, 3198.56372, -805.76221, 10.23710,   0.00000, 0.00000, 106.00000);
    CreateDynamicObject(759, 3200.86670, -804.39050, 10.23710,   0.00000, 0.00000, 152.00000);
    CreateDynamicObject(759, 3201.98633, -802.18182, 10.23710,   0.00000, 0.00000, 188.00000);
    CreateDynamicObject(759, 3202.35620, -799.72144, 10.23710,   0.00000, 0.00000, 188.00000);
    CreateDynamicObject(759, 3202.48218, -797.16309, 10.23710,   0.00000, 0.00000, 204.00000);
    CreateDynamicObject(759, 3202.55347, -794.31445, 10.23710,   0.00000, 0.00000, 204.00000);
    CreateDynamicObject(759, 3202.53345, -787.75464, 10.23710,   0.00000, 0.00000, 204.00000);
    CreateDynamicObject(759, 3187.88184, -788.10693, 10.23710,   0.00000, 0.00000, 204.00000);
    CreateDynamicObject(759, 3202.52759, -784.85468, 10.23710,   0.00000, 0.00000, 204.00000);
    CreateDynamicObject(759, 3202.28076, -782.11334, 10.23710,   0.00000, 0.00000, 204.00000);
    CreateDynamicObject(759, 3202.16064, -779.67627, 10.23710,   0.00000, 0.00000, 204.00000);
    CreateDynamicObject(759, 3200.94751, -776.98083, 10.23710,   0.00000, 0.00000, 236.00000);
    CreateDynamicObject(759, 3198.82544, -775.50421, 10.23710,   0.00000, 0.00000, -79.00000);
    CreateDynamicObject(759, 3195.88281, -774.56952, 10.23710,   0.00000, 0.00000, -79.00000);
    CreateDynamicObject(759, 3192.74976, -774.84033, 10.23710,   0.00000, 0.00000, -57.00000);
    CreateDynamicObject(759, 3190.01685, -775.95380, 10.23710,   0.00000, 0.00000, -35.00000);
    CreateDynamicObject(759, 3188.25391, -778.30072, 10.23710,   0.00000, 0.00000, -7.00000);
    CreateDynamicObject(759, 3187.69336, -780.86542, 10.23710,   0.00000, 0.00000, 27.00000);
    CreateDynamicObject(759, 3187.71289, -783.47437, 10.23710,   0.00000, 0.00000, 27.00000);
    CreateDynamicObject(759, 3187.73340, -785.82269, 10.23710,   0.00000, 0.00000, 27.00000);
    CreateDynamicObject(870, 3199.22876, -778.69891, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3197.54175, -777.31537, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3195.52246, -776.91455, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3192.85547, -778.04883, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3190.87183, -779.22913, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3190.10889, -782.27100, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3190.09766, -784.77264, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3190.20947, -787.31183, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3190.01001, -788.54150, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3199.58691, -781.05957, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3199.62476, -783.58765, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3199.79419, -785.68866, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3199.79419, -785.68866, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3199.80908, -787.83179, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3199.33154, -793.82495, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3199.28687, -796.30762, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3199.30957, -798.67444, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3199.11865, -800.64630, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3197.71265, -801.80914, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3195.60718, -802.09967, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3193.14746, -802.02344, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3191.43311, -801.26300, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3191.02490, -798.81720, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3190.84448, -796.52185, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(870, 3190.66211, -794.42743, 10.47500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(653, 3195.72705, -782.15582, 10.69830,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(653, 3195.84424, -797.89832, 10.69830,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3164.75635, -778.58105, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3165.63940, -774.14410, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3167.69556, -770.20081, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3170.03320, -765.54346, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3172.46924, -761.92883, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3175.94751, -758.93323, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3184.17798, -754.60767, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3188.62964, -753.22742, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3201.53101, -753.12561, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3206.45459, -755.55011, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3211.04004, -757.47736, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3215.19531, -760.53589, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3218.92285, -764.71466, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3220.97021, -769.30902, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3222.99658, -773.82593, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3223.80566, -778.26361, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3224.04028, -783.87976, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3224.34009, -799.85675, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3223.87207, -805.88397, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3221.53540, -811.26672, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3218.83276, -816.24835, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3215.78882, -820.97406, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3212.80347, -823.95850, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3208.84668, -825.96167, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3202.17920, -828.36377, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3187.36597, -828.58948, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3180.81299, -826.30066, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3175.80908, -822.72583, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3171.01465, -818.78546, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3168.01538, -814.83386, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3166.83594, -810.44678, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3165.49878, -806.15759, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3165.02515, -803.88635, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19550, 3208.78979, -793.34039, 10.07870,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 3179.77026, -756.27692, 11.90060,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3607, 3195.90967, -839.70868, 15.98620,   0.00000, 0.00000, -1.00000);
    CreateDynamicObject(18788, 3154.38696, -761.32379, 9.31030,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(18788, 3154.45239, -751.06476, 9.31030,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(18788, 3154.33032, -820.25409, 9.31030,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(18788, 3154.34644, -835.47253, 9.31030,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(3242, 3164.46753, -738.41095, 12.17840,   0.00000, 0.00000, -92.00000);
    CreateDynamicObject(3242, 3164.04810, -750.25208, 12.17840,   0.00000, 0.00000, -92.00000);
    CreateDynamicObject(3242, 3163.63843, -762.08551, 12.17840,   0.00000, 0.00000, -92.00000);
    CreateDynamicObject(7601, 3213.06885, -752.65845, 9.99820,   0.00000, -2.00000, -270.00000);
    CreateDynamicObject(13642, 3200.14111, -744.25909, 12.05880,   0.00000, 0.00000, 166.00000);
    CreateDynamicObject(14781, 3229.74023, -739.96753, 11.65950,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(14781, 3229.72876, -746.18939, 11.65950,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(13666, 3172.94312, -748.03717, 15.34870,   0.00000, 0.00000, 24.00000);
    CreateDynamicObject(19129, 3166.73120, -825.66815, 10.08370,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19129, 3170.52051, -845.51575, 10.08370,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19608, 3177.30176, -842.06494, 10.13910,   0.00000, 0.00000, -91.00000);
    CreateDynamicObject(19609, 3174.50928, -836.17389, 10.14180,   0.00000, 0.00000, -62.00000);
    CreateDynamicObject(16151, 3178.68457, -841.58698, 10.56840,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(11686, 3168.61987, -829.14136, 10.13650,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(1825, 3165.10742, -835.08948, 10.14370,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1825, 3165.05835, -839.95947, 10.14370,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1825, 3165.07056, -843.71979, 10.14370,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1825, 3165.01880, -848.50055, 10.14370,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1825, 3164.99561, -852.54529, 10.14370,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19076, 3207.40723, -742.55829, 10.61038,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19076, 3188.71606, -742.71301, 10.10040,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19913, 3270.44287, -756.11652, 15.61500,   0.00000, 0.00000, 89.00000);
    CreateDynamicObject(19913, 3269.58228, -806.11658, 15.61500,   0.00000, 0.00000, 89.00000);
    CreateDynamicObject(19913, 3269.14063, -830.50647, 15.61500,   0.00000, 0.00000, 89.00000);
    CreateDynamicObject(19913, 3243.83789, -855.49158, 15.61500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19913, 3193.84131, -855.49524, 15.61500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19913, 3171.36768, -855.50769, 15.61500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19913, 3146.35059, -830.52039, 15.61500,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(3749, 3145.78052, -790.57800, 15.69560,   0.00000, 0.00000, -88.00000);
    CreateDynamicObject(19913, 3146.34009, -825.25916, 15.61500,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(19913, 3245.91528, -731.25507, 15.61500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19913, 3195.95947, -731.23016, 15.61500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19913, 3171.53833, -731.27856, 15.61500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19913, 3147.10229, -756.24432, 15.61500,   0.00000, 0.00000, 91.00000);
    CreateDynamicObject(3330, 3148.18140, -845.01990, -0.30480,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(3330, 3148.04565, -823.89984, -0.30480,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(3330, 3147.68018, -803.85461, -0.30480,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(3330, 3148.48364, -782.65814, -0.30480,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(3330, 3148.61572, -761.82458, -0.30480,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(3330, 3147.93359, -741.21466, -0.30480,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(3330, 3159.94409, -732.16266, -0.30480,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(3330, 3180.51147, -732.45569, -0.30480,   0.00000, 0.00000, -182.00000);
    CreateDynamicObject(3330, 3201.44922, -733.03906, -0.30480,   0.00000, 0.00000, -182.00000);
    CreateDynamicObject(3330, 3222.70215, -733.27618, -0.30480,   0.00000, 0.00000, -182.00000);
    CreateDynamicObject(3330, 3243.97803, -733.12421, -0.30480,   0.00000, 0.00000, -182.00000);
    CreateDynamicObject(3330, 3261.15015, -732.86041, -0.30480,   0.00000, 0.00000, -182.00000);
    CreateDynamicObject(3330, 3270.44263, -744.29767, -0.30480,   0.00000, 0.00000, 88.00000);
    CreateDynamicObject(3330, 3270.25366, -765.26257, -0.30480,   0.00000, 0.00000, 88.00000);
    CreateDynamicObject(3330, 3269.82300, -785.20453, -0.30480,   0.00000, 0.00000, 88.00000);
    CreateDynamicObject(3330, 3270.11475, -805.60114, -0.30480,   0.00000, 0.00000, 88.00000);
    CreateDynamicObject(3330, 3269.88306, -826.90833, -0.30480,   0.00000, 0.00000, 88.00000);
    CreateDynamicObject(3330, 3269.75024, -845.16351, -0.30480,   0.00000, 0.00000, 88.00000);
    CreateDynamicObject(3330, 3258.82568, -854.32312, -0.30480,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3330, 3238.11133, -854.74768, -0.30480,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3330, 3217.40869, -854.69189, -0.30480,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3330, 3197.14429, -854.54895, -0.30480,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3330, 3177.24170, -854.54004, -0.30480,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3330, 3157.04614, -854.50757, -0.30480,   0.00000, 0.00000, 0.00000);
	//LAPD - Nueva Comisaria
    tmpobjid = CreateDynamicObject(19449, 1545.542846, -1635.385864, 14.149758, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 5142, "lashops1b_las2", "sjmhoodaac", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1545.542846, -1619.286010, 14.149758, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 5142, "lashops1b_las2", "sjmhoodaac", 0x00000000);
    tmpobjid = CreateDynamicObject(985, 1545.492797, -1634.526000, 11.642810, 0.000000, 0.000000, 89.900024, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1545.517578, -1620.144897, 11.642810, 0.000000, 0.000000, 89.900024, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1543.488037, -1617.684692, 11.678286, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1539.598999, -1613.774414, 11.682811, 0.000000, 0.000000, 89.900024, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1539.622314, -1606.284667, 11.682811, 0.000000, 0.000000, 89.900024, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1543.488037, -1602.334960, 11.678286, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1551.347045, -1602.334960, 11.678286, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1559.197143, -1602.334960, 11.678286, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1567.037353, -1602.364990, 11.678286, 0.000000, 0.000000, -0.099999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1574.867553, -1602.378662, 11.678286, 0.000000, 0.000000, -0.099999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1582.677978, -1602.391967, 11.678286, 0.000000, 0.000000, -0.099999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1590.518066, -1602.405639, 11.678286, 0.000000, 0.000000, -0.099999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1598.378173, -1602.419189, 11.678286, 0.000000, 0.000000, -0.099999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1604.088256, -1602.428833, 11.678286, 0.000000, 0.000000, -0.099999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1608.013183, -1606.403686, 11.682811, 0.000000, 0.000000, 90.000022, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1608.013183, -1614.253662, 11.682811, 0.000000, 0.000000, 90.000022, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1608.013183, -1622.113647, 11.682811, 0.000000, 0.000000, 90.000022, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1608.013183, -1629.963623, 11.682811, 0.000000, 0.000000, 90.000022, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1608.013183, -1634.003417, 11.682811, 0.000000, 0.000000, 90.000022, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(985, 1604.026611, -1637.899047, 11.678286, 0.000000, 0.000000, -0.099999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(970, 1534.629394, -1683.893310, 13.072813, 0.000000, 0.000000, 90.099990, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(970, 1534.636962, -1688.333374, 13.072813, 0.000000, 0.000000, 90.099990, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(970, 1534.644653, -1692.743530, 13.072813, 0.000000, 0.000000, 90.099990, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(970, 1534.630615, -1661.542968, 13.072813, 0.000000, 0.000000, 90.099990, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(970, 1534.623291, -1657.142333, 13.072813, 0.000000, 0.000000, 90.099990, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(970, 1534.615844, -1652.742309, 13.072813, 0.000000, 0.000000, 90.099990, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(970, 1537.669555, -1666.627929, 13.072813, 0.000000, 0.000000, 90.099990, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(970, 1537.680541, -1672.968261, 13.072813, 0.000000, 0.000000, 90.099990, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(970, 1537.691406, -1679.188232, 13.072813, 0.000000, 0.000000, 90.099990, -1, -1, -1, 400.00, 400.00);

    //SalonVIP
    tmpobjid = CreateDynamicObject(970, 543.204162, -1429.786132, 15.579228, 0.000000, -2.099999, 94.099952, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(970, 543.513244, -1434.092895, 15.420928, 0.000000, -2.099999, 94.099952, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(970, 543.818664, -1438.349365, 15.264454, 0.000000, -2.099999, 94.099952, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(970, 548.040954, -1422.493652, 15.556386, 0.000000, 3.099999, 17.799997, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(970, 552.246276, -1421.228027, 15.318443, 0.000000, 3.099999, 15.899993, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(970, 556.442260, -1420.032714, 15.072134, 0.000000, 3.099999, 15.899993, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19127, 545.940979, -1423.401611, 15.660935, 0.000000, 0.000000, 38.099994, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19127, 543.272766, -1427.497680, 15.660935, 0.000000, 0.000000, 79.199989, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1557, 556.720214, -1429.775512, 15.108818, 0.000000, 0.000000, 59.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(630, 557.767395, -1427.150512, 16.100637, 0.000000, 0.000000, 117.299987, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(630, 555.758789, -1430.629638, 16.100637, 0.000000, 0.000000, 117.299987, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(635, 555.774108, -1429.476196, 22.007154, 0.699998, -98.600006, -31.099998, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(635, 556.905334, -1427.601318, 22.033908, 0.699998, -98.600006, -31.099998, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19128, 557.262451, -1428.723876, 15.125158, 0.000000, 0.000000, 20.199996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19128, 556.890563, -1429.359985, 15.105157, 0.000000, 0.000000, 5.400000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(8620, 569.491760, -1437.224365, 44.912807, 0.000000, 0.000000, 57.700000, -1, -1, -1, 400.00, 400.00);





 /*   //sala del staff
CreateObject(19366, 1530.00037, 1519.69312, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1533.49988, 1519.69568, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1529.99048, 1522.90002, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1533.49097, 1522.90332, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1536.99255, 1522.90833, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1533.48560, 1526.12109, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1526.49756, 1516.49463, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1530.00183, 1526.12061, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1530.00171, 1516.48840, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1526.49487, 1519.68201, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1536.99548, 1519.69336, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1533.49731, 1516.48303, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1536.99719, 1516.49353, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1526.49585, 1526.12683, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1526.49292, 1522.90918, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1536.97314, 1526.11682, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1540.49329, 1516.48718, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1540.48450, 1519.69727, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1540.49158, 1522.90271, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1540.47363, 1526.11877, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1522.99634, 1526.12976, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1522.98413, 1522.90112, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1523.00549, 1519.69226, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1522.99634, 1516.50391, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1523.00806, 1513.30811, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1526.50549, 1513.29504, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1529.99658, 1513.30090, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1533.48987, 1513.30286, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1536.98328, 1513.28967, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1543.98352, 1513.29419, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1543.97778, 1519.69104, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1543.97388, 1522.91882, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1543.95447, 1526.11682, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1540.48975, 1513.29016, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1547.48120, 1516.49243, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1523.01221, 1510.09998, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1526.51379, 1510.09851, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1529.99658, 1510.09998, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1533.48987, 1510.09998, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1536.98328, 1510.09998, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1540.48975, 1510.09998, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 15400.00000, 1510.09998, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1543.98999, 1510.09998, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1547.47998, 1510.09998, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1.00000, 547.47998, 1503.29260,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1543.97070, 1516.48071, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1547.48401, 1513.29590, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1547.45898, 1519.70129, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1547.47461, 1522.91626, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1547.44812, 1526.12976, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1550.95129, 1526.12927, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1550.97070, 1522.91113, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1550.95837, 1519.70874, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1550.97095, 1516.49170, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1550.97363, 1513.29236, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1550.98767, 1510.10596, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1519.53162, 1510.10120, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1526.50049, 1506.89453, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1529.99780, 1506.90186, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1533.49731, 1506.88611, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1536.98621, 1506.88818, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1540.49011, 1506.87866, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1543.99475, 1506.87012, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1547.50232, 1506.88306, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1551.00452, 1506.88867, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1519.49524, 1526.12329, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1519.49194, 1522.91077, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1519.50500, 1519.69934, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1519.48975, 1516.51514, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1519.52173, 1513.32019, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1519.52100, 1506.89099, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1523.01636, 1506.89063, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1515.99719, 1526.13281, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1515.99023, 1522.91687, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1516.00330, 1519.70459, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1515.98853, 1516.51990, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1516.02039, 1513.32532, 0.61012,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1516.03052, 1510.08728, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1516.01904, 1506.89087, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1516.01819, 1503.68555, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1519.49475, 1503.68848, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1522.99170, 1503.69006, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1526.48596, 1503.69373, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1529.99170, 1503.68030, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1533.48962, 1503.66895, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1536.99792, 1503.66711, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1540.52197, 1503.66467, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1544.01306, 1503.66907, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1547.52686, 1503.68188, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19366, 1551.01074, 1503.68787, 0.61010,   0.00000, 90.00000, 0.00000);
CreateObject(19358, 1515.85144, 1527.65381, 2.45184,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1519.05542, 1527.65112, 2.45184,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1522.22278, 1527.65161, 2.45184,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1525.42053, 1527.64099, 2.45184,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1528.63501, 1527.63782, 2.45180,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1531.84900, 1527.62573, 2.45184,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1535.04590, 1527.62927, 2.45184,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1538.24243, 1527.62207, 2.45184,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1541.45972, 1527.62366, 2.45184,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1544.64722, 1527.62671, 2.45184,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1547.84924, 1527.62744, 2.45184,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1551.05884, 1527.62622, 2.45184,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1552.64758, 1525.96790, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(19358, 1552.65186, 1522.76355, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(19358, 1552.65698, 1519.56372, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(19358, 1552.66431, 1516.38782, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(19358, 1552.66418, 1513.18738, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(19358, 1552.66382, 1509.98718, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(19358, 1552.65637, 1506.77393, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(19358, 1552.65942, 1503.57532, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(19358, 1551.01428, 1502.06897, 2.45180,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1547.81409, 1502.07581, 2.45180,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1544.61267, 1502.07410, 2.45180,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1541.39832, 1502.07520, 2.45180,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1538.19531, 1502.07385, 2.45180,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1534.98767, 1502.08105, 2.45180,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1531.78687, 1502.07813, 2.45180,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1528.59229, 1502.07471, 2.45180,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1525.38000, 1502.07898, 2.45180,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1522.20715, 1502.05359, 2.45180,   0.00000, 0.00000, -90.42000);
CreateObject(19358, 1515.20081, 1502.07300, 2.45180,   0.00000, 0.00000, -90.00000);
CreateObject(19358, 1514.37170, 1503.76868, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(19358, 1514.38086, 1506.97998, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(19358, 1514.38599, 1510.19214, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(19358, 1514.39148, 1513.39734, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(19358, 1514.39856, 1516.60999, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(19358, 1514.39685, 1519.77917, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(19358, 1514.39783, 1522.96362, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(19358, 1514.39880, 1526.16443, 2.45180,   0.00000, 0.00000, -180.00000);
CreateObject(18783, 1524.37732, 1512.05603, 6.66556,   -180.00000, 0.00000, 0.00000);
CreateObject(18783, 1524.42200, 1532.05652, 6.66556,   -180.00000, 0.00000, 0.00000);
CreateObject(18783, 1544.36951, 1512.05286, 6.66556,   -180.00000, 0.00000, 0.00000);
CreateObject(18783, 1544.36584, 1532.05029, 6.66556,   -180.00000, 0.00000, 0.00000);
CreateObject(19608, 1516.76477, 1513.36475, 0.69480,   0.00000, 0.00000, 90.00000);
CreateObject(19609, 1516.95117, 1510.74658, 0.74147,   0.00000, 0.00000, 103.44000);
CreateObject(19317, 1518.11145, 1509.38171, 1.46993,   -20.00000, 0.00000, 179.58000);
CreateObject(19611, 1518.40881, 1512.53564, 0.74314,   0.00000, 0.00000, 0.00000);
CreateObject(19610, 1518.37537, 1512.54004, 2.38800,   28.92000, 0.72000, 84.36000);
CreateObject(2592, 1517.39441, 1515.35291, 1.64242,   0.00000, 0.00000, 90.30000);
CreateObject(19359, 1517.22583, 1515.60437, -1.94590,   90.00000, 1.00000, 0.00000);
CreateObject(19359, 1517.23364, 1515.14771, -1.94586,   90.00000, 0.00000, 0.00000);
CreateObject(14820, 1517.39197, 1515.32874, 1.66234,   0.00000, 0.00000, 90.77998);
CreateObject(19613, 1519.29370, 1517.53442, 0.69798,   0.00000, 0.00000, 76.49998);
CreateObject(19613, 1519.29370, 1517.53442, 1.43761,   0.00000, 0.00000, 104.88000);
CreateObject(19613, 1519.33594, 1509.34814, 0.69807,   0.00000, 0.00000, 111.42000);
CreateObject(19613, 1519.33594, 1509.34814, 1.42675,   0.00000, 0.00000, 83.28000);
CreateObject(19612, 1519.31848, 1509.30481, 2.15930,   0.00000, 0.00000, 220.26001);
CreateObject(19619, 1514.50220, 1518.90723, 2.94422,   0.00000, 0.00000, 90.00001);
CreateObject(19058, 1515.17004, 1526.89380, 1.30626,   0.00000, 0.00000, 5.22000);
CreateObject(19056, 1516.57971, 1526.89001, 1.31994,   0.00000, 0.00000, -34.32000);
CreateObject(19054, 1515.39160, 1525.32495, 1.32166,   0.00000, 0.00000, 21.48000);
CreateObject(19057, 1515.60254, 1526.48926, 2.46695,   0.00000, 0.00000, 0.00000);
CreateObject(19315, 1517.86902, 1526.81738, 1.19128,   0.00000, 0.00000, -68.75999);
CreateObject(18755, 1518.71033, 1500.09717, 2.62880,   0.00000, 0.00000, -90.17999);
CreateObject(1892, 1552.03357, 1512.66565, 0.69690,   0.00000, 0.00000, 90.00000);
CreateObject(1536, 1552.63354, 1512.37134, 0.68922,   0.00000, 0.00000, 90.00000);
CreateObject(19893, 1517.37451, 1516.76746, 1.55592,   0.00000, 0.00000, -59.34000);
CreateObject(19897, 1517.46436, 1516.47473, 1.57611,   0.00000, 0.00000, -100.44003);
CreateObject(19896, 1519.57080, 1509.47742, 2.16914,   0.00000, 0.00000, 206.82001);
CreateObject(19941, 1517.61292, 1527.40723, 0.69782,   0.00000, 0.00000, 73.50000);
CreateObject(19941, 1517.58582, 1527.42883, 0.73775,   -5.16000, 20.58000, 147.36000);
CreateObject(19129, 1528.90234, 1514.96960, 0.69637,   0.00000, 0.00000, 0.00000);
CreateObject(2400, 1527.17505, 1502.25818, 1.08996,   0.00000, 0.00000, 180.00000);
CreateObject(362, 1526.49329, 1502.44885, 3.22617,   -43.08004, 32.15998, 157.98016);
CreateObject(356, 1526.83545, 1502.70569, 1.96968,   0.42000, 6.00000, 1.50000);
CreateObject(356, 1525.00000, 1502.70569, 1.96970,   0.42000, 6.00000, 1.50000);
CreateObject(1806, 1515.91089, 1509.89746, 0.74281,   0.00000, 0.00000, -34.97999);
CreateObject(11686, 1526.99683, 1526.19128, 0.69703,   0.00000, 0.00000, 0.00000);
CreateObject(11687, 1528.94165, 1525.20337, 0.69777,   0.00000, 0.00000, 0.00000);
CreateObject(11687, 1527.95044, 1525.16565, 0.69777,   0.00000, 0.00000, 0.00000);
CreateObject(11687, 1526.94348, 1525.19885, 0.69777,   0.00000, 0.00000, 0.00000);
CreateObject(11687, 1526.09192, 1525.19226, 0.69777,   0.00000, 0.00000, 0.00000);
CreateObject(11687, 1525.19104, 1525.20178, 0.69777,   0.00000, 0.00000, 0.00000);
CreateObject(11690, 1550.51416, 1525.67798, 0.69854,   0.00000, 0.00000, 0.00000);
CreateObject(1824, 1550.29712, 1519.80457, 1.19075,   0.00000, 0.00000, -88.43999);
CreateObject(14782, 1534.22083, 1502.62109, 1.68966,   0.00000, 0.00000, 180.00000);
CreateObject(2748, 1551.87463, 1525.71191, 1.29041,   0.00000, 0.00000, -89.28001);
CreateObject(2748, 1550.53394, 1527.07520, 1.29041,   0.00000, 0.00000, 0.60000);
CreateObject(18649, 1552.62866, 1512.22229, 1.86992,   90.00000, 0.00000, 0.00000);
CreateObject(18653, 1552.16199, 1502.63953, 0.69637,   0.00000, 0.00000, -47.94000);
CreateObject(18654, 1552.18140, 1527.29846, 0.69739,   0.00000, 0.00000, 39.18000);
CreateObject(18655, 1514.72656, 1502.51843, 0.69500,   0.00000, 0.00000, -135.35999);
CreateObject(2295, 1532.22034, 1526.85730, 0.67998,   0.00000, 0.00000, 0.00000);
CreateObject(1723, 1549.82751, 1502.69397, 0.69595,   0.00000, 0.00000, 177.90001);
CreateObject(1723, 1552.01379, 1506.94958, 0.69595,   0.00000, 0.00000, 269.40015);
CreateObject(2311, 1548.11011, 1503.95288, 0.69739,   0.00000, 0.00000, -1.20000);
CreateObject(2311, 1550.75366, 1505.35718, 0.69739,   0.00000, 0.00000, 88.73999);
CreateObject(1704, 1545.81860, 1502.79456, 0.69748,   0.00000, 0.00000, -180.12001);
CreateObject(1827, 1545.37756, 1504.44263, 0.69810,   0.00000, 0.00000, 0.00000);
CreateObject(1704, 1543.67896, 1504.06580, 0.69748,   0.00000, 0.00000, -271.31998);
CreateObject(1775, 1543.74890, 1527.05750, 1.78016,   0.00000, 0.00000, 0.00000);
CreateObject(956, 1544.97290, 1527.02063, 1.09809,   0.00000, 0.00000, 0.00000);
CreateObject(2036, 1545.81287, 1527.01465, 1.26203,   -5.21999, -112.14002, 0.00000);
CreateObject(3525, 1552.43384, 1514.48547, 2.54280,   0.00000, 0.00000, -90.00000);
CreateObject(3525, 1552.42273, 1511.89124, 2.54280,   0.00000, 0.00000, -90.00000);
CreateObject(18863, 1521.55200, 1520.43481, -1.97687,   -5.58000, -6.72000, -37.86000);
CreateObject(19273, 1516.36914, 1502.14465, 2.35933,   0.00000, 0.00000, 180.00000);
CreateObject(19810, 1552.54895, 1513.12390, 3.43850,   0.00000, 0.00000, 90.00000);
CreateObject(2681, 1537.53784, 1527.03833, 0.69716,   0.00000, 0.00000, 0.00000);
*/
/*
tmpobjid = CreateDynamicObjectEx(19377, 883.938720, 1913.583984, -90.078689, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 883.938537, 1923.212768, -90.078697, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(14411, 876.425048, 1918.392944, -93.183601, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 872.116088, 1929.994384, -85.084701, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 870.527038, 1895.874511, -90.350799, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "CJ_plating", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 877.767272, 1920.379516, -88.508590, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10351, "beach_sfs", "rocktb128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 878.195800, 1920.386596, -88.508590, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10351, "beach_sfs", "rocktb128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 877.770019, 1915.878051, -88.508590, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10351, "beach_sfs", "rocktb128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 878.196960, 1915.875854, -88.508590, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10351, "beach_sfs", "rocktb128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 878.606872, 1910.585327, -89.993026, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14577, "casinovault01", "cof_wood1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 878.607666, 1925.694213, -89.893028, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14577, "casinovault01", "cof_wood1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 883.508605, 1908.991210, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14577, "casinovault01", "cof_wood1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 883.511474, 1927.801757, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14577, "casinovault01", "cof_wood1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 888.230224, 1913.897583, -94.476509, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3998, "civic04_lan", "twintconc_LAn", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 888.233825, 1923.527221, -89.993026, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14577, "casinovault01", "cof_wood1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 861.943786, 1923.103027, -90.891799, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14756, "smallsfhs", "AH_flroortiledirt1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 861.943725, 1913.468383, -90.891799, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14756, "smallsfhs", "AH_flroortiledirt1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 877.358337, 1910.565795, -89.993026, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18056, "mp_diner1", "mp_CJ_CARDBOARD128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 878.197326, 1917.876464, -85.511001, 0.000000, 90.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10351, "beach_sfs", "rocktb128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 878.196472, 1922.856567, -85.521003, 0.000000, 90.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10351, "beach_sfs", "rocktb128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 877.771911, 1917.867187, -85.521003, 0.000000, 90.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10351, "beach_sfs", "rocktb128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 877.772766, 1922.848632, -85.521003, 0.000000, 90.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10351, "beach_sfs", "rocktb128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 877.356384, 1925.694335, -89.993026, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18056, "mp_diner1", "mp_CJ_CARDBOARD128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19360, 870.232055, 1908.741455, -85.278297, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18056, "mp_diner1", "mp_CJ_CARDBOARD128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 876.650390, 1908.740844, -86.473014, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18056, "mp_diner1", "mp_CJ_CARDBOARD128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 863.812927, 1908.742187, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18056, "mp_diner1", "mp_CJ_CARDBOARD128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 872.488952, 1927.632324, -79.788597, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14735, "newcrak", "carp21S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19360, 870.198730, 1927.833007, -85.280296, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18056, "mp_diner1", "mp_CJ_CARDBOARD128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 863.783325, 1927.831787, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18056, "mp_diner1", "mp_CJ_CARDBOARD128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 872.444458, 1923.093627, -90.891799, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14756, "smallsfhs", "AH_flroortiledirt1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 861.616882, 1929.995727, -85.084701, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 876.619567, 1927.832885, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18056, "mp_diner1", "mp_CJ_CARDBOARD128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19360, 856.767211, 1918.123168, -85.280097, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18056, "mp_diner1", "mp_CJ_CARDBOARD128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 854.157592, 1927.830932, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18056, "mp_diner1", "mp_CJ_CARDBOARD128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 856.765441, 1924.546264, -89.993026, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18056, "mp_diner1", "mp_CJ_CARDBOARD128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 856.769470, 1911.703247, -95.261192, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "bank_wall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 854.185241, 1908.744750, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18056, "mp_diner1", "mp_CJ_CARDBOARD128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 854.817382, 1920.367431, -85.084663, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 854.816833, 1910.804199, -85.082702, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 861.969909, 1906.630981, -85.084701, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 872.467346, 1906.629150, -85.084701, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 862.857116, 1927.654174, -79.788597, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14735, "newcrak", "carp21S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 872.479553, 1908.849365, -79.788597, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14735, "newcrak", "carp21S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 862.852050, 1908.848144, -79.788597, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14735, "newcrak", "carp21S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 853.219421, 1908.848266, -79.788597, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14735, "newcrak", "carp21S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 853.225524, 1927.655395, -79.788597, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14735, "newcrak", "carp21S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 856.848571, 1922.810180, -79.788597, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14735, "newcrak", "carp21S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 856.849548, 1913.177978, -79.788597, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14735, "newcrak", "carp21S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 877.322998, 1922.735229, -79.788597, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14735, "newcrak", "carp21S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 883.880371, 1927.698120, -85.084701, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18980, 877.492553, 1916.270141, -84.732452, 0.000000, 90.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10351, "beach_sfs", "rocktb128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 877.323608, 1913.102050, -79.788597, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14735, "newcrak", "carp21S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 875.580627, 1911.348754, -84.361503, 90.000000, 0.006300, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 872.085327, 1911.348510, -84.361503, 90.000000, 0.006300, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 868.586608, 1911.348876, -84.361503, 90.000000, 0.006300, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 865.088439, 1911.348754, -84.361503, 90.000000, 0.006300, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 861.591979, 1911.349121, -84.361503, 90.000000, 0.006300, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 859.967407, 1913.126586, -84.361503, 90.000000, 0.006300, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 859.966796, 1916.624511, -84.361503, 90.000000, 0.006300, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 859.966003, 1920.121337, -84.361503, 90.000000, 0.006300, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 859.965515, 1923.546264, -84.361503, 90.000000, 0.006300, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 861.773315, 1925.289916, -84.361503, 90.000000, 0.006300, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 865.273620, 1925.291259, -84.361503, 90.000000, 0.006300, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 868.767578, 1925.292236, -84.361503, 90.000000, 0.006300, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 872.259216, 1925.293212, -84.361503, 90.000000, 0.006300, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 875.754150, 1925.293212, -84.361503, 90.000000, 0.006300, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19378, 872.078247, 1913.761718, -79.585372, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19378, 872.077209, 1923.396118, -79.585372, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19378, 861.581176, 1923.391967, -79.585372, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19378, 861.579895, 1913.760131, -79.585372, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 856.354370, 1920.227783, -89.420646, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3676, "lawnxref", "lasthoose6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 856.355712, 1916.022338, -89.420646, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3676, "lawnxref", "lasthoose6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 856.354370, 1918.179687, -91.299797, 90.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14415, "carter_block_2", "walp29S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 872.331115, 1908.326904, -89.420646, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3676, "lawnxref", "lasthoose6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 868.133300, 1908.329223, -89.420646, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3676, "lawnxref", "lasthoose6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 868.101562, 1928.243774, -89.420646, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3676, "lawnxref", "lasthoose6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 870.461914, 1928.244506, -86.532600, 90.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3676, "lawnxref", "lasthoose6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 872.301879, 1928.245361, -89.420646, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3676, "lawnxref", "lasthoose6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 856.354370, 1918.179687, -86.530601, 90.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3676, "lawnxref", "lasthoose6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 870.461914, 1928.244506, -91.299797, 90.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14415, "carter_block_2", "walp29S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 870.134826, 1908.334472, -91.299797, 90.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14415, "carter_block_2", "walp29S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 850.782287, 1918.157470, -90.891799, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "woodfloor1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 855.941345, 1924.546020, -89.993026, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 5040, "shopliquor_las", "lasjmliq1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 855.942993, 1911.703247, -89.993026, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 5040, "shopliquor_las", "lasjmliq1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19360, 855.941284, 1918.124633, -83.804100, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14709, "lamidint2", "mp_apt1_roomwall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 851.084472, 1922.981567, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 5040, "shopliquor_las", "lasjmliq1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 843.128784, 1922.984985, -90.622993, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 851.047973, 1913.256591, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 5040, "shopliquor_las", "lasjmliq1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 841.418273, 1913.256591, -80.306388, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14709, "lamidint2", "mp_apt1_roomwall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 836.585815, 1918.095214, -93.805557, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 5040, "shopliquor_las", "lasjmliq1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 870.471008, 1939.123413, -94.395202, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 883.808349, 1908.670043, -85.084701, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 883.004333, 1918.103759, -84.963699, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 883.404907, 1913.426269, -79.926200, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3998, "civic04_lan", "twintconc_LAn", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 883.387084, 1922.825439, -79.926200, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3998, "civic04_lan", "twintconc_LAn", 0x00000000);
tmpobjid = CreateDynamicObjectEx(14411, 870.112976, 1905.357788, -94.016853, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 872.250915, 1932.624877, -89.992996, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 4550, "skyscr1_lan2", "sl_librarycolmn2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 868.082092, 1932.573486, -89.992996, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 4550, "skyscr1_lan2", "sl_librarycolmn2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 872.658020, 1936.959472, -91.814651, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14415, "carter_block_2", "walp29S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 867.674072, 1936.960571, -91.814651, 180.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14415, "carter_block_2", "walp29S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 869.474182, 1932.507568, -86.808578, -34.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 872.056579, 1928.656982, -81.311630, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 4550, "skyscr1_lan2", "sl_librarycolmn2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 870.466430, 1947.658447, -85.019203, 70.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 870.377075, 1954.475952, -86.135757, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 876.976440, 1937.372924, -92.572990, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14533, "pleas_dome", "club_zeb_SFW2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 863.356262, 1937.371948, -92.592948, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14533, "pleas_dome", "club_zeb_SFW2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 875.794189, 1941.295043, -92.572959, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14533, "pleas_dome", "club_zeb_SFW2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 865.140930, 1941.294799, -92.582977, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14533, "pleas_dome", "club_zeb_SFW2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 870.578674, 1936.957885, -89.080497, 0.000000, 90.000000, -180.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14415, "carter_block_2", "walp29S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 875.692016, 1950.232421, -94.360702, 0.000000, 90.000000, 50.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 876.890930, 1952.115966, -94.362701, 0.000000, 90.000000, 70.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 877.444885, 1954.501953, -94.360702, 0.000000, 90.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 877.172729, 1956.861206, -94.362701, 0.000000, 90.000000, 110.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 875.778808, 1959.354492, -94.360702, 0.000000, 90.000000, 130.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 873.850952, 1960.975708, -94.362701, 0.000000, 90.000000, 150.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 866.746276, 1960.786010, -94.360702, 0.000000, 90.000000, 210.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 864.959838, 1959.166503, -94.362701, 0.000000, 90.000000, 230.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 863.778625, 1956.889404, -94.360702, 0.000000, 90.000000, 250.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 863.478881, 1954.286499, -94.362701, 0.000000, 90.000000, 270.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 864.225524, 1951.725830, -94.360702, 0.000000, 90.000000, 290.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 865.705566, 1949.746948, -94.362701, 0.000000, 90.000000, 310.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 867.637817, 1948.438354, -94.360702, 0.000000, 90.000000, 330.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 869.885009, 1947.877197, -94.362701, 0.000000, 90.000000, 350.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 871.969482, 1948.042968, -94.360702, 0.000000, 90.000000, 370.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19370, 874.029785, 1948.953735, -94.362701, 0.000000, 90.000000, 390.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "scratchedmetal", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 865.139892, 1944.064819, -89.992996, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 4550, "skyscr1_lan2", "sl_librarycolmn2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 862.222717, 1952.645385, -89.992996, 0.000000, 0.000000, 37.554321, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 6866, "vgncnstrct1", "Circus_gls_05", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 862.370544, 1956.755371, -89.992996, 0.000000, 0.000000, 358.902587, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 6866, "vgncnstrct1", "Circus_gls_05", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 864.130310, 1960.204467, -89.992996, 0.000000, 0.000000, 332.902679, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 6866, "vgncnstrct1", "Circus_gls_05", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 866.477478, 1962.040161, -89.992996, 0.000000, 0.000000, 314.474731, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 6866, "vgncnstrct1", "Circus_gls_05", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 872.341125, 1954.408691, -96.067947, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 862.011108, 1959.064086, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 6866, "vgncnstrct1", "Circus_gls_05", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 878.867919, 1959.069213, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 6866, "vgncnstrct1", "Circus_gls_05", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 878.714050, 1952.622070, -89.992996, 0.000000, 0.000000, -37.554298, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 6866, "vgncnstrct1", "Circus_gls_05", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 875.804382, 1944.042846, -89.992996, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 4550, "skyscr1_lan2", "sl_librarycolmn2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 878.724182, 1957.400390, -89.992996, 0.000000, 0.000000, -358.902587, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 6866, "vgncnstrct1", "Circus_gls_05", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 877.123840, 1959.497070, -89.992996, 0.000000, 0.000000, -332.902709, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 6866, "vgncnstrct1", "Circus_gls_05", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 870.458923, 1959.187011, -91.285873, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19381, 870.350830, 1959.102905, -82.429916, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 1414, "break_street1", "CJ_TV_SCREEN", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 870.470520, 1944.951660, -94.397201, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 880.874633, 1954.467773, -86.135757, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 859.885314, 1954.476806, -86.135757, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 870.382202, 1944.840820, -86.135757, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 880.867797, 1944.832763, -86.135757, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 870.467773, 1941.275756, -89.487998, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 870.134826, 1908.328613, -86.530601, 90.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3676, "lawnxref", "lasthoose6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18809, 870.432922, 1954.866088, -119.140869, 0.000000, 0.000000, 10.338688, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble", 0x00000000);
tmpobjid = CreateDynamicObjectEx(14411, 870.234436, 1931.825317, -94.016868, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 868.106018, 1903.885253, -89.992996, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 872.248291, 1903.961059, -89.992996, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 872.444396, 1913.465820, -90.891799, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14756, "smallsfhs", "AH_flroortiledirt1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 868.105224, 1894.255615, -89.992996, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 879.694702, 1888.511352, -92.276298, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "sl_metalwalk", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 876.976562, 1899.232910, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 872.989807, 1891.868164, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 882.621887, 1891.868041, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 879.166809, 1899.234619, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 885.025451, 1894.908447, -89.992996, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1649, 836.624633, 1920.291625, -86.935699, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 15046, "svcunthoose", "csGarageTrolley01psd", 0xFA000000);
tmpobjid = CreateDynamicObjectEx(19377, 831.377014, 1918.122314, -88.642196, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "woodfloor1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 850.662536, 1918.098876, -85.184646, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 840.160095, 1918.099121, -85.184646, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 840.281127, 1918.160522, -90.891799, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "woodfloor1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1649, 836.628540, 1920.291748, -86.935699, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 15046, "svcunthoose", "csGarageTrolley01psd", 0xB4000000);
tmpobjid = CreateDynamicObjectEx(1649, 836.624206, 1915.916137, -86.935699, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 15046, "svcunthoose", "csGarageTrolley01psd", 0xFA000000);
tmpobjid = CreateDynamicObjectEx(14411, 835.439208, 1924.827148, -91.784126, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14476, "carlslounge", "AH_cheapredcarpet", 0x00000000);
SetDynamicObjectMaterial(tmpobjid, 1, 9507, "boxybld2_sfw", "boxybox_sf3z", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18980, 836.318176, 1922.762817, -90.807792, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3676, "lawnxref", "lasthoose6", 0x00000000);
SetDynamicObjectMaterial(tmpobjid, 1, 18835, "mickytextures", "wood051", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18980, 836.319030, 1913.590698, -90.807792, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3676, "lawnxref", "lasthoose6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1649, 836.628723, 1915.854614, -86.935699, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 15046, "svcunthoose", "csGarageTrolley01psd", 0xB4000000);
tmpobjid = CreateDynamicObjectEx(18980, 836.317749, 1910.377929, -84.857200, 0.000000, 90.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3676, "lawnxref", "lasthoose6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 839.483276, 1927.794677, -90.891799, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "woodfloor1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1499, 838.317810, 1922.977539, -90.805702, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
SetDynamicObjectMaterial(tmpobjid, 1, 14650, "ab_trukstpc", "sa_wood08_128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 838.842041, 1927.780395, -87.122962, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 834.068847, 1925.260131, -90.622978, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 841.549255, 1922.988647, -83.051498, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 831.681762, 1927.585327, -90.622993, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 826.952392, 1922.855957, -90.632972, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 831.216064, 1922.857788, -93.802803, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 9507, "boxybld2_sfw", "hospital3_sfw", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 831.196716, 1913.293334, -90.662971, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 826.335876, 1918.029418, -90.642974, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 829.659240, 1918.100097, -85.184646, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 834.330078, 1927.732788, -85.184646, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 843.126831, 1922.982910, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 5040, "shopliquor_las", "lasjmliq1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 841.551391, 1922.984863, -80.303298, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14709, "lamidint2", "mp_apt1_roomwall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1569, 888.144409, 1919.679931, -89.990798, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 8391, "ballys01", "vgncorpdoor1_512", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18075, 846.980895, 1918.067871, -85.259300, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "ceilingtiles3-128x128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(2370, 882.979370, 1913.127563, -90.194206, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
SetDynamicObjectMaterial(tmpobjid, 1, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(2370, 883.468017, 1922.822021, -90.194206, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "cof_wood2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(631, 879.211853, 1927.179687, -89.090171, 0.000000, 0.000000, 56.893260, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFCCFF33);
tmpobjid = CreateDynamicObjectEx(631, 879.104736, 1909.546264, -89.090171, 0.000000, 0.000000, 56.893260, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFCCFF33);
tmpobjid = CreateDynamicObjectEx(19443, 876.708679, 1919.769409, -90.888496, 0.000000, 90.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14415, "carter_block_2", "walp29S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19458, 883.493713, 1918.130493, -90.076599, 0.000000, 90.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14415, "carter_block_2", "walp29S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 887.696655, 1917.461547, -90.062301, 0.000000, 90.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14415, "carter_block_2", "walp29S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(638, 879.117919, 1914.015136, -89.385971, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0x00000000);
tmpobjid = CreateDynamicObjectEx(638, 879.135009, 1922.234619, -89.385971, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19172, 888.147155, 1923.530883, -87.271766, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14489, "carlspics", "AH_picture3", 0x00000000);
tmpobjid = CreateDynamicObjectEx(2262, 887.664245, 1921.426391, -86.801803, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14489, "carlspics", "AH_picture2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(2266, 887.630432, 1911.380493, -88.248008, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14489, "carlspics", "AH_picture4", 0x00000000);
tmpobjid = CreateDynamicObjectEx(631, 887.647399, 1921.109863, -89.090171, 0.000000, 0.000000, 56.893260, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "kbplanter_plants1", 0xFFCCFF33);
tmpobjid = CreateDynamicObjectEx(631, 887.751342, 1915.322265, -89.090171, 0.000000, 0.000000, 56.893260, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "kbplanter_plants1", 0xFFCCFF33);
tmpobjid = CreateDynamicObjectEx(19089, 864.200073, 1918.067504, -76.544853, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19089, 870.590270, 1918.035278, -76.544853, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19929, 866.466918, 1940.129028, -93.959800, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14581, "ab_mafiasuitea", "ab_wood01", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19929, 866.466857, 1937.269531, -94.765823, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 4835, "airoads_las", "aarprt8LAS", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19929, 866.464904, 1937.269165, -93.959800, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14581, "ab_mafiasuitea", "ab_wood01", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19929, 866.468383, 1940.130737, -94.765800, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 4835, "airoads_las", "aarprt8LAS", 0x00000000);
tmpobjid = CreateDynamicObjectEx(14793, 870.623107, 1953.542358, -86.314201, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14634, "blindinglite", "ws_volumetriclight", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18809, 870.432922, 1954.866088, -119.150901, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1762, 826.999328, 1917.626342, -88.554702, 0.000000, 0.000000, 90.916130, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
SetDynamicObjectMaterial(tmpobjid, 1, 1730, "cj_furniture", "CJ-COUCHL2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(631, 836.023437, 1921.642089, -87.661300, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFCCFF33);
tmpobjid = CreateDynamicObjectEx(631, 836.057067, 1914.610229, -87.661300, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFFCCFF33);
tmpobjid = CreateDynamicObjectEx(19376, 827.340515, 1909.616577, -90.662933, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_gs_wall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 822.496765, 1914.342285, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 9507, "boxybld2_sfw", "hospital3_sfw", 0x00000000);
tmpobjid = CreateDynamicObjectEx(631, 827.840942, 1913.820922, -87.661300, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 1597, "centralresac1", "fuzzyplant256", 0xFFCCFF33);
tmpobjid = CreateDynamicObjectEx(638, 855.366577, 1914.898559, -90.196998, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "aarprt8LAS", 0x00000000);
tmpobjid = CreateDynamicObjectEx(638, 855.430725, 1921.339599, -90.196998, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "aarprt8LAS", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1704, 851.926025, 1916.222534, -90.804702, 0.000000, 0.000000, 177.552810, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1704, 851.094543, 1920.005249, -90.804702, 0.000000, 0.000000, 2.201900, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1704, 849.742858, 1916.184692, -90.804702, 0.000000, 0.000000, 177.302627, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1704, 847.604125, 1916.287475, -90.804702, 0.000000, 0.000000, 181.268264, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1704, 845.403259, 1916.239990, -90.804702, 0.000000, 0.000000, 178.953765, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1704, 843.163879, 1916.270874, -90.804702, 0.000000, 0.000000, 182.697372, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1704, 841.023376, 1916.303344, -90.804702, 0.000000, 0.000000, 182.201919, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1704, 838.378417, 1917.702270, -90.804702, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1704, 848.762817, 1920.002197, -90.804702, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1704, 846.728515, 1920.065551, -90.804702, 0.000000, 0.000000, 2.323920, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1704, 844.535827, 1920.031005, -90.804702, 0.000000, 0.000000, 358.038513, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1704, 842.260742, 1920.030395, -90.804702, 0.000000, 0.000000, 2.081089, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1704, 840.102783, 1920.002563, -90.804702, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14789, "ab_sfgymmain", "ab_wood02", 0x00000000);
tmpobjid = CreateDynamicObjectEx(9093, 846.699096, 1913.332641, -87.774543, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2266, "picture_frame", "CJ_PAINTING30", 0x00000000);
tmpobjid = CreateDynamicObjectEx(9093, 846.643676, 1922.902343, -87.774497, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14489, "carlspics", "AH_landscap1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(14793, 863.237243, 1918.238403, -79.884498, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14634, "blindinglite", "ws_volumetriclight", 0x00000000);
tmpobjid = CreateDynamicObjectEx(14793, 831.018310, 1917.947143, -85.359497, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14634, "blindinglite", "ws_volumetriclight", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 883.731201, 1894.907714, -94.984649, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13724, "docg01_lahills", "marbletile8b", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 874.486206, 1888.520141, -97.425827, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "sl_metalwalk", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 884.858825, 1888.510986, -97.425827, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "sl_metalwalk", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 879.740844, 1891.870727, -97.072570, 90.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "BLOCK2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19360, 870.746337, 1907.915039, -85.278297, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19360, 867.540466, 1907.915161, -85.278297, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(925, 878.017272, 1898.195312, -93.869766, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 873.231750, 1894.910156, -94.984649, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13724, "docg01_lahills", "marbletile8b", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 870.176757, 1904.611083, -87.636306, 34.500000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "CJ_plating", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 881.024902, 1895.873535, -90.350799, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "CJ_plating", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 883.895874, 1903.963989, -94.007499, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 889.755187, 1899.636718, -94.007499, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 885.070312, 1900.910034, -94.007553, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 895.079467, 1904.090209, -95.076286, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_tiles", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 873.233642, 1904.543945, -94.984649, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13724, "docg01_lahills", "marbletile8b", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19360, 885.581604, 1899.236450, -91.095397, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 889.799133, 1905.640625, -94.007499, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 893.492309, 1904.311523, -94.007499, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "mp_stonefloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 895.822570, 1905.199096, -93.297500, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 17504, "eastlstr_lae2", "compfence4_LAe", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19406, 891.642761, 1908.858764, -96.503112, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 12850, "cunte_block1", "ws_redbrickold", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 889.589294, 1909.226562, -95.857498, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "cj_sheet2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(18762, 893.685180, 1909.242309, -95.857498, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 915, "airconext", "cj_sheet2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19428, 891.758911, 1909.690673, -95.526397, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3355, "cxref_savhus", "des_brick1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19428, 891.758850, 1909.690673, -97.168403, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3355, "cxref_savhus", "des_brick1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19428, 891.756713, 1911.294067, -95.526397, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3355, "cxref_savhus", "des_brick1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19428, 891.759338, 1911.294433, -97.168403, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3355, "cxref_savhus", "des_brick1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19428, 892.680297, 1910.694458, -96.358352, 90.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3355, "cxref_savhus", "des_brick1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19428, 890.651672, 1910.674438, -96.358352, 90.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3355, "cxref_savhus", "des_brick1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19428, 891.487182, 1912.108276, -96.358398, 90.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3355, "cxref_savhus", "des_brick1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 836.594421, 1917.479003, -95.235076, 0.000000, 0.000000, 179.999954, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14709, "lamidint2", "mp_apt1_roomwall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 831.196716, 1913.303344, -80.212989, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 835.366760, 1925.253540, -80.212989, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 826.966979, 1922.853149, -80.212989, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 826.352844, 1919.150634, -80.212989, 0.000000, 0.000000, 0.000007, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 831.722656, 1927.580566, -80.212989, 0.000000, 0.000000, 0.000007, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 888.480102, 1904.086181, -92.663566, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_tiles", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 885.578125, 1904.088378, -92.076698, 0.000000, 55.000000, 180.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14584, "ab_abbatoir01", "ab_tiles", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 890.248107, 1904.130004, -98.110687, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13724, "docg01_lahills", "marbletile8b", 0x00000000);
tmpobjid = CreateDynamicObjectEx(638, 876.807617, 1925.221435, -90.100852, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 6282, "beafron2_law2", "boardwalk2_la", 0x00000000);
tmpobjid = CreateDynamicObjectEx(631, 876.638427, 1927.138549, -89.898628, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFCCFF33);
tmpobjid = CreateDynamicObjectEx(638, 874.770080, 1927.231933, -90.100799, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 6282, "beafron2_law2", "boardwalk2_la", 0x00000000);
tmpobjid = CreateDynamicObjectEx(631, 876.790832, 1909.391235, -89.898628, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFCCFF33);
tmpobjid = CreateDynamicObjectEx(638, 876.775390, 1911.393554, -90.100852, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 6282, "beafron2_law2", "boardwalk2_la", 0x00000000);
tmpobjid = CreateDynamicObjectEx(638, 874.755859, 1909.302490, -90.100799, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 6282, "beafron2_law2", "boardwalk2_la", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 887.688232, 1918.942138, -90.060302, 0.000000, 90.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14415, "carter_block_2", "walp29S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19443, 876.710021, 1916.568359, -90.890502, 0.000000, 90.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14415, "carter_block_2", "walp29S", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1761, 857.404113, 1910.803466, -90.807800, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
SetDynamicObjectMaterial(tmpobjid, 1, 1730, "cj_furniture", "CJ-COUCHL2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(1761, 857.426513, 1923.807006, -90.807800, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
SetDynamicObjectMaterial(tmpobjid, 1, 1730, "cj_furniture", "CJ-COUCHL2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 888.233947, 1913.894775, -89.993026, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14577, "casinovault01", "cof_wood1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 888.231933, 1923.527221, -94.476501, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3998, "civic04_lan", "twintconc_LAn", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 883.508850, 1908.993164, -94.476501, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3998, "civic04_lan", "twintconc_LAn", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 878.608703, 1910.560791, -94.476501, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3998, "civic04_lan", "twintconc_LAn", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 878.609619, 1925.693603, -80.262283, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3998, "civic04_lan", "twintconc_LAn", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 883.511047, 1927.799804, -94.476501, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3998, "civic04_lan", "twintconc_LAn", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 878.609619, 1925.693603, -94.476501, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3998, "civic04_lan", "twintconc_LAn", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 883.512817, 1927.800292, -80.262298, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3998, "civic04_lan", "twintconc_LAn", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 888.231872, 1923.527221, -80.262298, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3998, "civic04_lan", "twintconc_LAn", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 888.230224, 1913.897583, -80.262298, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3998, "civic04_lan", "twintconc_LAn", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 883.508911, 1908.993164, -80.262298, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3998, "civic04_lan", "twintconc_LAn", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 878.608703, 1910.560791, -80.262298, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3998, "civic04_lan", "twintconc_LAn", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 856.768432, 1911.704467, -89.993026, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 18056, "mp_diner1", "mp_CJ_CARDBOARD128", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 856.767333, 1924.545898, -95.261199, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "bank_wall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 863.783813, 1927.829833, -95.261199, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "bank_wall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 854.158081, 1927.828979, -95.261199, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "bank_wall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 876.621032, 1927.830444, -95.261199, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "bank_wall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 877.354431, 1925.693969, -95.261199, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "bank_wall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 877.356323, 1910.566162, -95.261199, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "bank_wall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 876.649536, 1908.742675, -95.261199, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "bank_wall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 841.418273, 1913.254638, -89.992996, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 5040, "shopliquor_las", "lasjmliq1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 851.047180, 1913.258422, -80.306396, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14709, "lamidint2", "mp_apt1_roomwall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 855.941101, 1911.703857, -80.306396, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14709, "lamidint2", "mp_apt1_roomwall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 855.939270, 1924.546020, -80.306396, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14709, "lamidint2", "mp_apt1_roomwall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19360, 855.943298, 1918.124755, -85.280097, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 5040, "shopliquor_las", "lasjmliq1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 851.083618, 1922.979736, -80.306396, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14709, "lamidint2", "mp_apt1_roomwall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 843.127807, 1922.981201, -80.306396, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14709, "lamidint2", "mp_apt1_roomwall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 841.549316, 1922.986694, -83.051498, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 5040, "shopliquor_las", "lasjmliq1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 841.418945, 1913.256469, -95.235076, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14709, "lamidint2", "mp_apt1_roomwall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 851.047180, 1913.258422, -95.235099, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14709, "lamidint2", "mp_apt1_roomwall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 855.941101, 1911.703857, -95.235099, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14709, "lamidint2", "mp_apt1_roomwall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 855.939270, 1924.546020, -95.235099, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14709, "lamidint2", "mp_apt1_roomwall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 851.083618, 1922.979736, -95.235099, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14709, "lamidint2", "mp_apt1_roomwall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 843.127807, 1922.981201, -95.235099, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14709, "lamidint2", "mp_apt1_roomwall", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 861.831420, 1954.409545, -96.067947, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 860.979125, 1959.187011, -99.645812, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble", 0x00000000);
tmpobjid = CreateDynamicObjectEx(14793, 892.099914, 1967.751342, -89.775711, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14634, "blindinglite", "ws_volumetriclight", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 879.988464, 1959.187011, -99.645812, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 869.239440, 1944.689208, -96.067947, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 879.639343, 1944.687377, -96.067947, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Marble", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19377, 869.475830, 1933.523071, -85.104705, 0.000000, 90.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 838.822814, 1927.800781, -80.212989, 0.000000, 0.000000, 0.000007, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 827.343444, 1909.620483, -80.212989, 0.000000, 0.000000, 0.000007, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 822.606262, 1914.352905, -80.212989, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 840.817077, 1923.003417, -80.212989, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19329, 890.385375, 1902.603027, -97.241989, -89.999984, 97.599945, 1.700000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14612, "ab_abattoir_box", "ab_bloodfloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19406, 891.642761, 1909.008911, -96.503112, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 12850, "cunte_block1", "ws_redbrickold", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19329, 892.524658, 1906.039306, -98.011024, 89.699996, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14612, "ab_abattoir_box", "ab_bloodfloor", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 863.809814, 1908.742675, -95.261199, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "bank_wall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 854.259582, 1908.752685, -95.261199, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 13007, "sw_bankint", "bank_wall1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(14793, 874.147583, 1918.238403, -79.884498, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14634, "blindinglite", "ws_volumetriclight", 0x00000000);
tmpobjid = CreateDynamicObjectEx(9093, 877.221862, 1918.211303, -82.184547, 0.000000, 0.000000, 0.000014, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 5719, "sunrise10_lawn", "eld_box_law", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 872.523498, 1927.621582, -74.892982, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 862.943664, 1927.621582, -74.892982, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 853.364074, 1927.621582, -74.892982, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 856.864379, 1922.797485, -74.892982, 0.000000, 0.000000, 179.899993, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 856.857666, 1913.218017, -74.892982, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 861.583496, 1908.852172, -74.892982, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 871.113342, 1908.852172, -74.892982, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 880.723144, 1908.852172, -74.892982, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 877.304443, 1922.761718, -74.892982, 0.000000, 0.000000, 179.899993, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19376, 877.287963, 1913.182250, -74.892982, 0.000000, 0.000000, 179.899993, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 14789, "ab_sfgymmain", "gym_floor6", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19172, 856.857604, 1913.134277, -88.195861, 0.000000, 0.000000, 89.999946, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2266, "picture_frame", "CJ_PAINTING11", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19172, 856.857604, 1923.024780, -88.195861, 0.000000, 0.000000, 89.999946, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 0, 2266, "picture_frame", "CJ_PAINTING28", 0x00000000);
tmpobjid = CreateDynamicObjectEx(2266, 858.822753, 1927.228515, -89.415863, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14489, "carlspics", "AH_picture2", 0x00000000);
tmpobjid = CreateDynamicObjectEx(2266, 859.652893, 1927.228515, -88.645866, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 7088, "casinoshops1", "GB_nastybar19", 0x00000000);
tmpobjid = CreateDynamicObjectEx(2266, 859.842895, 1909.341918, -89.135856, 0.000000, 0.000000, 179.199981, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14489, "carlspics", "AH_landscap1", 0x00000000);
tmpobjid = CreateDynamicObjectEx(2266, 858.852661, 1909.355224, -88.265869, 0.000000, 0.000000, 179.199981, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14489, "carlspics", "AH_picture3", 0x00000000);
tmpobjid = CreateDynamicObjectEx(2266, 831.892944, 1913.887329, -86.866279, 0.000000, 0.000000, -179.999969, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14489, "carlspics", "AH_picture3", 0x00000000);
tmpobjid = CreateDynamicObjectEx(19329, 831.903076, 1913.405273, -86.756271, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14489, "carlspics", "AH_picture3", 0x00000000);
SetDynamicObjectMaterialText(tmpobjid, 0, "{000000} KOVA", 130, "Ariel", 40, 1, 0x00000000, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19329, 831.913085, 1913.405273, -86.676292, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
SetDynamicObjectMaterial(tmpobjid, 1, 14489, "carlspics", "AH_picture3", 0x00000000);
SetDynamicObjectMaterialText(tmpobjid, 0, "{000000} created by", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19329, 858.853454, 1908.880859, -88.140342, 0.000000, 0.000000, -0.699999, 150.00, 150.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "{000000} KOVA", 130, "Ariel", 40, 1, 0x00000000, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19329, 858.853454, 1908.880859, -88.050338, 0.000000, 0.000000, -0.699999, 150.00, 150.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "{000000} created by", 130, "Ariel", 20, 1, 0x00000000, 0x00000000, 1);
tmpobjid = CreateDynamicObjectEx(19777, 883.061462, 1913.095458, -89.231330, 0.000000, 0.000000, -45.600013, 150.00, 150.00);
SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} by KOVA", 140, "Ariel", 80, 1, 0x00000000, 0x00000000, 1);


tmpobjid = CreateDynamicObjectEx(4206, 872.586181, 1958.017211, -94.904640, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19370, 871.646789, 1961.746704, -94.360702, 0.000000, 90.000000, 170.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19370, 868.946838, 1961.702758, -94.362701, 0.000000, 90.000000, 190.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19604, 870.414672, 1959.056396, -89.923736, -90.000000, 90.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19377, 859.972839, 1944.843383, -86.135757, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 866.572753, 1947.374755, -96.020698, 0.000000, 0.000000, 60.077301, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 869.515747, 1946.382934, -96.020698, 0.000000, 0.000000, 82.636909, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 872.490905, 1946.565795, -96.020698, 0.000000, 0.000000, 283.673767, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 875.163146, 1947.851562, -96.020698, 0.000000, 0.000000, 306.488311, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 869.473999, 1945.946166, -96.020698, 0.000000, 0.000000, 82.636909, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 872.593322, 1946.120605, -96.020698, 0.000000, 0.000000, 283.673767, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 875.411254, 1947.439453, -96.020698, 0.000000, 0.000000, 306.488311, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 866.527770, 1946.942749, -96.020698, 0.000000, 0.000000, 60.077301, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 872.560058, 1946.272827, -96.020698, 0.000000, 0.000000, 283.673767, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 875.334350, 1947.569580, -96.020698, 0.000000, 0.000000, 306.488311, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 875.251342, 1947.706298, -96.020698, 0.000000, 0.000000, 306.488311, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 872.522521, 1946.429077, -96.020698, 0.000000, 0.000000, 283.673767, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 869.482299, 1946.116577, -96.020698, 0.000000, 0.000000, 82.636909, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 866.609130, 1947.091796, -96.020698, 0.000000, 0.000000, 60.077301, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 869.518432, 1946.272827, -96.020698, 0.000000, 0.000000, 82.636909, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19373, 866.582458, 1947.260620, -96.020698, 0.000000, 0.000000, 60.077301, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19377, 860.685302, 1902.469970, -90.891799, 0.000000, 90.000000, -0.009100, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1569, 888.148193, 1916.680664, -89.990798, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2290, 884.343750, 1911.428466, -89.992599, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2292, 885.833801, 1923.784057, -89.992599, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18075, 883.574768, 1929.447265, -85.172996, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18075, 883.512268, 1906.758300, -85.172996, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(14455, 880.262512, 1909.340332, -88.360603, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(14455, 885.985839, 1909.347167, -88.360603, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2292, 885.842468, 1922.800659, -89.992599, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2292, 881.684570, 1922.687133, -89.994598, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2292, 881.670532, 1923.641845, -89.992599, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(14455, 884.552490, 1927.466674, -88.360603, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(14455, 890.294494, 1927.467895, -88.360603, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2290, 882.775634, 1925.450317, -89.992599, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2292, 881.307983, 1913.844970, -89.992599, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2292, 881.320617, 1912.920288, -89.994598, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2292, 885.283630, 1913.859619, -89.992599, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2292, 885.299011, 1912.955322, -89.992599, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2245, 883.300537, 1913.454589, -89.109397, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2245, 883.802124, 1923.168823, -89.109397, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(14562, 866.280761, 1960.322998, -93.090980, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(14562, 874.633544, 1960.336791, -93.091003, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19172, 888.138122, 1913.359619, -87.271766, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2262, 887.634643, 1925.631347, -88.429199, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2266, 887.639526, 1915.321777, -86.678596, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1897, 864.216552, 1918.064697, -83.992500, 90.000000, 90.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1897, 864.220336, 1918.037353, -83.992500, 90.000000, 90.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1897, 864.195007, 1918.038330, -83.992500, 90.000000, 90.000000, 270.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1897, 864.278869, 1918.090209, -83.992500, 90.000000, 90.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1897, 870.585205, 1918.006103, -83.992500, 90.000000, 90.000000, 270.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1897, 870.610534, 1918.005126, -83.992500, 90.000000, 90.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1897, 870.606750, 1918.032470, -83.992500, 90.000000, 90.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1897, 870.681701, 1918.052124, -83.992500, 90.000000, 90.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19089, 870.590270, 1918.035278, -76.544853, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1897, 870.585205, 1918.006103, -83.992500, 90.000000, 90.000000, 270.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1897, 870.610534, 1918.005126, -83.992500, 90.000000, 90.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1897, 870.606750, 1918.032470, -83.992500, 90.000000, 90.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1897, 870.681701, 1918.052124, -83.992500, 90.000000, 90.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2076, 864.188171, 1916.944335, -84.651512, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2076, 863.178771, 1918.077148, -84.651512, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2076, 864.193359, 1919.114135, -84.651512, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2073, 864.192016, 1918.058593, -84.167068, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2076, 870.585571, 1919.081054, -84.651512, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2076, 869.589843, 1918.036621, -84.651512, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2076, 870.583557, 1916.924804, -84.651512, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2076, 871.671447, 1918.040283, -84.651512, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2073, 870.579528, 1918.023803, -84.167068, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1744, 865.096313, 1938.063842, -92.839202, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1744, 865.075927, 1940.000610, -92.233177, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1744, 865.095825, 1939.998535, -92.839202, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1744, 865.096313, 1938.063842, 1940.000610, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1744, 865.076293, 1938.062866, -92.233200, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2350, 867.445983, 1940.890258, -93.940101, 0.000000, 0.000000, 348.269592, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2350, 867.344726, 1938.163085, -93.940101, 0.000000, 0.000000, 20.175800, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2350, 867.354614, 1939.471679, -93.940101, 0.000000, 0.000000, 31248.269531, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2290, 875.189941, 1943.084350, -94.307403, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2290, 875.203002, 1940.136962, -94.307403, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2311, 873.579162, 1941.390014, -94.307998, 0.000000, 0.000000, 89.089958, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2311, 873.591186, 1938.331054, -94.307998, 0.000000, 0.000000, 90.504013, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19824, 873.450927, 1942.950927, -93.804191, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19820, 873.637939, 1942.114624, -93.804313, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1509, 873.783447, 1939.338256, -93.602653, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1509, 873.829284, 1938.276123, -93.602653, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1509, 866.527954, 1939.724731, -92.836662, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19824, 865.414184, 1937.978271, -91.894989, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19823, 865.411010, 1938.184692, -91.894798, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1517, 865.364013, 1940.200073, -92.299018, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19821, 865.478942, 1939.397094, -91.896911, 0.000000, 0.000000, 54.283119, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19822, 865.335510, 1940.380615, -92.500411, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1512, 865.425720, 1940.068969, -91.693557, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1544, 865.342224, 1940.860107, -92.499977, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1544, 873.780639, 1941.702758, -93.803359, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1512, 865.444030, 1940.694335, -92.298561, 0.000000, 0.000000, 350.906280, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1544, 865.507812, 1940.817382, -92.499977, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1544, 865.494995, 1940.936767, -92.499977, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1544, 865.365051, 1941.023681, -92.499977, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1544, 865.378601, 1941.084838, -91.890937, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1544, 865.274780, 1941.114624, -92.499977, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1544, 865.361450, 1941.244506, -92.499977, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19822, 865.509887, 1941.286132, -92.500411, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19822, 865.516052, 1940.365722, -91.894386, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1517, 865.325012, 1939.942626, -92.299018, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1517, 865.514892, 1940.068847, -92.299018, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1517, 865.464721, 1939.932250, -92.299018, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1517, 865.435974, 1939.814086, -92.299018, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19822, 865.322143, 1939.637695, -92.500411, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19822, 865.481750, 1939.476684, -92.500411, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19824, 865.340393, 1939.198730, -92.499992, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19824, 865.520446, 1939.078247, -92.499992, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19824, 865.321838, 1938.916625, -92.499992, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19824, 865.502197, 1938.878051, -92.499992, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19824, 865.323669, 1938.716430, -92.499992, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19823, 865.475341, 1938.699951, -92.499801, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19823, 865.329040, 1939.405883, -92.499801, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19823, 865.553466, 1939.257568, -92.499801, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19823, 865.304260, 1938.492065, -92.499801, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1517, 865.450744, 1938.465087, -91.696029, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1517, 865.538635, 1938.288940, -92.299018, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1517, 865.483093, 1937.745849, -92.299018, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1517, 865.341308, 1937.779663, -92.299018, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19824, 865.414184, 1937.978271, -92.499992, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19823, 865.411010, 1938.184692, -92.499801, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1517, 865.450744, 1938.465087, -92.299018, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19822, 865.516052, 1940.365722, -92.500411, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1544, 865.497863, 1941.098022, -92.499977, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1544, 865.473388, 1940.954467, -91.890937, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1544, 865.340820, 1940.879394, -91.890937, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1544, 865.510742, 1940.797607, -91.890937, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19822, 865.398071, 1941.258300, -91.894386, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1512, 865.417053, 1940.570800, -92.298561, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19821, 865.335388, 1939.594848, -91.896911, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19821, 865.471557, 1939.817626, -91.896911, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19821, 865.396972, 1940.656616, -91.896911, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19821, 865.343139, 1939.135375, -91.896911, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1512, 865.327575, 1940.230346, -91.693557, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1512, 865.455261, 1939.248779, -91.693557, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1512, 865.331726, 1938.970092, -91.693557, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1512, 865.389465, 1938.789672, -91.693557, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19823, 865.503784, 1938.291015, -91.894798, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19823, 865.317199, 1938.378417, -91.894798, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19823, 865.300476, 1938.617675, -91.894798, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19824, 865.335205, 1937.672607, -91.894989, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19824, 865.503723, 1937.844360, -91.894989, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1544, 873.627990, 1939.919799, -93.803359, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18075, 870.271850, 1941.620483, -89.583297, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 867.082397, 1911.112792, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 865.210754, 1911.132446, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 863.438110, 1911.122192, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 861.804504, 1911.093505, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 860.131225, 1911.108276, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 868.920654, 1911.179809, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 870.681091, 1911.185058, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 872.400878, 1911.153808, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 874.262695, 1911.135131, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 876.224731, 1911.115600, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 859.669860, 1912.366455, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 859.709167, 1914.345458, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 859.760437, 1916.148071, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 859.764953, 1918.049072, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 859.788513, 1919.628906, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 859.822998, 1921.608276, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 859.875793, 1923.641723, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 876.095031, 1925.469726, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 873.954711, 1925.463256, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 871.834716, 1925.422851, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 869.735534, 1925.413818, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 867.251281, 1925.391723, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 864.757690, 1925.344970, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 862.369140, 1925.385009, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 860.291809, 1925.354003, -85.196800, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 864.197692, 1917.277099, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 864.196472, 1917.717529, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 864.207885, 1918.397705, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 864.211242, 1918.837890, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 863.895874, 1918.047973, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 863.439575, 1918.059570, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 864.490539, 1918.057739, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 864.884643, 1918.048706, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 869.895935, 1918.013061, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 870.337951, 1918.010498, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 870.599304, 1917.771850, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 870.578308, 1918.323852, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 870.920837, 1918.018676, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 871.395202, 1918.014282, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 870.580627, 1917.269531, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 870.591064, 1918.776489, -83.969802, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 869.963745, 1949.749145, -94.111701, 180.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 871.846313, 1949.899169, -94.111701, 180.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 873.418762, 1950.617553, -94.111701, 180.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 874.587707, 1951.754394, -94.111701, 180.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 875.360900, 1953.190673, -94.111701, 180.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 875.591186, 1955.079711, -94.111701, 180.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 875.317871, 1956.541137, -94.111701, 180.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 874.456298, 1958.068969, -94.111701, 180.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 868.323608, 1950.169555, -94.111701, 180.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 866.703552, 1951.230590, -94.111701, 180.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 865.645874, 1952.860107, -94.111701, 180.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 865.264709, 1954.867309, -94.111701, 180.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 865.633300, 1956.858276, -94.111701, 180.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 866.563415, 1958.300781, -94.111701, 180.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2184, 829.638610, 1918.608276, -88.556800, 0.000000, 0.000000, 112.564208, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2184, 828.909118, 1915.765380, -88.556800, 0.000000, 0.000000, 69.625183, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1754, 833.321350, 1914.055175, -88.555900, 0.000000, 0.000000, 195.992752, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1754, 830.485412, 1914.051879, -88.555900, 0.000000, 0.000000, 160.614334, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2082, 831.412414, 1913.363891, -88.554512, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2059, 829.294067, 1919.254760, -87.750503, 0.000000, 0.000000, 270.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19786, 829.536132, 1922.875488, -86.534263, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2344, 831.731872, 1914.104370, -88.053001, 0.000000, 0.000000, 113.967498, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1742, 826.331054, 1921.764282, -88.554702, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1742, 826.329162, 1920.325805, -88.554702, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2332, 826.851379, 1914.134887, -86.338180, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2332, 826.851379, 1914.134887, -88.153213, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2332, 826.851379, 1914.134887, -87.244178, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1569, 856.900390, 1923.151733, -84.999702, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1569, 856.927001, 1911.741455, -84.999702, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1569, 856.947448, 1917.587890, -84.999702, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1569, 862.054565, 1927.543701, -84.999702, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1569, 873.323791, 1927.565673, -84.999702, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1569, 873.040161, 1908.891235, -84.999702, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1569, 861.894836, 1908.914184, -84.999702, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19920, 828.989624, 1917.689331, -87.769599, 0.000000, 0.000000, 343.484710, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19172, 826.422546, 1918.032226, -86.599166, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2266, 826.941711, 1916.003417, -86.712722, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2357, 850.236694, 1918.149047, -90.403869, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2357, 845.977844, 1918.148071, -90.403869, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2357, 841.722534, 1918.146972, -90.403869, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18075, 883.529541, 1920.151000, -85.069992, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2076, 865.320251, 1918.069213, -84.651512, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19303, 884.061645, 1893.293457, -93.585418, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(3014, 884.331604, 1892.423461, -94.797981, 0.000000, 0.000000, 2.952558, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19303, 882.314147, 1893.293579, -93.585403, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2680, 883.182800, 1893.407714, -93.742500, -30.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19303, 880.565979, 1893.295043, -93.585403, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19303, 878.819213, 1893.294555, -93.585403, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19303, 877.070190, 1893.292236, -93.585403, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19303, 875.322998, 1893.292480, -93.585403, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2680, 879.703735, 1893.385375, -93.742500, -30.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2680, 876.207092, 1893.410278, -93.742500, -30.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2040, 883.302795, 1892.266113, -94.796600, 0.000000, 0.000000, 20.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2359, 884.282226, 1894.400390, -94.692001, 0.000000, 0.000000, 18.146400, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2359, 878.830322, 1892.695190, -91.984397, 0.000000, 0.000000, 128.146392, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2040, 883.019531, 1892.280639, -94.796577, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2040, 882.759155, 1892.359741, -94.796577, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2040, 883.304199, 1892.802734, -94.796600, 0.000000, 0.000000, 10.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2040, 883.651977, 1892.288330, -94.796577, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2040, 882.451721, 1892.697387, -94.796600, 0.000000, 0.000000, 2310.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(3014, 880.913452, 1892.442993, -94.797981, 0.000000, 0.000000, 351.004821, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(3014, 883.751342, 1892.932617, -94.797981, 0.000000, 0.000000, 351.004821, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2358, 880.174133, 1892.238281, -94.795196, 0.000000, 0.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2358, 880.006713, 1892.752319, -94.795196, 0.000000, 0.000000, 192.167190, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2358, 879.336730, 1892.331054, -94.795196, 0.000000, 0.000000, 172.585006, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2358, 879.135559, 1892.918212, -94.795196, 0.000000, 0.000000, 172.585006, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2040, 878.827270, 1892.325195, -94.796600, 0.000000, 0.000000, 2310.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2040, 878.573608, 1892.913330, -94.796600, 0.000000, 0.000000, 2312120.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2985, 876.092041, 1892.684204, -94.896400, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2358, 875.075256, 1892.310668, -94.795196, 0.000000, 0.000000, 172.585006, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2358, 875.273376, 1892.843627, -94.795196, 0.000000, 0.000000, 179.699157, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(358, 883.480651, 1891.990844, -93.747673, 0.000000, 0.000000, 6.609360, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(358, 883.480651, 1891.990844, -93.041656, 0.000000, 0.000000, 6.609360, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(358, 883.480651, 1891.990844, -93.344673, 0.000000, 0.000000, 6.609360, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(358, 882.344970, 1891.933471, -92.940658, 0.000000, 0.000000, 6.609360, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(358, 882.344970, 1891.933471, -93.242652, 0.000000, 0.000000, 6.609360, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(357, 882.392028, 1891.950683, -93.654411, 0.000000, 0.000000, 7.258399, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(357, 881.354187, 1891.978637, -94.056396, 0.000000, 5.000000, 7.258399, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(357, 881.354187, 1891.978637, -93.554412, 0.000000, 5.000000, 7.258399, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(356, 879.975097, 1891.964599, -93.963943, 0.000000, 0.000000, 4.166958, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(356, 880.489562, 1891.943115, -93.051856, 0.000000, 0.000000, 4.166958, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(356, 880.489562, 1891.943115, -92.748847, 0.000000, 0.000000, 4.166958, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(356, 879.856811, 1891.935791, -93.561950, 0.000000, 0.000000, 4.166958, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(355, 878.230346, 1891.962890, -93.771057, 0.000000, 0.000000, 4.286859, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(355, 879.005249, 1891.971435, -92.961013, 0.000000, 0.000000, 4.286859, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(355, 878.964904, 1892.002563, -93.263999, 0.000000, 0.000000, 184.286895, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(355, 877.823364, 1892.004516, -93.364997, 0.000000, 0.000000, 184.799072, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(372, 877.851501, 1891.960449, -94.249458, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(372, 881.882995, 1891.951416, -94.569976, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(372, 881.244689, 1891.966064, -93.134376, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(353, 877.461975, 1892.021728, -93.835113, 0.000000, 0.000000, 187.143539, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(353, 877.461975, 1892.021728, -94.236099, 0.000000, 0.000000, 187.143539, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(941, 884.311401, 1895.735961, -94.491661, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(923, 873.681884, 1898.495849, -94.090263, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(923, 873.347045, 1892.479736, -94.191261, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1271, 875.117858, 1898.388793, -94.600730, 0.000000, 0.000000, 19.877969, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1271, 876.172546, 1898.425659, -94.600700, 0.000000, 0.000000, 129.878005, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1271, 875.284545, 1897.367553, -94.600730, 0.000000, 0.000000, 351.940856, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1271, 871.975708, 1892.894653, -94.600730, 0.000000, 0.000000, 351.940856, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(11729, 883.568298, 1898.799560, -94.896469, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(11729, 882.891235, 1898.800659, -94.896469, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(14411, 886.773620, 1901.068115, -98.090896, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(3092, 891.685852, 1910.355468, -96.893997, 90.000000, 90.000000, 224.699783, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1805, 892.696166, 1903.925415, -97.830596, 0.000000, 88.000000, 331.300292, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(941, 890.355712, 1902.336669, -97.719886, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2907, 890.174133, 1901.981933, -97.147300, 0.000000, 0.000000, 335.996002, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2905, 890.656921, 1902.023681, -97.245437, 0.000000, 0.000000, 9.406450, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2908, 890.059631, 1902.704956, -97.189498, 0.000000, 0.000000, 261.832977, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2906, 890.539306, 1903.256225, -97.205596, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19583, 890.817504, 1903.322875, -97.237899, 0.000000, 0.000000, 344.007141, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(341, 889.879699, 1900.975585, -97.803497, 0.000000, 30.000000, 26.372840, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19924, 890.147216, 1902.610473, -95.013778, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19590, 890.304504, 1902.777587, -97.221298, 0.000000, 90.000000, 192.838867, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(3092, 892.484680, 1904.737182, -97.928298, 180.000000, 90.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2907, 891.932922, 1909.912231, -97.004302, 0.000000, 0.000000, 335.996002, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2905, 891.069824, 1909.505981, -97.027397, 0.000000, 0.000000, 17.048099, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2906, 892.284729, 1909.474243, -97.042701, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1463, 891.546691, 1911.464477, -97.211593, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1463, 892.306762, 1910.453979, -97.175605, 0.000000, 0.000000, 69.300003, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18694, 891.512023, 1911.340942, -101.443695, 91.499977, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19632, 901.447875, 1909.789062, -97.263168, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1463, 891.123535, 1909.961547, -97.275611, 0.000000, 0.000000, 147.700042, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1463, 892.927917, 1907.830688, -97.715599, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2805, 892.948608, 1906.119995, -96.915496, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2805, 892.322814, 1906.123046, -96.915496, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1370, 893.029907, 1900.156127, -97.519996, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2060, 890.221496, 1908.139038, -97.775199, 0.000000, 0.000000, 101.132202, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2060, 890.221496, 1908.139038, -97.934196, 0.000000, 0.000000, 84.351898, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1897, 893.273620, 1906.115478, -96.136802, 270.000000, 90.000000, 180.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2671, 891.352294, 1906.766479, -98.010803, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(3675, 891.619445, 1912.182739, -88.904693, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2359, 884.024169, 1892.755126, -91.984397, 0.000000, 0.000000, 18.146400, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2358, 884.573852, 1897.593383, -94.795196, 0.000000, 0.000000, 282.838928, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1544, 890.758117, 1903.568237, -97.256896, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1893, 872.465332, 1895.286010, -90.444297, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1893, 877.485168, 1895.181396, -90.444297, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1893, 881.643371, 1894.997192, -90.444297, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(1893, 892.099121, 1901.948852, -94.867103, 0.000000, 0.000000, 90.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2082, 856.929748, 1909.006469, -90.804656, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2082, 856.964721, 1926.548461, -90.804656, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2251, 857.326354, 1909.542480, -89.461402, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2251, 857.359375, 1927.052856, -89.461402, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18676, 865.653503, 1954.438110, -95.980865, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18676, 865.653503, 1954.438110, -95.980865, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18676, 867.390075, 1951.026611, -95.980865, 0.000000, 0.000000, 43.199996, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18676, 867.390075, 1951.026611, -95.980865, 0.000000, 0.000000, 43.199996, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18676, 872.795471, 1950.744140, -95.980865, 0.000000, 0.000000, 135.999954, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18676, 872.795471, 1950.744140, -95.980865, 0.000000, 0.000000, 135.999954, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18676, 875.194763, 1953.604736, -95.980865, 0.000000, 0.000000, 164.699981, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18676, 875.194763, 1953.604736, -95.980865, 0.000000, 0.000000, 164.699981, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 867.359130, 1959.069580, -93.105117, 90.800003, 174.900009, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 867.359130, 1959.055175, -92.025215, 90.800003, 174.900009, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 867.359130, 1959.039916, -90.925300, 90.800003, 174.900009, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 867.359130, 1959.023803, -89.705383, 90.800003, 174.900009, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 867.359130, 1959.003784, -88.285552, 90.800003, 174.900009, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 873.550231, 1959.073974, -88.284637, 90.800003, 174.900009, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 873.603576, 1959.066040, -93.135231, 90.800003, 174.900009, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 873.545715, 1959.077148, -92.064971, 90.800003, 174.900009, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 873.547546, 1959.083007, -90.974723, 90.800003, 174.900009, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2707, 873.548400, 1959.075073, -89.654670, 90.800003, 174.900009, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18676, 866.509094, 1957.755859, -95.970878, 0.000000, 0.000000, -22.899990, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18676, 866.509094, 1957.755859, -95.970878, 0.000000, 0.000000, -22.899990, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18676, 874.660339, 1957.331665, -95.970848, 0.000000, 0.000000, -159.999954, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18676, 874.660339, 1957.331665, -95.970848, 0.000000, 0.000000, -159.999954, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2232, 875.842041, 1947.651611, -90.719268, 0.000000, 0.000000, -88.500030, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2232, 865.115722, 1947.378417, -90.719268, 0.000000, 0.000000, 90.599922, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19152, 879.953491, 1962.379882, -91.200660, 0.000000, 0.000000, -32.099994, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19150, 870.650390, 1957.571533, -85.254829, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19152, 860.222473, 1961.486694, -90.560722, 0.000000, 0.000000, 35.800003, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19149, 870.016418, 1954.829956, -79.951271, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19152, 861.515380, 1952.832885, -92.418624, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19152, 879.675598, 1955.763061, -92.418624, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19294, 870.386474, 1960.429565, -70.595695, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19148, 871.652893, 1968.259643, -76.624084, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19156, 878.267883, 1961.580078, -88.756233, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19156, 863.397888, 1961.580078, -88.756233, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19152, 871.045471, 1957.105834, -81.776359, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19152, 867.612609, 1952.628417, -101.203414, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(18748, 891.606689, 1909.242675, -98.484703, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(337, 889.995605, 1907.334106, -97.238685, 177.999877, -8.399998, 170.199996, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2261, 857.349182, 1910.436035, -89.185867, 0.000000, 0.000000, 90.000022, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2261, 857.349182, 1925.565795, -89.185867, 0.000000, 0.000000, 90.000022, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19295, 869.754150, 1917.670776, -70.165901, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19295, 834.356933, 1922.335449, -95.926383, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19295, 849.796936, 1918.435424, -72.306396, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19295, 846.757446, 1918.497070, -109.406349, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(19295, 897.164184, 1917.670776, -91.675865, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2074, 891.567016, 1907.003173, -95.386337, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2074, 891.567016, 1907.003173, -95.386337, 0.000000, 0.000000, 0.000000, 150.00, 150.00);
tmpobjid = CreateDynamicObjectEx(2855, 882.979309, 1913.056518, -89.385307, 0.000000, 0.000000, -45.999996, 150.00, 150.00);
*/
    //InteriorVIP
    CreateDynamicObject(14607, 812.20, -1388.40, 1022.00,   0.00, 0.00, 270.00);
    CreateDynamicObject(14614, 812.20, -1388.40, 1022.00,   0.00, 0.00, 270.00);
    CreateDynamicObject(14563, 812.20, -1388.40, 1022.00,   0.00, 0.00, 270.00);
    CreateDynamicObject(14561, 812.20, -1381.00, 1021.00,   0.00, 0.00, 270.00);
    CreateDynamicObject(14605, 812.20, -1410.25, 1025.80,   0.00, 0.00, 270.00);
    CreateDynamicObject(8661, 810.70, -1398.40, 1031.30,   90.00, 0.00, 0.00);
    CreateDynamicObject(3528, 811.80, -1400.10, 1024.60,   0.00, 0.00, 270.00);
    CreateDynamicObject(3528, 811.80, -1400.10, 1024.60,   0.00, 0.00, 270.00);
    CreateDynamicObject(6136, 754.70, -1394.70, 1017.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(6136, 754.70, -1386.70, 1017.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(6136, 754.70, -1378.80, 1016.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(6136, 754.70, -1370.80, 1016.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(6136, 754.70, -1362.80, 1016.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(6136, 754.70, -1354.90, 1016.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(6136, 754.70, -1346.90, 1016.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(6136, 754.70, -1338.90, 1016.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(6136, 869.50, -1395.40, 1016.90,   0.00, 0.00, 180.00);
	CreateDynamicObject(6136, 869.50, -1387.40, 1016.90,   0.00, 0.00, 179.99);
	CreateDynamicObject(6136, 869.50, -1379.40, 1016.90,   0.00, 0.00, 179.99);
	CreateDynamicObject(6136, 869.50, -1371.40, 1016.90,   0.00, 0.00, 179.99);
	CreateDynamicObject(6136, 869.50, -1363.40, 1016.90,   0.00, 0.00, 179.99);
	CreateDynamicObject(6136, 869.50, -1355.40, 1016.90,   0.00, 0.00, 179.99);
	CreateDynamicObject(6136, 869.50, -1347.40, 1016.90,   0.00, 0.00, 179.99);
	CreateDynamicObject(6136, 869.50, -1339.40, 1016.70,   0.00, 0.00, 179.99);
	CreateDynamicObject(9044, 816.80, -1333.00, 1025.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(8483, 813.50, -1343.60, 1018.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(9831, 811.80, -1352.80, 1013.90,   0.00, 0.00, 180.00);
	CreateDynamicObject(6965, 812.60, -1348.40, 1016.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(2780, 812.60, -1354.70, 1008.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(2773, 803.00, -1350.20, 1014.40,   0.00, 0.00, 12.00);
	CreateDynamicObject(2773, 803.40, -1352.10, 1014.40,   0.00, 0.00, 11.99);
	CreateDynamicObject(2773, 804.20, -1353.80, 1014.40,   0.00, 0.00, 39.24);
	CreateDynamicObject(2773, 805.60, -1355.50, 1014.40,   0.00, 0.00, 38.99);
	CreateDynamicObject(2773, 807.10, -1356.80, 1014.40,   0.00, 0.00, 62.99);
	CreateDynamicObject(2773, 809.10, -1357.80, 1014.40,   0.00, 0.00, 64.48);
	CreateDynamicObject(2773, 811.20, -1358.30, 1014.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(2773, 813.50, -1358.30, 1014.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(2773, 815.50, -1357.90, 1014.40,   0.00, 0.00, 116.00);
	CreateDynamicObject(2773, 817.40, -1357.00, 1014.40,   0.00, 0.00, 116.00);
	CreateDynamicObject(2773, 819.20, -1355.90, 1014.40,   0.00, 0.00, 135.25);
	CreateDynamicObject(2773, 820.70, -1354.20, 1014.40,   0.00, 0.00, 141.24);
	CreateDynamicObject(2773, 821.80, -1352.20, 1014.40,   0.00, 0.00, 161.49);
	CreateDynamicObject(2773, 823.50, -1349.40, 1014.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(2774, 825.40, -1348.20, 1026.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(2774, 798.80, -1348.20, 1026.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(9833, 807.00, -1353.20, 1010.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(9833, 817.10, -1353.20, 1010.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(10771, 932.20, -1371.50, 1003.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(2773, 821.80, -1366.30, 1015.60,   0.00, 0.00, 294.99);
	CreateDynamicObject(2773, 823.90, -1365.30, 1015.60,   0.00, 0.00, 294.99);
	CreateDynamicObject(2773, 821.70, -1376.60, 1015.60,   0.00, 0.00, 65.74);
	CreateDynamicObject(2773, 823.80, -1377.60, 1015.60,   0.00, 0.00, 65.74);
	CreateDynamicObject(2773, 825.80, -1378.50, 1015.60,   0.00, 0.00, 65.74);
	CreateDynamicObject(12950, 825.60, -1360.50, 1011.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(12950, 825.60, -1360.50, 1011.70,   0.00, 0.00, 179.99);
	CreateDynamicObject(3524, 820.50, -1376.00, 1014.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(3524, 820.50, -1376.00, 1014.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(3524, 820.40, -1366.90, 1014.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(3524, 820.40, -1366.90, 1014.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(14391, 821.50, -1371.50, 1015.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(2439, 820.70, -1375.40, 1015.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(2439, 820.70, -1374.40, 1015.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(2439, 820.70, -1373.40, 1015.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(2439, 820.70, -1372.40, 1015.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(2439, 820.70, -1371.40, 1015.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(2439, 820.70, -1370.40, 1015.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(2439, 820.70, -1369.40, 1015.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(2439, 820.70, -1368.40, 1015.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(2439, 820.70, -1367.60, 1015.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(3498, 818.90, -1372.60, 1010.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(3498, 819.00, -1369.70, 1010.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(2595, 822.40, -1368.40, 1015.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(2232, 820.60, -1374.50, 1016.60,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 820.60, -1368.50, 1016.60,   0.00, 0.00, 270.00);
	CreateDynamicObject(18102, 821.80, -1367.60, 1017.10,   52.00, 0.00, 90.00);
	CreateDynamicObject(16088, 821.00, -1371.60, 1011.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(2232, 820.40, -1364.80, 1016.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 820.40, -1364.80, 1015.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 820.30, -1378.30, 1015.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 820.30, -1378.30, 1016.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2773, 816.60, -1405.50, 1016.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(2773, 816.60, -1407.80, 1016.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(2773, 816.60, -1410.10, 1016.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(2773, 816.60, -1412.40, 1016.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(2773, 816.60, -1414.70, 1016.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(2773, 807.80, -1405.50, 1016.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(2773, 807.80, -1407.80, 1016.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(2773, 807.80, -1410.10, 1016.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(2773, 807.80, -1412.40, 1016.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(2773, 807.80, -1414.70, 1016.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(14560, 798.30, -1370.54, 1017.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(14565, 798.33, -1370.59, 1015.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(6136, 754.70, -1378.80, 1024.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(6136, 754.70, -1370.80, 1024.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(6136, 754.70, -1362.80, 1024.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(6136, 754.70, -1354.90, 1024.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(3524, 800.06, -1360.82, 1013.50,   0.00, 0.00, 90.00);
	CreateDynamicObject(2350, 802.60, -1364.44, 1013.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(2350, 803.25, -1365.68, 1013.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(2350, 803.41, -1367.08, 1013.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(2350, 803.48, -1368.54, 1013.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(2350, 803.44, -1371.88, 1013.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(2350, 803.64, -1369.92, 1013.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(8661, 812.60, -1421.60, 1021.00,   90.00, 0.00, 179.99);
	CreateDynamicObject(3851, 804.40, -1421.60, 1024.80,   90.00, 0.00, 90.00);
	CreateDynamicObject(3851, 808.40, -1421.60, 1024.80,   90.00, 0.00, 90.00);
	CreateDynamicObject(3851, 812.40, -1421.60, 1024.80,   90.00, 0.00, 90.00);
	CreateDynamicObject(3851, 816.40, -1421.60, 1024.80,   90.00, 0.00, 90.00);
	CreateDynamicObject(3851, 820.40, -1421.60, 1024.80,   90.00, 0.00, 90.00);
	CreateDynamicObject(3851, 804.40, -1421.60, 1013.50,   90.00, 0.00, 90.00);
	CreateDynamicObject(3851, 808.40, -1421.60, 1013.50,   90.00, 0.00, 90.00);
	CreateDynamicObject(3851, 812.40, -1421.60, 1013.50,   90.00, 0.00, 90.00);
	CreateDynamicObject(3851, 816.40, -1421.60, 1013.50,   90.00, 0.00, 90.00);
	CreateDynamicObject(3851, 820.40, -1421.60, 1013.50,   90.00, 0.00, 90.00);
	CreateDynamicObject(1569, 810.50, -1421.50, 1015.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 813.50, -1421.50, 1015.40,   0.00, 0.00, 180.00);
	CreateDynamicObject(13594, 812.00, -1421.50, 1015.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(14782, 797.60, -1414.60, 1016.30,   0.00, 0.00, 90.00);
	CreateDynamicObject(6136, 869.50, -1379.40, 1025.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(6136, 869.50, -1371.50, 1025.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(6136, 869.50, -1363.60, 1025.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(6136, 869.50, -1355.70, 1025.30,   0.00, 0.00, 179.99);
	CreateDynamicObject(2773, 801.80, -1349.20, 1014.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(2773, 799.90, -1349.20, 1014.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(2773, 798.00, -1349.20, 1014.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(2773, 822.30, -1350.30, 1014.40,   0.00, 0.00, 168.74);
	CreateDynamicObject(2773, 825.50, -1349.40, 1014.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(2755, 805.40, -1400.50, 1017.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(3851, 804.40, -1417.50, 1020.80,   90.00, 0.00, 0.00);
	CreateDynamicObject(3533, 804.50, -1420.00, 1019.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(3533, 804.50, -1420.00, 1029.60,   180.00, 0.00, 0.00);
	CreateDynamicObject(3533, 804.50, -1411.40, 1019.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(3533, 804.50, -1411.40, 1029.60,   180.00, 0.00, 0.00);
	CreateDynamicObject(3533, 804.50, -1407.70, 1019.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(3851, 801.90, -1407.50, 1020.80,   90.00, 0.00, 90.00);
	CreateDynamicObject(3851, 797.90, -1407.50, 1020.80,   90.00, 0.00, 90.00);
	CreateDynamicObject(3851, 804.70, -1409.70, 1023.80,   90.00, 0.00, 0.00);
	CreateDynamicObject(3533, 804.50, -1407.70, 1029.60,   180.00, 0.00, 0.00);
	CreateDynamicObject(14397, 802.50, -1407.20, 1017.80,   90.00, 0.00, 0.00);
	CreateDynamicObject(14397, 797.80, -1409.10, 1020.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(14397, 798.20, -1409.10, 1020.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(14397, 798.60, -1409.10, 1020.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(14397, 799.00, -1409.10, 1020.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(14397, 802.50, -1407.20, 1015.90,   90.00, 0.00, 0.00);
	CreateDynamicObject(14397, 802.50, -1407.50, 1015.90,   90.00, 0.00, 0.00);
	CreateDynamicObject(14397, 802.50, -1407.60, 1015.90,   90.00, 0.00, 0.00);
	CreateDynamicObject(3851, 804.40, -1413.50, 1020.80,   90.00, 0.00, 0.00);
	CreateDynamicObject(14397, 803.20, -1411.90, 1002.30,   0.00, 90.00, 90.00);
	CreateDynamicObject(14397, 803.20, -1412.40, 1002.30,   0.00, 90.00, 90.00);
	CreateDynamicObject(14397, 803.20, -1412.10, 1002.30,   0.00, 90.00, 90.00);
	CreateDynamicObject(2332, 797.24, -1418.95, 1017.32,   0.00, 0.00, 88.50);
	CreateDynamicObject(1703, 803.82, -1414.82, 1015.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(8661, 784.00, -1407.40, 1016.30,   90.00, 0.00, 0.00);
	CreateDynamicObject(8661, 784.10, -1407.50, 1022.80,   90.00, 0.00, 180.00);
	CreateDynamicObject(8661, 804.50, -1431.40, 1018.10,   90.00, 0.00, 270.00);
	CreateDynamicObject(8661, 804.40, -1431.40, 1018.10,   90.00, 0.00, 90.00);
	CreateDynamicObject(3851, 804.40, -1421.70, 1020.80,   90.00, 0.00, 0.00);
	CreateDynamicObject(8661, 784.10, -1420.90, 1022.80,   90.00, 0.00, 179.99);
	CreateDynamicObject(3851, 801.90, -1420.90, 1020.90,   90.00, 0.00, 90.00);
	CreateDynamicObject(3851, 797.90, -1420.90, 1020.90,   90.00, 0.00, 90.00);
	CreateDynamicObject(14608, 825.40, -1410.30, 1017.10,   0.00, 0.00, 44.50);
	CreateDynamicObject(2773, 802.30, -1408.80, 1016.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(2773, 800.20, -1408.80, 1016.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(2773, 798.10, -1408.80, 1016.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(1703, 804.88, -1399.50, 1015.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(1703, 800.86, -1399.48, 1015.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(1703, 801.90, -1401.50, 1015.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(2755, 801.40, -1400.40, 1017.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(1703, 797.68, -1401.48, 1015.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(2755, 801.42, -1405.92, 1017.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2755, 805.40, -1406.00, 1017.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(1703, 797.68, -1407.08, 1015.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(1703, 800.92, -1405.04, 1015.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(1703, 801.94, -1407.06, 1015.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(1704, 804.88, -1405.00, 1015.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(3533, 804.50, -1398.40, 1016.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(3851, 801.70, -1398.60, 1020.80,   90.00, 0.00, 90.00);
	CreateDynamicObject(3851, 797.70, -1398.60, 1020.80,   90.00, 0.00, 90.00);
	CreateDynamicObject(2631, 799.80, -1403.30, 1015.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(2631, 803.70, -1403.30, 1015.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(2631, 796.90, -1403.20, 1015.50,   0.00, 0.00, 90.00);
	CreateDynamicObject(2100, 797.40, -1403.50, 1015.60,   0.00, 0.00, 90.00);
	CreateDynamicObject(18646, 820.39, -1366.92, 1017.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(18646, 820.40, -1376.03, 1017.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(18653, 814.00, 4583.00, -1351.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(18653, 810.35, -1350.08, 1017.07,   0.00, 0.00, 90.00);
	CreateDynamicObject(18653, 814.00, 5515.00, -135.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(18653, 814.32, -1350.16, 1017.07,   0.00, 0.00, 90.00);
	CreateDynamicObject(18653, 811.98, -1398.28, 1022.88,   0.00, 0.00, 90.00);
	CreateDynamicObject(18653, 811.98, -1398.28, 1022.88,   0.00, 0.00, 90.00);
	CreateDynamicObject(18653, 814.32, -1350.16, 1017.07,   0.00, 0.00, 90.00);
	CreateDynamicObject(18654, 820.00, 2551365.00, 5977.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(18654, 820.31, -1365.61, 1017.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(18654, 820.31, -1377.60, 1017.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(18653, 810.35, -1350.08, 1017.07,   0.00, 0.00, 90.00);
	CreateDynamicObject(18885, 802.70, -1420.52, 1016.55,   0.00, 0.00, 180.00);
	CreateDynamicObject(18646, 805.40, -1402.02, 1018.94,   0.00, 0.00, 0.00);
	CreateDynamicObject(18646, 805.39, -1404.48, 1018.94,   0.00, 0.00, 0.00);
	CreateDynamicObject(2311, 799.32, -1406.81, 1015.50,   0.00, 0.00, 90.00);
	CreateDynamicObject(2311, 799.32, -1401.32, 1015.50,   0.00, 0.00, 90.00);
	CreateDynamicObject(2311, 803.38, -1406.81, 1015.50,   0.00, 0.00, 90.00);
	CreateDynamicObject(2311, 803.00, 3800.00, -1401.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(19129, 815.74, -1370.78, 1013.49,   0.00, 0.00, 0.00);
	CreateDynamicObject(19129, 795.77, -1370.79, 1013.49,   0.00, 0.00, 0.00);
	CreateDynamicObject(2311, 803.38, -1401.29, 1015.50,   0.00, 0.00, 90.00);
	CreateDynamicObject(3524, 799.69, -1380.66, 1013.50,   0.00, 0.00, 90.00);
	CreateDynamicObject(2755, 827.00, -1417.40, 1017.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2755, 827.00, -1403.20, 1017.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(1569, 826.90, -1418.20, 1015.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(1569, 826.90, -1402.50, 1015.40,   0.00, 0.00, 270.00);
	CreateDynamicObject(19125, 802.83, -1408.05, 1016.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(19125, 801.17, -1408.11, 1016.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(19125, 799.77, -1408.10, 1016.18,   0.00, 0.00, 0.00);
    CreateDynamicObject(19125, 798.10, -1408.13, 1016.18,   0.00, 0.00, 0.00);


	//-Interior comisaria LAPD 14-4-2021 by 0vi3d0
	new lapdnew;
	lapdnew = CreateDynamicObject(19531, 1944.418334, -2412.845458, 12.599119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 14581, "ab_mafiasuitea", "cof_wood2", 0x00000000);
    lapdnew = CreateDynamicObject(19531, 1944.418334, -2412.845458, 17.489122, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 10023, "bigwhitesfe", "archgrnd1_SFE", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1959.417602, -2469.762939, 14.239112, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1959.417602, -2469.762939, 17.699110, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1949.997192, -2469.779785, 14.239112, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1949.997192, -2469.779785, 17.639116, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1945.548095, -2465.242919, 14.239112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1945.548095, -2465.242919, 17.499120, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1955.318359, -2469.052978, 14.239112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1955.318359, -2469.052978, 17.259113, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(18762, 1955.720947, -2463.823486, 14.889119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(18762, 1955.720947, -2463.823486, 18.149118, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1956.108276, -2469.052978, 14.239112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1956.108276, -2469.052978, 17.469116, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1955.968139, -2462.132812, 11.869116, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1945.558105, -2457.811279, 14.239112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(18762, 1955.720947, -2456.832763, 14.889119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(18762, 1955.720947, -2456.832763, 17.199119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19362, 1955.826171, -2454.775390, 14.289123, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19391, 1950.464599, -2453.104003, 14.309116, 0.000000, 0.000000, 89.999969, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19362, 1955.826171, -2454.775390, 17.299121, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19362, 1947.256713, -2453.104003, 14.309118, 0.000000, 0.000000, -90.000007, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19362, 1947.256713, -2453.104003, 17.549116, 0.000000, 0.000000, -90.000007, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1945.558105, -2457.811279, 17.339115, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19362, 1950.466796, -2453.104003, 17.549116, 0.000000, 0.000000, -90.000007, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19362, 1953.637451, -2453.104003, 14.309118, 0.000000, 0.000000, -90.000007, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19362, 1953.637451, -2453.104003, 17.089117, 0.000000, 0.000000, -90.000007, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(18762, 1955.720947, -2453.192626, 14.889119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(18762, 1955.720947, -2453.192626, 17.009119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1960.698730, -2465.511718, 14.239112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1960.698730, -2465.511718, 17.539115, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1960.698730, -2457.860839, 14.239112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1960.698730, -2457.860839, 17.249113, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19391, 1957.704589, -2453.104003, 14.309116, 0.000000, 0.000000, 89.999969, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19362, 1960.767456, -2453.104003, 14.309118, 0.000000, 0.000000, -90.000007, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19362, 1960.767456, -2453.104003, 17.189123, 0.000000, 0.000000, -90.000007, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19362, 1957.606567, -2453.104003, 17.189123, 0.000000, 0.000000, -90.000007, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1959.531616, -2449.065673, 14.239112, 0.000000, 0.000000, 26.200002, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1959.531616, -2449.065673, 17.469114, 0.000000, 0.000000, 26.200002, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1955.513916, -2440.900146, 14.239112, 0.000000, 0.000000, 26.200002, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1955.513916, -2440.900146, 16.949110, 0.000000, 0.000000, 26.200002, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1953.398559, -2431.850097, 14.239112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1953.398559, -2431.850097, 17.499111, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1945.548095, -2449.362792, 14.239112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1945.548095, -2449.362792, 17.349113, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1945.548095, -2443.182861, 14.239112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1945.548095, -2443.182861, 16.709114, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19408, 1945.540771, -2436.772949, 14.219121, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19408, 1945.540771, -2433.582275, 14.219121, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19408, 1945.540771, -2430.611572, 14.219121, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1945.548095, -2433.885498, 16.709114, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1940.728881, -2447.824707, 14.239112, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1940.728881, -2447.824707, 17.279117, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1932.018920, -2447.839599, 14.239112, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1932.018920, -2447.839599, 16.899114, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1928.498291, -2443.182861, 14.239112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1928.498291, -2443.182861, 17.479114, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1928.498291, -2433.854003, 14.239111, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1928.498291, -2433.854003, 16.919115, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1931.986938, -2429.128662, 14.239111, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1931.986938, -2429.128662, 16.909116, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19391, 1943.924316, -2429.102783, 14.309116, 0.000000, 0.000000, 89.999969, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1937.577270, -2429.119384, 14.239112, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1940.827270, -2429.113769, 17.209123, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1937.718383, -2424.213867, 14.239111, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1937.718383, -2424.213867, 16.159112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1937.718383, -2415.031494, 14.239111, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1937.718383, -2414.614746, 16.159112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1953.398559, -2422.361572, 14.239111, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1953.398559, -2422.361572, 16.289112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1953.398559, -2413.181396, 14.239111, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1953.398559, -2413.181396, 15.999114, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1932.945190, -2410.307373, 14.239111, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1932.945190, -2410.307373, 16.719112, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1923.695190, -2410.323974, 14.239111, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1923.695190, -2410.323974, 16.159114, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1914.265258, -2410.340576, 14.239111, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1914.265258, -2410.340576, 16.379116, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19408, 1937.716308, -2408.635986, 14.239118, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19372, 1937.718627, -2408.636962, 17.659114, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19408, 1937.716308, -2405.535644, 14.239118, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19408, 1937.716308, -2402.675781, 14.239118, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19408, 1937.716308, -2399.745849, 14.239118, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1937.718383, -2402.964599, 17.049119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1911.488159, -2405.830566, 14.239111, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1911.488159, -2405.830566, 15.989109, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1911.488159, -2396.420654, 14.239111, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1911.488159, -2396.420654, 16.659116, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1911.488159, -2387.680419, 14.239111, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1911.488159, -2387.680419, 16.729114, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19391, 1937.711791, -2396.606201, 14.219120, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19372, 1937.718627, -2396.596923, 17.659114, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19408, 1937.716308, -2393.426269, 14.239118, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1937.718017, -2390.330566, 17.229114, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1932.871948, -2385.756591, 14.239111, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1932.871459, -2385.749023, 16.649112, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1923.322021, -2385.772949, 14.239111, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1923.322021, -2385.772949, 16.379112, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1914.671997, -2385.788085, 14.239111, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1914.671997, -2385.788085, 16.679113, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19408, 1937.716308, -2390.415771, 14.239118, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19408, 1937.716308, -2387.265625, 14.239118, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1958.120971, -2408.392333, 14.239111, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1958.120971, -2408.392333, 16.719114, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1966.471069, -2408.377929, 14.239111, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1966.471069, -2408.377929, 16.169111, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1967.058837, -2403.871093, 14.239111, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1967.058837, -2394.261230, 14.239111, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1967.058837, -2403.871093, 16.399112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1967.058837, -2394.261230, 16.809112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1963.213867, -2392.724609, 14.239111, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1963.213867, -2392.724609, 17.289112, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19391, 1953.391967, -2397.706298, 14.219120, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1953.398559, -2403.791015, 14.239111, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1953.398559, -2403.791015, 16.429115, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1957.379638, -2393.560058, 14.239111, 0.000000, 0.000000, 122.999984, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1957.379638, -2393.560058, 16.889118, 0.000000, 0.000000, 122.999984, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19362, 1953.402465, -2397.676025, 17.379121, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1942.511962, -2385.739501, 14.239111, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1942.511962, -2385.739501, 16.469112, 0.000000, 0.000000, 90.099998, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1949.992431, -2389.114013, 14.239111, 0.000000, 0.000000, 40.300018, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1949.992431, -2389.114013, 16.619115, 0.000000, 0.000000, 40.300018, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1951.958984, -2391.432128, 14.239111, 0.000000, 0.000000, 40.300018, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(19447, 1951.958984, -2391.432128, 15.859116, 0.000000, 0.000000, 40.300018, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-70-percent", 0x00000000);
    lapdnew = CreateDynamicObject(2960, 1918.473876, -2404.244873, 12.845363, -0.999998, 89.899993, 28.800003, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-80-percent", 0x00000000);
    lapdnew = CreateDynamicObject(2960, 1917.409912, -2402.308105, 12.806795, -0.999998, 89.899993, 28.800003, 20, 9, -1, 1500.0, 1500.0);
    SetDynamicObjectMaterial(lapdnew, 0, 18646, "matcolours", "grey-80-percent", 0x00000000);
    lapdnew = CreateDynamicObject(2414, 1955.603027, -2461.808349, 12.559121, 0.000000, 0.000000, -89.800003, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2414, 1955.596191, -2459.817626, 12.559121, 0.000000, 0.000000, -89.800003, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2414, 1955.588745, -2457.816894, 12.559121, 0.000000, 0.000000, -89.800003, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19325, 1955.601440, -2460.650634, 17.469120, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1569, 1948.747558, -2469.739990, 12.599119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1569, 1951.747802, -2469.739990, 12.599119, 0.000000, 0.000000, 179.899993, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1569, 1958.463134, -2453.067138, 12.549118, 0.000000, 0.000000, -179.999954, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1945.691040, -2465.711669, 12.599119, 0.000000, 0.000000, -90.700004, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1945.702392, -2464.781494, 12.599119, 0.000000, 0.000000, -90.700004, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1945.713378, -2463.881591, 12.599119, 0.000000, 0.000000, -90.700004, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1945.724975, -2462.931396, 12.599119, 0.000000, 0.000000, -90.700004, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1945.736206, -2462.010742, 12.599119, 0.000000, 0.000000, -90.700004, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1945.748413, -2461.010742, 12.599119, 0.000000, 0.000000, -90.700004, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1945.760375, -2460.030761, 12.599119, 0.000000, 0.000000, -90.700004, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2001, 1955.095825, -2469.480712, 12.599119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2001, 1945.945922, -2469.480712, 12.599119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19466, 1945.615722, -2436.791259, 14.199121, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19466, 1945.585693, -2433.570800, 14.199121, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19466, 1945.625732, -2430.621093, 14.199121, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1569, 1944.671020, -2429.072021, 12.549118, 0.000000, 0.000000, -179.999954, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2414, 1945.144653, -2445.393554, 12.559121, 0.000000, 0.000000, -89.800003, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2414, 1945.112182, -2447.373535, 12.559121, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2414, 1945.137695, -2443.403320, 12.559121, 0.000000, 0.000000, -89.800003, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2414, 1945.130493, -2441.413085, 12.559121, 0.000000, 0.000000, -89.800003, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2414, 1945.123901, -2439.433593, 12.559121, 0.000000, 0.000000, -89.800003, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2414, 1943.122558, -2447.373535, 12.559121, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2414, 1941.131958, -2447.373535, 12.559121, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2414, 1939.161376, -2447.373535, 12.559121, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2414, 1937.181396, -2447.373535, 12.559121, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2414, 1935.201416, -2447.373535, 12.559121, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2414, 1933.220703, -2447.373535, 12.559121, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2414, 1931.230590, -2447.373535, 12.559121, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2414, 1929.250732, -2447.373535, 12.559121, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1569, 1953.360351, -2430.778808, 12.549118, 0.000000, 0.000000, -90.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2614, 1960.537231, -2460.487792, 15.279120, 0.000000, 0.000000, -89.900001, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2616, 1939.639404, -2429.261718, 15.029120, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19786, 1937.103271, -2429.166503, 15.125718, 3.899998, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19786, 1934.562988, -2429.166503, 15.125718, 3.899998, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2475, 1944.232177, -2447.651123, 14.119120, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2475, 1942.571411, -2447.651123, 14.119120, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2475, 1940.890991, -2447.651123, 14.119120, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2475, 1939.210815, -2447.651123, 14.119120, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2475, 1937.470458, -2447.651123, 14.119120, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2475, 1935.750244, -2447.651123, 14.119120, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2475, 1934.020141, -2447.651123, 14.119120, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2475, 1932.299682, -2447.651123, 14.119120, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2475, 1930.610107, -2447.651123, 14.119120, 0.000000, 0.000000, -179.999984, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1943.763427, -2447.495605, 14.369119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1943.763427, -2447.495605, 15.019124, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1943.763427, -2447.495605, 15.749129, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1942.052978, -2447.495605, 15.749129, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1940.392578, -2447.495605, 15.749129, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1938.691772, -2447.495605, 15.749129, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1936.981201, -2447.495605, 15.749129, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1935.260620, -2447.495605, 15.749129, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1933.550292, -2447.495605, 15.749129, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1931.770263, -2447.495605, 15.749129, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1930.109863, -2447.495605, 15.749129, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1942.103393, -2447.495605, 15.019124, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1940.402832, -2447.495605, 15.019124, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1938.782714, -2447.495605, 15.019124, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1937.052612, -2447.495605, 15.019124, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1935.332397, -2447.495605, 15.019124, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1933.541992, -2447.495605, 15.019124, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1931.821777, -2447.495605, 15.019124, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1930.131958, -2447.495605, 15.019124, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1942.133300, -2447.495605, 14.369119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1940.413208, -2447.495605, 14.369119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1938.793212, -2447.495605, 14.369119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1936.993286, -2447.495605, 14.369119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1935.303466, -2447.495605, 14.369119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1933.573242, -2447.495605, 14.369119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1931.793212, -2447.495605, 14.369119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1930.123291, -2447.495605, 14.369119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(14782, 1928.905761, -2434.990234, 13.549118, 0.000000, 0.000000, 90.099983, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(14782, 1928.917480, -2441.740722, 13.549118, 0.000000, 0.000000, 90.099983, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1715, 1957.077758, -2461.998535, 12.579117, 0.000000, 0.000000, -116.999992, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1715, 1957.176757, -2460.190673, 12.579116, 0.000000, 0.000000, -90.500007, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1715, 1956.955078, -2458.334960, 12.599119, 0.000000, 0.000000, -56.799999, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19893, 1955.579833, -2461.471191, 13.609119, 0.000000, 0.000000, 100.999992, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19893, 1955.539306, -2458.939697, 13.609119, 0.000000, 0.000000, 79.999992, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(348, 1944.866943, -2439.495849, 13.699810, -15.100000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(348, 1944.866943, -2439.646240, 13.719575, -15.100000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(348, 1944.866943, -2439.799316, 13.729686, -15.100000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(348, 1944.866943, -2439.962646, 13.742404, -15.100000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(348, 1944.866943, -2440.127929, 13.745468, -15.100000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(351, 1945.012451, -2440.376220, 13.639122, 0.000000, 0.000000, -85.100006, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(351, 1945.027587, -2441.137451, 13.639122, 0.000000, 0.000000, -85.100006, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(349, 1944.906127, -2442.357666, 13.709117, 0.000000, 0.000000, -68.899993, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(349, 1944.913085, -2442.987060, 13.709117, 0.000000, 0.000000, -68.899993, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(349, 1944.880981, -2443.598876, 13.709117, 0.000000, 0.000000, -68.899993, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(353, 1944.929931, -2444.785156, 13.664121, -61.400001, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(353, 1944.970092, -2445.254394, 13.647446, -61.400001, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(353, 1944.970092, -2445.672363, 13.681838, -61.400001, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19466, 1937.736328, -2408.781494, 14.199121, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19466, 1937.736328, -2405.501220, 14.199121, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19466, 1937.736328, -2402.691162, 14.199121, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19466, 1937.736328, -2399.840820, 14.199121, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19466, 1937.736328, -2393.590820, 14.199121, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19466, 1937.736328, -2390.250976, 14.199121, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19466, 1937.736328, -2387.250732, 14.199121, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1569, 1937.743286, -2397.352783, 12.509119, 0.000000, 0.000000, 90.599975, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1569, 1953.344970, -2396.921386, 12.539113, 0.000000, 0.000000, -90.099967, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2205, 1916.281738, -2398.831054, 12.319115, 0.000000, 0.000000, -90.200027, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2205, 1916.289550, -2396.579345, 12.319115, 0.000000, 0.000000, -90.200027, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2205, 1916.297485, -2394.319091, 12.319115, 0.000000, 0.000000, -90.200027, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2205, 1916.289794, -2396.569335, 12.999114, 0.000000, 0.000000, -90.200027, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2614, 1916.857055, -2397.255859, 13.139121, 0.000000, 0.000000, 89.500000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19787, 1917.888305, -2403.258056, 14.479121, 0.000000, 0.000000, 117.900001, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19466, 1917.800415, -2403.305175, 14.129117, 0.000000, 0.000000, 28.399999, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1921.412353, -2400.768798, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1921.408813, -2399.697998, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1921.405151, -2398.657714, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1921.401611, -2397.607177, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1921.398193, -2396.526611, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1921.394653, -2395.495849, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1921.390991, -2394.415283, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1921.387573, -2393.404541, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1923.832275, -2400.760986, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1923.828369, -2399.659912, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1923.824218, -2398.578857, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1923.821044, -2397.548095, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1923.817016, -2396.377685, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1923.813354, -2395.307373, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1923.809936, -2394.286376, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1923.806274, -2393.215332, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1926.202514, -2400.752929, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1926.198486, -2399.602294, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1926.194458, -2398.461914, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1926.190185, -2397.381347, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1926.186157, -2396.320312, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1926.182373, -2395.160400, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1926.178710, -2394.110107, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1722, 1926.174804, -2393.059814, 12.599118, 0.000000, 0.000000, 90.199996, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(14394, 1914.895385, -2397.297851, 12.379117, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2205, 1916.274780, -2401.042968, 12.319115, 0.000000, 0.000000, -90.200027, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2205, 1916.305297, -2392.078125, 12.319115, 0.000000, 0.000000, -90.200027, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19787, 1919.007202, -2385.831542, 14.909120, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19787, 1921.667114, -2385.831542, 14.909120, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19787, 1924.427246, -2385.831542, 14.909120, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19787, 1922.578613, -2410.227783, 14.809119, 0.000000, 0.000000, -179.900009, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19787, 1925.118652, -2410.223144, 14.809119, 0.000000, 0.000000, -179.900009, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19787, 1927.718750, -2410.218505, 14.809119, 0.000000, 0.000000, -179.900009, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2010, 1937.358276, -2401.284667, 12.599119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2010, 1937.358276, -2404.094970, 12.599119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2010, 1937.358276, -2407.086181, 12.599119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2010, 1937.358276, -2391.945556, 12.599119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2010, 1937.358276, -2388.974853, 12.599119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2607, 1960.743530, -2399.815429, 12.969120, 0.000000, 0.000000, -89.200004, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1663, 1959.619750, -2399.001953, 13.039116, 0.000000, 0.000000, 73.300003, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1663, 1959.430419, -2400.254150, 13.039116, 0.000000, 0.000000, 95.099998, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1671, 1962.123901, -2399.643554, 13.039116, 0.000000, 0.000000, -71.499992, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1723, 1960.595947, -2407.805419, 12.599119, 0.000000, 0.000000, 179.699951, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1723, 1957.295898, -2407.787353, 12.599119, 0.000000, 0.000000, 179.699951, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(1723, 1954.026000, -2406.012451, 12.599119, 0.000000, 0.000000, 89.999992, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2315, 1956.569091, -2405.256347, 12.599119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19787, 1966.997192, -2396.873779, 15.039118, 0.000000, 0.000000, -90.000007, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19787, 1966.997192, -2400.654541, 15.039118, 0.000000, 0.000000, -90.000007, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19787, 1966.997192, -2404.434082, 15.039118, 0.000000, 0.000000, -90.000007, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2007, 1966.361450, -2393.388916, 12.579117, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2007, 1965.141479, -2393.388916, 12.579117, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2610, 1964.173339, -2393.191406, 13.409120, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2167, 1963.274169, -2392.874511, 12.599119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2161, 1966.985107, -2395.029296, 12.599119, 0.000000, 0.000000, -90.000022, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2161, 1966.985107, -2396.979736, 12.599119, 0.000000, 0.000000, -90.000022, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2509, 1964.760498, -2408.260009, 14.599121, 0.000000, 0.000000, -179.699951, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2509, 1963.030395, -2408.269042, 14.599121, 0.000000, 0.000000, -179.699951, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2162, 1966.968139, -2402.178955, 12.599119, 0.000000, 0.000000, -90.100006, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2482, 1966.867553, -2407.007568, 12.599119, 0.000000, 0.000000, -89.999992, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2482, 1966.867553, -2407.394531, 16.805814, 0.000000, -179.500015, -89.999992, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1966.712280, -2406.985351, 14.069121, 0.000000, 0.000000, -85.400009, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1966.712280, -2406.985351, 14.389123, 0.000000, 0.000000, -85.400009, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1966.712280, -2406.985351, 14.949131, 0.000000, 0.000000, -85.400009, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(356, 1966.712280, -2406.985351, 15.239132, 0.000000, 0.000000, -85.400009, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19142, 1966.665039, -2406.814453, 12.892790, -7.300000, -87.099975, 44.700000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19142, 1966.578613, -2407.240966, 12.955447, -10.800001, -87.099975, 91.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(19142, 1966.606079, -2407.663085, 12.886074, -2.800002, -87.199989, -175.900039, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(349, 1964.510131, -2408.252197, 13.889120, 0.000000, 0.000000, 4.299999, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(349, 1964.510131, -2408.252197, 14.259121, 0.000000, 0.000000, 4.299999, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(334, 1965.000366, -2408.232910, 14.869119, 0.000000, -13.899999, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(334, 1964.694702, -2408.232910, 14.896524, 0.000000, -13.899999, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(334, 1964.350219, -2408.232910, 14.996781, 0.000000, -13.899999, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(18637, 1963.494140, -2408.296142, 14.730512, 89.799995, 0.000000, 178.799942, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(18637, 1962.904052, -2408.283447, 14.730512, 89.799995, 0.000000, 178.799942, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2612, 1961.085327, -2392.863037, 14.799120, 0.000000, 0.000000, 0.000000, 20, 9, -1, 1500.0, 1500.0);
    lapdnew = CreateDynamicObject(2614, 1956.034423, -2394.626464, 15.639123, 0.000000, 0.000000, 33.000003, 20, 9, -1, 1500.0, 1500.0);
    //tmpobjid = CreateDynamicObject(1495, 1949.694946, -2453.097900, 12.599119, 0.000000, 0.000000, 0.000000, 20, 9, -1, 400.00, 400.00);

    //Interior - Carcel LAPD 15-4-2021 by 0vi3d0
    tmpobjid = CreateDynamicObject(19531, 1949.024169, -2415.479736, 12.609115, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "carp20S", 0x00000000);
    tmpobjid = CreateDynamicObject(19531, 1949.024169, -2403.290283, 18.049119, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "gun_floor1", 0x00000000);
    tmpobjid = CreateDynamicObject(19531, 1949.024169, -2521.649414, 22.279121, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "gun_floor1", 0x00000000);
    tmpobjid = CreateDynamicObject(19391, 1945.782104, -2475.048095, 18.375055, 0.000000, 0.000000, -89.299980, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1944.211669, -2470.407714, 14.319119, 0.000000, 0.000000, 0.699998, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1944.211669, -2470.407714, 17.799116, 0.000000, 0.000000, 0.699998, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1944.211669, -2470.407714, 21.299118, 0.000000, 0.000000, 0.699998, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1947.071289, -2470.339111, 14.319119, 0.000000, 0.000000, 0.699998, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1947.071289, -2470.339111, 17.809118, 0.000000, 0.000000, 0.699998, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1947.071289, -2470.339111, 21.289110, 0.000000, 0.000000, 0.699998, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1945.828491, -2475.048339, 21.679117, 0.000000, 0.000000, 90.699996, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1939.307006, -2465.711425, 14.319120, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1939.307006, -2465.711425, 17.809131, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1945.621704, -2470.226318, 19.791151, -20.700004, 89.999961, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1951.857299, -2465.588134, 14.319120, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1951.857299, -2465.588134, 17.809127, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1934.718139, -2461.017822, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1934.718139, -2461.017822, 17.819114, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1956.427612, -2461.017822, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1956.427612, -2461.017822, 17.829122, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1936.474121, -2456.259765, 14.319120, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1936.474121, -2456.259765, 17.809122, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1934.718139, -2451.433593, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1934.718139, -2451.433593, 17.809116, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19391, 1942.842407, -2456.241943, 14.325057, 0.000000, 0.000000, -89.299980, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19362, 1942.840209, -2456.241210, 17.809116, 0.000000, 0.000000, 90.700004, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1944.398437, -2451.433593, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1944.398437, -2451.433593, 17.809122, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1939.541625, -2446.739990, 12.209111, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1939.541625, -2446.739990, 17.479120, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1939.541870, -2446.750000, 15.129111, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 10806, "airfence_sfse", "ws_griddyfence", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1939.541992, -2446.770019, 12.209111, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1939.541625, -2446.770019, 17.479120, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1951.826293, -2456.608398, 14.319120, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1951.826293, -2456.608398, 17.809118, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1947.077514, -2451.897460, 14.329115, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1947.077514, -2451.897460, 17.809116, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19362, 1947.071777, -2445.514160, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19362, 1947.071777, -2445.514160, 17.819116, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19362, 1944.401611, -2445.514160, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19362, 1944.401611, -2445.514160, 17.809108, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1934.718139, -2441.823974, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1934.718139, -2441.823974, 17.819114, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1929.977416, -2437.092529, 14.329112, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1929.977416, -2437.092529, 17.819118, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1930.004150, -2433.332031, 14.329112, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1928.077880, -2432.304443, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1928.077880, -2432.304443, 17.809110, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1929.990478, -2429.360595, 14.329112, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1934.727905, -2432.304443, 17.809110, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1934.727905, -2422.694824, 17.809110, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(18762, 1934.640869, -2433.326904, 14.919116, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "brick", 0x00000000);
    tmpobjid = CreateDynamicObject(18762, 1934.640869, -2433.326904, 19.889123, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "brick", 0x00000000);
    tmpobjid = CreateDynamicObject(18762, 1934.640869, -2429.275634, 14.919116, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "brick", 0x00000000);
    tmpobjid = CreateDynamicObject(18762, 1934.640869, -2429.275634, 19.869108, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "brick", 0x00000000);
    tmpobjid = CreateDynamicObject(19391, 1945.707275, -2443.988281, 14.339117, 0.000000, 0.000000, 90.200004, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19362, 1944.201416, -2445.514160, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19362, 1944.231445, -2445.514160, 17.809122, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19362, 1947.251953, -2445.514160, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19362, 1947.241943, -2445.514160, 17.819110, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1947.257690, -2451.897460, 14.329115, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1947.257690, -2451.897460, 17.829116, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19355, 1945.718505, -2443.987060, 17.769115, 0.000000, 0.000000, 90.200004, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1929.990478, -2429.360595, 17.809110, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1930.004150, -2433.332031, 17.819112, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1928.077880, -2422.674804, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1928.077880, -2422.674804, 17.809118, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1929.950927, -2417.989746, 14.329112, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1929.950927, -2417.989746, 17.809112, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1934.728027, -2416.954589, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1939.510620, -2417.955078, 14.329112, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1939.510620, -2417.955078, 17.819116, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1929.977050, -2425.410888, 14.329112, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1929.977050, -2425.410888, 17.789127, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(18762, 1934.640869, -2425.314697, 14.919116, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "brick", 0x00000000);
    tmpobjid = CreateDynamicObject(18762, 1934.640869, -2425.314697, 19.899122, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "brick", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1956.427612, -2451.478271, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1956.427612, -2451.478271, 17.809110, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1956.427612, -2441.848388, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1956.427612, -2441.848388, 17.809116, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1956.427612, -2432.289062, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1956.427612, -2432.289062, 17.809112, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1949.120727, -2417.920898, 14.329112, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1949.120727, -2417.920898, 17.819114, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1958.740844, -2417.887695, 14.329112, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1958.740844, -2417.887695, 17.829122, 0.000000, 0.000000, -89.799964, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1956.427612, -2422.698486, 14.329113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19447, 1956.427612, -2422.698486, 17.799106, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18065, "ab_sfammumain", "breezewall5", 0x00000000);
    tmpobjid = CreateDynamicObject(19435, 1956.327392, -2459.685302, 15.342514, 90.199974, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-90-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19435, 1956.327392, -2462.635253, 15.332220, 90.199974, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-90-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(2789, 1956.307250, -2460.057373, 15.539115, 0.000000, 0.000000, -90.000022, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF}Carcel Ishiro", 80, "Ariel", 20, 1, 0x00000000, 0x00000000, 1);
    tmpobjid = CreateDynamicObject(2789, 1956.307250, -2462.568115, 14.879116, 0.000000, 0.000000, -90.000022, 21, 10, -1, 400.00, 400.00);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF}Police Departament", 80, "Ariel", 15, 1, 0x00000000, 0x00000000, 1);
    tmpobjid = CreateDynamicObject(14877, 1945.672119, -2470.524658, 14.559111, 0.000000, 0.000000, -88.699996, 21, 10, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19859, 1945.048706, -2475.030761, 17.885053, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1502, 1942.101562, -2456.299804, 12.609113, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(14883, 1934.797241, -2433.323242, 14.589115, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(14883, 1934.797241, -2425.422363, 14.589115, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1495, 1944.938598, -2443.980712, 12.609114, 0.000000, 0.000000, 0.000000, 21, 10, -1, 400.00, 400.00);

    //Camionero para nivel 1 y 2
    tmpobjid = CreateDynamicObject(18788, 2877.349121, 2113.039306, 8.920312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(18796, 2916.738281, 2113.055664, 12.058824, 0.000000, -5.199997, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2937.761230, 2115.695556, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2937.761230, 2105.695312, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2937.761230, 2095.716064, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2937.761230, 2125.686523, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2937.761230, 2135.687500, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2947.744384, 2115.695556, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2947.744384, 2125.694824, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2947.744384, 2135.684814, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2947.744384, 2145.664794, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2947.744384, 2105.713867, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2947.744384, 2095.739501, 3.452047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19789, 2937.162353, 2120.591064, 13.400358, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19789, 2937.162353, 2120.591064, 14.370358, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19789, 2937.162353, 2119.600585, 13.400358, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19789, 2937.162353, 2119.600585, 14.360361, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19789, 2937.162353, 2105.537597, 13.400358, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19789, 2937.162353, 2106.538574, 13.400358, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19789, 2937.162353, 2106.538574, 14.380364, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19789, 2937.162353, 2105.537597, 14.380364, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(966, 2936.734130, 2116.378662, 13.489347, 0.000000, 0.000000, 88.700027, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19789, 2938.132812, 2119.600585, 13.400358, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19789, 2938.132812, 2118.639648, 13.400358, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19789, 2938.132812, 2117.669189, 13.400358, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19789, 2938.163330, 2106.538574, 13.400358, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19789, 2938.163330, 2107.529541, 13.400358, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19789, 2938.163330, 2108.520507, 13.400358, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2957.744873, 2115.695556, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2957.744873, 2105.713867, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2957.744873, 2095.722900, 3.442047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2957.744873, 2085.741943, 3.442047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2947.755126, 2085.741943, 3.442047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2957.744873, 2125.695800, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2957.744873, 2135.675048, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2957.744873, 2145.664550, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2957.744873, 2155.656982, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(5184, 3003.969238, 2114.035156, 32.316440, 0.000000, 0.000000, 90.399971, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2957.744873, 2075.793457, 3.442047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1383, 3004.942871, 2110.334716, 45.093650, 0.000000, 0.000000, -1.800000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3624, 2975.291015, 2088.052734, 17.609159, 0.000000, 0.000000, -90.099983, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(7516, 3014.983398, 2086.149414, 17.323606, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(8884, 2980.772460, 2171.882568, 16.763622, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(8884, 3003.853515, 2171.882568, 16.763622, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3066, 2969.672119, 2173.406005, 13.433628, 0.000000, 0.000000, -33.499996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3066, 2969.905273, 2168.142822, 14.413629, 0.000000, 0.000000, -33.499996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3066, 2963.268310, 2164.165039, 14.453625, 0.000000, 0.000000, -33.499996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3066, 2968.328125, 2169.647949, 16.873626, 0.000000, 0.000000, -52.199996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(13025, 3021.823486, 2102.812255, 16.453626, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(13025, 3021.823486, 2110.962402, 16.453626, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3624, 2990.814697, 2152.715820, 17.609159, 0.000000, 0.000000, 89.900016, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19641, 2932.888427, 2125.060302, 13.392043, 0.000000, 0.000000, 90.000015, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19641, 2932.888427, 2133.030273, 13.392043, 0.000000, 0.000000, 90.000015, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19641, 2932.888427, 2101.061279, 13.392043, 0.000000, 0.000000, 90.000015, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19641, 2932.888427, 2093.070312, 13.392043, 0.000000, 0.000000, 90.000015, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19791, 2937.761230, 2085.754638, 3.472047, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19641, 2932.888427, 2085.080322, 13.392043, 0.000000, 0.000000, 90.000015, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(8884, 3040.476806, 2129.187744, 15.687120, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(10794, 3045.360839, 2118.839111, 3.039667, 0.000000, 0.000000, -89.599967, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(10795, 3045.257080, 2121.121582, 13.025872, 0.000000, 0.000000, -89.599983, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(6959, 3050.261718, 2194.104492, 12.333506, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(8335, 3037.970214, 2202.607910, 16.243618, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(8335, 3051.639404, 2182.749267, 16.223615, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(8077, 3050.576660, 2202.623535, 16.183773, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(8077, 3038.046386, 2182.634033, 16.193771, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1696, 3028.919433, 2147.663085, 12.731144, -7.200000, 0.000000, 90.199996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1696, 3028.938232, 2142.182617, 12.731144, -7.200000, 0.000000, 90.199996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1696, 3028.958007, 2136.702392, 12.731144, -7.200000, 0.000000, 90.199996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19321, 3045.169433, 2155.205810, 13.777123, 0.000000, 0.000000, -89.800018, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19321, 3045.186767, 2149.974609, 13.777123, 0.000000, 0.000000, -89.800018, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19321, 3045.204345, 2145.153808, 13.777123, 0.000000, 0.000000, -89.800018, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2991, 3046.497070, 2155.273681, 12.947132, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2991, 3046.497070, 2149.912353, 12.947132, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2991, 3046.497070, 2145.100585, 12.947132, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2973, 3043.243652, 2155.173828, 12.257118, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2973, 3043.243652, 2149.902587, 12.257118, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2973, 3043.243652, 2145.121337, 12.257118, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1388, 3004.874511, 2123.774169, 73.483650, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19121, 3026.418701, 2134.204833, 13.996962, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19121, 3026.418701, 2150.635986, 13.996962, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19121, 3000.487548, 2112.972656, 13.936826, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19121, 3000.487548, 2107.821777, 13.936826, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19121, 2937.390136, 2108.197265, 14.003088, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19121, 2937.390136, 2118.097412, 14.003088, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19121, 2857.175781, 2105.287353, 10.330308, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19121, 2857.175781, 2120.767822, 10.330308, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(3242, 2862.104492, 2085.914062, 11.740302, 0.000000, 0.000000, -90.800033, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(8068, 2868.646240, 2055.137207, 16.336736, 0.000000, 0.000000, 179.899963, -1, -1, -1, 400.00, 400.00);

    //Peaje LV-LS by 0vi3d0
    tmpobjid = CreateDynamicObject(9623, 1752.716552, 535.296875, 28.601764, -3.500000, 0.000000, -18.699996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(9623, 1735.543334, 541.109252, 28.601764, -3.500000, 0.000000, -18.699996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1740.684204, 524.672058, 27.705011, 0.000000, -2.599998, -108.500015, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1737.720581, 515.814270, 28.129142, 0.000000, -2.599998, -108.500015, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1734.649536, 507.360198, 28.537862, 0.000000, -2.599998, -111.499984, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1738.355468, 525.465942, 27.472816, 0.000000, 3.199997, 70.899955, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1735.310058, 516.672790, 27.993082, 0.000000, 3.199997, 70.899955, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1732.287719, 507.945953, 28.509435, 0.000000, 3.199997, 70.899955, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1749.560058, 551.485961, 25.898653, 0.000000, -3.199999, -107.500045, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1747.547973, 552.118408, 25.898653, 0.000000, 3.200000, 71.299972, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1748.054565, 521.704467, 27.581464, 0.000000, 2.699999, 82.400001, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1748.054565, 521.704467, 27.581464, 0.000000, -3.099998, -97.499946, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1745.952270, 512.688293, 28.021444, 0.000000, 2.699999, 71.500083, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1745.974243, 512.694580, 28.049312, 0.000000, -3.099998, -108.299972, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, 1744.365722, 508.004455, 27.769775, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1740.272949, 555.158752, 25.869922, 0.000000, -3.499999, -109.000030, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1740.269531, 555.146118, 25.879867, 0.000000, 3.499999, 71.000015, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1743.071166, 564.051452, 25.299118, 0.000000, -3.499999, -106.000076, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1743.083374, 564.083312, 25.306619, 0.000000, 3.499999, 74.099975, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, 1744.426147, 568.797119, 24.060379, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(966, 1734.235473, 541.585510, 26.189989, 0.000000, 0.000000, -20.000003, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(966, 1742.702880, 538.504211, 25.929985, 0.000000, 0.000000, -20.000003, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(966, 1744.758789, 537.627746, 26.489990, 0.000000, 0.000000, 159.499954, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(966, 1753.375976, 534.405822, 26.019981, 0.000000, 0.000000, 159.499954, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1723.662353, 530.946594, 27.572086, 0.000000, -2.599998, -106.899971, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1720.956787, 522.038696, 27.994855, 0.000000, -2.599998, -106.899971, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 1718.423461, 513.064208, 28.418546, 0.000000, -2.599998, -104.599990, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, 1717.275512, 508.234466, 28.029781, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19124, 1758.236572, 523.849914, 27.694355, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19124, 1749.256103, 526.770263, 27.694355, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19124, 1739.808593, 530.044189, 27.023134, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19124, 1742.298461, 529.084594, 27.023134, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19124, 1732.167968, 532.722290, 27.499675, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19124, 1724.007446, 535.712341, 27.499675, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19124, 1764.079223, 541.028991, 26.625307, 0.000000, 0.000000, -18.599994, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19124, 1755.094482, 544.052795, 26.625307, 0.000000, 0.000000, -18.599994, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19124, 1748.250122, 546.852355, 25.915298, 0.000000, 0.000000, -18.599994, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19124, 1745.795532, 547.678527, 25.915298, 0.000000, 0.000000, -18.599994, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19124, 1737.968383, 549.942993, 26.565303, 0.000000, 0.000000, -18.599994, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19124, 1729.770263, 552.702026, 26.565303, 0.000000, 0.000000, -18.599994, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19987, 1687.208129, 332.797882, 29.926355, 0.000000, 0.000000, -21.200006, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19987, 1674.640502, 337.671539, 29.926355, 0.000000, 0.000000, -21.200006, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19985, 1730.937133, 441.601226, 31.136846, 0.000000, 0.000000, -20.300003, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19985, 1712.414428, 448.453155, 30.746837, 0.000000, 0.000000, -20.300003, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19982, 1744.384399, 507.991149, 28.764949, 0.000000, 0.000000, -19.699995, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19987, 1788.730224, 711.555053, 14.607570, 0.000000, 0.000000, 172.199966, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19987, 1769.322265, 714.213684, 14.677574, 0.000000, 0.000000, 172.199966, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19985, 1748.620361, 619.012878, 21.495073, 0.000000, 0.000000, 164.999984, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19985, 1767.485351, 613.957885, 21.225067, 0.000000, 0.000000, 164.999984, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19982, 1744.443481, 568.790405, 25.060941, 0.000000, 0.000000, 162.699935, -1, -1, -1, 400.00, 400.00);

    //Peaje LS-SF
    tmpobjid = CreateDynamicObject(973, 80.372261, -1519.696777, 4.410236, 0.000000, 0.000000, -156.099990, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 75.229537, -1547.899414, 5.333656, 0.000000, -1.500000, -8.199997, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 84.470886, -1549.230590, 5.578152, 0.000000, -1.500000, -8.199997, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 93.737701, -1550.565795, 5.913122, 0.000000, -2.699999, -8.199997, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 102.571968, -1553.060546, 6.553586, 0.000000, -5.200000, -23.299995, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 111.060066, -1556.715576, 7.394659, 0.000000, -5.200000, -23.299995, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 119.111457, -1561.159912, 8.241172, 0.000000, -5.200000, -34.599979, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 126.587455, -1566.617919, 9.144379, 0.000000, -5.700000, -37.699962, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 108.274848, -1524.443725, 7.055889, 0.000000, 3.200000, 147.300003, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 116.497390, -1528.627807, 7.579495, 0.000000, 3.200000, 158.700012, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 125.215805, -1532.026733, 8.051859, 0.000000, 2.500000, 158.700012, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 133.572448, -1536.136718, 8.461881, 0.000000, 2.500000, 148.999969, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 141.538787, -1540.922973, 9.087718, 0.000000, 5.099999, 148.999969, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 148.077774, -1539.544311, 9.823581, 0.000000, 5.299999, -125.399993, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 94.395011, -1537.650512, 5.604259, 0.000000, -1.399999, -8.699997, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 85.215591, -1536.245117, 5.347298, 0.000000, -1.899999, -8.699997, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 75.998352, -1534.834960, 5.027965, 0.000000, -1.899999, -8.699997, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19966, 99.060485, -1538.260620, 4.942662, 0.000000, 0.000000, 81.599998, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, 71.075248, -1533.992675, 4.135564, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, 69.935249, -1533.992675, 4.055563, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, 68.745269, -1533.992675, 4.055564, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(8168, 64.128623, -1533.452636, 5.996323, 0.000000, 0.000000, -172.299926, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(974, 57.764785, -1529.818847, 5.148458, 0.000000, 0.000000, -10.600000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(974, 51.208618, -1528.592163, 5.148458, 0.000000, 0.000000, -10.600000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(974, 44.625564, -1527.402221, 5.148458, 0.000000, 0.000000, -9.999998, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(8168, 37.362167, -1528.985595, 6.276326, 0.000000, 0.000000, 8.900090, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(974, 43.891132, -1532.833984, 5.330661, 0.000000, 0.000000, -12.300002, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(974, 50.482944, -1534.026245, 5.330661, 0.000000, 0.000000, -7.899998, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(974, 56.909973, -1534.928344, 5.330661, 0.000000, 0.000000, -7.899998, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, 33.275253, -1526.501953, 4.275561, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, 33.125267, -1527.651977, 4.275561, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, 33.005275, -1528.871948, 4.275561, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, 41.345870, -1533.880126, 4.275561, 0.000000, 0.000000, -11.999999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 28.069164, -1527.287719, 4.714407, 0.000000, -2.900000, -11.399999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 18.905580, -1525.439697, 4.240860, 0.000000, -2.900000, -11.399999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 9.785890, -1523.600708, 3.599475, 0.000000, -5.000000, -11.399999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 0.637329, -1521.756347, 2.923451, 0.000000, -3.400001, -11.399999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, -8.470555, -1519.777587, 2.369532, 0.000000, -3.400001, -13.100000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, -13.337980, -1518.631591, 1.145562, 0.000000, 0.000000, -10.200000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, -14.400907, -1518.439086, 1.145562, 0.000000, 0.000000, -10.200000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19966, -15.006057, -1518.315795, 0.930312, 0.000000, 0.000000, -97.999992, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 25.348604, -1539.582153, 4.577405, 0.000000, -2.500000, -23.399997, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 16.824693, -1535.893798, 4.001831, 0.000000, -4.499999, -23.399997, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 8.287249, -1532.308349, 3.272945, 0.000000, -4.499999, -22.199998, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, -0.252614, -1528.942138, 2.550337, 0.000000, -4.499999, -20.699998, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, -8.987892, -1526.153320, 2.006389, 0.000000, -2.099999, -14.899999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, -15.977049, -1528.730834, 1.978964, 0.000000, 2.100000, 57.699993, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 30.350717, -1516.561645, 4.715232, 0.000000, 3.799999, 175.100036, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 21.045425, -1515.763916, 4.094907, 0.000000, 3.799999, 175.100036, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 11.809726, -1514.972167, 3.479221, 0.000000, 3.799999, 175.100036, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, 2.615732, -1514.073852, 2.865525, 0.000000, 3.799999, 173.800018, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, -6.550026, -1513.078125, 2.253154, 0.000000, 3.799999, 173.800018, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, -15.790003, -1512.074462, 1.756047, 0.000000, 2.299999, 173.800018, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(973, -24.235078, -1509.047363, 1.793796, 0.000000, -2.800000, 146.699996, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(966, 60.772621, -1528.876953, 4.036273, 0.000000, 0.000000, -94.300033, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, 60.693462, -1529.680541, 4.055564, 0.000000, 0.000000, -6.900000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, 61.307350, -1521.444580, 4.055564, 0.000000, 0.000000, -6.900000, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(966, 41.210826, -1534.666381, 4.241883, 0.000000, 0.000000, 83.400016, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, 41.532981, -1533.000122, 4.275561, 0.000000, 0.000000, -11.999999, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1237, 40.372238, -1542.127075, 4.275561, 0.000000, 0.000000, -3.199998, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19982, -32.205905, -1524.345703, 1.012106, 0.000000, 0.000000, -108.299995, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19982, 144.864471, -1544.547363, 8.635385, 0.000000, 0.000000, 35.099983, -1, -1, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(19982, 133.472457, -1555.049194, 8.425384, 0.000000, 0.000000, 66.999992, -1, -1, -1, 400.00, 400.00);

    //Interior UBER
    tmpobjid = CreateDynamicObject(19538, 1139.388671, 1286.345092, 9.882112, 0.000000, 0.000000, -89.999977, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-90-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19538, 1139.388671, 1286.345092, 16.052106, 0.000000, 0.000000, -89.999977, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 19597, "lsbeachside", "ceilingtiles4-128x128", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1169.789306, 1297.538696, 11.492113, 0.000000, 0.000000, 0.000000, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-10-percent", 0xFFFFCC66);
    tmpobjid = CreateDynamicObject(19454, 1169.789306, 1297.538696, 14.982110, 0.000000, 0.000000, 0.000000, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-10-percent", 0xFFFFCC66);
    tmpobjid = CreateDynamicObject(19454, 1169.789306, 1287.909179, 11.492113, 0.000000, 0.000000, 0.000000, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-10-percent", 0xFFFFCC66);
    tmpobjid = CreateDynamicObject(19454, 1169.789306, 1287.909179, 15.002113, 0.000000, 0.000000, 0.000000, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-10-percent", 0xFFFFCC66);
    tmpobjid = CreateDynamicObject(19454, 1164.910766, 1287.257324, 11.492113, 0.000000, 0.000000, -89.899978, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-10-percent", 0xFFFFCC66);
    tmpobjid = CreateDynamicObject(19454, 1164.910766, 1287.257324, 15.002117, 0.000000, 0.000000, -89.899978, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-10-percent", 0xFFFFCC66);
    tmpobjid = CreateDynamicObject(19454, 1164.895263, 1296.526733, 11.492113, 0.000000, 0.000000, -89.899978, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-10-percent", 0xFFFFCC66);
    tmpobjid = CreateDynamicObject(19454, 1164.895263, 1296.526733, 14.962113, 0.000000, 0.000000, -89.899978, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-10-percent", 0xFFFFCC66);
    tmpobjid = CreateDynamicObject(19454, 1160.219238, 1297.538696, 11.492113, 0.000000, 0.000000, 0.000000, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-90-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1160.219238, 1297.538696, 14.972112, 0.000000, 0.000000, 0.000000, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-90-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1160.219238, 1287.928833, 11.492113, 0.000000, 0.000000, 0.000000, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-90-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19454, 1160.219238, 1287.928833, 14.942113, 0.000000, 0.000000, 0.000000, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-90-percent", 0x00000000);
    tmpobjid = CreateDynamicObject(19327, 1160.334716, 1290.805541, 13.452108, 0.000000, 0.000000, 90.099975, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF}UB", 20, "Ariel", 40, 1, 0x00000000, 0x00000000, 1);
    tmpobjid = CreateDynamicObject(19327, 1160.332153, 1292.566040, 13.452108, 0.000000, 0.000000, 90.099975, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF}ER", 20, "Ariel", 40, 1, 0x00000000, 0x00000000, 1);
    tmpobjid = CreateDynamicObject(19327, 1160.310791, 1293.025512, 12.442105, 0.000000, 0.000000, 90.099975, 20, 9, -1, 400.00, 400.00);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{FFFFFF}North America", 40, "Ariel", 25, 1, 0x00000000, 0x00000000, 1);
    tmpobjid = CreateDynamicObject(1537, 1169.678588, 1290.409667, 9.882112, 0.000000, 0.000000, -89.800003, 20, 9, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1537, 1169.673706, 1291.889282, 9.882112, 0.000000, 0.000000, -89.800003, 20, 9, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(2173, 1164.303588, 1292.522460, 9.882112, 0.000000, 0.000000, -89.700012, 20, 9, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1811, 1165.593872, 1291.022094, 10.432111, 0.000000, 0.000000, -17.899999, 20, 9, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1811, 1165.538818, 1292.965698, 10.432111, 0.000000, 0.000000, 22.099994, 20, 9, -1, 400.00, 400.00);
    tmpobjid = CreateDynamicObject(1715, 1163.068847, 1292.312133, 9.882112, 0.000000, 0.000000, 64.199989, 20, 9, -1, 400.00, 400.00);
	return 1;
}

forward CreateObjectEx(modelid, Float: X, Float: Y, Float: Z, Float: rX, Float: rY, Float: rZ, Float: DrawDistance);
public CreateObjectEx(modelid, Float: X, Float: Y, Float: Z, Float: rX, Float: rY, Float: rZ, Float: DrawDistance)
{
	return CreateObject(modelid, X, Y, Z, rX, rY, rZ, DrawDistance);
}

CMD:uber(playerid,params[])
{
    if(InfoJugador[playerid][jLicencias][6] == 0)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No posees una licencia de Uber.");
	new vehicleid = GetPlayerVehicleID(playerid);
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres el conductor.");
	new id = verificar_id_vehiculo(vehicleid);
	if (id == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo no figura ningun propietario.");
	if (llaves_vehiculo(playerid, vehicleid) == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes las llaves de este vehiculo.");
	if (EnServicioUber[playerid] != 0)
	{
		InfoVehiculo[id][vUberService] = 0;
		EnServicioUber[playerid] = 0;
		SendClientMessageEx(playerid, 0xCCCC00FF, "Ahora estas fuera de servicio uber.");
		return 1;
	}
	new str[190];
	format(str, sizeof str, "[Uber] %s se encuentra en servicio usa /telefono -> Uber", GetVehicleName(vehicleid));
	_MensajeOOC(0x6e8f99FF, str);
	format(str, sizeof str, "Administracion: %s(%d) Uber servicio.", NombreRJugador(playerid), playerid);
	MensajeAdmin(str);
	InfoVehiculo[id][vUberService] = 1;
	EnServicioUber[playerid] = 1;
	return 1;
}

CMD:auber(playerid,params[])
{
    if(InfoJugador[playerid][jLicencias][6] == 0)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No posees una licencia de Uber.");
	new vehicleid = GetPlayerVehicleID(playerid);
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres el conductor.");
	new id = verificar_id_vehiculo(vehicleid);
	if (id == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo no figura ningun propietario.");
	if (llaves_vehiculo(playerid, vehicleid) == -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes las llaves de este vehiculo.");
	if (InfoVehiculo[id][vUberService] == 0)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No te encuentras en servicio UBER.");
	if (EnServicioUber[playerid] == 0)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No te encuentras en servicio UBER.");
	if (sscanf(params, "d", params[0])) return _Mensaje(playerid, 3, "0", "/auber [id jugador]");
	if (PeticionUber[params[0]] == 0)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este usuario no ha solicitado un uber.");
	if (PeticionUber[params[0]] == 2)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya fue aceptada la peticion.");
	new Float:F[3];
	GetPlayerPos(params[0],F[0],F[1],F[2]);
	PeticionUber[params[0]] = 2;
	_MarcarPos(playerid, F[0],F[1],F[2], "Se ha marcado la ubicacion de la peticion.");
	SendClientMessageEx(params[0], 0x6e8f99ff, "El uber %s se encuentra en camino", NombreRJugador(playerid));
	return 1;
}

CMD:suber(playerid,params[])
{
	if (PeticionUber[playerid] != 2) return 1;
	if (sscanf(params, "dd", params[0], params[1])) return _Mensaje(playerid, 3, "0", "/suber [id jugador] [precioapagar]");
	if (GetPlayerCash(playerid) >= params[1])
	{
		Loop(id, totalvehiculos, 1) if (IsPlayerInVehicle(params[0], InfoVehiculo[id][vDL]) && strcmp(InfoJugador[params[0]][jNombre_Apellido], InfoVehiculo[id][vPropietario], true) == 0 && InfoVehiculo[id][vFamilia] == 0)
		{
			if (InfoVehiculo[id][vUberService] == 0)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este vehiculo no se encuentra en servicio.");
			if (EnServicioUber[params[0]] == 0)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este usuario no se encuentra en servicio uber.");
			SendClientMessageEx(params[0], 0x6e8f99ff, "[Uber] %s a comenzado a buscar el destino en el mapa.", NombreRJugador(playerid));
			PeticionUber[playerid] = 3;
			PeticionUberTransportador[playerid] = params[0];
			PeticionUberPrecio[playerid] = params[1];
			return 1;
		}
		ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes este vehiculo a tu nombre.");
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	#if DEBUG_GM == 1
    	printf("(OnPlayerClickMap2) PlayerID: %d", playerid);
	#endif

	if(InfoJugador[playerid][jAdmin] > 2)
 	{
		if(GetPlayerState(playerid) == 2) return SetVehiclePos(GetPlayerVehicleID(playerid), fX, fY, fZ);
		else SetPlayerPosEx(playerid, fX, fY, fZ);
	}




    if(PeticionUber[playerid] == 3)
    {
        new str[128];
        format(str,sizeof(str),"%s te mando la ubicacion por GPS(%s) por el precio $%d",NombreRJugador(playerid),GetPlayerNameZone(playerid),PeticionUberPrecio[playerid]);
        PeticionDinero[PeticionUberTransportador[playerid]] = PeticionUberPrecio[playerid];
        PeticionCorde[PeticionUberTransportador[playerid]][0] = fX;
        PeticionCorde[PeticionUberTransportador[playerid]][1] = fY;
        PeticionCorde[PeticionUberTransportador[playerid]][2] = fZ;
        PeticionUsuarioMando[PeticionUberTransportador[playerid]] = playerid;
        ShowPlayerDialog(PeticionUberTransportador[playerid], D_UBER, DIALOG_STYLE_MSGBOX, "{D6E1EB}Uber", str, "Aceptar", "Cancelar");
        return 1;
    }
    return 1;
}





DevolverTiendaToy(playerid)
{
	if (RanuraSeleccionada[playerid] != -1) RemovePlayerAttachedObject(playerid, RanuraSeleccionada[playerid]);
	Loop(x, 21, 0) { TextDrawHideForPlayer(playerid, TD_MenuToy[x]); }
	PlayerTextDrawHide(playerid, MenuToy_TD[playerid][0]);
	PlayerTextDrawHide(playerid, MenuToy_TD[playerid][1]);
	CancelSelectTextDraw(playerid);
	SetPosEx(playerid, NegocioPos[playerid][0], NegocioPos[playerid][1], NegocioPos[playerid][2], NegocioPos[playerid][3], NegocioInt[playerid], NegocioVW[playerid], 1);
	Loop(x, 6, 0) { PlayerTextDrawShow(playerid, TD_PantallaHG[playerid][x]); }
	PlayerTextDrawShow(playerid, InfoInferior[playerid]);
	ShowPlayerProgressBar(playerid, BarraExp[playerid]);
	ShowPlayerProgressBar(playerid, BarraSed[playerid]);
	ShowPlayerProgressBar(playerid, BarraHambre[playerid]);
	ActualizarHambre(playerid);
	ActualizarSed(playerid);
	Actualizar(playerid);
    TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
	TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
	Ropa_ID[playerid] = 0;
	IDcameraToy[playerid] = 1;
	SetCameraBehindPlayer(playerid);
	if (RanuraSeleccionada[playerid] != -1)
	{
		new toy = RanuraSeleccionada[playerid];
		if (InfoJugador[playerid][aColocado][toy] != 0)
		{
			SetPlayerAttachedObject(playerid, toy, InfoJugador[playerid][aModelo][toy], InfoJugador[playerid][aHueso][toy], InfoJugador[playerid][aPosicionX][toy], InfoJugador[playerid][aPosicionY][toy], InfoJugador[playerid][aPosicionZ][toy],
			InfoJugador[playerid][aRotacionX][toy], InfoJugador[playerid][aRotacionY][toy], InfoJugador[playerid][aRotacionZ][toy], InfoJugador[playerid][aEscalaX][toy], InfoJugador[playerid][aEscalaY][toy], InfoJugador[playerid][aEscalaZ][toy], SetColorToy(InfoJugador[playerid][aColor][toy]));
		}
	}
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	//inventario
	if (Act_Inventario[playerid] != 0)
	{
		//esc
		if (Text:INVALID_TEXT_DRAW == clickedid)
		{
			SetPlayerInventario(playerid, 2);
			CancelSelectTextDraw(playerid);
			return 1;
		}
		//exit
		if (clickedid == INV_exit)
		{
			SetPlayerInventario(playerid, 2);
			CancelSelectTextDraw(playerid);
		}
	}
	//compra de accesorios
	if (Toy_ID[playerid] != -1)
	{
		//esc o/y salir
		if (Text:INVALID_TEXT_DRAW == clickedid || clickedid == BuyToy[4])
		{
			Loop(x, 5, 0) { TextDrawHideForPlayer(playerid, BuyToy[x]); }
			PlayerTextDrawHide(playerid, ToyBuy[playerid]);
			CancelSelectTextDraw(playerid);
			SetPosEx(playerid, NegocioPos[playerid][0], NegocioPos[playerid][1], NegocioPos[playerid][2], NegocioPos[playerid][3], NegocioInt[playerid], NegocioVW[playerid], 1);
	 		Loop(x, 6, 0) { PlayerTextDrawShow(playerid, TD_PantallaHG[playerid][x]); }
	 		PlayerTextDrawShow(playerid, InfoInferior[playerid]);
			ShowPlayerProgressBar(playerid, BarraExp[playerid]);
			ShowPlayerProgressBar(playerid, BarraSed[playerid]);
			ShowPlayerProgressBar(playerid, BarraHambre[playerid]);
			ActualizarHambre(playerid);
			ActualizarSed(playerid);
			Actualizar(playerid);
			TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
			TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
			SendClientMessage(playerid, 0x8080FFFF, "Saliste del catalogo de accesorios.");
			Toy_ID[playerid] = -1;
			SetCameraBehindPlayer(playerid);
			if (IsValidPlayerObject(playerid, ToyObject[playerid]))
			{
				DestroyPlayerObject(playerid, ToyObject[playerid]);
				ToyObject[playerid] = INVALID_OBJECT_ID;
			}
			return 1;
		}
		//anterior
		if (clickedid == BuyToy[1])
		{
			Toy_ID[playerid]--;
			if (Toy_ID[playerid] == -1) Toy_ID[playerid] = 175;
			//precio
			new	gformat[128];
			format(gformat, sizeof gformat, "~b~~h~%s~n~~w~~h~~h~Precio: ~g~~h~%d$", NameToyObject(InfoToi[Toy_ID[playerid]][tModelo]), GetPriceToy(InfoToi[Toy_ID[playerid]][tModelo]));
			PlayerTextDrawSetString(playerid, ToyBuy[playerid], gformat);
			if (IsValidPlayerObject(playerid, ToyObject[playerid]))
			{
				DestroyPlayerObject(playerid, ToyObject[playerid]);
				ToyObject[playerid] = INVALID_OBJECT_ID;
			}
			CreateShowToy(playerid, InfoToi[Toy_ID[playerid]][tModelo]);
			return 1;
		}
		//siguiente
		if (clickedid == BuyToy[2])
		{
			Toy_ID[playerid]++;
			if (Toy_ID[playerid] == 176) Toy_ID[playerid] = 0;
			//precio
			new	gformat[128];
			format(gformat, sizeof gformat, "~b~~h~%s~n~~w~~h~~h~Precio: ~g~~h~%d$", NameToyObject(InfoToi[Toy_ID[playerid]][tModelo]), GetPriceToy(InfoToi[Toy_ID[playerid]][tModelo]));
			PlayerTextDrawSetString(playerid, ToyBuy[playerid], gformat);
			if (IsValidPlayerObject(playerid, ToyObject[playerid]))
			{
				DestroyPlayerObject(playerid, ToyObject[playerid]);
				ToyObject[playerid] = INVALID_OBJECT_ID;
			}
			CreateShowToy(playerid, InfoToi[Toy_ID[playerid]][tModelo]);
			return 1;
		}
		//comprar
		if (clickedid == BuyToy[3])
		{
			new id = DentroNegocio[playerid];
			if (id == -1) return SendClientMessage(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
			new newtoy = InfoToi[Toy_ID[playerid]][tModelo], precio = GetPriceToy(InfoToi[Toy_ID[playerid]][tModelo]), toy = -1;
			Loop(x, 5, 0) if (InfoJugador[playerid][aModelo][x] == 0)
			{
				toy = x;
				break;
			}
			if (toy == -1) return SendClientMessage(playerid, 0xccccccff, "* No tienes donde guardar este accesorio.");
			if (GetPlayerCash(playerid) < precio) return SendClientMessageEx(playerid, 0xccccccff, "* No tienes %d$ para pagar el accesorio %s.", precio, NameToyObject(newtoy));
			if (IsValidPlayerObject(playerid, ToyObject[playerid]))
			{
				DestroyPlayerObject(playerid, ToyObject[playerid]);
				ToyObject[playerid] = INVALID_OBJECT_ID;
			}
			SendClientMessageEx(playerid, 0x8080FFFF, "Compraste el accesorio %s por %d$. Revisa en tu /accesorios.", NameToyObject(newtoy), precio);
			InfoJugador[playerid][aModelo][toy] = newtoy;
			InfoJugador[playerid][aHueso][toy] = 1;
			InfoJugador[playerid][aPosicionX][toy] = 0.0;
			InfoJugador[playerid][aPosicionY][toy] = 0.0;
			InfoJugador[playerid][aPosicionZ][toy] = 0.0;
			InfoJugador[playerid][aRotacionX][toy] = 0.0;
			InfoJugador[playerid][aRotacionY][toy] = 0.0;
			InfoJugador[playerid][aRotacionZ][toy] = 0.0;
			InfoJugador[playerid][aEscalaX][toy] = 1;
			InfoJugador[playerid][aEscalaY][toy] = 1;
			InfoJugador[playerid][aEscalaZ][toy] = 1;
			ActualizarToy(playerid, toy);
			GivePlayerCash(playerid, -precio, "toy negocio");
			RestarNegocio(id, precio);
			//remove textdraws
			Loop(x, 5, 0) { TextDrawHideForPlayer(playerid, BuyToy[x]); }
			PlayerTextDrawHide(playerid, ToyBuy[playerid]);
			CancelSelectTextDraw(playerid);
			SetPosEx(playerid, NegocioPos[playerid][0], NegocioPos[playerid][1], NegocioPos[playerid][2], NegocioPos[playerid][3], NegocioInt[playerid], NegocioVW[playerid], 1);

			Loop(x, 6, 0) { PlayerTextDrawShow(playerid, TD_PantallaHG[playerid][x]); }
			ShowPlayerProgressBar(playerid, BarraExp[playerid]);
			ShowPlayerProgressBar(playerid, BarraSed[playerid]);
			ShowPlayerProgressBar(playerid, BarraHambre[playerid]);
			PlayerTextDrawShow(playerid, InfoInferior[playerid]);
			ActualizarHambre(playerid);
			ActualizarSed(playerid);
			Actualizar(playerid);
			TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
			TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
			Toy_ID[playerid] = -1;
			SetCameraBehindPlayer(playerid);
			DentroNegocio[playerid] = -1;
			return 1;
		}
	}

    //login por textdraw by BERNAL
    if(clickedid == LoginTD[8]){
			new lobby[512], title[50];
			format(lobby, sizeof lobby, "{FFFFFF}Ingresa tu contraseña para iniciar sesion.");
			format(title, sizeof title, "{FFFFFF}Hola,{008BFF} %s", InfoJugador[playerid][jNombre_Apellido]);
			Dialog_Show(playerid, ShowIngreso, DIALOG_STYLE_PASSWORD, title, lobby, "Aceptar", "Cancelar");
			reg_int(0, "Dinero", InfoJugador[playerid][jDinero]);
            TextDrawHideForPlayer(playerid, LoginTD[0]);
            TextDrawHideForPlayer(playerid, LoginTD[1]);
			TextDrawHideForPlayer(playerid, LoginTD[2]);
			TextDrawHideForPlayer(playerid, LoginTD[3]);
			TextDrawHideForPlayer(playerid, LoginTD[4]);
			TextDrawHideForPlayer(playerid, LoginTD[5]);
			TextDrawHideForPlayer(playerid, LoginTD[6]);
			TextDrawHideForPlayer(playerid, LoginTD[7]);
			TextDrawHideForPlayer(playerid, LoginTD[8]);
			TextDrawHideForPlayer(playerid, LoginTD[9]);
			TextDrawHideForPlayer(playerid, LoginTD[10]);
			TextDrawHideForPlayer(playerid, LoginTD[11]);
			TextDrawHideForPlayer(playerid, LoginTD[12]);
			TextDrawHideForPlayer(playerid, LoginTD[13]);
			TextDrawHideForPlayer(playerid, LoginTD[14]);
			TextDrawHideForPlayer(playerid, LoginTD[15]);
			PlayerTextDrawHide(playerid, nombrelogin[playerid]);
			CancelSelectTextDraw(playerid);
    }
	if(clickedid == LoginTD[12]){
			new lobby[512], title[50];
			if (ActRegistro == 0) return _Expulsar(playerid, 1, "Registro deshabilitado");
			format(lobby, sizeof lobby, "{FFFFFF}Registra una contraseña continuar con tu registro.");
			new name[50 + MAX_PLAYER_NAME];
			GetPlayerName(playerid, name, sizeof(name));
			format(title, sizeof title, "{FFFFFF}Bienvenido,{008BFF} %s", name);
			Dialog_Show(playerid, ShowRegistro, DIALOG_STYLE_PASSWORD, title, lobby, "Aceptar", "Cancelar");
            TextDrawHideForPlayer(playerid, LoginTD[0]);
            TextDrawHideForPlayer(playerid, LoginTD[1]);
			TextDrawHideForPlayer(playerid, LoginTD[2]);
			TextDrawHideForPlayer(playerid, LoginTD[3]);
			TextDrawHideForPlayer(playerid, LoginTD[4]);
			TextDrawHideForPlayer(playerid, LoginTD[5]);
			TextDrawHideForPlayer(playerid, LoginTD[6]);
			TextDrawHideForPlayer(playerid, LoginTD[7]);
			TextDrawHideForPlayer(playerid, LoginTD[8]);
			TextDrawHideForPlayer(playerid, LoginTD[9]);
			TextDrawHideForPlayer(playerid, LoginTD[10]);
			TextDrawHideForPlayer(playerid, LoginTD[11]);
			TextDrawHideForPlayer(playerid, LoginTD[12]);
			TextDrawHideForPlayer(playerid, LoginTD[13]);
			TextDrawHideForPlayer(playerid, LoginTD[14]);
			TextDrawHideForPlayer(playerid, LoginTD[15]);
			PlayerTextDrawHide(playerid, nombrelogin[playerid]);
			CancelSelectTextDraw(playerid);
			
	}
	if(clickedid==LoginTD[10]){
		new lobby[512], title[50];
		format(lobby, sizeof lobby, "%s{FFFFFF}Si olvidaste la contraseña tu cuenta puedes abrir ticket\nen el{386FD6} Discord {FFFFFF}del servidor {386FD6}https://discord.io/New Word{FFFFFF}\ndeberás solicitar la recuperacion de cuenta ahi.");
		format(title, sizeof title, "Hola {386FD6}%s", InfoJugador[playerid][jNombre_Apellido]);
		ShowPlayerDialog(playerid, 7421, DIALOG_STYLE_MSGBOX, title, lobby, "{386FD6}Aceptar", "" );
    }
    if(clickedid == LoginTD[14]){
		new query[170], create = 0, Cache:result;
		mysql_format(DBngrp, query, sizeof query, "SELECT * FROM cuentas WHERE ID = '%d'", InfoJugador[playerid][jID]);
		result = mysql_query(DBngrp, query);
		if (cache_num_rows() > 0)
		{
			reg_string(0, "Email", InfoJugador[playerid][jEmail], 256);
			reg_string(0, "IP", InfoJugador[playerid][jIP], 18);
			reg_int(0, "JuegaleOwo", InfoJugador[playerid][jAdmin]);
			reg_int(0, "Encargado_1", InfoJugador[playerid][jEncargado][0]);
			reg_int(0, "Encargado_2", InfoJugador[playerid][jEncargado][1]);
			reg_int(0, "Encargado_3", InfoJugador[playerid][jEncargado][2]);
			reg_int(0, "Encargado_4", InfoJugador[playerid][jEncargado][3]);
			reg_int(0, "Encargado_5", InfoJugador[playerid][jEncargado][4]);
			reg_int(0, "Encargado_6", InfoJugador[playerid][jEncargado][5]);
			reg_int(0, "Encargado_7", InfoJugador[playerid][jEncargado][6]);
			reg_string(0, "FechaRegistro", InfoJugador[playerid][jFechaRegistro], 256);
			reg_string(0, "UltimaConexion", InfoJugador[playerid][jUltimaConexion], 256);
			reg_float(0, "PosicionX", InfoJugador[playerid][jPosicionX]);
			reg_float(0, "PosicionY", InfoJugador[playerid][jPosicionY]);
			reg_float(0, "PosicionZ", InfoJugador[playerid][jPosicionZ]);
			reg_float(0, "PosicionR", InfoJugador[playerid][jPosicionR]);
			reg_int(0, "Interior", InfoJugador[playerid][jInterior]);
			reg_int(0, "VirtualWorld", InfoJugador[playerid][jVirtualWorld]);
			reg_float(0, "Vida", InfoJugador[playerid][jVida]);
			reg_float(0, "Chaleco", InfoJugador[playerid][jChaleco]);
			reg_int(0, "Skin", InfoJugador[playerid][jSkin]);
			reg_int(0, "Ropa1", InfoJugador[playerid][jRopa][0]);
			reg_int(0, "Ropa2", InfoJugador[playerid][jRopa][1]);
			reg_int(0, "Ropa3", InfoJugador[playerid][jRopa][2]);
			reg_int(0, "Ropa4", InfoJugador[playerid][jRopa][3]);
			reg_int(0, "Ropa5", InfoJugador[playerid][jRopa][4]);
			reg_int(0, "Ropa6", InfoJugador[playerid][jRopa][5]);
			reg_int(0, "Ropa7", InfoJugador[playerid][jRopa][6]);
			reg_int(0, "Ropa8", InfoJugador[playerid][jRopa][7]);
			reg_int(0, "Nivel", InfoJugador[playerid][jNivel]);
			reg_int(0, "Experiencia", InfoJugador[playerid][jExperiencia]);
			reg_int(0, "HorasConectado", InfoJugador[playerid][jHorasConectado]);
			reg_int(0, "Sexo", InfoJugador[playerid][jSexo]);
			reg_int(0, "Edad", InfoJugador[playerid][jEdad]);
			reg_int(0, "Ciudad", InfoJugador[playerid][jCiudad]);
			reg_int(0, "Estilo", InfoJugador[playerid][jEstilo]);
			reg_int(0, "Pelea", InfoJugador[playerid][jPelea]);
			reg_int(0, "Sed", InfoJugador[playerid][jSed]);
			reg_int(0, "Hambre", InfoJugador[playerid][jHambre]);
			reg_int(0, "Alcohol", InfoJugador[playerid][jAlcohol]);
			reg_int(0, "Fuerza", InfoJugador[playerid][jFuerza]);
			reg_int(0, "Dinero", InfoJugador[playerid][jDinero]);
			reg_int(0, "Banco", InfoJugador[playerid][jBanco]);
			reg_int (0, "dutypd", InfoJugador[playerid][jDutyPD]);
			reg_int(0, "FacLider", InfoJugador[playerid][jFacLider]);
			reg_int(0, "FacMiembro", InfoJugador[playerid][jFacMiembro]);
			reg_int(0, "FacRango", InfoJugador[playerid][jFacRango]);
			reg_int(0, "FamLider", InfoJugador[playerid][jFamLider]);
			reg_int(0, "FamMiembro", InfoJugador[playerid][jFamMiembro]);
			reg_int(0, "FamRango", InfoJugador[playerid][jFamRango]);
			reg_int(0, "Bolsillo_1", InfoJugador[playerid][jBolsillo][0]);
			reg_int(0, "Cantidad_bolsillo_1", InfoJugador[playerid][jBolsilloCant][0]);
			reg_int(0, "Bolsillo_2", InfoJugador[playerid][jBolsillo][1]);
			reg_int(0, "Cantidad_bolsillo_2", InfoJugador[playerid][jBolsilloCant][1]);
			reg_int(0, "Bolsillo_3", InfoJugador[playerid][jBolsillo][2]);
			reg_int(0, "Cantidad_bolsillo_3", InfoJugador[playerid][jBolsilloCant][2]);
			reg_int(0, "Bolsillo_4", InfoJugador[playerid][jBolsillo][3]);
			reg_int(0, "Cantidad_bolsillo_4", InfoJugador[playerid][jBolsilloCant][3]);
			reg_int(0, "Bolsillo_5", InfoJugador[playerid][jBolsillo][4]);
			reg_int(0, "Cantidad_bolsillo_5", InfoJugador[playerid][jBolsilloCant][4]);
			reg_int(0, "Bolsillo_6", InfoJugador[playerid][jBolsillo][5]);
			reg_int(0, "Cantidad_bolsillo_6", InfoJugador[playerid][jBolsilloCant][5]);
			reg_int(0, "Bolsillo_7", InfoJugador[playerid][jBolsillo][6]);
			reg_int(0, "Cantidad_bolsillo_7", InfoJugador[playerid][jBolsilloCant][6]);
			reg_int(0, "Bolsillo_8", InfoJugador[playerid][jBolsillo][7]);
			reg_int(0, "Cantidad_bolsillo_8", InfoJugador[playerid][jBolsilloCant][7]);
			reg_int(0, "Bolsillo_9", InfoJugador[playerid][jBolsillo][8]);
			reg_int(0, "Cantidad_bolsillo_9", InfoJugador[playerid][jBolsilloCant][8]);
			reg_int(0, "mano_izquierda", InfoJugador[playerid][jManoIzquierda]);
			reg_int(0, "Cantidad_mano_izquierda", InfoJugador[playerid][jManoIzquierdaCant]);
			reg_int(0, "mano_derecha", InfoJugador[playerid][jManoDerecha]);
			reg_int(0, "Cantidad_mano_derecha", InfoJugador[playerid][jManoDerechaCant]);
			reg_int(0, "Espalda", InfoJugador[playerid][jEspalda]);
			reg_int(0, "Cantidad_espalda", InfoJugador[playerid][jEspaldaCant]);
			reg_int(0, "Cinturon_1", InfoJugador[playerid][jCinturon][0]);
			reg_int(0, "Cantidad_cinturon_1", InfoJugador[playerid][jCinturonCant][0]);
			reg_int(0, "Cinturon_2", InfoJugador[playerid][jCinturon][1]);
			reg_int(0, "Cantidad_cinturon_2", InfoJugador[playerid][jCinturonCant][1]);
			reg_int(0, "Cinturon_3", InfoJugador[playerid][jCinturon][2]);
			reg_int(0, "Cantidad_cinturon_3", InfoJugador[playerid][jCinturonCant][2]);
			reg_int(0, "Cinturon_4", InfoJugador[playerid][jCinturon][3]);
			reg_int(0, "Cantidad_cinturon_4", InfoJugador[playerid][jCinturonCant][3]);
			reg_int(0, "Cinturon_5", InfoJugador[playerid][jCinturon][4]);
			reg_int(0, "Cantidad_cinturon_5", InfoJugador[playerid][jCinturonCant][4]);
			reg_int(0, "Cinturon_6", InfoJugador[playerid][jCinturon][5]);
			reg_int(0, "Cantidad_cinturon_6", InfoJugador[playerid][jCinturonCant][5]);
			reg_int(0, "Arma_0", InfoJugador[playerid][jArmas][0]);
			reg_int(0, "Arma_1", InfoJugador[playerid][jArmas][1]);
			reg_int(0, "Arma_2", InfoJugador[playerid][jArmas][2]);
			reg_int(0, "Arma_3", InfoJugador[playerid][jArmas][3]);
			reg_int(0, "Arma_4", InfoJugador[playerid][jArmas][4]);
			reg_int(0, "Arma_5", InfoJugador[playerid][jArmas][5]);
			reg_int(0, "Arma_6", InfoJugador[playerid][jArmas][6]);
			reg_int(0, "Arma_7", InfoJugador[playerid][jArmas][7]);
			reg_int(0, "Arma_8", InfoJugador[playerid][jArmas][8]);
			reg_int(0, "Arma_9", InfoJugador[playerid][jArmas][9]);
			reg_int(0, "Arma_10", InfoJugador[playerid][jArmas][10]);
			reg_int(0, "Arma_11", InfoJugador[playerid][jArmas][11]);
			reg_int(0, "AlquilerCasa", InfoJugador[playerid][jAlquilerCasa]);
			reg_int(0, "Restriccion1", InfoJugador[playerid][jRestriccion][0]);
			reg_int(0, "Restriccion2", InfoJugador[playerid][jRestriccion][1]);
			reg_int(0, "Restriccion3", InfoJugador[playerid][jRestriccion][2]);
			reg_int(0, "Restriccion4", InfoJugador[playerid][jRestriccion][3]);
			reg_int(0, "Restriccion5", InfoJugador[playerid][jRestriccion][4]);
			reg_int(0, "Restriccion6", InfoJugador[playerid][jRestriccion][5]);
			reg_int(0, "Restriccion7", InfoJugador[playerid][jRestriccion][6]);
			reg_int(0, "Restriccion8", InfoJugador[playerid][jRestriccion][7]);
			reg_int(0, "Restriccion9", InfoJugador[playerid][jRestriccion][8]);
			reg_int(0, "Restriccion10", InfoJugador[playerid][jRestriccion][9]);
			reg_string(0, "EstadoEstatico", InfoJugador[playerid][jEstadoEstatico], 128);
			reg_string(0, "EstadoPersonal", InfoJugador[playerid][jEstadoPersonal], 128);
			reg_int(0, "UsaEstado", InfoJugador[playerid][pUsaEstado]);
			reg_int(0, "ConEstado", InfoJugador[playerid][pConEstado]);
			reg_int(0, "Coins", InfoJugador[playerid][jCoins]);
			reg_int(0, "NivelVIP", InfoJugador[playerid][jNivelVIP]);
			reg_int(0, "ColorVIP", InfoJugador[playerid][jColorVIP]);
			reg_int(0, "DiaVIP", InfoJugador[playerid][jDiaVIP]);
			reg_int(0, "MesVIP", InfoJugador[playerid][jMesVIP]);
			reg_int(0, "Muerto", InfoJugador[playerid][jMuerto]);
			reg_int(0, "Multicuenta", InfoJugador[playerid][jMulticuenta]);
			reg_int(0, "Baneado", InfoJugador[playerid][jBaneado]);
			reg_string(0, "SobreAdmin", InfoJugador[playerid][jSobreAdmin], 50);
			reg_int(0, "SobreAdminint", InfoJugador[playerid][jSobreAdminint]);
			reg_int(0, "Telefono", InfoJugador[playerid][jTelefono]);
			reg_int(0, "Saldo", InfoJugador[playerid][jSaldo]);
			reg_int(0, "Frecuencia", InfoJugador[playerid][jFrecuencia]);
			reg_int(0, "Boombox", InfoJugador[playerid][jBoombox]);
			reg_int(0, "Loteria", InfoJugador[playerid][jLoteria]);
			reg_int(0, "Mascara", InfoJugador[playerid][jMascara]);
			reg_int(0, "Estrellas", InfoJugador[playerid][jEstrellas]);
			reg_int(0, "MinEstrellas", InfoJugador[playerid][jMinEstrellas]);
			reg_int(0, "Trabajo1", InfoJugador[playerid][jTrabajo1]);
			reg_int(0, "Trabajo2", InfoJugador[playerid][jTrabajo2]);
			reg_int(0, "Trabajo3", InfoJugador[playerid][jTrabajo3]);
			reg_string(0, "QuienPuso", InfoJugador[playerid][jQuienPuso], 24);
			reg_int(0, "Arrestos", InfoJugador[playerid][jArrestos]);
			reg_int(0, "Sanciones", InfoJugador[playerid][jSanciones]);
			reg_int(0, "Encarcelado", InfoJugador[playerid][jEncarcelado]);
			reg_string(0, "Sancionador", InfoJugador[playerid][jSancionador], 24);
			reg_int(0, "TiempoCarcel", InfoJugador[playerid][jTiempoCarcel]);
			reg_int(0, "Cargas", InfoJugador[playerid][jCargas]);
			reg_int(0, "Muebles", InfoJugador[playerid][jMuebles]);
			reg_int(0, "Troncos", InfoJugador[playerid][jTroncos]);
			reg_int(0, "Pescados", InfoJugador[playerid][jPescados]);
			reg_int(0, "Cosechas", InfoJugador[playerid][jCosechas]);
			reg_int(0, "Escombros", InfoJugador[playerid][jEscombros]);
			reg_int(0, "Materiales", InfoJugador[playerid][jMateriales]);
			reg_int(0, "Pinturas", InfoJugador[playerid][jPinturas]);
			reg_int(0, "Ganzuas", InfoJugador[playerid][jGanzuas]);
			reg_int(0, "Lineas", InfoJugador[playerid][jLineas]);
			reg_int(0, "Carnadas", InfoJugador[playerid][jCarnadas]);
			reg_int(0, "Cheques", InfoJugador[playerid][jCheques]);
			reg_int(0, "Licencias1", InfoJugador[playerid][jLicencias][0]);
			reg_int(0, "TiempoLicencia1", InfoJugador[playerid][jTiempoLicencia1]);
			reg_int(0, "Licencias2", InfoJugador[playerid][jLicencias][1]);
			reg_int(0, "Licencias3", InfoJugador[playerid][jLicencias][2]);
			reg_int(0, "Licencias4", InfoJugador[playerid][jLicencias][3]);
			reg_int(0, "Licencias5", InfoJugador[playerid][jLicencias][4]);
			reg_int(0, "Licencias6", InfoJugador[playerid][jLicencias][5]);
			reg_int(0, "Licencias7", InfoJugador[playerid][jLicencias][6]);
			reg_int(0, "Habilidad1_1", InfoJugador[playerid][jHabilidad1][0]);
			reg_int(0, "Habilidad2_1", InfoJugador[playerid][jHabilidad2][0]);
			reg_int(0, "Habilidad1_2", InfoJugador[playerid][jHabilidad1][1]);
			reg_int(0, "Habilidad2_2", InfoJugador[playerid][jHabilidad2][1]);
			reg_int(0, "Habilidad1_3", InfoJugador[playerid][jHabilidad1][2]);
			reg_int(0, "Habilidad2_3", InfoJugador[playerid][jHabilidad2][2]);
			reg_int(0, "Habilidad1_4", InfoJugador[playerid][jHabilidad1][3]);
			reg_int(0, "Habilidad2_4", InfoJugador[playerid][jHabilidad2][3]);
			reg_int(0, "Habilidad1_5", InfoJugador[playerid][jHabilidad1][4]);
			reg_int(0, "Habilidad2_5", InfoJugador[playerid][jHabilidad2][4]);
			reg_int(0, "Habilidad1_6", InfoJugador[playerid][jHabilidad1][5]);
			reg_int(0, "Habilidad2_6", InfoJugador[playerid][jHabilidad2][5]);
			reg_int(0, "Habilidad1_7", InfoJugador[playerid][jHabilidad1][6]);
			reg_int(0, "Habilidad2_7", InfoJugador[playerid][jHabilidad2][6]);
			reg_int(0, "Habilidad1_8", InfoJugador[playerid][jHabilidad1][7]);
			reg_int(0, "Habilidad2_8", InfoJugador[playerid][jHabilidad2][7]);
			reg_int(0, "Habilidad1_9", InfoJugador[playerid][jHabilidad1][8]);
			reg_int(0, "Habilidad2_9", InfoJugador[playerid][jHabilidad2][8]);
			reg_int(0, "Documento", InfoJugador[playerid][jDocumento]);
			reg_int(0, "FakeEdad", InfoJugador[playerid][jFakeEdad]);
			reg_int(0, "FakeDNI", InfoJugador[playerid][jFakeDNI]);
			reg_string(0, "FakeNombre", InfoJugador[playerid][jFakeNombre], 24);
			reg_int(0, "Delito1", InfoJugador[playerid][jDelito][0]);
			reg_string(0, "DelitoRazon1", InfoJugador[playerid][jRazonDelito1], 128);
			reg_int(0, "Delito2", InfoJugador[playerid][jDelito][1]);
			reg_string(0, "DelitoRazon2", InfoJugador[playerid][jRazonDelito2], 128);
			reg_int(0, "Delito3", InfoJugador[playerid][jDelito][2]);
			reg_string(0, "DelitoRazon3", InfoJugador[playerid][jRazonDelito3], 128);
			reg_int(0, "Delito4", InfoJugador[playerid][jDelito][3]);
			reg_string(0, "DelitoRazon4", InfoJugador[playerid][jRazonDelito4], 128);
			reg_int(0, "Delito5", InfoJugador[playerid][jDelito][4]);
			reg_string(0, "DelitoRazon5", InfoJugador[playerid][jRazonDelito5], 128);
			reg_int(0, "Delito6", InfoJugador[playerid][jDelito][5]);
			reg_string(0, "DelitoRazon6", InfoJugador[playerid][jRazonDelito6], 128);
			reg_int(0, "Delito7", InfoJugador[playerid][jDelito][6]);
			reg_string(0, "DelitoRazon7", InfoJugador[playerid][jRazonDelito7], 128);
			reg_int(0, "Delito8", InfoJugador[playerid][jDelito][7]);
			reg_string(0, "DelitoRazon8", InfoJugador[playerid][jRazonDelito8], 128);
			reg_int(0, "Delito9", InfoJugador[playerid][jDelito][8]);
			reg_string(0, "DelitoRazon9", InfoJugador[playerid][jRazonDelito9], 128);
			reg_int(0, "Delito10", InfoJugador[playerid][jDelito][9]);
			reg_string(0, "DelitoRazon10", InfoJugador[playerid][jRazonDelito10], 128);
			reg_int(0, "Contacto1", InfoJugador[playerid][jNumeroContacto][0]);
			reg_int(0, "Contacto2", InfoJugador[playerid][jNumeroContacto][1]);
			reg_int(0, "Contacto3", InfoJugador[playerid][jNumeroContacto][2]);
			reg_int(0, "Contacto4", InfoJugador[playerid][jNumeroContacto][3]);
			reg_int(0, "Contacto5", InfoJugador[playerid][jNumeroContacto][4]);
			reg_int(0, "Contacto6", InfoJugador[playerid][jNumeroContacto][5]);
			reg_int(0, "Contacto7", InfoJugador[playerid][jNumeroContacto][6]);
			reg_int(0, "Contacto8", InfoJugador[playerid][jNumeroContacto][7]);
			reg_int(0, "Contacto9", InfoJugador[playerid][jNumeroContacto][8]);
			reg_int(0, "Contacto10", InfoJugador[playerid][jNumeroContacto][9]);
			reg_int(0, "Contacto11", InfoJugador[playerid][jNumeroContacto][10]);
			reg_int(0, "Contacto12", InfoJugador[playerid][jNumeroContacto][11]);
			reg_int(0, "Contacto13", InfoJugador[playerid][jNumeroContacto][12]);
			reg_int(0, "Contacto14", InfoJugador[playerid][jNumeroContacto][13]);
			reg_int(0, "Contacto15", InfoJugador[playerid][jNumeroContacto][14]);
			reg_int(0, "Contacto16", InfoJugador[playerid][jNumeroContacto][15]);
			reg_int(0, "Contacto17", InfoJugador[playerid][jNumeroContacto][16]);
			reg_int(0, "Contacto18", InfoJugador[playerid][jNumeroContacto][17]);
			reg_int(0, "Contacto19", InfoJugador[playerid][jNumeroContacto][18]);
			reg_int(0, "Contacto20", InfoJugador[playerid][jNumeroContacto][19]);
			reg_string(0, "NombreContacto1", InfoJugador[playerid][jNombreContacto1], 32);
			reg_string(0, "NombreContacto2", InfoJugador[playerid][jNombreContacto2], 32);
			reg_string(0, "NombreContacto3", InfoJugador[playerid][jNombreContacto3], 32);
			reg_string(0, "NombreContacto4", InfoJugador[playerid][jNombreContacto4], 32);
			reg_string(0, "NombreContacto5", InfoJugador[playerid][jNombreContacto5], 32);
			reg_string(0, "NombreContacto6", InfoJugador[playerid][jNombreContacto6], 32);
			reg_string(0, "NombreContacto7", InfoJugador[playerid][jNombreContacto7], 32);
			reg_string(0, "NombreContacto8", InfoJugador[playerid][jNombreContacto8], 32);
			reg_string(0, "NombreContacto9", InfoJugador[playerid][jNombreContacto9], 32);
			reg_string(0, "NombreContacto10", InfoJugador[playerid][jNombreContacto10], 32);
			reg_string(0, "NombreContacto11", InfoJugador[playerid][jNombreContacto11], 32);
			reg_string(0, "NombreContacto12", InfoJugador[playerid][jNombreContacto12], 32);
			reg_string(0, "NombreContacto13", InfoJugador[playerid][jNombreContacto13], 32);
			reg_string(0, "NombreContacto14", InfoJugador[playerid][jNombreContacto14], 32);
			reg_string(0, "NombreContacto15", InfoJugador[playerid][jNombreContacto15], 32);
			reg_string(0, "NombreContacto16", InfoJugador[playerid][jNombreContacto16], 32);
			reg_string(0, "NombreContacto17", InfoJugador[playerid][jNombreContacto17], 32);
			reg_string(0, "NombreContacto18", InfoJugador[playerid][jNombreContacto18], 32);
			reg_string(0, "NombreContacto19", InfoJugador[playerid][jNombreContacto19], 32);
			reg_string(0, "NombreContacto20", InfoJugador[playerid][jNombreContacto20], 32);
			reg_int(0, "Tiempos1", InfoJugador[playerid][jTiempos][0]);
			reg_int(0, "Tiempos2", InfoJugador[playerid][jTiempos][1]);
			reg_int(0, "Tiempos3", InfoJugador[playerid][jTiempos][2]);
			reg_int(0, "Tiempos4", InfoJugador[playerid][jTiempos][3]);
			reg_int(0, "Tiempos5", InfoJugador[playerid][jTiempos][4]);
			reg_int(0, "Tiempos6", InfoJugador[playerid][jTiempos][5]);
			reg_int(0, "Tiempos7", InfoJugador[playerid][jTiempos][6]);
			reg_int(0, "Tiempos8", InfoJugador[playerid][jTiempos][7]);
			reg_int(0, "Tiempos9", InfoJugador[playerid][jTiempos][8]);
			reg_int(0, "Tiempos10", InfoJugador[playerid][jTiempos][9]);
			reg_int(0, "Tiempos11", InfoJugador[playerid][jTiempos][10]);
			reg_int(0, "Tiempos12", InfoJugador[playerid][jTiempos][11]);
			reg_int(0, "Tiempos13", InfoJugador[playerid][jTiempos][12]);
			reg_int(0, "Tiempos14", InfoJugador[playerid][jTiempos][13]);
			reg_int(0, "Tiempos15", InfoJugador[playerid][jTiempos][14]);
			reg_int(0, "Tiempos16", InfoJugador[playerid][jTiempos][15]);
			reg_int(0, "Tiempos17", InfoJugador[playerid][jTiempos][16]);
			reg_int(0, "Tiempos18", InfoJugador[playerid][jTiempos][17]);
			reg_int(0, "Tiempos19", InfoJugador[playerid][jTiempos][18]);
			reg_int(0, "Tiempos20", InfoJugador[playerid][jTiempos][19]);
			reg_int(0, "Payday", InfoJugador[playerid][jPayday]);
			reg_int(0, "T_fabrica", InfoJugador[playerid][jT_fabrica]);
			reg_int(0, "I_fabrica", InfoJugador[playerid][jI_fabrica]);
			reg_int(0, "T_fabrica2", InfoJugador[playerid][jT_fabrica2]);
			reg_int(0, "I_fabrica2", InfoJugador[playerid][jI_fabrica2]);
			reg_int(0, "Ban_t", InfoJugador[playerid][jBan_t]);
			reg_string(0, "Ban_c", InfoJugador[playerid][jBan_c], 32);
			reg_string(0, "Ban_r", InfoJugador[playerid][jBan_r], 128);
			reg_string(0, "Ban_m", InfoJugador[playerid][jBan_m], 256);
			reg_int(0, "Piedras", InfoJugador[playerid][jPiedras]);
			reg_int(0, "Tickets", InfoJugador[playerid][jTickets]);
			reg_int(0, "PuntosRol", InfoJugador[playerid][jPuntosRol]);
			reg_int(0, "Adiccion1", InfoJugador[playerid][jAdiccion][0]);
			reg_int(0, "Adiccion2", InfoJugador[playerid][jAdiccion][1]);
			reg_int(0, "Adiccion3", InfoJugador[playerid][jAdiccion][2]);
			reg_int(0, "Adiccion4", InfoJugador[playerid][jAdiccion][3]);
			reg_int(0, "Adiccion5", InfoJugador[playerid][jAdiccion][4]);
			reg_int(0, "Discord", InfoJugador[playerid][jDiscord]);
			reg_int(0, "DiscordNitro", InfoJugador[playerid][jDiscordNitro]);
			reg_int(0, "ApodoDiscord", InfoJugador[playerid][jApodoDiscord]);
			reg_string(0, "ApodoDiscordNombre", InfoJugador[playerid][jApodoDiscordNombre], 24);
			reg_int(0, "Verificado", InfoJugador[playerid][jVerificado]);
			reg_int(0, "Mercado", InfoJugador[playerid][pMercado]);
			reg_int(0, "Fabrica", InfoJugador[playerid][pFabrica]);
			reg_int(0, "TiempoRobo", InfoJugador[playerid][pTiempoRobo]);
			reg_int(0, "AdminWarn", InfoJugador[playerid][jAdminWarn]);
			reg_int(0, "VerBolsillos", InfoJugador[playerid][jVerBolsillos]);
			reg_int(0, "CanalDudas", InfoJugador[playerid][jCanalDudas]);
			reg_int(0, "Referido", InfoJugador[playerid][jReferido]);
			reg_int(0, "CobroReferido", InfoJugador[playerid][jCobroReferido]);
			reg_string(0, "NombreAmigo", InfoJugador[playerid][jNombreAmigo], 50);
			reg_int(0, "GananciaFuneral", InfoJugador[playerid][pGananciaFuneral]);
			reg_int(0, "VerNecesidades", InfoJugador[playerid][jVerNecesidades]);
			reg_int(0, "YT", InfoJugador[playerid][jYT]);
			//accesorios
			new gformat[512];
			reg_string(0, "Toy1", gformat, 512);
			sscanf(gformat, "p<|>ddfffffffffd",
			InfoJugador[playerid][aModelo][0], InfoJugador[playerid][aHueso][0], InfoJugador[playerid][aPosicionX][0], InfoJugador[playerid][aPosicionY][0], InfoJugador[playerid][aPosicionZ][0], InfoJugador[playerid][aRotacionX][0],
			InfoJugador[playerid][aRotacionY][0], InfoJugador[playerid][aRotacionZ][0], InfoJugador[playerid][aEscalaX][0], InfoJugador[playerid][aEscalaY][0], InfoJugador[playerid][aEscalaZ][0], InfoJugador[playerid][aColocado][0]);
			reg_string(0, "Toy2", gformat, 512);
			sscanf(gformat, "p<|>ddfffffffffd",
			InfoJugador[playerid][aModelo][1], InfoJugador[playerid][aHueso][1], InfoJugador[playerid][aPosicionX][1], InfoJugador[playerid][aPosicionY][1], InfoJugador[playerid][aPosicionZ][1], InfoJugador[playerid][aRotacionX][1],
			InfoJugador[playerid][aRotacionY][1], InfoJugador[playerid][aRotacionZ][1], InfoJugador[playerid][aEscalaX][1], InfoJugador[playerid][aEscalaY][1], InfoJugador[playerid][aEscalaZ][1], InfoJugador[playerid][aColocado][1]);
			reg_string(0, "Toy3", gformat, 512);
			sscanf(gformat, "p<|>ddfffffffffd",
			InfoJugador[playerid][aModelo][2], InfoJugador[playerid][aHueso][2], InfoJugador[playerid][aPosicionX][2], InfoJugador[playerid][aPosicionY][2], InfoJugador[playerid][aPosicionZ][2], InfoJugador[playerid][aRotacionX][2],
			InfoJugador[playerid][aRotacionY][2], InfoJugador[playerid][aRotacionZ][2], InfoJugador[playerid][aEscalaX][2], InfoJugador[playerid][aEscalaY][2], InfoJugador[playerid][aEscalaZ][2], InfoJugador[playerid][aColocado][2]);
			reg_string(0, "Toy4", gformat, 512);
			sscanf(gformat, "p<|>ddfffffffffd",
			InfoJugador[playerid][aModelo][3], InfoJugador[playerid][aHueso][3], InfoJugador[playerid][aPosicionX][3], InfoJugador[playerid][aPosicionY][3], InfoJugador[playerid][aPosicionZ][3], InfoJugador[playerid][aRotacionX][3],
			InfoJugador[playerid][aRotacionY][3], InfoJugador[playerid][aRotacionZ][3], InfoJugador[playerid][aEscalaX][3], InfoJugador[playerid][aEscalaY][3], InfoJugador[playerid][aEscalaZ][3], InfoJugador[playerid][aColocado][3]);
			reg_string(0, "Toy5", gformat, 512);
			sscanf(gformat, "p<|>ddfffffffffd",
			InfoJugador[playerid][aModelo][4], InfoJugador[playerid][aHueso][4], InfoJugador[playerid][aPosicionX][4], InfoJugador[playerid][aPosicionY][4], InfoJugador[playerid][aPosicionZ][4], InfoJugador[playerid][aRotacionX][4],
			InfoJugador[playerid][aRotacionY][4], InfoJugador[playerid][aRotacionZ][4], InfoJugador[playerid][aEscalaX][4], InfoJugador[playerid][aEscalaY][4], InfoJugador[playerid][aEscalaZ][4], InfoJugador[playerid][aColocado][4]);
			reg_int(0, "Fianza", InfoJugador[playerid][jFianza]);
			reg_int(0, "MaxMuebles", InfoJugador[playerid][jMaxMuebles]);
			reg_int(0, "MutedAnuncios", InfoJugador[playerid][jMutedAnuncios]);
			reg_int(0, "TiempoMuteoAD", InfoJugador[playerid][jTiempoMuteoAD]);
			reg_string(0, "Piezas", gformat, 128);
			sscanf(gformat, "p<|>ddddddd",
			InfoJugador[playerid][jPiezas][0], InfoJugador[playerid][jPiezas][1], InfoJugador[playerid][jPiezas][2], InfoJugador[playerid][jPiezas][3],
			InfoJugador[playerid][jPiezas][4], InfoJugador[playerid][jPiezas][5], InfoJugador[playerid][jPiezas][6]);
			reg_int(0, "TeclaEspalda", InfoJugador[playerid][jTeclaEspalda]);
			reg_int(0, "Abatido", InfoJugador[playerid][jAbatido]);
			reg_float(0, "EntradaX", InfoJugador[playerid][jEntradaX]);
			reg_float(0, "EntradaY", InfoJugador[playerid][jEntradaY]);
			reg_float(0, "EntradaZ", InfoJugador[playerid][jEntradaZ]);
			reg_float(0, "EntradaR", InfoJugador[playerid][jEntradaR]);
			reg_int(0, "EntradaInt", InfoJugador[playerid][jEntradaInt]);
			reg_int(0, "EntradaVW", InfoJugador[playerid][jEntradaVW]);
			reg_int(0, "ColorToy1", InfoJugador[playerid][aColor][0]);
			reg_int(0, "ColorToy2", InfoJugador[playerid][aColor][1]);
			reg_int(0, "ColorToy3", InfoJugador[playerid][aColor][2]);
			reg_int(0, "ColorToy4", InfoJugador[playerid][aColor][3]);
			reg_int(0, "ColorToy5", InfoJugador[playerid][aColor][4]);
			reg_int(0, "SeguroMedico", InfoJugador[playerid][jSeguroMedico]);
			reg_int(0, "UsoReferido", InfoJugador[playerid][jUsoReferido]);
			reg_string(0, "CodigoReferido", InfoJugador[playerid][jCodigoReferido], 50);
			reg_int(0, "Casado", InfoJugador[playerid][jCasado]);
			reg_string(0, "Matrimonio", InfoJugador[playerid][jMatrimonio], 120);
			cache_unset_active();
		    create = 1;
		}
		cache_delete(result);
		if (create == 0) return Kick(playerid); // error de conexion
		if (InfoJugador[playerid][jBaneado] != 0) return MuestraBloqueoCuenta(playerid);
		SetPlayerInterior(playerid, InfoJugador[playerid][jInterior]);
		SetPlayerVirtualWorld(playerid, InfoJugador[playerid][jVirtualWorld]);
		usuario_registro[playerid] = 1;
		CargarCuenta(playerid);
        TextDrawHideForPlayer(playerid, LoginTD[0]);
        TextDrawHideForPlayer(playerid, LoginTD[1]);
		TextDrawHideForPlayer(playerid, LoginTD[2]);
		TextDrawHideForPlayer(playerid, LoginTD[3]);
		TextDrawHideForPlayer(playerid, LoginTD[4]);
		TextDrawHideForPlayer(playerid, LoginTD[5]);
		TextDrawHideForPlayer(playerid, LoginTD[6]);
		TextDrawHideForPlayer(playerid, LoginTD[7]);
		TextDrawHideForPlayer(playerid, LoginTD[8]);
		TextDrawHideForPlayer(playerid, LoginTD[9]);
		TextDrawHideForPlayer(playerid, LoginTD[10]);
		TextDrawHideForPlayer(playerid, LoginTD[11]);
		TextDrawHideForPlayer(playerid, LoginTD[12]);
		TextDrawHideForPlayer(playerid, LoginTD[13]);
		TextDrawHideForPlayer(playerid, LoginTD[14]);
		TextDrawHideForPlayer(playerid, LoginTD[15]);
		PlayerTextDrawHide(playerid, nombrelogin[playerid]);
		CancelSelectTextDraw(playerid);
	}
	//configuracion de accesorios
	if (Ropa_ID[playerid] == 999)
	{
		new toy = RanuraSeleccionada[playerid], gtest[24];
		if (toy == -1) return SendClientMessage(playerid, 0xccccccff, "* No has seleccionado ningun accesorio."), DevolverTiendaToy(playerid);
		//esc o/y salir
		if (Text:INVALID_TEXT_DRAW == clickedid || clickedid == TD_MenuToy[20])
		{
			DevolverTiendaToy(playerid);
			if (InfoJugador[playerid][aColocado][toy] != 0) SendClientMessageEx(playerid, 0x8080FFFF, "Saliste de la configuracion del accesorio %s. Volvio a su antigua coordenada.", GetNameToy(playerid, toy));
			else SendClientMessageEx(playerid, 0x8080FFFF, "Saliste de la configuracion del accesorio %s.", GetNameToy(playerid, toy));
			return 1;
		}
		//posicion
		if (clickedid == TD_MenuToy[3]) //x
		{
			TypeIDtoy[playerid] = 1;
			TypeIDedit[playerid] = 0;
			format(gtest, sizeof gtest, "%0.02f", TemporalToyPos[playerid][0]);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], gtest);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][1], "Posicion - X");
			return 1;
		}
		if (clickedid == TD_MenuToy[4]) //y
		{
			TypeIDtoy[playerid] = 1;
			TypeIDedit[playerid] = 1;
			format(gtest, sizeof gtest, "%0.02f", TemporalToyPos[playerid][1]);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], gtest);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][1], "Posicion - Y");
			return 1;
		}
		if (clickedid == TD_MenuToy[5]) //z
		{
			TypeIDtoy[playerid] = 1;
			TypeIDedit[playerid] = 2;
			format(gtest, sizeof gtest, "%0.02f", TemporalToyPos[playerid][2]);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], gtest);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][1], "Posicion - Z");
			return 1;
		}
		//rotacion
		if (clickedid == TD_MenuToy[7]) //x
		{
			TypeIDtoy[playerid] = 2;
			TypeIDedit[playerid] = 0;
			format(gtest, sizeof gtest, "%0.02f", TemporalToyRot[playerid][0]);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], gtest);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][1], "Rotacion - X");
			return 1;
		}
		if (clickedid == TD_MenuToy[8]) //y
		{
			TypeIDtoy[playerid] = 2;
			TypeIDedit[playerid] = 1;
			format(gtest, sizeof gtest, "%0.02f", TemporalToyRot[playerid][1]);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], gtest);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][1], "Rotacion - Y");
			return 1;
		}
		if (clickedid == TD_MenuToy[9]) //z
		{
			TypeIDtoy[playerid] = 2;
			TypeIDedit[playerid] = 2;
			format(gtest, sizeof gtest, "%0.02f", TemporalToyRot[playerid][2]);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], gtest);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][1], "Rotacion - Z");
			return 1;
		}
		//escala
		if (clickedid == TD_MenuToy[11]) //x
		{
			TypeIDtoy[playerid] = 3;
			TypeIDedit[playerid] = 0;
			format(gtest, sizeof gtest, "%0.02f", TemporalToyEsc[playerid][0]);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], gtest);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][1], "Escala - X");
			return 1;
		}
		if (clickedid == TD_MenuToy[12]) //y
		{
			TypeIDtoy[playerid] = 3;
			TypeIDedit[playerid] = 1;
			format(gtest, sizeof gtest, "%0.02f", TemporalToyEsc[playerid][1]);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], gtest);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][1], "Escala - Y");
			return 1;
		}
		if (clickedid == TD_MenuToy[13]) //z
		{
			TypeIDtoy[playerid] = 3;
			TypeIDedit[playerid] = 2;
			format(gtest, sizeof gtest, "%0.02f", TemporalToyEsc[playerid][2]);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], gtest);
			PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][1], "Escala - Z");
			return 1;
		}
		//+
		if (clickedid == TD_MenuToy[16])
		{
			switch (TypeIDtoy[playerid])
			{
				//posicion
				case 1:
				{
					TemporalToyPos[playerid][TypeIDedit[playerid]] += 0.01;
					format(gtest, sizeof gtest, "%0.02f", TemporalToyPos[playerid][TypeIDedit[playerid]]);
					PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], gtest);
				}
				//rotacion
				case 2:
				{
					TemporalToyRot[playerid][TypeIDedit[playerid]] += 10.0;
					format(gtest, sizeof gtest, "%0.02f", TemporalToyRot[playerid][TypeIDedit[playerid]]);
					PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], gtest);
				}
				//escala
				case 3:
				{
					TemporalToyEsc[playerid][TypeIDedit[playerid]] += 0.01;
					format(gtest, sizeof gtest, "%0.02f", TemporalToyEsc[playerid][TypeIDedit[playerid]]);
					PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], gtest);
				}
			}
			if (IsPlayerAttachedObjectSlotUsed(playerid, toy)) RemovePlayerAttachedObject(playerid, toy);
			SetPlayerAttachedObject(playerid, toy, InfoJugador[playerid][aModelo][toy], TemporalToyParte[playerid], TemporalToyPos[playerid][0], TemporalToyPos[playerid][1], TemporalToyPos[playerid][2], TemporalToyRot[playerid][0], TemporalToyRot[playerid][1], TemporalToyRot[playerid][2], TemporalToyEsc[playerid][0], TemporalToyEsc[playerid][1], TemporalToyEsc[playerid][2]);
			return 1;
		}
		//-
		if (clickedid == TD_MenuToy[17])
		{
			switch (TypeIDtoy[playerid])
			{
				//posicion
				case 1:
				{
					TemporalToyPos[playerid][TypeIDedit[playerid]] -= 0.01;
					format(gtest, sizeof gtest, "%0.02f", TemporalToyPos[playerid][TypeIDedit[playerid]]);
					PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], gtest);
				}
				//rotacion
				case 2:
				{
					TemporalToyRot[playerid][TypeIDedit[playerid]] -= 10.0;
					format(gtest, sizeof gtest, "%0.02f", TemporalToyRot[playerid][TypeIDedit[playerid]]);
					PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], gtest);
				}
				//escala
				case 3:
				{
					TemporalToyEsc[playerid][TypeIDedit[playerid]] -= 0.01;
					format(gtest, sizeof gtest, "%0.02f", TemporalToyEsc[playerid][TypeIDedit[playerid]]);
					PlayerTextDrawSetString(playerid, MenuToy_TD[playerid][0], gtest);
				}
			}
			if (IsPlayerAttachedObjectSlotUsed(playerid, toy)) RemovePlayerAttachedObject(playerid, toy);
			SetPlayerAttachedObject(playerid, toy, InfoJugador[playerid][aModelo][toy], TemporalToyParte[playerid], TemporalToyPos[playerid][0], TemporalToyPos[playerid][1], TemporalToyPos[playerid][2], TemporalToyRot[playerid][0], TemporalToyRot[playerid][1], TemporalToyRot[playerid][2], TemporalToyEsc[playerid][0], TemporalToyEsc[playerid][1], TemporalToyEsc[playerid][2]);
			return 1;
		}
		//guardar
		if (clickedid == TD_MenuToy[19])
		{
			InfoJugador[playerid][aHueso][toy] = TemporalToyParte[playerid];
			InfoJugador[playerid][aPosicionX][toy] = TemporalToyPos[playerid][0];
			InfoJugador[playerid][aPosicionY][toy] = TemporalToyPos[playerid][1];
			InfoJugador[playerid][aPosicionZ][toy] = TemporalToyPos[playerid][2];
			InfoJugador[playerid][aRotacionX][toy] = TemporalToyRot[playerid][0];
			InfoJugador[playerid][aRotacionY][toy] = TemporalToyRot[playerid][1];
			InfoJugador[playerid][aRotacionZ][toy] = TemporalToyRot[playerid][2];

			InfoJugador[playerid][aEscalaX][toy] = TemporalToyEsc[playerid][0];
			if (TemporalToyEsc[playerid][0] < 0.1) InfoJugador[playerid][aEscalaX][toy] = 0.1;
			else if (TemporalToyEsc[playerid][0] > 1.5) InfoJugador[playerid][aEscalaX][toy] = 1.5;

			InfoJugador[playerid][aEscalaY][toy] = TemporalToyEsc[playerid][1];
			if (TemporalToyEsc[playerid][1] < 0.1) InfoJugador[playerid][aEscalaY][toy] = 0.1;
			else if (TemporalToyEsc[playerid][1] > 1.5) InfoJugador[playerid][aEscalaY][toy] = 1.5;

			InfoJugador[playerid][aEscalaZ][toy] = TemporalToyEsc[playerid][2];
			if (TemporalToyEsc[playerid][2] < 0.1) InfoJugador[playerid][aEscalaZ][toy] = 0.1;
			else if (TemporalToyEsc[playerid][2] > 1.5) InfoJugador[playerid][aEscalaZ][toy] = 1.5;

			SetPlayerAttachedObject(playerid, toy, InfoJugador[playerid][aModelo][toy], InfoJugador[playerid][aHueso][toy], InfoJugador[playerid][aPosicionX][toy], InfoJugador[playerid][aPosicionY][toy], InfoJugador[playerid][aPosicionZ][toy],
			InfoJugador[playerid][aRotacionX][toy], InfoJugador[playerid][aRotacionY][toy], InfoJugador[playerid][aRotacionZ][toy], InfoJugador[playerid][aEscalaX][toy], InfoJugador[playerid][aEscalaY][toy], InfoJugador[playerid][aEscalaZ][toy], SetColorToy(InfoJugador[playerid][aColor][toy]));
			SendClientMessageEx(playerid, 0x8080FFFF, "Configuracion del accesorio %s guardada con exito.", GetNameToy(playerid, toy));
			InfoJugador[playerid][aColocado][toy] = 1;
			ActualizarToy(playerid, toy);
			RanuraSeleccionada[playerid] = -1;
			DevolverTiendaToy(playerid);
			return 1;
		}
		//cambiar vista
		if (clickedid == TD_MenuToy[18])
		{
			switch (IDcameraToy[playerid])
			{
				case 1: { IDcameraToy[playerid] = 2,SetCameraToy(playerid, TemporalToyParte[playerid], 2); }
				case 2: { IDcameraToy[playerid] = 3,SetCameraToy(playerid, TemporalToyParte[playerid], 3); }
				case 3: { IDcameraToy[playerid] = 4,SetCameraToy(playerid, TemporalToyParte[playerid], 4); }
				case 4: { IDcameraToy[playerid] = 1,SetCameraToy(playerid, TemporalToyParte[playerid], 1); }
			}
			return 1;
		}
	}
	if (Ropa_ID[playerid] != 0)
	{
		//esc o/y salir
		if (Text:INVALID_TEXT_DRAW == clickedid)
		{
			Loop(x, 6, 0) { PlayerTextDrawHide(playerid, TD_ShopRopa[playerid][x]); }
			CancelSelectTextDraw(playerid);
			SetPlayerSkin(playerid, NegocioSkin[playerid]);
			SetPosEx(playerid, NegocioPos[playerid][0], NegocioPos[playerid][1], NegocioPos[playerid][2], NegocioPos[playerid][3], NegocioInt[playerid], NegocioVW[playerid], 1);

	 		Loop(x, 6, 0) { PlayerTextDrawShow(playerid, TD_PantallaHG[playerid][x]); }
			ShowPlayerProgressBar(playerid, BarraExp[playerid]);
			ShowPlayerProgressBar(playerid, BarraSed[playerid]);
			ShowPlayerProgressBar(playerid, BarraHambre[playerid]);
			PlayerTextDrawShow(playerid, InfoInferior[playerid]);
			ActualizarHambre(playerid);
			ActualizarSed(playerid);
			Actualizar(playerid);
			TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
			TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
			SendClientMessage(playerid, 0x8080FFFF, "Saliste del catalogo de ropa.");
			Ropa_ID[playerid] = 0;
			SetCameraBehindPlayer(playerid);
			return 1;
		}
	}
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	//inventario
	if (Act_Inventario[playerid] != 0)
	{
		//bolsillos
		if (playertextid == INV_obj[playerid][0]) //slot 1
		{
			SetPlayerInventario(playerid, 2);
			sacar_inventario(playerid, 0);
			CancelSelectTextDraw(playerid);
		}
		if (playertextid == INV_obj[playerid][2]) //slot 2
		{
			SetPlayerInventario(playerid, 2);
			sacar_inventario(playerid, 1);
			CancelSelectTextDraw(playerid);
		}
		if (playertextid == INV_obj[playerid][4]) //slot 3
		{
			SetPlayerInventario(playerid, 2);
			sacar_inventario(playerid, 2);
			CancelSelectTextDraw(playerid);
		}
		if (playertextid == INV_obj[playerid][6]) //slot 4
		{
			SetPlayerInventario(playerid, 2);
			sacar_inventario(playerid, 3);
			CancelSelectTextDraw(playerid);
		}
		if (playertextid == INV_obj[playerid][8]) //slot 5
		{
			SetPlayerInventario(playerid, 2);
			sacar_inventario(playerid, 4);
			CancelSelectTextDraw(playerid);
		}
		if (playertextid == INV_obj[playerid][10]) //slot 6
		{
			SetPlayerInventario(playerid, 2);
			sacar_inventario(playerid, 5);
			CancelSelectTextDraw(playerid);
		}
		if (playertextid == INV_obj[playerid][12]) //slot 7
		{
			SetPlayerInventario(playerid, 2);
			sacar_inventario(playerid, 6);
			CancelSelectTextDraw(playerid);
		}
		if (playertextid == INV_obj[playerid][14]) //slot 8
		{
			SetPlayerInventario(playerid, 2);
			sacar_inventario(playerid, 7);
			CancelSelectTextDraw(playerid);
		}
		if (playertextid == INV_obj[playerid][16]) //slot 9
		{
			SetPlayerInventario(playerid, 2);
			sacar_inventario(playerid, 8);
			CancelSelectTextDraw(playerid);
		}
		//mano derecha
		if (playertextid == INV_obj[playerid][22])
		{
			SetPlayerInventario(playerid, 2);
			guardar_inventario(playerid, 1);
			CancelSelectTextDraw(playerid);
		}
		//mano izquierda
		if (playertextid == INV_obj[playerid][18])
		{
			SetPlayerInventario(playerid, 2);
			guardar_inventario(playerid, 2);
			CancelSelectTextDraw(playerid);
		}
		//espalda
		if (playertextid == INV_obj[playerid][20])
		{
			SetPlayerInventario(playerid, 2);
			cmd_qespalda(playerid);
			CancelSelectTextDraw(playerid);
		}
	}
	if (Ropa_ID[playerid] != 0)
	{
		//esc o/y salir
		if (playertextid == TD_ShopRopa[playerid][5])
		{
			Loop(x, 6, 0) { PlayerTextDrawHide(playerid, TD_ShopRopa[playerid][x]); }
			CancelSelectTextDraw(playerid);
			SetPlayerSkin(playerid, NegocioSkin[playerid]);
			SetPosEx(playerid, NegocioPos[playerid][0], NegocioPos[playerid][1], NegocioPos[playerid][2], NegocioPos[playerid][3], NegocioInt[playerid], NegocioVW[playerid], 1);
	 		Loop(x, 6, 0) { PlayerTextDrawShow(playerid, TD_PantallaHG[playerid][x]); }
			ShowPlayerProgressBar(playerid, BarraExp[playerid]);
			ShowPlayerProgressBar(playerid, BarraSed[playerid]);
			ShowPlayerProgressBar(playerid, BarraHambre[playerid]);
			PlayerTextDrawShow(playerid, InfoInferior[playerid]);
			ActualizarHambre(playerid);
			ActualizarSed(playerid);
			Actualizar(playerid);
			TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
			TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
			SendClientMessage(playerid, 0x8080FFFF, "Saliste del catalogo de ropa.");
			Ropa_ID[playerid] = 0;
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		//anterior
		if (playertextid == TD_ShopRopa[playerid][2])
		{
			new nuevaskin = -1;
			if (InfoJugador[playerid][jSexo] == 1) { nuevaskin = SeleccionSkinHombre(Ropa_ID[playerid]); }
			else { nuevaskin = SeleccionSkinMujer(Ropa_ID[playerid]); }
			//precio
			Ropa_ID[playerid] = nuevaskin;
			//change
			SetPlayerSkin(playerid, nuevaskin);
			new gformat[128];
			format(gformat, sizeof gformat, "Negocio~n~Ropa: ~y~%d (Normal)~n~~w~Precio: ~g~$450 ~w~(Econ.)", nuevaskin);
			PlayerTextDrawSetString(playerid, TD_ShopRopa[playerid][1], gformat);
			return 1;
		}
		//siguiente
		if (playertextid == TD_ShopRopa[playerid][3])
		{
			new nuevaskin = -1;
			if (InfoJugador[playerid][jSexo] == 1) { nuevaskin = SeleccionSkinHombreSkinNuevo(Ropa_ID[playerid]); }
			else { nuevaskin = SeleccionSkinMujerNuevo(Ropa_ID[playerid]); }
			//precio
			RopitaAnterior[playerid] = Ropa_ID[playerid];
			Ropa_ID[playerid] = nuevaskin;
			//change
			SetPlayerSkin(playerid, nuevaskin);
			new gformat[128];
			format(gformat, sizeof gformat, "Negocio~n~Ropa: ~y~%d (Normal)~n~~w~Precio: ~g~$450 ~w~(Econ.)", nuevaskin);
			PlayerTextDrawSetString(playerid, TD_ShopRopa[playerid][1], gformat);
			return 1;
		}
		//comprar
		if (playertextid == TD_ShopRopa[playerid][4])
		{
			new skinviejo = NegocioSkin[playerid], skinnuevo = Ropa_ID[playerid];
			new id = DentroNegocio[playerid];
			if (GetPlayerCash(playerid) < 450) return SendClientMessageEx(playerid, 0xccccccff, "* No tienes 450$ para pagar la ropa %d.", skinnuevo);
			if (skinviejo == skinnuevo) return SendClientMessageEx(playerid, 0xccccccff, "* Ya estas usando la ropa %d, prueba con otra.", skinnuevo);
			SendClientMessageEx(playerid, 0xFFFFFFFF, "Compraste esta ropa por 450$. La misma se almaceno en tu inventario de {008BFF}/ropa.");
			InfoJugador[playerid][jSkin] = skinnuevo;
			ElegirRopa(playerid, skinnuevo);
			GivePlayerCash(playerid, -450, "skin negocio");
			RestarNegocio(id, 450);
			//remove textdraws
			Loop(x, 6, 0) { PlayerTextDrawHide(playerid, TD_ShopRopa[playerid][x]); }
			CancelSelectTextDraw(playerid);
			SetPosEx(playerid, NegocioPos[playerid][0], NegocioPos[playerid][1], NegocioPos[playerid][2], NegocioPos[playerid][3], NegocioInt[playerid], NegocioVW[playerid], 1);

			Loop(x, 6, 0) { PlayerTextDrawShow(playerid, TD_PantallaHG[playerid][x]); }
			ShowPlayerProgressBar(playerid, BarraExp[playerid]);
			ShowPlayerProgressBar(playerid, BarraSed[playerid]);
			ShowPlayerProgressBar(playerid, BarraHambre[playerid]);
			PlayerTextDrawShow(playerid, InfoInferior[playerid]);
			ActualizarHambre(playerid);
			ActualizarSed(playerid);
			Actualizar(playerid);
			TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
			TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
			Ropa_ID[playerid] = 0;
			SetCameraBehindPlayer(playerid);
			DentroNegocio[playerid] = -1;
			return 1;
		}
	}
	return 0;
}

stock CrearVehiculoOnJob(idTrabajoR)
{
	new d;
	for(new i=0; i<MAX_VEH_TRABAJOOS; i++)
	{
		if(VehiculoTrabajo[i][idTrabajoActivo] == 0)
		{
		    VehiculoTrabajo[i][idTrabajoActivo] = 1;
		    VehiculoTrabajo[i][idTrabajo] = idTrabajoR;
		    break;
		}
	}
	return d;
}

CMD:vehiculo(playerid,params[])
{
    if(IsPlayerInRangeOfPoint(playerid,3.0,1732.8844,702.1658,10.8203))
    {
        if (!Es_job(playerid, 4)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres Camionero.");
        if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    SetPosEx(playerid, 1982.3694,2237.1587,14.0472, 89.0889, 0, 0, 1);
		    CargarObjetos(playerid);
		}
    }
    else if(IsPlayerInRangeOfPoint(playerid,6.0,1988.9191,2231.3130,13.3260))
    {
        if (!Es_job(playerid, 4)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres Camionero.");
        if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    SetPosEx(playerid, 1720.0603,699.8188,10.8203, 359.3179, 0, 0, 1);
		    CargarObjetos(playerid);
		}
		else
		{
			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    new tmpcar = GetPlayerVehicleID(playerid);
				for(new veh=0; veh <= MAX_VEHICLES; veh++)
				{
				    for(new i = 0; i <= MAX_PLAYERS; i++)
				    {
						if (VehicleToPoint(5.0, veh, 1733.4031,710.5289,10.8203) && (GetVehicleVirtualWorld(veh) == 0))
						{
							ShowPlayerFooter(i, "~n~~n~~n~~n~~r~Hay un vehiculo cerca del porton, espera a que se mueva.");
							return 1;
						}
					}
				}
				if (IsPlayerInVehicle(playerid, tmpcar))
				{
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerInterior(playerid, 0);
					SetVehicleVirtualWorld(tmpcar, 0);
					SetVehicleInterior(tmpcar, 0);
					InfoJugador[playerid][jInterior] = 0;
					InfoJugador[playerid][jVirtualWorld] = 0;
					MoverVehiclePos(tmpcar, 1733.4031,710.5289,10.8203);
					SetVehicleZAngle(tmpcar, 356.3295);
					foreach(Player, p)
					{
					    if(IsPlayerConnectedEx(playerid))
						{
						    if (IsPlayerInVehicle(p, GetPlayerVehicleID(playerid)))
						    {
								InfoJugador[p][jInterior] = 0;
								SetPlayerInterior(p, 0);
								InfoJugador[p][jVirtualWorld] = 0;
								SetPlayerVirtualWorld(p, 0);
							}
						}
					}
					return 1;
				}
			}
		}
    }
	return 1;
}

CMD:regalarhabilidad(playerid,params[])
{
    OnDuty
    if (InfoJugador[playerid][jAdmin] >= 5)
    {
		if (sscanf(params, "s[32]d", params[0],params[1])) return _Mensaje(playerid, 3, "0", "/regalarhabilidad (carguero, aserrador, carpintero, camionero, basurero, traficante, granjero) (Nivel)");
		if (strcmp(params[0], "camionero", true) == 0)
		{
			InfoJugador[playerid][jHabilidad2][0] = params[1];
			guardar_int_mysql("cuentas", "Habilidad2_1", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad2][0]);
		}
		else if (strcmp(params[0], "traficante", true) == 0)
		{
			InfoJugador[playerid][jHabilidad2][1] = params[1];
			guardar_int_mysql("cuentas", "Habilidad2_2", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad2][1]);
		}
		else if (strcmp(params[0], "basurero", true) == 0)
		{
			InfoJugador[playerid][jHabilidad2][2] = params[1];
			guardar_int_mysql("cuentas", "Habilidad2_3", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad2][2]);
		}
		else if (strcmp(params[0], "carguero", true) == 0)
		{
			InfoJugador[playerid][jHabilidad2][3] = params[1];
			guardar_int_mysql("cuentas", "Habilidad2_4", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad2][3]);
		}
		else if (strcmp(params[0], "carpintero", true) == 0)
		{
			InfoJugador[playerid][jHabilidad2][4] = params[1];
			guardar_int_mysql("cuentas", "Habilidad2_5", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad2][4]);
		}
		else if (strcmp(params[0], "aserrador", true) == 0)
		{
			InfoJugador[playerid][jHabilidad2][5] = params[1];
			guardar_int_mysql("cuentas", "Habilidad2_6", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad2][5]);
		}
		else if (strcmp(params[0], "granjero", true) == 0)
		{
			InfoJugador[playerid][jHabilidad2][6] = params[1];
			guardar_int_mysql("cuentas", "Habilidad2_7", InfoJugador[playerid][jID], InfoJugador[playerid][jHabilidad2][6]);
		}
		new string[128];
		format(string, sizeof string, "Administracion: %s(%d) ha regalado experiencia de: '%s'.", NombreRJugador(playerid), playerid, params[0]);
	 	MensajeAdmin(string);
	}else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando ahora.");
	return 1;
}

stock RangosAdministrativos(id)
{
	new salida[30];
	switch(id)
	{
	    case 0: salida = "Jugador";
	    case 1: salida = "Ayudante";
	    case 2: salida = "Mod a Pruebas";
	    case 3: salida = "Moderador";
	    case 4: salida = "Moderador Global";
	    case 5: salida = "Administrador";
		case 6: salida = "Director";
		case 10: salida = "SubFundador";
		case 11: salida = "Developer";
		case 12: salida = "Fundador";
	}
	return salida;
}

stock EsArma(bolder)
{
	switch(bolder)
	{
	    case 21: return 1;
	    case 22: return 1;
	    case 23: return 1;
	    case 24: return 1;
	    case 25: return 1;
	    case 26: return 1;
	    case 27: return 1;
	    case 28: return 1;
	    case 29: return 1;
	    case 30: return 1;
	    case 31: return 1;
	}
	return 0;
}

stock EsDroga(bolder)
{
	switch(bolder)
	{
	    case 74: return 1;
	    case 75: return 1;
	    case 76: return 1;
	    case 77: return 1;
	    case 78: return 1;
	    case 79: return 1;
	}
	return 0;
}

stock EsCargador(bolder)
{
	switch(bolder)
	{
	    case 51..70: return 1;
	}
	return 0;
}

CMD:d(playerid,params[])
{
	if (DiscordActivo == 1)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Se encuentra deshabilitado.");
	if (InfoJugador[playerid][jDiscord] == 1)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes el canal de discord activado.");
	if (MuteadoDiscord[playerid] > 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Te encuentras muteado del canal de discord.");
	new valor[128], string[256];
	if (!CheckTimer(60, DiscordTimer[playerid]))
	{
		if (sscanf(params, "s[128]", valor)) return _Mensaje(playerid, 3, "0", "/d [Texto]");
		Loop(m, MAX_PLAYERS, 0) if (IsPlayerConnectedEx(m) && InfoJugador[m][jDiscord] == 0)
		{
		    if(CheckspamString(valor))
			{
			    if(GetSpam(valor,playerid) && !DetectSPAM(valor)) MensajeSpam(playerid,valor);
				return 0;
			}
			if (InfoJugador[playerid][jDiscordNitro] == 1)
			{
				if (InfoJugador[playerid][jApodoDiscord] == 1) format(string,sizeof string,"(( [Discord Nitro] {ff6eb9}¤ %s(%d): {FFFFFF}%s {5270AB}))",InfoJugador[playerid][jApodoDiscordNombre], playerid, valor);
				else format(string,sizeof string,"(( [Discord Nitro] {ff6eb9}¤ %s(%d): {FFFFFF}%s {5270AB}))",NombreRJugador(playerid), playerid, valor);
				SendClientMessage(m,0x5270ABFF,string);
			}
			else
			{
				if (InfoJugador[playerid][jApodoDiscord] == 1) format(string,sizeof string,"(( [Discord] {6DD175}• {5270AB}%s(%d): {FFFFFF}%s {5270AB}))",InfoJugador[playerid][jApodoDiscordNombre], playerid, valor);
				else format(string,sizeof string,"(( [Discord] {6DD175}• {5270AB}%s(%d): {FFFFFF}%s {5270AB}))",NombreRJugador(playerid), playerid, valor);
				SendClientMessage(m,0x5270ABFF,string);
			}
		}
		DiscordTimer[playerid] = gettime();
	}
	else
	{
		format(string, sizeof string, "Faltan %d segundos para que puedas enviar otro mensaje.", CheckTimer(60, DiscordTimer[playerid]));
		_Mensaje(playerid, 2, "0", string);
	}
	return 1;
}
CMD:discord(playerid, params[]) return cmd_d(playerid, params);

CMD:ddiscord(playerid)
{
    OnDuty
    if (InfoJugador[playerid][jAdmin] >= 10)
    {
		if(DiscordActivo == 1)
		{
		    DiscordActivo = 0;
		    new string[128];
		    format(string, sizeof string, "[OOC] %s %s[%d]: Ha activado el canal de discord", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid), playerid);
		    SendClientMessageToAll(0xFFB600FF, string);
		}else
		{
		    DiscordActivo = 1;
		    new string[128];
		    format(string, sizeof string, "[OOC] %s %s[%d]: Ha desactivado el canal de discord", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid), playerid);
		    SendClientMessageToAll(0xFFB600FF, string);
		}
	}else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /ddiscord.");
	return 1;
}

CMD:ddudas(playerid)
{
    OnDuty
    if (InfoJugador[playerid][jAdmin] >= 10)
    {
		if(DudasActivo == 1)
		{
		    DudasActivo = 0;
		    new string[128];
		    format(string, sizeof string, "[OOC] %s %s[%d]: Ha activado el canal de dudas", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid), playerid);
		    SendClientMessageToAll(0xFFB600FF, string);
		}else
		{
		    DudasActivo = 1;
		    new string[128];
		    format(string, sizeof string, "[OOC] %s %s[%d]: Ha desactivado el canal de dudas", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid), playerid);
		    SendClientMessageToAll(0xFFB600FF, string);
		}
	}else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /ddiscord.");
	return 1;
}


CMD:apododiscord(playerid, params[])
{
	new string[210], idjugador, apodo[50];
	if(InfoJugador[playerid][jAdmin] < 4) return 0;
	if (sscanf(params, "ds[50]", idjugador, apodo)) return _Mensaje(playerid, 3, "0", "/apododiscord [id jugador] [nuevo apodo]");
	if(InfoJugador[idjugador][jApodoDiscord] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El usuario no tiene activo el apodo en su cuenta.");
	if (!IsPlayerConnected(idjugador)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador desconectado.");
	format(string, sizeof string, "Info: {FFFFFF}%s(%d) cambio tu apodo del discord a %s.", NombreRJugador(playerid), playerid, apodo);
	SendClientMessage(idjugador, 0xccccccFF, string);
	format(string, sizeof string, "Info: {FFFFFF}Cambiaste el apodo de %s del discord a %s.", NombreRJugador(idjugador), apodo);
	SendClientMessage(playerid, 0xccccccFF, string);
	alm(InfoJugador[idjugador][jApodoDiscordNombre], apodo);
	guardar_string_mysql("cuentas", "ApodoDiscordNombre", InfoJugador[playerid][jID], InfoJugador[playerid][jApodoDiscordNombre]);
	return 1;
}

CMD:verificar(playerid,params[])
{
    OnDuty
    if (InfoJugador[playerid][jAdmin] >= 2)
    {
        if (sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "/verificar [playerid]");
        InfoJugador[params[0]][jVerificado] = 1;
		guardar_int_mysql("cuentas", "Verificado", InfoJugador[params[0]][jID], InfoJugador[params[0]][jVerificado]);
        new string[126];
        format(string, sizeof string, "Administracion: %s utilizo /verificar, Jugador: %s[%d].", NombreRJugador(playerid), NombreRJugador(params[0]),params[0]);
        MensajeAdmin(string);
        _Mensaje(params[0], 2, "0", "Has sido ascendido de [usuario comun] a [verificado].");
    }else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Revivir.");
    return 1;
}

CMD:sacarverificacion(playerid,params[])
{
    OnDuty
    if (InfoJugador[playerid][jAdmin] >= 2)
    {
        if (sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "/sacarverificacion [playerid]");
        if(InfoJugador[params[0]][jVerificado] == 0)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Este usuario no estaba verificado.");
        InfoJugador[params[0]][jVerificado] = 0;
		guardar_int_mysql("cuentas", "Verificado", InfoJugador[params[0]][jID], InfoJugador[params[0]][jVerificado]);
        new string[126];
        format(string, sizeof string, "Administracion: %s utilizo /sacarverificacion, Jugador: %s[%d].", NombreRJugador(playerid), NombreRJugador(params[0]),params[0]);
        MensajeAdmin(string);
        _Mensaje(params[0], 2, "0", "Has sido descendido a [usuario comun].");
    }else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Revivir.");
    return 1;
}

CMD:recolectar(playerid,params[])
{

    if (!Es_job(playerid, 13)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres jardinero.");
	if (!_enPos(playerid,100, -1060.9393,-1195.4661,129.6860)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes estar dentro de la zona de recolector.");
	if (EnModoTrabajo[playerid] == 13) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya estas trabajando de recolector.");
	new rand = random(sizeof(derevo));
	EnModoTrabajo[playerid] = 13;
	SetPVarInt(playerid, "Sad", 1);
 	AmmountWood[playerid] = 0;
 	PlayerTextDrawShow(playerid, TextTrabajo[playerid]);
 	SetPlayerAttachedObject(playerid,9,3026,1,-0.176000, -0.066000, 0.0000,0.0000, 0.0000, 0.0000, 1.07600, 1.079999, 1.029000);
 	SetPlayerCheckpoint(playerid,derevo[rand][0],derevo[rand][1],derevo[rand][2],3.0);
 	SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Acercate a los arboles para recolectar las manzanas en tu mochila.");
 	return 1;
}

CMD:dejarrecolectar(playerid, params[])
{
    if (!Es_job(playerid, 13)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres jardinero.");
	if (!_enPos(playerid,100, -1060.9393,-1195.4661,129.6860)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes estar dentro de la zona de recolector.");
	if(EnModoTrabajo[playerid] != 13) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas trabajando de recolector.");
	new moneysad = AmmountWood[playerid]*42;
    EnModoTrabajo[playerid] = 0;
    GivePlayerCash(playerid, moneysad, "pago jardinero");
    new string[90];
    format(string, sizeof string, "Has ganado $%s por las %d manzanas recolectadas.", diner_coma(moneysad), AmmountWood[playerid]);
	_Mensaje(playerid, 4, "D7D7D4", string);
	DisablePlayerCheckpoint(playerid);
	RemovePlayerAttachedObject(playerid, 9);
	DeletePVar(playerid, "Sad");
	PlayerTextDrawHide(playerid, TextTrabajo[playerid]);
	return 1;
}

funcion SadYablkJob(playerid)
{
    new rand = random(sizeof(derevo));
	DisablePlayerCheckpoint(playerid);
    SetPlayerCheckpoint(playerid,derevo[ rand ][ 0 ],
	                             derevo[ rand ][ 1 ],
								 derevo[ rand ][ 2 ], 3.0);
    ClearAnimations(playerid);
    DeletePVar(playerid, "Sad");
    SetPVarInt(playerid, "Sad", 1);
    TogglePlayerControllable(playerid, true);
    return 1;
}

CMD:respawnvehiculosjob(playerid)
{
    OnDuty
    if (InfoJugador[playerid][jAdmin] >= 3)
	{
        for(new i=0; i<MAX_VEH_TRABAJOOS; i++)
		{
			if(VehiculoTrabajo[i][idTrabajoActivo] == 1)
			{
			    if(IsPlayerInVehicle(playerid, VehiculoTrabajo[i][idVehiculoReal]))
			    {
			        VehiculoTrabajo[i][idTrabajoActivo] = 0;
			        DestroyVehicle(VehiculoTrabajo[i][idVehiculoReal]);
			    }
			}
		}
        new string[128];
        format(string, sizeof string, "Administracion: Respawn general de vehiculos de trabajo por %s.", NombreRJugador(playerid));
        _MensajeOOC(0xE00000FF,string);
    } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No Autorizado para este comando.");
	return 1;
}

stock Float:GetDistanceBetweenPoints(Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2)
{
        return floatsqroot(floatpower(floatabs(floatsub(x2,x)),2)+floatpower(floatabs(floatsub(y2,y)),2)+floatpower(floatabs(floatsub(z2,z)),2));
}

CMD:restarserver(playerid, params[])
{
    if(InfoJugador[playerid][jAdmin] < 11) return 1;
    if(Reinicio == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ya hay un reinicio en proceso.");
    new time;
    if (sscanf(params, "d", time))
	    return _Mensaje(playerid, 3, "0", "/restarserver [minutos]");

    if (time < 1 || time > 5)
	    return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debe ser de 1 a 5 minutos.");

	new string[210];
	format(string, sizeof string, "[OOC] [%d]%s: Reinicio programado para %d minutos.", playerid, NombreRJugador(playerid), time);
 	SendClientMessageToAll(0xFFB600FF, string);
	Reinicio = 1;
	TiempoReinicio = time;
	return 1;
}

function restart_server()
{
	print("Server Restarting...");
	return GameModeExit();
}

stock EnMinero(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 4.0, -752.0788,-371.9366,1738.3269)) { return 1; }
	return 0;
}

forward TimeMiner(playerid, minerales);
public TimeMiner(playerid, minerales)
{
	if(Picando[playerid] < 30)
	{
		Picando[playerid]++;
		if(Picando[playerid] == 30)
		{
		    Picando[playerid] = 0;
		    KillTimer(hands[playerid]);
			TogglePlayerControllable(playerid, 1);
			SetPVarInt(playerid, "IsFrozen", 1);
			ApplyAnimation(playerid,"CARRY","crry_prtial",10,7,5,1,1,1);
			StopAudioStreamForPlayer(playerid);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
			SetPlayerAttachedObject(playerid, 4, 2936, 5, 0.044377, 0.029049, 0.161334, 265.922912, 9.904896, 21.765972, 0.500000, 0.500000, 0.500000);
			SendClientMessage(playerid, 0xACC97F22A, "agarra una roca con sus manos.");
			ShowPlayerFooter(playerid, "~n~~n~~w~Deja la roca en la ~g~procesadora ~w~para recibir tu paga.");
			ConRoca[playerid] = 1;
			mineral[playerid] = minerales;
			new materiales = random(13);
			switch(materiales)
			{
			    case 1,3:
			    {
			        InfoJugador[playerid][jMateriales] += 5;
			        SendClientMessage(playerid, 0xFFFF00FF, "* Conseguiste 5 materiales y fueron sumados a tu cuenta.");
					guardar_int_mysql("cuentas", "Materiales", InfoJugador[playerid][jID], InfoJugador[playerid][jMateriales]);
				}
			}
		}
	}
	return 1;
}

CMD:pedirmaso(playerid, params[])
{
	if(!Es_job(playerid, 14)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres minero");
    if (!IsPlayerInRangeOfPoint(playerid, 2.0, 605.9418,135.0032,8.3371)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en el lugar correcto.");
    if(InfoJugador[playerid][jManoDerecha] > 0 && InfoJugador[playerid][jManoIzquierda] > 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes ambas manos ocupadas."); return 1; }
	if (InfoJugador[playerid][jManoDerecha] == 0)
	{
		InfoJugador[playerid][jManoDerecha] = 137;
		InfoJugador[playerid][jManoDerechaCant] = 1;
		PonerObjeto(playerid, 1, 137);
	}
	else if (InfoJugador[playerid][jManoDerecha] != 0)
	{
		InfoJugador[playerid][jManoIzquierda] = 137;
		InfoJugador[playerid][jManoIzquierdaCant] = 1;
		PonerObjeto(playerid, 2, 137);
	}
	ActualizarManos(playerid);
	SendClientMessage(playerid, 0xFFFF00FF, "* Tomas un maso de la mesa, ahora entra a la mina.");
	return 1;
}

funcion RemovePlayerFromVehicleEx(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetPlayerState(playerid) != PLAYER_STATE_PASSENGER) return 0;

    new Float: x, Float: y, Float: z;

    GetPlayerPos(playerid, x, y, z);

    return SetPlayerPosEx(playerid, x + 1.5, y + 1.5, z);
}

stock GetZoneNameAtCoord(Float:x, Float:y, zone[], len = sizeof(zone))
{
 	for (new i = 0; i != sizeof (NombreZona); ++i)
 	{
		if(x >= NombreZona[i][sz_Area][0] && x <= NombreZona[i][sz_Area][3] && y >= NombreZona[i][sz_Area][1] && y <= NombreZona[i][sz_Area][4])
		{
		    strunpack (zone, NombreZona[i][sz_Nombre], len);
			return i;
		}
	}
	return -1;
}

stock SetVehiclePassengersInteriorEx(vehicleid, interior_id)
{
    for(new i; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(IsPlayerInVehicle(i, vehicleid))
            {
                SetPlayerInterior(i, interior_id);
            }
        }
    }
    return SetVehicleInterior(vehicleid, interior_id);
}

stock SetVehiclePassengersVWEx(vehicleid, vw_id)
{
    for(new i; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(IsPlayerInVehicle(i, vehicleid))
            {
                SetPlayerVirtualWorld(i, vw_id);
            }
        }
    }
    return SetVehicleVirtualWorld(vehicleid, vw_id);
}


CMD:darsobreadmin(playerid,params[])
{
    if(InfoJugador[playerid][jAdmin] < 11) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /darsobreadmin.");
    new range[50];
    if (sscanf(params, "ds[50]", params[0], range)) { return _Mensaje(playerid, 3, "0", "/darsobreadmin [id jugador] [sobrenombre]."); }
    alm(InfoJugador[params[0]][jSobreAdmin], range);
    InfoJugador[params[0]][jSobreAdminint] = 1;
	guardar_string_mysql("cuentas", "SobreAdmin", InfoJugador[params[0]][jID], InfoJugador[params[0]][jSobreAdmin]);
	guardar_int_mysql("cuentas", "SobreAdminint", InfoJugador[params[0]][jID], InfoJugador[params[0]][jSobreAdminint]);
	return 1;
}

CMD:sacarsobreadmin(playerid,params[])
{
    if(InfoJugador[playerid][jAdmin] < 11) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /darsobreadmin.");
    if (sscanf(params, "ds[50]", params[0])) { return _Mensaje(playerid, 3, "0", "/darsobreadmin [id jugador] [sobrenombre]."); }
    InfoJugador[params[0]][jSobreAdminint] = 0;
	guardar_int_mysql("cuentas", "SobreAdminint", InfoJugador[params[0]][jID], InfoJugador[params[0]][jSobreAdminint]);
	return 1;
}

CMD:mercados(playerid, params[])
{
	VerMercados(playerid);
	return 1;
}

stock VerMercados(playerid)
{
	new string[550*5], salida[120];
	for(new i = 0; i != MAX_MERCADOS; i ++) if(MercadoData[i][mExists])
	{
	    if(MercadoData[i][mConquistado] == 0)
	    {
	        switch(MercadoData[i][mBajoConquista])
	        {
	            case 0: format(salida, sizeof(salida), "Sin conquistar");
	            case 1: format(salida, sizeof(salida), "{ff5a00}Bajo ataque de %s", InfoFamilia[InfoJugador[MercadoData[i][mQuienEstaConquistando]][jFamMiembro]][fNombre]);
			}
		}
		if(MercadoData[i][mConquistado] == 1)
		{
		    format(salida, sizeof(salida), "Dominado por %s\t{FFFFFF}{1EB032}%s",InfoFamilia[MercadoData[i][mIDFamilia]][fNombre], generarTiempo(MercadoData[i][mTiempoConquista]));
		}
	    format(string, sizeof string, "%s(%d) - %s\t%s\n", string, i, MercadoData[i][mLocalizacion], salida);
	    ShowPlayerDialog(playerid, 0000, DIALOG_STYLE_TABLIST, "Mercados > Lista", string, "?", "");
	}
	return 1;
}


CMD:crearmercado(playerid, params[])
{
	static
	    id = -1;
    if (InfoJugador[playerid][jAdmin] < 11) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Usted no tiene acceso a este comando.");
	id = Mercado_Crear(playerid);
	if (id == -1)
	    return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El servidor alcanzo el limite de mercados.");
	new string[210];
    format(string, sizeof string, "Administracion: %s(%d) ha creado el mercado negro [ID:%d].", NombreRJugador(playerid), playerid, id);
	MensajeAdmin(string);
	mysql_tquery(DBngrp, "SELECT * FROM `mercados` ORDER BY `ID` ASC", "CargarMercado");
	return 1;
}

CMD:recargarmysql(playerid)
{
    if(InfoJugador[playerid][jAdmin] < 11) return 0;
    Dialog_Show(playerid, MySQLRecargar, DIALOG_STYLE_LIST, "Menu MySQL", "Plantas\nVehiculos\nCasas\nNegocios\nMuebles\nFamilias\nPuertas\nIncendios\nFabricas\nCajeros\nMercados\nTerritorios\nEstacionamientos\nReferidos", "Aceptar", "Volver");
    return 1;
}

Dialog:MySQLRecargar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		SendClientMessageToAll(0xFFB600FF, "[OOC] Servidor: Se estan recargando unas propiedades puede dar un poco de lag, disculpe la molestia");
	    switch(listitem)
	    {
	        case 0: mysql_tquery(DBngrp, "SELECT * FROM `plantas` ORDER BY `ID` ASC", "CargarPlantas");
	        case 1: mysql_tquery(DBngrp, "SELECT * FROM `vehiculos` ORDER BY `ID` ASC", "CargarVehiculos");
	        case 2: mysql_tquery(DBngrp, "SELECT * FROM `casas` ORDER BY `ID` ASC", "CargarCasas");
	        case 3: mysql_tquery(DBngrp, "SELECT * FROM `negocios` ORDER BY `ID` ASC", "CargarNegocios");
	        case 4: mysql_tquery(DBngrp, "SELECT * FROM `muebles` ORDER BY `ID` ASC", "CargarMuebles");
	        case 5: mysql_tquery(DBngrp, "SELECT * FROM `familias` ORDER BY `ID` ASC", "CargarFamilias");
	        case 6: mysql_tquery(DBngrp, "SELECT * FROM `puertas` ORDER BY `ID` ASC", "CargarPuertas");
	        case 7: mysql_tquery(DBngrp, "SELECT * FROM `incendios` ORDER BY `ID` ASC", "CargarIncendios");
	        case 8: mysql_tquery(DBngrp, "SELECT * FROM `fabricas` ORDER BY `ID` ASC", "CargarFabricas");
	        case 9: mysql_tquery(DBngrp, "SELECT * FROM `cajeros` ORDER BY `ID` ASC", "CargarCajeros");
         	case 10: mysql_tquery(DBngrp, "SELECT * FROM `mercados` ORDER BY `ID` ASC", "CargarMercado");
	        case 11: mysql_tquery(DBngrp, "SELECT * FROM `territorios` ORDER BY `ID` ASC", "CargarTerritorios", "");
	        case 12: mysql_tquery(DBngrp, "SELECT * FROM `estacionamientos` ORDER BY `ID` ASC", "Estacionamientos_Load", "");
			case 13: mysql_tquery(DBngrp, "SELECT * FROM `vehiculos` ORDER BY `ID` ASC", "CargarReferidos");
	    }
	}
	return 1;
}

CMD:editarmercado(playerid, params[])
{
    static
	    id,
	    type[24],
	    string[210];

	if (InfoJugador[playerid][jAdmin] < 11) return 0;

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	_Mensaje(playerid, 3, "0", "/editarfabrica [id mercado] [opcion]");
	    SendClientMessage(playerid, 0xccccccFF, "[OPCIONES]:{FFFFFF} lugar, resetear, borrar.");
		return 1;
	}
	if ((id < 0 || id >= MAX_MERCADOS) || !MercadoData[id][mExists])
	    return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Especificaste un ID invalido.");

    if (!strcmp(type, "lugar", true))
	{
        GetPlayerPos(playerid, MercadoData[id][mPos][0], MercadoData[id][mPos][1], MercadoData[id][mPos][2]);
		GetPlayerFacingAngle(playerid, MercadoData[id][mPos][3]);

		Mercado_Refresh(id);
		Mercado_Save(id);
		format(string, sizeof string, "Administracion: %s(%d) ajusto la posicion del mercado negro [ID:%d].", NombreJugador(playerid), playerid, id);
		MensajeAdmin(string);
	}
	else if(!strcmp(type, "resetear", true))
	{
	    MercadoData[id][mConquistado] = 0;
		format(MercadoData[id][mQuienConquisto], 80, "Nadie");
		MercadoData[id][mIDFamilia] = -1;
		MercadoData[id][mTiempoConquista] = 0;
		Mercado_Refresh(id);
		Mercado_Save(id);
		foreach (new i : Player) if (InfoJugador[i][pMercado] == MercadoData[id][mID])
		{
			SetPosEx(i, MercadoData[id][mPos][0], MercadoData[id][mPos][1], MercadoData[id][mPos][2], MercadoData[id][mPos][3], 0, 0, 1);
			format(string, sizeof string, "Info: {FFFFFF}El administrador %s reseteo el tiempo de la faccion y se te expulso del interior.");
			SendClientMessage(i, 0xccccccFF, string);
		}
		format(string, sizeof string, "Administracion: %s(%d) reseteo la fabrica [ID:%d] y esta sin conquista.", NombreJugador(playerid), playerid, id);
		MensajeAdmin(string);
	}
	else if(!strcmp(type, "borrar", true))
	{
	    Mercado_Delete(id);
		format(string, sizeof string, "Administracion: %s(ID:%d) ha eliminado el mercado negro [ID:%d].", NombreRJugador(playerid), playerid, id);
		MensajeAdmin(string);
	}
	return 1;
}

CMD:irmercado(playerid, params[])
{
	static mid = -1, string[210];
	if (!IsPlayerConnected(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Usted necesita estar conectado para poder utilzar cualquier comando.");
	OnDuty
    if (InfoJugador[playerid][jAdmin] < 4) return 0;
    if (sscanf(params, "i", mid)) return _Mensaje(playerid, 3, "0", "/irmercado [mercado id]");
    if ((mid < 0 || mid >= MAX_MERCADOS) || !MercadoData[mid][mExists]) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~ID de mercado erronea.");
    SetPlayerVirtualWorld(playerid, 0);
    SetPlayerInterior(playerid, 0);
    SetPlayerPosEx(playerid, MercadoData[mid][mPos][0], MercadoData[mid][mPos][1], MercadoData[mid][mPos][2]);
    format(string, sizeof string, "Administracion: %s(%d) fue hasta la posicion del mercado de %s(%d).", NombreRJugador(playerid), playerid, MercadoData[mid][mLocalizacion], mid);
    MensajeAdmin(string);
    return 1;
}

CMD:irfabrica(playerid, params[])
{
	static fid = -1, string[210];
	if (!IsPlayerConnected(playerid)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Usted necesita estar conectado para poder utilzar cualquier comando.");
    if (InfoJugador[playerid][jAdmin] < 4) return 0;
    OnDuty
    if (sscanf(params, "i", fid)) return _Mensaje(playerid, 3, "0", "/irfabrica [fabrica id]");
	if (fid < 1 || fid > totalfabricas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalfabricas);
    SetPlayerVirtualWorld(playerid, 0);
    SetPlayerInterior(playerid, 0);
    SetPlayerPosEx(playerid, InfoFabrica[fid][fabricaPos][0], InfoFabrica[fid][fabricaPos][1], InfoFabrica[fid][fabricaPos][2]);
    format(string, sizeof string, "Administracion: %s(%d) fue hasta la posicion del mercado de %s(%d).", NombreRJugador(playerid), playerid, InfoFabrica[fid][fabricaLocalizacion], fid);
    MensajeAdmin(string);
    return 1;
}

CMD:conquistar(playerid)
{
	new string[256];

	//mercados negros
	if (Mercado_Nearest(playerid) != -1)
	{
		new acceso = 0, idfamilia = InfoJugador[playerid][jFamMiembro];
		if (idfamilia == 0) return ShowInfoForPlayer(playerid, "No eres miembro de una banda ilegal.", 2000);
		if (InfoJugador[playerid][jFamRango] == InfoFamilia[idfamilia][fMaxRangos]) { acceso = 1; }
		else { if (InfoJugador[playerid][jFamLider] == idfamilia) acceso = 1; }
		if (acceso == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres lider de familia o rango maximo.");
		if (InfoFamilia[idfamilia][fTipo] != 2 && InfoFamilia[idfamilia][fTipo] != 1) return ShowPlayerFooter(playerid, "Solo banda ilegales pueden conquistar.", 2000);
		new id = Mercado_Nearest(playerid), members = 0;
		if (MercadoData[id][mConquistado] != 0) return ShowPlayerFooter(playerid, "No puedes conquistar este mercado, ya se encuentra en posesion de otra familia.", 2000);
		if (MercadoData[id][mBajoConquista] == 1) return ShowPlayerFooter(playerid, "Ya se encuentran conquistando este mercado negro.", 2000);
		//detector de miembros para conquistar
		foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jFamMiembro] == idfamilia)
		{
			if (PlayerToPoint(5.0, playerid2, MercadoData[id][mPos][0], MercadoData[id][mPos][1], MercadoData[id][mPos][2]) && (GetPlayerVirtualWorld(playerid2) == 0))
			{
				members++;
			}
		}
		if (members < 2) return ShowPlayerFooter(playerid, "No puedes conquistar porque necesitas mas de 5 miembros en el lugar.", 2000);
		//mensaje para todas las mafias y pandillas:
		format(string, sizeof string, "Mercado negro de~n~~r~%s~n~~w~Bajo ataque de ~y~%s~r~~n~1%% de proceso.", MercadoData[id][mLocalizacion], InfoFamilia[idfamilia][fNombre]);
		foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jFamMiembro] == idfamilia)
		{
			PlayerTextDrawShow(playerid2, ConquistaMercado[playerid]);
			PlayerTextDrawSetString(playerid2, ConquistaMercado[playerid], string);
		}
		//variables y mas
		MercadoData[id][mBajoConquista] = 1;
		MercadoData[id][mQuienEstaConquistando] = playerid;
		ConquistandoMercado[playerid] = id;
		format(string, sizeof string, "Administracion: La familia %s(%d) en nombre de %s(%d) trata de conquistar el Mercado (%d).", InfoFamilia[InfoJugador[playerid][jFamMiembro]][fNombre], InfoJugador[playerid][jFamMiembro], NombreRJugador(playerid), playerid, id);
		MensajeAdmin(string);
		format(string, sizeof string, "(( [Familia] %s(%d) comenzo a conquistar el Mercado (%d) de %s, ?No lo dejes morir! ))", NombreRJugador(playerid), playerid, id, MercadoData[id][mLocalizacion]);
		SendFamilyMessage(idfamilia, 0x6BBFA0FF, string);
		return 1;
	}

	//fabricas
	if (Fabrica_Nearest(playerid) != -1)
	{
		new acceso = 0, idfamilia = InfoJugador[playerid][jFamMiembro];
		if (idfamilia == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres miembro de familia.");
		if (InfoJugador[playerid][jFamRango] == InfoFamilia[idfamilia][fMaxRangos]) { acceso = 1; }
		else { if (InfoJugador[playerid][jFamLider] == idfamilia) acceso = 1; }
		if (acceso == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres lider de familia o rango maximo.");
		if (InfoFamilia[idfamilia][fTipo] != 2 && InfoFamilia[idfamilia][fTipo] != 1) return ShowInfoForPlayer(playerid, "Solo mafias y pandillas pueden conquistar.", 2000);
		new id = Fabrica_Nearest(playerid), members = 0;
		if (InfoFabrica[id][fabricaConquistada] != 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes conquistar esta fabrica, ya se encuentra en posesion de otra faccion.");
		//detector de miembros para conquistar
		foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jFamMiembro] == idfamilia)
		{
			if (PlayerToPoint(5.0, playerid2, InfoFabrica[id][fabricaPos][0], InfoFabrica[id][fabricaPos][1], InfoFabrica[id][fabricaPos][2]) && (GetPlayerVirtualWorld(playerid2) == 0))
			{
				members++;
			}
		}
		if (members < 2) return ShowPlayerFooter(playerid, "No puedes conquistar porque necesitas mas de 5 miembros en el lugar.", 2000);
		//
		InfoFabrica[id][fabricaConquistada] = 1;
		alm(InfoFabrica[id][fabricaQuienConquisto], InfoFamilia[idfamilia][fNombre]);
		InfoFabrica[id][fabricaIDFaccion] = idfamilia;
		InfoFabrica[id][fabricaTiempoConquista] = 3600;
		Fabrica_Refresh(id);
		Fabrica_Save(id);
		format(string, sizeof string, "Administracion: La faccion %s(%d) conquisto la fabrica de armas (ID:%d).", InfoFamilia[idfamilia][fNombre], idfamilia, id);
		MensajeAdmin(string);
		format(string, sizeof string, "(( [Familia] Tu faccion conquisto una fabrica de armas ubicada en %s. ))", InfoFabrica[id][fabricaLocalizacion]);
		SendFamilyMessage(idfamilia, 0x6BBFA0FF, string);
		return 1;
	}

	//territorios
	if (Territorio_ID(playerid) != -1)
	{
		new id = Territorio_ID(playerid), familia = InfoJugador[playerid][jFamMiembro];
		if (Es_Pandilla_Mafia(playerid) == 0) return ShowInfoForPlayer(playerid, "No eres miembro de una banda o mafia.", 2000);
		if (InfoTerritorio[id][tBandaID] == familia) return ShowInfoForPlayer(playerid, "El territorio ya te pertenece.", 2000);
		if (InfoTerritorio[id][tBajoConquista] == 1) return ShowInfoForPlayer(playerid, "El territorio ya se encuentra bajo conquista.", 2000);
		if (InfoTerritorio[id][tTiempoConquista] != 0) return SendClientMessageEx(playerid, 0xccccccff, "* Debes esperar %s para conquistar este territorio.", Segundos_tiempo(InfoTerritorio[id][tTiempoConquista]));
		//detector de miembros para conquistar
		new members = Count_Zona_Player(familia, InfoTerritorio[id][tLugarX], InfoTerritorio[id][tLugarY], InfoTerritorio[id][tLugarZ], 0, 0);
		if (members < 2) return ShowInfoForPlayer(playerid, "Deben haber 2 o mas miembros de la banda pisando el territorio.", 2000);
		InfoTerritorio[id][tBajoConquista] = 1;
		InfoTerritorio[id][tBajoDominador] = familia;
		InfoTerritorio[id][tTiempoAtaque] = 0;
		SendClientMessage(playerid, 0xFFFF00FF, "* Empezaste el ataque con tus aliados ¡Protegete!.");
		Articulos_Territorio(id);
		SetPlayerGangZones(id);
		GangZoneDestroy(InfoTerritorio[id][tGang]);
		InfoTerritorio[id][tGang] = GangZoneCreate(InfoTerritorio[id][tLugarX] - 60, InfoTerritorio[id][tLugarY] - 60, InfoTerritorio[id][tLugarX] + 60, InfoTerritorio[id][tLugarY] + 60);
		new Float:Poss[3];
		GetPlayerPos(playerid, Poss[0], Poss[1], Poss[2]);
		foreach(Player, p) if (IsPlayerConnectedEx(p))
		{
		    if (Es_Pandilla_Mafia(p))
			{
				format(string, sizeof string, "¡Banda %s quieren conquistar una zona! {FFFF00}Ve a defender.", InfoFamilia[familia][fNombre]);
				SendClientMessage(p,-1, string);
			}
			if (InfoJugador[p][jFamMiembro] == familia)
			{
				TextDrawShowForPlayer(p, Box_Conquista);
				Update_Conquista_Territorio(p, id);
				PlayerTextDrawShow(p, TD_Conquista[p]);
				Player_Color_Conquista[p] = 135;
				new r, g, b, a;
				HexToRGBA(InfoFamilia[familia][fColor], r, g, b, a);
				SetPlayerColor(p, RGBAToHex(r, g, b, 135));
			}
		}
		new zone[MAX_ZONE_NAME];
		GetPlayer3DZone(playerid, zone, sizeof zone);
		format(string, sizeof string, "ATENCION: La banda %s empezo la conquista de un territorio en %s [/spec %d].", InfoFamilia[familia][fNombre], zone, playerid);
		MensajeAdmin(string);
		format(string, sizeof string, "CENTRAL: Informe recibido la banda apodada %s esta cometiendo diversos disturbios en %s.", InfoFamilia[familia][fNombre], zone);
		SendMessageFaction(0x9B9BFFff, string, 1, 2, 3);
		format(string, sizeof string, "** [FR 911]: Asistir con cuidado, se requiere diversas unidades en el sitio.");
		SendMessageFaction(0x9B9BFFff, string, 1, 2, 3);
		return 1;
	}
	return 1;
}

Update_Conquista_Territorio(playerid, id)
{
	new message[145];
	format(message, sizeof message, "Conquista:_%s", TimeConvert(TiempoParaConquistar-InfoTerritorio[id][tTiempoAtaque]));
	PlayerTextDrawSetString(playerid, TD_Conquista[playerid], message);
}

Es_Pandilla_Mafia(playerid)
{
	new familia = InfoJugador[playerid][jFamMiembro];
	if (familia == 0) return 0;
	if (InfoFamilia[familia][fTipo] == 1 || InfoFamilia[familia][fTipo] == 2) return 1;
	return 0;
}
/* REPARAR
UpdateGangZoneColor(index)
{
 	if (InfoTerritorio[index][tBajoConquista] == 1)
	{
		new flash_color, r, g, b, a;
		HexToRGBA(InfoFamilia[ InfoTerritorio[index][tBandaID] ][fColor], r, g, b, a);
		flash_color = RGBAToHex(r, g, b, 135);

		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if (Es_Pandilla_Mafia(i) == 1 || Es_Banda(i, 1, 2, 3))
				{
					GangZoneFlashForPlayer(i, InfoTerritorio[index][tGang], flash_color);
					InfoTerritorio[index][tGang] = CreateDynamicRectangle(InfoTerritorio[index][tLugarX] - 60, InfoTerritorio[index][tLugarY] - 60, InfoTerritorio[index][tLugarX] + 60, InfoTerritorio[index][tLugarY] + 60);
				}
			}
		}
	}
	else
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if (Es_Pandilla_Mafia(i) == 1 || Es_Banda(i, 1, 2, 3))
				{
					GangZoneShowForPlayer(i, InfoTerritorio[index][tGang], InfoFamilia[InfoTerritorio[index][tBandaID]][fColor]);
				}
			}
		}
	}
	return 1;
}
*/
Count_Zona_Player(familia, Float: X, Float: Y, Float: Z, Interior, VirtualWorld)
{
	new members = 0;
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jFamMiembro] == familia)
	{
		if (PlayerToPoint(60.0, playerid2, X, Y, Z) && GetPlayerInterior(playerid2) == Interior && GetPlayerVirtualWorld(playerid2) == VirtualWorld)
		{
			members++;
		}
	}
	return members;
}

stock Mercado_Crear(playerid)
{
    new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_MERCADOS; i ++)
		{
	    	if (!MercadoData[i][mExists])
		    {
		        MercadoData[i][mExists] = true;
		        MercadoData[i][mPos][0] = x;
    	        MercadoData[i][mPos][1] = y;
    	        MercadoData[i][mPos][2] = z;
    	        MercadoData[i][mPos][3] = angle;

    	        MercadoData[i][mInt][0] = 316.5442;
    	        MercadoData[i][mInt][1] = -169.9221;
    	        MercadoData[i][mInt][2] = 999.6010;
    	        MercadoData[i][mInt][3] = 358.2174;
    	        MercadoData[i][mInterior] = 6;
    	        MercadoData[i][mVW] = i + 10;

    	        MercadoData[i][mBajoConquista] = 0;
    	        MercadoData[i][mQuienEstaConquistando] = INVALID_PLAYER_ID;

    	        new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(MercadoData[i][mLocalizacion],80,zone);

				MercadoData[i][mConquistado] = 0;
				format(MercadoData[i][mQuienConquisto], 120, "Nadie");
				MercadoData[i][mIDFamilia] = -1;
				MercadoData[i][mTiempoConquista] = 0;
				MercadoData[i][mTiempoConquista2] = 0;
				Mercado_Refresh(i);
				new query[800];
				mysql_format(DBngrp, query, sizeof query, "INSERT INTO mercados (Pos_X,Pos_Y,Pos_Z,Pos_A,Interior_X,Interior_Y,Interior_Z,Interior_A,BajoConquista,QuienEstaConquistando,InteriorID,InteriorVW,Localizacion,Conquistado,QuienConquisto,Familia,TiempoConquista,TiempoConquista2) VALUES \
				('%f','%f','%f','%f','%f','%f','%f','%f','%d','%d','%d','%d','%s','%d','%s','%d','%d','%d')",
				MercadoData[i][mPos][0],
				MercadoData[i][mPos][1],
				MercadoData[i][mPos][2],
				MercadoData[i][mPos][3],
				MercadoData[i][mInt][0],
				MercadoData[i][mInt][1],
				MercadoData[i][mInt][2],
				MercadoData[i][mInt][3],
				MercadoData[i][mBajoConquista],
				MercadoData[i][mQuienEstaConquistando],
				MercadoData[i][mInterior],
				MercadoData[i][mVW],
				MercadoData[i][mLocalizacion],
				MercadoData[i][mConquistado],
				MercadoData[i][mQuienConquisto],
				MercadoData[i][mIDFamilia],
				MercadoData[i][mTiempoConquista],
				MercadoData[i][mTiempoConquista2]);
				mysql_tquery(DBngrp, query, "OnMercadoCreated", "i", i);
				return i;
			}
		}
	}
	return -1;
}

forward OnMercadoCreated(id);
public OnMercadoCreated(id)
{
    totalmercados++;
	MercadoData[id][mID] = cache_insert_id();
	cache_unset_active();
    return 1;
}


stock Mercado_Save(mid)
{
    static
	    query[2048];

	mysql_format(DBngrp, query, sizeof query, "UPDATE `mercados` SET `Pos_X` = '%.4f', `Pos_Y` = '%.4f', `Pos_Z` = '%.4f', `Pos_A` = '%.4f', `Interior_X` = '%.4f', `Interior_Y` = '%.4f', `Interior_Z` = '%.4f', `Interior_A` = '%.4f', `BajoConquista` = '%d', `QuienEstaConquinstado` = '%d', `InteriorID` = '%d', `InteriorVW` = '%d', `Localizacion` = '%s', `Conquistado` = '%d', `QuienConquisto` = '%s', `Familia` = '%d', `TiempoConoquista` = '%d', `TiempoConquista2` = '%d' WHERE `ID` = '%d'",
	    MercadoData[mid][mPos][0],
	    MercadoData[mid][mPos][1],
	    MercadoData[mid][mPos][2],
	    MercadoData[mid][mPos][3],
	    MercadoData[mid][mInt][0],
	    MercadoData[mid][mInt][1],
	    MercadoData[mid][mInt][2],
	    MercadoData[mid][mInt][3],
	    MercadoData[mid][mBajoConquista],
	    MercadoData[mid][mQuienEstaConquistando],
	    MercadoData[mid][mInterior],
	    MercadoData[mid][mVW],
        MercadoData[mid][mLocalizacion],
        MercadoData[mid][mConquistado],
        MercadoData[mid][mQuienConquisto],
        MercadoData[mid][mIDFamilia],
        MercadoData[mid][mTiempoConquista],
        MercadoData[mid][mTiempoConquista2],
	    MercadoData[mid][mID]
	);
	return mysql_tquery(DBngrp, query);
}

Mercado_Refresh(mid)
{
    if (mid != -1 && MercadoData[mid][mExists])
    {
		if (IsValidDynamic3DTextLabel(MercadoData[mid][mText3D]))
		{
			DestroyDynamic3DTextLabel(MercadoData[mid][mText3D]);
			MercadoData[mid][mText3D] = Text3D:INVALID_3DTEXT_ID;
		}
		if (IsValidDynamic3DTextLabel(MercadoData[mid][mText3D2]))
		{
			DestroyDynamic3DTextLabel(MercadoData[mid][mText3D2]);
			MercadoData[mid][mText3D2] = Text3D:INVALID_3DTEXT_ID;
		}
		if (IsValidDynamic3DTextLabel(MercadoData[mid][mTextC]))
		{
			DestroyDynamic3DTextLabel(MercadoData[mid][mTextC]);
			MercadoData[mid][mTextC] = Text3D:INVALID_3DTEXT_ID;
		}
        if (IsValidDynamicPickup(MercadoData[mid][mPickup]))
		    DestroyDynamicPickup(MercadoData[mid][mPickup]);

    	if (IsValidDynamicPickup(MercadoData[mid][mPickup2]))
		    DestroyDynamicPickup(MercadoData[mid][mPickup2]);

		new string[1200];

		if(!MercadoData[mid][mConquistado])
		{
		    format(string, sizeof string, "Mercado de %s(%d)\n\n{FFFFFF}Presiona {FFFF00}'H'", MercadoData[mid][mLocalizacion], mid);
		    MercadoData[mid][mText3D] = CreateDynamic3DTextLabel(string, 0x3F84B7FF, MercadoData[mid][mPos][0], MercadoData[mid][mPos][1], MercadoData[mid][mPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		}
		else
		{
		    format(string, sizeof string, "Mercado de %s(%d)\n{FFFFFF}Dominado por {1EB032}%s\n\n{FFFFFF}Presiona {FFFF00}'H'", MercadoData[mid][mLocalizacion], mid, MercadoData[mid][mQuienConquisto]);
		    MercadoData[mid][mText3D] = CreateDynamic3DTextLabel(string, 0x3F84B7FF, MercadoData[mid][mPos][0], MercadoData[mid][mPos][1], MercadoData[mid][mPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		}
		MercadoData[mid][mText3D2] = CreateDynamic3DTextLabel("SALIDA\n\nPresiona {FFFF00}'H'", 0xFFFFFFFF, MercadoData[mid][mInt][0], MercadoData[mid][mInt][1], MercadoData[mid][mInt][2], 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, MercadoData[mid][mVW], MercadoData[mid][mInterior]);
		format(string, sizeof string, "Mercado Negro de %s\n{FFFFFF}Presiona {FFFF00}'N'", MercadoData[mid][mLocalizacion]);
		MercadoData[mid][mTextC] = CreateDynamic3DTextLabel(string, 0xff6000FF, 312.5570,-165.7090,999.6010, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, MercadoData[mid][mVW], MercadoData[mid][mInterior]);
		MercadoData[mid][mPickup] = CreateDynamicPickup(19197, 23, MercadoData[mid][mPos][0], MercadoData[mid][mPos][1], MercadoData[mid][mPos][2] + 0.3, 0, 0);
		MercadoData[mid][mPickup2] = CreateDynamicPickup(19197, 23, MercadoData[mid][mInt][0], MercadoData[mid][mInt][1], MercadoData[mid][mInt][2], MercadoData[mid][mVW], MercadoData[mid][mInterior]);
		_MapIcon(MercadoData[mid][mPos][0], MercadoData[mid][mPos][1], MercadoData[mid][mPos][2], 23);
	}
	return 1;
}

stock Mercado_Delete(mid)
{
	if (mid != -1 && MercadoData[mid][mExists])
	{
	    new
	        string[64];

		mysql_format(DBngrp, string, sizeof(string), "DELETE FROM `mercados` WHERE `ID` = '%d'", MercadoData[mid][mID]);
		mysql_tquery(DBngrp, string);

		if (IsValidDynamic3DTextLabel(MercadoData[mid][mText3D]))
		{
			DestroyDynamic3DTextLabel(MercadoData[mid][mText3D]);
			MercadoData[mid][mText3D] = Text3D:INVALID_3DTEXT_ID;
		}
		if (IsValidDynamic3DTextLabel(MercadoData[mid][mText3D2]))
		{
			DestroyDynamic3DTextLabel(MercadoData[mid][mText3D2]);
			MercadoData[mid][mText3D2] = Text3D:INVALID_3DTEXT_ID;
		}
		if (IsValidDynamic3DTextLabel(MercadoData[mid][mTextC]))
		{
			DestroyDynamic3DTextLabel(MercadoData[mid][mTextC]);
			MercadoData[mid][mTextC] = Text3D:INVALID_3DTEXT_ID;
		}
        if (IsValidDynamicPickup(MercadoData[mid][mPickup]))
		    DestroyDynamicPickup(MercadoData[mid][mPickup]);

    	if (IsValidDynamicPickup(MercadoData[mid][mPickup2]))
		    DestroyDynamicPickup(MercadoData[mid][mPickup2]);

	    MercadoData[mid][mExists] = false;
	    MercadoData[mid][mID] = 0;
	}
	return 1;
}


Mercado_Nearest(playerid)
{
    Loop(id, totalmercados, 1) if (MercadoData[id][mExists] && _enPos(playerid, 2.0, MercadoData[id][mPos][0], MercadoData[id][mPos][1],MercadoData[id][mPos][2]))
	{
		if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
			return id;
	}
	return -1;
}

stock generarTiempo(_segundos)
{
    enum enum@tiempo
    {
        plural[12],
        singular[12],
        cantidad
    }
    static
        tiempo[5][enum@tiempo] =
        {
            {{"meses"}, {"mes"}, 2592000},
            {{"dias"}, {"dia"}, 86400},
            {{"horas"}, {"hora"}, 3600},
            {{"minutos"}, {"minuto"}, 60},
            {{"segundos"}, {"segundo"}, 1}
        },
        tmp[64];

    if(_segundos < 0)
        return format(tmp, sizeof tmp, "desconocido"), tmp;

    if(_segundos < tiempo[(sizeof(tiempo)-2)][cantidad])
        return format(tmp, sizeof tmp, "%d %s", _segundos, tiempo[(sizeof(tiempo)-1)][((_segundos != 1)?(enum@tiempo:plural):(enum@tiempo:singular))]), tmp;

    for(new tmpid = 0; tmpid < sizeof(tiempo)-1; tmpid++)
    {
        if(_segundos >= tiempo[tmpid][cantidad])
        {
            new t@tmp[2];
            t@tmp[0] = floatround((_segundos/tiempo[tmpid][cantidad]), floatround_floor);
            t@tmp[1] = floatround((_segundos-(t@tmp[0]*tiempo[tmpid][cantidad]))/tiempo[tmpid+1][cantidad], floatround_floor);

            format(tmp, sizeof tmp, "%d %s con %d %s", t@tmp[0], tiempo[tmpid][((t@tmp[0] != 1)?(enum@tiempo:plural):(enum@tiempo:singular))], t@tmp[1], tiempo[tmpid+1][((t@tmp[1] != 1)?(enum@tiempo:plural):(enum@tiempo:singular))]);

            break;
        }
    }
    return tmp;
}

CMD:muteardiscord(playerid,params[])
{
    if (InfoJugador[playerid][jAdmin] >= 1)
	{
	    if (sscanf(params, "dds[50]", params[0],params[1], params[2])) return _Mensaje(playerid, 3, "0", "/muteardiscord [id jugador][Tiempo en minutos 0 = desmute] [razon]");
	    if(MuteadoDiscord[playerid] <= 0 && params[1] > 0)
		{
			new string[128];
	   		format(string, sizeof string, "El jugador %s(%i) fue muteado del canal discord, razon: %s.", NombreRJugador(params[0]), params[0], params[2]);
	     	SendClientMessageToAll(0xAA3333FF,string);
	     	format(string, sizeof string, "Administrador %s(%d), tiempo %d minutos.", NombreRJugador(playerid), playerid, params[1]);
            MensajeAdmin(string);
	      	format(string, sizeof string, "%s te ha muteado el canal de discord por mal uso durante %d minutos.", NombreRJugador(playerid), params[1]);
	       	_Mensaje(params[0], 4, "33CCFF", string);
	       	SendClientMessageEx(params[0], 0xccccccFF, "Info: {FFFFFF}Se te desconto $%s por el muteo del canal discord.", diner_coma(params[1]*200));
            GivePlayerCash(params[0], -params[1]*200, "muteo-discord");
	        MuteadoDiscord[params[0]] = params[1];
		}else if(MuteadoDiscord[playerid] > 0 &&  params[1] == 0)
		{
            new string[128];
	      	format(string, sizeof string, "%s te ha desmuteado del canal de discord.", NombreRJugador(playerid));
	       	_Mensaje(params[0], 4, "33CCFF", string);
	       	format(string, sizeof string, "Administracion: %s(%d) ha desmuteado del discord a %s, razon: %s.", NombreRJugador(playerid), playerid, NombreRJugador(params[0]), params[2]);
            MensajeAdmin(string);
	        MuteadoDiscord[params[0]] = 0;
		}
	}else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /muteardiscord.");
	return 1;
}

CMD:saciar(playerid,params[])
{
    if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /saciar.");
    OnDuty
    if (sscanf(params, "u", params[0])) return _Mensaje(playerid, 3, "0", "/saciar [id jugador]");
    InfoJugador[params[0]][jHambre] = MAX_HAMBRE;
    InfoJugador[params[0]][jSed] = MAX_SED;
	guardar_int_mysql("cuentas", "Sed", InfoJugador[params[0]][jID], InfoJugador[params[0]][jSed]);
	guardar_int_mysql("cuentas", "Hambre", InfoJugador[params[0]][jID], InfoJugador[params[0]][jHambre]);
    new string[90];
    format(string, sizeof string, "%s te ha saciado el hambre.", NombreRJugador(playerid));
   	_Mensaje(playerid, 4, "33CCFF", string);
	return 1;
}

CMD:rentas(playerid)
{
	new string[210];
	if(InfoJugador[playerid][jAdmin] < 11) return 0;
	if(EstadoRentas == 1)
	{
	    format(string, sizeof string, "[OOC] %s %s[%d]: Habilitado el sistema de rentas para todo publico.", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid), playerid);
	    SendClientMessageToAll(0xFFB600FF, string);
	    EstadoRentas = 0;
	}
	else
	{
	    format(string, sizeof string, "[OOC] %s %s[%d]: Deshabilitado la oportunidad de rentar faggio de momento.", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid), playerid);
	    SendClientMessageToAll(0xFFB600FF, string);
	    EstadoRentas = 1;
	}
	return 1;
}

CMD:sacartrabajos(playerid)
{
	new string[210];
	if(InfoJugador[playerid][jAdmin] < 11) return 0;
	if(EstadoTrabajos == 1)
	{
	    format(string, sizeof string, "[OOC] %s %s[%d]: Habilitamos la peticion de vehiculos de trabajos.", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid), playerid);
	    SendClientMessageToAll(0xFFB600FF, string);
	    EstadoTrabajos = 0;
	}
	else
	{
	    format(string, sizeof string, "[OOC] %s %s[%d]: Desactivamos la solicitud de coches de trabajos.", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid), playerid);
	    SendClientMessageToAll(0xFFB600FF, string);
	    EstadoTrabajos = 1;
	}
	return 1;
}

CMD:rcancelar(playerid)
{
    if(rent_vehicle_id[playerid] == INVALID_VEHICLE_ID) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes coche de alquiler.");

	new vehicleid = rent_vehicle_id[playerid];

    rent_vehicle_id[playerid] = INVALID_VEHICLE_ID;
    vehicle_rent_owner[vehicleid] = INVALID_PLAYER_ID;

    DestroyVehicle(vehicleid);
    SendClientMessage(playerid, 0xccccccFF, "Info: {FFFFFF}Terminaste el tiempo de renta de tu moto faggio.");
    return 1;
}

forward TimeRobo(playerid);
public TimeRobo(playerid)
{
	new id = ID_Negocio_Robo[playerid];
	if (id == -1) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* No estas dentro de ningun negocio.");
	if (Robando[playerid] < 30)
	{
		Robando[playerid]++;
		if (Robando[playerid] == 30)
		{
			InfoNegocio[id][nEstadoRobo] = 1;
			if (InfoNegocio[id][nActorX] != 0.0) ApplyDynamicActorAnimation(InfoNegocio[id][nInteriorActor], "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);
			Robando[playerid] = 0;
			ID_Negocio_Robo[playerid] = -1;
			KillTimer(Robo[playerid]);
			InfoJugador[playerid][pTiempoRobo] = 600;
			new reward = 1000+random(3000);
			GivePlayerCash(playerid, reward, "pago robo negocio");
			SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}Robaste el negocio y recibiste $%s, escapa rapido del sitio la policia fue alertada.", diner_coma(reward));
			switch (InfoJugador[playerid][jEstrellas])
			{
				case 0: { InfoJugador[playerid][jEstrellas] = 1; InfoJugador[playerid][jMinEstrellas] = 5; }
				case 1: { InfoJugador[playerid][jEstrellas] = 2; InfoJugador[playerid][jMinEstrellas] = 30; }
				case 2: { InfoJugador[playerid][jEstrellas] = 3; InfoJugador[playerid][jMinEstrellas] = 120; }
				case 3: { InfoJugador[playerid][jEstrellas] = 4; InfoJugador[playerid][jMinEstrellas] = 0; }
				case 4: { InfoJugador[playerid][jEstrellas] = 5; InfoJugador[playerid][jMinEstrellas] = 0; }
				case 5: { InfoJugador[playerid][jEstrellas] = 6; InfoJugador[playerid][jMinEstrellas] = 0; }
			}
			Set_Player_Wasted(playerid, InfoJugador[playerid][jEstrellas]);
			guardar_int_mysql("cuentas", "Estrellas", InfoJugador[playerid][jID], InfoJugador[playerid][jEstrellas]);
			guardar_int_mysql("cuentas", "MinEstrellas", InfoJugador[playerid][jID], InfoJugador[playerid][jMinEstrellas]);
			guardar_int_mysql("cuentas", "TiempoRobo", InfoJugador[playerid][jID], InfoJugador[playerid][pTiempoRobo]);
			TextDrawHideForPlayer(playerid, Textdraws[RoboNegocio][0]);
			TextDrawHideForPlayer(playerid, Textdraws[RoboNegocio][1]);
			TextDrawHideForPlayer(playerid, Textdraws[RoboNegocio][3]);
			return 1;
		}
	}
	return 1;
}

stock AudioAlarma(Float:x,Float:y,Float:z)
{
    for(new i=0;i<MAX_PLAYERS;i++)
	{
		if(IsPlayerInRangeOfPoint(i,15.0,x,y,z))
		{
			PlayAudioStreamForPlayer(i,"http://"AUDIO_ALARMA"",x,y,z,50.0,1);
		}
	}
}

forward LlamarGrua(playerid);
public LlamarGrua(playerid)
{
	new string[1028];
	format(string, sizeof string, "{FFFFFF}El servicio grua funciona para recuperar tu vehiculo\n\
	En caso de que haya quedado en un lugar inaccesible.\n\
	Por ejemplo: en el agua, dentro de un estacionamiento privado, en una pared, etc.\n\n\
	Importante: Los jugadores {E7C944}VIP Ultra {FFFFFF}tienen este servicio publico gratuito.\n\n\
	{FFFF00}?Quieres proceseguir con la operadora? {FFFFFF}En el caso de no poseer una membresia VIP activa\n\
 	El costo varia entre 500$ a 1.000$.");
	Dialog_Show(playerid, ShowGrua, DIALOG_STYLE_MSGBOX, "Informacion publica > Servicio grua", string, "Aceptar", "?");
	return 1;
}

Dialog:ShowGrua(playerid, response, listitem, inputtext[])
{
	if (!response) return ColgarTelefono(playerid);
	if (VehicleCount(playerid) == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes ningun vehiculo registrado en el sistema."),ColgarTelefono(playerid);
	Dialog_Show(playerid, Show2Grua, DIALOG_STYLE_LIST, "?Donde quieres que te enviemos tu vehiculo?", "Ultimo lugar estacionado\nEstacionamiento municipal\nGrua particular (en tu posicion)", "Aceptar", "?");
	return 1;
}

Dialog:Show2Grua(playerid, response, listitem, inputtext[])
{
	if (!response) return ColgarTelefono(playerid);
	new dialog[3084], gformat[370], iCount = 0, salida;
	switch (InfoJugador[playerid][jNivelVIP])
	{
		case 0: salida = 1000;
		case 1..2: salida = 500;
		case 3: salida = 0;
	}
	if (GetPlayerCash(playerid) < salida) { SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes suficiente dinero ($%d).", salida); ColgarTelefono(playerid); return 1; }
	Loop(id, totalvehiculos, 1) if (InfoVehiculo[id][vModelo] != 0 && strcmp(InfoJugador[playerid][jNombre_Apellido], InfoVehiculo[id][vPropietario], true) == 0 && InfoVehiculo[id][vFamilia] == 0)
	{
		if (InfoVehiculo[id][vEmbargo] != 0) format(gformat, sizeof gformat, "{FF0000}%s {C0C0C0}(embargado)\n", GetNameVehicle(InfoVehiculo[id][vModelo]));
		else
		{
			if (InfoVehiculo[id][vSpawned] != 0)
			{
				format(gformat, sizeof gformat, "{FF0000}%s {C0C0C0}(%d)\n", GetNameVehicle(InfoVehiculo[id][vModelo]), InfoVehiculo[id][vDL]);
			}
			else format(gformat, sizeof gformat, "{FF0000}%s {C0C0C0}(oculto)\n", GetNameVehicle(InfoVehiculo[id][vModelo]));
		}
		strcat(dialog, gformat);
		//conteo
		new gformat2[64];
		format(gformat2, sizeof gformat2, "gruakeyo%d", iCount);
		SetPVarInt(playerid, gformat2, id);
		iCount++;
	}
	if (iCount == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes ningun vehiculo a tu nombre."),ColgarTelefono(playerid);
	switch (listitem)
	{
		case 0: Dialog_Show(playerid, Grua1_Type, DIALOG_STYLE_LIST, "Ultimo lugar estacionado", dialog, "Continuar", "Volver");
		case 1: Dialog_Show(playerid, Grua2_Type, DIALOG_STYLE_LIST, "Estacionamiento municipal", dialog, "Continuar", "Volver");
		case 2: Dialog_Show(playerid, Grua3_Type, DIALOG_STYLE_LIST, "Grua particular (en tu posicion)", dialog, "Continuar", "Volver");
	}
	return 1;
}

Dialog:Grua1_Type(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Show2Grua, DIALOG_STYLE_LIST, "?Donde quieres que te enviemos tu vehiculo?", "Ultimo lugar estacionado\nEstacionamiento municipal\nGrua particular (en tu posicion)", "Aceptar", "?");
	new ID = listitem, gformat[40];
	format(gformat, sizeof gformat, "gruakeyo%d", ID);
	new veh = GetPVarInt(playerid, gformat), salida;
	if (InfoVehiculo[veh][vSpawned] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste esta oculto."), ColgarTelefono(playerid);
	if (InfoVehiculo[veh][vModelo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste no posee un modelo."), ColgarTelefono(playerid);
	if (InfoVehiculo[veh][vEmbargo] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No se puede en un vehiculo confiscado."), ColgarTelefono(playerid);
	if (IsVehicleBusy(InfoVehiculo[veh][vDL])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes utilizar esto si el vehiculo tiene ocupantes dentro.");
	switch (InfoJugador[playerid][jNivelVIP])
	{
		case 0: salida = 1000;
		case 1..2: salida = 500;
		case 3: salida = 0;
	}
	if (GetPlayerCash(playerid) < salida) { SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes suficiente dinero ($%d).", salida); ColgarTelefono(playerid); return 1; }
	if (salida != 0) GivePlayerCash(playerid, -salida, "grua 1");
	SetVehicleToRespawn(InfoVehiculo[veh][vDL]);
	ColgarTelefono(playerid);
	SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}Gracias por llamar al servicio de grua de North America Oficial, tu %s fue enviado al estacionamiento.", GetNameVehicle(InfoVehiculo[veh][vModelo]));
	return 1;
}

Dialog:Grua2_Type(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Show2Grua, DIALOG_STYLE_LIST, "?Donde quieres que te enviemos tu vehiculo?", "Ultimo lugar estacionado\nEstacionamiento municipal\nGrua particular (en tu posicion)", "Aceptar", "?");
	new ID = listitem, gformat[40];
	format(gformat, sizeof gformat, "gruakeyo%d", ID);
	new veh = GetPVarInt(playerid, gformat), salida;
	if (InfoVehiculo[veh][vSpawned] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste esta oculto."), ColgarTelefono(playerid);
	if (InfoVehiculo[veh][vModelo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste no posee un modelo."), ColgarTelefono(playerid);
	if (InfoVehiculo[veh][vEmbargo] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No se puede en un vehiculo confiscado."), ColgarTelefono(playerid);
	if (IsVehicleBusy(InfoVehiculo[veh][vDL])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes utilizar esto si el vehiculo tiene ocupantes dentro.");
	switch (InfoJugador[playerid][jNivelVIP])
	{
		case 0: salida = 1000;
		case 1..2: salida = 500;
		case 3: salida = 0;
	}
	if (GetPlayerCash(playerid) < salida) { SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes suficiente dinero ($%d).", salida); ColgarTelefono(playerid); return 1; }
	if (salida != 0) GivePlayerCash(playerid, -salida, "grua 2");
	new lugar = random(6), vehicleid = InfoVehiculo[veh][vDL];
	switch (lugar)
	{
		case 0:
		{
			MoverVehiclePos(vehicleid,1649.8713,-1084.3928,23.9063);
			SetVehicleZAngle(vehicleid,91.9840);
		}
		case 1:
		{
			MoverVehiclePos(vehicleid,1676.8795,-1102.4248,23.9063);
			SetVehicleZAngle(vehicleid,89.5007);
		}
		case 2:
		{
			MoverVehiclePos(vehicleid,1718.4119,-1061.1680,23.9063);
			SetVehicleZAngle(vehicleid,0.8265);
		}
		case 3:
		{
			MoverVehiclePos(vehicleid,1753.1125,-1013.1982,23.9609);
			SetVehicleZAngle(vehicleid,165.6180);
		}
		case 4:
		{
			MoverVehiclePos(vehicleid,1655.9393,-1016.5367,23.8984);
			SetVehicleZAngle(vehicleid,192.8783);
		}
		case 5:
		{
			MoverVehiclePos(vehicleid,1576.2396,-1011.2773,23.9063);
			SetVehicleZAngle(vehicleid,183.1648);
		}
	}
	SetVehicleInterior(vehicleid, 0);
	SetVehicleVirtualWorld(vehicleid, 0);
	ColgarTelefono(playerid);
	SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}Gracias por llamar al servicio de grua, tu %s fue enviado al publico.", GetNameVehicle(InfoVehiculo[veh][vModelo]));
	return 1;
}

Dialog:Grua3_Type(playerid, response, listitem, inputtext[])
{
	if (!response) return Dialog_Show(playerid, Show2Grua, DIALOG_STYLE_LIST, "?Donde quieres que te enviemos tu vehiculo?", "Ultimo lugar estacionado\nEstacionamiento municipal\nGrua particular (en tu posicion)", "Aceptar", "?");
	new ID = listitem, gformat[40];
	format(gformat, sizeof gformat, "gruakeyo%d", ID);
	new veh = GetPVarInt(playerid, gformat), salida;
	if (InfoVehiculo[veh][vSpawned] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste esta oculto."), ColgarTelefono(playerid);
	if (InfoVehiculo[veh][vModelo] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El vehiculo que seleccionaste no posee un modelo."), ColgarTelefono(playerid);
	if (InfoVehiculo[veh][vEmbargo] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No se puede en un vehiculo confiscado."), ColgarTelefono(playerid);
	if (IsVehicleBusy(InfoVehiculo[veh][vDL])) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes utilizar esto si el vehiculo tiene ocupantes dentro.");
	switch (InfoJugador[playerid][jNivelVIP])
	{
		case 0: salida = 1000;
		case 1..2: salida = 500;
		case 3: salida = 0;
	}
	if (GetPlayerCash(playerid) < salida) { SendClientMessageEx(playerid, 0xCCCCCCFF, "* No tienes suficiente dinero ($%d).", salida); ColgarTelefono(playerid); return 1; }
	if (salida != 0) GivePlayerCash(playerid, -salida, "grua 3");
	new Float: plocx,Float: plocy,Float: plocz, vehicleid = InfoVehiculo[veh][vDL];
	GetPlayerPos(playerid, plocx, plocy, plocz);
	MoverVehiclePos(vehicleid, plocx, plocy + 4, plocz);
	SetVehicleInterior(vehicleid, GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	PlayerTextDrawShow(playerid, ServicioGrua[playerid][0]);
	PlayerTextDrawSetStringEx(playerid, ServicioGrua[playerid][1], "espera un momento porfavor...");
	PlayerTextDrawShow(playerid, ServicioGrua[playerid][1]);
	PlayerTextDrawShow(playerid, ServicioGrua[playerid][3]);
	SetTimerEx("RetirarGrua",3000, false, "i", playerid);
	TogglePlayerControllable(playerid, false);
	ColgarTelefono(playerid);
	SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}Gracias por llamar al servicio de grua, tu %s fue enviado a tu posicion.", GetNameVehicle(InfoVehiculo[veh][vModelo]));
	return 1;
}

forward RetirarGrua(playerid);
public RetirarGrua(playerid)
{
    PlayerTextDrawHide(playerid, ServicioGrua[playerid][0]);
    PlayerTextDrawHide(playerid, ServicioGrua[playerid][1]);
    PlayerTextDrawHide(playerid, ServicioGrua[playerid][3]);
    TogglePlayerControllable(playerid, true);
    return 1;
}

CMD:limpiarpiso(playerid,params[])
{
    if (InfoJugador[playerid][jAdmin] >= 3)
	{
	    for(new i = 0; i < sizeof(InfoSuelo); i++)
		{
			if(_enPos(playerid, 20.0, InfoSuelo[i][DropPosX], InfoSuelo[i][DropPosY], InfoSuelo[i][DropPosZ]))
			{
			    SueloTime(i);
			}
		}
		new string[90];
		format(string, 128, "Administracion: %s ha limpiado los objetos alrededor de el.", NombreRJugador(playerid));
		MensajeAdmin(string);
	}else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /limpiarpiso.");
    return 1;
}

CMD:mercadosconquista(playerid)
{
    if (InfoJugador[playerid][jAdmin] >= 10)
	{
		if(Mercado_Nearest(playerid) != -1)
		{
		    new m = Mercado_Nearest(playerid);
		    MercadoData[m][mBajoConquista] = 0;
	     	MercadoData[m][mConquistado] = 0;
	      	format(MercadoData[m][mQuienConquisto], 120, "Nadie");
			MercadoData[m][mIDFamilia] = -1;
			MercadoData[m][mTiempoConquista] = 0;
			Mercado_Save(m);
		}else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas cerca de un mercado.");
	}else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /mercadosconquista.");
	return 1;
}

CMD:irtrabajo(playerid,params[])
{
    OnDuty
    if (InfoJugador[playerid][jAdmin] >= 2)
	{

	    ShowPlayerDialog(playerid, D_TRABAJOSTP, DIALOG_STYLE_LIST, "Trabajos/Empleos", "Carguero\n\
	    Delincuente\n\
	    Basurero\n\
	    Camionero\n\
	    Carpintero\n\
	    Aserrador\n\
	    Granjero\n\
	    Traficante\n\
		deshabilitado\n\
		Recolector\n\
		Minero", "Seleccionar", "");

	}else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /irtrabajo.");
	new string[210];
	format(string, sizeof string, "Administracion: %s uso el comando /irtrabajo", NombreJugador(playerid));
	MensajeAdmin(string);
	return 1;
}

CMD:adminwarn(playerid,params[])
{
	if (InfoJugador[playerid][jEncargado][0] == 1)
	{
	    if (!sscanf(params, "u", params[0])) {
            if (IsPlayerConnected(params[0])) {
                if(InfoJugador[params[0]][jAdmin] <= 0)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no es staff.");
                new string[128];
                InfoJugador[params[0]][jAdminWarn]++;
				guardar_int_mysql("cuentas", "AdminWarn", InfoJugador[params[0]][jID], InfoJugador[params[0]][jAdminWarn]);
                format(string, sizeof string, "* El administrador %s te ha warneado (%d) - (3)", NombreRJugador(playerid),InfoJugador[params[0]][jAdminWarn]);
                _Mensaje(params[0], 4, "33CCFF", string);
                if(InfoJugador[params[0]][jAdminWarn] >= 3)
				{
                    InfoJugador[params[0]][jEncargado][0] = 0;
                    InfoJugador[params[0]][jEncargado][1] = 0;
                    InfoJugador[params[0]][jEncargado][2] = 0;
                    InfoJugador[params[0]][jEncargado][3] = 0;
                    InfoJugador[params[0]][jEncargado][4] = 0;
                    InfoJugador[params[0]][jEncargado][5] = 0;
                    InfoJugador[params[0]][jEncargado][6] = 0;
                    InfoJugador[params[0]][jAdmin] = 0;
					guardar_int_mysql("cuentas", "JuegaleOwo", InfoJugador[params[0]][jID], 0);
					guardar_int_mysql("cuentas", "Encargado_1", InfoJugador[params[0]][jID], 0);
					guardar_int_mysql("cuentas", "Encargado_2", InfoJugador[params[0]][jID], 0);
					guardar_int_mysql("cuentas", "Encargado_3", InfoJugador[params[0]][jID], 0);
					guardar_int_mysql("cuentas", "Encargado_4", InfoJugador[params[0]][jID], 0);
					guardar_int_mysql("cuentas", "Encargado_5", InfoJugador[params[0]][jID], 0);
					guardar_int_mysql("cuentas", "Encargado_6", InfoJugador[params[0]][jID], 0);
					guardar_int_mysql("cuentas", "Encargado_7", InfoJugador[params[0]][jID], 0);
		       		_Mensaje(params[0], 4, "33CCFF", "Has sido expulsado del staff por exceso de warn");
				}
                format(string, sizeof string, "Administracion: %s warneo a %s.", NombreRJugador(playerid), NombreRJugador(params[0]), params[1]);
                MensajeAdmin(string);
            	format(string, sizeof string, "Warneo a %s (%d) - (3).", NombreRJugador(params[0]), InfoJugador[params[0]][jAdminWarn]);
            	new Ip[18];
				GetPlayerIp(playerid, Ip, 18);
				AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 12);
            } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
        } else _Mensaje(playerid, 3, "0", "/adminwarn [id jugador]");
	}else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Daradmin.");
	return 1;
}

CMD:limpiarwarn(playerid,params[])
{
    if (InfoJugador[playerid][jEncargado][0] == 1)
	{
	    if (!sscanf(params, "u", params[0])) {
            if (IsPlayerConnected(params[0])) {
                if(InfoJugador[params[0]][jAdmin] <= 0)return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no es staff.");
                new string[128];
                InfoJugador[params[0]][jAdminWarn] = 0;
				guardar_int_mysql("cuentas", "AdminWarn", InfoJugador[params[0]][jID], InfoJugador[params[0]][jAdminWarn]);
                format(string, sizeof string, "* El administrador %s te ha limpiado los warns", NombreRJugador(playerid));
                _Mensaje(params[0], 4, "33CCFF", string);
                format(string, sizeof string, "Administracion: %s a limpiado los wanrs a %s.", NombreRJugador(playerid), NombreRJugador(params[0]));
                MensajeAdmin(string);
            	format(string, sizeof string, "Limpio el warneo a %s.",  NombreRJugador(params[0]));
            	new Ip[18];
				GetPlayerIp(playerid, Ip, 18);
				AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 12);
            } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
        } else _Mensaje(playerid, 3, "0", "/adminwarn [id jugador]");
	}else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Daradmin.");
	return 1;
}

CMD:crearfabrica(playerid, params[])
{
	static
 		id,
 		string[210];

    if (InfoJugador[playerid][jAdmin] < 11) return 0;

    id = Fabrica_Create(playerid);

	if (id == -1)
	    return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El servidor alcanzo el maximo de fabricas de armas.");

	format(string, sizeof string, "Administracion: %s(%d) creo una fabrica de armas dinamica (ID:%d).", NombreJugador(playerid), playerid, id);
	MensajeAdmin(string);
	return 1;
}

CMD:editarfabrica(playerid, params[])
{
	new id, string[256], input;
	if (InfoJugador[playerid][jAdmin] < 10) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /editarfabrica.");
	if (sscanf(params, "s[32]", params))
	{
		_Mensaje(playerid, 3, "0", "/editarfabrica [nombre] [id fabrica]");
		_Mensaje(playerid, 1, "lugar - resetear - asignar - borrar", "Nombres:");
		return 1;
	}
	if (!strcmp(params, "lugar", true, 5))
	{
		if (sscanf(params, "s[32]i", params, id)) return _Mensaje(playerid, 3, "0", "/editarfabrica lugar [id fabrica]");
		if (id < 1 || id > totalfabricas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalfabricas);
		if (InfoFabrica[id][fabricaPos][0] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de fabrica no existe.", id);
        GetPlayerPos(playerid, InfoFabrica[id][fabricaPos][0], InfoFabrica[id][fabricaPos][1], InfoFabrica[id][fabricaPos][2]);
		GetPlayerFacingAngle(playerid, InfoFabrica[id][fabricaPos][3]);
		Fabrica_Refresh(id);
		Fabrica_Save(id);
		format(string, sizeof string, "Administracion: %s(%d) ajusto la posicion de la fabrica de armas (ID:%d).", NombreJugador(playerid), playerid, id);
		MensajeAdmin(string);
	}
	else if (!strcmp(params, "resetear", true, 8))
	{
		if (sscanf(params, "s[32]i", params, id)) return _Mensaje(playerid, 3, "0", "/editarfabrica resetear [id fabrica]");
		if (id < 1 || id > totalfabricas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalfabricas);
		if (InfoFabrica[id][fabricaPos][0] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de fabrica no existe.", id);
	    InfoFabrica[id][fabricaConquistada] = 0;
		alm(InfoFabrica[id][fabricaQuienConquisto], "Nadie");
		InfoFabrica[id][fabricaIDFaccion] = -1;
		InfoFabrica[id][fabricaTiempoConquista] = 0;
		Fabrica_Refresh(id);
		Fabrica_Save(id);
		foreach (new i : Player) if (InfoJugador[i][pFabrica] == InfoFabrica[id][fabricaID])
		{
			SetPosEx(i, InfoFabrica[id][fabricaPos][0], InfoFabrica[id][fabricaPos][1], InfoFabrica[id][fabricaPos][2], InfoFabrica[id][fabricaPos][3], 0, 0, 1);
			format(string, sizeof string, "Info: El administrador %s reseteo el tiempo de la faccion y se te expulso del interior.");
			SendClientMessage(i, 0xccccccFF, string);
		}
		format(string, sizeof string, "Administracion: %s(%d) reseteo la fabrica (ID:%d) y esta sin conquista.", NombreJugador(playerid), playerid, id);
		MensajeAdmin(string);
	}
	else if (!strcmp(params, "asignar", true, 7))
	{
		if (sscanf(params, "s[32]ii", params, id, input)) return _Mensaje(playerid, 3, "0", "/editarfabrica resetear [id fabrica] [id familia]");
		if (id < 1 || id > totalfabricas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalfabricas);
		if (InfoFabrica[id][fabricaPos][0] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de fabrica no existe.", id);
		if (input < 1 || input > totalfamilias) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de familia incorrecta, intenta entre 1-%d.", input, totalfamilias);
		if (InfoFamilia[input][fTipo] == 0) return SendClientMessageEx(playerid, 0xCCCCCCFF, "* ID %d de familia inexistente.", input);
		InfoFabrica[id][fabricaConquistada] = 1;
		alm(InfoFabrica[id][fabricaQuienConquisto], InfoFamilia[input][fNombre]);
		InfoFabrica[id][fabricaIDFaccion] = input;
		InfoFabrica[id][fabricaTiempoConquista] = 7776000;
		Fabrica_Refresh(id);
		Fabrica_Save(id);
		format(string, sizeof string, "Encargados: %s(%d) asigno la fabrica (ID:%d) para la familia %s(%d) durante 3 meses.", NombreRJugador(playerid), playerid, id, InfoFamilia[input][fNombre], input);
		MensajeEncargados(string);
		format(string, sizeof string, "(( [Familia] Tu familia tiene una fabrica asignada en %s durante 3 meses ))", InfoFabrica[id][fabricaLocalizacion]);
		SendFamilyMessage(input, 0x6BBFA0FF, string);
	}
	else if (!strcmp(params, "borrar", true, 6))
	{
		if (sscanf(params, "s[32]i", params, id)) return _Mensaje(playerid, 3, "0", "/editarfabrica borrar [id fabrica]");
		if (id < 1 || id > totalfabricas) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalfabricas);
		if (InfoFabrica[id][fabricaPos][0] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de fabrica no existe.", id);
	    Fabrica_Delete(id);
		format(string, sizeof string, "Administracion: %s(ID:%d) ha eliminado la fabrica de armas [ID:%d].", NombreRJugador(playerid), playerid, id);
		MensajeAdmin(string);
	}
	return 1;
}

CMD:fabricar(playerid, params[])
{
	static
	    id = -1;
	if(!EnFabrica(playerid)) return 1;
	if((id = Fabrica_Inside(playerid)) != -1)
	{
	    if(InfoFabrica[id][fabricaConquistada] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Esta fabrica ya no esta conquistada.");
	    else if(InfoFabrica[id][fabricaConquistada] == 1)
	    {
	        if(InfoFabrica[id][fabricaIDFaccion] == InfoJugador[playerid][jFamMiembro])
	        {
	            if (jPt_fabrica[playerid]) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tienes un pedido activo, espera a que te lo lleven.");
			    if (InfoJugador[playerid][jT_fabrica] != -1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Aun no puedes traficar, revisa /ftiempo.");
				if (InfoJugador[playerid][jFamMiembro] >= 1 && InfoJugador[playerid][jFamRango] >= 4) {
					if (InfoFamilia[InfoJugador[playerid][jFamMiembro]][fTipo] == 2 || InfoFamilia[InfoJugador[playerid][jFamMiembro]][fTipo] == 1) {
						if (_Fabrica(playerid)) {
						    if(InfoJugador[playerid][jNivel] < 6) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Debes ser nivel 6 para poder fabricar.");
							if (InfoJugador[playerid][jManoIzquierda] != 50 && InfoJugador[playerid][jManoDerecha] != 50) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Necesitas una caja vacia en las manos.");
							if(InfoJugador[playerid][jT_fabrica] == -1 && InfoJugador[playerid][jT_fabrica2] == -1 && InfoJugador[playerid][jI_fabrica] < 3 && InfoJugador[playerid][jI_fabrica2] < 3)
							{
				            ShowPlayerDialog(playerid, D_FABRICA, DIALOG_STYLE_LIST, "{D6E1EB}Fabrica de armas", "D. Eagle\t75m\n\
				            MP5\t150m\n\
				            Escopeta\t200m\n\
				            Ak-47\t350m", "Continuar", "Salir");
				            return 1;
							}
							else if(InfoJugador[playerid][jT_fabrica] == -1 && InfoJugador[playerid][jI_fabrica] < 3 && InfoJugador[playerid][jI_fabrica2] >= 3)
							{
				            ShowPlayerDialog(playerid, D_FABRICA, DIALOG_STYLE_LIST, "{D6E1EB}Fabrica de armas", "D. Eagle\t75m\n\
				            MP5\t150m\n\
				            Escopeta\t200m\n\
				            Ak-47\t350m\n", "Continuar", "Salir");
				            return 1;
				            }
				    	} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en la fabrica o en lugar indicado.");
					} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu familia/organizacion no es tipo mafia o pandilla.");
				} else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No perteneces a una organizacion/familia o no eres rango 4.");
			}
			else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No eres parte de la faccion que conquisto esta fabrica.");
		}
		return 1;
	}
	else return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en el interior de una fabrica para usar este comando.");
}

Fabrica_Create(playerid)
{
    static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		Loop(i, MAX_FABRICAS, 1)
		{
	    	if (!InfoFabrica[i][fabricaExists])
		    {
		        InfoFabrica[i][fabricaExists] = true;
		        InfoFabrica[i][fabricaPos][0] = x;
    	        InfoFabrica[i][fabricaPos][1] = y;
    	        InfoFabrica[i][fabricaPos][2] = z;
    	        InfoFabrica[i][fabricaPos][3] = angle;

    	        InfoFabrica[i][fabricaInterior][0] = 1388.2313;
    	        InfoFabrica[i][fabricaInterior][1] = 1055.3007;
    	        InfoFabrica[i][fabricaInterior][2] = 1464.2018;
    	        InfoFabrica[i][fabricaInterior][3] = 181.5768;

    	        InfoFabrica[i][fabricaInteriorID] = i + 5;
    	        InfoFabrica[i][fabricaVW] = i + 10;

    	        new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(InfoFabrica[i][fabricaLocalizacion],80,zone);

				InfoFabrica[i][fabricaConquistada] = 0;
				format(InfoFabrica[i][fabricaQuienConquisto], 120, "Nadie");
				InfoFabrica[i][fabricaIDFaccion] = -1;
				InfoFabrica[i][fabricaTiempoConquista] = 0;

				Fabrica_Refresh(i);
    			new query[800];
				mysql_format(DBngrp, query, sizeof query, "INSERT INTO fabricas (Pos_X,Pos_Y,Pos_Z,Pos_A,Interior_X,Interior_Y,Interior_Z,Interior_A,InteriorID,InteriorVW,Localizacion,Conquistado,QuienConquisto,IDFamilia,TiempoConquista) VALUES \
				('%f','%f','%f','%f','%f','%f','%f','%f','%d','%d','%s','%d','%s','%d','%d')",
				InfoFabrica[i][fabricaPos][0],
				InfoFabrica[i][fabricaPos][1],
				InfoFabrica[i][fabricaPos][2],
				InfoFabrica[i][fabricaPos][3],
                InfoFabrica[i][fabricaInterior][0],
                InfoFabrica[i][fabricaInterior][1],
                InfoFabrica[i][fabricaInterior][2],
                InfoFabrica[i][fabricaInterior][3],
                InfoFabrica[i][fabricaInteriorID],
                InfoFabrica[i][fabricaVW],
                InfoFabrica[i][fabricaLocalizacion],
                InfoFabrica[i][fabricaConquistada],
                InfoFabrica[i][fabricaQuienConquisto],
                InfoFabrica[i][fabricaIDFaccion],
                InfoFabrica[i][fabricaTiempoConquista]
				);
				mysql_tquery(DBngrp, query, "OnFabricaCreated", "i", i);
				return i;
			}
		}
	}
	return -1;
}

forward OnFabricaCreated(id);
public OnFabricaCreated(id)
{
    totalfabricas++;
	InfoFabrica[id][fabricaID] = cache_insert_id();
	cache_unset_active();
    return 1;
}


Fabrica_Save(fid)
{
	static
	    query[2048];

	mysql_format(DBngrp, query, sizeof query, "UPDATE `fabricas` SET `Pos_X` = '%.4f', `Pos_Y` = '%.4f', `Pos_Z` = '%.4f', `Pos_A` = '%.4f', `Interior_X` = '%.4f', `Interior_Y` = '%.4f', `Interior_Z` = '%.4f', `Interior_A` = '%.4f', `InteriorID` = '%d', `InteriorVW` = '%d', `Localizacion` = '%s', `Conquistado` = '%d', `QuienConquisto` = '%s', `IDFamilia` = '%d', `TiempoConquista` = '%d' WHERE `ID` = '%d'",
	    InfoFabrica[fid][fabricaPos][0],
	    InfoFabrica[fid][fabricaPos][1],
	    InfoFabrica[fid][fabricaPos][2],
	    InfoFabrica[fid][fabricaPos][3],
	    InfoFabrica[fid][fabricaInterior][0],
	    InfoFabrica[fid][fabricaInterior][1],
	    InfoFabrica[fid][fabricaInterior][2],
	    InfoFabrica[fid][fabricaInterior][3],
	    InfoFabrica[fid][fabricaInteriorID],
	    InfoFabrica[fid][fabricaVW],
	    InfoFabrica[fid][fabricaLocalizacion],
	    InfoFabrica[fid][fabricaConquistada],
	    InfoFabrica[fid][fabricaQuienConquisto],
	    InfoFabrica[fid][fabricaIDFaccion],
	    InfoFabrica[fid][fabricaTiempoConquista],
	    InfoFabrica[fid][fabricaID]
	);
	return mysql_tquery(DBngrp, query);
}

Fabrica_Refresh(fid)
{
    if (fid != -1 && InfoFabrica[fid][fabricaExists])
    {
		if (IsValidDynamic3DTextLabel(InfoFabrica[fid][fabricaText3D]))
		{
			DestroyDynamic3DTextLabel(InfoFabrica[fid][fabricaText3D]);
			InfoFabrica[fid][fabricaText3D] = Text3D:INVALID_3DTEXT_ID;
		}
        if (IsValidDynamicPickup(InfoFabrica[fid][fabricaPickup]))
		    DestroyDynamicPickup(InfoFabrica[fid][fabricaPickup]);

    	if (IsValidDynamicPickup(InfoFabrica[fid][fabricaPickup2]))
		    DestroyDynamicPickup(InfoFabrica[fid][fabricaPickup2]);

        if (IsValidDynamicMapIcon(InfoFabrica[fid][fabricaMapIcon]))
		    DestroyDynamicMapIcon(InfoFabrica[fid][fabricaMapIcon]);

		new string[1200];

		if(!InfoFabrica[fid][fabricaConquistada])
		{
		    format(string, sizeof string, "Fabrica de armas(%d)\n{FFFFFF}Localizacion: {1EB032}%s\n{cccccc}Presiona 'N' para mas informacion.", fid, InfoFabrica[fid][fabricaLocalizacion]);
		    InfoFabrica[fid][fabricaText3D] = CreateDynamic3DTextLabel(string, 0xff7575FF, InfoFabrica[fid][fabricaPos][0], InfoFabrica[fid][fabricaPos][1], InfoFabrica[fid][fabricaPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		}
		else
		{
		    format(string, sizeof string, "Fabrica de armas(%d)\n{FFFFFF}Propietario: {1EB032}%s\n{FFFFFF}Papeles: {1EB032}%s{FFFFFF}\nLocalizacion: %s.", fid, InfoFabrica[fid][fabricaQuienConquisto], generarTiempo(InfoFabrica[fid][fabricaTiempoConquista]), InfoFabrica[fid][fabricaLocalizacion]);
		    InfoFabrica[fid][fabricaText3D] = CreateDynamic3DTextLabel(string, 0xff7575FF, InfoFabrica[fid][fabricaPos][0], InfoFabrica[fid][fabricaPos][1], InfoFabrica[fid][fabricaPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		}
		InfoFabrica[fid][fabricaMapIcon] = _MapIcon(InfoFabrica[fid][fabricaPos][0], InfoFabrica[fid][fabricaPos][1], InfoFabrica[fid][fabricaPos][2], 23);
	}
	return 1;
}

stock Fabrica_Delete(fid)
{
	if (fid != -1 && InfoFabrica[fid][fabricaExists])
	{
	    new
	        string[64];

		mysql_format(DBngrp, string, sizeof(string), "DELETE FROM `fabricas` WHERE `ID` = '%d'", InfoFabrica[fid][fabricaID]);
		mysql_tquery(DBngrp, string);

		if (IsValidDynamic3DTextLabel(InfoFabrica[fid][fabricaText3D]))
		{
			DestroyDynamic3DTextLabel(InfoFabrica[fid][fabricaText3D]);
			InfoFabrica[fid][fabricaText3D] = Text3D:INVALID_3DTEXT_ID;
		}
        if (IsValidDynamicPickup(InfoFabrica[fid][fabricaPickup]))
		    DestroyDynamicPickup(InfoFabrica[fid][fabricaPickup]);

    	if (IsValidDynamicPickup(InfoFabrica[fid][fabricaPickup2]))
		    DestroyDynamicPickup(InfoFabrica[fid][fabricaPickup2]);

        if (IsValidDynamicMapIcon(InfoFabrica[fid][fabricaMapIcon]))
		    DestroyDynamicMapIcon(InfoFabrica[fid][fabricaMapIcon]);

	    InfoFabrica[fid][fabricaExists] = false;
	    InfoFabrica[fid][fabricaID] = 0;
	}
	return 1;
}

Fabrica_Nearest(playerid)
{
    Loop(id, totalfabricas, 1) if (InfoFabrica[id][fabricaExists] && _enPos(playerid, 2.0, InfoFabrica[id][fabricaPos][0], InfoFabrica[id][fabricaPos][1],InfoFabrica[id][fabricaPos][2]))
	{
		if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
			return id;
	}
	return -1;
}

Fabrica_Inside(playerid)
{
	if (InfoJugador[playerid][pFabrica] != -1)
	{
	    Loop(i, totalfabricas, 1) if (InfoFabrica[i][fabricaExists] && InfoFabrica[i][fabricaID] == InfoJugador[playerid][pFabrica] && GetPlayerInterior(playerid) == InfoFabrica[i][fabricaInteriorID] && GetPlayerVirtualWorld(playerid) > 0) {
	        return i;
		}
	}
	return -1;
}

stock EnFabrica(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 1393.5485,1043.5651,1464.2018)) { return 1; }
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1393.4978,1041.1793,1464.2018)) { return 1; }
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1393.4574,1038.8839,1464.2018)) { return 1; }
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1393.4114,1036.4785,1464.2018)) { return 1; }
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1396.0099,1036.4309,1464.2018)) { return 1; }
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1396.0565,1038.7504,1464.2018)) { return 1; }
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1396.0986,1041.1199,1464.2018)) { return 1; }
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1396.1481,1043.5350,1464.2018)) { return 1; }
	return 0;
}

stock StringPing(playerid)
{
	new Ping[100];
	new ping = GetPlayerPing(playerid);
	if(ping >= 0 && ping < 150) format(Ping, 100, "{46e800}%d{787680}",ping);
	if(ping >= 150 && ping < 200) format(Ping, 100, "{00cbf7}%d{787680}",ping);
	if(ping >= 200 && ping < 250) format(Ping, 100, "{E0F600}%d{787680}",ping);
	if(ping >= 250 && ping < 300) format(Ping, 100, "{f7e300}%d{787680}",ping);
	if(ping >= 300) format(Ping, 100, "{f74000}%d{787680}",ping);
	return Ping;
}

stock GetPlayerID(playername[])
{
	foreach(Player, i) if(strcmp(NombreRJugador(i), playername, true) == 0) return i;

	return INVALID_PLAYER_ID;
}

CMD:record(playerid,params[])
{
	new string[210];
	format(string, sizeof string, "Record de usuarios Online fue: %d {ea2c2c}[%d/%d/%d - %d:%d:%d]",Record_UsersOn,UsersD_0,UsersD_1,UsersD_2,UsersT_0,UsersT_1,UsersT_2);
	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:serverstats(playerid)
{
	new string[550], dialog[550*5], salida[50];
	if(InfoJugador[playerid][jAdmin] < 11) return 0;
	switch(DobleExperiencia)
	{
	    case 0: salida = "Desactivada";
	    case 1: salida = "Activo";
	}
	format(string, sizeof string, "Fondos Loteria\t$%s\n\
	Fondos Gobierno\t$%s\n\
	Cobro de impuestos\t$%s\n\
	Sangre LAFD\t%d litros [A+]\n\
	DobleExperiencia\t%s\n\
	Troncos disponibles\t%d\n\
	Record server\t%d [%d/%d/%d - %d:%d:%d]\n\
	Tiempo de conquista\t%s",
	diner_coma(DineroLoteria), diner_coma(DineroEstado), diner_coma(ValorImpuestos), SangreLAFD, salida,
	TroncosDis,Record_UsersOn,UsersD_0,UsersD_1,UsersD_2,UsersT_0,UsersT_1,UsersT_2, generarTiempo(TiempoParaConquistar));
	strcat(dialog, string);
	ShowPlayerDialog(playerid, 6000, DIALOG_STYLE_TABLIST, "North America Roleplay Oficial- Estadisticas", dialog, ">", "?");
	return 1;
}

stock GetServerLatency()
{
	new
		Ping,
		bool:HavePlayers,
	 	CountPlayers;

	#if defined foreach
	foreach(new i : Player)
	#else
	for(new i; i < GetMaxPlayers(); ++i) if(IsPlayerConnected(i) && !IsPlayerNPC(i))
	#endif
	{
		#if !defined foreach
		CountPlayers++;
		#endif
		Ping += GetPlayerPing(i);
		if(!HavePlayers) HavePlayers = true;
	}
	if(!HavePlayers) return -1;
	#if defined foreach
	CountPlayers = Iter_Count(Player);
	#endif
	return (HavePlayers) ? (floatround( Ping / CountPlayers )) : (-1);

}

forward OfertaPerdida(playerid);
public OfertaPerdida(playerid)
{
	if(ofertador[playerid] != INVALID_PLAYER_ID)
	{
		ofertador[playerid] = INVALID_PLAYER_ID;
	}
}

forward TiempoVender(playerid);
public TiempoVender(playerid)
{
	TiempoVenta[playerid] = 0;
}

vehicle_lock_doors(vehicle)
{
	new vParamArr[7];
	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_ON, vParamArr[4], vParamArr[5], vParamArr[6]);
}

vehicle_unlock_doors(vehicle)
{
	new vParamArr[7];
	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_OFF, vParamArr[4], vParamArr[5], vParamArr[6]);
}

CMD:crearboxeo(playerid, params[])
{
	new string[210];
	if(InfoJugador[playerid][jAdmin] < 11 && InfoJugador[playerid][jEncargado][5] < 1) return 0;
	if(BoxeoActivo == 0)
	{
	    MapeoBoxeo[0] = CreateDynamicObject(3819, 2244.124267, -1718.963867, 22.722705, 0.000000, 0.000000, -90.199989, -1, -1, -1, 400.00, 400.00);
	    MapeoBoxeo[1] = CreateDynamicObject(3819, 2235.372558, -1718.933105, 22.722705, 0.000000, 0.000000, -90.199989, -1, -1, -1, 400.00, 400.00);
	    MapeoBoxeo[2] = CreateDynamicObject(14791, 2240.947509, -1707.835327, 23.852727, 0.000000, 0.000000, 0.000000, -1, -1, -1, 400.00, 400.00);
	    MapeoBoxeo[3] = CreateDynamicObject(3361, 2227.716308, -1708.943115, 14.512001, 0.000000, 0.000000, -90.200080, -1, -1, -1, 400.00, 400.00);
	    MapeoBoxeo[4] = CreateDynamicObject(3361, 2227.726806, -1702.809570, 18.601995, 0.000000, 0.000000, -90.000007, -1, -1, -1, 400.00, 400.00);
	    MapeoBoxeo[5] = CreateDynamicObject(1472, 2229.391845, -1699.122680, 20.920141, 0.000000, 0.000000, -90.500015, -1, -1, -1, 400.00, 400.00);
	    format(string, sizeof string, "Administracion: %s(%d) habilito el torneo de boxeo en Idlewood.", NombreRJugador(playerid), playerid);
		MensajeAdmin(string);
		format(string, sizeof string, "[OOC] %s %s[%d]: Se habilito el torneo de Boxeo en el gimnasio de Idlewood.", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid), playerid);
	    SendClientMessageToAll(0xFFB600FF, string);
	    BoxeoActivo = 1;
	}
	else
	{
	    for(new i = 0; i < 6; i++) if (MapeoBoxeo[i] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(MapeoBoxeo[i]);
			MapeoBoxeo[i] = INVALID_STREAMER_ID;
		}
	    format(string, sizeof string, "Administracion: %s(%d) retiro el mapeo dinamico del gimnasio, se acabo el torneo.", NombreRJugador(playerid), playerid);
		MensajeAdmin(string);
		format(string, sizeof string, "[OOC] %s %s[%d]: El torneo de boxeo termino, retiramos todos los utencilios del lugar.", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid), playerid);
	    SendClientMessageToAll(0xFFB600FF, string);
	    BoxeoActivo = 0;
	}
	return 1;
}

CMD:llevarring(playerid, params[])
{
	new string[210], idjugador, idjugador2;
	if(InfoJugador[playerid][jAdmin] < 11 && InfoJugador[playerid][jEncargado][5] < 1) return 0;
	if(BoxeoActivo == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El evento no esta activo para llevarlos.");
	if(sscanf(params, "dd", idjugador, idjugador2)) return _Mensaje(playerid, 3, "0", "/llevarring [id jugador 1] [id jugador 2]");
	if(!IsPlayerConnected(idjugador)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador nro1 esta desconectado.");
	if(!IsPlayerConnected(idjugador2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador nro2 esta desconectado.");
	SetPlayerPosEx(idjugador, 2240.9797,-1708.2479,23.7266);
	SetPlayerPosEx(idjugador2, 2240.9797,-1708.2479,23.7266);
	CargarObjetos(idjugador);
	CargarObjetos(idjugador2);
	format(string, sizeof string, "[OOC] %s %s[%d]: Nuestros boxeadores son %s y %s, suerte!.", RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid), playerid, NombreRJugador(idjugador), NombreRJugador(idjugador2));
	SendClientMessageToAll(0xFFB600FF, string);
	return 1;
}

CMD:darenceventos(playerid, params[]) {
    new string[128], playerid2;
    if (InfoJugador[playerid][jAdmin] < 11) return 0;
    if (!sscanf(params, "d", playerid2))
	{
        if (IsPlayerConnected(playerid2))
		{
            InfoJugador[playerid2][jEncargado][5] = 1;
			guardar_int_mysql("cuentas", "Encargado_6", InfoJugador[playerid2][jID], InfoJugador[playerid2][jEncargado][5]);
            format(string, sizeof string, " %s lo ha asignado encargado de eventos.", NombreRJugador(playerid));
            _Mensaje(playerid2, 4, "33CCFF", string);
            format(string, sizeof string, "Administracion: %s ha asignado encargado de eventos a %s", NombreRJugador(playerid), NombreRJugador(playerid2));
            MensajeAdmin(string);
            format(string, sizeof string, "Asigno E.Eventos a %s", NombreRJugador(playerid2));
			new Ip[18];
			GetPlayerIp(playerid, Ip, 18);
			AddRegistroADM(Ip, InfoJugador[playerid][jNombre_Apellido], RangosAdministrativos(InfoJugador[playerid][jAdmin]), string, 4);
        } else ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
    } else _Mensaje(playerid, 3, "0", "/darenceventos [id jugador]");
    return 1;
}

enum AntiCheat
{
	TextoSPAM[200],
	TextoSay[200],
};
new ANTI_CHEATS[MAX_PLAYERS][AntiCheat];

new PalabrasSPAM[][] = {
	"mcity","Mikhail","fenisone" ,"Rzone","RoyalZ","RoyalZone","RZRP","revolutionfreeroam",	"freeroam",	"vamos a fz",	"rev freeroam",	"superdanova",	"danova",	"super roleplay",	"danova roleplay",	"megacity",
	"fz",	"wallhack",	"samphub",	"Morey",	"Wyatt",	"Klenox",	"MitzukiZ","HorixZone",	"Horix",	"Kreisel", "SurZone",	"Samp Hub",	"Hub Samp",
	"LSRP",	"linexzone",	"lz roleplay",	"Linex",	"efec3ta",	"fenix",	"fenixzone",	"f e n i x z o n e",	"vortexzone",	"vz",	"vezeta",
	"V O R T E X Z O N E S E R V I D O R 1",	"V O R T E X Z O N E S E R V I D O R 2",	"V O R T E X Z O N E S E R V I D O R 3",	"V O R T E X Z O N E S E R V I D O R 4",
	"V O R T E X Z O N E S E R V I D O R 5",	"V O R T E X Z O N E S E R V I D O R",	"V O R T E X Z O N E",	"V O R T E X",	"lzrp",	"unplayer",	"mc-rp.eu",
	"mc - rp . eu",	"mc-rp",	"vz-rp", 	"omegazone",	"s1.omegazone.net",	"s1.vortexzone.com",	"s2.vortexzone.com",
	"s3.vortexzone.com",	"s4.vortexzone.com",	"s5.vortexzone.com",	"dm.vortexzone.com",	"rol.vortexzone.com",	"hahn", 	"ddns", 	"sytes",
    ".net",    ".es",	".esy.es",	"Roleplay",	"LSRP",	"Omega",	"ploopzone","sobeit","Izan_Duff",
	"sobiet",	"omegazone",	"luxuszone",	"lzrp",	"ozrp",	"kanox",	"pingote",	"osvaldo pingote",	"s1.fenixzone.com",	"s2.fenixzone.com",
	"s3.fenixzone.com",	"s4.fenixzone.com",	"s5.fenixzone.com",	"dm.fenixzone.com",	"br.fenixzone.com",	"brs1.fenixzone.com",	"s0bi3t",	"modsobeit",	"mod sobiet",
	"m0d s0bi3t",	"downgaming",	"ranuzone",	"urbanz",	"mcbioniko.com",    "oz-rp",    "lz-rp",    "fz-rp", "samp-ru", "Gold Rp", "Titan rp", "Arizona",
	"super freeroam","luxus","Advance roleplay","advance","sur zone","coops and","los santos gang wars","Sunday RP", "Sunday Roleplay", "Sunday","Kaiser",
    "PointZone","AndromedaCity","LoroTeca","Nostalgia Roleplay","MakerCity","SkretZolder","Stracci","Drums","New State","Arizona","Diamond RP","Diamond Roleplay","Adrenaline","Russia","brightsun",
    "sampdroid", "novagamers", "novaga", "novagamer", "samp droid", "nova gamers", "nova gamer", "primehub", "calexico", "Dont Woller"
};

stock CheckspamString(text[])
{
	for(new i = 0; i < sizeof(PalabrasSPAM); i++)
	{
	    if(strfind(text, PalabrasSPAM[i], true) != -1) return 1;
	}
	return 0;
}

stock GetSpam(string[],playerid)
{
    new SPAM;
    new CUENTAP,CUENTAN,CUENTADP,NUMEROS;
	for(SPAM = 0; SPAM < strlen(string); SPAM ++)
	{
	    if(string[SPAM] == '.') CUENTAP ++;
	    if(string[SPAM] == '0' || string[SPAM] == '1' || string[SPAM] == '2' || string[SPAM] == '3' || string[SPAM] == '4' || string[SPAM] == '5' || string[SPAM] == '6' || string[SPAM] == '7' || string[SPAM] == '8' || string[SPAM] == '9') CUENTAN ++;
	    if(string[SPAM] == ':') CUENTADP ++;
		if(string[SPAM] > '9' || string[SPAM] < '0') NUMEROS ++;
	}
 	if(CUENTAP >= 3 && CUENTAN >= 4 && CUENTADP >= 1 && NUMEROS >= 3) return 1;
	if(CUENTAP >= 2 && CUENTADP >= 1) return 1;
    for(new i; i < sizeof(PalabrasSPAM); i++)
	{
	    if(strfind(string,PalabrasSPAM[i],true) != -1)
		{
		    format(ANTI_CHEATS[playerid][TextoSPAM],128,PalabrasSPAM[i]);
		 	return 1;
        }
	    if(strcmp(string,PalabrasSPAM[i],true) == 0)
	    {
		    format(ANTI_CHEATS[playerid][TextoSPAM],128,PalabrasSPAM[i]);
		 	return 1;
        }
	}
 	return 0;
}

DetectSPAM(SPAM[])
{
    new StringSPAM;
    new COUNTP,COUNTN,COUNTW,COUNTTP;
    for(StringSPAM = 0; StringSPAM < strlen(SPAM); StringSPAM ++)
    {
        if(SPAM[StringSPAM] == '.') COUNTP ++;
        if(SPAM[StringSPAM] == '0' || SPAM[StringSPAM] == '1' || SPAM[StringSPAM] == '2' || SPAM[StringSPAM] == '3' || SPAM[StringSPAM] == '4' || SPAM[StringSPAM] == '5' || SPAM[StringSPAM] == '6' || SPAM[StringSPAM] == '7' || SPAM[StringSPAM] == '8' || SPAM[StringSPAM] == '9') COUNTN ++; //Count ot the Numbers
        if(SPAM[StringSPAM] == ':') COUNTTP ++;
    }
    if(COUNTP >= 3 && COUNTN >= 4) return 1;
    if(COUNTW >= 3) return 1;
    if(strfind(SPAM, ".ga", true) != -1 || strfind(SPAM, ".ml", true) != -1 || strfind(SPAM, ".com.ar", true) != -1 || strfind(SPAM, ".org", true) != -1 || strfind(SPAM, ".net", true) != -1 || strfind(SPAM, ".es", true) != -1 || strfind(SPAM, ".tk", true) != -1) return 1;
    if(COUNTTP >= 1 && COUNTN >= 4) return 1;
    return 0;
}

MensajeSpam(playerid,params[])
{
	new string[200];
	format(string,sizeof string,"[Anti-Spam] %s(%d) SPAM (%s): %s",NombreRJugador(playerid),playerid,ANTI_CHEATS[playerid][TextoSPAM],params);
    MensajeAdmin(string);
}

stock ObtenerVelocidad(playerid)
{
	new Float:PosX, Float:PosY, Float:PosZ, Float:PlayerSpeedDistance;
	GetVehicleVelocity(GetPlayerVehicleID(playerid), PosX, PosY, PosZ);
	PlayerSpeedDistance = floatmul(floatsqroot(floatadd(floatadd(floatpower( PosX, 2), floatpower(PosY, 2)), floatpower(PosZ, 2))), 170.0);
	new spe = floatround(PlayerSpeedDistance * 1);
	return spe;
}

forward AntiSpeedHack();
public AntiSpeedHack()
{
	for(new i=0;i<MAX_PLAYERS;i++) if(usuario_registro[i] == 2)
		{
			if(ObtenerVelocidad(i)> 300)
			{
				if(!IsPlayerInAnyVehicle(i))
				{
					new string[256], playerState = GetPlayerState(i);
					format(string, 256,"El jugador %s[ID: %d] fue expulsado por el anticheat. Razon: Super Choque (%d/%d/%d).",NombreRJugador(i),i, GetVehicleModel(GetPlayerVehicleID(i)), ObtenerVelocidad(i),playerState);
					_MensajeOOC(0xAA3333FF, string);
					Kick(i);
					return 1;
				}
				switch(GetVehicleModel(GetPlayerVehicleID(i)))
				{
					case 0,511,460,592,577,512,513,520,553,593,476,519: printf("",i,GetVehicleModel(GetPlayerVehicleID(i)),ObtenerVelocidad(i));
					default:
					{
						new string[256], playerState = GetPlayerState(i);
						format(string, 256,"El jugador %s(ID:%d) fue expulsado por el anticheat. Razon: Super Choque (%d/%d/%d).",NombreRJugador(i),i, GetVehicleModel(GetPlayerVehicleID(i)), ObtenerVelocidad(i),playerState);
						_MensajeOOC(0xAA3333FF, string);
						Kick(i);
						if(InfoJugador[i][jNivel] == 1)
						{
							new Float:X,Float:Y,Float:Z;
							GetPlayerPos(i, X, Y, Z);
							SendClientMessage(i, -1, "Salistes disparado del vehiculo a causa de un fuerte impacto.");
							RemovePlayerFromVehicle(i);
							SetPlayerPosEx(i, X, Y, Z+5);
						}
					}
				}
			}
		}
	return 1;
}

CMD:advertencia(playerid, params[])
{
	new string[550], idjugador, razon[50], Year, Month, Day;
	if (InfoJugador[playerid][jAdmin] < 1) return 1;
	OnDuty
	if (sscanf(params, "ds[50]", idjugador, razon)) return _Mensaje(playerid, 3, "0", "/advertencia [id jugador] [razon]");
	if (!IsPlayerConnectedEx(idjugador)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador nro1 esta desconectado.");
	if (isnull(razon)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ingresa por lo menos un caracter en la razon.");
	if (InfoJugador[idjugador][jAdmin] > InfoJugador[playerid][jAdmin])
	{
	    format(string, sizeof string, "Administracion: %s(%d) intento advertir a %s, fue kickeado por el antinulos.", NombreRJugador(playerid), playerid, NombreRJugador(idjugador));
	    MensajeAdmin(string);
	    _Expulsar(playerid, 0, "Intentar advertir a un administrador.");
		return 1;
	}
	getdate(Year, Month, Day);
	format(string, sizeof string, "Recibiste una advertencia administrativa.\n\
	Responsable: %s %s\n\
	Razon: %s.\n\
	Fecha: %d de %s del %d\n\n\
	?Crees que esto es un error?, reportalo al equipo administrativo.",
	RangosAdministrativos(InfoJugador[playerid][jAdmin]), NombreRJugador(playerid),
	razon, Day, GetMonth(Month), Year);
	ShowPlayerDialog(idjugador, 0000, DIALOG_STYLE_MSGBOX, "Advertencia administrativo", string, "?", "");
	format(string, sizeof string, "Administracion: %s(%d) seteo una advertencia a %s(%d), razon: %s.", NombreRJugador(playerid), playerid, NombreRJugador(idjugador), idjugador, razon);
	MensajeAdmin(string);
	return 1;
}

stock VehicleGetFreeSlot() // This function is used to get the free slot available to be used on the vehicle. It will be the vehicle id.
{
    for(new i = 0; i < MAX_VEHICLES; i++) // Loop through all of the vehicles on the sa-mp world and increments the variable 'i' by 1.
    {
        if(!vCreated[i]) return i; // If that 'i' isn't being used on any of our system's vehicle then return this vehicle id and make use of it.
    }

    return -1; // Return -1 because 0 is a valid vehicle id for our system as we are left with -1.
}

CMD:cerca(playerid)
{
	new string[210];
	//puertas
	Loop(id, totalpuertas, 1) if (InfoPuerta[id][pEntradaX] != 0.0)
	{
		if (IsPlayerInRangeOfPoint(playerid, 2.5, InfoPuerta[id][pEntradaX], InfoPuerta[id][pEntradaY], InfoPuerta[id][pEntradaZ]))
		{
			SendClientMessageEx(playerid, 0xccccccFF, "Info: {FFFFFF}ID de la puerta %d, esta en tus 2.5 metros de cercania.", id);
		}
	}
	Loop(id2, totalterritorios, 1) if (InfoTerritorio[id2][tLugarX] != 0.0)
	{
 		if (IsPlayerInRangeOfPoint(playerid, 2.5, InfoTerritorio[id2][tLugarX], InfoTerritorio[id2][tLugarY], InfoTerritorio[id2][tLugarZ]))
 		{
 		    format(string, sizeof string, "Info: {FFFFFF}ID del territorio %d, esta en tus 2.5 metros de cercania.", id2);
 		    SendClientMessage(playerid, 0xccccccFF, string);
		}
	}
	for (new id4 = 0; id4 < MAX_ESTACION; id4++) //- Sistema de Estacionamientos
	{
 		if (IsPlayerInRangeOfPoint(playerid, 2.5, InfoEstacion[id4][ePos][0], InfoEstacion[id4][ePos][1], InfoEstacion[id4][ePos][2]))
 		{
 		    format(string, sizeof string, "Info: {FFFFFF}ID del estacionamiento %d, esta en tus 2.5 metros de cercania.", id4);
 		    SendClientMessage(playerid, 0xccccccFF, string);
		}
	}
	return 1;
}

CMD:quitarcables(playerid, params[])
{
    new string[128], playerid2;
    if(!Es_Banda(playerid, 1)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD.", 2000);
    if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/quitarcables [id jugador]");
    if (!IsPlayerConnected(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador seleccionado no se encuentra conectado.");
	if (playerid == playerid2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No te puedes hacer esto a ti mismo.");
	if (!CercaDelWeon(3.0, playerid, playerid2)) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Estas lejos del jugador."); return 1; }
	if (Spectando[playerid2] == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Estas lejos del jugador.");
	if (Taseado[playerid2] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no tiene cables de taser.");

	_FGomas2(playerid2);
	format(string, sizeof string, "%s retira los cables de %s.", NombreRJugador(playerid), NombreRJugador(playerid2));
	ProxDetector(15.0, playerid, string, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A, 0xACC97F22A);
	return 1;
}

CMD:vercargos(playerid)
{
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	new count_on = 0, hide_acoount[3084], gformat[256], indice[128];
	foreach(Player, playerid2) if (IsPlayerConnectedEx(playerid2) && InfoJugador[playerid2][jEstrellas] != 0)
	{
		new Float: x, Float: y, Float: z, locatziona[128] = "un interior";
		GetPlayerPos(playerid2, x, y, z);
		if (GetPlayerVirtualWorld(playerid2) == 0 && GetPlayerInterior(playerid2) == 0) Get2DZone(locatziona, MAX_ZONE_NAME, x, y, z);
		else { alm(locatziona, "Un interior"); }
		format(gformat, sizeof gformat, "{cccccc}%s (ID: %d) | Nivel de busqueda: {cccc00}%d{cccccc} | Ultima vez visto en: {008BFF}%s\n", NombreJugador(playerid2), playerid2, InfoJugador[playerid2][jEstrellas], locatziona);
		strcat(hide_acoount, gformat);
		count_on++;
	}
	if (count_on == 0) return SendClientMessageEx(playerid, 0xccccccff, "*** No hay ningun sospechoso conectado ***");
	format(indice, sizeof indice, "{cccccc}Hay %d sospechosos", count_on);
	Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, indice, hide_acoount, "Cerrar", "");
	return 1;
}
CMD:sospechosos(playerid) return cmd_vercargos(playerid);

CMD:responsable(playerid, params[])
{
	new string[210], idjugador;
	OnDuty
	if(InfoJugador[playerid][jAdmin] < 2) return 1;
	if (sscanf(params, "d", idjugador)) return _Mensaje(playerid, 3, "0", "/responsable [id jugador]");
    if (!IsPlayerConnected(idjugador)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador seleccionado no se encuentra conectado.");
    if(InfoJugador[idjugador][jEstrellas] == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador no tiene cargos registrados en su cuenta.");
    format(string, sizeof string, "* El responsable de los cargos fue: {FFFF00}%s{cccccc}.", InfoJugador[idjugador][jQuienPuso]);
    SendClientMessage(playerid, 0xccccccFF, string);
    return 1;
}

CMD:cargos(playerid, params[])
{
	new playerid2, cargos, faccion_ex[12], gformat[256];
	if (!Es_Banda(playerid, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "Debes ser miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (sscanf(params, "dd", playerid2, cargos)) return _Mensaje(playerid, 3, "0", "/cargos [id jugador] [cargos]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador seleccionado no se encuentra conectado.");
	if (Es_Banda(playerid2, 1, 2, 3)) return  ShowInfoForPlayer(playerid, "No puedes ponerle cargos a miembro de ~b~SAPD, ~y~SASD, ~w~o ~g~USMC.", 2000);
	if (cargos < 0 || cargos > 9999) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo cargos entre 0-9999.");
	if (InfoJugador[playerid2][jEstrellas] == cargos) return SendClientMessage(playerid, -1, "Ese jugador ya tiene los mismos cargos.");
	alm(InfoJugador[playerid2][jQuienPuso], NombreRJugador(playerid));
	guardar_string_mysql("cuentas", "QuienPuso", InfoJugador[playerid2][jID], InfoJugador[playerid2][jQuienPuso]);
	switch (InfoJugador[playerid][jFamMiembro])
	{
		case 1: alm(faccion_ex, "(SAPD)");
		case 2: alm(faccion_ex, "(ESA)");
		case 3: alm(faccion_ex, "(SASD)");
	}
	SendClientMessageEx(playerid2, 0xCCCC00FF, "** Alerta: %s de %s coloco tu nivel de busqueda a %d estrellas.", NombreRJugador(playerid), faccion_ex, cargos);
	if (cargos == 0)
	{
		InfoJugador[playerid2][jEstrellas] = 0;
		Sin_Cargos(playerid2);
		guardar_int_mysql("cuentas", "Estrellas", InfoJugador[playerid2][jID], InfoJugador[playerid2][jEstrellas]);
		InfoJugador[playerid2][jMinEstrellas] = 0;
		guardar_int_mysql("cuentas", "MinEstrellas", InfoJugador[playerid2][jID], InfoJugador[playerid2][jMinEstrellas]);
		Set_Player_Wasted(playerid2, InfoJugador[playerid2][jEstrellas]);
		format(gformat, sizeof gformat, "CENTRAL: %s de %s limpia el nivel de busqueda de %s.", NombreRJugador(playerid), faccion_ex, NombreRJugador(playerid2));
	    SendMessageFaction(C_COLORPOLICIA, gformat, 1, 2, 3);
		return 1;
	}
	InfoJugador[playerid2][jEstrellas] = cargos;
	switch (cargos)
	{
		case 1: InfoJugador[playerid2][jMinEstrellas] = 5;
		case 2: InfoJugador[playerid2][jMinEstrellas] = 30;
		case 3: InfoJugador[playerid2][jMinEstrellas] = 120;
		default: InfoJugador[playerid2][jMinEstrellas] = 0;
	}
	guardar_int_mysql("cuentas", "Estrellas", InfoJugador[playerid2][jID], InfoJugador[playerid2][jEstrellas]);
	guardar_int_mysql("cuentas", "MinEstrellas", InfoJugador[playerid2][jID], InfoJugador[playerid2][jMinEstrellas]);
	Set_Player_Wasted(playerid2, InfoJugador[playerid2][jEstrellas]);
	format(gformat, sizeof gformat, "CENTRAL: %s de %s coloca el nivel de busqueda de %s a %d estrellas.", NombreRJugador(playerid), faccion_ex, NombreRJugador(playerid2), cargos);
    SendMessageFaction(C_COLORPOLICIA, gformat, 1, 2, 3);
	foreach(Player, playerid3) if (IsPlayerConnectedEx(playerid3) && InfoJugador[playerid3][jDutyPD] != 0)
	{
	    if(InfoJugador[playerid2][jMuerto] == 0)
	    {
		    switch(cargos)
		    {
		        case 1: SetPlayerMarkerForPlayer(playerid3, playerid2, 0xFFF48BFF);
		        case 2: SetPlayerMarkerForPlayer(playerid3, playerid2, 0xF5C518FF);
		        case 3: SetPlayerMarkerForPlayer(playerid3, playerid2, 0xE7B504FF);
		        case 4: SetPlayerMarkerForPlayer(playerid3, playerid2, 0xE78A04FF);
		        case 5: SetPlayerMarkerForPlayer(playerid3, playerid2, 0xE75A04FF);
		        case 6: SetPlayerMarkerForPlayer(playerid3, playerid2, 0xE73E04FF);
			}
		}
		else
		{
		    SetPlayerMarkerForPlayer(playerid3, playerid2, 0x3EFF00FF);
		}
	}
	return 1;
}
CMD:k(playerid, params[]) return cmd_cargos(playerid, params);

stock HexToRGBA(colour, &r, &g, &b, &a) //By Betamaster
{
    r = (colour >> 24) & 0xFF;
    g = (colour >> 16) & 0xFF;
    b = (colour >> 8) & 0xFF;
    a = colour & 0xFF;
}

stock RGBAToHex(r, g, b, a) //By Betamaster
{
    return (r<<24 | g<<16 | b<<8 | a);
}

stock IsValidGangZone(ID)
{
	return (Bit_Get(ValidGZ, ID)) ? (true) : (false);
}

SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];

	if ((args = numargs()) == 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4
		SendClientMessage(playerid, color, str);
		#emit RETN
	}
	return 1;
}

CMD:panelcuenta(playerid, params[])
{
	if(InfoJugador[playerid][jAdmin] < 11) return 0;
	if (isnull(params)) return _Mensaje(playerid, 3, "0", "/panelcuenta [Nombre_Apellido]");
	if (VerificarCuenta(params))
	{
		new oID, oBan, oRespon[60], oRazon[60], oNivel, oHoras, oExperiencia, oMembresia, oDinero, oBanco;
		reg_int(0, "ID", oID);
		reg_int(0, "Baneado", oBan);
		reg_string(0, "Ban_c", oRespon, 32);
		reg_string(0, "Ban_r", oRazon, 50);
		reg_int(0, "Nivel", oNivel);
		reg_int(0, "HorasConectado", oHoras);
		reg_int(0, "Experiencia", oExperiencia);
		reg_int(0, "NivelVIP", oMembresia);
		reg_int(0, "Dinero", oDinero);
		reg_int(0, "Banco", oBanco);
		cache_unset_active();
		new hide_acoount[3500], gformat[320], indice[1200], proximonvl = oNivel + 1, cantidadexp = proximonvl * nivelexp;
		if (oBan == 0) { format(gformat, sizeof gformat, "{cccccc}Baneado: {FFFFFF}No\n"); strcat(hide_acoount, gformat); }
		else {
			format(gformat, sizeof gformat, "{cccccc}Baneado: {FF3600}Si\n"); strcat(hide_acoount, gformat);
			format(gformat, sizeof gformat, "{cccccc}Responsable: %s\n", oRespon); strcat(hide_acoount, gformat);
			format(gformat, sizeof gformat, "{cccccc}Raz?n: {FFB600}%s\n", oRazon); strcat(hide_acoount, gformat);
		}
		format(gformat, sizeof gformat, "{cccccc}Nivel: {FFFFFF}%d (%d/%d)\n", oNivel, oExperiencia, cantidadexp);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Horas jugadas: {FFFFFF}%d hrs\n", oHoras);
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Membresia: {FFFFFF}%s\n", GetNameVIP(oMembresia));
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Dinero: {1EB032}$%s\n", diner_coma(oDinero));
		strcat(hide_acoount, gformat);
		format(gformat, sizeof gformat, "{cccccc}Saldo bancario: {1EB032}$%s\n", diner_coma(oBanco));
		strcat(hide_acoount, gformat);
		format(indice, sizeof indice, "{56BB4E}%s {cccccc}(SQLID: %d)", params, oID);
		Dialog_Show(playerid, ShowInvalido, DIALOG_STYLE_MSGBOX, indice, hide_acoount, "Cerrar", "");
		return 1;
	}
	ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No existe esa cuenta.");
	return 1;
}

CMD:paneladmin(playerid, params[])
{
	if(InfoJugador[playerid][jAdmin] < 11) return 0;
	new idjugador;
 	if (sscanf(params, "d", idjugador)) return _Mensaje(playerid, 3, "0", "/paneladmin [id jugador]");
 	if (!IsPlayerConnected(idjugador)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	PanelAdministrativo(playerid, idjugador);
	return 1;
}

stock PanelAdministrativo(idjugador, idjugador2)
{
    new string[550*5], salida1[50], salida2[50], salida3[50], salida4[120],salida5[50], salida6[50], salida7[50],
	salida8[50], salida9[50], salida10[50];
	if(InfoJugador[idjugador2][jRestriccion][0] == 1) format(salida1, sizeof(salida1), "> {1EB032}Si");
	else if(InfoJugador[idjugador2][jAdmin] > 0) format(salida1, sizeof(salida1), "> {1EB032}Rango necesario");
	else format(salida1, sizeof(salida1), "< {dd643a}No");
	//
	if(InfoJugador[idjugador2][jRestriccion][1] == 1) format(salida2, sizeof(salida2), "> {1EB032}Si");
	else if(InfoJugador[idjugador2][jAdmin] > 0) format(salida2, sizeof(salida2), "> {1EB032}Rango necesario");
	else format(salida2, sizeof(salida2), "< {dd643a}No");
	//
	if(InfoJugador[idjugador2][jRestriccion][2] == 1) format(salida3, sizeof(salida3), "> {1EB032}Si");
	else if(InfoJugador[idjugador2][jAdmin] > 0) format(salida3, sizeof(salida3), "> {1EB032}Rango necesario");
	else format(salida3, sizeof(salida3), "< {dd643a}No");
	//
	if(InfoJugador[idjugador2][jRestriccion][3] == 1) format(salida4, sizeof(salida4), "> {1EB032}Si");
	else if(InfoJugador[idjugador2][jAdmin] >= 3) format(salida4, sizeof(salida4), "> {1EB032}Rango necesario");
	else format(salida4, sizeof(salida4), "< {dd643a}No");
	//
	if(InfoJugador[idjugador2][jRestriccion][4] == 1) format(salida5, sizeof(salida5), "> {1EB032}Si");
	else if(InfoJugador[idjugador2][jAdmin] > 2) format(salida5, sizeof(salida5), "> {1EB032}Rango necesario");
	else format(salida5, sizeof(salida5), "< {dd643a}No");
	//
	if(InfoJugador[idjugador2][jRestriccion][5] == 1) format(salida6, sizeof(salida6), "> {1EB032}Si");
	else if(InfoJugador[idjugador2][jAdmin] > 1) format(salida6, sizeof(salida6), "> {1EB032}Rango necesario");
	else format(salida6, sizeof(salida6), "< {dd643a}No");
	//
	if(InfoJugador[idjugador2][jRestriccion][6] == 1) format(salida7, sizeof(salida7), "> {1EB032}Si");
	else if(InfoJugador[idjugador2][jAdmin] > 0) format(salida7, sizeof(salida7), "> {1EB032}Rango necesario");
	else format(salida7, sizeof(salida7), "< {dd643a}No");
	//
	if(InfoJugador[idjugador2][jRestriccion][7] == 1) format(salida8, sizeof(salida8), "> {1EB032}Si");
	else if(InfoJugador[idjugador2][jAdmin] >= 3) format(salida8, sizeof(salida8), "> {1EB032}Rango necesario");
	else format(salida8, sizeof(salida8), "< {dd643a}No");
	//
	if(InfoJugador[idjugador2][jRestriccion][8] == 1) format(salida9, sizeof(salida9), "> {1EB032}Si");
	else if(InfoJugador[idjugador2][jAdmin] >= 3) format(salida9, sizeof(salida9), "> {1EB032}Rango necesario");
	else format(salida9, sizeof(salida9), "< {dd643a}No");
	//
	if(InfoJugador[idjugador2][jRestriccion][9] == 1) format(salida10, sizeof(salida10), "> {1EB032}Si");
	else if(InfoJugador[idjugador2][jAdmin] >= 3) format(salida10, sizeof(salida10), "> {1EB032}Rango necesario");
	else format(salida10, sizeof(salida10), "< {dd643a}No");
	//
    format(string, sizeof string, "Acceso a comando /ir\t%s\n\
	Acceso a comando /traer\t%s\n\
	Acceso a comando /mutear\t%s\n\
	Acceso a comando /banear\t%s\n\
	Acceso a comando /ao\t%s\n\
	Acceso a comando /jail\t%s\n\
	Acceso a comando /kick\t%s\n\
	Acceso a comando /desban\t%s\n\
	Acceso a comando /vercuenta\t%s\n\
	Acceso a comando /vercoches\t%s\n\
	{D16363}Expulsar del staff\n\
	{D16363}Kickear del servidor\n\
	{D16363}Banear del servidor\n\
	{FF4200}Crashear",
	salida1, salida2, salida3, salida4, salida5, salida6, salida7, salida8, salida9, salida10);
	ShowPlayerDialog(idjugador, 9001, DIALOG_STYLE_TABLIST, "Configuracion administrativa", string, ">", "?");
	SetPVarInt(idjugador, "PersonaID", idjugador2);
	return 1;
}

forward timer_anuncios();
public timer_anuncios()
{
	new seleccion = random(6);
	switch (seleccion)
	{
		case 0: SendClientMessageToAll(0xccccccFF, "|> {FFFFFF}Ahora tenemos metodos de pagos para {FFFF00}Argentina, Mexico, Panama, y Colombia{cccccc}.");
		case 1: SendClientMessageToAll(0xccccccFF, "|> {FFFFFF}Tenemos nuestro discord operativo e interactivo para ti es {7190C8}https://discord.gg/f4FQ6cYK");
		case 2: SendClientMessageToAll(0xccccccFF, "|> {FFFFFF}?Tienes alguna duda de nuestros sistemas?, puedes usar {FFFF00}/duda {cccccc}o {FFFF00}/ayuda");
		case 3: SendClientMessageToAll(0xccccccFF, "|> {FFFFFF}?Quieres saber mas sobre {ea2c2c}North America Oficial{cccccc}?, ingresa a nuestro facebook www.fb.com/North America OficialRPG.");
		case 4: SendClientMessageToAll(0xccccccFF, "|> {FFFFFF}Estos son nuestros metodos {ea2c2c}PayPal, OXXO{cccccc} y muchos mas.");
	}
	return 1;
}

stock GetPlayerInVehicleSeat(vehicleid, seat_id)
{
    foreach(new i : Player) if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seat_id) return i;

	return INVALID_PLAYER_ID;
}

stock GetXYInFrontOfVehicle(vehicleid, &Float:x, &Float:y, Float:distance)
{
    new Float:z, Float:angle;
    GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, angle);
    x += (distance * floatsin(-angle, degrees));
    y += (distance * floatcos(-angle, degrees));
}

stock GetNearestVehicleID(playerid, Float: radius = 0.0)
{
	if(radius == 0.0)
		radius = FLOAT_INFINITY;

	new vehicleid = INVALID_VEHICLE_ID;

	new Float: dist;
	new Float: pos_x, Float: pos_y, Float: pos_z;

	GetPlayerPos(playerid, pos_x, pos_y, pos_z);
	for(new idx; idx < MAX_VEHICLES; idx ++)
	{
		if(!IsValidVehicle(idx)) continue;
		if(!IsVehicleStreamedIn(idx, playerid)) continue;

		dist = GetVehicleDistanceFromPoint(idx, pos_x, pos_y, pos_z);
		if(dist < radius)
		{
			radius = dist,
			vehicleid = idx;
		}
	}
	return vehicleid;
}

stock SetPlayerFaceToPoint(playerid, Float:X, Float:Y)
{
	new Float:angle;
	new Float:misc = 5.0;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	angle = 180.0-atan2(x-X,y-Y);
	angle += misc;
	misc *= -1;
	SetPlayerFacingAngle(playerid, angle+misc);
	return 1;
}

function ClearFreeze(playerid)
{
    if(GetPVarInt(playerid, "fTazzer"))
	{
		TogglePlayerControllable(playerid, 1);
		ClearAnimations(playerid);
		DeletePVar(playerid, "fTazzer");
		ShowPlayerFooter(playerid, "~n~~n~~n~~n~~g~Manos libres nuevamente.");
	}
    else TogglePlayerControllable(playerid, 1);
    return 1;
}

CMD:crearestacion(playerid, params[])
{
    if(InfoJugador[playerid][jAdmin] < 11) return 0;
	static
	    id = -1,
		string[210];

	id = Crear_Estacionamiento(playerid);

	if(id == -1)
	    return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No se pueden crear mas estacionamientos.");

	format(string, sizeof string, "Info: {FFFFFF}Has creado el estacionamiento municipal [ID:%d].", id);
	SendClientMessage(playerid, 0xccccccFF, string);
	return 1;
}

stock Crear_Estacionamiento(playerid)
{
    new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_ESTACION; i ++) if (!InfoEstacion[i][eExists])
		{
		    InfoEstacion[i][eExists] = true;

		    x += 1.0 * floatsin(-angle, degrees);
			y += 1.0 * floatcos(-angle, degrees);

			InfoEstacion[i][ePos][0] = x;
			InfoEstacion[i][ePos][1] = y;
			InfoEstacion[i][ePos][2] = z;
			InfoEstacion[i][ePos][3] = angle;
			//
			InfoEstacion[i][eInterior][0] = 2058.5400;
			InfoEstacion[i][eInterior][1] = 2437.2600;
			InfoEstacion[i][eInterior][2] = 10.8428;

			Estacion_Refresh(i);
			mysql_tquery(DBngrp, "INSERT INTO `estacionamientos` (`ID`) VALUES(0)", "OnEstacionCreated", "d", i);
			return i;
		}
	}
	return -1;
}

forward OnEstacionCreated(id);
public OnEstacionCreated(id)
{
    if (id == -1 || !InfoEstacion[id][eExists])
	    return 0;

	InfoEstacion[id][eID] = cache_insert_id();
	cache_unset_active();
	Estacion_Refresh(id);
	Estacion_Save(id);
	return 1;
}

stock Estacion_Refresh(id)
{
	if (id != -1 && InfoEstacion[id][eExists])
	{
		if (IsValidDynamic3DTextLabel(InfoEstacion[id][eText3D]))
		{
			DestroyDynamic3DTextLabel(InfoEstacion[id][eText3D]);
			InfoEstacion[id][eText3D] = Text3D:INVALID_3DTEXT_ID;
		}
		if (IsValidDynamic3DTextLabel(InfoEstacion[id][eText3D2]))
		{
			DestroyDynamic3DTextLabel(InfoEstacion[id][eText3D2]);
			InfoEstacion[id][eText3D2] = Text3D:INVALID_3DTEXT_ID;
		}
        if (IsValidDynamicPickup(InfoEstacion[id][ePickup]))
		    DestroyDynamicPickup(InfoEstacion[id][ePickup]);

		if (IsValidDynamicPickup(InfoEstacion[id][ePickup2]))
		    DestroyDynamicPickup(InfoEstacion[id][ePickup2]);

        if (IsValidDynamicMapIcon(InfoEstacion[id][eMapIcon]))
		    DestroyDynamicMapIcon(InfoEstacion[id][eMapIcon]);

        InfoEstacion[id][eText3D] = CreateDynamic3DTextLabel("Estacionamiento municipal\n{FFFFFF}Propietario: {1EB032}Gobierno\n\n{cccccc}Presiona 'H' a pie o /entrar desde un coche.", 0x3F84B7FF, InfoEstacion[id][ePos][0], InfoEstacion[id][ePos][1], InfoEstacion[id][ePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
        InfoEstacion[id][eText3D2] = CreateDynamic3DTextLabel("Estacionamiento municipal\n\n{cccccc}Presiona 'H' a pie o /salir desde un coche.", 0x3F84B7FF, InfoEstacion[id][eInterior][0], InfoEstacion[id][eInterior][1], InfoEstacion[id][eInterior][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, id + 6);

        InfoEstacion[id][ePickup] = CreateDynamicPickup(19197, 23, InfoEstacion[id][ePos][0], InfoEstacion[id][ePos][1], InfoEstacion[id][ePos][2] + 0.3, 0, 0);
		InfoEstacion[id][ePickup] = CreateDynamicPickup(19197, 23, InfoEstacion[id][eInterior][0], InfoEstacion[id][eInterior][1], InfoEstacion[id][eInterior][2], 2, id + 6);

		InfoEstacion[id][eMapIcon] = _MapIcon(InfoEstacion[id][ePos][0], InfoEstacion[id][ePos][1], InfoEstacion[id][ePos][2], 60);
	}
	return 0;
}

Estacion_Save(id)
{
	static
	    query[2048];

	mysql_format(DBngrp, query, sizeof query, "UPDATE `estacionamientos` SET `Pos_X` = '%.4f', `Pos_Y` = '%.4f', `Pos_Z` = '%.4f', `Pos_A` = '%.4f', `Int_Y` = '%.4f', `Int_Z` = '%.4f' WHERE `ID` = '%d'",
	    InfoEstacion[id][ePos][0],
	    InfoEstacion[id][ePos][1],
	    InfoEstacion[id][ePos][2],
	    InfoEstacion[id][ePos][3],
	    InfoEstacion[id][eInterior][0],
	    InfoEstacion[id][eInterior][1],
	    InfoEstacion[id][eInterior][2],
	    InfoEstacion[id][eID]
	);
	return mysql_tquery(DBngrp, query);
}

forward Estacionamientos_Load();
public Estacionamientos_Load()
{
	new countesta = 0;
	Loop(i, cache_num_rows(), 0)
	{
	    InfoEstacion[i][eExists] = true;
	    cache_get_value_name_int(i, "ID", InfoEstacion[i][eID]);
	    cache_get_value_name_float(i, "Pos_X", InfoEstacion[i][ePos][0]);
	    cache_get_value_name_float(i, "Pos_Y", InfoEstacion[i][ePos][1]);
	    cache_get_value_name_float(i, "Pos_Z", InfoEstacion[i][ePos][2]);
	    cache_get_value_name_float(i, "Pos_A", InfoEstacion[i][ePos][3]);
	    cache_get_value_name_float(i, "Int_X", InfoEstacion[i][eInterior][0]);
	    cache_get_value_name_float(i, "Int_Y", InfoEstacion[i][eInterior][1]);
	    cache_get_value_name_float(i, "Int_Z", InfoEstacion[i][eInterior][2]);
	    Estacion_Refresh(i);
	    countesta++;
	}
	printf("[MySQL] -> Han cargado %d estacionamientos dinamicos",countesta);
	return 1;
}

//news by edinsonwalker desde 16-10-2020
FechaHoy()
{
	new Ano, Mes, Dia, Hora, Minutos, Segundos, gformat[256];
	getdate(Ano, Mes, Dia);
	gettime(Hora, Minutos, Segundos);
	format(gformat, sizeof gformat, "%02d/%02d/%02d - %02d:%02d:%02d", Dia, Mes, Ano, Hora, Minutos, Segundos);
	return gformat;
}

Segundos_tiempo(segundos)
{
	new gformat[256], minutos, horitas, dias;
	if (segundos > 59)
	{
		minutos = segundos / 60;
		segundos = segundos - (minutos * 60);
	}
	if (minutos > 59)
	{
		horitas = minutos / 60;
		minutos = minutos - (horitas * 60);
	}
	if (horitas > 23)
	{
		dias = horitas / 24;
		horitas = horitas - (dias * 24);
	}
	if (dias > 0)
    {
//		format(gformat, sizeof gformat, "%d dias, %d hrs, %d mins, %d segs", dias, horitas, minutos, segundos);
		format(gformat, sizeof gformat, "%d dias, %d hrs, %d mins", dias, horitas, minutos);
	}
	else if (horitas > 0)
	{
		format(gformat, sizeof gformat, "%d hrs, %d mins, %d segs", horitas, minutos, segundos);
	}
	else if (minutos > 0)
	{
		format(gformat, sizeof gformat, "%d mins, %d segs", minutos, segundos);
	}
	else
	{
		format(gformat, sizeof gformat, "%d segs", segundos);
	}
	return gformat;
}

Minutos_tiempo(minutos)
{
	new gformat[256], horitas, dias;
	if (minutos > 59)
	{
		horitas = minutos / 60;
		minutos = minutos - (horitas * 60);
	}
	if (horitas > 23)
	{
		dias = horitas / 24;
		horitas = horitas - (dias * 24);
	}
	if (dias > 0)
    {
		format(gformat, sizeof gformat, "%d dias, %d hrs, %d mins", dias, horitas, minutos);
	}
	else if (horitas > 0)
	{
		format(gformat, sizeof gformat, "%d hrs, %d mins", horitas, minutos);
	}
	else
	{
		format(gformat, sizeof gformat, "%d mins", minutos);
	}
	return gformat;
}

stock diner_coma(e_number) /* By adri1 - SFR3 4.3 */
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if(e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}

	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, ",", numbers);
	}

	if(negative) strins(f_string, "-", 0);
	return f_string;
}

stock PlayerTextDrawSetStringEx(playerid, PlayerText:Text_ID, text[])
{
	return PlayerTextDrawSetString(playerid, Text_ID, Fix_GT(text));
}

stock TextDrawSetStringEx(Text:Text_ID, text[])
{
	return TextDrawSetString(Text_ID, Fix_GT(text));
}

stock Fix_GT(string[])
{
	new szFixed[1024], iPos, iLen;
	for (iLen = strlen(string); iPos < iLen; iPos ++)
		switch (string[iPos])
		{
			case 'à':   szFixed[iPos] = 151;
			case 'á':   szFixed[iPos] = 152;
			case 'â':   szFixed[iPos] = 153;
			case 'ä':   szFixed[iPos] = 154;
			case 'À':   szFixed[iPos] = 128;
			case 'Á':   szFixed[iPos] = 129;
			case 'Â':   szFixed[iPos] = 130;
			case 'Ä':   szFixed[iPos] = 131;
			case 'è':   szFixed[iPos] = 157;
			case 'é':   szFixed[iPos] = 158;
			case 'ê':   szFixed[iPos] = 159;
			case 'ë':   szFixed[iPos] = 160;
			case 'È':   szFixed[iPos] = 134;
			case 'É':   szFixed[iPos] = 135;
			case 'Ê':   szFixed[iPos] = 136;
			case 'Ë':   szFixed[iPos] = 137;
			case 'ì':   szFixed[iPos] = 161;
			case 'í':   szFixed[iPos] = 162;
			case 'î':   szFixed[iPos] = 163;
			case 'ï':   szFixed[iPos] = 164;
			case 'Ì':   szFixed[iPos] = 138;
			case 'Í':   szFixed[iPos] = 139;
			case 'Î':   szFixed[iPos] = 140;
			case 'Ï':   szFixed[iPos] = 141;
			case 'ò':   szFixed[iPos] = 165;
			case 'ó':   szFixed[iPos] = 166;
			case 'ô':   szFixed[iPos] = 167;
			case 'ö':   szFixed[iPos] = 168;
			case 'Ò':   szFixed[iPos] = 142;
			case 'Ó':   szFixed[iPos] = 143;
			case 'Ô':   szFixed[iPos] = 144;
			case 'Ö':   szFixed[iPos] = 145;
			case 'ù':   szFixed[iPos] = 169;
			case 'ú':   szFixed[iPos] = 170;
			case 'û':   szFixed[iPos] = 171;
			case 'ü':   szFixed[iPos] = 172;
			case 'Ù':   szFixed[iPos] = 146;
			case 'Ú':   szFixed[iPos] = 147;
			case 'Û':   szFixed[iPos] = 148;
			case 'Ü':   szFixed[iPos] = 149;
			case 'ñ':   szFixed[iPos] = 174;
			case 'Ñ':   szFixed[iPos] = 173;
			case '¡':   szFixed[iPos] = 64;
			case '¿':   szFixed[iPos] = 175;
			case '`':   szFixed[iPos] = 177;
			case '&':   szFixed[iPos] = 38;
			default:    szFixed[iPos] = string[iPos];
	}
	return szFixed;
}

forward BuscarGanadorCoin();
public BuscarGanadorCoin()
{
	new string[210], idjugador = connectedGetRandomID();
	if(IsPlayerConnected(idjugador))
	{
 		new Users = Iter_Count(Player);

		if(Users > 29)
		{
			format(string, sizeof(string), "[OOC] North America Oficial[101]: El ganador del payday coin es %s(%d).", NombreRJugador(idjugador), idjugador);
			SendClientMessageToAll(0xFFB600FF, string);
			InfoJugador[idjugador][jCoins] += 1;
			guardar_int_mysql("cuentas", "Coins", InfoJugador[idjugador][jID], InfoJugador[idjugador][jCoins]);
			format(string, sizeof(string), "Info: {FFFFFF}Ganaste {1EB032}1 coins {FFFFFF}por el PayDay coin.");
			SendClientMessage(idjugador, 0xccccccFF, string);
		}
		else
		{
		    format(string, sizeof(string), "[OOC] North America Oficial[101]: Tenemos %d de los 30 usuarios para activar el PayDay Coin.", Users);
			SendClientMessageToAll(0xFFB600FF, string);
		}
	}
	else
	{
	    format(string, sizeof(string), "[OOC] North America Oficial[101]: Este Payday coin no lo gano nadie, quedo para el servidor.");
		SendClientMessageToAll(0xFFB600FF, string);
	}
	return -1;
}

connectedGetRandomID()
{
	new RandomID = random(GetMaxPlayers()), total_players_count;
	for(new i; i < GetMaxPlayers(); i++)
	{
		if(IsPlayerConnectedEx(i))
		{
			total_players_count ++;
			if(IsPlayerConnected(RandomID))
			{
				return RandomID;
			}
		}
	}
	if(total_players_count > 1)
	{
		return connectedGetRandomID();
	}
	else
	{
		for(new i; i < GetMaxPlayers(); i++)
		{
			if(IsPlayerConnectedEx(i))
			{
				return i;
			}
		}
	}
	return -1;
}

AddRegistroMoney(ip[], nombre[], dato[], tipo)
{
	new query[1028];
	switch(tipo)
	{
	    case 0:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_monetarios` (`IP`, `Nombre_Apellido`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '/pagar', '%e')", ip, nombre, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 1:
		{
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_monetarios` (`IP`, `Nombre_Apellido`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', 'banco', '%e')", ip, nombre, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 2:
		{
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_monetarios` (`IP`, `Nombre_Apellido`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', 'gobierno', '%e')", ip, nombre, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 3:
		{
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_monetarios` (`IP`, `Nombre_Apellido`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', 'negocio-caja', '%e')", ip, nombre, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 4:
		{
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_monetarios` (`IP`, `Nombre_Apellido`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', 'compras-personales', '%e')", ip, nombre, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 5:
		{
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_monetarios` (`IP`, `Nombre_Apellido`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', 'casa-caja', '%e')", ip, nombre, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 6:
		{
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_monetarios` (`IP`, `Nombre_Apellido`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', 'familia-caja', '%e')", ip, nombre, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 7:
		{
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_monetarios` (`IP`, `Nombre_Apellido`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '/darcheque', '%e')", ip, nombre, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
	}
}

AddRegistroADM(ip[], nombre[], rango[], dato[], tipo)
{
	new query[2100];
	switch (tipo)
	{
	    case 0:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e, 'Coins-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 1:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e, 'CocheFam-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 2:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e, 'CreoFam-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 3:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e, 'MultiCuenta-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 4:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e, 'Asignacion-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 5:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e, 'DarDinero-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 6:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e, 'Rango-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 7:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e, 'DarVIP-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 8:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e, 'DarPuntoRol-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 9:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e, 'CrearAuto-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 10:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e, 'CrearObjeto-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 11:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e, 'Casas-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 12:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e, 'Jail-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 13:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e, 'Desban-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 14:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e, 'Baneos-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
		case 15:
	    {
			mysql_format(DBngrp, query, sizeof query, "INSERT INTO `registro_admin` (`IP`, `Nombre_Apellido`, `Rango`, `Fecha`, `Tipo`, `Dato`) VALUES ('%e', '%e', '%e', '%e', 'CrearNegocio-ADM', '%e')", ip, nombre, rango, FechaHoy(), dato);
			mysql_tquery(DBngrp, query);
		}
	}
}

forward CargarMercado();
public CargarMercado()
{
	new cargadito = 0;
    Loop(tabla, cache_num_rows(), 0)
	{

        cargadito++;
        totalmercados++;
        new id = tabla+1;
        MercadoData[id][mExists] = true;
        reg_int(tabla, "ID", MercadoData[id][mID]);
        reg_float(tabla, "Pos_X", MercadoData[id][mPos][0]);
        reg_float(tabla, "Pos_Y", MercadoData[id][mPos][1]);
        reg_float(tabla, "Pos_Z", MercadoData[id][mPos][2]);
        reg_float(tabla, "Pos_A", MercadoData[id][mPos][3]);
        reg_float(tabla, "Interior_X", MercadoData[id][mInt][0]);
        reg_float(tabla, "Interior_Y", MercadoData[id][mInt][1]);
        reg_float(tabla, "Interior_Z", MercadoData[id][mInt][2]);
        reg_float(tabla, "Interior_A", MercadoData[id][mInt][3]);
        reg_int(tabla, "BajoConquista", MercadoData[id][mBajoConquista]);
        reg_string(tabla, "QuienEstaConquistando", MercadoData[id][mQuienConquisto],80);
        reg_int(tabla, "InteriorID", MercadoData[id][mInterior]);
        reg_int(tabla, "InteriorVW", MercadoData[id][mVW]);
        reg_string(tabla, "Localizacion", MercadoData[id][mLocalizacion],120);
        reg_int(tabla, "Conquistado", MercadoData[id][mConquistado]);
        reg_string(tabla, "QuienConquisto", MercadoData[id][mQuienConquisto],120);
        reg_int(tabla, "Familia", MercadoData[id][mIDFamilia]);
        reg_int(tabla, "TiempoConquista", MercadoData[id][mTiempoConquista]);
        reg_int(tabla, "TiempoConquista2", MercadoData[id][mTiempoConquista2]);
        Mercado_Refresh(id);
	}
	printf("%d mercados dinamicas [SQL: %d] cargados correctamente.", cargadito, totalmercados-1);
}

forward CargarFabricas();
public CargarFabricas()
{
	new cargadito = 0;
    Loop(tabla, cache_num_rows(), 0)
	{
        cargadito++;
        new id = tabla+1;
        InfoFabrica[id][fabricaExists] = true;
        reg_int(tabla, "ID", InfoFabrica[id][fabricaID]);
        reg_float(tabla, "Pos_X", InfoFabrica[id][fabricaPos][0]);
        reg_float(tabla, "Pos_Y", InfoFabrica[id][fabricaPos][1]);
        reg_float(tabla, "Pos_Z", InfoFabrica[id][fabricaPos][2]);
        reg_float(tabla, "Pos_A", InfoFabrica[id][fabricaPos][3]);
        reg_float(tabla, "Interior_X", InfoFabrica[id][fabricaInterior][0]);
        reg_float(tabla, "Interior_Y", InfoFabrica[id][fabricaInterior][1]);
        reg_float(tabla, "Interior_Z", InfoFabrica[id][fabricaInterior][2]);
        reg_float(tabla, "Interior_A", InfoFabrica[id][fabricaInterior][3]);
        reg_int(tabla, "InteriorID", InfoFabrica[id][fabricaInteriorID]);
        reg_int(tabla, "InteriorVW", InfoFabrica[id][fabricaVW]);
        reg_string(tabla, "Localizacion", InfoFabrica[id][fabricaLocalizacion],120);
        reg_int(tabla, "Conquistado", InfoFabrica[id][fabricaConquistada]);
        reg_string(tabla, "QuienConquisto", InfoFabrica[id][fabricaQuienConquisto],120);
        reg_int(tabla, "IDFamilia", InfoFabrica[id][fabricaIDFaccion]);
        reg_int(tabla, "TiempoConquista", InfoFabrica[id][fabricaTiempoConquista]);
		if (InfoFabrica[id][fabricaID] != 0) cargadito++;
        if (InfoFabrica[id][fabricaPos][0] != 0.0)
        {
			Fabrica_Refresh(id);
			totalfabricas++;
		}
	}
	printf("%d fabricas dinamicas [SQL: %d] cargados correctamente.", cargadito, totalfabricas-1);
}

// registros fix 01/04/2021
AddRegistroCasa(playerid, casa, dato[])
{
	new query[1028], Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	mysql_format(DBngrp, query, sizeof query, "INSERT INTO registro_casas (IP, Nombre_Apellido, Casa, Fecha, Nota) VALUES ('%e', '%e', '%d', '%e', '%e')", Ip, InfoJugador[playerid][jNombre_Apellido], casa, FechaHoy(), dato);
	mysql_tquery(DBngrp, query);
}

AddRegistroFam(playerid, familia[], dato[])
{
	new query[1028], Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	mysql_format(DBngrp, query, sizeof query, "INSERT INTO registro_familias (IP, Nombre_Apellido, Familia, Fecha, Dato) VALUES ('%e', '%e', '%e', '%e', '%e')", Ip, InfoJugador[playerid][jNombre_Apellido], familia, FechaHoy(), dato);
	mysql_tquery(DBngrp, query);
}

AddRegistroAC(playerid, dato[])
{
	new query[1028], Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	mysql_format(DBngrp, query, sizeof query, "INSERT INTO registro_anticheat (IP, Nombre_Apellido, Fecha, Dato) VALUES ('%e', '%e', '%e', '%e')", Ip, InfoJugador[playerid][jNombre_Apellido], FechaHoy(), dato);
	mysql_tquery(DBngrp, query);
}

AddRegistroCoin(playerid, dato[])
{
	new query[1028], Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	mysql_format(DBngrp, query, sizeof query, "INSERT INTO registro_coins (IP, Nombre_Apellido, Fecha, Dato) VALUES ('%e', '%e', '%e', '%e')", Ip, InfoJugador[playerid][jNombre_Apellido], FechaHoy(), dato);
	mysql_tquery(DBngrp, query);
}

AddRegistroToys(playerid, dato[])
{
	new query[1028], Ip[18];
	GetPlayerIp(playerid, Ip, 18);
	mysql_format(DBngrp, query, sizeof query, "INSERT INTO registro_toys (IP, Nombre_Apellido, Fecha, Dato) VALUES ('%e', '%e', '%e', '%e')", Ip, InfoJugador[playerid][jNombre_Apellido], FechaHoy(), dato);
	mysql_tquery(DBngrp, query);
}

stock TimeConvert(seconds)
{
	new tmp[16];
 	new minutes = floatround(seconds/60);
  	seconds -= minutes*60;
   	format(tmp, sizeof(tmp), "%d:%02d", minutes, seconds);
   	return tmp;
}

CMD:crearvtmp(playerid, params[])
{
	new id, name[32], string[210];

    if (InfoJugador[playerid][jAdmin] < 11) return 0;
    if (sscanf(params, "s[32]", name)) return _Mensaje(playerid, 3, "0", "/crearvtmp [nombre]");

    id = punto_veh_tempral(playerid, name);

	if (id == -1)
	    return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El servidor alcanzo el maximo de puntos de vehiculos temporales.");

	format(string, sizeof string, "Administracion: %s(%d) cre? un punto de veh temporales (ID:%d).", NombreJugador(playerid), playerid, id);
	MensajeAdmin(string);
	return 1;
}

CMD:editarvtmp(playerid, params[])
{
	if (InfoJugador[playerid][jAdmin] < 11) return 0;
	OnDuty
	new id_punto, dialog[2150], string[120];
	if (sscanf(params, "d", id_punto)) return _Mensaje(playerid, 3, "0", "/editarvtmp [id punto]");
	if (id_punto < 1 || id_punto > totalpuntosvehtmp) return SendClientMessageEx(playerid, 0xccccccff, "No puedes exceder las id 1 y %d.", totalpuntosvehtmp);
	if (InfoVehTemporal[id_punto][veh_PosX] == 0) return SendClientMessageEx(playerid, 0xccccccff, "ID %d de punto no existe.", id_punto);
	format(string, sizeof string, "Ubicaci?n\n");
	strcat(dialog, string);
	if(InfoVehTemporal[id_punto][veh_SpawnX] == 0) format(string, sizeof string, "Spawn		No establecido\n");
	else format(string, sizeof string, "Spawn		Establecido\n");
	strcat(dialog, string);
	format(string, sizeof string, "Color_ 1\t(ID: %d)\n", InfoVehTemporal[id_punto][veh_vehicles_colors][0]);
	strcat(dialog, string);
	format(string, sizeof string, "Color_ 2\t(ID: %d)\n", InfoVehTemporal[id_punto][veh_vehicles_colors][1]);
	strcat(dialog, string);
	if(InfoVehTemporal[id_punto][veh_familia] != 0) format(string, sizeof string, "Familia   %s\n", GetNombreFamilia(InfoVehTemporal[id_punto][veh_faccion]));
	else format(string, sizeof string, "Banda		No establecida\n");
	strcat(dialog, string);
	Loop(vehid, 10, 0)
	{
		if(InfoVehTemporal[id_punto][veh_vehicles_models][vehid] != 0) format(string, sizeof string, "%d. %s\n", vehid+1, GetNameVehicle(InfoVehTemporal[id_punto][veh_vehicles_models][vehid]));
		else format(string, sizeof string, "%d. Ninguno\n", vehid+1);
		strcat(dialog, string);
	}
	Dialog_Show(playerid, veh_temporal, DIALOG_STYLE_LIST, "Vehiculo temporales", dialog, "Aceptar", "Cancelar");
	SetPVarInt(playerid, "id_punto", id_punto);
	return 1;
}

Dialog:veh_temporal(playerid, response, listitem, inputtext[])
{
	new id_punto = GetPVarInt(playerid, "id_punto");
	if (!response) return 1;
	switch(listitem)
	{
		case 0:
		{
			GetPlayerPos(playerid, InfoVehTemporal[id_punto][veh_PosX], InfoVehTemporal[id_punto][veh_PosY], InfoVehTemporal[id_punto][veh_PosZ]);
			guardar_float_mysql("vehiculos_temporales", "Pos_X", InfoVehTemporal[id_punto][veh_ID], InfoVehTemporal[id_punto][veh_PosX]);
			guardar_float_mysql("vehiculos_temporales", "Pos_Y", InfoVehTemporal[id_punto][veh_ID], InfoVehTemporal[id_punto][veh_PosY]);
			guardar_float_mysql("vehiculos_temporales", "Pos_Z", InfoVehTemporal[id_punto][veh_ID], InfoVehTemporal[id_punto][veh_PosZ]);
			punto_veh_pickup(id_punto);
			SendClientMessageEx(playerid, 0xCCCC00FF, "Se modifico la ubicacion de los vehiculos temporales %d.", id_punto);
		}
		case 1:
		{
			GetPlayerPos(playerid, InfoVehTemporal[id_punto][veh_SpawnX], InfoVehTemporal[id_punto][veh_SpawnY], InfoVehTemporal[id_punto][veh_SpawnZ]);
			GetPlayerFacingAngle(playerid, InfoVehTemporal[id_punto][veh_SpawnR]);
			guardar_float_mysql("vehiculos_temporales", "PosSpawn_X", InfoVehTemporal[id_punto][veh_ID], InfoVehTemporal[id_punto][veh_SpawnX]);
			guardar_float_mysql("vehiculos_temporales", "PosSpawn_Y", InfoVehTemporal[id_punto][veh_ID], InfoVehTemporal[id_punto][veh_SpawnY]);
			guardar_float_mysql("vehiculos_temporales", "PosSpawn_Z", InfoVehTemporal[id_punto][veh_ID], InfoVehTemporal[id_punto][veh_SpawnZ]);
			guardar_float_mysql("vehiculos_temporales", "PosSpawn_R", InfoVehTemporal[id_punto][veh_ID], InfoVehTemporal[id_punto][veh_SpawnR]);
			SendClientMessageEx(playerid, 0xCCCC00FF, "Se modifico la ubicacion de spawn de los vehiculos temporales %d.", id_punto);
		}
		case 2: Dialog_Show(playerid, colorvehtemp_1, DIALOG_STYLE_INPUT, "Color de vehiculo 1", "Coloca la ID que usara el vehiculo al aparecer.", "Aceptar", "Cancelar");
		case 3: Dialog_Show(playerid, colorvehtemp_2, DIALOG_STYLE_INPUT, "Color de vehiculo 2", "Coloca la ID secundaria que usara el vehiculo al aparecer.", "Aceptar", "Cancelar");
		case 4: Dialog_Show(playerid, faccionvehtemp, DIALOG_STYLE_INPUT, "Faccion", "Coloca la ID que usara el veh?culo como propietario.", "Aceptar", "Cancelar");
		case 5:  Dialog_Show(playerid, seleccionveh_slot, DIALOG_STYLE_INPUT, "Vehiculo slot", "Ingresa el nuevo modelo para este slot.", "Aceptar", "Cancelar"), SetPVarInt(playerid, "id_lista", 0);
		case 6:  Dialog_Show(playerid, seleccionveh_slot, DIALOG_STYLE_INPUT, "Vehiculo slot", "Ingresa el nuevo modelo para este slot.", "Aceptar", "Cancelar"), SetPVarInt(playerid, "id_lista", 1);
		case 7:  Dialog_Show(playerid, seleccionveh_slot, DIALOG_STYLE_INPUT, "Vehiculo slot", "Ingresa el nuevo modelo para este slot.", "Aceptar", "Cancelar"), SetPVarInt(playerid, "id_lista", 2);
		case 8:  Dialog_Show(playerid, seleccionveh_slot, DIALOG_STYLE_INPUT, "Vehiculo slot", "Ingresa el nuevo modelo para este slot.", "Aceptar", "Cancelar"), SetPVarInt(playerid, "id_lista", 3);
		case 9:  Dialog_Show(playerid, seleccionveh_slot, DIALOG_STYLE_INPUT, "Vehiculo slot", "Ingresa el nuevo modelo para este slot.", "Aceptar", "Cancelar"), SetPVarInt(playerid, "id_lista", 4);
		case 10:  Dialog_Show(playerid, seleccionveh_slot, DIALOG_STYLE_INPUT, "Vehiculo slot", "Ingresa el nuevo modelo para este slot.", "Aceptar", "Cancelar"), SetPVarInt(playerid, "id_lista", 5);
		case 11:  Dialog_Show(playerid, seleccionveh_slot, DIALOG_STYLE_INPUT, "Vehiculo slot", "Ingresa el nuevo modelo para este slot.", "Aceptar", "Cancelar"), SetPVarInt(playerid, "id_lista", 6);
		case 12:  Dialog_Show(playerid, seleccionveh_slot, DIALOG_STYLE_INPUT, "Vehiculo slot", "Ingresa el nuevo modelo para este slot.", "Aceptar", "Cancelar"), SetPVarInt(playerid, "id_lista", 7);
		case 13:  Dialog_Show(playerid, seleccionveh_slot, DIALOG_STYLE_INPUT, "Vehiculo slot", "Ingresa el nuevo modelo para este slot.", "Aceptar", "Cancelar"), SetPVarInt(playerid, "id_lista", 8);
		case 14:  Dialog_Show(playerid, seleccionveh_slot, DIALOG_STYLE_INPUT, "Vehiculo slot", "Ingresa el nuevo modelo para este slot.", "Aceptar", "Cancelar"), SetPVarInt(playerid, "id_lista", 9);


	}
	return 1;
}

Dialog:colorvehtemp_1(playerid, response, listitem, inputtext[])
{
	new id_punto = GetPVarInt(playerid, "id_punto");
	if (!response) return 1;
	if (strval(inputtext) < 0) return SendClientMessage(playerid, -1, "No puede ser un ID menor a 0.");
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, -1, "El color no puede tener un valor alfanumerico.");
	InfoVehTemporal[id_punto][veh_vehicles_colors][0] = strval(inputtext);
	guardar_int_mysql("vehiculos_temporales", "VehColors_1", InfoVehTemporal[id_punto][veh_ID], InfoVehTemporal[id_punto][veh_vehicles_colors][0]);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Se modifico el color_1 de los vehiculos temporales %d.", id_punto);
	return 1;
}

Dialog:colorvehtemp_2(playerid, response, listitem, inputtext[])
{
	new id_punto = GetPVarInt(playerid, "id_punto");
	if (!response) return 1;
	if (strval(inputtext) < 0) return SendClientMessage(playerid, -1, "No puede ser un ID menor a 0.");
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, -1, "El color no puede tener un valor alfanumerico.");
	InfoVehTemporal[id_punto][veh_vehicles_colors][1] = strval(inputtext);
	guardar_int_mysql("vehiculos_temporales", "VehColors_2", InfoVehTemporal[id_punto][veh_ID], InfoVehTemporal[id_punto][veh_vehicles_colors][1]);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Se modifico el color_2 de los vehiculos temporales %d.", id_punto);
	return 1;
}

Dialog:faccionvehtemp(playerid, response, listitem, inputtext[])
{
	new id_punto = GetPVarInt(playerid, "id_punto");
	if (!response) return 1;
	if (strval(inputtext) < 0) return SendClientMessage(playerid, -1, "No puede ser un ID menor a 0.");
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, -1, "El ID de la banda no puede tener un valor alfanumerico.");
	InfoVehTemporal[id_punto][veh_familia] = strval(inputtext);
	guardar_int_mysql("vehiculos_temporales", "ParaFaccion", InfoVehTemporal[id_punto][veh_ID], InfoVehTemporal[id_punto][veh_familia]);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Ahora este punto spawneara vehiculos para la banda %s.", GetNombreFamilia(InfoVehTemporal[id_punto][veh_familia]));
	return 1;
}

Dialog:seleccionveh_slot(playerid, response, listitem, inputtext[])
{
	new id_punto = GetPVarInt(playerid, "id_punto"), slot = GetPVarInt(playerid, "id_lista"), query[500];
	if (!response) return 1;
	if (strval(inputtext) < 0)
	{
		InfoVehTemporal[id_punto][veh_vehicles_models][slot] = strval(inputtext);
		SendClientMessageEx(playerid, 0xCCCC00FF, "Se retiro el modelo disponible de este slot, del punto %d.", id_punto);
		mysql_format(DBngrp, query, sizeof query, "UPDATE vehiculos_temporales SET VehModelo_%d = '%d' WHERE ID = '%d'", slot+1, InfoVehTemporal[id_punto][veh_vehicles_models][slot], InfoVehTemporal[id_punto][veh_ID]);
		mysql_tquery(DBngrp, query);
		return 1;
	}
	if (!isnumeric(inputtext)) return SendClientMessage(playerid, -1, "El ID de modelo no puede tener un valor alfanumerico.");
	InfoVehTemporal[id_punto][veh_vehicles_models][slot] = strval(inputtext);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Se modifico el slot %d y ahora tiene disponible %s, punto %d.", slot+1, GetNameVehicle(InfoVehTemporal[id_punto][veh_vehicles_models][slot]), id_punto);
	mysql_format(DBngrp, query, sizeof query, "UPDATE vehiculos_temporales SET VehModelo_%d = '%d' WHERE ID = '%d'", slot+1, InfoVehTemporal[id_punto][veh_vehicles_models][slot], InfoVehTemporal[id_punto][veh_ID]);
	mysql_tquery(DBngrp, query);
	return 1;
}

Dialog:Sacar_VehTemporal(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	new id_punto = GetPVarInt(playerid, "id_punto"), lista = listitem, gformat[40];
	format(gformat, sizeof gformat, "RanuraSacarVeh%d", lista);
	new slot = GetPVarInt(playerid, gformat);
	new carid = CreateVehicle(InfoVehTemporal[id_punto][veh_vehicles_models][slot], InfoVehTemporal[id_punto][veh_SpawnX], InfoVehTemporal[id_punto][veh_SpawnY], InfoVehTemporal[id_punto][veh_SpawnZ], InfoVehTemporal[id_punto][veh_SpawnR], InfoVehTemporal[id_punto][veh_vehicles_colors][0], InfoVehTemporal[id_punto][veh_vehicles_colors][1], 1800);
	id_coche_temporal_fac[playerid] = carid;
	vehicle_temporal_owner[carid] = playerid;
	esfaccion_temvehicle[carid] = InfoVehTemporal[id_punto][veh_familia];
	GasolinaInicialVeh[carid] = 100;
	PutPlayerInVehicleEx(playerid, carid, 0);
	SetVehicleParamsEx(carid, 1, 0, 0, 0, 0, 0, 0);
	SendClientMessageEx(playerid, 0xCCCC00FF, "Sacaste un Veh?culo de %s. Usa /dveh para ocultarlo u /uveh para localizarlo.", GetNombreFamilia(InfoVehTemporal[id_punto][veh_familia]));
	return 1;
}

punto_veh_tempral(playerid, name[])
{
    static
	    Float:x,
	    Float:y,
	    Float:z;

	if (GetPlayerPos(playerid, x, y, z))
	{
		Loop(i, MAX_VEHICULOS_TEMP, 1)
		{
	    	if (!InfoVehTemporal[i][veh_PosX])
		    {
		        InfoVehTemporal[i][veh_PosX] = x;
    	        InfoVehTemporal[i][veh_PosY] = y;
    	        InfoVehTemporal[i][veh_PosZ] = z;

    	        alm(InfoVehTemporal[i][veh_Nombre], name);

				punto_veh_pickup(i);
    			new query[800];
				mysql_format(DBngrp, query, sizeof query, "INSERT INTO vehiculos_temporales (Pos_X,Pos_Y,Pos_Z,NombrePunto) VALUES ('%f','%f','%f','%s')",
				InfoVehTemporal[i][veh_PosX],
				InfoVehTemporal[i][veh_PosY],
				InfoVehTemporal[i][veh_PosZ],
				InfoVehTemporal[i][veh_Nombre]);
				mysql_tquery(DBngrp, query, "AparecePuntoEnDB", "i", i);
				return i;
			}
		}
	}
	return -1;
}

forward AparecePuntoEnDB(id);
public AparecePuntoEnDB(id)
{
    totalpuntosvehtmp++;
	InfoVehTemporal[id][veh_ID] = cache_insert_id();
	cache_unset_active();
    return 1;
}

punto_veh_pickup(id_punto)
{
    if (id_punto != -1 && InfoVehTemporal[id_punto][veh_PosX] != 0)
    {
		if (IsValidDynamic3DTextLabel(InfoVehTemporal[id_punto][veh_Label]))
		{
			DestroyDynamic3DTextLabel(InfoVehTemporal[id_punto][veh_Label]);
			InfoVehTemporal[id_punto][veh_Label] = Text3D:INVALID_3DTEXT_ID;
		}
        if (IsValidDynamicPickup(InfoVehTemporal[id_punto][veh_Pickup]))
		    DestroyDynamicPickup(InfoVehTemporal[id_punto][veh_Pickup]);

		new string[1200];
		format(string, sizeof string, "Vehiculos de %s\n{FFFFFF}Presiona {FFFF00}'H' {FFFFFF}para sacar uno.", InfoVehTemporal[id_punto][veh_Nombre]);
		InfoVehTemporal[id_punto][veh_Label] = CreateDynamic3DTextLabel(string, 0x69BFD3FF, InfoVehTemporal[id_punto][veh_PosX], InfoVehTemporal[id_punto][veh_PosY], InfoVehTemporal[id_punto][veh_PosZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		InfoVehTemporal[id_punto][veh_Pickup] = CreateDynamicPickup(1073, -1, InfoVehTemporal[id_punto][veh_PosX], InfoVehTemporal[id_punto][veh_PosY], InfoVehTemporal[id_punto][veh_PosZ] + 0.3, 0, 0);
	}
	return 1;
}

forward CargarVehiculos_Temporales();
public CargarVehiculos_Temporales()
{
	new countesta = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
	    new id = tabla+1;
		reg_int(tabla, "ID", InfoVehTemporal[id][veh_ID]);
	    reg_string(tabla, "NombrePunto", InfoVehTemporal[id][veh_Nombre], 70);
	    reg_float(tabla, "Pos_X", InfoVehTemporal[id][veh_PosX]);
	    reg_float(tabla, "Pos_Y", InfoVehTemporal[id][veh_PosY]);
	    reg_float(tabla, "Pos_Z", InfoVehTemporal[id][veh_PosZ]);
	    reg_float(tabla, "PosSpawn_X", InfoVehTemporal[id][veh_SpawnX]);
	    reg_float(tabla, "PosSpawn_Y", InfoVehTemporal[id][veh_SpawnY]);
	    reg_float(tabla, "PosSpawn_Z", InfoVehTemporal[id][veh_SpawnZ]);
	    reg_float(tabla, "PosSpawn_R", InfoVehTemporal[id][veh_SpawnR]);
	    reg_int(tabla, "VehModelo_1", InfoVehTemporal[id][veh_vehicles_models][0]);
	    reg_int(tabla, "VehModelo_2", InfoVehTemporal[id][veh_vehicles_models][1]);
	    reg_int(tabla, "VehModelo_3", InfoVehTemporal[id][veh_vehicles_models][2]);
	    reg_int(tabla, "VehModelo_4", InfoVehTemporal[id][veh_vehicles_models][3]);
	    reg_int(tabla, "VehModelo_5", InfoVehTemporal[id][veh_vehicles_models][4]);
	    reg_int(tabla, "VehModelo_6", InfoVehTemporal[id][veh_vehicles_models][5]);
	    reg_int(tabla, "VehModelo_7", InfoVehTemporal[id][veh_vehicles_models][6]);
	    reg_int(tabla, "VehModelo_8", InfoVehTemporal[id][veh_vehicles_models][7]);
	    reg_int(tabla, "VehModelo_9", InfoVehTemporal[id][veh_vehicles_models][8]);
	    reg_int(tabla, "VehModelo_10", InfoVehTemporal[id][veh_vehicles_models][9]);
	    reg_int(tabla, "VehColors_1", InfoVehTemporal[id][veh_vehicles_colors][0]);
	    reg_int(tabla, "VehColors_2", InfoVehTemporal[id][veh_vehicles_colors][1]);
	    reg_int(tabla, "ParaFaccion", InfoVehTemporal[id][veh_familia]);
	    punto_veh_pickup(id);
	    if (InfoVehTemporal[id][veh_ID]) totalpuntosvehtmp++;
	    if (InfoVehTemporal[id][veh_PosX] != 0) countesta++;
	}
	printf("[MySQL] -> Han cargado %d puntos de vehiculos temporales.", countesta);
	return 1;
}

CMD:dveh(playerid)
{
    if(id_coche_temporal_fac[playerid] == INVALID_VEHICLE_ID) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un vehiculo temporal spawneado.");

	new vehicleid = id_coche_temporal_fac[playerid];

    id_coche_temporal_fac[playerid] = INVALID_VEHICLE_ID;
    vehicle_temporal_owner[vehicleid] = INVALID_PLAYER_ID;
    esfaccion_temvehicle[vehicleid] = 0;

    DestroyVehicle(vehicleid);
    SendClientMessage(playerid, 0xccccccFF, "*** Eliminaste el vehiculo de faccion, ahora puedes spawnear otro.");
    return 1;
}

CMD:uveh(playerid)
{
    if(id_coche_temporal_fac[playerid] == INVALID_VEHICLE_ID) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes un vehiculo temporal spawneado.");
    new vehicleid = id_coche_temporal_fac[playerid];
    new Float: carPos[3], zone[MAX_ZONE_NAME], access = 0;
	if (GetVehicleInterior(vehicleid) == 6 && GetVehicleVirtualWorld(vehicleid) == 2) // carpintero
	{
		SendClientMessageEx(playerid, 0xFFFFFFFF, "Tu vehiculo fue localizado dentro del estacionamiento de Carpintero. {ff0000}(Ve al punto rojo).", zone);
		SetPlayerCheckpoint(playerid, 1921.2126, -1863.1205, 13.5603, 15.0);
		access = 1;
	}
	else if (GetVehicleInterior(vehicleid) == 7 && GetVehicleVirtualWorld(vehicleid) == 2) // camionero
	{
		SendClientMessageEx(playerid, 0xFFFFFFFF, "Tu vehiculo fue localizado dentro del estacionamiento de Camionero. {ff0000}(Ve al punto rojo).", zone);
		SetPlayerCheckpoint(playerid, 1669.2961, 704.5327, 10.8203, 15.0);
		access = 1;
	}
	else if (GetVehicleInterior(vehicleid) == 0 && GetVehicleVirtualWorld(vehicleid) == 0) // exterior
	{
		GetVehiclePos(vehicleid, carPos[0], carPos[1], carPos[2]);
		GetCar3DZone(vehicleid, zone, sizeof zone);
		SendClientMessageEx(playerid, 0xFFFFFFFF, "Tu vehiculo fue localizado en %s. {ff0000}(Ve al punto rojo).", zone);
		SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
		access = 1;
	}
	if (access != 0)
	{
		SetPVarInt(playerid, "EnCheckPoint", 1);
		TogglePlayerAllDynamicCPs(playerid, false);
		return 1;
	}
	SendClientMessage(playerid, 0xccccccff, "Tu vehiculo debe estar escondido en algun garaje de faccion o de una persona o bugeado.");
    return 1;
}

// nuevas integraciones by 0vi3d0

stock SeleccionSkinHombre(skin_model)
{
	switch(skin_model)
	{
		case 1: return 299;
		case 2: return 1;
		case 3: return 2;
		case 4: return 3;
		case 5: return 4;
		case 6: return 5;
		case 7: return 6;
		case 8: return 7;
		case 14: return 8;
		case 15: return 14;
		case 16: return 15;
		case 17: return 16;
		case 18: return 17;
		case 19: return 18;
		case 20: return 19;
		case 21: return 20;
		case 22: return 21;
		case 23: return 22;
		case 24: return 23;
		case 25: return 24;
		case 26: return 25;
		case 27: return 26;
		case 28: return 27;
		case 29: return 28;
		case 30: return 29;
		case 32: return 30;
		case 33: return 32;
		case 34: return 33;
		case 35: return 34;
		case 36: return 35;
		case 37: return 36;
		case 42: return 37;
		case 43: return 42;
		case 44: return 43;
		case 45: return 44;
		case 46: return 45;
		case 47: return 46;
		case 48: return 47;
		case 49: return 48;
		case 50: return 49;
		case 51: return 50;
		case 52: return 51;
		case 57: return 52;
		case 58: return 57;
		case 59: return 58;
		case 60: return 59;
		case 61: return 60;
		case 62: return 61;
		case 66: return 62;
		case 67: return 66;
		case 68: return 67;
		case 72: return 68;
		case 73: return 72;
		case 78: return 73;
		case 79: return 78;
		case 80: return 79;
		case 81: return 80;
		case 82: return 81;
		case 83: return 82;
		case 84: return 83;
		case 86: return 84;
		case 94: return 86;
		case 95: return 94;
		case 96: return 95;
		case 97: return 96;
		case 98: return 97;
		case 99: return 98;
		case 100: return 99;
		case 101: return 100;
		case 102: return 101;
		case 103: return 102;
		case 104: return 103;
		case 105: return 104;
		case 106: return 105;
		case 107: return 106;
		case 108: return 107;
		case 109: return 108;
		case 110: return 109;
		case 111: return 110;
		case 112: return 111;
		case 113: return 112;
		case 114: return 113;
		case 115: return 114;
		case 116: return 115;
		case 117: return 116;
		case 118: return 117;
		case 119: return 118;
		case 120: return 119;
		case 121: return 120;
		case 122: return 121;
		case 123: return 122;
		case 124: return 123;
		case 125: return 124;
		case 126: return 125;
		case 127: return 126;
		case 128: return 127;
		case 132: return 128;
		case 133: return 132;
		case 134: return 133;
		case 135: return 134;
		case 136: return 135;
		case 137: return 136;
		case 142: return 137;
		case 143: return 142;
		case 144: return 143;
		case 146: return 144;
		case 147: return 146;
		case 149: return 147;
		case 153: return 149;
		case 154: return 153;
		case 155: return 154;
		case 156: return 155;
		case 158: return 156;
		case 159: return 158;
		case 160: return 159;
		case 161: return 160;
		case 162: return 161;
		case 163: return 162;
		case 164: return 163;
		case 165: return 164;
		case 166: return 165;
		case 167: return 166;
		case 168: return 167;
		case 170: return 168;
		case 171: return 170;
		case 173: return 171;
		case 174: return 173;
		case 175: return 174;
		case 176: return 175;
		case 177: return 176;
		case 179: return 177;
		case 180: return 179;
		case 181: return 180;
		case 182: return 181;
		case 183: return 182;
		case 184: return 183;
		case 185: return 184;
		case 186: return 185;
		case 187: return 186;
		case 188: return 187;
		case 189: return 188;
		case 200: return 189;
		case 202: return 200;
		case 203: return 202;
		case 204: return 203;
		case 206: return 204;
		case 208: return 206;
		case 209: return 208;
		case 210: return 209;
		case 212: return 210;
		case 213: return 212;
		case 220: return 213;
		case 221: return 220;
		case 222: return 221;
		case 223: return 222;
		case 227: return 223;
		case 228: return 227;
		case 229: return 228;
		case 230: return 229;
		case 234: return 230;
		case 235: return 234;
		case 236: return 235;
		case 239: return 236;
		case 240: return 239;
		case 241: return 240;
		case 242: return 241;
		case 247: return 242;
		case 248: return 247;
		case 249: return 248;
		case 250: return 249;
		case 252: return 250;
		case 253: return 252;
		case 254: return 253;
		case 255: return 254;
		case 258: return 255;
		case 259: return 258;
		case 260: return 259;
		case 261: return 260;
		case 262: return 261;
		case 264: return 262;
		case 269: return 264;
		case 270: return 269;
		case 271: return 270;
		case 272: return 271;
		case 273: return 272;
		case 289: return 273;
		case 290: return 289;
		case 291: return 290;
		case 292: return 291;
		case 293: return 292;
		case 294: return 293;
		case 295: return 294;
		case 296: return 295;
		case 297: return 296;
		case 299: return 297;
	}
	return 1;
}

SeleccionSkinMujer(skin_actual)
{
	switch (skin_actual)
	{
		case 9: return 298;
		case 10: return 9;
		case 11: return 10;
		case 12: return 11;
		case 13: return 12;
		case 31: return 13;
		case 38: return 31;
		case 39: return 38;
		case 40: return 39;
		case 41: return 40;
		case 53: return 41;
		case 54: return 53;
		case 55: return 54;
		case 56: return 55;
		case 63: return 56;
		case 64: return 63;
		case 65: return 64;
		case 69: return 65;
		case 75: return 69;
		case 76: return 75;
		case 77: return 76;
		case 85: return 77;
		case 87: return 85;
		case 88: return 87;
		case 89: return 88;
		case 90: return 89;
		case 91: return 90;
		case 92: return 91;
		case 93: return 92;
		case 129: return 93;
		case 130: return 129;
		case 131: return 130;
		case 138: return 131;
		case 139: return 138;
		case 140: return 139;
		case 141: return 140;
		case 145: return 141;
		case 148: return 145;
		case 150: return 148;
		case 151: return 150;
		case 152: return 151;
		case 157: return 152;
		case 169: return 157;
		case 172: return 169;
		case 178: return 172;
		case 190: return 178;
		case 191: return 190;
		case 192: return 191;
		case 193: return 192;
		case 194: return 193;
		case 195: return 194;
		case 196: return 195;
		case 197: return 196;
		case 198: return 197;
		case 199: return 198;
		case 201: return 199;
		case 205: return 201;
		case 207: return 205;
		case 214: return 207;
		case 215: return 214;
		case 216: return 215;
		case 218: return 216;
		case 219: return 218;
		case 224: return 219;
		case 225: return 224;
		case 226: return 225;
		case 231: return 226;
		case 232: return 231;
		case 233: return 232;
		case 237: return 233;
		case 238: return 237;
		case 243: return 238;
		case 244: return 243;
		case 245: return 244;
		case 246: return 245;
		case 251: return 246;
		case 256: return 251;
		case 257: return 256;
		case 263: return 257;
		case 298: return 9;
	}
	return 9;
}

stock showmenushop(playerid)
{
	Loop(x, 6, 0) { PlayerTextDrawShow(playerid, TD_ShopRopa[playerid][x]); }
	new string[210], skin = GetPlayerSkin(playerid);
	Ropa_ID[playerid] = skin;
	format(string, sizeof string, "Negocio~n~Ropa: ~y~%d (Normal)~n~~w~Precio: ~g~$450 ~w~(Econ.)", skin);
	PlayerTextDrawSetString(playerid, TD_ShopRopa[playerid][1], string);
	SelectTextDraw(playerid, 0xB2B2B2BB);

	Loop(x, 6, 0) { PlayerTextDrawHide(playerid, TD_PantallaHG[playerid][x]); }
	HidePlayerProgressBar(playerid, BarraExp[playerid]);
	HidePlayerProgressBar(playerid, BarraSed[playerid]);
	HidePlayerProgressBar(playerid, BarraHambre[playerid]);
	PlayerTextDrawHide(playerid, InfoInferior[playerid]);
	TextDrawShowForPlayer(playerid, TD_Necesidades[0]);
	TextDrawShowForPlayer(playerid, TD_Necesidades[1]);
	RopitaAnterior[playerid] = 0;
	return 1;
}

stock SeleccionSkinHombreSkinNuevo(skin_model)
{
	switch(skin_model)
	{
		case 1: return 2;
		case 2: return 3;
		case 3: return 4;
		case 4: return 5;
		case 5: return 6;
		case 6: return 7;
		case 7: return 8;
		case 8: return 14;
		case 14: return 15;
		case 15: return 16;
		case 16: return 17;
		case 17: return 18;
		case 18: return 19;
		case 19: return 20;
		case 20: return 21;
		case 21: return 22;
		case 22: return 23;
		case 23: return 24;
		case 24: return 25;
		case 25: return 26;
		case 26: return 27;
		case 27: return 28;
		case 28: return 29;
		case 29: return 30;
		case 30: return 32;
		case 32: return 33;
		case 33: return 34;
		case 34: return 35;
		case 35: return 36;
		case 36: return 37;
		case 37: return 42;
		case 42: return 43;
		case 43: return 44;
		case 44: return 45;
		case 45: return 46;
		case 46: return 47;
		case 47: return 48;
		case 48: return 49;
		case 49: return 50;
		case 50: return 51;
		case 51: return 52;
		case 52: return 57;
		case 57: return 58;
		case 58: return 59;
		case 59: return 60;
		case 60: return 61;
		case 61: return 62;
		case 62: return 66;
		case 66: return 67;
		case 67: return 68;
		case 68: return 72;
		case 72: return 73;
		case 73: return 78;
		case 78: return 79;
		case 79: return 80;
		case 80: return 81;
		case 81: return 82;
		case 82: return 83;
		case 83: return 84;
		case 84: return 86;
		case 86: return 94;
		case 94: return 95;
		case 95: return 96;
		case 96: return 97;
		case 97: return 98;
		case 98: return 99;
		case 99: return 100;
		case 100: return 101;
		case 101: return 102;
		case 102: return 103;
		case 103: return 104;
		case 104: return 105;
		case 105: return 106;
		case 106: return 107;
		case 107: return 108;
		case 108: return 109;
		case 109: return 110;
		case 110: return 111;
		case 111: return 112;
		case 112: return 113;
		case 113: return 114;
		case 114: return 115;
		case 115: return 116;
		case 116: return 117;
		case 117: return 118;
		case 118: return 119;
		case 119: return 120;
		case 120: return 121;
		case 121: return 122;
		case 122: return 123;
		case 123: return 124;
		case 124: return 125;
		case 125: return 126;
		case 126: return 127;
		case 127: return 128;
		case 128: return 132;
		case 132: return 133;
		case 133: return 134;
		case 134: return 135;
		case 135: return 136;
		case 136: return 137;
		case 137: return 142;
		case 142: return 143;
		case 143: return 144;
		case 144: return 146;
		case 146: return 147;
		case 147: return 149;
		case 149: return 153;
		case 153: return 154;
		case 154: return 155;
		//case 155: return 156;
		case 156: return 158;
		case 158: return 159;
		case 159: return 160;
		case 160: return 161;
		case 161: return 162;
		case 162: return 163;
		case 163: return 164;
		case 164: return 165;
		case 165: return 166;
		case 166: return 167;
		//case 167: return 168;
		case 168: return 170;
		case 170: return 171;
		case 171: return 173;
		case 173: return 174;
		case 174: return 175;
		case 175: return 176;
		case 176: return 177;
		case 177: return 179;
		case 179: return 180;
		case 180: return 181;
		case 181: return 182;
		case 182: return 183;
		case 183: return 184;
		case 184: return 185;
		case 185: return 186;
		case 186: return 187;
		case 187: return 188;
		case 188: return 189;
		case 189: return 200;
		case 200: return 202;
		case 202: return 203;
		case 203: return 204;
		case 204: return 206;
		case 206: return 208;
		case 208: return 209;
		case 209: return 210;
		case 210: return 212;
		case 212: return 213;
		case 213: return 220;
		case 220: return 221;
		case 221: return 222;
		case 222: return 223;
		case 223: return 227;
		case 227: return 228;
		case 228: return 229;
		case 229: return 230;
		case 230: return 234;
		case 234: return 235;
		case 235: return 236;
		case 236: return 239;
		case 239: return 240;
		case 240: return 241;
		case 241: return 247;
		case 242: return 248;
		case 247: return 248;
		case 248: return 259;
		case 249: return 250;
		case 250: return 252;
		case 252: return 253;
		case 253: return 254;
		case 254: return 255;
		case 255: return 258;
		case 258: return 269;
		case 259: return 260;
		case 260: return 261;
		case 261: return 262;
		case 262: return 264;
		//case 264: return 270;
		case 270: return 271;
		case 271: return 272;
		case 272: return 273;
		case 273: return 289;
		case 289: return 290;
		//case 290: return 281;
		case 291: return 292;
		case 292: return 293;
		case 293: return 294;
		case 294: return 295;
		case 295: return 296;
		case 296: return 297;
		case 297: return 299;
		case 299: return 1;
	}
	return 1;
}

SeleccionSkinMujerNuevo(skin_actual)
{
	switch (skin_actual)
	{
		case 9: return 10;
		case 10: return 11;
		case 11: return 12;
		case 12: return 13;
		case 13: return 31;
		case 31: return 38;
		case 38: return 39;
		case 39: return 40;
		case 40: return 41;
		case 41: return 53;
		case 53: return 54;
		case 54: return 55;
		case 55: return 56;
		case 56: return 63;
		case 63: return 64;
		case 64: return 65;
		case 65: return 69;
		case 69: return 75;
		case 75: return 76;
		case 76: return 77;
		case 77: return 85;
		case 85: return 87;
		case 87: return 88;
		case 88: return 89;
		case 89: return 90;
		case 90: return 91;
		case 91: return 92;
		case 92: return 93;
		case 93: return 129;
		case 129: return 130;
		case 130: return 131;
		case 131: return 138;
		case 138: return 139;
		case 139: return 140;
		case 140: return 141;
		case 141: return 145;
		case 145: return 148;
		case 148: return 150;
		case 150: return 151;
		case 151: return 152;
		case 152: return 157;
		case 157: return 169;
		case 169: return 172;
		case 172: return 178;
		case 178: return 190;
		case 190: return 191;
		case 191: return 192;
		case 192: return 193;
		case 193: return 194;
		case 194: return 195;
		case 195: return 196;
		case 196: return 197;
		case 197: return 198;
		case 198: return 199;
		case 199: return 201;
		case 201: return 205;
		case 205: return 207;
		case 207: return 214;
		case 214: return 215;
		case 215: return 216;
		case 216: return 218;
		case 218: return 219;
		case 219: return 224;
		case 224: return 225;
		case 225: return 226;
		case 226: return 231;
		case 231: return 232;
		case 232: return 233;
		case 233: return 237;
		case 237: return 238;
		case 238: return 243;
		case 243: return 244;
		case 244: return 245;
		case 245: return 246;
		case 246: return 251;
		case 251: return 256;
		case 256: return 257;
		case 257: return 263;
		case 263: return 298;
		case 298: return 9;
	}
	return 9;
}

stock DarArma(playerid, weaponid)
{
    if(weaponid == 1)
	{
		InfoJugador[playerid][jArmas][0] = weaponid; guardar_int_mysql("cuentas", "Arma_0", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][0]);
		GivePlayerWeapon(playerid, weaponid, 999999);
		return 1;
	}
	if(weaponid > 1 && weaponid <= 9)
	{
		InfoJugador[playerid][jArmas][1] = weaponid; guardar_int_mysql("cuentas", "Arma_1", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][1]);
		GivePlayerWeapon(playerid, weaponid, 999999);
		return 1;
	}
	if( weaponid >= 22 && weaponid <= 24 )
	{
		InfoJugador[playerid][jArmas][2] = weaponid; guardar_int_mysql("cuentas", "Arma_2", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][2]);
		GivePlayerWeapon(playerid, weaponid, 999999);
		return 1;
	}
	if( weaponid >= 25 && weaponid <= 27 )
	{
		InfoJugador[playerid][jArmas][3] = weaponid; guardar_int_mysql("cuentas", "Arma_3", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][3]);
		GivePlayerWeapon(playerid, weaponid, 999999);
		return 1;
	}
	if( weaponid == 28 || weaponid == 29 || weaponid == 32 )
	{
		InfoJugador[playerid][jArmas][4] = weaponid; guardar_int_mysql("cuentas", "Arma_4", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][4]);
		GivePlayerWeapon(playerid, weaponid, 999999);
		return 1;
	}
	if( weaponid == 30 || weaponid == 31 )
	{
		InfoJugador[playerid][jArmas][5] = weaponid; guardar_int_mysql("cuentas", "Arma_5", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][5]);
		GivePlayerWeapon(playerid, weaponid, 999999);
		return 1;
	}
	if( weaponid == 33 || weaponid == 34 )
	{
		InfoJugador[playerid][jArmas][6] = weaponid; guardar_int_mysql("cuentas", "Arma_6", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][6]);
		GivePlayerWeapon(playerid, weaponid, 999999);
		return 1;
	}
	if( weaponid >= 35 && weaponid <= 38 )
	{
		InfoJugador[playerid][jArmas][7] = weaponid; guardar_int_mysql("cuentas", "Arma_7", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][7]);
		GivePlayerWeapon(playerid, weaponid, 999999);
		return 1;
	}
	if( weaponid >= 16 && weaponid <= 18 || weaponid == 39)
	{
		InfoJugador[playerid][jArmas][8] = weaponid; guardar_int_mysql("cuentas", "Arma_8", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][8]);
		new weapons8[MAX_PLAYERS], municion;
		GetPlayerWeaponData(playerid, 8, weapons8[playerid], municion);
		if(municion >= 1) { }
		else { GivePlayerWeapon(playerid, weaponid, 1); }
		return 1;
	}
	if( weaponid >= 41 && weaponid <= 43 )
	{
		InfoJugador[playerid][jArmas][9] = weaponid; guardar_int_mysql("cuentas", "Arma_9", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][9]);
		GivePlayerWeapon(playerid, weaponid, 999999);
		return 1;
	}
	if( weaponid >= 10 && weaponid <= 15)
	{
		InfoJugador[playerid][jArmas][10] = weaponid; guardar_int_mysql("cuentas", "Arma_10", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][10]);
		GivePlayerWeapon(playerid, weaponid, 999999);
		return 1;
	}
	if( weaponid >= 44 && weaponid <= 46 )
	{
		InfoJugador[playerid][jArmas][11] = weaponid; guardar_int_mysql("cuentas", "Arma_11", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][11]);
		GivePlayerWeapon(playerid, weaponid, 999999);
		return 1;
	}
	return 1;
}

stock CheckArma(player,id)
{
	if(InfoJugador[player][jArmas][1] == id) { return 1; }
	else if(InfoJugador[player][jArmas][2] == id) { return 1; }
	else if(InfoJugador[player][jArmas][3] == id) { return 1; }
	else if(InfoJugador[player][jArmas][4] == id) { return 1; }
	else if(InfoJugador[player][jArmas][5] == id) { return 1; }
	else if(InfoJugador[player][jArmas][6] == id) { return 1; }
	else if(InfoJugador[player][jArmas][7] == id) { return 1; }
	else if(InfoJugador[player][jArmas][8] == id) { return 1; }
	else if(InfoJugador[player][jArmas][9] == id) { return 1; }
	else if(InfoJugador[player][jArmas][10] == id) { return 1; }
	else if(InfoJugador[player][jArmas][11] == id) { return 1; }
	return 0;
}

stock TieneArmaCheat(playerid)
{
	switch(GetPlayerWeapon(playerid))
	{
		case 9: return 1;
		case 17: return 1;
		case 18: return 1;
		case 35: return 1;
		case 36: return 1;
		case 37: return 1;
		case 38: return 1;
		case 39: return 1;
		case 40: return 1;
		case 41: return 1;
		case 42: return 1;
		case 44: return 1;
		case 45: return 1;
    }
    return 0;
}

stock DarArmas(playerid)
{
    ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, InfoJugador[playerid][jArmas][0],9999999);
	GivePlayerWeapon(playerid, InfoJugador[playerid][jArmas][1],9999999);
	GivePlayerWeapon(playerid, InfoJugador[playerid][jArmas][2],9999999);
	GivePlayerWeapon(playerid, InfoJugador[playerid][jArmas][3],9999999);
	GivePlayerWeapon(playerid, InfoJugador[playerid][jArmas][4],9999999);
	GivePlayerWeapon(playerid, InfoJugador[playerid][jArmas][5],9999999);
	GivePlayerWeapon(playerid, InfoJugador[playerid][jArmas][6],9999999);
	GivePlayerWeapon(playerid, InfoJugador[playerid][jArmas][7],9999999);
	GivePlayerWeapon(playerid, InfoJugador[playerid][jArmas][8],1);
	GivePlayerWeapon(playerid, InfoJugador[playerid][jArmas][9],9999999);
	GivePlayerWeapon(playerid, InfoJugador[playerid][jArmas][10],9999999);
	GivePlayerWeapon(playerid, InfoJugador[playerid][jArmas][11],9999999);
	SetPlayerArmedWeapon(playerid, 0);
	return 1;
}

forward Armas();
public Armas()
{
	foreach(Player, i) if (IsPlayerConnectedEx(i))
	{
		// Slot 8	-	(Lanzallamas, Minigun, RPG, Bazuca | AK-47 - M4)
		if(InfoJugador[i][jArmas][7] == 36 || InfoJugador[i][jArmas][7] == 35 || InfoJugador[i][jArmas][7] == 38)
		{
			if(GetPlayerWeapon(i) != 35 && InfoJugador[i][jArmas][7] == 35) {SetPlayerAttachedObject(i,8,359,1,  0.165996, -0.121996, -0.053998, 172.799972, 156.600006, 3.699996, 1.000000, 1.000000, 1.000000);}
			if(GetPlayerWeapon(i) == 35 && InfoJugador[i][jArmas][7] == 35) { RemovePlayerAttachedObject(i,8); }
			if(GetPlayerWeapon(i) != 36 && InfoJugador[i][jArmas][7] == 36) {SetPlayerAttachedObject(i,8,360,1,  0.165996, -0.121996, -0.053998, 172.799972, 156.600006, 3.699996, 1.000000, 1.000000, 1.000000);}
			if(GetPlayerWeapon(i) == 36 && InfoJugador[i][jArmas][7] == 36) { RemovePlayerAttachedObject(i,8); }
			if(GetPlayerWeapon(i) != 37 && InfoJugador[i][jArmas][7] == 37) {SetPlayerAttachedObject(i,8,361,1,  0.086000, -0.094000, -0.166000, 165.5999908, 145.899963, 15.999979, 1.000000, 1.000000, 1.000000);}
			if(GetPlayerWeapon(i) == 37 && InfoJugador[i][jArmas][7] == 37) { RemovePlayerAttachedObject(i,8); }
			if(GetPlayerWeapon(i) != 38 && InfoJugador[i][jArmas][7] == 38) {SetPlayerAttachedObject(i,8,362,1,  0.086000, -0.094000, -0.166000, 165.5999908, 145.899963, 15.999979, 1.000000, 1.000000, 1.000000);}
			if(GetPlayerWeapon(i) == 38 && InfoJugador[i][jArmas][7] == 38) { RemovePlayerAttachedObject(i,8); }
		}
		else
		{
			if(GetPlayerWeapon(i) != 30 && InfoJugador[i][jArmas][5] == 30) {SetPlayerAttachedObject(i,8,355,1,  0.192999,-0.075999,-0.105000,-4.499993,25.899999,-171.699859, 1.000000, 1.000000, 1.000000);}
			if(GetPlayerWeapon(i) == 30 && InfoJugador[i][jArmas][5] == 30) { RemovePlayerAttachedObject(i,8); }
			if(GetPlayerWeapon(i) != 31 && InfoJugador[i][jArmas][5] == 31) {SetPlayerAttachedObject(i,8,356,1,  0.192999,-0.075999,-0.105000,-4.499993,25.899999,-171.699859, 1.000000, 1.000000, 1.000000); }
			if(GetPlayerWeapon(i) == 31 && InfoJugador[i][jArmas][5] == 31) { RemovePlayerAttachedObject(i,8); }
		}
		// Slot 5	-	(Escopeta - Escopetas recotardas, Escopeta de combate |	Rifle, Sniper)
		if(InfoJugador[i][jArmas][3] == 25 || InfoJugador[i][jArmas][3] == 26 || InfoJugador[i][jArmas][3] == 27)
		{
			if(GetPlayerWeapon(i) != 25 && InfoJugador[i][jArmas][3] == 25) {SetPlayerAttachedObject(i,5,349,1,  0.195999,-0.102999,0.088999,172.099899,-137.700027,0.800023, 1.000000, 1.000000, 1.000000);}
			if(GetPlayerWeapon(i) == 25 && InfoJugador[i][jArmas][3] == 25) { RemovePlayerAttachedObject(i,5); }
			if(GetPlayerWeapon(i) != 26 && InfoJugador[i][jArmas][3] == 26) {SetPlayerAttachedObject(i, 5, 350, 8, -0.073000, -0.040999, 0.111999, -82.999992, 0.000000, 0.000000, 0.899999, 0.936000, 0.909000);}
			if(GetPlayerWeapon(i) == 26 && InfoJugador[i][jArmas][3] == 26) { RemovePlayerAttachedObject(i,8); }
			if(GetPlayerWeapon(i) != 27 && InfoJugador[i][jArmas][3] == 27) {SetPlayerAttachedObject(i,5,351,1,  0.195999,-0.102999,0.088999,172.099899,-137.700027,0.800023, 1.000000, 1.000000, 1.000000);}
			if(GetPlayerWeapon(i) == 27 && InfoJugador[i][jArmas][3] == 27) { RemovePlayerAttachedObject(i,5); }
		}
		else
		{
		    if(GetPlayerWeapon(i) != 33 && InfoJugador[i][jArmas][6] == 33) {SetPlayerAttachedObject(i,5,357,1,  0.195999,-0.102999,0.088999,172.099899,-137.700027,0.800023, 1.000000, 1.000000, 1.000000);}
			if(GetPlayerWeapon(i) == 33 && InfoJugador[i][jArmas][6] == 33) { RemovePlayerAttachedObject(i,5); }
			if(GetPlayerWeapon(i) != 34 && InfoJugador[i][jArmas][6] == 34) {SetPlayerAttachedObject(i,5,358,1,  0.190999, -0.080999, -0.155999, -160.200073, 154.300079, 0.000000, 1.000000, 1.000000, 1.000000);}
			if(GetPlayerWeapon(i) == 34 && InfoJugador[i][jArmas][6] == 34) { RemovePlayerAttachedObject(i,5); }
		}
        //Quitar objetos
		if(InfoJugador[i][jArmas][7] == 35 || InfoJugador[i][jArmas][7] == 36 || InfoJugador[i][jArmas][7] == 37 || InfoJugador[i][jArmas][7] == 38)
		{
			if(InfoJugador[i][jArmas][7] != 35 && InfoJugador[i][jArmas][7] != 36 && InfoJugador[i][jArmas][7] != 37 && InfoJugador[i][jArmas][7] != 38) { RemovePlayerAttachedObject(i,8); }
		}
		else
		{
		    if(InfoJugador[i][jArmas][5] != 30 && InfoJugador[i][jArmas][5] != 31) { RemovePlayerAttachedObject(i,8); }
		}
		if(InfoJugador[i][jArmas][3] == 25 || InfoJugador[i][jArmas][3] == 26 || InfoJugador[i][jArmas][3] == 27)
		{
		    //if(InfoJugador[i][jArmas][3] != 25 || InfoJugador[i][jArmas][3] != 26 || InfoJugador[i][jArmas][3] != 27) { RemovePlayerAttachedObject(i,4); }
		}
		else
		{
        if(InfoJugador[i][jArmas][6] != 33 && InfoJugador[i][jArmas][6] != 34) { RemovePlayerAttachedObject(i,5); }
		}
	}
}

stock QuitarArmas(playerid)
{
	if(Quitando[playerid] == 0)
	{
		Quitando[playerid] = 1;
		SetTimerEx("QuitandoA",600,false,"d",playerid);
	}
	InfoJugador[playerid][jArmas][0] = 0;  guardar_int_mysql("cuentas", "Arma_0", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][0]);
	InfoJugador[playerid][jArmas][1] = 0;  guardar_int_mysql("cuentas", "Arma_1", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][1]);
	InfoJugador[playerid][jArmas][2] = 0;  guardar_int_mysql("cuentas", "Arma_2", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][2]);
	InfoJugador[playerid][jArmas][3] = 0;  guardar_int_mysql("cuentas", "Arma_3", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][3]);
	InfoJugador[playerid][jArmas][4] = 0;  guardar_int_mysql("cuentas", "Arma_4", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][4]);
	InfoJugador[playerid][jArmas][5] = 0;  guardar_int_mysql("cuentas", "Arma_5", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][5]);
	InfoJugador[playerid][jArmas][6] = 0;  guardar_int_mysql("cuentas", "Arma_6", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][6]);
	InfoJugador[playerid][jArmas][7] = 0;  guardar_int_mysql("cuentas", "Arma_7", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][7]);
	InfoJugador[playerid][jArmas][8] = 0;  guardar_int_mysql("cuentas", "Arma_8", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][8]);
	InfoJugador[playerid][jArmas][9] = 0;  guardar_int_mysql("cuentas", "Arma_9", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][9]);
	InfoJugador[playerid][jArmas][10] = 0;  guardar_int_mysql("cuentas", "Arma_10", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][10]);
	InfoJugador[playerid][jArmas][11] = 0;  guardar_int_mysql("cuentas", "Arma_11", InfoJugador[playerid][jID], InfoJugador[playerid][jArmas][11]);
	SetPlayerArmedWeapon(playerid, 0);
	ResetPlayerWeapons(playerid);
}

forward QuitandoA(playerid);
public QuitandoA(playerid)
{
	if(Quitando[playerid] == 1)
	{
		Quitando[playerid] = 0;
	}
}

stock DesArmar(playerid)
{
    SetPlayerArmedWeapon(playerid, 0);
	ResetPlayerWeapons(playerid);
	return 1;
}


stock QuitarArma(playerid, weaponid)
{
	if(Quitando[playerid] == 0)
	{
		Quitando[playerid] = 1;
		SetTimerEx("QuitandoA",600,false,"d",playerid);
	}
	if(weaponid == 1)
	{
		InfoJugador[playerid][jArmas][0] = 0;
		ResetPlayerWeapons(playerid);
		DarArmas(playerid);
	}
	if(weaponid > 1 && weaponid <= 9)
	{
		InfoJugador[playerid][jArmas][1] = 0;
		ResetPlayerWeapons(playerid);
		DarArmas(playerid);
	}
	if( weaponid >= 10 && weaponid <= 15)
	{
		InfoJugador[playerid][jArmas][10] = 0;
		ResetPlayerWeapons(playerid);
		DarArmas(playerid);
	}
	if( weaponid == 16)
	{
		InfoJugador[playerid][jArmas][8] = 0;
		ResetPlayerWeapons(playerid);
		DarArmas(playerid);
	}
	if( weaponid >= 22 && weaponid <= 24 )
	{
		InfoJugador[playerid][jArmas][2] = 0;
		ResetPlayerWeapons(playerid);
		DarArmas(playerid);
	}
	if( weaponid >= 25 && weaponid <= 27 )
	{
		InfoJugador[playerid][jArmas][3] = 0;
		ResetPlayerWeapons(playerid);
		DarArmas(playerid);
	}
	if( weaponid == 28 || weaponid == 29 || weaponid == 32 )
	{
		InfoJugador[playerid][jArmas][4] = 0;
		ResetPlayerWeapons(playerid);
		DarArmas(playerid);
	}
	if( weaponid == 30 || weaponid == 31 )
	{
		InfoJugador[playerid][jArmas][5] = 0;
		ResetPlayerWeapons(playerid);
		DarArmas(playerid);
	}
	if( weaponid == 33 || weaponid == 34 )
	{
		InfoJugador[playerid][jArmas][6] = 0;
		ResetPlayerWeapons(playerid);
		DarArmas(playerid);
	}
	if( weaponid >= 35 && weaponid <= 38 )
	{
		InfoJugador[playerid][jArmas][7] = 0;
		ResetPlayerWeapons(playerid);
		DarArmas(playerid);
	}
	if( weaponid >= 41 && weaponid <= 43 )
	{
		InfoJugador[playerid][jArmas][9] = 0;
		ResetPlayerWeapons(playerid);
		DarArmas(playerid);
	}
	if( weaponid >= 44 && weaponid <= 46 )
	{
		InfoJugador[playerid][jArmas][11] = 0;
		ResetPlayerWeapons(playerid);
		DarArmas(playerid);
	}
	SetPlayerArmedWeapon(playerid, 0);
	ResetPlayerWeapons(playerid);
	return 1;
}

CMD:armas(playerid)
{
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes usar este comando en este momento.");
    new dialog[95 * 15], line_str[95], count = 0, string2[50];
    Loop(i, 12, 0)
	{
	    if(InfoJugador[playerid][jArmas][i] != 0)
	    {
	        format(line_str, sizeof line_str, "{ACFF9D}%s\n", NombreArmas(InfoJugador[playerid][jArmas][i]));
			strcat(dialog, line_str);
			format(string2, sizeof string2, "Ranura_Armas%d", count);
			SetPVarInt(playerid, string2, i);
			count++;
		}
	}
	if(count == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes armas en tu inventario.");
	Dialog_Show(playerid, ShowOptionsWeapons, DIALOG_STYLE_TABLIST, "Mis armas", dialog, "(>)", "Salir");
	return 1;
}
CMD:misarmas(playerid) return cmd_armas(playerid);

Dialog:ShowOptionsWeapons(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new lista = listitem, string2[50];
	format(string2, sizeof string2, "Ranura_Armas%d", lista);
	new slot = GetPVarInt(playerid, string2);
	SetPVarInt(playerid, "ID_Slot", slot);
	Dialog_Show(playerid, ShowOptionsWeapons2, DIALOG_STYLE_TABLIST, "Mis armas", "{D8F2D0}Tirar\n{D8F2D0}Ceder\n{F07944}Eliminar", "(>)", "Salir");
	return 1;
}

Dialog:ShowOptionsWeapons2(playerid, response, listitem, inputtext[])
{
	if (!response) return cmd_armas(playerid);
	new slot = GetPVarInt(playerid, "ID_Slot");
    new Float: X, Float: Y, Float: Z, ModeloSql = InfoJugador[playerid][jArmas][slot], string[120];
    switch(listitem)
	{
		case 0:
		{
            if (EnZonaSegura[playerid] != 0) return ShowInfoForPlayer(playerid, "No puedes tirar armas en ~r~zona segura.", 2000);
		    format(string, sizeof string, "* Tiraste tu %s al suelo.", NombreArmas(ModeloSql));
		    SendClientMessageEx(playerid, 0xccccccFF, string);
		    InfoJugador[playerid][jArmas][slot] = 0;
		    GetPlayerPos(playerid, X, Y, Z);
			TirarObjeto(ModeloSql, 2, 1, X, Y - 0.3, Z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			Streamer_Update(playerid);
			QuitarArma(playerid, ModeloSql);
			ResetPlayerWeapons(playerid);
			ActualizarArmas(playerid);
		}
		case 1:
		{
			Dialog_Show(playerid, ShowOptionsWeapons3, DIALOG_STYLE_INPUT, "{D8F2D0}Ceder - Armas", "{ebebeb}Ingresa el {D8F2D0}ID jugador {FFFFFF}de la persona.", "Continuar", "Volver");
		}
		case 2:
		{
		    format(string, sizeof string, "* Borraste tu %s.", NombreArmas(ModeloSql));
		    SendClientMessageEx(playerid, 0xccccccFF, string);
		    InfoJugador[playerid][jArmas][slot] = 0;
		    QuitarArma(playerid, ModeloSql);
		    ResetPlayerWeapons(playerid);
			ActualizarArmas(playerid);
		}

	}
	return 1;
}

Dialog:ShowOptionsWeapons3(playerid, response, listitem, inputtext[], params[])
{
	if (!response) return cmd_armas(playerid);
	if (!isnumeric(inputtext)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Solo puedes ingresar numeros, intenta de nuevo.");
	new slot = GetPVarInt(playerid, "ID_Slot");
	new playerid2 = strval(inputtext), string[210], ModeloSql = InfoJugador[playerid][jArmas][slot];
	if (playerid == playerid2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes compartir armas contigo mismo.");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~El jugador seleccionado no se encuentra conectado.");
    if (!CercaDelWeon(8.0, playerid, playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~La persona que seleccionaste no esta cerca tuyo.");
    if (InfoJugador[playerid][jArmas][slot] <= 0) { ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes esta arma en tu inventario."); return 1; }
    if (InfoJugador[playerid2][jHorasConectado] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Ese jugador no posee aun diez horas de juego.");
    QuitarArma(playerid, ModeloSql);
    DarArma(playerid2, ModeloSql);
    GivePlayerWeapon(playerid2, ModeloSql, 99999999);
	format(string, sizeof(string), "** Entregaste tu %s a %s.", NombreArmas(ModeloSql), NombreJugador(playerid2));
	SendClientMessageEx(playerid, 0xccccccFF, string);
	format(string, sizeof(string), "** %s te entrego su %s.", NombreJugador(playerid2), NombreArmas(ModeloSql));
	SendClientMessageEx(playerid2, 0xccccccFF, string);
	return 1;
}

NombreArmas(id)
{
    new wname[45];
	switch (id)
	{
		case 0: wname= "Vacio";
	    case 1: wname= "Puño americano";
	    case 2: wname= "Palo de golf";
		case 3: wname= "Porra";
	    case 4: wname= "Cuchillo";
	    case 5: wname= "Bate de beisbol";
	    case 6: wname= "Pala";
	    case 7: wname= "Palo de Billar";
	    case 8: wname= "Katana";
		case 9: wname= "Motosierra";
	    case 10: wname= "Consolador rosa";
	    case 11: wname= "Vibrador blanco";
	    case 12: wname= "Gran vibrador blanco";
	    case 13: wname= "Vibrador plateado";
	    case 14: wname= "Ramo de flores";
	    case 15: wname= "Baston";
	    case 16: wname= "Granada";
		case 17: wname= "Granada lacrimogena";
		case 18: wname= "Coctel Molotov";
	    case 22: wname= "9mm";
	    case 23: wname= "9mm silenciada";
	    case 24: wname= "Desert Eagle";
	    case 25: wname= "Escopeta";
		case 26: wname= "Escopeta recortada";
	    case 27: wname= "Escopeta de combate";
		case 28: wname= "UZI";
	    case 29: wname= "Mp5";
	    case 30: wname= "Ak-47";
	    case 31: wname= "M4";
		case 32: wname= "Tec-9";
	    case 33: wname= "Rifle";
		case 34: wname= "Francotirador";
		case 35: wname= "RPG";
		case 37: wname= "Lanzallamas";
		case 38: wname= "Minigun";
	    case 43: wname= "Camara";
    }
	return wname;
}
CMD:dararmas(playerid,params[])
{
	new id,arma;
	if(InfoJugador[playerid][jAdmin] < 8) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params,"bb",id,arma))
	{
	    if(IsPlayerNPC(id)) return 1;
	    //if(arma == 35 || arma == 36 || arma == 37 || arma == 38 || arma == 38 || arma == 39 || arma == 44 || arma == 41 || arma == 40 || arma == 41 || arma == 44) return SendClientMessage(playerid,-1,"No puedes dar ese arma.");
		DarArma(id,arma);
	}
	else return SendClientMessage(playerid, -1, "Escribe /dararma <PlayerID> <WeaponID>");
	return 1;
}



CMD:dararma(playerid, params[])
{
	new id, idarma, string[210];
	if(InfoJugador[playerid][jAdmin] < 8) return 0;
	OnDuty
	if (sscanf(params, "ii", id, idarma)) { _Mensaje(playerid, 3, "0", "/dararma [id/nombre] [id arma]"); return 1; }
	if (idarma <= 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~La ID del objeto no puede ser nula o negativa.");
	if (idarma < 1 || idarma >  58) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~ID de objeto erroneo.");
	if(idarma == 35 || idarma == 36 || idarma == 37 || idarma == 38 || idarma == 38 || idarma == 39 || idarma == 44 || idarma == 41) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No puedes dar ese arma.");
	DarArma(id,idarma);
	ActualizarArmas(playerid);
	format(string, sizeof string, "Administracion: %s(%d) le creo una %s a %s(%d).",NombreJugador(playerid), playerid, NombreArmas(idarma), NombreJugador(id), id);
	MensajeAdmin(string);
	if(IsPlayerInVehicle(playerid,GetPlayerVehicleID(playerid))) SetPlayerArmedWeapon(playerid, 0);
	return 1;
}

CMD:limpiararmas(playerid, params[])
{
	new playerid2, string[256];
	if (InfoJugador[playerid][jAdmin] < 2) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Tu no tienes acceso a el comando /Limpiararmas.");
	OnDuty
	if (sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/limpiararmas [id jugador]");
	if (!IsPlayerConnectedEx(playerid2)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~Jugador no conectado.");
	QuitarArmas(playerid2);
	format(string, sizeof string, "Administracion: %s utilizo /limpiararmas, Jugador ID: %s[%d].", NombreRJugador(playerid), NombreRJugador(playerid2), playerid2);
	MensajeAdmin(string);
	return 1;
}

slot_objeto(id_objeto, cantidad)
{
	new
		mensaje [128];

	format(mensaje, sizeof(mensaje), "%s ({00cc00}%d{FFFFFF})", InfoInventario[id_objeto][NombreObjeto], cantidad);
	return mensaje;
}

//Sistema de armas By Bernal//


//sistema de mochilas By bernal//

borrar_mochila(id)
{
	new string[210];
	InfoMochila[id][mModelo] = 0;
	Loop(x, 9, 0)
	{
		InfoMochila[id][mSlot][x] = 0;
		InfoMochila[id][mSlot_Cant][x] = 0;
		InfoMochila[id][mSlot_Tipo][x] = 0;
	}
	mysql_format(DBngrp, string, sizeof(string), "DELETE FROM `mochilas` WHERE `ID` = '%d'", InfoMochila[id][mID]);
	mysql_tquery(DBngrp, string);
	InfoMochila[id][mID] = 0;
	return 1;
}

generar_mochila(playerid)
{
	Loop(id, MAX_MOCHILAS, 1) if (InfoMochila[id][mModelo] == 0)
	{
		//se define la mochila
		InfoMochila[id][mModelo] = 371;
		new query[128];
		mysql_format(DBngrp, query, sizeof query, "INSERT INTO mochilas (Modelo) VALUES ('%d')", InfoMochila[id][mModelo]);
		mysql_tquery(DBngrp, query, "CrearMochilaDB", "ii", id, playerid);
		id = MAX_MOCHILAS;
		return 1;
	}
	return 1;
}

forward CrearMochilaDB(id, playerid);
public CrearMochilaDB(id, playerid)
{
	InfoMochila[id][mID] = cache_insert_id();
	cache_unset_active();
	InfoJugador[playerid][jManoDerecha] = 371;
	InfoJugador[playerid][jManoDerechaCant] = InfoMochila[id][mID];
	PonerObjeto(playerid, 1, 371);
	GivePlayerCash(playerid, -150000, "compra mochila");
	new query[256];
	mysql_format(DBngrp, query, sizeof query, "UPDATE cuentas SET Mano_derecha = 371, Cantidad_mano_derecha = '%d' WHERE ID = '%d'", InfoJugador[playerid][jManoDerechaCant], InfoJugador[playerid][jID]);
	mysql_tquery(DBngrp, query);
	totalmochilas++;
	return 1;
}

forward CargarMochilas();
public CargarMochilas()
{
	new cargaditos = 0;
	Loop(tabla, cache_num_rows(), 0)
	{
		new id = tabla+1;
		reg_int(tabla, "ID", InfoMochila[id][mID]);
		reg_int(tabla, "Modelo", InfoMochila[id][mModelo]);
		reg_int(tabla, "Slot_1", InfoMochila[id][mSlot][0]);
		reg_int(tabla, "Slot_1_Objeto", InfoMochila[id][mSlot_Cant][0]);
		reg_int(tabla, "Slot_1_Tipo", InfoMochila[id][mSlot_Tipo][0]);
		reg_int(tabla, "Slot_2", InfoMochila[id][mSlot][1]);
		reg_int(tabla, "Slot_2_Objeto", InfoMochila[id][mSlot_Cant][1]);
		reg_int(tabla, "Slot_2_Tipo", InfoMochila[id][mSlot_Tipo][1]);
		reg_int(tabla, "Slot_3", InfoMochila[id][mSlot][2]);
		reg_int(tabla, "Slot_3_Objeto", InfoMochila[id][mSlot_Cant][2]);
		reg_int(tabla, "Slot_3_Tipo", InfoMochila[id][mSlot_Tipo][2]);
		reg_int(tabla, "Slot_4", InfoMochila[id][mSlot][3]);
		reg_int(tabla, "Slot_4_Objeto", InfoMochila[id][mSlot_Cant][3]);
		reg_int(tabla, "Slot_4_Tipo", InfoMochila[id][mSlot_Tipo][3]);
		reg_int(tabla, "Slot_5", InfoMochila[id][mSlot][4]);
		reg_int(tabla, "Slot_5_Objeto", InfoMochila[id][mSlot_Cant][4]);
		reg_int(tabla, "Slot_5_Tipo", InfoMochila[id][mSlot_Tipo][4]);
		reg_int(tabla, "Slot_6", InfoMochila[id][mSlot][5]);
		reg_int(tabla, "Slot_6_Objeto", InfoMochila[id][mSlot_Cant][5]);
		reg_int(tabla, "Slot_6_Tipo", InfoMochila[id][mSlot_Tipo][5]);
		reg_int(tabla, "Slot_7", InfoMochila[id][mSlot][6]);
		reg_int(tabla, "Slot_7_Objeto", InfoMochila[id][mSlot_Cant][6]);
		reg_int(tabla, "Slot_7_Tipo", InfoMochila[id][mSlot_Tipo][6]);
		reg_int(tabla, "Slot_8", InfoMochila[id][mSlot][7]);
		reg_int(tabla, "Slot_8_Objeto", InfoMochila[id][mSlot_Cant][7]);
		reg_int(tabla, "Slot_8_Tipo", InfoMochila[id][mSlot_Tipo][7]);
		reg_int(tabla, "Slot_9", InfoMochila[id][mSlot][8]);
		reg_int(tabla, "Slot_9_Objeto", InfoMochila[id][mSlot_Cant][8]);
		reg_int(tabla, "Slot_9_Tipo", InfoMochila[id][mSlot_Tipo][8]);
		if (InfoMochila[id][mID]) totalmochilas++;
		cargaditos++;
	}
	printf("%d mochilas dinámicas (SQL: %d) cargadas correctamente.", cargaditos, totalmochilas);
	return 1;
}

CMD:mochila(playerid)
{
    if (GetPVarInt(playerid, "EnCrack") == 1) return ShowInfoForPlayer(playerid, "No puedes usar este comando en este momento.", 2000);
	if(InfoJugador[playerid][jEspalda] == 371)
	{
		new title[120];
		format(title, sizeof title, "Mochila | ID:%d", InfoJugador[playerid][jEspaldaCant]);
		Dialog_Show(playerid, ShowMochila, DIALOG_STYLE_LIST, title, "1. Guardar armas\n2. Guardar objetos\n3. Sacar objetos", "Aceptar", "Cancelar");
		SetPVarInt(playerid, "ID_Mochila", InfoJugador[playerid][jEspaldaCant]);
	}
	else return ShowInfoForPlayer(playerid, "No tienes una mochila en la espalda.", 2000);
	return 1;
}
CMD:m(playerid) return cmd_mochila(playerid);

Dialog:ShowMochila(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	switch(listitem)
	{
		case 0:
		{
			ActualizarManos(playerid);
		    new dialog[1500], line_str[95], conteo = 0, string2[50];
		    Loop(i, 12, 0)
			{
			    if(InfoJugador[playerid][jArmas][i] != 0)
			    {
			        format(line_str, sizeof line_str, "{ACFF9D}%s\n", NombreArmas(InfoJugador[playerid][jArmas][i]));
					strcat(dialog, line_str);
					format(string2, sizeof string2, "RanuraMochila_Arma%d", conteo);
					SetPVarInt(playerid, string2, i);
					conteo++;
				}
			}
			//show menu
			if(conteo == 0) return ShowInfoForPlayer(playerid, "No tienes nada que guardar.", 2000);
			Dialog_Show(playerid, ShowGuardarMochila1, DIALOG_STYLE_LIST, "Mochila", dialog, "Aceptar", "Cancelar");
		}
		case 1:
		{
			new dialog[95 * 15], line_str[95], count = 0;
		    if (InfoJugador[playerid][jManoDerecha] == 0) format(line_str, sizeof line_str, "{cccccc}Mano derecha: Nada\n");
			else format(line_str, sizeof line_str, "{FFFFFF}Mano derecha: %s\n", slot_objeto(InfoJugador[playerid][jManoDerecha], InfoJugador[playerid][jManoDerechaCant]));
			strcat(dialog, line_str);
			count++;
			if (InfoJugador[playerid][jManoIzquierda] == 0) format(line_str, sizeof line_str, "{cccccc}Mano izquierda: Nada\n");
			else format(line_str, sizeof line_str, "{FFFFFF}Mano izquierda: %s\n", slot_objeto(InfoJugador[playerid][jManoIzquierda], InfoJugador[playerid][jManoIzquierdaCant]));
			strcat(dialog, line_str);
			count++;
			//show menu
			if(count == 0) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No tienes nada que guardar.");
			Dialog_Show(playerid, ShowGuardarMochila2, DIALOG_STYLE_LIST, "Mochila", dialog, "Aceptar", "Cancelar");
		}
		case 2:
		{
			new string[210], dialog[2100], conteo = 0, gformat[50];
			Loop(id, MAX_MOCHILAS, 1) if(InfoMochila[id][mID] != 0)
			{
				if(InfoMochila[id][mID] == InfoJugador[playerid][jEspaldaCant])
				{
					Loop(e, 9, 0) if(InfoMochila[id][mSlot][e] != 0)
					{
						new Bonnet = InfoMochila[id][mSlot][e];
						if(InfoMochila[id][mSlot_Tipo][e] == 1) format(string, sizeof string, "{cccccc}%d. %s ({F6965F}%d{cccccc})\n", e, InfoInventario[Bonnet][NombreObjeto], InfoMochila[id][mSlot_Cant][e]);
						else format(string, sizeof string, "{cccccc}%d. %s\n", e+1, ArmasInfo[Bonnet][NombreArma]);
						strcat(dialog, string);
						//conteo
						format(gformat, sizeof gformat, "RanuraMochila%d", conteo);
						SetPVarInt(playerid, gformat, e);
						conteo++;
					}
					//show menu
					if(conteo == 0) return SendClientMessage(playerid, 0xccccccFF, "* No hay nada dentro de la mochila.");
					Dialog_Show(playerid, ShowGuardarMochila3, DIALOG_STYLE_LIST, "Mochila", dialog, "Aceptar", "Cancelar");
				}
			}
		}
	}
	return 1;
}

Dialog:ShowGuardarMochila1(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new lista = listitem, string2[50],string[500];
	format(string2, sizeof string2, "RanuraMochila_Arma%d", lista);
	new slot = GetPVarInt(playerid, string2), libre = -1, idmochila = GetPVarInt(playerid, "ID_Mochila");
	new bonnet = InfoJugador[playerid][jArmas][slot];
	Loop(x, 9, 0) if(InfoMochila[idmochila][mSlot][x] == 0)
	{
		libre = x;
		break;
	}
	if (libre == -1) return ShowInfoForPlayer(playerid, "No tienes mas espacios en la mochila.", 2000);
	InfoMochila[idmochila][mSlot][libre] = bonnet;
	InfoMochila[idmochila][mSlot_Cant][libre] = 1;
	InfoMochila[idmochila][mSlot_Tipo][libre] = 0;
	format(string, sizeof string, "** Guardaste tu %s en la mochila.", NombreArmas(bonnet));
	SendClientMessageEx(playerid, 0xFFFF00FF, string);
	QuitarArma(playerid, bonnet);
	ActualizarArmas(playerid);
	DarArmas(playerid);
	format(string2, sizeof string2, "Slot_%d", libre+1);
	guardar_int_mysql("mochilas", string2, InfoMochila[idmochila][mID], InfoMochila[idmochila][mSlot][libre]);
	format(string2, sizeof string2, "Slot_%d_Objeto", libre+1);
	guardar_int_mysql("mochilas", string2, InfoMochila[idmochila][mID], InfoMochila[idmochila][mSlot_Cant][libre]);
	format(string2, sizeof string2, "Slot_%d_Tipo", libre+1);
	guardar_int_mysql("mochilas", string2, InfoMochila[idmochila][mID], InfoMochila[idmochila][mSlot_Tipo][libre]);
	return 1;
}

Dialog:ShowGuardarMochila2(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new string2[50], string[500], idmochila = GetPVarInt(playerid, "ID_Mochila");
	switch(listitem)
	{
		case 0:
		{
		    ActualizarManos(playerid);
			if (InfoJugador[playerid][jManoDerecha] == 0) return ShowInfoForPlayer(playerid, "No tienes nada en tu mano derecha.", 2000);
			new Mano = InfoJugador[playerid][jManoDerecha], Cant = InfoJugador[playerid][jManoDerechaCant], libre = -1;
			Loop(x, 10, 0) if (InfoMochila[idmochila][mSlot][x] == 0)
			{
			    libre = x;
			    break;
			}
			if (libre == -1) return ShowInfoForPlayer(playerid, "No tienes mas espacios en la mochila.", 2000);
			InfoMochila[idmochila][mSlot][libre] = Mano;
			InfoMochila[idmochila][mSlot_Tipo][libre] = 1;
			InfoMochila[idmochila][mSlot_Cant][libre] = Cant;
			RemovePlayerAttachedObject(playerid, 6);
			InfoJugador[playerid][jManoDerecha] = 0;
			InfoJugador[playerid][jManoDerechaCant] = 0;
			ActualizarManos(playerid);
			format(string, sizeof string, "** Guardaste tu %s en la mochila.", InfoInventario[Mano][NombreObjeto]);
			SendClientMessageEx(playerid, 0xFFFF00FF, string);
			format(string2, sizeof string2, "Slot_%d", libre+1);
			guardar_int_mysql("mochilas", string2, InfoMochila[idmochila][mID], InfoMochila[idmochila][mSlot][libre]);
			format(string2, sizeof string2, "Slot_%d_Tipo", libre+1);
			guardar_int_mysql("mochilas", string2, InfoMochila[idmochila][mID], InfoMochila[idmochila][mSlot_Tipo][libre]);
			format(string2, sizeof string2, "Slot_%d_Objeto", libre+1);
			guardar_int_mysql("mochilas", string2, InfoMochila[idmochila][mID], InfoMochila[idmochila][mSlot_Cant][libre]);
		}
		case 1:
		{
		    if (InfoJugador[playerid][jManoIzquierda] == 0) return ShowInfoForPlayer(playerid, "No tienes nada en tu mano izquierda.", 2000);
			new Mano = InfoJugador[playerid][jManoIzquierda], Cant = InfoJugador[playerid][jManoIzquierdaCant], libre = -1;
			Loop(x, 10, 0) if (InfoMochila[idmochila][mSlot][x] == 0)
			{
			    libre = x;
			    break;
			}
			if (libre == -1) return ShowInfoForPlayer(playerid, "No tienes mas espacios en la mochila.", 2000);
			InfoMochila[idmochila][mSlot][libre] = Mano;
			InfoMochila[idmochila][mSlot_Tipo][libre] = 1;
			InfoMochila[idmochila][mSlot_Cant][libre] = Cant;
			RemovePlayerAttachedObject(playerid, 7);
			InfoJugador[playerid][jManoIzquierda] = 0;
			InfoJugador[playerid][jManoIzquierdaCant] = 0;
			ActualizarManos(playerid);
			format(string, sizeof string, "** Guardaste tu %s en la mochila.", InfoInventario[Mano][NombreObjeto]);
			SendClientMessageEx(playerid, 0xFFFF00FF, string);
			format(string2, sizeof string2, "Slot_%d", libre+1);
			guardar_int_mysql("mochilas", string2, InfoMochila[idmochila][mID], InfoMochila[idmochila][mSlot][libre]);
			format(string2, sizeof string2, "Slot_%d_Tipo", libre+1);
			guardar_int_mysql("mochilas", string2, InfoMochila[idmochila][mID], InfoMochila[idmochila][mSlot_Tipo][libre]);
			format(string2, sizeof string2, "Slot_%d_Objeto", libre+1);
			guardar_int_mysql("mochilas", string2, InfoMochila[idmochila][mID], InfoMochila[idmochila][mSlot_Cant][libre]);
		}
	}
	return 1;
}

Dialog:ShowGuardarMochila3(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new lista = listitem, gformat[40];
	format(gformat, sizeof gformat, "RanuraMochila%d", lista);
	new slot = GetPVarInt(playerid, gformat);
	new id = GetPVarInt(playerid, "ID_Mochila"), gold[32], string[210];
	ActualizarManos(playerid);
	new Bonnet = InfoMochila[id][mSlot][slot], Cant = InfoMochila[id][mSlot_Cant][slot];
	if (Bonnet == 0) return ShowInfoForPlayer(playerid, "Esta ranura se encuentra vacia.", 2000);
	if(InfoMochila[id][mSlot_Tipo][slot] == 1)
	{
		if (InfoJugador[playerid][jManoDerecha] == 0)
		{
			InfoJugador[playerid][jManoDerecha] = Bonnet;
			InfoJugador[playerid][jManoDerechaCant] = Cant;
			PonerObjeto(playerid, 1, Bonnet);
			ActualizarManos(playerid);
			InfoMochila[id][mSlot][slot] = 0;
			InfoMochila[id][mSlot_Cant][slot] = 0;
			InfoMochila[id][mSlot_Tipo][slot] = 0;
			format(string, sizeof(string), "Tomaste la %s de la mochila.", InfoInventario[Bonnet][NombreObjeto]);
	    	SendClientMessageEx(playerid, 0xFFFF00FF, string);
			format(gold, sizeof gold, "Slot_%d", slot+1);
			guardar_int_mysql("mochilas", gold, InfoMochila[id][mID], InfoMochila[id][mSlot][slot]);
			format(gold, sizeof gold, "Slot_%d_Objeto", slot+1);
			guardar_int_mysql("mochilas", gold, InfoMochila[id][mID], InfoMochila[id][mSlot_Cant][slot]);
			format(gold, sizeof gold, "Slot_%d_Tipo", slot+1);
			guardar_int_mysql("mochilas", gold, InfoMochila[id][mID], InfoMochila[id][mSlot_Tipo][slot]);
			return 1;
		}
		else if (InfoJugador[playerid][jManoIzquierda] == 0)
		{
			InfoJugador[playerid][jManoIzquierda] = Bonnet;
			InfoJugador[playerid][jManoIzquierdaCant] = Cant;
			PonerObjeto(playerid, 2, Bonnet);
			ActualizarManos(playerid);
			InfoMochila[id][mSlot][slot] = 0;
			InfoMochila[id][mSlot_Cant][slot] = 0;
			InfoMochila[id][mSlot_Tipo][slot] = 0;
			format(string, sizeof(string), "Tomaste la %s de la mochila.", InfoInventario[Bonnet][NombreObjeto]);
	    	SendClientMessageEx(playerid, 0xFFFF00FF, string);
			format(gold, sizeof gold, "Slot_%d", slot+1);
			guardar_int_mysql("mochilas", gold, InfoMochila[id][mID], InfoMochila[id][mSlot][slot]);
			format(gold, sizeof gold, "Slot_%d_Objeto", slot+1);
			guardar_int_mysql("mochilas", gold, InfoMochila[id][mID], InfoMochila[id][mSlot_Cant][slot]);
			format(gold, sizeof gold, "Slot_%d_Tipo", slot+1);
			guardar_int_mysql("mochilas", gold, InfoMochila[id][mID], InfoMochila[id][mSlot_Tipo][slot]);
			return 1;
		}
		ShowInfoForPlayer(playerid, "Tienes ambas manos ocupadas.", 2000);
	}
	else
	{
        if (EnZonaSegura[playerid] != 0) return ShowInfoForPlayer(playerid, "No puedes sacar armas en ~r~zona segura.", 2000);
	    DarArma(playerid, Bonnet);
	    format(string, sizeof(string), "** Tomaste la %s de la mochila.", NombreArmas(Bonnet));
	    SendClientMessageEx(playerid, 0xFFFF00FF, string);
	    InfoMochila[id][mSlot][slot] = 0;
		InfoMochila[id][mSlot_Cant][slot] = 0;
		InfoMochila[id][mSlot_Tipo][slot] = 0;
		format(gold, sizeof gold, "Slot_%d", slot+1);
		guardar_int_mysql("mochilas", gold, InfoMochila[id][mID], InfoMochila[id][mSlot][slot]);
		format(gold, sizeof gold, "Slot_%d_Objeto", slot+1);
		guardar_int_mysql("mochilas", gold, InfoMochila[id][mID], InfoMochila[id][mSlot_Cant][slot]);
		format(gold, sizeof gold, "Slot_%d_Tipo", slot+1);
		guardar_int_mysql("mochilas", gold, InfoMochila[id][mID], InfoMochila[id][mSlot_Tipo][slot]);
		return 1;
	}
	return 1;
}

//Sistema de bodas By Bernal//

CMD:casarse(playerid, params[])
{
	new playerid2, string[120];
	if(!_enPos(playerid, 7.0, -2936.1179,-1281.1608,5002.7139)) return ShowPlayerFooter(playerid, "~n~~n~~n~~n~~r~No estas en la iglesia.");
	if(sscanf(params, "d", playerid2)) return _Mensaje(playerid, 3, "0", "/casarse [id jugador]");
	if(!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "El jugador que intentas reportar no está conectado.", 2000);
	if(GetPlayerCash(playerid) < 3500) return ShowInfoForPlayer(playerid, "No tienes suficiente dinero para hacer esta accion.", 2000);
	if(InfoJugador[playerid2][jCasado] != 0) return ShowInfoForPlayer(playerid, "La persona que ingresaste ya esta casado/a.", 2000);
	if(InfoJugador[playerid][jCasado] != 0) return ShowInfoForPlayer(playerid, "Ya estas casado, no puedes intentarlo con otra persona.", 2000);
	if(OfrecisteCasarse[playerid] != -1) return ShowInfoForPlayer(playerid, "Ya ofreciste casarse con otra persona.", 2000);
	if(OfrecieronCasarse[playerid2] != -1) return ShowInfoForPlayer(playerid, "Ya le ofrecieron casarse con otra persona.", 2000);
	if (!CercaDelWeon(5.0, playerid2, playerid)) return ShowInfoForPlayer(playerid, "No estas cerca de esta persona.", 2000);
	OfrecisteCasarse[playerid] = playerid2;
	OfrecieronCasarse[playerid2] = playerid;
	SendClientMessageEx(playerid, 0x96BAF5FF, "* Le propusiste matrimonio a %s, espera su respuesta.", InfoJugador[playerid2][jNombre_Apellido]);
	SendClientMessageEx(playerid2, 0xFFFF00FF, "** %s te propuso matrimonio ¿aceptas?.", InfoJugador[playerid][jNombre_Apellido]);
	SendClientMessageEx(playerid2, 0xccccccFF, "** Puedes ingresar '/aceptarpareja' para aceptar la proposición.");
	format(string, sizeof string, "%s dice: %s ¿me aceptas como tu esposo/a?", NombreJugador(playerid), InfoJugador[playerid2][jNombre_Apellido]);
	ProxDetector(15.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
	return 1;
}

CMD:aceptarpareja(playerid)
{
	new string[210];
	new playerid2 = OfrecieronCasarse[playerid];
	if(InfoJugador[playerid2][jCasado] != 0) return ShowInfoForPlayer(playerid, "Esa persona se encuentra casada.", 2000);
	if (!CercaDelWeon(5.0, playerid2, playerid)) return ShowInfoForPlayer(playerid, "No estas cerca de esta persona.", 2000);
	format(string, sizeof string, "%s dice: Si acepto...", NombreJugador(playerid));
	ProxDetector(15.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
	format(string, sizeof string, "Cura dice: Yo los declaro marido y mujer, pueden besarse.");
	ProxDetector(15.0, playerid, string, C_FADE1, C_FADE2, C_FADE3, C_FADE4, C_FADE5);
	InfoJugador[playerid][jCasado] = 1;
	InfoJugador[playerid2][jCasado] = 1;
	alm(InfoJugador[playerid][jMatrimonio], InfoJugador[playerid2][jNombre_Apellido]);
	alm(InfoJugador[playerid2][jMatrimonio], InfoJugador[playerid][jNombre_Apellido]);
	guardar_int_mysql("cuentas", "Casado", InfoJugador[playerid][jID], InfoJugador[playerid][jCasado]);
	guardar_int_mysql("cuentas", "Casado", InfoJugador[playerid2][jID], InfoJugador[playerid2][jCasado]);
	guardar_string_mysql("cuentas", "Matrimonio", InfoJugador[playerid][jID], InfoJugador[playerid][jMatrimonio]);
	guardar_string_mysql("cuentas", "Matrimonio", InfoJugador[playerid2][jID], InfoJugador[playerid2][jMatrimonio]);
	format(string, sizeof string, "[CNN] %s Acaba de casarse con %s felicidades a los novios.", InfoJugador[playerid2][jNombre_Apellido], InfoJugador[playerid][jNombre_Apellido]);
	_MensajeSAN(0x00DC76FF, string);
	GivePlayerCash(playerid2, -3500, "matrimonio (iglesia)");
	OfrecisteCasarse[playerid2] = -1;
	OfrecieronCasarse[playerid] = -1;
	return 1;
}

//Sistema de reportes Nuevos By Bernal
CMD:reportar(playerid, params[])
{
	new playerid2, razon[50];
	if(CheckTimer(60, TiempoReporte[playerid])) return ShowInfoForPlayer(playerid, "Ya enviaste un reporte, espera 60 segundos.", 2000);
	if (StaffEnLinea() == 0) return ShowInfoForPlayer(playerid, "No hay miembro del staff online en este momento, intenta mas tarde.", 2000);
	if(sscanf(params, "ds[50]", playerid2, razon)) return _Mensaje(playerid, 3, "0", "/reportar [id jugador] [razon]");
	if(!IsPlayerConnectedEx(playerid2)) return ShowInfoForPlayer(playerid, "El jugador que intentas reportar no está conectado.", 2000);
	if(strlen(razon) > 50) return ShowInfoForPlayer(playerid, "El reporte no puede ser tan largo.", 2000);
	TiempoReporte[playerid] = gettime();
	RegistrarReporte(playerid, playerid2, razon);
	SendClientMessageEx(playerid, 0x52C54AFF, "** Tu reporte fue enviado al equipo administrativo.");
	return 1;
}
CMD:re(playerid, params[]) return cmd_reportar(playerid, params);


RegistrarReporte(playerid, idjugador, text[])
{
	new id = -1;
	Loop(e, MAX_REPORTES, 1) if (InfoReporte[e][rTiempoReporte] == 0)
	{
		id = e;
		break;
	}
	if (id == -1) return 0;
	new string[256];
	format(string, sizeof string, "[Reporte #%d] %s(%d) reportó a %s(%d).", id, InfoJugador[playerid][jNombre_Apellido], playerid, InfoJugador[idjugador][jNombre_Apellido], idjugador);
    MensajeAdmin3(string);
    format(string, sizeof string, "Razón: %s.", text);
    MensajeAdmin3(string);

	InfoReporte[id][rID] = id;
	InfoReporte[id][rUsuario] = playerid;
	InfoReporte[id][rReportado] = idjugador;
	alm(InfoReporte[id][rRazon], text);
	InfoReporte[id][rTiempoReporte] = 1;
	TotalReportes++;
	return 1;
}

CMD:reportes(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 1) return 1;
	OnDuty
	new dialog[1500], line_str[256], count, string2[120];
	Loop(i, MAX_REPORTES, 1)
	{
		if(InfoReporte[i][rID] != 0 && InfoReporte[i][rTiempoReporte] > 0)
		{
	        format(line_str, sizeof line_str, "[R#%d] %s(ID:%d) (tiempo: {DEDE6D}%s{cccccc})\n", i, InfoJugador[InfoReporte[i][rUsuario]][jNombre_Apellido], InfoReporte[i][rUsuario], Segundos_tiempo(InfoReporte[i][rTiempoReporte]));
			strcat(dialog, line_str);
			format(string2, sizeof string2, "RanuraReporte%d", count);
			SetPVarInt(playerid, string2, i);
            count ++;
		}
	}
	if(count == 0) return ShowInfoForPlayer(playerid, "No hay reportes pendientes de momento.", 2000);
	Dialog_Show(playerid, Reportes_Opciones, DIALOG_STYLE_TABLIST, "Reportes", dialog, "Continuar", "Cancelar");
	return 1;
}

Dialog:Reportes_Opciones(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new lista = listitem, string2[50];
	format(string2, sizeof string2, "RanuraReporte%d", lista);
	new slot = GetPVarInt(playerid, string2);
	new ID_Reporte = slot;
	SetPVarInt(playerid, "reporte", ID_Reporte);
    if(InfoReporte[ID_Reporte][rID] == 0) return 1;
	Dialog_Show(playerid, Reportes_Atencion, DIALOG_STYLE_LIST, "Reportes - Opciones", "[>] Revisar\n[>] Rechazar", "Continuar", "Atrás");
	if(!IsPlayerConnectedEx(InfoReporte[ID_Reporte][rUsuario])) return ShowInfoForPlayer(playerid, "El reportante esta desconectado.", 2000);
	return 1;
}

Dialog:Reportes_Atencion(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	new ID_Reporte = GetPVarInt(playerid, "reporte"), string[120];
	switch(listitem)
	{
	    case 0:
	    {
	        if(InfoReporte[ID_Reporte][rID] == 0) return 1;
		    SendClientMessageEx(playerid, 0x9BCB77FF,"[R#%d] Reportante: %s(%d) | Reportado: %s(%d)", ID_Reporte, InfoJugador[InfoReporte[ID_Reporte][rUsuario]][jNombre_Apellido], InfoReporte[ID_Reporte][rUsuario], InfoJugador[InfoReporte[ID_Reporte][rReportado]][jNombre_Apellido], InfoReporte[ID_Reporte][rReportado]);
			SendClientMessageEx(playerid, 0x9BCB77FF,"Razon: %s.", InfoReporte[ID_Reporte][rRazon]);
			SendClientMessageEx(InfoReporte[ID_Reporte][rUsuario], 0x52C54AFF, "** Tu reporte esta siendo revisado por un administrador.");
			format(string, sizeof string, "Administracion %s(%d) se encuentra revisando el reporte #%d.", InfoJugador[playerid][jNombre_Apellido], playerid, ID_Reporte);
			MensajeAdmin(string);
			InfoReporte[ID_Reporte][rTiempoReporte] = 0;
			InfoReporte[ID_Reporte][rID] = 0;
			if(!IsPlayerConnectedEx(InfoReporte[ID_Reporte][rUsuario])) return ShowInfoForPlayer(playerid, "El reportante esta desconectado.", 2000);
		}
		case 1:
		{
		    if(InfoReporte[ID_Reporte][rID] == 0) return 1;
			SendClientMessageEx(InfoReporte[ID_Reporte][rUsuario], 0xE9412AFF, "** Tu reporte #%d fue rechazado por un administrador.", ID_Reporte);
			format(string, sizeof string, "Administracion %s(%d) ha rechazado el reporte #%d.", InfoJugador[playerid][jNombre_Apellido], playerid, ID_Reporte);
			MensajeAdmin(string);

			InfoReporte[ID_Reporte][rTiempoReporte] = 0;
			InfoReporte[ID_Reporte][rID] = 0;
			if(!IsPlayerConnectedEx(InfoReporte[ID_Reporte][rUsuario])) return ShowInfoForPlayer(playerid, "El reportante esta desconectado.", 2000);
		}
	}
	return 1;
}

CMD:limpiarreportes(playerid)
{
	if (InfoJugador[playerid][jAdmin] < 2) return 1;
	OnDuty
	new string[128], conteo = 0;
	Loop(i, MAX_REPORTES, 1)
	{
	    if(InfoReporte[i][rID] != 0) InfoReporte[i][rTiempoReporte] = 0, InfoReporte[i][rID] = 0, conteo++;
	}
	format(string, sizeof string, "Administracon: %s(%d) ha limpiado los %d reportes activos.", InfoJugador[playerid][jNombre_Apellido], playerid, conteo);
	MensajeAdmin(string);
	return 1;
}

Dialog:EmisoraCoche(playerid, response, listitem, inputtext[])
{
	if(!response) return cmd_estereo(playerid);
	if(isnull(inputtext)) return SendClientMessageEx(playerid, 0xccccccFF, "** No ingresaste ninguna URL valida.");
	_estereo(playerid, inputtext, 1);
	AccionesRol(playerid, 0, "cambia la estacion de radio del coche.");
	return 1;
}

//Sitema de referido


